Index: src/Makefile.am
===================================================================
--- src/Makefile.am	(revision 2976)
+++ src/Makefile.am	(working copy)
@@ -319,6 +319,7 @@
 		server/zone/objects/terrain/layer/filters/FilterFractal.cpp \
 		server/zone/objects/intangible/IntangibleObjectImplementation.cpp \
 		server/zone/objects/staticobject/StaticObjectImplementation.cpp \
+		server/zone/objects/structure/PlayerStructureComponent.cpp \
 		server/zone/objects/intangible/VehicleControlDeviceImplementation.cpp \
 		server/zone/objects/tangible/TangibleObjectImplementation.cpp \
 		server/zone/objects/tangible/InstrumentImplementation.cpp \
Index: src/server/zone/ZoneProcessServerImplementation.cpp
===================================================================
--- src/server/zone/ZoneProcessServerImplementation.cpp	(revision 2976)
+++ src/server/zone/ZoneProcessServerImplementation.cpp	(working copy)
@@ -103,7 +103,7 @@
 
 	nameManager = new NameManager(_this);
 	holocronManager = new HolocronManager(_this);
-	suiManager = new SuiManager(_this);
+	suiManager = new SuiManager();
 
 	objectController = new ObjectController(_this);
 
Index: src/server/zone/managers/collision/CollisionManager.cpp
===================================================================
--- src/server/zone/managers/collision/CollisionManager.cpp	(revision 2976)
+++ src/server/zone/managers/collision/CollisionManager.cpp	(working copy)
@@ -8,6 +8,7 @@
 #include "CollisionManager.h"
 #include "server/zone/Zone.h"
 #include "server/zone/objects/building/BuildingObject.h"
+#include "server/zone/objects/creature/CreatureObject.h"
 #include "server/zone/objects/cell/CellObject.h"
 #include "server/zone/templates/SharedObjectTemplate.h"
 #include "server/zone/templates/appearance/PortalLayout.h"
Index: src/server/zone/managers/structure/StructureManager.cpp
===================================================================
--- src/server/zone/managers/structure/StructureManager.cpp	(revision 2976)
+++ src/server/zone/managers/structure/StructureManager.cpp	(working copy)
@@ -22,7 +22,7 @@
  *	StructureManagerStub
  */
 
-enum {RPC_LOADSTRUCTURES__,RPC_PLACESTRUCTUREFROMDEED__PLAYERCREATURE_LONG_FLOAT_FLOAT_INT_,RPC_DESTROYSTRUCTURE__PLAYERCREATURE_STRUCTUREOBJECT_,RPC_REDEEDSTRUCTURE__PLAYERCREATURE_STRUCTUREOBJECT_BOOL_,RPC_DECLARERESIDENCE__PLAYERCREATURE_STRUCTUREOBJECT_,RPC_CHANGEPRIVACY__PLAYERCREATURE_STRUCTUREOBJECT_,RPC_GETTIMESTRING__INT_,RPC_GETINRANGEPARKINGGARAGE__SCENEOBJECT_INT_};
+enum {RPC_LOADSTRUCTURES__,RPC_PLACESTRUCTUREFROMDEED__PLAYERCREATURE_LONG_FLOAT_FLOAT_INT_,RPC_DESTROYSTRUCTURE__PLAYERCREATURE_STRUCTUREOBJECT_,RPC_REDEEDSTRUCTURE__PLAYERCREATURE_STRUCTUREOBJECT_BOOL_,RPC_DECLARERESIDENCE__PLAYERCREATURE_STRUCTUREOBJECT_,RPC_CHANGEPRIVACY__PLAYERCREATURE_STRUCTUREOBJECT_,RPC_GETTIMESTRING__INT_,RPC_GETINRANGEPARKINGGARAGE__SCENEOBJECT_INT_,RPC_STARTDESTROYSTRUCTURESESSION__PLAYERCREATURE_STRUCTUREOBJECT_};
 
 StructureManager::StructureManager(Zone* zone, ZoneProcessServer* processor) : ManagedService(DummyConstructorParameter::instance()) {
 	StructureManagerImplementation* _implementation = new StructureManagerImplementation(zone, processor);
@@ -177,6 +177,21 @@
 		return _implementation->getInRangeParkingGarage(obj, range);
 }
 
+void StructureManager::startDestroyStructureSession(PlayerCreature* player, StructureObject* structureObject) {
+	StructureManagerImplementation* _implementation = (StructureManagerImplementation*) _getImplementation();
+	if (_implementation == NULL) {
+		if (!deployed)
+			throw ObjectNotDeployedException(this);
+
+		DistributedMethod method(this, RPC_STARTDESTROYSTRUCTURESESSION__PLAYERCREATURE_STRUCTUREOBJECT_);
+		method.addObjectParameter(player);
+		method.addObjectParameter(structureObject);
+
+		method.executeWithVoidReturn();
+	} else
+		_implementation->startDestroyStructureSession(player, structureObject);
+}
+
 DistributedObjectServant* StructureManager::_getImplementation() {
 
 	_updated = true;
@@ -377,6 +392,9 @@
 	case RPC_GETINRANGEPARKINGGARAGE__SCENEOBJECT_INT_:
 		resp->insertLong(getInRangeParkingGarage((SceneObject*) inv->getObjectParameter(), inv->getSignedIntParameter())->_getObjectID());
 		break;
+	case RPC_STARTDESTROYSTRUCTURESESSION__PLAYERCREATURE_STRUCTUREOBJECT_:
+		startDestroyStructureSession((PlayerCreature*) inv->getObjectParameter(), (StructureObject*) inv->getObjectParameter());
+		break;
 	default:
 		return NULL;
 	}
@@ -416,6 +434,10 @@
 	return ((StructureManagerImplementation*) impl)->getInRangeParkingGarage(obj, range);
 }
 
+void StructureManagerAdapter::startDestroyStructureSession(PlayerCreature* player, StructureObject* structureObject) {
+	((StructureManagerImplementation*) impl)->startDestroyStructureSession(player, structureObject);
+}
+
 /*
  *	StructureManagerHelper
  */
Index: src/server/zone/managers/structure/StructureManager.h
===================================================================
--- src/server/zone/managers/structure/StructureManager.h	(revision 2976)
+++ src/server/zone/managers/structure/StructureManager.h	(working copy)
@@ -148,6 +148,8 @@
 
 	SceneObject* getInRangeParkingGarage(SceneObject* obj, int range = 64);
 
+	void startDestroyStructureSession(PlayerCreature* player, StructureObject* structureObject);
+
 	DistributedObjectServant* _getImplementation();
 
 	void _setImplementation(DistributedObjectServant* servant);
@@ -245,6 +247,8 @@
 
 	SceneObject* getInRangeParkingGarage(SceneObject* obj, int range = 64);
 
+	void startDestroyStructureSession(PlayerCreature* player, StructureObject* structureObject);
+
 	StructureManager* _this;
 
 	operator const StructureManager*();
@@ -304,6 +308,8 @@
 
 	SceneObject* getInRangeParkingGarage(SceneObject* obj, int range);
 
+	void startDestroyStructureSession(PlayerCreature* player, StructureObject* structureObject);
+
 };
 
 class StructureManagerHelper : public DistributedObjectClassHelper, public Singleton<StructureManagerHelper> {
Index: src/server/zone/managers/structure/StructureManager.idl
===================================================================
--- src/server/zone/managers/structure/StructureManager.idl	(revision 2976)
+++ src/server/zone/managers/structure/StructureManager.idl	(working copy)
@@ -192,5 +192,13 @@
 	 * @return Returns a SceneObject representing the nearest parking garage, or NULL if one was not found in the required range.
 	 */
 	public native SceneObject getInRangeParkingGarage(SceneObject obj, int range = 64);
+	
+	/**
+	 * Begins a session for destroying a structure by sending a box with information about the structure,
+	 * followed by a confirmation box requesting a confirmation code.
+	 * @param player The player destroying the structure.
+	 * @param structure The structure being destroyed.
+	 */
+	public native void startDestroyStructureSession(PlayerCreature player, StructureObject structureObject);
 }
 
Index: src/server/zone/managers/structure/StructureManagerImplementation.cpp
===================================================================
--- src/server/zone/managers/structure/StructureManagerImplementation.cpp	(revision 2976)
+++ src/server/zone/managers/structure/StructureManagerImplementation.cpp	(working copy)
@@ -1260,18 +1260,21 @@
 		return 1;
 	}
 
+	//Make it a player structure
+	Reference<PlayerStructureComponent*> playerStructureComponent = structureObject->createPlayerStructureComponent(player);
+
 	//Surplus Maintenance and Power
 	if (deed->isBuildingDeed()) {
 		BuildingDeed* buildingDeed = (BuildingDeed*) deed;
 
-		structureObject->setSurplusMaintenance(buildingDeed->getSurplusMaintenance());
+		playerStructureComponent->setSurplusMaintenance(buildingDeed->getSurplusMaintenance());
 	}
 
 	if (deed->isInstallationDeed()) {
 		InstallationDeed* installationDeed = (InstallationDeed*) deed;
 
-		structureObject->setSurplusMaintenance(installationDeed->getSurplusMaintenance());
-		structureObject->setSurplusPower(installationDeed->getSurplusPower());
+		playerStructureComponent->setSurplusMaintenance(installationDeed->getSurplusMaintenance());
+		playerStructureComponent->setSurplusPower(installationDeed->getSurplusPower());
 	}
 
 	player->setLotsRemaining(lotsRemaining - lotsRequired);
@@ -1327,6 +1330,8 @@
 	float floraRadius = structureTemplate->getClearFloraRadius();
 	bool snapToTerrain = structureTemplate->getSnapToTerrain();
 
+	//TODO: Get the structure footprint here.
+
 	float width = structureTemplate->getWidth();
 	float length = structureTemplate->getLength();
 
@@ -1351,16 +1356,24 @@
 
 	//info("initializing position to z:" + String::valueOf(z), true);
 
+	Reference<PlayerStructureComponent*> playerStructureComponent = structureObject->getPlayerStructureComponent();
+
 	//Finish setting up the structure.
 	structureObject->setPublicStructure(structureTemplate->isPublicStructure());
 	structureObject->initializePosition(x, z, y);
 	structureObject->setDirection(direction);
-	structureObject->setOwnerObjectID(player->getObjectID());
-	structureObject->setDeedObjectID(deedID);
+
+	if (playerStructureComponent != NULL) {
+		structureObject->setOwnerObjectID(player->getObjectID());
+		playerStructureComponent->setDeedObjectID(deedID);
+	}
+
 	structureObject->insertToZone(zone);
 
 	structureObject->createChildObjects();
 
+	//TODO: Refactor Sign Creation into it's own method.
+
 	if (structureObject->isBuildingObject()) {
 		SharedBuildingObjectTemplate* sbot = dynamic_cast<SharedBuildingObjectTemplate*>(structureTemplate);
 
@@ -1484,6 +1497,8 @@
 
 	structureObject->removeFromZone();
 
+	Reference<PlayerStructureComponent*> playerStructureComponent = structureObject->getPlayerStructureComponent();
+
 	int lotsRemaining = player->getLotsRemaining();
 
 	if (!player->getPlayerObject()->isPrivileged())
@@ -1491,7 +1506,7 @@
 
 	//If the deed object id is not 0, then the deed wasn't reclaimed.
 	//NOTICE: This could potentially give an erroneous message if the deed never existed when the structure was placed.
-	if (structureObject->getDeedObjectID() != 0)
+	if (playerStructureComponent != NULL && playerStructureComponent->getDeedObjectID() != 0)
 		player->sendSystemMessage("@player_structure:structure_destroyed"); //Structure destroyed.
 	else
 		player->sendSystemMessage("@player_structure:deed_reclaimed"); //Structure destroyed and deed reclaimed.
@@ -1507,10 +1522,20 @@
 int StructureManagerImplementation::redeedStructure(PlayerCreature* player, StructureObject* structureObject, bool destroy) {
 	ZoneServer* zoneServer = player->getZoneServer();
 
+	Reference<PlayerStructureComponent*> playerStructureComponent = structureObject->getPlayerStructureComponent();
+
+	if (playerStructureComponent == NULL) {
+		if (destroy)
+				destroyStructure(player, structureObject);
+
+		return 0;
+	}
+
+	uint64 deedObjectID = playerStructureComponent->getDeedObjectID();
 	int surplusMaintenance = structureObject->getSurplusMaintenance();
 	int redeedCost = structureObject->getRedeedCost();
 
-	ManagedReference<SceneObject*> obj = zoneServer->getObject(structureObject->getDeedObjectID());
+	ManagedReference<SceneObject*> obj = zoneServer->getObject(deedObjectID);
 
 	if (obj != NULL && obj->isDeedObject()) {
 		Deed* deed = (Deed*) obj.get();
@@ -1539,7 +1564,7 @@
 					inventory->addObject(deed, -1, true);
 
 					//Since we have retrieved the deed, set the structures deed id to 0 so that it doesn't get deleted from the database.
-					structureObject->setDeedObjectID(0);
+					playerStructureComponent->setDeedObjectID(0);
 				} else {
 					//The deed cant be returned to them because their inventory is full. Abort the deletion of the structure here.
 					player->sendSystemMessage("@player_structure:inventory_full"); //This installation can not be redeeded because your inventory does not have room to put the deed.
@@ -1755,3 +1780,11 @@
 
 	return NULL;
 }
+
+void StructureManagerImplementation::startDestroyStructureSession(PlayerCreature* player, StructureObject* structureObject) {
+	ManagedReference<StructureDestroySession*> session = new StructureDestroySession(player, structureObject);
+	player->addActiveSession(SessionFacadeType::STRUCTURE_DESTROY, session);
+	structureObject->addActiveSession(SessionFacadeType::STRUCTURE_DESTROY, session);
+
+	structureObject->sendDestroyConfirmTo(player);
+}
Index: src/server/zone/managers/sui/SuiManager.cpp
===================================================================
--- src/server/zone/managers/sui/SuiManager.cpp	(revision 2976)
+++ src/server/zone/managers/sui/SuiManager.cpp	(working copy)
@@ -43,78 +43,11 @@
 */
 
 #include "SuiManager.h"
-
-/*
-#include "../../objects/player/sui/messagebox/SuiMessageBox.h"
-#include "../../objects/player/sui/colorpicker/SuiColorPicker.h"*/
-
-#include "../radial/RadialManager.h"
-
-#include "server/zone/ZoneProcessServer.h"
 #include "server/zone/objects/player/PlayerCreature.h"
-#include "server/zone/objects/player/sui/SuiWindowType.h"
-#include "server/zone/objects/player/sui/banktransferbox/SuiBankTransferBox.h"
-#include "server/zone/objects/player/sui/characterbuilderbox/SuiCharacterBuilderBox.h"
-#include "server/zone/objects/player/sui/transferbox/SuiTransferBox.h"
-#include "server/zone/objects/creature/commands/UnconsentCommand.h"
-#include "server/zone/managers/objectcontroller/ObjectController.h"
-#include "server/zone/managers/resource/ResourceManager.h"
-#include "server/zone/managers/professions/ProfessionManager.h"
-#include "server/zone/managers/planet/PlanetManager.h"
-#include "server/zone/managers/structure/StructureManager.h"
-#include "server/zone/objects/group/GroupObject.h"
-#include "server/zone/packets/chat/ChatSystemMessage.h"
 #include "server/zone/objects/player/sui/SuiBox.h"
-#include "server/zone/objects/player/sui/listbox/SuiListBox.h"
-#include "server/zone/objects/player/sui/listbox/teachplayerlistbox/TeachPlayerListBox.h"
-#include "server/zone/objects/player/sui/listbox/playerlearnlistbox/PlayerLearnListBox.h"
-#include "server/zone/objects/player/sui/listbox/resourcedeedlistbox/ResourceDeedListBox.h"
-#include "server/zone/objects/player/sui/inputbox/SuiInputBox.h"
-#include "server/zone/objects/player/sui/messagebox/SuiMessageBox.h"
-#include "server/zone/Zone.h"
-#include "server/zone/ZoneServer.h"
-#include "server/zone/managers/minigames/FishingManager.h"
-#include "server/zone/managers/minigames/GamblingManager.h"
-#include "server/zone/managers/player/PlayerManager.h"
-#include "server/zone/objects/tangible/tool/SurveyTool.h"
-#include "server/zone/objects/tangible/ticket/TicketObject.h"
-#include "server/zone/objects/installation/InstallationObject.h"
-#include "server/zone/objects/installation/factory/FactoryObject.h"
-#include "server/zone/objects/manufactureschematic/ManufactureSchematic.h"
-#include "server/zone/objects/building/city/CityHallObject.h"
-#include "server/zone/objects/tangible/terminal/characterbuilder/CharacterBuilderTerminal.h"
-#include "server/zone/objects/tangible/deed/resource/ResourceDeed.h"
-#include "server/zone/managers/planet/MapLocationType.h"
-#include "server/zone/managers/city/CityManager.h"
-#include "server/zone/objects/creature/commands/FindCommand.h"
-
-#include "server/zone/objects/creature/commands/sui/DestroyCommandSuiCallback.h"
-#include "server/zone/objects/creature/commands/sui/FindCommandSuiCallback.h"
-#include "server/zone/objects/creature/commands/sui/ListGuildsResponseSuiCallback.h"
-
-#include "server/zone/objects/player/sessions/sui/SlicingSessionSuiCallback.h"
-
-
-
-#include "server/zone/objects/player/sessions/vendor/sui/CreateVendorSuiCallback.h"
-#include "server/zone/objects/player/sessions/vendor/sui/NameVendorSuiCallback.h"
-
-#include "server/zone/objects/creature/sui/RepairVehicleSuiCallback.h"
-#include "server/zone/objects/creature/CreatureAttribute.h"
-#include "server/zone/objects/creature/CreatureState.h"
-
-#include "server/zone/objects/tangible/tool/sui/SurveyToolSetRangeSuiCallback.h"
-
-#include "server/zone/managers/guild/GuildManager.h"
-#include "server/zone/objects/tangible/terminal/guild/GuildTerminal.h"
-#include "server/zone/objects/guild/GuildObject.h"
-
-#include "server/zone/objects/tangible/sign/SignObject.h"
-
-
-SuiManager::SuiManager(ZoneProcessServer* serv) : Logger("SuiManager") {
-	server = serv;
+#include "server/zone/objects/player/sui/SuiCallback.h"
 
+SuiManager::SuiManager() : Logger("SuiManager") {
 	setGlobalLogging(true);
 	setLogging(false);
 }
@@ -129,7 +62,7 @@
 	if (suiBox == NULL)
 		return;
 
-	//Remove the box from the player, callback can readd it to the player if needed.
+	//Remove the box from the player, callback can re-add it to the player if needed in the callback.
 	player->removeSuiBox(boxID);
 	suiBox->clearOptions(); //TODO: Eventually SuiBox needs to be cleaned up to not need this.
 
@@ -141,1136 +74,6 @@
 	}
 
 	StringBuffer msg;
-	msg << "Unknown message callback with SuiWindowType: " << hex << windowType << ". Falling back on old handler system.";
-	//info(msg, true);
-
-	switch (windowType) {
-	case SuiWindowType::STRUCTURE_STATUS:
-		handleStructureStatus(player, suiBox, cancel, args);
-		break;
-	case SuiWindowType::STRUCTURE_DESTROY_CONFIRM:
-		handleStructureDestroyConfirm(player, suiBox, cancel, args);
-		break;
-	case SuiWindowType::STRUCTURE_DESTROY_CODE:
-		handleStructureDestroyCode(player, suiBox, cancel, args);
-		break;
-	case SuiWindowType::STRUCTURE_MANAGE_MAINTENANCE:
-		handleManageMaintenance(player, suiBox, cancel, args);
-		break;
-	case SuiWindowType::MEDIC_CONSENT:
-		handleConsentBox(player, suiBox, cancel, args);
-		break;
-	case SuiWindowType::CLONE_REQUEST:
-		handleCloneRequest(player, suiBox, cancel, args);
-		break;
-	case SuiWindowType::DANCING_START:
-		handleStartDancing(player, suiBox, cancel, args);
-		break;
-	case SuiWindowType::DANCING_CHANGE:
-		handleStartDancing(player, suiBox, cancel, args);
-		break;
-	case SuiWindowType::MUSIC_START:
-		handleStartMusic(player, suiBox, cancel, args);
-		break;
-	case SuiWindowType::MUSIC_CHANGE:
-		handleStartMusic(player, suiBox, cancel, args);
-		break;
-	case SuiWindowType::BAND_CHANGE:
-		handleStartMusic(player, suiBox, cancel, args);
-		break;
-	case SuiWindowType::SAMPLE_RADIOACTIVE_CONFIRM:
-		handleSampleRadioactiveConfirm(player, suiBox, cancel, args);
-		break;
-	case SuiWindowType::SURVEY_TOOL_CONCENTRATED_MINIGAME:
-		handleSurveyConcentratedMinigame(player, suiBox, cancel, args);
-		break;
-	case SuiWindowType::SURVEY_TOOL_CONCENTRATED_MINIGAME2:
-		handleSurveyConcentratedMinigame2(player, suiBox, cancel, args);
-		break;
-	case SuiWindowType::TICKET_COLLECTOR_RESPONSES:
-		handleTicketCollectorResponse(player, suiBox, cancel, args);
-		break;
-	case SuiWindowType::BANK_TRANSFER:
-		handleBankTransfer(player, suiBox, cancel, args);
-		break;
-	case SuiWindowType::FISHING:
-		handleFishingAction(player, suiBox, cancel, args);
-		break;
-	case SuiWindowType::GAMBLING_ROULETTE:
-		handleGamblingRoulette(player, suiBox, cancel, args);
-		break;
-	case SuiWindowType::GAMBLING_SLOT:
-		handleGamblingSlot(player, suiBox, cancel, args);
-		break;
-	case SuiWindowType::GAMBLING_SLOT_PAYOUT:
-		handleGamblingSlotPayout(player, suiBox, cancel, args);
-		break;
-	case SuiWindowType::CHARACTER_BUILDER_LIST:
-		handleCharacterBuilderSelectItem(player, suiBox, cancel, args);
-		break;
-	case SuiWindowType::MEDIC_DIAGNOSE:
-		handleDiagnose(player, suiBox, cancel, args);
-		break;
-	case SuiWindowType::FREE_RESOURCE:
-		handleGiveFreeResource(player, suiBox, cancel, args);
-		break;
-	case SuiWindowType::TEACH_SKILL:
-		handleTeachSkill(player, suiBox, cancel, args);
-		break;
-	case SuiWindowType::TEACH_PLAYER:
-		handleTeachPlayer(player, suiBox, cancel, args);
-		break;
-	case SuiWindowType::OBJECT_NAME:
-		handleSetObjectName(player, suiBox, cancel, args);
-		break;
-	case SuiWindowType::STRUCTURE_ADD_ENERGY:
-		handleAddEnergy(player, suiBox, cancel, args);
-		break;
-	case SuiWindowType::FACTORY_SCHEMATIC2BUTTON:
-		handleInsertFactorySchem2(player, suiBox, cancel, args);
-		break;
-	case SuiWindowType::FACTORY_SCHEMATIC3BUTTON:
-		handleInsertFactorySchem3(player, suiBox, cancel, args);
-		break;
-	case SuiWindowType::CITY_CREATE:
-		handleCreateCity(player, suiBox, cancel, args);
-		break;
-	case SuiWindowType::CITY_SET_NAME:
-		handleChangeCityName(player, suiBox, cancel, args);
-		break;
-	case SuiWindowType::CITY_ENABLE_ZONING:
-		handleCityEnableZoning(player, suiBox, cancel, args);
-		break;
-	case SuiWindowType::CITY_MILITIA:
-		handleManageMilitia(player, suiBox, cancel, args);
-		break;
-	case SuiWindowType::CITY_ADD_MILITIA:
-		handleAddMilitia(player, suiBox, cancel, args);
-		break;
-	}
-}
-
-void SuiManager::handleSetObjectName(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args) {
-	if (!suiBox->isInputBox() || cancel != 0)
-		return;
-
-	ManagedReference<SceneObject*> object = suiBox->getUsingObject();
-
-	if (object == NULL)
-		return;
-
-	if (args->size() < 1)
-		return;
-
-	UnicodeString objectName = args->get(0);
-
-	if (object->isBuildingObject()) {
-		BuildingObject* building = (BuildingObject*) object.get();
-
-		ManagedReference<SignObject*> sign = building->getSignObject();
-
-		if (sign != NULL) {
-			object = sign;
-
-			StringIdChatParameter params("@player_structure:prose_sign_name_updated"); //Sign name successfully updated to '%TO'.
-			params.setTO(objectName);
-			player->sendSystemMessage(params);
-		}
-	}
-
-	object->setCustomObjectName(objectName , true);
-}
-
-void SuiManager::handleManageMaintenance(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args) {
-	if (!suiBox->isTransferBox() || cancel != 0)
-		return;
-
-	ManagedReference<SceneObject*> object = suiBox->getUsingObject();
-
-	if (object == NULL || !object->isStructureObject())
-		return;
-
-	StructureObject* structureObject = (StructureObject*) object.get();
-
-	if (args->size() < 1)
-		return;
-
-	int transferAmount = Integer::valueOf(args->get(0).toString());
-	int currentCash = player->getCashCredits();
-
-	if (transferAmount > currentCash) {
-		//Send a message ot the player, and return.
-		return;
-	}
-
-	if (transferAmount < 0) {
-		//Send a message to the player, and return.
-		return;
-	}
-
-	Locker _lock(structureObject, player);
-
-	int transferTotal = currentCash - transferAmount;
-
-	//TODO: Handle this in StructureManager.
-	//ManagedReference<StructureManager*> structureManager = structureObject->getZone()->getPlanetManager()->getStructureManager();
-	//structureManager->depositMaintenance(player, structureObject, transferTotal);
-
-	structureObject->addMaintenance(transferTotal);
-	player->substractCashCredits(transferTotal);
-
-	StringIdChatParameter stringId("base_player", "prose_pay_success");
-	stringId.setTT(structureObject->getObjectID());
-	stringId.setDI(transferTotal);
-
-	player->sendSystemMessage(stringId);
-	structureObject->updateToDatabase();
-
-	player->updateToDatabase();
-}
-
-
-void SuiManager::handleAddEnergy(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args) {
-	if (!suiBox->isTransferBox() || cancel != 0)
-		return;
-
-	if (args->size() < 1)
-		return;
-
-	uint32 newEnergyVal = (uint64) Long::valueOf(args->get(0).toString());
-
-	ManagedReference<SceneObject*> object = suiBox->getUsingObject();
-
-	if (object == NULL || !object->isInstallationObject())
-		return;
-
-	InstallationObject* installation = (InstallationObject*) object.get();
-
-	ManagedReference<ResourceManager*> resourceManager = player->getZoneServer()->getResourceManager();
-
-	//TODO: This should be handled in StructureManager
-
-	Locker _lock(installation, player);
-
-	uint32 energyFromPlayer = resourceManager->getAvailablePowerFromPlayer(player);
-	uint32 energy = energyFromPlayer - newEnergyVal;
-
-	if (energy > energyFromPlayer)
-		return;
-
-	installation->addPower(energy);
-	resourceManager->removePowerFromPlayer(player, energy);
-
-	StringIdChatParameter stringId("player_structure", "deposit_successful");
-	stringId.setDI(energy);
-
-	player->sendSystemMessage(stringId);
-
-	stringId.setStringId("player_structure", "reserve_report");
-	stringId.setDI(energy);
-
-	player->sendSystemMessage(stringId);
-
-	installation->updateToDatabase();
-}
-
-void SuiManager::handleStartDancing(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args) {
-	if (!suiBox->isListBox() || cancel != 0)
-		return;
-
-	if (args->size() < 2)
-		return;
-
-	int index = Integer::valueOf(args->get(0).toString());
-
-	uint32 id = suiBox->getBoxID();
-
-	bool change = (uint16)id == SuiWindowType::DANCING_CHANGE;
-
-
-	SuiListBox* listBox = (SuiListBox*) suiBox;
-
-	String dance = listBox->getMenuItemName(index);
-
-	if (!change)
-		player->executeObjectControllerAction(String("startdance").hashCode(), 0, dance);
-	else
-		player->executeObjectControllerAction(String("changedance").hashCode(), 0, dance);
-}
-
-void SuiManager::handleStartMusic(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args) {
-	if (!suiBox->isListBox() || cancel != 0)
-		return;
-
-	if (args->size() < 2)
-		return;
-
-	int index = Integer::valueOf(args->get(0).toString());
-
-	uint32 id = suiBox->getBoxID();
-
-	bool change = (uint16)id == SuiWindowType::MUSIC_CHANGE;
-
-	SuiListBox* listBox = (SuiListBox*) suiBox;
-
-	String dance = listBox->getMenuItemName(index);
-
-	if (!change)
-		player->executeObjectControllerAction(String("startmusic").hashCode(), player->getTargetID(), dance);
-	else
-		player->executeObjectControllerAction(String("changemusic").hashCode(), player->getTargetID(), dance);
-}
-
-void SuiManager::handleSampleRadioactiveConfirm(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args) {
-	if (cancel != 0)
-		return;
-
-	ManagedReference<SurveyTool*> surveyTool =  player->getSurveyTool();
-
-	if (surveyTool == NULL)
-		return;
-
-	Locker _lock(surveyTool);
-	surveyTool->consentRadioactiveSample(player);
-}
-
-void SuiManager::handleSurveyConcentratedMinigame(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args) {
-	if (cancel != 0)
-		return;
-
-	if (args->size() < 1)
-		return;
-
-	int value = Integer::valueOf(args->get(0).toString());
-
-	ManagedReference<SurveyTool*> surveyTool =  player->getSurveyTool();
-
-	if (surveyTool == NULL)
-		return;
-
-	Locker _lock(surveyTool);
-	surveyTool->surveyCnodeMinigame(player, value);
-}
-
-void SuiManager::handleSurveyConcentratedMinigame2(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args) {
-	if (cancel != 0)
-		return;
-
-	if (args->size() < 1)
-		return;
-
-	int value = Integer::valueOf(args->get(0).toString());
-
-	ManagedReference<SurveyTool*> surveyTool =  player->getSurveyTool();
-
-	if (surveyTool == NULL)
-		return;
-
-	Locker _lock(surveyTool);
-	surveyTool->surveyGnodeMinigame(player, value);
-}
-
-
-
-void SuiManager::handleTicketCollectorResponse(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args) {
-	if (!suiBox->isListBox() || cancel != 0)
-		return;
-
-	if (args->size() < 1)
-		return;
-
-	SuiListBox* listBox = (SuiListBox*) suiBox;
-
-	int index = Integer::valueOf(args->get(0).toString());
-
-	uint64 ticketObjectID = listBox->getMenuObjectID(index);
-
-	if (ticketObjectID == 0)
-		return;
-
-	ManagedReference<SceneObject*> inventory = player->getSlottedObject("inventory");
-
-	if (inventory == NULL)
-		return;
-
-	ManagedReference<SceneObject*> obj = inventory->getContainerObject(ticketObjectID);
-
-	if (obj == NULL || !obj->isTangibleObject())
-		return;
-
-	TangibleObject* tano = (TangibleObject*) obj.get();
-
-	if (!tano->isTicketObject())
-		return;
-
-	TicketObject* ticket = (TicketObject*) tano;
-	ticket->handleObjectMenuSelect(player, 20);
-}
-
-void SuiManager::handleBankTransfer(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args) {
-	if (!suiBox->isBankTransferBox() || cancel != 0)
-		return;
-
-	if (args->size() < 2)
-		return;
-
-	int cash = Integer::valueOf(args->get(0).toString());
-	int bank = Integer::valueOf(args->get(1).toString());
-
-	SuiBankTransferBox* suiBank = (SuiBankTransferBox*) suiBox;
-
-	ManagedReference<SceneObject*> bankObject = suiBank->getBank();
-
-	if (bankObject == NULL)
-		return;
-
-	if (!player->isInRange(bankObject, 5))
-		return;
-
-	uint32 currentCash = player->getCashCredits();
-	uint32 currentBank = player->getBankCredits();
-
-	if ((currentCash + currentBank) == ((uint32) cash + (uint32) bank)) {
-		player->setCashCredits(cash);
-		player->setBankCredits(bank);
-	}
-
-}
-
-void SuiManager::handleGamblingRoulette(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args) {
-	GamblingManager* manager = player->getZone()->getZoneServer()->getGamblingManager();
-
-	if (cancel != 0)
-		manager->leaveTerminal(player, 0);
-	else
-		manager->refreshRouletteMenu(player);
-
-	//TODO: This might resend suis.
-}
-void SuiManager::handleGamblingSlot(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args) {
-	if (args->size() < 1)
-		return;
-
-	bool otherPressed = Bool::valueOf(args->get(0).toString());
-
-	GamblingManager* manager = player->getZone()->getZoneServer()->getGamblingManager();
-	manager->handleSlot(player, (bool) cancel, otherPressed);
-
-	//TODO: This might resend suis.
-}
-
-void SuiManager::handleGamblingSlotPayout(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args) {
-	player->sendMessage(suiBox->generateCloseMessage());
-}
-
-void SuiManager::handleFishingAction(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args) {
-	if (cancel != 0)
-		return;
-
-	if (args->size() < 1)
-		return;
-
-	int index = Integer::valueOf(args->get(0).toString());
-
-	FishingManager* manager = player->getZone()->getZoneServer()->getFishingManager();
-
-	manager->setNextAction(player, index + 1);
-
-	uint32 newBoxID = 0;
-
-	switch (index + 1) {
-		case FishingManager::TUGUP:
-			newBoxID = manager->createWindow(player, suiBox->getBoxID());
-			break;
-		case FishingManager::TUGRIGHT:
-			newBoxID = manager->createWindow(player, suiBox->getBoxID());
-			break;
-		case FishingManager::TUGLEFT:
-			newBoxID = manager->createWindow(player, suiBox->getBoxID());
-			break;
-		case FishingManager::REEL:
-			newBoxID = manager->createWindow(player, suiBox->getBoxID());
-			break;
-		case FishingManager::STOPFISHING:
-			player->sendSystemMessage("@fishing:stop_fishing"); //You reel-in your line and stop fishing...
-			manager->stopFishing(player, suiBox->getBoxID(), true);
-			return;
-			break;
-		default:
-			newBoxID = manager->createWindow(player, suiBox->getBoxID());
-			break;
-	}
-
-	manager->setFishBoxID(player, suiBox->getBoxID());
-}
-
-void SuiManager::handleCharacterBuilderSelectItem(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args) {
-	ZoneServer* zserv = player->getZoneServer();
-
-	if (args->size() < 1)
-		return;
-
-	int index = Integer::valueOf(args->get(0).toString());
-
-	if (!suiBox->isCharacterBuilderBox())
-		return;
-
-	ManagedReference<SuiCharacterBuilderBox*> cbSui = (SuiCharacterBuilderBox*) suiBox;
-
-	CharacterBuilderMenuNode* currentNode = cbSui->getCurrentNode();
-
-	//If cancel was pressed and there is no parent node to backup too, then we kill the box/menu.
-	if (currentNode == NULL || (cancel != 0 && !currentNode->hasParentNode()))
-		return;
-
-	//Back was pressed. Send the node above it.
-	if (cancel != 0) {
-		CharacterBuilderMenuNode* parentNode = currentNode->getParentNode();
-		cbSui->setCurrentNode(parentNode);
-
-		player->addSuiBox(cbSui);
-		player->sendMessage(cbSui->generateMessage());
-		return;
-	}
-
-	CharacterBuilderMenuNode* node = currentNode->getChildNodeAt(index);
-
-	//Node doesn't exist or the index was out of bounds. Should probably resend the menu here.
-	if (node == NULL) {
-		player->addSuiBox(cbSui);
-		player->sendMessage(cbSui->generateMessage());
-		return;
-	}
-
-	if (node->hasChildNodes()) {
-		//If it has child nodes, display them.
-		cbSui->setCurrentNode(node);
-		player->addSuiBox(cbSui);
-		player->sendMessage(cbSui->generateMessage());
-	} else {
-
-		String templatePath = node->getTemplatePath();
-
-		if (templatePath.indexOf(".iff") < 0) { // Non-item selections
-
-			if (templatePath == "unlearn_all_skills") {
-
-				player->sendSystemMessage("All skills unlearned.");
-				server->getProfessionManager()->surrenderAll(player);
-
-			} else if (templatePath == "cleanse_character") {
-
-				if (!player->isInCombat()) {
-					player->sendSystemMessage("You have been cleansed from the signs of previous battles.");
-
-					for (int i = 0; i < 9; ++i) {
-						player->setWounds(i, 0);
-					}
-
-					player->setShockWounds(0);
-				} else {
-					player->sendSystemMessage("Not within combat.");
-				}
-
-			} else if (templatePath == "enhance_character") {
-
-				SceneObject* scob = cbSui->getUsingObject();
-				if (scob != NULL) {
-
-					if (scob->getGameObjectType() == SceneObjectImplementation::CHARACTERBUILDERTERMINAL) {
-						CharacterBuilderTerminal* bluefrog = (CharacterBuilderTerminal*) scob;
-						bluefrog->enhanceCharacter(player);
-					}
-				}
-
-			} else if (templatePath == "credits") {
-
-				player->addCashCredits(50000, true);
-				player->sendSystemMessage("You have received 50.000 Credits");
-
-			} else if (templatePath == "language") {
-
-				SceneObject* scob = cbSui->getUsingObject();
-				if (scob != NULL) {
-
-					if (scob->getGameObjectType() == SceneObjectImplementation::CHARACTERBUILDERTERMINAL) {
-						CharacterBuilderTerminal* bluefrog = (CharacterBuilderTerminal*) scob;
-						bluefrog->giveLanguages(player);
-					}
-				}
-
-			} else if (templatePath == "apply_dots") {
-				player->addDotState(CreatureState::POISONED, 100, CreatureAttribute::HEALTH, 60, 80, 0);
-				player->addDotState(CreatureState::BLEEDING, 100, CreatureAttribute::ACTION, 60, 80, 0);
-				player->addDotState(CreatureState::DISEASED, 100, CreatureAttribute::ACTION, 60, 80, 0);
-				player->addDotState(CreatureState::ONFIRE, 100, CreatureAttribute::HEALTH, 60, 80, 0);
-			} else if (templatePath == "clear_dots") {
-				player->clearDots();
-			} else {
-
-				if (templatePath.length() > 0) {
-
-					server->getProfessionManager()->awardSkillBox(templatePath, player, true, true);
-					if (player->hasSkillBox(templatePath))
-						player->sendSystemMessage("You have learned a skill.");
-
-				} else {
-
-					player->sendSystemMessage("Unknown selection.");
-
-				}
-			}
-
-			player->addSuiBox(cbSui);
-			player->sendMessage(cbSui->generateMessage());
-		} else { // Items
-
-			ManagedReference<SceneObject*> item = zserv->createObject(node->getTemplateCRC(), 1);
-
-			if (item == NULL) {
-				player->sendSystemMessage("There was an error creating the requested item. Please contact customer support with this issue.");
-				player->addSuiBox(cbSui);
-				player->sendMessage(cbSui->generateMessage());
-				return;
-			}
-
-			ManagedReference<SceneObject*> inventory = player->getSlottedObject("inventory");
-			item->sendTo(player, true);
-			inventory->addObject(item, -1, true);
-
-			StringIdChatParameter stringId;
-			stringId.setStringId("@faction_perk:bonus_base_name"); //You received a: %TO.
-			stringId.setTO(item);
-			player->sendSystemMessage(stringId);
-
-			player->addSuiBox(cbSui);
-			player->sendMessage(cbSui->generateMessage());
-		}
-	}
-}
-
-void SuiManager::handleCloneRequest(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args) {
-	info("activating sui cloner option");
-
-	if (!suiBox->isListBox() || cancel != 0)
-		return;
-
-	if (args->size() < 1)
-		return;
-
-	int index = Integer::valueOf(args->get(0).toString());
-
-	ZoneServer* zoneServer = server->getZoneServer();
-	PlayerManager* playerManager = zoneServer->getPlayerManager();
-
-	if (index >= 0) {
-		if (!player->isDead()) {
-			player->sendSystemMessage("You must be dead to activate your clone.");
-		} else {
-			SuiListBox* suiListBox = (SuiListBox*) suiBox;
-			playerManager->sendPlayerToCloner(player, suiListBox->getMenuObjectID(index));
-		}
-	} else {
-		if (player->isDead())
-			player->sendSystemMessage("You will remain dead until you choose a location to clone or you are revived. Type /activateClone to restore the clone window.");
-	}
-}
-
-void SuiManager::handleDiagnose(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args) {
-}
-
-void SuiManager::handleGiveFreeResource(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args) {
-	if (args->size() < 2)
-		return;
-
-	bool otherPressed = Bool::valueOf(args->get(0).toString());
-	int index = Integer::valueOf(args->get(1).toString());
-
-	ResourceDeedListBox* suiListBox = dynamic_cast<ResourceDeedListBox*>(suiBox);
-
-	if (suiListBox == NULL)
-		return;
-
-	ManagedReference<SceneObject*> deedObject = suiListBox->getUsingObject();
-
-	if (deedObject == NULL)
-		return;
-
-	ManagedReference<ResourceManager*> resourceManager = server->getZoneServer()->getResourceManager();
-	ManagedReference<ResourceSpawn*> spawn = NULL;
-
-	String nodeName = "";
-
-	if (otherPressed) {
-		suiListBox->removeBox();
-	} else {
-
-		if (suiListBox->getPromptTitle() != "Resources") {
-
-			resourceManager->givePlayerResource(player, suiListBox->getPromptTitle(),
-				ResourceManagerImplementation::RESOURCE_DEED_QUANTITY);
-
-			if (deedObject != NULL && deedObject->getGameObjectType() == SceneObjectImplementation::RESOURCEDEED) {
-				ResourceDeed* deed = (ResourceDeed*) deedObject.get();
-
-				Locker cLocker(deed, player);
-				deed->destroyDeed();
-			}
-
-			return;
-
-		}
-		/// If nothing was chosen
-		if (index < 0) {
-			player->addSuiBox(suiListBox);
-			player->sendMessage(suiListBox->generateMessage());
-			return;
-		}
-
-		nodeName = suiListBox->getMenuItemName(index);
-
-		spawn = resourceManager->getResourceSpawn(nodeName);
-
-		if (spawn != NULL)
-			suiListBox->addBox(spawn->getName());
-		else
-			suiListBox->addBox(nodeName);
-
-	}
-
-	suiListBox->clearOptions();
-	suiListBox->removeAllMenuItems();
-
-	if (spawn != NULL) {
-
-		suiListBox->setPromptTitle(spawn->getName());
-		suiListBox->setPromptText("@veteran:confirm_choose_type");
-
-		spawn->addStatsToDeedListBox(suiListBox);
-
-	} else {
-
-		suiListBox->setPromptTitle("Resources");
-		suiListBox->setPromptText("Choose resource.");
-
-		resourceManager->addChildrenToDeedListBox(suiListBox->getCurrentBox(), suiListBox);
-	}
-
-	suiListBox->setCancelButton(true, "@cancel");
-	suiListBox->setOtherButton(true, "@back");
-
-	suiListBox->setUsingObject(deedObject);
-
-	player->addSuiBox(suiListBox);
-	player->sendMessage(suiListBox->generateMessage());
-}
-
-void SuiManager::handleConsentBox(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args) {
-	if (suiBox->isListBox() || cancel != 0)
-		return;
-
-	if (args->size() < 1)
-		return;
-
-	int index = Integer::valueOf(args->get(0).toString());
-
-	if (index == -1)
-		return;
-
-	SuiListBox* suiList = (SuiListBox*) suiBox;
-
-	String name = suiList->getMenuItemName(index);
-	UnconsentCommand::unconscent(player, name);
-}
-
-void SuiManager::handleTeachPlayer(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args) {
-	player->setTeachingOrLearning(false);
-
-	if (suiBox->isListBox() || cancel != 0)
-		return;
-
-	if (args->size() < 1)
-		return;
-
-	int value = Integer::valueOf(args->get(0).toString());
-
-	if (value == -1)
-		return;
-
-	TeachPlayerListBox* listBox = dynamic_cast<TeachPlayerListBox*>(suiBox);
-
-	if (listBox == NULL)
-		return;
-
-	ManagedReference<PlayerCreature*> student = listBox->getStudent();
-
-	if (student == NULL)
-		return;
-
-	Locker _lock(student);
-
-	//if they are no longer in the same group we cancel
-	ManagedReference<GroupObject*> group = player->getGroup();
-
-	if (group == NULL || !group->hasMember(student)) {
-		player->sendSystemMessage("@teaching:not_in_same_group");
-		return;
-	}
-
-	//student->setTeachingOffer(listBox->getTeachingSkillOption(value));
-
-	StringIdChatParameter message("teaching","offer_given");
-	message.setTT(student->getFirstName());
-	message.setTO("skl_n", listBox->getTeachingSkillOption(value));
-	player->sendSystemMessage(message);
-
-	ManagedReference<PlayerLearnListBox*> mbox = new PlayerLearnListBox(student);
-
-	student->setTeachingOrLearning(true);
-
-	// TODO: redo this after I find the proper String
-	StringBuffer prompt, skillname;
-	skillname << "@skl_n:" << listBox->getTeachingSkillOption(value);
-	prompt << "Do you wish to learn the following from " << player->getFirstName() << "?";
-	mbox->setPromptTitle("@sui:teach");
-	mbox->setPromptText(prompt.toString());
-	mbox->addMenuItem(skillname.toString());
-	mbox->setCancelButton(true, "");
-	mbox->setTeacher(player);
-	mbox->setTeachingOffer(listBox->getTeachingSkillOption(value));
-
-	student->addSuiBox(mbox);
-	student->sendMessage(mbox->generateMessage());
-}
-
-void SuiManager::handleTeachSkill(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args) {
-	player->setTeachingOrLearning(false);
-
-	if (suiBox->isListBox())
-		return;
-
-	PlayerLearnListBox* listBox = dynamic_cast<PlayerLearnListBox*>(suiBox);
-
-	if (listBox == NULL)
-		return;
-
-	String teachingOffer = listBox->getTeachingOffer();
-
-	if (cancel != 0) {
-		StringIdChatParameter message("teaching","offer_refused");
-		message.setTT(player->getObjectID());
-		message.setTO("skl_n", teachingOffer);
-		listBox->getTeacher()->sendSystemMessage(message);
-
-		return;
-	}
-
-	ManagedReference<PlayerCreature*> teacher = listBox->getTeacher();
-
-	if (teacher == NULL) {
-		player->sendSystemMessage("teaching","teacher_too_far");
-		return;
-	}
-
-
-	if (!player->isInRange(teacher, 128)) {
-		StringIdChatParameter message("teaching","teacher_too_far_target");
-		message.setTT(teacher->getObjectID());
-		message.setTO("skl_n", teachingOffer);
-		player->sendSystemMessage(message);
-
-		teacher->sendSystemMessage("teaching","teaching_failed");
-
-		return;
-	}
-
-	ManagedReference<GroupObject*> group = player->getGroup();
-
-	if (group == NULL || !group->hasMember(teacher)) {
-		StringIdChatParameter message("teaching","not_in_same_group");
-		message.setTT(listBox->getTeacher()->getObjectID());
-		player->sendSystemMessage(message);
-
-		teacher->sendSystemMessage("teaching","teaching_failed");
-		return;
-	}
-
-	server->getProfessionManager()->playerTeachSkill(teachingOffer, player, teacher);
-}
-
-void SuiManager::handleInsertFactorySchem2(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args) {
-	if (!suiBox->isListBox() || cancel != 0)
-		return;
-
-	if (args->size() < 1)
-		return;
-
-	int index = Integer::valueOf(args->get(0).toString());
-
-	SuiListBox* listBox = (SuiListBox*) suiBox;
-
-	ManagedReference<SceneObject*> object = suiBox->getUsingObject();
-
-	if (object == NULL || !object->isFactory())
-		return;
-
-	FactoryObject* factory = (FactoryObject*) object.get();
-
-	Locker _lock(factory, player);
-
-	ManagedReference<ManufactureSchematic*> schematic = dynamic_cast<ManufactureSchematic*>(server->getZoneServer()->getObject(listBox->getMenuObjectID(index)));
-	factory->handleInsertFactorySchem(player, schematic);
-}
-
-void SuiManager::handleInsertFactorySchem3(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args) {
-	if (!suiBox->isListBox() || cancel != 0)
-		return;
-
-	if (args->size() < 2)
-		return;
-
-	bool otherPressed = Bool::valueOf(args->get(0).toString());
-	int index = Integer::valueOf(args->get(1).toString());
-
-	SuiListBox* listBox = (SuiListBox*) suiBox;
-
-	ManagedReference<SceneObject*> object = suiBox->getUsingObject();
-
-	if (object == NULL || !object->isFactory())
-		return;
-
-	FactoryObject* factory = (FactoryObject*) object.get();
-
-	Locker _lock(factory, player);
-
-	factory->handleRemoveFactorySchem(player);
-
-	if (!otherPressed) {
-		ManagedReference<ManufactureSchematic*> schematic = dynamic_cast<ManufactureSchematic*>(server->getZoneServer()->getObject(listBox->getMenuObjectID(index)));
-		factory->handleInsertFactorySchem(player, schematic);
-	}
-}
-
-
-void SuiManager::handleStructureStatus(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args) {
-
-}
-
-void SuiManager::handleStructureDestroyConfirm(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args) {
-	if (!suiBox->isListBox() || cancel != 0)
-		return;
-
-	ManagedReference<SceneObject*> usingObject = suiBox->getUsingObject();
-
-	if (usingObject == NULL || !usingObject->isStructureObject())
-		return;
-
-	StructureObject* structureObject = (StructureObject*) usingObject.get();
-
-	Locker _lock(structureObject, player);
-	structureObject->sendDestroyCodeTo(player);
-}
-
-void SuiManager::handleStructureDestroyCode(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args) {
-	if (!suiBox->isInputBox() || cancel != 0)
-		return;
-
-	if (args->size() < 1)
-		return;
-
-	int destroyCode = Integer::valueOf(args->get(0).toString());
-
-	ManagedReference<SceneObject*> usingObject = suiBox->getUsingObject();
-
-	if (usingObject == NULL || !usingObject->isStructureObject())
-		return;
-
-	ManagedReference<StructureObject*> structureObject = (StructureObject*) usingObject.get();
-
-	Zone* zone = structureObject->getZone();
-
-	if (zone == NULL)
-		return;
-
-	PlanetManager* planetManager = zone->getPlanetManager();
-
-	if (planetManager == NULL)
-		return;
-
-	StructureManager* structureManager = planetManager->getStructureManager();
-
-	if (structureManager == NULL)
-		return;
-
-	Locker _lock(structureObject, player);
-
-	if (structureObject->getDestroyCode() == destroyCode) {
-		structureManager->redeedStructure(player, structureObject);
-	} else {
-		player->sendSystemMessage("@player_structure:incorrect_destroy_code"); //You have entered an incorrect code. You will have to issue the /destroyStructure again if you wish to continue.
-		return;
-	}
-}
-
-void SuiManager::handleCityEnableZoning(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args) {
-	if (!suiBox->isMessageBox() || cancel != 0)
-		return;
-
-	ManagedReference<SceneObject*> usingObject = suiBox->getUsingObject();
-
-	if (usingObject == NULL || !usingObject->isBuildingObject())
-		return;
-
-	BuildingObject* buildingObject = (BuildingObject*) usingObject.get();
-
-	if (!buildingObject->isCityHallBuilding())
-		return;
-
-	CityHallObject* cityHall = (CityHallObject*) buildingObject;
-
-	Locker _lock(cityHall, player);
-	cityHall->toggleZoningEnabled(player);
-}
-
-void SuiManager::handleChangeCityName(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args) {
-	if (!suiBox->isInputBox() || cancel != 0)
-		return;
-
-	if (args->size() < 1)
-		return;
-
-	String cityName = args->get(0).toString();
-
-	ManagedReference<SceneObject*> usingObject = suiBox->getUsingObject();
-
-	if (usingObject == NULL || !usingObject->isBuildingObject())
-		return;
-
-	BuildingObject* building = (BuildingObject*) usingObject.get();
-
-	if (!building->isCityHallBuilding())
-		return;
-
-	CityHallObject* cityHall = (CityHallObject*) building;
-
-	Locker _lock(cityHall, player);
-
-	ManagedReference<CityManager*> cityManager = player->getZone()->getCityManager();
-
-	if (cityManager->validateCityName(cityName)) {
-		cityManager->changeCityName(cityHall, player, cityName);
-	} else {
-		player->sendSystemMessage("Invalid name specified for city.");
-		player->addSuiBox(suiBox);
-		player->sendMessage(suiBox->generateMessage());
-	}
-}
-
-void SuiManager::handleCreateCity(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args) {
-	if (!suiBox->isInputBox() || cancel != 0)
-		return;
-
-	if (args->size() < 1)
-		return;
-
-	String cityName = args->get(0).toString();
-
-	ManagedReference<SceneObject*> usingObject = suiBox->getUsingObject();
-
-	if (usingObject == NULL || !usingObject->isBuildingObject())
-		return;
-
-	BuildingObject* building = (BuildingObject*) usingObject.get();
-
-	if (!building->isCityHallBuilding())
-		return;
-
-	CityHallObject* cityHall = (CityHallObject*) building;
-
-	Locker _lock(cityHall, player);
-
-	ManagedReference<CityManager*> cityManager = player->getZone()->getCityManager();
-
-	if (cityManager->validateCityName(cityName)) {
-		cityManager->createNewCity(cityHall, player, cityName);
-	} else {
-		player->sendSystemMessage("Invalid name specified for city.");
-		player->addSuiBox(suiBox);
-		player->sendMessage(suiBox->generateMessage());
-	}
-}
-
-void SuiManager::handleManageMilitia(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args) {
-	if (!suiBox->isListBox() || cancel != 0)
-		return;
-
-	if (args->size() < 2)
-		return;
-
-	bool otherPressed = Bool::valueOf(args->get(0).toString());
-	int index = Integer::valueOf(args->get(1).toString());
-
-	SuiListBox* listBox = (SuiListBox*) suiBox;
-
-	ManagedReference<SceneObject*> obj = listBox->getUsingObject();
-
-	if (obj == NULL || !obj->isBuildingObject())
-		return;
-
-	BuildingObject* building = (BuildingObject*) obj.get();
-
-	if (!building->isCityHallBuilding())
-		return;
-
-	CityHallObject* city = (CityHallObject*) building;
-
-	Locker _lock(city, player);
-
-	ManagedReference<Zone*> zone = city->getZone();
-
-	if (zone == NULL)
-		return;
-
-	if (otherPressed) {
-		city->sendAddMilitiaMemberTo(player);
-	} else {
-		if (index != -1) {
-			ManagedReference<CityManager*> cityManager = zone->getCityManager();
-
-			uint64 playerID = listBox->getMenuObjectID(index);
-			cityManager->removeMilitiaMember(city, player, playerID);
-		}
-	}
-}
-
-void SuiManager::handleAddMilitia(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args) {
-	if (!suiBox->isInputBox() || cancel != 0)
-		return;
-
-	if (args->size() < 1)
-		return;
-
-	String playerName = args->get(0).toString();
-
-	ManagedReference<SceneObject*> obj = suiBox->getUsingObject();
-
-	if (obj == NULL || !obj->isBuildingObject())
-		return;
-
-	BuildingObject* building = (BuildingObject*) obj.get();
-
-	if (!building->isCityHallBuilding())
-		return;
-
-	CityHallObject* city = (CityHallObject*) building;
-
-	Locker _lock(city, player);
-
-	ManagedReference<Zone*> zone = city->getZone();
-
-	if (zone == NULL)
-		return;
-
-	ManagedReference<CityManager*> cityManager = zone->getCityManager();
-	cityManager->addMilitiaMember(city, player, playerName);
+	msg << "Unknown message callback with SuiWindowType: " << hex << windowType << ". Please report this incident.";
+	player->sendSystemMessage(msg.toString());
 }
Index: src/server/zone/managers/sui/SuiManager.h
===================================================================
--- src/server/zone/managers/sui/SuiManager.h	(revision 2976)
+++ src/server/zone/managers/sui/SuiManager.h	(working copy)
@@ -47,23 +47,17 @@
 
 #include "engine/engine.h"
 
-#include "server/zone/ZoneProcessServer.h"
-
 namespace server {
  namespace zone {
   namespace objects {
    namespace player {
     class PlayerCreature;
-     namespace sui {
-      class SuiBox;
-     }
    }
   }
  }
 }
 
 using namespace server::zone::objects::player;
-using namespace server::zone::objects::player::sui;
 
 namespace server {
  namespace zone {
@@ -71,91 +65,12 @@
    namespace sui {
 
 	  class SuiManager : public Logger {
-	  	ZoneProcessServer* server;
-
 	  public:
-	  	SuiManager(ZoneProcessServer* serv);
+	  	SuiManager();
 
 	  	void handleSuiEventNotification(uint32 boxID, PlayerCreature* player, uint32 cancel, Vector<UnicodeString>* args);
-
-	  	//Handlers
-	  	void handleMessageoftheDay(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-	  	void handleSetMOTD(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-
-	  	void handleStartMusic(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-	  	void handleStartDancing(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-
-	  	void handleSampleRadioactiveConfirm(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-	  	void handleSurveyConcentratedMinigame(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-	  	void handleSurveyConcentratedMinigame2(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-
-	  	void handleRepairWeapon(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-	  	void handleRepairArmor(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-
-	  	//Structure Stuff
-	  	void handleStructureStatus(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-	  	void handleStructureDestroyConfirm(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-	  	void handleStructureDestroyCode(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-
-	  	void handleTicketPurchaseMessageBox(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-	  	void handleTicketCollectorResponse(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-
-	  	void handleCodeForRedeed(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-	  	void handleRedeedStructure(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-	  	void handleRefreshStatusListBox(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-	  	void handleSetObjectName(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-	  	void handleManageMaintenance(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-	  	void handleAddEnergy(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-
-	  	void handleColorPicker(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-
-	  	void handleBankTransfer(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-	  	void handleFishingAction(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-
-	  	void handleBlueFrogItemRequest(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-	  	void handleWoundTerminalRequest(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-	  	void handleStateTerminalRequest(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-
-	  	void handleDiagnose(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-	  	void handleFreeResource(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-	  	void handleGiveFreeResource(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-
-	  	void handleCloneConfirm(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-	  	void handleCloneRequest(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-	  	void handleConsentBox(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-
-	  	void handleDenyTrainingList(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-
-	  	void handleTeachPlayer(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-	  	void handleTeachSkill(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-
-	  	void handleInsuranceMenu(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-	  	void handleInsureAllConfirm(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-
-	  	void handleBankTipConfirm(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-	  	void handleSlicingMenu(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-	  	void handleRangerWhatToTrackBox(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-
-	  	void handleInsertFactorySchem2(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-	  	void handleInsertFactorySchem3(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-
-	  	void handleBanListSelection(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-	  	void handleCommandsListSelection(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-	  	void handleAccountListSelection(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-	  	void handleCharacterListSelection(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-
-	  	void handleCharacterBuilderSelectItem(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-
-	  	void handleChangeCityName(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-	  	void handleCreateCity(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-	  	void handleCityEnableZoning(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-	  	void handleManageMilitia(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-	  	void handleAddMilitia(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-
-	  	void handleGamblingSlotPayout(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-	  	void handleGamblingSlot(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
-	  	void handleGamblingRoulette(PlayerCreature* player, SuiBox* suiBox, uint32 cancel, Vector<UnicodeString>* args);
 	  };
+
    }
   }
  }
@@ -163,6 +78,4 @@
 
 using namespace server::zone::managers::sui;
 
-
-
 #endif /*SUIMANAGER_H_*/
Index: src/server/zone/objects/building/BuildingObject.cpp
===================================================================
--- src/server/zone/objects/building/BuildingObject.cpp	(revision 2976)
+++ src/server/zone/objects/building/BuildingObject.cpp	(working copy)
@@ -24,7 +24,7 @@
  *	BuildingObjectStub
  */
 
-enum {RPC_CREATECELLOBJECTS__ = 6,RPC_DESTROYOBJECTFROMDATABASE__BOOL_,RPC_INITIALIZETRANSIENTMEMBERS__,RPC_SENDCONTAINEROBJECTSTO__SCENEOBJECT_,RPC_UPDATECELLPERMISSIONSTO__SCENEOBJECT_,RPC_NOTIFYSTRUCTUREPLACED__PLAYERCREATURE_,RPC_REMOVEFROMZONE__,RPC_NOTIFYINSERTTOZONE__SCENEOBJECT_,RPC_SENDTO__SCENEOBJECT_BOOL_,RPC_SENDBASELINESTO__SCENEOBJECT_,RPC_SENDDESTROYTO__SCENEOBJECT_,RPC_ADDCELL__CELLOBJECT_,RPC_ISSTATICBUILDING__,RPC_GETCELL__INT_,RPC_GETTOTALCELLNUMBER__,RPC_GETCURRENTNUMEROFPLAYERITEMS__,RPC_ONENTER__PLAYERCREATURE_,RPC_ONEXIT__PLAYERCREATURE_,RPC_ISBUILDINGOBJECT__,RPC_ISMEDICALBUILDINGOBJECT__,RPC_SETSIGNOBJECT__SIGNOBJECT_,RPC_GETSIGNOBJECT__,RPC_ISCITYHALLBUILDING__,RPC_SETACCESSFEE__INT_,RPC_GETACCESSFEE__,RPC_ISPUBLICSTRUCTURE__,RPC_SETPUBLICSTRUCTURE__BOOL_,RPC_GETMAXIMUMNUMBEROFPLAYERITEMS__};
+enum {RPC_CREATECELLOBJECTS__ = 6,RPC_DESTROYOBJECTFROMDATABASE__BOOL_,RPC_INITIALIZETRANSIENTMEMBERS__,RPC_SENDCONTAINEROBJECTSTO__SCENEOBJECT_,RPC_UPDATECELLPERMISSIONSTO__SCENEOBJECT_,RPC_NOTIFYSTRUCTUREPLACED__PLAYERCREATURE_,RPC_REMOVEFROMZONE__,RPC_NOTIFYINSERTTOZONE__SCENEOBJECT_,RPC_SENDTO__SCENEOBJECT_BOOL_,RPC_SENDBASELINESTO__SCENEOBJECT_,RPC_SENDDESTROYTO__SCENEOBJECT_,RPC_ADDCELL__CELLOBJECT_,RPC_ISSTATICBUILDING__,RPC_GETCELL__INT_,RPC_GETTOTALCELLNUMBER__,RPC_GETCURRENTNUMEROFPLAYERITEMS__,RPC_ONENTER__PLAYERCREATURE_,RPC_ONEXIT__PLAYERCREATURE_,RPC_ISBUILDINGOBJECT__,RPC_ISMEDICALBUILDINGOBJECT__,RPC_SETSIGNOBJECT__SIGNOBJECT_,RPC_GETSIGNOBJECT__,RPC_ISCITYHALLBUILDING__,RPC_ISPUBLICSTRUCTURE__,RPC_SETPUBLICSTRUCTURE__BOOL_,RPC_GETMAXIMUMNUMBEROFPLAYERITEMS__};
 
 BuildingObject::BuildingObject() : StructureObject(DummyConstructorParameter::instance()) {
 	BuildingObjectImplementation* _implementation = new BuildingObjectImplementation();
@@ -424,33 +424,6 @@
 		return _implementation->isCityHallBuilding();
 }
 
-void BuildingObject::setAccessFee(int fee) {
-	BuildingObjectImplementation* _implementation = (BuildingObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_SETACCESSFEE__INT_);
-		method.addSignedIntParameter(fee);
-
-		method.executeWithVoidReturn();
-	} else
-		_implementation->setAccessFee(fee);
-}
-
-int BuildingObject::getAccessFee() {
-	BuildingObjectImplementation* _implementation = (BuildingObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_GETACCESSFEE__);
-
-		return method.executeWithSignedIntReturn();
-	} else
-		return _implementation->getAccessFee();
-}
-
 bool BuildingObject::isPublicStructure() {
 	BuildingObjectImplementation* _implementation = (BuildingObjectImplementation*) _getImplementation();
 	if (_implementation == NULL) {
@@ -610,16 +583,6 @@
 		return true;
 	}
 
-	if (_name == "deedObjectID") {
-		TypeInfo<unsigned long long >::parseFromBinaryStream(&deedObjectID, stream);
-		return true;
-	}
-
-	if (_name == "accessFee") {
-		TypeInfo<int >::parseFromBinaryStream(&accessFee, stream);
-		return true;
-	}
-
 	if (_name == "publicStructure") {
 		TypeInfo<bool >::parseFromBinaryStream(&publicStructure, stream);
 		return true;
@@ -664,22 +627,6 @@
 	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
 	stream->writeShort(_offset, _totalSize);
 
-	_name = "deedObjectID";
-	_name.toBinaryStream(stream);
-	_offset = stream->getOffset();
-	stream->writeShort(0);
-	TypeInfo<unsigned long long >::toBinaryStream(&deedObjectID, stream);
-	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
-	stream->writeShort(_offset, _totalSize);
-
-	_name = "accessFee";
-	_name.toBinaryStream(stream);
-	_offset = stream->getOffset();
-	stream->writeShort(0);
-	TypeInfo<int >::toBinaryStream(&accessFee, stream);
-	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
-	stream->writeShort(_offset, _totalSize);
-
 	_name = "publicStructure";
 	_name.toBinaryStream(stream);
 	_offset = stream->getOffset();
@@ -689,7 +636,7 @@
 	stream->writeShort(_offset, _totalSize);
 
 
-	return 6 + StructureObjectImplementation::writeObjectMembers(stream);
+	return 4 + StructureObjectImplementation::writeObjectMembers(stream);
 }
 
 BuildingObjectImplementation::BuildingObjectImplementation() {
@@ -706,10 +653,6 @@
 	StructureObjectImplementation::containerType = 2;
 	// server/zone/objects/building/BuildingObject.idl():  		totalCellNumber = 0;
 	totalCellNumber = 0;
-	// server/zone/objects/building/BuildingObject.idl():  		accessFee = 0;
-	accessFee = 0;
-	// server/zone/objects/building/BuildingObject.idl():  		deedObjectID = 0;
-	deedObjectID = 0;
 	// server/zone/objects/building/BuildingObject.idl():  		publicStructure = true;
 	publicStructure = true;
 }
@@ -777,16 +720,6 @@
 	return false;
 }
 
-void BuildingObjectImplementation::setAccessFee(int fee) {
-	// server/zone/objects/building/BuildingObject.idl():  		accessFee = fee;
-	accessFee = fee;
-}
-
-int BuildingObjectImplementation::getAccessFee() {
-	// server/zone/objects/building/BuildingObject.idl():  		return accessFee;
-	return accessFee;
-}
-
 bool BuildingObjectImplementation::isPublicStructure() {
 	// server/zone/objects/building/BuildingObject.idl():  		return publicStructure;
 	return publicStructure;
@@ -877,12 +810,6 @@
 	case RPC_ISCITYHALLBUILDING__:
 		resp->insertBoolean(isCityHallBuilding());
 		break;
-	case RPC_SETACCESSFEE__INT_:
-		setAccessFee(inv->getSignedIntParameter());
-		break;
-	case RPC_GETACCESSFEE__:
-		resp->insertSignedInt(getAccessFee());
-		break;
 	case RPC_ISPUBLICSTRUCTURE__:
 		resp->insertBoolean(isPublicStructure());
 		break;
@@ -991,14 +918,6 @@
 	return ((BuildingObjectImplementation*) impl)->isCityHallBuilding();
 }
 
-void BuildingObjectAdapter::setAccessFee(int fee) {
-	((BuildingObjectImplementation*) impl)->setAccessFee(fee);
-}
-
-int BuildingObjectAdapter::getAccessFee() {
-	return ((BuildingObjectImplementation*) impl)->getAccessFee();
-}
-
 bool BuildingObjectAdapter::isPublicStructure() {
 	return ((BuildingObjectImplementation*) impl)->isPublicStructure();
 }
Index: src/server/zone/objects/building/BuildingObject.h
===================================================================
--- src/server/zone/objects/building/BuildingObject.h	(revision 2976)
+++ src/server/zone/objects/building/BuildingObject.h	(working copy)
@@ -208,10 +208,6 @@
 
 	bool isCityHallBuilding();
 
-	void setAccessFee(int fee);
-
-	int getAccessFee();
-
 	bool isPublicStructure();
 
 	void setPublicStructure(bool privacy);
@@ -250,10 +246,6 @@
 
 	ManagedReference<SignObject* > signObject;
 
-	unsigned long long deedObjectID;
-
-	int accessFee;
-
 public:
 	bool publicStructure;
 
@@ -325,10 +317,6 @@
 
 	virtual bool isCityHallBuilding();
 
-	void setAccessFee(int fee);
-
-	int getAccessFee();
-
 	bool isPublicStructure();
 
 	void setPublicStructure(bool privacy);
@@ -424,10 +412,6 @@
 
 	bool isCityHallBuilding();
 
-	void setAccessFee(int fee);
-
-	int getAccessFee();
-
 	bool isPublicStructure();
 
 	void setPublicStructure(bool privacy);
Index: src/server/zone/objects/building/BuildingObject.idl
===================================================================
--- src/server/zone/objects/building/BuildingObject.idl	(revision 2976)
+++ src/server/zone/objects/building/BuildingObject.idl	(working copy)
@@ -66,14 +66,11 @@
 	@dereferenced
 	protected Vector<CellObject> cells;
 
+	//TODO: This can be retrieved from the template.
 	protected int totalCellNumber;
 	
 	protected SignObject signObject;
 	
-	protected unsigned long deedObjectID;
-
-	protected int accessFee;
-	
 	public boolean publicStructure;
 	
 	public static final int MAXPLAYERITEMS = 400;
@@ -91,10 +88,6 @@
 				
 		totalCellNumber = 0;
 		
-		accessFee = 0;
-		
-		deedObjectID = 0;
-		
 		publicStructure = true;
 	}
 	
@@ -237,14 +230,6 @@
 		return false;
 	}
 	
-	public void setAccessFee(int fee) {
-		accessFee = fee;
-	}
-	
-	public int getAccessFee() {
-		return accessFee;
-	}
-	
 	public boolean isPublicStructure() {
 		return publicStructure;
 	}
Index: src/server/zone/objects/building/BuildingObjectImplementation.cpp
===================================================================
--- src/server/zone/objects/building/BuildingObjectImplementation.cpp	(revision 2976)
+++ src/server/zone/objects/building/BuildingObjectImplementation.cpp	(working copy)
@@ -91,19 +91,13 @@
 }
 
 Vector3 BuildingObjectImplementation::getEjectionPoint() {
-/*
-	PortalLayout* portalLayout = templateObject->getPortalLayout();
-
-	if (portalLayout == NULL)
-		return;
-
-	FloorMesh* floorMesh = portalLayout->getFloorMesh(0);
-
-	if (floorMesh == NULL)
-		return;
-		*/
+	/*
+	PathFinderManager* pathFinder = PathFinderManager::instance();
+	pathFinder->findPathFromCellToWorld();
+	*/
 
 	Vector3 ejectionPoint = getWorldPosition();
+	/*
 
 	float x = ejectionPoint.getX();
 	float y = ejectionPoint.getY();
@@ -113,6 +107,7 @@
 
 	ejectionPoint.setX(x + (Math::cos(radians) * halfLength));
 	ejectionPoint.setY(y + (Math::sin(radians) * halfLength));
+	*/
 
 	return ejectionPoint;
 }
@@ -283,38 +278,20 @@
 	if (!destroyContainedObjects)
 		return;
 
-	ManagedReference<SceneObject*> deed = getZoneServer()->getObject(deedObjectID);
-
-	if (deed != NULL)
-		deed->destroyObjectFromDatabase(true);
-
 	if (signObject != NULL)
 		signObject->destroyObjectFromDatabase(true);
 
-	//Loop through the cells and delete all objects from the database.
-}
-
-void BuildingObjectImplementation::updateCellPermissionsTo(SceneObject* player) {
-/*	if (!player->isInRange(_this, 256))
-		return;*/
-
-	bool allowEntry = true;
-
-	if (!isPublicStructure() && (!isOnEntryList(player) && !isOnAccessList(player)))
-		allowEntry = false;
+	if (playerStructureComponent == NULL)
+		return;
 
-	if (isOnBanList(player))
-		allowEntry = false;
+	ManagedReference<SceneObject*> deed = getZoneServer()->getObject(playerStructureComponent->getDeedObjectID());
 
-	//If they don't have permission to be inside, kick them out.
-	if (!allowEntry && player->getParentRecursively(SceneObject::BUILDING) == _this) {
-		Vector3 ejectionPoint = getEjectionPoint();
-		player->teleport(ejectionPoint.getX(), zone->getHeight(ejectionPoint.getX(), ejectionPoint.getY()), ejectionPoint.getY(), 0);
-	}
+	if (deed != NULL)
+		deed->destroyObjectFromDatabase(true);
+}
 
-	//Always allow privileged players to enter any structure.
-	if (player->isPlayerCreature() && ((PlayerCreature*) player)->getPlayerObject()->isPrivileged())
-		allowEntry = true;
+void BuildingObjectImplementation::updateCellPermissionsTo(SceneObject* player) {
+	//TODO: Refactor cell permissions.
 
 	for (int i = 0; i < cells.size(); ++i) {
 		ManagedReference<CellObject*> cell = getCell(i);
@@ -322,7 +299,7 @@
 		if (cell == NULL)
 			continue;
 
-		BaseMessage* perm = new UpdateCellPermissionsMessage(cell->getObjectID(), allowEntry);
+		BaseMessage* perm = new UpdateCellPermissionsMessage(cell->getObjectID(), true);
 		player->sendMessage(perm);
 	}
 }
@@ -354,12 +331,12 @@
 		if (!isOnEntryList(player))
 			player->teleport(x, z, y, 0);
 	} else {
-		if (getAccessFee() > 0 && !isOnAccessList(player)) {
+		//if (getAccessFee() > 0 && !isOnAccessList(player)) {
 			//Send access fee popup menu.
 
 			//Kick the player out.
-			player->teleport(x, z, y, 0);
-		}
+			//player->teleport(x, z, y, 0);
+		//}
 	}
 }
 
Index: src/server/zone/objects/building/city/CityHallObject.cpp
===================================================================
--- src/server/zone/objects/building/city/CityHallObject.cpp	(revision 2976)
+++ src/server/zone/objects/building/city/CityHallObject.cpp	(working copy)
@@ -4,6 +4,8 @@
 
 #include "CityHallObject.h"
 
+#include "server/zone/objects/player/PlayerCreature.h"
+
 #include "server/zone/Zone.h"
 
 #include "server/zone/managers/city/CityManager.h"
Index: src/server/zone/objects/building/city/CityHallObject.h
===================================================================
--- src/server/zone/objects/building/city/CityHallObject.h	(revision 2976)
+++ src/server/zone/objects/building/city/CityHallObject.h	(working copy)
@@ -13,6 +13,20 @@
 
 namespace server {
 namespace zone {
+namespace objects {
+namespace player {
+
+class PlayerCreature;
+
+} // namespace player
+} // namespace objects
+} // namespace zone
+} // namespace server
+
+using namespace server::zone::objects::player;
+
+namespace server {
+namespace zone {
 
 class Zone;
 
Index: src/server/zone/objects/building/city/CityHallObject.idl
===================================================================
--- src/server/zone/objects/building/city/CityHallObject.idl	(revision 2976)
+++ src/server/zone/objects/building/city/CityHallObject.idl	(working copy)
@@ -45,6 +45,7 @@
 package server.zone.objects.building.city;
 
 import server.zone.objects.building.BuildingObject;
+import server.zone.objects.player.PlayerCreature;
 import engine.lua.LuaObject;
 import server.zone.Zone;
 import server.zone.managers.city.CityManager;
Index: src/server/zone/objects/building/city/sui/CityAddMilitiaCallback.h
===================================================================
--- src/server/zone/objects/building/city/sui/CityAddMilitiaCallback.h	(revision 2976)
+++ src/server/zone/objects/building/city/sui/CityAddMilitiaCallback.h	(working copy)
@@ -1,12 +0,0 @@
-/*
- * CityAddMilitiaCallback.h
- *
- *  Created on: Nov 3, 2010
- *      Author: crush
- */
-
-#ifndef CITYADDMILITIACALLBACK_H_
-#define CITYADDMILITIACALLBACK_H_
-
-
-#endif /* CITYADDMILITIACALLBACK_H_ */
Index: src/server/zone/objects/building/city/sui/CityAddMilitiaSuiCallback.h
===================================================================
--- src/server/zone/objects/building/city/sui/CityAddMilitiaSuiCallback.h	(revision 2972)
+++ src/server/zone/objects/building/city/sui/CityAddMilitiaSuiCallback.h	(working copy)
@@ -8,5 +8,47 @@
 #ifndef CITYADDMILITIACALLBACK_H_
 #define CITYADDMILITIACALLBACK_H_
 
+#include "server/zone/objects/player/sui/SuiCallback.h"
+
+class CityAddMilitiaSuiCallback : public SuiCallback {
+public:
+	CityAddMilitiaSuiCallback(ZoneServer* serv)
+		: SuiCallback(serv) {
+
+	}
+
+	void run(PlayerCreature* player, SuiBox* suiBox, bool cancel, Vector<UnicodeString>* args) {
+		if (!suiBox->isInputBox() || cancel != 0)
+			return;
+
+		if (args->size() < 1)
+			return;
+
+		String playerName = args->get(0).toString();
+
+		ManagedReference<SceneObject*> obj = suiBox->getUsingObject();
+
+		if (obj == NULL || !obj->isBuildingObject())
+			return;
+
+		BuildingObject* building = (BuildingObject*) obj.get();
+
+		if (!building->isCityHallBuilding())
+			return;
+
+		CityHallObject* city = (CityHallObject*) building;
+
+		Locker _lock(city, player);
+
+		ManagedReference<Zone*> zone = city->getZone();
+
+		if (zone == NULL)
+			return;
+
+		ManagedReference<CityManager*> cityManager = zone->getCityManager();
+		cityManager->addMilitiaMember(city, player, playerName);
+	}
+};
+
 
 #endif /* CITYADDMILITIACALLBACK_H_ */
Index: src/server/zone/objects/building/city/sui/CityCreateNameCallback.h
===================================================================
--- src/server/zone/objects/building/city/sui/CityCreateNameCallback.h	(revision 2976)
+++ src/server/zone/objects/building/city/sui/CityCreateNameCallback.h	(working copy)
@@ -1,12 +0,0 @@
-/*
- * CityCreateNameCallback.h
- *
- *  Created on: Nov 3, 2010
- *      Author: crush
- */
-
-#ifndef CITYCREATENAMECALLBACK_H_
-#define CITYCREATENAMECALLBACK_H_
-
-
-#endif /* CITYCREATENAMECALLBACK_H_ */
Index: src/server/zone/objects/building/city/sui/CityEnableZoningCallback.h
===================================================================
--- src/server/zone/objects/building/city/sui/CityEnableZoningCallback.h	(revision 2976)
+++ src/server/zone/objects/building/city/sui/CityEnableZoningCallback.h	(working copy)
@@ -1,12 +0,0 @@
-/*
- * CityEnableZoningCallback.h
- *
- *  Created on: Nov 3, 2010
- *      Author: crush
- */
-
-#ifndef CITYENABLEZONINGCALLBACK_H_
-#define CITYENABLEZONINGCALLBACK_H_
-
-
-#endif /* CITYENABLEZONINGCALLBACK_H_ */
Index: src/server/zone/objects/building/city/sui/CityEnableZoningSuiCallback.h
===================================================================
--- src/server/zone/objects/building/city/sui/CityEnableZoningSuiCallback.h	(revision 2972)
+++ src/server/zone/objects/building/city/sui/CityEnableZoningSuiCallback.h	(working copy)
@@ -8,5 +8,34 @@
 #ifndef CITYENABLEZONINGCALLBACK_H_
 #define CITYENABLEZONINGCALLBACK_H_
 
+#include "server/zone/objects/player/sui/SuiCallback.h"
+
+class CityEnableZoningCallback : public SuiCallback {
+public:
+	CityEnableZoningCallback(ZoneServer* serv)
+		: SuiCallback(serv) {
+
+	}
+
+	void run(PlayerCreature* player, SuiBox* suiBox, bool cancel, Vector<UnicodeString>* args) {
+		if (!suiBox->isMessageBox() || cancel != 0)
+			return;
+
+		ManagedReference<SceneObject*> usingObject = suiBox->getUsingObject();
+
+		if (usingObject == NULL || !usingObject->isBuildingObject())
+			return;
+
+		BuildingObject* buildingObject = (BuildingObject*) usingObject.get();
+
+		if (!buildingObject->isCityHallBuilding())
+			return;
+
+		CityHallObject* cityHall = (CityHallObject*) buildingObject;
+
+		Locker _lock(cityHall, player);
+		cityHall->toggleZoningEnabled(player);
+	}
+};
 
 #endif /* CITYENABLEZONINGCALLBACK_H_ */
Index: src/server/zone/objects/building/city/sui/CityListMilitiaCallback.h
===================================================================
--- src/server/zone/objects/building/city/sui/CityListMilitiaCallback.h	(revision 2976)
+++ src/server/zone/objects/building/city/sui/CityListMilitiaCallback.h	(working copy)
@@ -1,12 +0,0 @@
-/*
- * CityListMilitiaCallback.h
- *
- *  Created on: Nov 3, 2010
- *      Author: crush
- */
-
-#ifndef CITYLISTMILITIACALLBACK_H_
-#define CITYLISTMILITIACALLBACK_H_
-
-
-#endif /* CITYLISTMILITIACALLBACK_H_ */
Index: src/server/zone/objects/building/city/sui/CityListMilitiaSuiCallback.h
===================================================================
--- src/server/zone/objects/building/city/sui/CityListMilitiaSuiCallback.h	(revision 2972)
+++ src/server/zone/objects/building/city/sui/CityListMilitiaSuiCallback.h	(working copy)
@@ -8,5 +8,57 @@
 #ifndef CITYLISTMILITIACALLBACK_H_
 #define CITYLISTMILITIACALLBACK_H_
 
+#include "server/zone/objects/player/sui/SuiCallback.h"
+
+class CityListMilitiaCallback : public SuiCallback {
+public:
+	CityListMilitiaCallback(ZoneServer* serv)
+		: SuiCallback(serv) {
+
+	}
+
+	void run(PlayerCreature* player, SuiBox* suiBox, bool cancel, Vector<UnicodeString>* args) {
+		if (!suiBox->isListBox() || cancel != 0)
+			return;
+
+		if (args->size() < 2)
+			return;
+
+		bool otherPressed = Bool::valueOf(args->get(0).toString());
+		int index = Integer::valueOf(args->get(1).toString());
+
+		SuiListBox* listBox = (SuiListBox*) suiBox;
+
+		ManagedReference<SceneObject*> obj = listBox->getUsingObject();
+
+		if (obj == NULL || !obj->isBuildingObject())
+			return;
+
+		BuildingObject* building = (BuildingObject*) obj.get();
+
+		if (!building->isCityHallBuilding())
+			return;
+
+		CityHallObject* city = (CityHallObject*) building;
+
+		Locker _lock(city, player);
+
+		ManagedReference<Zone*> zone = city->getZone();
+
+		if (zone == NULL)
+			return;
+
+		if (otherPressed) {
+			city->sendAddMilitiaMemberTo(player);
+		} else {
+			if (index != -1) {
+				ManagedReference<CityManager*> cityManager = zone->getCityManager();
+
+				uint64 playerID = listBox->getMenuObjectID(index);
+				cityManager->removeMilitiaMember(city, player, playerID);
+			}
+		}
+	}
+};
 
 #endif /* CITYLISTMILITIACALLBACK_H_ */
Index: src/server/zone/objects/building/city/sui/CitySetNameCallback.h
===================================================================
--- src/server/zone/objects/building/city/sui/CitySetNameCallback.h	(revision 2976)
+++ src/server/zone/objects/building/city/sui/CitySetNameCallback.h	(working copy)
@@ -1,12 +0,0 @@
-/*
- * CitySetNameCallback.h
- *
- *  Created on: Nov 3, 2010
- *      Author: crush
- */
-
-#ifndef CITYSETNAMECALLBACK_H_
-#define CITYSETNAMECALLBACK_H_
-
-
-#endif /* CITYSETNAMECALLBACK_H_ */
Index: src/server/zone/objects/cell/CellObjectImplementation.cpp
===================================================================
--- src/server/zone/objects/cell/CellObjectImplementation.cpp	(revision 2976)
+++ src/server/zone/objects/cell/CellObjectImplementation.cpp	(working copy)
@@ -88,7 +88,7 @@
 		ManagedReference<BuildingObject*> buildingObject = (BuildingObject*) parent.get();
 
 		if (!buildingObject->isPublicStructure()) {
-			if (!buildingObject->isOnEntryList(player) && !buildingObject->isOnAccessList(player))
+			if (!buildingObject->isOnEntryList(player) /*&& !buildingObject->isOnAccessList(player)*/)
 				allowEntry = false;
 		}
 	}
Index: src/server/zone/objects/creature/commands/sui/SampleRadioactiveConfirmSuiCallback.h
===================================================================
--- src/server/zone/objects/creature/commands/sui/SampleRadioactiveConfirmSuiCallback.h	(revision 0)
+++ src/server/zone/objects/creature/commands/sui/SampleRadioactiveConfirmSuiCallback.h	(revision 0)
@@ -0,0 +1,32 @@
+/*
+ * SampleRadioactiveConfirmSuiCallback.h
+ *
+ *  Created on: Mar 25, 2011
+ *      Author: crush
+ */
+
+#ifndef SAMPLERADIOACTIVECONFIRMSUICALLBACK_H_
+#define SAMPLERADIOACTIVECONFIRMSUICALLBACK_H_
+
+#include "server/zone/objects/player/sui/SuiCallback.h"
+
+class SampleRadioactiveConfirmSuiCallback : public SuiCallback {
+public:
+	SampleRadioactiveConfirmSuiCallback(ZoneServer* serv) : SuiCallback(serv) {
+	}
+
+	void run(PlayerCreature* player, SuiBox* sui, bool cancel, Vector<UnicodeString>* args) {
+		if (cancel != 0)
+			return;
+
+		ManagedReference<SurveyTool*> surveyTool =  player->getSurveyTool();
+
+		if (surveyTool == NULL)
+			return;
+
+		Locker _lock(surveyTool);
+		surveyTool->consentRadioactiveSample(player);
+	}
+};
+
+#endif /* SAMPLERADIOACTIVECONFIRMSUICALLBACK_H_ */
Index: src/server/zone/objects/creature/commands/sui/SurveyConcentratedMinigame2SuiCallback.h
===================================================================
--- src/server/zone/objects/creature/commands/sui/SurveyConcentratedMinigame2SuiCallback.h	(revision 0)
+++ src/server/zone/objects/creature/commands/sui/SurveyConcentratedMinigame2SuiCallback.h	(revision 0)
@@ -0,0 +1,38 @@
+/*
+ * SurveyConcentratedMinigame2SuiCallback.h
+ *
+ *  Created on: Mar 25, 2011
+ *      Author: crush
+ */
+
+#ifndef SURVEYCONCENTRATEDMINIGAME2SUICALLBACK_H_
+#define SURVEYCONCENTRATEDMINIGAME2SUICALLBACK_H_
+
+#include "server/zone/objects/player/sui/SuiCallback.h"
+
+
+class SurveyConcentratedMinigame2SuiCallback : public SuiCallback {
+public:
+	SurveyConcentratedMinigame2SuiCallback(ZoneServer* serv) : SuiCallback(serv) {
+	}
+
+	void run(PlayerCreature* player, SuiBox* sui, bool cancel, Vector<UnicodeString>* args) {
+		if (cancel)
+			return;
+
+		if (args->size() < 1)
+			return;
+
+		int value = Integer::valueOf(args->get(0).toString());
+
+		ManagedReference<SurveyTool*> surveyTool =  player->getSurveyTool();
+
+		if (surveyTool == NULL)
+			return;
+
+		Locker _lock(surveyTool);
+		surveyTool->surveyGnodeMinigame(player, value);
+	}
+};
+
+#endif /* SURVEYCONCENTRATEDMINIGAME2SUICALLBACK_H_ */
Index: src/server/zone/objects/creature/commands/sui/SurveyConcentratedMinigameSuiCallback.h
===================================================================
--- src/server/zone/objects/creature/commands/sui/SurveyConcentratedMinigameSuiCallback.h	(revision 0)
+++ src/server/zone/objects/creature/commands/sui/SurveyConcentratedMinigameSuiCallback.h	(revision 0)
@@ -0,0 +1,38 @@
+/*
+ * SurveyConcentratedMinigameSuiCallback.h
+ *
+ *  Created on: Mar 25, 2011
+ *      Author: crush
+ */
+
+#ifndef SURVEYCONCENTRATEDMINIGAMESUICALLBACK_H_
+#define SURVEYCONCENTRATEDMINIGAMESUICALLBACK_H_
+
+#include "server/zone/objects/player/sui/SuiCallback.h"
+
+
+class SurveyConcentratedMinigameSuiCallback : public SuiCallback {
+public:
+	SurveyConcentratedMinigameSuiCallback(ZoneServer* serv) : SuiCallback(serv) {
+	}
+
+	void run(PlayerCreature* player, SuiBox* sui, bool cancel, Vector<UnicodeString>* args) {
+		if (cancel)
+			return;
+
+		if (args->size() < 1)
+			return;
+
+		int value = Integer::valueOf(args->get(0).toString());
+
+		ManagedReference<SurveyTool*> surveyTool =  player->getSurveyTool();
+
+		if (surveyTool == NULL)
+			return;
+
+		Locker _lock(surveyTool);
+		surveyTool->surveyCnodeMinigame(player, value);
+	}
+};
+
+#endif /* SURVEYCONCENTRATEDMINIGAMESUICALLBACK_H_ */
Index: src/server/zone/objects/creature/sui/TicketCollectorResponseSuiCallback.h
===================================================================
--- src/server/zone/objects/creature/sui/TicketCollectorResponseSuiCallback.h	(revision 0)
+++ src/server/zone/objects/creature/sui/TicketCollectorResponseSuiCallback.h	(revision 0)
@@ -0,0 +1,55 @@
+/*
+ * TicketCollectorResponseSuiCallback.h
+ *
+ *  Created on: Mar 25, 2011
+ *      Author: crush
+ */
+
+#ifndef TICKETCOLLECTORRESPONSESUICALLBACK_H_
+#define TICKETCOLLECTORRESPONSESUICALLBACK_H_
+
+#include "server/zone/objects/player/sui/SuiCallback.h"
+
+
+class TicketCollectorResponseSuiCallback : public SuiCallback {
+public:
+	TicketCollectorResponseSuiCallback(ZoneServer* serv) : SuiCallback(serv) {
+	}
+
+	void run(PlayerCreature* player, SuiBox* sui, bool cancelPressed, Vector<UnicodeString>* args) {
+		if (!suiBox->isListBox() || cancel != 0)
+			return;
+
+		if (args->size() < 1)
+			return;
+
+		SuiListBox* listBox = (SuiListBox*) suiBox;
+
+		int index = Integer::valueOf(args->get(0).toString());
+
+		uint64 ticketObjectID = listBox->getMenuObjectID(index);
+
+		if (ticketObjectID == 0)
+			return;
+
+		ManagedReference<SceneObject*> inventory = player->getSlottedObject("inventory");
+
+		if (inventory == NULL)
+			return;
+
+		ManagedReference<SceneObject*> obj = inventory->getContainerObject(ticketObjectID);
+
+		if (obj == NULL || !obj->isTangibleObject())
+			return;
+
+		TangibleObject* tano = (TangibleObject*) obj.get();
+
+		if (!tano->isTicketObject())
+			return;
+
+		TicketObject* ticket = (TicketObject*) tano;
+		ticket->handleObjectMenuSelect(player, 20);
+	}
+};
+
+#endif /* TICKETCOLLECTORRESPONSESUICALLBACK_H_ */
Index: src/server/zone/objects/installation/InstallationObject.cpp
===================================================================
--- src/server/zone/objects/installation/InstallationObject.cpp	(revision 2976)
+++ src/server/zone/objects/installation/InstallationObject.cpp	(working copy)
@@ -672,11 +672,6 @@
 		return true;
 	}
 
-	if (_name == "lastMaintenanceTime") {
-		TypeInfo<Time >::parseFromBinaryStream(&lastMaintenanceTime, stream);
-		return true;
-	}
-
 	if (_name == "resourceHopper") {
 		TypeInfo<HopperList >::parseFromBinaryStream(&resourceHopper, stream);
 		return true;
@@ -739,14 +734,6 @@
 	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
 	stream->writeShort(_offset, _totalSize);
 
-	_name = "lastMaintenanceTime";
-	_name.toBinaryStream(stream);
-	_offset = stream->getOffset();
-	stream->writeShort(0);
-	TypeInfo<Time >::toBinaryStream(&lastMaintenanceTime, stream);
-	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
-	stream->writeShort(_offset, _totalSize);
-
 	_name = "resourceHopper";
 	_name.toBinaryStream(stream);
 	_offset = stream->getOffset();
@@ -772,7 +759,7 @@
 	stream->writeShort(_offset, _totalSize);
 
 
-	return 8 + StructureObjectImplementation::writeObjectMembers(stream);
+	return 7 + StructureObjectImplementation::writeObjectMembers(stream);
 }
 
 InstallationObjectImplementation::InstallationObjectImplementation() {
Index: src/server/zone/objects/installation/InstallationObject.h
===================================================================
--- src/server/zone/objects/installation/InstallationObject.h	(revision 2976)
+++ src/server/zone/objects/installation/InstallationObject.h	(working copy)
@@ -288,8 +288,6 @@
 
 	Time resourceHopperTimestamp;
 
-	Time lastMaintenanceTime;
-
 	HopperList resourceHopper;
 
 	float hopperSizeMax;
Index: src/server/zone/objects/installation/InstallationObject.idl
===================================================================
--- src/server/zone/objects/installation/InstallationObject.idl	(revision 2976)
+++ src/server/zone/objects/installation/InstallationObject.idl	(working copy)
@@ -79,9 +79,6 @@
 	protected Time resourceHopperTimestamp;
 	
 	@dereferenced
-	protected Time lastMaintenanceTime;
-	
-	@dereferenced
 	protected HopperList resourceHopper; // ID + Size
 
 	protected float hopperSizeMax;
Index: src/server/zone/objects/installation/InstallationObjectImplementation.cpp
===================================================================
--- src/server/zone/objects/installation/InstallationObjectImplementation.cpp	(revision 2976)
+++ src/server/zone/objects/installation/InstallationObjectImplementation.cpp	(working copy)
@@ -54,20 +54,14 @@
 void InstallationObjectImplementation::fillAttributeList(AttributeListMessage* alm, PlayerCreature* object) {
 	//TangibleObjectImplementation::fillAttributeList(alm, object);
 
-	//Add the owner name to the examine window.
-	ManagedReference<SceneObject*> obj = object->getZoneServer()->getObject(ownerObjectID);
-
-	if (obj != NULL && obj->isCreatureObject()) {
-		CreatureObject* owner = (CreatureObject*) obj.get();
-
-		String fullName = owner->getCustomObjectName().toString();
-
-		if (fullName.isEmpty())
-			owner->getObjectName()->getFullPath(fullName);
+	if (playerStructureComponent == NULL)
+		return;
 
-		alm->insertAttribute("owner", fullName);
-	}
+	StructurePermissionList* structurePermissionList = playerStructureComponent->getStructurePermissionList();
 
+	//Add the owner name to the examine window.
+	ManagedReference<SceneObject*> obj = object->getZoneServer()->getObject(structurePermissionList->getOwnerObjectID());
+	alm->insertAttribute("owner", obj->getObjectName()->getDisplayedName());
 }
 
 void InstallationObjectImplementation::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player) {
@@ -90,6 +84,13 @@
 	if (!isOnAdminList(player))
 		return 1;
 
+	ManagedReference<PlanetManager*> planetManager = zone->getPlanetManager();
+
+	if (planetManager == NULL)
+		return 1;
+
+	ManagedReference<StructureManager*> structureManager = planetManager->getStructureManager();
+
 	switch (selectedID) {
 	case 124:
 		sendStatusTo(player);
@@ -100,7 +101,7 @@
 		break;
 
 	case 128:
-		sendDestroyConfirmTo(player);
+		structureManager->startDestroyStructureSession(player, _this);
 		break;
 
 	case 50:
@@ -109,7 +110,7 @@
 
 	case 51:
 		//TODO: Move to structure manager.
-		handleStructureAddEnergy(player);
+		//handleStructureAddEnergy(player);
 		break;
 
 	case 121:
@@ -142,7 +143,7 @@
 		if(!scno->isPlayerCreature())
 			continue;
 
-		if(isOnAdminList(scno->getObjectID()))
+		if(isOnAdminList(scno))
 			scno->sendMessage(message->clone());
 	}
 
@@ -156,21 +157,26 @@
 		return;
 
 	if (value) {
+		if (playerStructureComponent != NULL) {
+			Reference<MaintenanceComponent*> maintenanceComponent = playerStructureComponent->getMaintenanceComponent();
 
-		if (basePowerRate != 0 && surplusPower <= 0) {
-			StringIdChatParameter stringId("player_structure", "power_deposit_incomplete");
-			ChatSystemMessage* msg = new ChatSystemMessage(stringId);
+			if (maintenanceComponent != NULL && maintenanceComponent->getBalance() <= 0) {
+				StringIdChatParameter stringId("@shared:harvester_no_power"); //No power available. Shutting down. (Choose "deposit power" to add power.)
+				ChatSystemMessage* msg = new ChatSystemMessage(stringId);
 
-			broadcastToOperators(msg);
-			return;
-		}
+				broadcastToOperators(msg);
+				return;
+			}
+
+			Reference<MaintenanceComponent*> powerComponent = playerStructureComponent->getPowerComponent();
 
-		if (baseMaintenanceRate != 0 && surplusMaintenance <= 0) {
-			StringIdChatParameter stringId("shared", "harvester_no_maint_4");
-			ChatSystemMessage* msg = new ChatSystemMessage(stringId);
+			if (powerComponent != NULL && powerComponent->getBalance() <= 0) {
+				StringIdChatParameter stringId("@shared:harvester_no_maint_" + String::valueOf(System::random(3) + 1)); //Major system failure detected. Shutting down. (Choose "pay maintenance" to repair.)
+				ChatSystemMessage* msg = new ChatSystemMessage(stringId);
 
-			broadcastToOperators(msg);
-			return;
+				broadcastToOperators(msg);
+				return;
+			}
 		}
 	}
 
@@ -246,7 +252,9 @@
 	updateToDatabase();
 }
 
+//TODO: Redo this.
 void InstallationObjectImplementation::handleStructureAddEnergy(PlayerCreature* player) {
+	/*
 	try {
 		StringBuffer sstext, ssTotalEnergy;
 
@@ -272,7 +280,7 @@
 	} catch (Exception& e) {
 		e.printStackTrace();
 		error("unreported exception in InstallationObjectImplementation::handleStructureAddEnergy");
-	}
+	}*/
 }
 
 float InstallationObjectImplementation::getHopperSize() {
@@ -315,6 +323,7 @@
 }
 
 bool InstallationObjectImplementation::updateMaintenance(Time& workingTime) {
+	/*
 	Time currentTime;
 
 	float elapsedTime = (currentTime.getTime() - lastMaintenanceTime.getTime());
@@ -365,9 +374,9 @@
 
 	lastMaintenanceTime.updateToCurrentTime();
 
-	updateToDatabase();
+	updateToDatabase();*/
 
-	return shutdownWork;
+	return false;
 }
 
 void InstallationObjectImplementation::updateHopper(Time& workingTime, bool shutdownAfterUpdate) {
@@ -604,16 +613,19 @@
 	if (!destroyContainedObjects)
 		return;
 
-	ManagedReference<SceneObject*> deed = getZoneServer()->getObject(deedObjectID);
-
-	if (deed != NULL)
-		deed->destroyObjectFromDatabase(true);
-
 	for (int i = 0; i < resourceHopper.size(); ++i) {
 		ResourceContainer* container = resourceHopper.get(i);
 
 		container->destroyObjectFromDatabase(true);
 	}
+
+	if (playerStructureComponent == NULL)
+		return;
+
+	ManagedReference<SceneObject*> deed = getZoneServer()->getObject(playerStructureComponent->getDeedObjectID());
+
+	if (deed != NULL)
+		deed->destroyObjectFromDatabase(true);
 }
 
 void InstallationObjectImplementation::updateResourceContainerQuantity(ResourceContainer* container, int newQuantity, bool notifyClient) {
Index: src/server/zone/objects/installation/garage/GarageInstallationImplementation.cpp
===================================================================
--- src/server/zone/objects/installation/garage/GarageInstallationImplementation.cpp	(revision 2976)
+++ src/server/zone/objects/installation/garage/GarageInstallationImplementation.cpp	(working copy)
@@ -10,6 +10,7 @@
 #include "GarageInstallation.h"
 #include "server/zone/objects/area/ActiveArea.h"
 #include "server/zone/ZoneServer.h"
+#include "server/zone/ZoneProcessServer.h"
 
 void GarageInstallationImplementation::createChildObjects() {
 	uint32 garageAreaTemplateCRC = String("object/garage_area.iff").hashCode();
Index: src/server/zone/objects/installation/generator/GeneratorObject.cpp
===================================================================
--- src/server/zone/objects/installation/generator/GeneratorObject.cpp	(revision 2976)
+++ src/server/zone/objects/installation/generator/GeneratorObject.cpp	(working copy)
@@ -6,6 +6,8 @@
 
 #include "server/zone/objects/area/ActiveArea.h"
 
+#include "server/zone/objects/player/PlayerCreature.h"
+
 /*
  *	GeneratorObjectStub
  */
Index: src/server/zone/objects/installation/generator/GeneratorObject.h
===================================================================
--- src/server/zone/objects/installation/generator/GeneratorObject.h	(revision 2976)
+++ src/server/zone/objects/installation/generator/GeneratorObject.h	(working copy)
@@ -25,6 +25,20 @@
 
 using namespace server::zone::objects::area;
 
+namespace server {
+namespace zone {
+namespace objects {
+namespace player {
+
+class PlayerCreature;
+
+} // namespace player
+} // namespace objects
+} // namespace zone
+} // namespace server
+
+using namespace server::zone::objects::player;
+
 #include "server/zone/objects/installation/InstallationObject.h"
 
 namespace server {
Index: src/server/zone/objects/installation/generator/GeneratorObject.idl
===================================================================
--- src/server/zone/objects/installation/generator/GeneratorObject.idl	(revision 2976)
+++ src/server/zone/objects/installation/generator/GeneratorObject.idl	(working copy)
@@ -2,6 +2,7 @@
 
 import server.zone.objects.installation.InstallationObject;
 import server.zone.objects.area.ActiveArea;
+import server.zone.objects.player.PlayerCreature;
 
 class GeneratorObject extends InstallationObject {
 	public GeneratorObject() {		
Index: src/server/zone/objects/installation/harvester/HarvesterObject.cpp
===================================================================
--- src/server/zone/objects/installation/harvester/HarvesterObject.cpp	(revision 2976)
+++ src/server/zone/objects/installation/harvester/HarvesterObject.cpp	(working copy)
@@ -6,6 +6,8 @@
 
 #include "server/zone/objects/area/ActiveArea.h"
 
+#include "server/zone/objects/player/PlayerCreature.h"
+
 /*
  *	HarvesterObjectStub
  */
@@ -246,10 +248,6 @@
 void HarvesterObjectImplementation::loadTemplateData(SharedObjectTemplate* templateData) {
 	// server/zone/objects/installation/harvester/HarvesterObject.idl():  		super.loadTemplateData(templateData);
 	InstallationObjectImplementation::loadTemplateData(templateData);
-	// server/zone/objects/installation/harvester/HarvesterObject.idl():  		super.surplusPower = 1000;
-	InstallationObjectImplementation::surplusPower = 1000;
-	// server/zone/objects/installation/harvester/HarvesterObject.idl():  		super.basePowerRate = 100;
-	InstallationObjectImplementation::basePowerRate = 100;
 }
 
 bool HarvesterObjectImplementation::isHarvesterObject() {
Index: src/server/zone/objects/installation/harvester/HarvesterObject.h
===================================================================
--- src/server/zone/objects/installation/harvester/HarvesterObject.h	(revision 2976)
+++ src/server/zone/objects/installation/harvester/HarvesterObject.h	(working copy)
@@ -25,6 +25,20 @@
 
 using namespace server::zone::objects::area;
 
+namespace server {
+namespace zone {
+namespace objects {
+namespace player {
+
+class PlayerCreature;
+
+} // namespace player
+} // namespace objects
+} // namespace zone
+} // namespace server
+
+using namespace server::zone::objects::player;
+
 #include "server/zone/objects/installation/InstallationObject.h"
 
 namespace server {
Index: src/server/zone/objects/installation/harvester/HarvesterObject.idl
===================================================================
--- src/server/zone/objects/installation/harvester/HarvesterObject.idl	(revision 2976)
+++ src/server/zone/objects/installation/harvester/HarvesterObject.idl	(working copy)
@@ -47,6 +47,8 @@
 import server.zone.objects.installation.InstallationObject;
 import server.zone.objects.area.ActiveArea;
 
+import server.zone.objects.player.PlayerCreature;
+
 class HarvesterObject extends InstallationObject {
 	public HarvesterObject() {
 		Logger.setLoggingName("HarvesterObject");
@@ -61,9 +63,6 @@
 	@local
 	public native void loadTemplateData(SharedObjectTemplate templateData) {
 		super.loadTemplateData(templateData);
-		
-		super.surplusPower = 1000;
-		super.basePowerRate = 100;
 	}
 	
 	/**
Index: src/server/zone/objects/installation/shuttle/ShuttleInstallationImplementation.cpp
===================================================================
--- src/server/zone/objects/installation/shuttle/ShuttleInstallationImplementation.cpp	(revision 2976)
+++ src/server/zone/objects/installation/shuttle/ShuttleInstallationImplementation.cpp	(working copy)
@@ -10,6 +10,7 @@
 #include "server/zone/managers/creature/CreatureManager.h"
 #include "server/zone/objects/creature/shuttle/ShuttleCreature.h"
 #include "server/zone/objects/creature/CreatureObject.h"
+#include "server/zone/objects/player/PlayerCreature.h"
 #include "server/zone/objects/tangible/terminal/ticketcollector/TicketCollector.h"
 #include "server/zone/objects/tangible/terminal/travel/TravelTerminal.h"
 #include "server/zone/Zone.h"
Index: src/server/zone/objects/player/sessions/StructureDestroySession.cpp
===================================================================
--- src/server/zone/objects/player/sessions/StructureDestroySession.cpp	(revision 0)
+++ src/server/zone/objects/player/sessions/StructureDestroySession.cpp	(revision 0)
@@ -0,0 +1,384 @@
+/*
+ *	server/zone/objects/player/sessions/StructureDestroySession.cpp generated by engine3 IDL compiler 0.60
+ */
+
+#include "StructureDestroySession.h"
+
+/*
+ *	StructureDestroySessionStub
+ */
+
+enum {RPC_INITIALIZESESSION__ = 6,RPC_CANCELSESSION__,RPC_CLEARSESSION__,RPC_GETDESTROYCODE__,RPC_VALIDATEDESTROYCODE__INT_};
+
+StructureDestroySession::StructureDestroySession() : Facade(DummyConstructorParameter::instance()) {
+	StructureDestroySessionImplementation* _implementation = new StructureDestroySessionImplementation();
+	_impl = _implementation;
+	_impl->_setStub(this);
+}
+
+StructureDestroySession::StructureDestroySession(DummyConstructorParameter* param) : Facade(param) {
+}
+
+StructureDestroySession::~StructureDestroySession() {
+}
+
+
+int StructureDestroySession::initializeSession() {
+	StructureDestroySessionImplementation* _implementation = (StructureDestroySessionImplementation*) _getImplementation();
+	if (_implementation == NULL) {
+		if (!deployed)
+			throw ObjectNotDeployedException(this);
+
+		DistributedMethod method(this, RPC_INITIALIZESESSION__);
+
+		return method.executeWithSignedIntReturn();
+	} else
+		return _implementation->initializeSession();
+}
+
+int StructureDestroySession::cancelSession() {
+	StructureDestroySessionImplementation* _implementation = (StructureDestroySessionImplementation*) _getImplementation();
+	if (_implementation == NULL) {
+		if (!deployed)
+			throw ObjectNotDeployedException(this);
+
+		DistributedMethod method(this, RPC_CANCELSESSION__);
+
+		return method.executeWithSignedIntReturn();
+	} else
+		return _implementation->cancelSession();
+}
+
+int StructureDestroySession::clearSession() {
+	StructureDestroySessionImplementation* _implementation = (StructureDestroySessionImplementation*) _getImplementation();
+	if (_implementation == NULL) {
+		if (!deployed)
+			throw ObjectNotDeployedException(this);
+
+		DistributedMethod method(this, RPC_CLEARSESSION__);
+
+		return method.executeWithSignedIntReturn();
+	} else
+		return _implementation->clearSession();
+}
+
+unsigned int StructureDestroySession::getDestroyCode() {
+	StructureDestroySessionImplementation* _implementation = (StructureDestroySessionImplementation*) _getImplementation();
+	if (_implementation == NULL) {
+		if (!deployed)
+			throw ObjectNotDeployedException(this);
+
+		DistributedMethod method(this, RPC_GETDESTROYCODE__);
+
+		return method.executeWithUnsignedIntReturn();
+	} else
+		return _implementation->getDestroyCode();
+}
+
+bool StructureDestroySession::validateDestroyCode(unsigned int code) {
+	StructureDestroySessionImplementation* _implementation = (StructureDestroySessionImplementation*) _getImplementation();
+	if (_implementation == NULL) {
+		if (!deployed)
+			throw ObjectNotDeployedException(this);
+
+		DistributedMethod method(this, RPC_VALIDATEDESTROYCODE__INT_);
+		method.addUnsignedIntParameter(code);
+
+		return method.executeWithBooleanReturn();
+	} else
+		return _implementation->validateDestroyCode(code);
+}
+
+DistributedObjectServant* StructureDestroySession::_getImplementation() {
+
+	_updated = true;
+	return _impl;
+}
+
+void StructureDestroySession::_setImplementation(DistributedObjectServant* servant) {
+	_impl = servant;
+}
+
+/*
+ *	StructureDestroySessionImplementation
+ */
+
+StructureDestroySessionImplementation::StructureDestroySessionImplementation(DummyConstructorParameter* param) : FacadeImplementation(param) {
+	_initializeImplementation();
+}
+
+
+StructureDestroySessionImplementation::~StructureDestroySessionImplementation() {
+}
+
+
+void StructureDestroySessionImplementation::finalize() {
+}
+
+void StructureDestroySessionImplementation::_initializeImplementation() {
+	_setClassHelper(StructureDestroySessionHelper::instance());
+
+	_serializationHelperMethod();
+	_serializationHelperMethod();
+}
+
+void StructureDestroySessionImplementation::_setStub(DistributedObjectStub* stub) {
+	_this = (StructureDestroySession*) stub;
+	FacadeImplementation::_setStub(stub);
+}
+
+DistributedObjectStub* StructureDestroySessionImplementation::_getStub() {
+	return _this;
+}
+
+StructureDestroySessionImplementation::operator const StructureDestroySession*() {
+	return _this;
+}
+
+void StructureDestroySessionImplementation::lock(bool doLock) {
+	_this->lock(doLock);
+}
+
+void StructureDestroySessionImplementation::lock(ManagedObject* obj) {
+	_this->lock(obj);
+}
+
+void StructureDestroySessionImplementation::rlock(bool doLock) {
+	_this->rlock(doLock);
+}
+
+void StructureDestroySessionImplementation::wlock(bool doLock) {
+	_this->wlock(doLock);
+}
+
+void StructureDestroySessionImplementation::wlock(ManagedObject* obj) {
+	_this->wlock(obj);
+}
+
+void StructureDestroySessionImplementation::unlock(bool doLock) {
+	_this->unlock(doLock);
+}
+
+void StructureDestroySessionImplementation::runlock(bool doLock) {
+	_this->runlock(doLock);
+}
+
+void StructureDestroySessionImplementation::_serializationHelperMethod() {
+	FacadeImplementation::_serializationHelperMethod();
+
+	_setClassName("StructureDestroySession");
+
+}
+
+void StructureDestroySessionImplementation::readObject(ObjectInputStream* stream) {
+	uint16 _varCount = stream->readShort();
+	for (int i = 0; i < _varCount; ++i) {
+		String _name;
+		_name.parseFromBinaryStream(stream);
+
+		uint16 _varSize = stream->readShort();
+
+		int _currentOffset = stream->getOffset();
+
+		if(StructureDestroySessionImplementation::readObjectMember(stream, _name)) {
+		}
+
+		stream->setOffset(_currentOffset + _varSize);
+	}
+
+	initializeTransientMembers();
+}
+
+bool StructureDestroySessionImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
+	if (FacadeImplementation::readObjectMember(stream, _name))
+		return true;
+
+	if (_name == "destroyer") {
+		TypeInfo<ManagedWeakReference<PlayerCreature* > >::parseFromBinaryStream(&destroyer, stream);
+		return true;
+	}
+
+	if (_name == "structure") {
+		TypeInfo<ManagedWeakReference<StructureObject* > >::parseFromBinaryStream(&structure, stream);
+		return true;
+	}
+
+	if (_name == "destroyCode") {
+		TypeInfo<unsigned int >::parseFromBinaryStream(&destroyCode, stream);
+		return true;
+	}
+
+
+	return false;
+}
+
+void StructureDestroySessionImplementation::writeObject(ObjectOutputStream* stream) {
+	int _currentOffset = stream->getOffset();
+	stream->writeShort(0);
+	int _varCount = StructureDestroySessionImplementation::writeObjectMembers(stream);
+	stream->writeShort(_currentOffset, _varCount);
+}
+
+int StructureDestroySessionImplementation::writeObjectMembers(ObjectOutputStream* stream) {
+	String _name;
+	int _offset;
+	uint16 _totalSize;
+	_name = "destroyer";
+	_name.toBinaryStream(stream);
+	_offset = stream->getOffset();
+	stream->writeShort(0);
+	TypeInfo<ManagedWeakReference<PlayerCreature* > >::toBinaryStream(&destroyer, stream);
+	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
+	stream->writeShort(_offset, _totalSize);
+
+	_name = "structure";
+	_name.toBinaryStream(stream);
+	_offset = stream->getOffset();
+	stream->writeShort(0);
+	TypeInfo<ManagedWeakReference<StructureObject* > >::toBinaryStream(&structure, stream);
+	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
+	stream->writeShort(_offset, _totalSize);
+
+	_name = "destroyCode";
+	_name.toBinaryStream(stream);
+	_offset = stream->getOffset();
+	stream->writeShort(0);
+	TypeInfo<unsigned int >::toBinaryStream(&destroyCode, stream);
+	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
+	stream->writeShort(_offset, _totalSize);
+
+
+	return 3 + FacadeImplementation::writeObjectMembers(stream);
+}
+
+StructureDestroySessionImplementation::StructureDestroySessionImplementation() {
+	_initializeImplementation();
+	// server/zone/objects/player/sessions/StructureDestroySession.idl():  		Logger.setLoggingName("StructureDestroySession");
+	Logger::setLoggingName("StructureDestroySession");
+	// server/zone/objects/player/sessions/StructureDestroySession.idl():  		Logger.setLogging(true);
+	Logger::setLogging(true);
+	// server/zone/objects/player/sessions/StructureDestroySession.idl():  		initializeSession();
+	initializeSession();
+}
+
+int StructureDestroySessionImplementation::initializeSession() {
+	// server/zone/objects/player/sessions/StructureDestroySession.idl():  		destroyCode = System.random(899999) + 100000;
+	destroyCode = System::random(899999) + 100000;
+	// server/zone/objects/player/sessions/StructureDestroySession.idl():  		return 0;
+	return 0;
+}
+
+int StructureDestroySessionImplementation::cancelSession() {
+	// server/zone/objects/player/sessions/StructureDestroySession.idl():  		if 
+	if (destroyer != NULL)	// server/zone/objects/player/sessions/StructureDestroySession.idl():  			destroyer.dropActiveSession(SessionFacadeType.STRUCTURE_DESTROY);
+	destroyer->dropActiveSession(SessionFacadeType::STRUCTURE_DESTROY);
+	// server/zone/objects/player/sessions/StructureDestroySession.idl():  		return 
+	if (structure != NULL)	// server/zone/objects/player/sessions/StructureDestroySession.idl():  			structure.dropActiveSession(SessionFacadeType.STRUCTURE_DESTROY);
+	structure->dropActiveSession(SessionFacadeType::STRUCTURE_DESTROY);
+	// server/zone/objects/player/sessions/StructureDestroySession.idl():  		return 0;
+	return 0;
+}
+
+int StructureDestroySessionImplementation::clearSession() {
+	// server/zone/objects/player/sessions/StructureDestroySession.idl():  		return 0;
+	return 0;
+}
+
+unsigned int StructureDestroySessionImplementation::getDestroyCode() {
+	// server/zone/objects/player/sessions/StructureDestroySession.idl():  		return destroyCode;
+	return destroyCode;
+}
+
+bool StructureDestroySessionImplementation::validateDestroyCode(unsigned int code) {
+	// server/zone/objects/player/sessions/StructureDestroySession.idl():  		return (code == destroyCode);
+	return (code == destroyCode);
+}
+
+/*
+ *	StructureDestroySessionAdapter
+ */
+
+StructureDestroySessionAdapter::StructureDestroySessionAdapter(StructureDestroySessionImplementation* obj) : FacadeAdapter(obj) {
+}
+
+Packet* StructureDestroySessionAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
+	Packet* resp = new MethodReturnMessage(0);
+
+	switch (methid) {
+	case RPC_INITIALIZESESSION__:
+		resp->insertSignedInt(initializeSession());
+		break;
+	case RPC_CANCELSESSION__:
+		resp->insertSignedInt(cancelSession());
+		break;
+	case RPC_CLEARSESSION__:
+		resp->insertSignedInt(clearSession());
+		break;
+	case RPC_GETDESTROYCODE__:
+		resp->insertInt(getDestroyCode());
+		break;
+	case RPC_VALIDATEDESTROYCODE__INT_:
+		resp->insertBoolean(validateDestroyCode(inv->getUnsignedIntParameter()));
+		break;
+	default:
+		return NULL;
+	}
+
+	return resp;
+}
+
+int StructureDestroySessionAdapter::initializeSession() {
+	return ((StructureDestroySessionImplementation*) impl)->initializeSession();
+}
+
+int StructureDestroySessionAdapter::cancelSession() {
+	return ((StructureDestroySessionImplementation*) impl)->cancelSession();
+}
+
+int StructureDestroySessionAdapter::clearSession() {
+	return ((StructureDestroySessionImplementation*) impl)->clearSession();
+}
+
+unsigned int StructureDestroySessionAdapter::getDestroyCode() {
+	return ((StructureDestroySessionImplementation*) impl)->getDestroyCode();
+}
+
+bool StructureDestroySessionAdapter::validateDestroyCode(unsigned int code) {
+	return ((StructureDestroySessionImplementation*) impl)->validateDestroyCode(code);
+}
+
+/*
+ *	StructureDestroySessionHelper
+ */
+
+StructureDestroySessionHelper* StructureDestroySessionHelper::staticInitializer = StructureDestroySessionHelper::instance();
+
+StructureDestroySessionHelper::StructureDestroySessionHelper() {
+	className = "StructureDestroySession";
+
+	Core::getObjectBroker()->registerClass(className, this);
+}
+
+void StructureDestroySessionHelper::finalizeHelper() {
+	StructureDestroySessionHelper::finalize();
+}
+
+DistributedObject* StructureDestroySessionHelper::instantiateObject() {
+	return new StructureDestroySession(DummyConstructorParameter::instance());
+}
+
+DistributedObjectServant* StructureDestroySessionHelper::instantiateServant() {
+	return new StructureDestroySessionImplementation(DummyConstructorParameter::instance());
+}
+
+DistributedObjectAdapter* StructureDestroySessionHelper::createAdapter(DistributedObjectStub* obj) {
+	DistributedObjectAdapter* adapter = new StructureDestroySessionAdapter((StructureDestroySessionImplementation*) obj->_getImplementation());
+
+	obj->_setClassName(className);
+	obj->_setClassHelper(this);
+
+	adapter->setStub(obj);
+
+	return adapter;
+}
+
Index: src/server/zone/objects/player/sessions/StructureDestroySession.h
===================================================================
--- src/server/zone/objects/player/sessions/StructureDestroySession.h	(revision 0)
+++ src/server/zone/objects/player/sessions/StructureDestroySession.h	(revision 0)
@@ -0,0 +1,165 @@
+/*
+ *	server/zone/objects/player/sessions/StructureDestroySession.h generated by engine3 IDL compiler 0.60
+ */
+
+#ifndef STRUCTUREDESTROYSESSION_H_
+#define STRUCTUREDESTROYSESSION_H_
+
+#include "engine/core/Core.h"
+
+#include "engine/core/ManagedReference.h"
+
+#include "engine/core/ManagedWeakReference.h"
+
+#include "system/lang/System.h"
+
+#include "server/zone/objects/scene/SessionFacadeType.h"
+
+#include "engine/util/Facade.h"
+
+namespace server {
+namespace zone {
+namespace objects {
+namespace player {
+
+class StructureDestroySession : public Facade {
+public:
+	StructureDestroySession();
+
+	int initializeSession();
+
+	int cancelSession();
+
+	int clearSession();
+
+	unsigned int getDestroyCode();
+
+	bool validateDestroyCode(unsigned int code);
+
+	DistributedObjectServant* _getImplementation();
+
+	void _setImplementation(DistributedObjectServant* servant);
+
+protected:
+	StructureDestroySession(DummyConstructorParameter* param);
+
+	virtual ~StructureDestroySession();
+
+	friend class StructureDestroySessionHelper;
+};
+
+} // namespace player
+} // namespace objects
+} // namespace zone
+} // namespace server
+
+using namespace server::zone::objects::player;
+
+namespace server {
+namespace zone {
+namespace objects {
+namespace player {
+
+class StructureDestroySessionImplementation : public FacadeImplementation {
+protected:
+	ManagedWeakReference<PlayerCreature* > destroyer;
+
+	ManagedWeakReference<StructureObject* > structure;
+
+	unsigned int destroyCode;
+
+public:
+	StructureDestroySessionImplementation();
+
+	StructureDestroySessionImplementation(DummyConstructorParameter* param);
+
+	int initializeSession();
+
+	int cancelSession();
+
+	int clearSession();
+
+	unsigned int getDestroyCode();
+
+	bool validateDestroyCode(unsigned int code);
+
+	StructureDestroySession* _this;
+
+	operator const StructureDestroySession*();
+
+	DistributedObjectStub* _getStub();
+	virtual void readObject(ObjectInputStream* stream);
+	virtual void writeObject(ObjectOutputStream* stream);
+protected:
+	virtual ~StructureDestroySessionImplementation();
+
+	void finalize();
+
+	void _initializeImplementation();
+
+	void _setStub(DistributedObjectStub* stub);
+
+	void lock(bool doLock = true);
+
+	void lock(ManagedObject* obj);
+
+	void rlock(bool doLock = true);
+
+	void wlock(bool doLock = true);
+
+	void wlock(ManagedObject* obj);
+
+	void unlock(bool doLock = true);
+
+	void runlock(bool doLock = true);
+
+	void _serializationHelperMethod();
+	bool readObjectMember(ObjectInputStream* stream, const String& name);
+	int writeObjectMembers(ObjectOutputStream* stream);
+
+	friend class StructureDestroySession;
+};
+
+class StructureDestroySessionAdapter : public FacadeAdapter {
+public:
+	StructureDestroySessionAdapter(StructureDestroySessionImplementation* impl);
+
+	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);
+
+	int initializeSession();
+
+	int cancelSession();
+
+	int clearSession();
+
+	unsigned int getDestroyCode();
+
+	bool validateDestroyCode(unsigned int code);
+
+};
+
+class StructureDestroySessionHelper : public DistributedObjectClassHelper, public Singleton<StructureDestroySessionHelper> {
+	static StructureDestroySessionHelper* staticInitializer;
+
+public:
+	StructureDestroySessionHelper();
+
+	void finalizeHelper();
+
+	DistributedObject* instantiateObject();
+
+	DistributedObjectServant* instantiateServant();
+
+	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);
+
+	friend class Singleton<StructureDestroySessionHelper>;
+};
+
+} // namespace player
+} // namespace objects
+} // namespace zone
+} // namespace server
+
+using namespace server::zone::objects::player;
+
+#endif /*STRUCTUREDESTROYSESSION_H_*/
Index: src/server/zone/objects/player/sessions/StructureDestroySession.idl
===================================================================
--- src/server/zone/objects/player/sessions/StructureDestroySession.idl	(revision 0)
+++ src/server/zone/objects/player/sessions/StructureDestroySession.idl	(revision 0)
@@ -0,0 +1,99 @@
+/*
+Copyright (C) 2007 <SWGEmu>
+
+This File is part of Core3.
+
+This program is free software; you can redistribute
+it and/or modify it under the terms of the GNU Lesser
+General Public License as published by the Free Software
+Foundation; either version 2 of the License,
+or (at your option) any later version.
+
+This program is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+See the GNU Lesser General Public License for
+more details.
+
+You should have received a copy of the GNU Lesser General
+Public License along with this program; if not, write to
+the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
+
+Linking Engine3 statically or dynamically with other modules
+is making a combined work based on Engine3.
+Thus, the terms and conditions of the GNU Lesser General Public License
+cover the whole combination.
+
+In addition, as a special exception, the copyright holders of Engine3
+give you permission to combine Engine3 program with free software
+programs or libraries that are released under the GNU LGPL and with
+code included in the standard release of Core3 under the GNU LGPL
+license (or modified versions of such code, with unchanged license).
+You may copy and distribute such a system following the terms of the
+GNU LGPL for Engine3 and the licenses of the other code concerned,
+provided that you include the source code of that other code when
+and as the GNU LGPL requires distribution of source code.
+
+Note that people who make modified versions of Engine3 are not obligated
+to grant this special exception for their modified versions;
+it is their choice whether to do so. The GNU Lesser General Public License
+gives permission to release a modified version without this exception;
+this exception also makes it possible to release a modified version
+which carries forward this exception.
+ */
+
+package server.zone.objects.player;
+
+import engine.util.Facade;
+include system.lang.System;
+include server.zone.objects.scene.SessionFacadeType;
+
+class StructureDestroySession extends Facade {
+	@weakReference
+	protected PlayerCreature destroyer;
+	
+	@weakReference
+	protected StructureObject structure;
+	
+	protected unsigned int destroyCode;
+	
+	public StructureDestroySession() {
+		Logger.setLoggingName("StructureDestroySession");
+		Logger.setLogging(true);
+		
+		initializeSession();
+	}
+
+	public int initializeSession() {
+		destroyCode = System.random(899999) + 100000;
+		
+		return 0;
+	}
+	
+	public int cancelSession() {
+		if (destroyer != null)
+			destroyer.dropActiveSession(SessionFacadeType.STRUCTURE_DESTROY);
+		
+		if (structure != null)
+			structure.dropActiveSession(SessionFacadeType.STRUCTURE_DESTROY);
+		
+		return 0;
+	}
+	
+	public int clearSession() {
+		return 0;
+	}
+	
+	public unsigned int getDestroyCode() {
+		return destroyCode;
+	}
+	
+	/**
+	 * Checks if the code is the same as the issued destroy code.
+	 * @param code The code to check against the issued destroy code.
+	 * @return True if the codes match.
+	 */
+	public boolean validateDestroyCode(unsigned int code) {
+		return (code == destroyCode);
+	}
+}
Index: src/server/zone/objects/player/sui/callbacks/BankTransferSuiCallback.h
===================================================================
--- src/server/zone/objects/player/sui/callbacks/BankTransferSuiCallback.h	(revision 0)
+++ src/server/zone/objects/player/sui/callbacks/BankTransferSuiCallback.h	(revision 0)
@@ -0,0 +1,49 @@
+/*
+ * BankTransferSuiCallback.h
+ *
+ *  Created on: Mar 25, 2011
+ *      Author: crush
+ */
+
+#ifndef BANKTRANSFERSUICALLBACK_H_
+#define BANKTRANSFERSUICALLBACK_H_
+
+#include "server/zone/objects/player/sui/SuiCallback.h"
+
+
+class BankTransferSuiCallback : public SuiCallback {
+public:
+	BankTransferSuiCallback(ZoneServer* serv) : SuiCallback(serv) {
+	}
+
+	void run(PlayerCreature* player, SuiBox* sui, bool cancel, Vector<UnicodeString>* args) {
+		if (!suiBox->isBankTransferBox() || cancel)
+			return;
+
+		if (args->size() < 2)
+			return;
+
+		int cash = Integer::valueOf(args->get(0).toString());
+		int bank = Integer::valueOf(args->get(1).toString());
+
+		SuiBankTransferBox* suiBank = (SuiBankTransferBox*) suiBox;
+
+		ManagedReference<SceneObject*> bankObject = suiBank->getBank();
+
+		if (bankObject == NULL)
+			return;
+
+		if (!player->isInRange(bankObject, 5))
+			return;
+
+		uint32 currentCash = player->getCashCredits();
+		uint32 currentBank = player->getBankCredits();
+
+		if ((currentCash + currentBank) == ((uint32) cash + (uint32) bank)) {
+			player->setCashCredits(cash);
+			player->setBankCredits(bank);
+		}
+	}
+};
+
+#endif /* BANKTRANSFERSUICALLBACK_H_ */
Index: src/server/zone/objects/player/sui/callbacks/CharacterBuilderSuiCallback.h
===================================================================
--- src/server/zone/objects/player/sui/callbacks/CharacterBuilderSuiCallback.h	(revision 0)
+++ src/server/zone/objects/player/sui/callbacks/CharacterBuilderSuiCallback.h	(revision 0)
@@ -0,0 +1,165 @@
+/*
+ * CharacterBuilderSuiCallback.h
+ *
+ *  Created on: Mar 25, 2011
+ *      Author: crush
+ */
+
+#ifndef CHARACTERBUILDERSUICALLBACK_H_
+#define CHARACTERBUILDERSUICALLBACK_H_
+
+#include "server/zone/objects/player/sui/SuiCallback.h"
+
+
+class CharacterBuilderSuiCallback : public SuiCallback {
+public:
+	CharacterBuilderSuiCallback(ZoneServer* serv) : SuiCallback(serv) {
+	}
+
+	void run(PlayerCreature* player, SuiBox* sui, bool cancelPressed, Vector<UnicodeString>* args) {
+		ZoneServer* zserv = player->getZoneServer();
+
+		if (args->size() < 1)
+			return;
+
+		int index = Integer::valueOf(args->get(0).toString());
+
+		if (!suiBox->isCharacterBuilderBox())
+			return;
+
+		ManagedReference<SuiCharacterBuilderBox*> cbSui = (SuiCharacterBuilderBox*) suiBox;
+
+		CharacterBuilderMenuNode* currentNode = cbSui->getCurrentNode();
+
+		//If cancel was pressed and there is no parent node to backup too, then we kill the box/menu.
+		if (currentNode == NULL || (cancel != 0 && !currentNode->hasParentNode()))
+			return;
+
+		//Back was pressed. Send the node above it.
+		if (cancelPressed) {
+			CharacterBuilderMenuNode* parentNode = currentNode->getParentNode();
+			cbSui->setCurrentNode(parentNode);
+
+			player->addSuiBox(cbSui);
+			player->sendMessage(cbSui->generateMessage());
+			return;
+		}
+
+		CharacterBuilderMenuNode* node = currentNode->getChildNodeAt(index);
+
+		//Node doesn't exist or the index was out of bounds. Should probably resend the menu here.
+		if (node == NULL) {
+			player->addSuiBox(cbSui);
+			player->sendMessage(cbSui->generateMessage());
+			return;
+		}
+
+		if (node->hasChildNodes()) {
+			//If it has child nodes, display them.
+			cbSui->setCurrentNode(node);
+			player->addSuiBox(cbSui);
+			player->sendMessage(cbSui->generateMessage());
+		} else {
+
+			String templatePath = node->getTemplatePath();
+
+			if (templatePath.indexOf(".iff") < 0) { // Non-item selections
+
+				if (templatePath == "unlearn_all_skills") {
+
+					player->sendSystemMessage("All skills unlearned.");
+					server->getProfessionManager()->surrenderAll(player);
+
+				} else if (templatePath == "cleanse_character") {
+
+					if (!player->isInCombat()) {
+						player->sendSystemMessage("You have been cleansed from the signs of previous battles.");
+
+						for (int i = 0; i < 9; ++i) {
+							player->setWounds(i, 0);
+						}
+
+						player->setShockWounds(0);
+					} else {
+						player->sendSystemMessage("Not within combat.");
+					}
+
+				} else if (templatePath == "enhance_character") {
+
+					SceneObject* scob = cbSui->getUsingObject();
+					if (scob != NULL) {
+
+						if (scob->getGameObjectType() == SceneObjectImplementation::CHARACTERBUILDERTERMINAL) {
+							CharacterBuilderTerminal* bluefrog = (CharacterBuilderTerminal*) scob;
+							bluefrog->enhanceCharacter(player);
+						}
+					}
+
+				} else if (templatePath == "credits") {
+
+					player->addCashCredits(50000, true);
+					player->sendSystemMessage("You have received 50.000 Credits");
+
+				} else if (templatePath == "language") {
+
+					SceneObject* scob = cbSui->getUsingObject();
+					if (scob != NULL) {
+
+						if (scob->getGameObjectType() == SceneObjectImplementation::CHARACTERBUILDERTERMINAL) {
+							CharacterBuilderTerminal* bluefrog = (CharacterBuilderTerminal*) scob;
+							bluefrog->giveLanguages(player);
+						}
+					}
+
+				} else if (templatePath == "apply_dots") {
+					player->addDotState(CreatureState::POISONED, 100, CreatureAttribute::HEALTH, 60, 80, 0);
+					player->addDotState(CreatureState::BLEEDING, 100, CreatureAttribute::ACTION, 60, 80, 0);
+					player->addDotState(CreatureState::DISEASED, 100, CreatureAttribute::ACTION, 60, 80, 0);
+					player->addDotState(CreatureState::ONFIRE, 100, CreatureAttribute::HEALTH, 60, 80, 0);
+				} else if (templatePath == "clear_dots") {
+					player->clearDots();
+				} else {
+
+					if (templatePath.length() > 0) {
+
+						server->getProfessionManager()->awardSkillBox(templatePath, player, true, true);
+						if (player->hasSkillBox(templatePath))
+							player->sendSystemMessage("You have learned a skill.");
+
+					} else {
+
+						player->sendSystemMessage("Unknown selection.");
+
+					}
+				}
+
+				player->addSuiBox(cbSui);
+				player->sendMessage(cbSui->generateMessage());
+			} else { // Items
+
+				ManagedReference<SceneObject*> item = zserv->createObject(node->getTemplateCRC(), 1);
+
+				if (item == NULL) {
+					player->sendSystemMessage("There was an error creating the requested item. Please contact customer support with this issue.");
+					player->addSuiBox(cbSui);
+					player->sendMessage(cbSui->generateMessage());
+					return;
+				}
+
+				ManagedReference<SceneObject*> inventory = player->getSlottedObject("inventory");
+				item->sendTo(player, true);
+				inventory->addObject(item, -1, true);
+
+				StringIdChatParameter stringId;
+				stringId.setStringId("@faction_perk:bonus_base_name"); //You received a: %TO.
+				stringId.setTO(item);
+				player->sendSystemMessage(stringId);
+
+				player->addSuiBox(cbSui);
+				player->sendMessage(cbSui->generateMessage());
+			}
+		}
+	}
+};
+
+#endif /* CHARACTERBUILDERSUICALLBACK_H_ */
Index: src/server/zone/objects/player/sui/callbacks/CityChangeNameSuiCallback.h
===================================================================
--- src/server/zone/objects/player/sui/callbacks/CityChangeNameSuiCallback.h	(revision 0)
+++ src/server/zone/objects/player/sui/callbacks/CityChangeNameSuiCallback.h	(revision 0)
@@ -0,0 +1,54 @@
+/*
+ * CityChangeNameSuiCallback.h
+ *
+ *  Created on: Mar 25, 2011
+ *      Author: crush
+ */
+
+#ifndef CITYCHANGENAMESUICALLBACK_H_
+#define CITYCHANGENAMESUICALLBACK_H_
+
+#include "server/zone/objects/player/sui/SuiCallback.h"
+
+
+class CityChangeNameSuiCallback : public SuiCallback {
+public:
+	CityChangeNameSuiCallback(ZoneServer* serv) : SuiCallback(serv) {
+	}
+
+	void run(PlayerCreature* player, SuiBox* sui, bool cancelPressed, Vector<UnicodeString>* args) {
+		if (!suiBox->isInputBox() || cancelPressed)
+			return;
+
+		if (args->size() < 1)
+			return;
+
+		String cityName = args->get(0).toString();
+
+		ManagedReference<SceneObject*> usingObject = suiBox->getUsingObject();
+
+		if (usingObject == NULL || !usingObject->isBuildingObject())
+			return;
+
+		BuildingObject* building = (BuildingObject*) usingObject.get();
+
+		if (!building->isCityHallBuilding())
+			return;
+
+		CityHallObject* cityHall = (CityHallObject*) building;
+
+		Locker _lock(cityHall, player);
+
+		ManagedReference<CityManager*> cityManager = player->getZone()->getCityManager();
+
+		if (cityManager->validateCityName(cityName)) {
+			cityManager->changeCityName(cityHall, player, cityName);
+		} else {
+			player->sendSystemMessage("Invalid name specified for city.");
+			player->addSuiBox(suiBox);
+			player->sendMessage(suiBox->generateMessage());
+		}
+	}
+};
+
+#endif /* CITYCHANGENAMESUICALLBACK_H_ */
Index: src/server/zone/objects/player/sui/callbacks/CloneRequestSuiCallback.h
===================================================================
--- src/server/zone/objects/player/sui/callbacks/CloneRequestSuiCallback.h	(revision 0)
+++ src/server/zone/objects/player/sui/callbacks/CloneRequestSuiCallback.h	(revision 0)
@@ -0,0 +1,47 @@
+/*
+ * CloneRequestSuiCallback.h
+ *
+ *  Created on: Mar 25, 2011
+ *      Author: crush
+ */
+
+#ifndef CLONEREQUESTSUICALLBACK_H_
+#define CLONEREQUESTSUICALLBACK_H_
+
+#include "server/zone/objects/player/sui/SuiCallback.h"
+
+
+class CloneRequestSuiCallback : public SuiCallback {
+public:
+	CloneRequestSuiCallback(ZoneServer* serv) : SuiCallback(serv) {
+	}
+
+	void run(PlayerCreature* player, SuiBox* sui, bool cancelPressed, Vector<UnicodeString>* args) {
+		info("activating sui cloner option");
+
+		if (!suiBox->isListBox() || cancelPressed)
+			return;
+
+		if (args->size() < 1)
+			return;
+
+		int index = Integer::valueOf(args->get(0).toString());
+
+		ZoneServer* zoneServer = server->getZoneServer();
+		PlayerManager* playerManager = zoneServer->getPlayerManager();
+
+		if (index >= 0) {
+			if (!player->isDead()) {
+				player->sendSystemMessage("You must be dead to activate your clone.");
+			} else {
+				SuiListBox* suiListBox = (SuiListBox*) suiBox;
+				playerManager->sendPlayerToCloner(player, suiListBox->getMenuObjectID(index));
+			}
+		} else {
+			if (player->isDead())
+				player->sendSystemMessage("You will remain dead until you choose a location to clone or you are revived. Type /activateClone to restore the clone window.");
+		}
+	}
+};
+
+#endif /* CLONEREQUESTSUICALLBACK_H_ */
Index: src/server/zone/objects/player/sui/callbacks/ConsentBoxSuiCallback.h
===================================================================
--- src/server/zone/objects/player/sui/callbacks/ConsentBoxSuiCallback.h	(revision 0)
+++ src/server/zone/objects/player/sui/callbacks/ConsentBoxSuiCallback.h	(revision 0)
@@ -0,0 +1,38 @@
+/*
+ * ConsentBoxSuiCallback.h
+ *
+ *  Created on: Mar 25, 2011
+ *      Author: crush
+ */
+
+#ifndef CONSENTBOXSUICALLBACK_H_
+#define CONSENTBOXSUICALLBACK_H_
+
+#include "server/zone/objects/player/sui/SuiCallback.h"
+
+
+class ConsentBoxSuiCallback : public SuiCallback {
+public:
+	ConsentBoxSuiCallback(ZoneServer* serv) : SuiCallback(serv) {
+	}
+
+	void run(PlayerCreature* player, SuiBox* sui, bool cancelPressed, Vector<UnicodeString>* args) {
+		if (suiBox->isListBox() || cancel != 0)
+			return;
+
+		if (args->size() < 1)
+			return;
+
+		int index = Integer::valueOf(args->get(0).toString());
+
+		if (index == -1)
+			return;
+
+		SuiListBox* suiList = (SuiListBox*) suiBox;
+
+		String name = suiList->getMenuItemName(index);
+		UnconsentCommand::unconscent(player, name); //TODO: Move this to PlayerManager.
+	}
+};
+
+#endif /* CONSENTBOXSUICALLBACK_H_ */
Index: src/server/zone/objects/player/sui/callbacks/CreateCitySuiCallback.h
===================================================================
--- src/server/zone/objects/player/sui/callbacks/CreateCitySuiCallback.h	(revision 0)
+++ src/server/zone/objects/player/sui/callbacks/CreateCitySuiCallback.h	(revision 0)
@@ -0,0 +1,54 @@
+/*
+ * CreateCitySuiCallback.h
+ *
+ *  Created on: Mar 25, 2011
+ *      Author: crush
+ */
+
+#ifndef CREATECITYSUICALLBACK_H_
+#define CREATECITYSUICALLBACK_H_
+
+#include "server/zone/objects/player/sui/SuiCallback.h"
+
+
+class CreateCitySuiCallback : public SuiCallback {
+public:
+	CreateCitySuiCallback(ZoneServer* serv) : SuiCallback(serv) {
+	}
+
+	void run(PlayerCreature* player, SuiBox* sui, bool cancelPressed, Vector<UnicodeString>* args) {
+		if (!suiBox->isInputBox() || cancelPressed)
+			return;
+
+		if (args->size() < 1)
+			return;
+
+		String cityName = args->get(0).toString();
+
+		ManagedReference<SceneObject*> usingObject = suiBox->getUsingObject();
+
+		if (usingObject == NULL || !usingObject->isBuildingObject())
+			return;
+
+		BuildingObject* building = (BuildingObject*) usingObject.get();
+
+		if (!building->isCityHallBuilding())
+			return;
+
+		CityHallObject* cityHall = (CityHallObject*) building;
+
+		Locker _lock(cityHall, player);
+
+		ManagedReference<CityManager*> cityManager = player->getZone()->getCityManager();
+
+		if (cityManager->validateCityName(cityName)) {
+			cityManager->createNewCity(cityHall, player, cityName);
+		} else {
+			player->sendSystemMessage("Invalid name specified for city.");
+			player->addSuiBox(suiBox);
+			player->sendMessage(suiBox->generateMessage());
+		}
+	}
+};
+
+#endif /* CREATECITYSUICALLBACK_H_ */
Index: src/server/zone/objects/player/sui/callbacks/FactoryInsertSchem2SuiCallback.h
===================================================================
--- src/server/zone/objects/player/sui/callbacks/FactoryInsertSchem2SuiCallback.h	(revision 0)
+++ src/server/zone/objects/player/sui/callbacks/FactoryInsertSchem2SuiCallback.h	(revision 0)
@@ -0,0 +1,44 @@
+/*
+ * FactoryInsertSchem2SuiCallback.h
+ *
+ *  Created on: Mar 25, 2011
+ *      Author: crush
+ */
+
+#ifndef FACTORYINSERTSCHEM2SUICALLBACK_H_
+#define FACTORYINSERTSCHEM2SUICALLBACK_H_
+
+#include "server/zone/objects/player/sui/SuiCallback.h"
+
+
+class FactoryInsertSchem2SuiCallback : public SuiCallback {
+public:
+	FactoryInsertSchem2SuiCallback(ZoneServer* serv) : SuiCallback(serv) {
+	}
+
+	void run(PlayerCreature* player, SuiBox* sui, bool cancelPressed, Vector<UnicodeString>* args) {
+		if (!suiBox->isListBox() || cancelPressed)
+			return;
+
+		if (args->size() < 1)
+			return;
+
+		int index = Integer::valueOf(args->get(0).toString());
+
+		SuiListBox* listBox = (SuiListBox*) suiBox;
+
+		ManagedReference<SceneObject*> object = suiBox->getUsingObject();
+
+		if (object == NULL || !object->isFactory())
+			return;
+
+		FactoryObject* factory = (FactoryObject*) object.get();
+
+		Locker _lock(factory, player);
+
+		ManagedReference<ManufactureSchematic*> schematic = dynamic_cast<ManufactureSchematic*>(server->getZoneServer()->getObject(listBox->getMenuObjectID(index)));
+		factory->handleInsertFactorySchem(player, schematic);
+	}
+};
+
+#endif /* FACTORYINSERTSCHEM2SUICALLBACK_H_ */
Index: src/server/zone/objects/player/sui/callbacks/FactoryInsertSchem3SuiCallback.h
===================================================================
--- src/server/zone/objects/player/sui/callbacks/FactoryInsertSchem3SuiCallback.h	(revision 0)
+++ src/server/zone/objects/player/sui/callbacks/FactoryInsertSchem3SuiCallback.h	(revision 0)
@@ -0,0 +1,49 @@
+/*
+ * FactoryInsertSchem3SuiCallback.h
+ *
+ *  Created on: Mar 25, 2011
+ *      Author: crush
+ */
+
+#ifndef FACTORYINSERTSCHEM3SUICALLBACK_H_
+#define FACTORYINSERTSCHEM3SUICALLBACK_H_
+
+#include "server/zone/objects/player/sui/SuiCallback.h"
+
+
+class FactoryInsertSchem3SuiCallback : public SuiCallback {
+public:
+	FactoryInsertSchem3SuiCallback(ZoneServer* serv) : SuiCallback(serv) {
+	}
+
+	void run(PlayerCreature* player, SuiBox* sui, bool cancelPressed, Vector<UnicodeString>* args) {
+		if (!suiBox->isListBox() || cancelPressed)
+			return;
+
+		if (args->size() < 2)
+			return;
+
+		bool otherPressed = Bool::valueOf(args->get(0).toString());
+		int index = Integer::valueOf(args->get(1).toString());
+
+		SuiListBox* listBox = (SuiListBox*) suiBox;
+
+		ManagedReference<SceneObject*> object = suiBox->getUsingObject();
+
+		if (object == NULL || !object->isFactory())
+			return;
+
+		FactoryObject* factory = (FactoryObject*) object.get();
+
+		Locker _lock(factory, player);
+
+		factory->handleRemoveFactorySchem(player);
+
+		if (!otherPressed) {
+			ManagedReference<ManufactureSchematic*> schematic = dynamic_cast<ManufactureSchematic*>(server->getZoneServer()->getObject(listBox->getMenuObjectID(index)));
+			factory->handleInsertFactorySchem(player, schematic);
+		}
+	}
+};
+
+#endif /* FACTORYINSERTSCHEM3SUICALLBACK_H_ */
Index: src/server/zone/objects/player/sui/callbacks/FishingActionSuiCallback.h
===================================================================
--- src/server/zone/objects/player/sui/callbacks/FishingActionSuiCallback.h	(revision 0)
+++ src/server/zone/objects/player/sui/callbacks/FishingActionSuiCallback.h	(revision 0)
@@ -0,0 +1,61 @@
+/*
+ * FishingActionSuiCallback.h
+ *
+ *  Created on: Mar 25, 2011
+ *      Author: crush
+ */
+
+#ifndef FISHINGACTIONSUICALLBACK_H_
+#define FISHINGACTIONSUICALLBACK_H_
+
+#include "server/zone/objects/player/sui/SuiCallback.h"
+
+
+class FishingActionSuiCallback : public SuiCallback {
+public:
+	FishingActionSuiCallback(ZoneServer* serv) : SuiCallback(serv) {
+	}
+
+	void run(PlayerCreature* player, SuiBox* sui, bool cancelPressed, Vector<UnicodeString>* args) {
+		if (cancelPressed)
+			return;
+
+		if (args->size() < 1)
+			return;
+
+		int index = Integer::valueOf(args->get(0).toString());
+
+		FishingManager* manager = player->getZone()->getZoneServer()->getFishingManager();
+
+		manager->setNextAction(player, index + 1);
+
+		uint32 newBoxID = 0;
+
+		switch (index + 1) {
+			case FishingManager::TUGUP:
+				newBoxID = manager->createWindow(player, suiBox->getBoxID());
+				break;
+			case FishingManager::TUGRIGHT:
+				newBoxID = manager->createWindow(player, suiBox->getBoxID());
+				break;
+			case FishingManager::TUGLEFT:
+				newBoxID = manager->createWindow(player, suiBox->getBoxID());
+				break;
+			case FishingManager::REEL:
+				newBoxID = manager->createWindow(player, suiBox->getBoxID());
+				break;
+			case FishingManager::STOPFISHING:
+				player->sendSystemMessage("@fishing:stop_fishing"); //You reel-in your line and stop fishing...
+				manager->stopFishing(player, suiBox->getBoxID(), true);
+				return;
+				break;
+			default:
+				newBoxID = manager->createWindow(player, suiBox->getBoxID());
+				break;
+		}
+
+		manager->setFishBoxID(player, suiBox->getBoxID());
+	}
+};
+
+#endif /* FISHINGACTIONSUICALLBACK_H_ */
Index: src/server/zone/objects/player/sui/callbacks/FreeResourceSuiCallback.h
===================================================================
--- src/server/zone/objects/player/sui/callbacks/FreeResourceSuiCallback.h	(revision 0)
+++ src/server/zone/objects/player/sui/callbacks/FreeResourceSuiCallback.h	(revision 0)
@@ -0,0 +1,106 @@
+/*
+ * FreeResourceSuiCallback.h
+ *
+ *  Created on: Mar 25, 2011
+ *      Author: crush
+ */
+
+#ifndef FREERESOURCESUICALLBACK_H_
+#define FREERESOURCESUICALLBACK_H_
+
+#include "server/zone/objects/player/sui/SuiCallback.h"
+
+
+class FreeResourceSuiCallback : public SuiCallback {
+public:
+	FreeResourceSuiCallback(ZoneServer* serv) : SuiCallback(serv) {
+	}
+
+	void run(PlayerCreature* player, SuiBox* sui, bool cancelPressed, Vector<UnicodeString>* args) {
+		if (args->size() < 2)
+			return;
+
+		bool otherPressed = Bool::valueOf(args->get(0).toString());
+		int index = Integer::valueOf(args->get(1).toString());
+
+		ResourceDeedListBox* suiListBox = dynamic_cast<ResourceDeedListBox*>(suiBox);
+
+		if (suiListBox == NULL)
+			return;
+
+		ManagedReference<SceneObject*> deedObject = suiListBox->getUsingObject();
+
+		if (deedObject == NULL)
+			return;
+
+		ManagedReference<ResourceManager*> resourceManager = server->getZoneServer()->getResourceManager();
+		ManagedReference<ResourceSpawn*> spawn = NULL;
+
+		String nodeName = "";
+
+		if (otherPressed) {
+			suiListBox->removeBox();
+		} else {
+
+			if (suiListBox->getPromptTitle() != "Resources") {
+
+				resourceManager->givePlayerResource(player, suiListBox->getPromptTitle(),
+					ResourceManagerImplementation::RESOURCE_DEED_QUANTITY);
+
+				if (deedObject != NULL && deedObject->getGameObjectType() == SceneObjectImplementation::RESOURCEDEED) {
+					ResourceDeed* deed = (ResourceDeed*) deedObject.get();
+
+					Locker cLocker(deed, player);
+					deed->destroyDeed();
+				}
+
+				return;
+
+			}
+			/// If nothing was chosen
+			if (index < 0) {
+				player->addSuiBox(suiListBox);
+				player->sendMessage(suiListBox->generateMessage());
+				return;
+			}
+
+			nodeName = suiListBox->getMenuItemName(index);
+
+			spawn = resourceManager->getResourceSpawn(nodeName);
+
+			if (spawn != NULL)
+				suiListBox->addBox(spawn->getName());
+			else
+				suiListBox->addBox(nodeName);
+
+		}
+
+		suiListBox->clearOptions();
+		suiListBox->removeAllMenuItems();
+
+		if (spawn != NULL) {
+
+			suiListBox->setPromptTitle(spawn->getName());
+			suiListBox->setPromptText("@veteran:confirm_choose_type");
+
+			spawn->addStatsToDeedListBox(suiListBox);
+
+		} else {
+
+			suiListBox->setPromptTitle("Resources");
+			suiListBox->setPromptText("Choose resource.");
+
+			resourceManager->addChildrenToDeedListBox(suiListBox->getCurrentBox(), suiListBox);
+		}
+
+		suiListBox->setCancelButton(true, "@cancel");
+		suiListBox->setOtherButton(true, "@back");
+
+		suiListBox->setUsingObject(deedObject);
+
+		player->addSuiBox(suiListBox);
+		player->sendMessage(suiListBox->generateMessage());
+	}
+};
+
+#endif /* FREERESOURCESUICALLBACK_H_ */
Index: src/server/zone/objects/player/sui/callbacks/GamblingRouletteSuiCallback.h
===================================================================
--- src/server/zone/objects/player/sui/callbacks/GamblingRouletteSuiCallback.h	(revision 0)
+++ src/server/zone/objects/player/sui/callbacks/GamblingRouletteSuiCallback.h	(revision 0)
@@ -0,0 +1,29 @@
+/*
+ * GamblingRouletteSuiCallback.h
+ *
+ *  Created on: Mar 25, 2011
+ *      Author: crush
+ */
+
+#ifndef GAMBLINGROULETTESUICALLBACK_H_
+#define GAMBLINGROULETTESUICALLBACK_H_
+
+#include "server/zone/objects/player/sui/SuiCallback.h"
+
+
+class GamblingRouletteSuiCallback : public SuiCallback {
+public:
+	GamblingRouletteSuiCallback(ZoneServer* serv) : SuiCallback(serv) {
+	}
+
+	void run(PlayerCreature* player, SuiBox* sui, bool cancel, Vector<UnicodeString>* args) {
+		GamblingManager* manager = player->getZone()->getZoneServer()->getGamblingManager();
+
+		if (cancel)
+			manager->leaveTerminal(player, 0);
+		else
+			manager->refreshRouletteMenu(player);
+	}
+};
+
+#endif /* GAMBLINGROULETTESUICALLBACK_H_ */
Index: src/server/zone/objects/player/sui/callbacks/GamblingSlotPayoutSuiCallback.h
===================================================================
--- src/server/zone/objects/player/sui/callbacks/GamblingSlotPayoutSuiCallback.h	(revision 0)
+++ src/server/zone/objects/player/sui/callbacks/GamblingSlotPayoutSuiCallback.h	(revision 0)
@@ -0,0 +1,24 @@
+/*
+ * GamblingSlotPayoutSuiCallback.h
+ *
+ *  Created on: Mar 25, 2011
+ *      Author: crush
+ */
+
+#ifndef GAMBLINGSLOTPAYOUTSUICALLBACK_H_
+#define GAMBLINGSLOTPAYOUTSUICALLBACK_H_
+
+#include "server/zone/objects/player/sui/SuiCallback.h"
+
+
+class GamblingSlotPayoutSuiCallback : public SuiCallback {
+public:
+	GamblingSlotPayoutSuiCallback(ZoneServer* serv) : SuiCallback(serv) {
+	}
+
+	void run(PlayerCreature* player, SuiBox* sui, bool cancelPressed, Vector<UnicodeString>* args) {
+		player->sendMessage(suiBox->generateCloseMessage());
+	}
+};
+
+#endif /* GAMBLINGSLOTPAYOUTSUICALLBACK_H_ */
Index: src/server/zone/objects/player/sui/callbacks/GamblingSlotSuiCallback.h
===================================================================
--- src/server/zone/objects/player/sui/callbacks/GamblingSlotSuiCallback.h	(revision 0)
+++ src/server/zone/objects/player/sui/callbacks/GamblingSlotSuiCallback.h	(revision 0)
@@ -0,0 +1,30 @@
+/*
+ * GamblingSlotSuiCallback.h
+ *
+ *  Created on: Mar 25, 2011
+ *      Author: crush
+ */
+
+#ifndef GAMBLINGSLOTSUICALLBACK_H_
+#define GAMBLINGSLOTSUICALLBACK_H_
+
+#include "server/zone/objects/player/sui/SuiCallback.h"
+
+
+class GamblingSlotSuiCallback : public SuiCallback {
+public:
+	GamblingSlotSuiCallback(ZoneServer* serv) : SuiCallback(serv) {
+	}
+
+	void run(PlayerCreature* player, SuiBox* sui, bool cancelPressed, Vector<UnicodeString>* args) {
+		if (args->size() < 1)
+			return;
+
+		bool otherPressed = Bool::valueOf(args->get(0).toString());
+
+		GamblingManager* manager = player->getZone()->getZoneServer()->getGamblingManager();
+		manager->handleSlot(player, cancelPressed, otherPressed);
+	}
+};
+
+#endif /* GAMBLINGSLOTSUICALLBACK_H_ */
Index: src/server/zone/objects/player/sui/callbacks/StartDancingSuiCallback.h
===================================================================
--- src/server/zone/objects/player/sui/callbacks/StartDancingSuiCallback.h	(revision 0)
+++ src/server/zone/objects/player/sui/callbacks/StartDancingSuiCallback.h	(revision 0)
@@ -0,0 +1,44 @@
+/*
+ * StartDancingSuiCallback.h
+ *
+ *  Created on: Mar 25, 2011
+ *      Author: crush
+ */
+
+#ifndef STARTDANCINGSUICALLBACK_H_
+#define STARTDANCINGSUICALLBACK_H_
+
+#include "server/zone/objects/player/sui/SuiCallback.h"
+
+class StartDancingSuiCallback : public SuiCallback {
+public:
+	StartDancingSuiCallback(ZoneServer* serv) : SuiCallback(serv) {
+	}
+
+	void run(PlayerCreature* player, SuiBox* suiBox, bool cancel, Vector<UnicodeString>* args) {
+		if (!suiBox->isListBox() || cancel != 0)
+			return;
+
+		if (args->size() < 2)
+			return;
+
+		int index = Integer::valueOf(args->get(0).toString());
+
+		uint32 id = suiBox->getBoxID();
+
+		bool change = (uint16)id == SuiWindowType::DANCING_CHANGE;
+
+
+		SuiListBox* listBox = (SuiListBox*) suiBox;
+
+		String dance = listBox->getMenuItemName(index);
+
+		if (!change)
+			player->executeObjectControllerAction(String("startdance").hashCode(), 0, dance);
+		else
+			player->executeObjectControllerAction(String("changedance").hashCode(), 0, dance);
+	}
+};
+
+
+#endif /* STARTDANCINGSUICALLBACK_H_ */
Index: src/server/zone/objects/player/sui/callbacks/StartMusicSuiCallback.h
===================================================================
--- src/server/zone/objects/player/sui/callbacks/StartMusicSuiCallback.h	(revision 0)
+++ src/server/zone/objects/player/sui/callbacks/StartMusicSuiCallback.h	(revision 0)
@@ -0,0 +1,44 @@
+/*
+ * StartMusicSuiCallback.h
+ *
+ *  Created on: Mar 25, 2011
+ *      Author: crush
+ */
+
+#ifndef STARTMUSICSUICALLBACK_H_
+#define STARTMUSICSUICALLBACK_H_
+
+#include "server/zone/objects/player/sui/SuiCallback.h"
+
+class StartMusicSuiCallback : public SuiCallback {
+public:
+	StartMusicSuiCallback(ZoneServer* serv) : SuiCallback(serv) {
+
+	}
+
+	void run(PlayerCreature* player, SuiBox* suiBox, bool cancel, Vector<UnicodeString>* args) {
+		if (!suiBox->isListBox() || cancel != 0)
+			return;
+
+		if (args->size() < 2)
+			return;
+
+		int index = Integer::valueOf(args->get(0).toString());
+
+		uint32 id = suiBox->getBoxID();
+
+		bool change = (uint16)id == SuiWindowType::MUSIC_CHANGE;
+
+		SuiListBox* listBox = (SuiListBox*) suiBox;
+
+		String dance = listBox->getMenuItemName(index);
+
+		if (!change)
+			player->executeObjectControllerAction(String("startmusic").hashCode(), player->getTargetID(), dance);
+		else
+			player->executeObjectControllerAction(String("changemusic").hashCode(), player->getTargetID(), dance);
+	}
+};
+
+
+#endif /* STARTMUSICSUICALLBACK_H_ */
Index: src/server/zone/objects/player/sui/callbacks/StructureAddPowerSuiCallback.h
===================================================================
--- src/server/zone/objects/player/sui/callbacks/StructureAddPowerSuiCallback.h	(revision 0)
+++ src/server/zone/objects/player/sui/callbacks/StructureAddPowerSuiCallback.h	(revision 0)
@@ -0,0 +1,73 @@
+/*
+ * StructureAddPowerSuiCallback.h
+ *
+ *  Created on: Mar 25, 2011
+ *      Author: crush
+ */
+
+#ifndef STRUCTUREADDPOWERSUICALLBACK_H_
+#define STRUCTUREADDPOWERSUICALLBACK_H_
+
+#include "server/zone/objects/player/sui/SuiCallback.h"
+
+namespace server {
+namespace zone {
+	class ZoneServer;
+}
+}
+
+using namespace server::zone;
+
+class StructureAddPowerSuiCallback : public SuiCallback {
+public:
+	StructureAddPowerSuiCallback(ZoneServer* serv)
+		: SuiCallback(serv) {
+	}
+
+	void run(PlayerCreature* player, SuiBox* suiBox, bool cancelPressed, Vector<UnicodeString>* args) {
+		if (!suiBox->isTransferBox() || cancel != 0)
+			return;
+
+		if (args->size() < 1)
+			return;
+
+		uint32 newEnergyVal = (uint64) Long::valueOf(args->get(0).toString());
+
+		ManagedReference<SceneObject*> object = suiBox->getUsingObject();
+
+		if (object == NULL || !object->isInstallationObject())
+			return;
+
+		InstallationObject* installation = (InstallationObject*) object.get();
+
+		ManagedReference<ResourceManager*> resourceManager = player->getZoneServer()->getResourceManager();
+
+		//TODO: This should be handled in StructureManager
+
+		Locker _lock(installation, player);
+
+		uint32 energyFromPlayer = resourceManager->getAvailablePowerFromPlayer(player);
+		uint32 energy = energyFromPlayer - newEnergyVal;
+
+		if (energy > energyFromPlayer)
+			return;
+
+		installation->addPower(energy);
+		resourceManager->removePowerFromPlayer(player, energy);
+
+		StringIdChatParameter stringId("player_structure", "deposit_successful");
+		stringId.setDI(energy);
+
+		player->sendSystemMessage(stringId);
+
+		stringId.setStringId("player_structure", "reserve_report");
+		stringId.setDI(energy);
+
+		player->sendSystemMessage(stringId);
+
+		installation->updateToDatabase();
+	}
+};
+
+
+#endif /* STRUCTUREADDPOWERSUICALLBACK_H_ */
Index: src/server/zone/objects/player/sui/callbacks/StructureDestroyCodeSuiCallback.h
===================================================================
--- src/server/zone/objects/player/sui/callbacks/StructureDestroyCodeSuiCallback.h	(revision 0)
+++ src/server/zone/objects/player/sui/callbacks/StructureDestroyCodeSuiCallback.h	(revision 0)
@@ -0,0 +1,70 @@
+/*
+ * StructureDestroyCodeSuiCallback.h
+ *
+ *  Created on: Mar 25, 2011
+ *      Author: crush
+ */
+
+#ifndef STRUCTUREDESTROYCODESUICALLBACK_H_
+#define STRUCTUREDESTROYCODESUICALLBACK_H_
+
+#include "server/zone/objects/player/sui/SuiCallback.h"
+
+namespace server {
+namespace zone {
+	class ZoneServer;
+}
+}
+
+using namespace server::zone;
+
+class StructureDestroyCodeSuiCallback : public SuiCallback {
+public:
+	StructureDestroyCodeSuiCallback(ZoneServer* serv)
+		: SuiCallback(serv) {
+	}
+
+	void run(PlayerCreature* player, SuiBox* suiBox, bool cancelPressed, Vector<UnicodeString>* args) {
+		if (!suiBox->isInputBox() || cancel != 0)
+			return;
+
+		if (args->size() < 1)
+			return;
+
+		int destroyCode = Integer::valueOf(args->get(0).toString());
+
+		ManagedReference<SceneObject*> usingObject = suiBox->getUsingObject();
+
+		if (usingObject == NULL || !usingObject->isStructureObject())
+			return;
+
+		ManagedReference<StructureObject*> structureObject = (StructureObject*) usingObject.get();
+
+		Zone* zone = structureObject->getZone();
+
+		if (zone == NULL)
+			return;
+
+		PlanetManager* planetManager = zone->getPlanetManager();
+
+		if (planetManager == NULL)
+			return;
+
+		StructureManager* structureManager = planetManager->getStructureManager();
+
+		if (structureManager == NULL)
+			return;
+
+		Locker _lock(structureObject, player);
+
+		if (structureObject->getDestroyCode() == destroyCode) {
+			structureManager->redeedStructure(player, structureObject);
+		} else {
+			player->sendSystemMessage("@player_structure:incorrect_destroy_code"); //You have entered an incorrect code. You will have to issue the /destroyStructure again if you wish to continue.
+			return;
+		}
+	}
+};
+
+
+#endif /* STRUCTUREDESTROYCODESUICALLBACK_H_ */
Index: src/server/zone/objects/player/sui/callbacks/StructureDestroyConfirmSuiCallback.h
===================================================================
--- src/server/zone/objects/player/sui/callbacks/StructureDestroyConfirmSuiCallback.h	(revision 0)
+++ src/server/zone/objects/player/sui/callbacks/StructureDestroyConfirmSuiCallback.h	(revision 0)
@@ -0,0 +1,44 @@
+/*
+ * StructureDestroyConfirmSuiCallback.h
+ *
+ *  Created on: Mar 25, 2011
+ *      Author: crush
+ */
+
+#ifndef STRUCTUREDESTROYCONFIRMSUICALLBACK_H_
+#define STRUCTUREDESTROYCONFIRMSUICALLBACK_H_
+
+#include "server/zone/objects/player/sui/SuiCallback.h"
+
+namespace server {
+namespace zone {
+	class ZoneServer;
+}
+}
+
+using namespace server::zone;
+
+class StructureDestroyConfirmSuiCallback : public SuiCallback {
+public:
+	StructureDestroyConfirmSuiCallback(ZoneServer* serv)
+		: SuiCallback(serv) {
+	}
+
+	void run(PlayerCreature* player, SuiBox* suiBox, bool cancelPressed, Vector<UnicodeString>* args) {
+		if (!suiBox->isListBox() || cancel != 0)
+			return;
+
+		ManagedReference<SceneObject*> usingObject = suiBox->getUsingObject();
+
+		if (usingObject == NULL || !usingObject->isStructureObject())
+			return;
+
+		StructureObject* structureObject = (StructureObject*) usingObject.get();
+
+		Locker _lock(structureObject, player);
+		structureObject->sendDestroyCodeTo(player);
+	}
+};
+
+
+#endif /* STRUCTUREDESTROYCONFIRMSUICALLBACK_H_ */
Index: src/server/zone/objects/player/sui/callbacks/StructureManageMaintenanceSuiCallback.h
===================================================================
--- src/server/zone/objects/player/sui/callbacks/StructureManageMaintenanceSuiCallback.h	(revision 0)
+++ src/server/zone/objects/player/sui/callbacks/StructureManageMaintenanceSuiCallback.h	(revision 0)
@@ -0,0 +1,77 @@
+/*
+ * StructureManageMaintenanceSuiCallback.h
+ *
+ *  Created on: Mar 25, 2011
+ *      Author: crush
+ */
+
+#ifndef STRUCTUREMANAGEMAINTENANCESUICALLBACK_H_
+#define STRUCTUREMANAGEMAINTENANCESUICALLBACK_H_
+
+#include "server/zone/objects/player/sui/SuiCallback.h"
+
+namespace server {
+namespace zone {
+	class ZoneServer;
+}
+}
+
+using namespace server::zone;
+
+class StructureManageMaintenanceSuiCallback : public SuiCallback {
+public:
+	StructureManageMaintenanceSuiCallback(ZoneServer* serv)
+		: SuiCallback(serv) {
+	}
+
+	void run(PlayerCreature* player, SuiBox* suiBox, bool cancelPressed, Vector<UnicodeString>* args) {
+		if (!suiBox->isTransferBox() || cancel != 0)
+			return;
+
+		ManagedReference<SceneObject*> object = suiBox->getUsingObject();
+
+		if (object == NULL || !object->isStructureObject())
+			return;
+
+		StructureObject* structureObject = (StructureObject*) object.get();
+
+		if (args->size() < 1)
+			return;
+
+		int transferAmount = Integer::valueOf(args->get(0).toString());
+		int currentCash = player->getCashCredits();
+
+		if (transferAmount > currentCash) {
+			//Send a message ot the player, and return.
+			return;
+		}
+
+		if (transferAmount < 0) {
+			//Send a message to the player, and return.
+			return;
+		}
+
+		Locker _lock(structureObject, player);
+
+		int transferTotal = currentCash - transferAmount;
+
+		//TODO: Handle this in StructureManager.
+		//ManagedReference<StructureManager*> structureManager = structureObject->getZone()->getPlanetManager()->getStructureManager();
+		//structureManager->depositMaintenance(player, structureObject, transferTotal);
+
+		structureObject->addMaintenance(transferTotal);
+		player->substractCashCredits(transferTotal);
+
+		StringIdChatParameter stringId("base_player", "prose_pay_success");
+		stringId.setTT(structureObject->getObjectID());
+		stringId.setDI(transferTotal);
+
+		player->sendSystemMessage(stringId);
+		structureObject->updateToDatabase();
+
+		player->updateToDatabase();
+	}
+};
+
+
+#endif /* STRUCTUREMANAGEMAINTENANCESUICALLBACK_H_ */
Index: src/server/zone/objects/player/sui/callbacks/TeachPlayerSuiCallback.h
===================================================================
--- src/server/zone/objects/player/sui/callbacks/TeachPlayerSuiCallback.h	(revision 0)
+++ src/server/zone/objects/player/sui/callbacks/TeachPlayerSuiCallback.h	(revision 0)
@@ -0,0 +1,80 @@
+/*
+ * TeachPlayerSuiCallback.h
+ *
+ *  Created on: Mar 25, 2011
+ *      Author: crush
+ */
+
+#ifndef TEACHPLAYERSUICALLBACK_H_
+#define TEACHPLAYERSUICALLBACK_H_
+
+#include "server/zone/objects/player/sui/SuiCallback.h"
+
+
+class TeachPlayerSuiCallback : public SuiCallback {
+public:
+	TeachPlayerSuiCallback(ZoneServer* serv) : SuiCallback(serv) {
+	}
+
+	void run(PlayerCreature* player, SuiBox* sui, bool cancelPressed, Vector<UnicodeString>* args) {
+		player->setTeachingOrLearning(false);
+
+		if (suiBox->isListBox() || cancelPressed)
+			return;
+
+		if (args->size() < 1)
+			return;
+
+		int value = Integer::valueOf(args->get(0).toString());
+
+		if (value == -1)
+			return;
+
+		TeachPlayerListBox* listBox = dynamic_cast<TeachPlayerListBox*>(suiBox);
+
+		if (listBox == NULL)
+			return;
+
+		ManagedReference<PlayerCreature*> student = listBox->getStudent();
+
+		if (student == NULL)
+			return;
+
+		Locker _lock(student);
+
+		//if they are no longer in the same group we cancel
+		ManagedReference<GroupObject*> group = player->getGroup();
+
+		if (group == NULL || !group->hasMember(student)) {
+			player->sendSystemMessage("@teaching:not_in_same_group");
+			return;
+		}
+
+		//student->setTeachingOffer(listBox->getTeachingSkillOption(value));
+
+		StringIdChatParameter message("teaching","offer_given");
+		message.setTT(student->getFirstName());
+		message.setTO("skl_n", listBox->getTeachingSkillOption(value));
+		player->sendSystemMessage(message);
+
+		ManagedReference<PlayerLearnListBox*> mbox = new PlayerLearnListBox(student);
+
+		student->setTeachingOrLearning(true);
+
+		// TODO: redo this after I find the proper String
+		StringBuffer prompt, skillname;
+		skillname << "@skl_n:" << listBox->getTeachingSkillOption(value);
+		prompt << "Do you wish to learn the following from " << player->getFirstName() << "?";
+		mbox->setPromptTitle("@sui:teach");
+		mbox->setPromptText(prompt.toString());
+		mbox->addMenuItem(skillname.toString());
+		mbox->setCancelButton(true, "");
+		mbox->setTeacher(player);
+		mbox->setTeachingOffer(listBox->getTeachingSkillOption(value));
+
+		student->addSuiBox(mbox);
+		student->sendMessage(mbox->generateMessage());
+	}
+};
+
+#endif /* TEACHPLAYERSUICALLBACK_H_ */
Index: src/server/zone/objects/player/sui/callbacks/TeachSkillSuiCallback.h
===================================================================
--- src/server/zone/objects/player/sui/callbacks/TeachSkillSuiCallback.h	(revision 0)
+++ src/server/zone/objects/player/sui/callbacks/TeachSkillSuiCallback.h	(revision 0)
@@ -0,0 +1,75 @@
+/*
+ * TeachSkillSuiCallback.h
+ *
+ *  Created on: Mar 25, 2011
+ *      Author: crush
+ */
+
+#ifndef TEACHSKILLSUICALLBACK_H_
+#define TEACHSKILLSUICALLBACK_H_
+
+#include "server/zone/objects/player/sui/SuiCallback.h"
+
+
+class TeachSkillSuiCallback : public SuiCallback {
+public:
+	TeachSkillSuiCallback(ZoneServer* serv) : SuiCallback(serv) {
+	}
+
+	void run(PlayerCreature* player, SuiBox* sui, bool cancelPressed, Vector<UnicodeString>* args) {
+		player->setTeachingOrLearning(false);
+
+		if (suiBox->isListBox())
+			return;
+
+		PlayerLearnListBox* listBox = dynamic_cast<PlayerLearnListBox*>(suiBox);
+
+		if (listBox == NULL)
+			return;
+
+		String teachingOffer = listBox->getTeachingOffer();
+
+		if (cancelPressed) {
+			StringIdChatParameter message("teaching","offer_refused");
+			message.setTT(player->getObjectID());
+			message.setTO("skl_n", teachingOffer);
+			listBox->getTeacher()->sendSystemMessage(message);
+
+			return;
+		}
+
+		ManagedReference<PlayerCreature*> teacher = listBox->getTeacher();
+
+		if (teacher == NULL) {
+			player->sendSystemMessage("teaching","teacher_too_far");
+			return;
+		}
+
+
+		if (!player->isInRange(teacher, 128)) {
+			StringIdChatParameter message("teaching","teacher_too_far_target");
+			message.setTT(teacher->getObjectID());
+			message.setTO("skl_n", teachingOffer);
+			player->sendSystemMessage(message);
+
+			teacher->sendSystemMessage("teaching","teaching_failed");
+
+			return;
+		}
+
+		ManagedReference<GroupObject*> group = player->getGroup();
+
+		if (group == NULL || !group->hasMember(teacher)) {
+			StringIdChatParameter message("teaching","not_in_same_group");
+			message.setTT(listBox->getTeacher()->getObjectID());
+			player->sendSystemMessage(message);
+
+			teacher->sendSystemMessage("teaching","teaching_failed");
+			return;
+		}
+
+		server->getProfessionManager()->playerTeachSkill(teachingOffer, player, teacher);
+	}
+};
+
+#endif /* TEACHSKILLSUICALLBACK_H_ */
Index: src/server/zone/objects/scene/SessionFacadeType.h
===================================================================
--- src/server/zone/objects/scene/SessionFacadeType.h	(revision 2976)
+++ src/server/zone/objects/scene/SessionFacadeType.h	(working copy)
@@ -15,6 +15,7 @@
 	const static int IMAGEDESIGN = 3;
 	const static int SLICING = 4;
 	const static int CREATEVENDOR = 5;
+	const static int STRUCTURE_DESTROY = 6;
 };
 
 #endif /* SESSIONFACADETYPES_H_ */
Index: src/server/zone/objects/scene/sui/SetObjectNameSuiCallback.h
===================================================================
--- src/server/zone/objects/scene/sui/SetObjectNameSuiCallback.h	(revision 0)
+++ src/server/zone/objects/scene/sui/SetObjectNameSuiCallback.h	(revision 0)
@@ -0,0 +1,50 @@
+/*
+ * SetObjectNameSuiCallback.h
+ *
+ *  Created on: Mar 25, 2011
+ *      Author: crush
+ */
+
+#ifndef SETOBJECTNAMESUICALLBACK_H_
+#define SETOBJECTNAMESUICALLBACK_H_
+
+#include "server/zone/objects/player/sui/SuiCallback.h"
+
+class SetObjectNameSuiCallback : public SuiCallback {
+public:
+	SetObjectNameSuiCallback(ZoneServer* serv) : SuiCallback(serv) {
+	}
+
+	void run(PlayerCreature* player, SuiBox* suiBox, bool cancel, Vector<UnicodeString>* args) {
+		if (!suiBox->isInputBox() || cancel != 0)
+			return;
+
+		ManagedReference<SceneObject*> object = suiBox->getUsingObject();
+
+		if (object == NULL)
+			return;
+
+		if (args->size() < 1)
+			return;
+
+		UnicodeString objectName = args->get(0);
+
+		if (object->isBuildingObject()) {
+			BuildingObject* building = (BuildingObject*) object.get();
+
+			ManagedReference<SignObject*> sign = building->getSignObject();
+
+			if (sign != NULL) {
+				object = sign;
+
+				StringIdChatParameter params("@player_structure:prose_sign_name_updated"); //Sign name successfully updated to '%TO'.
+				params.setTO(objectName);
+				player->sendSystemMessage(params);
+			}
+		}
+
+		object->setCustomObjectName(objectName , true);
+	}
+};
+
+#endif /* SETOBJECTNAMESUICALLBACK_H_ */
Index: src/server/zone/objects/structure/MaintenanceComponent.h
===================================================================
--- src/server/zone/objects/structure/MaintenanceComponent.h	(revision 2976)
+++ src/server/zone/objects/structure/MaintenanceComponent.h	(working copy)
@@ -9,11 +9,37 @@
 #define MAINTENANCECOMPONENT_H_
 
 #include "engine/engine.h"
+#include "events/MaintenanceEmptyTask.h"
 
 class MaintenanceComponent : public Object {
+protected:
+	Reference<MaintenanceEmptyTask*> maintenanceEmptyTask;
+	Time lastUpdateTimestamp;
+
+	uint32 balance;
+	uint32 decayRate;
+
 public:
 	MaintenanceComponent() : Object() {
+		balance = 0;
+		decayRate = 0;
+		maintenanceEmptyTask = NULL;
+	}
 
+	void setBalance(uint32 amount) {
+		balance = amount;
+	}
+
+	uint32 getBalance() {
+		return balance;
+	}
+
+	void setDecayRate(uint32 rate) {
+		decayRate = rate;
+	}
+
+	uint32 getDecayRate() {
+		return decayRate;
 	}
 };
 
Index: src/server/zone/objects/structure/PlayerStructureComponent.cpp
===================================================================
--- src/server/zone/objects/structure/PlayerStructureComponent.cpp	(revision 0)
+++ src/server/zone/objects/structure/PlayerStructureComponent.cpp	(revision 0)
@@ -0,0 +1,43 @@
+/*
+ * PlayerStructureComponent.cpp
+ *
+ *  Created on: Mar 24, 2011
+ *      Author: crush
+ */
+
+#include "PlayerStructureComponent.h"
+#include "server/zone/objects/player/PlayerCreature.h"
+#include "StructurePermissionList.h"
+
+PlayerStructureComponent::PlayerStructureComponent() : Object() {
+	deedObjectID = 0;
+	maintenanceComponent = NULL;
+	powerComponent = NULL;
+}
+
+PlayerStructureComponent::PlayerStructureComponent(PlayerCreature* player) : Object() {
+	deedObjectID = 0;
+	maintenanceComponent = NULL;
+	powerComponent = NULL;
+	uint8 ownerPermission = StructurePermissionList::OWNER;
+	structurePermissionList.put(player->getObjectID(), ownerPermission);
+}
+
+PlayerStructureComponent::PlayerStructureComponent(const PlayerStructureComponent& psc) : Object() {
+	structurePermissionList = psc.structurePermissionList;
+	maintenanceComponent = psc.maintenanceComponent;
+	powerComponent = psc.powerComponent;
+	deedObjectID = psc.deedObjectID;
+}
+
+PlayerStructureComponent& PlayerStructureComponent::operator= (const PlayerStructureComponent& psc) {
+	if (this == &psc)
+		return *this;
+
+	structurePermissionList = psc.structurePermissionList;
+	maintenanceComponent = psc.maintenanceComponent;
+	powerComponent = psc.powerComponent;
+	deedObjectID = psc.deedObjectID;
+
+	return *this;
+}
Index: src/server/zone/objects/structure/PlayerStructureComponent.h
===================================================================
--- src/server/zone/objects/structure/PlayerStructureComponent.h	(revision 2976)
+++ src/server/zone/objects/structure/PlayerStructureComponent.h	(working copy)
@@ -9,9 +9,11 @@
 #define PLAYERSTRUCTURECOMPONENT_H_
 
 #include "engine/engine.h"
+#include "StructurePermissionList.h"
 #include "MaintenanceComponent.h"
 
-class PlayerStructureComponent : public Object, public Logger {
+class PlayerStructureComponent : public Object {
+protected:
 	StructurePermissionList structurePermissionList;
 	Reference<MaintenanceComponent*> maintenanceComponent;
 	Reference<MaintenanceComponent*> powerComponent;
@@ -20,10 +22,47 @@
 
 public:
 	PlayerStructureComponent();
+	PlayerStructureComponent(PlayerCreature* player);
 	PlayerStructureComponent(const PlayerStructureComponent& psc);
 	PlayerStructureComponent& operator= (const PlayerStructureComponent& psc);
 
+	inline void setMaintenanceComponent(MaintenanceComponent* mc) {
+		maintenanceComponent = mc;
+	}
+
+	inline void setPowerComponent(MaintenanceComponent* mc) {
+		powerComponent = mc;
+	}
+
+	inline void setDeedObjectID(uint64 objid) {
+		deedObjectID = objid;
+	}
+
+	inline void setSurplusMaintenance(uint32 amount) {
+		if (maintenanceComponent != NULL)
+			maintenanceComponent->setBalance(amount);
+	}
 
+	inline void setSurplusPower(uint32 amount) {
+		if (powerComponent != NULL)
+			powerComponent->setBalance(amount);
+	}
+
+	StructurePermissionList* getStructurePermissionList() {
+		return &structurePermissionList;
+	}
+
+	MaintenanceComponent* getMaintenanceComponent() {
+		return maintenanceComponent;
+	}
+
+	MaintenanceComponent* getPowerComponent() {
+		return powerComponent;
+	}
+
+	inline uint64 getDeedObjectID() {
+		return deedObjectID;
+	}
 };
 
 
Index: src/server/zone/objects/structure/StructureObject.cpp
===================================================================
--- src/server/zone/objects/structure/StructureObject.cpp	(revision 2976)
+++ src/server/zone/objects/structure/StructureObject.cpp	(working copy)
@@ -4,23 +4,17 @@
 
 #include "StructureObject.h"
 
-#include "server/zone/objects/structure/events/StructureMaintenanceTask.h"
-
 #include "server/zone/objects/scene/SceneObject.h"
 
-#include "server/zone/objects/creature/CreatureObject.h"
-
 #include "server/zone/objects/player/PlayerCreature.h"
 
 #include "server/zone/templates/SharedObjectTemplate.h"
 
-#include "server/zone/objects/area/ActiveArea.h"
-
 /*
  *	StructureObjectStub
  */
 
-enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 6,RPC_FINALIZE__,RPC_CREATECHILDOBJECTS__,RPC_NOTIFYSTRUCTUREPLACED__PLAYERCREATURE_,RPC_CHECKREQUISITESFORPLACEMENT__PLAYERCREATURE_,RPC_SENDSTATUSTO__PLAYERCREATURE_,RPC_SENDDESTROYCONFIRMTO__PLAYERCREATURE_,RPC_SENDDESTROYCODETO__PLAYERCREATURE_,RPC_SENDMANAGEMAINTENANCETO__PLAYERCREATURE_,RPC_SENDCHANGENAMEPROMPTTO__PLAYERCREATURE_,RPC_GETTIMESTRING__INT_,RPC_GENERATEDESTROYCODE__,RPC_ISVALIDDESTROYCODE__INT_,RPC_SCHEDULEMAINTENANCEEXPIRATIONEVENT__,RPC_ISONADMINLIST__SCENEOBJECT_,RPC_ISONADMINLIST__LONG_,RPC_ISONENTRYLIST__SCENEOBJECT_,RPC_ISONENTRYLIST__LONG_,RPC_ISONBANLIST__SCENEOBJECT_,RPC_ISONBANLIST__LONG_,RPC_ISOWNEROF__SCENEOBJECT_,RPC_ISOWNEROF__LONG_,RPC_ISONACCESSLIST__SCENEOBJECT_,RPC_ISONACCESSLIST__LONG_,RPC_SENDPERMISSIONLISTTO__PLAYERCREATURE_STRING_,RPC_ADDPERMISSION__PLAYERCREATURE_PLAYERCREATURE_STRING_,RPC_ADDPERMISSION__PLAYERCREATURE_STRING_STRING_,RPC_REMOVEPERMISSION__PLAYERCREATURE_PLAYERCREATURE_STRING_,RPC_REMOVEPERMISSION__PLAYERCREATURE_STRING_STRING_,RPC_CREATEVENDOR__PLAYERCREATURE_,RPC_GETREDEEDCOST__,RPC_GETOWNEROBJECTID__,RPC_GETDEEDOBJECTID__,RPC_GETLOTSIZE__,RPC_GETDESTROYCODE__,RPC_GETBASEMAINTENANCERATE__,RPC_GETBASEPOWERRATE__,RPC_GETSURPLUSMAINTENANCE__,RPC_GETSURPLUSPOWER__,RPC_ISPUBLICSTRUCTURE__,RPC_SETOWNEROBJECTID__LONG_,RPC_SETDEEDOBJECTID__LONG_,RPC_SETLOTSIZE__INT_,RPC_SETDESTROYCODE__INT_,RPC_SETBASEMAINTENANCERATE__INT_,RPC_SETBASEPOWERRATE__INT_,RPC_SETSURPLUSMAINTENANCE__INT_,RPC_ADDMAINTENANCE__INT_,RPC_SETSURPLUSPOWER__INT_,RPC_ADDPOWER__INT_,RPC_SETPUBLICSTRUCTURE__BOOL_,RPC_ISSTRUCTUREOBJECT__,RPC_ISREDEEDABLE__,RPC_GETLENGTH__,RPC_SETLENGTH__INT_,RPC_GETWIDTH__,RPC_SETWIDTH__INT_};
+enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 6,RPC_FINALIZE__,RPC_ISONADMINLIST__SCENEOBJECT_,RPC_ISONBANLIST__SCENEOBJECT_,RPC_ISONVENDORLIST__SCENEOBJECT_,RPC_ISONENTRYLIST__SCENEOBJECT_,RPC_ISONHOPPERLIST__SCENEOBJECT_,RPC_ISOWNEROF__SCENEOBJECT_,RPC_SENDCHANGENAMEPROMPTTO__PLAYERCREATURE_,RPC_SENDSTATUSTO__PLAYERCREATURE_,RPC_SENDMANAGEMAINTENANCETO__PLAYERCREATURE_,RPC_SENDPERMISSIONLISTTO__PLAYERCREATURE_STRING_,RPC_CREATECHILDOBJECTS__,RPC_NOTIFYSTRUCTUREPLACED__PLAYERCREATURE_,RPC_CHECKREQUISITESFORPLACEMENT__PLAYERCREATURE_,RPC_GETTIMESTRING__INT_,RPC_ISPUBLICSTRUCTURE__,RPC_SETPUBLICSTRUCTURE__BOOL_,RPC_ISSTRUCTUREOBJECT__,};
 
 StructureObject::StructureObject() : TangibleObject(DummyConstructorParameter::instance()) {
 	StructureObjectImplementation* _implementation = new StructureObjectImplementation();
@@ -48,845 +42,337 @@
 		_implementation->initializeTransientMembers();
 }
 
-void StructureObject::loadTemplateData(SharedObjectTemplate* templateData) {
-	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		throw ObjectNotLocalException(this);
-
-	} else
-		_implementation->loadTemplateData(templateData);
-}
-
-void StructureObject::createChildObjects() {
+bool StructureObject::isOnAdminList(SceneObject* obj) {
 	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
 	if (_implementation == NULL) {
 		if (!deployed)
 			throw ObjectNotDeployedException(this);
 
-		DistributedMethod method(this, RPC_CREATECHILDOBJECTS__);
+		DistributedMethod method(this, RPC_ISONADMINLIST__SCENEOBJECT_);
+		method.addObjectParameter(obj);
 
-		method.executeWithVoidReturn();
+		return method.executeWithBooleanReturn();
 	} else
-		_implementation->createChildObjects();
+		return _implementation->isOnAdminList(obj);
 }
 
-int StructureObject::notifyStructurePlaced(PlayerCreature* player) {
+bool StructureObject::isOnBanList(SceneObject* obj) {
 	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
 	if (_implementation == NULL) {
 		if (!deployed)
 			throw ObjectNotDeployedException(this);
 
-		DistributedMethod method(this, RPC_NOTIFYSTRUCTUREPLACED__PLAYERCREATURE_);
-		method.addObjectParameter(player);
+		DistributedMethod method(this, RPC_ISONBANLIST__SCENEOBJECT_);
+		method.addObjectParameter(obj);
 
-		return method.executeWithSignedIntReturn();
+		return method.executeWithBooleanReturn();
 	} else
-		return _implementation->notifyStructurePlaced(player);
+		return _implementation->isOnBanList(obj);
 }
 
-bool StructureObject::checkRequisitesForPlacement(PlayerCreature* player) {
+bool StructureObject::isOnVendorList(SceneObject* obj) {
 	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
 	if (_implementation == NULL) {
 		if (!deployed)
 			throw ObjectNotDeployedException(this);
 
-		DistributedMethod method(this, RPC_CHECKREQUISITESFORPLACEMENT__PLAYERCREATURE_);
-		method.addObjectParameter(player);
+		DistributedMethod method(this, RPC_ISONVENDORLIST__SCENEOBJECT_);
+		method.addObjectParameter(obj);
 
 		return method.executeWithBooleanReturn();
 	} else
-		return _implementation->checkRequisitesForPlacement(player);
+		return _implementation->isOnVendorList(obj);
 }
 
-void StructureObject::sendStatusTo(PlayerCreature* player) {
+bool StructureObject::isOnEntryList(SceneObject* obj) {
 	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
 	if (_implementation == NULL) {
 		if (!deployed)
 			throw ObjectNotDeployedException(this);
 
-		DistributedMethod method(this, RPC_SENDSTATUSTO__PLAYERCREATURE_);
-		method.addObjectParameter(player);
+		DistributedMethod method(this, RPC_ISONENTRYLIST__SCENEOBJECT_);
+		method.addObjectParameter(obj);
 
-		method.executeWithVoidReturn();
+		return method.executeWithBooleanReturn();
 	} else
-		_implementation->sendStatusTo(player);
+		return _implementation->isOnEntryList(obj);
 }
 
-void StructureObject::sendDestroyConfirmTo(PlayerCreature* player) {
+bool StructureObject::isOnHopperList(SceneObject* obj) {
 	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
 	if (_implementation == NULL) {
 		if (!deployed)
 			throw ObjectNotDeployedException(this);
 
-		DistributedMethod method(this, RPC_SENDDESTROYCONFIRMTO__PLAYERCREATURE_);
-		method.addObjectParameter(player);
+		DistributedMethod method(this, RPC_ISONHOPPERLIST__SCENEOBJECT_);
+		method.addObjectParameter(obj);
 
-		method.executeWithVoidReturn();
+		return method.executeWithBooleanReturn();
 	} else
-		_implementation->sendDestroyConfirmTo(player);
+		return _implementation->isOnHopperList(obj);
 }
 
-void StructureObject::sendDestroyCodeTo(PlayerCreature* player) {
+bool StructureObject::isOwnerOf(SceneObject* obj) {
 	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
 	if (_implementation == NULL) {
 		if (!deployed)
 			throw ObjectNotDeployedException(this);
 
-		DistributedMethod method(this, RPC_SENDDESTROYCODETO__PLAYERCREATURE_);
-		method.addObjectParameter(player);
+		DistributedMethod method(this, RPC_ISOWNEROF__SCENEOBJECT_);
+		method.addObjectParameter(obj);
 
-		method.executeWithVoidReturn();
+		return method.executeWithBooleanReturn();
 	} else
-		_implementation->sendDestroyCodeTo(player);
+		return _implementation->isOwnerOf(obj);
 }
 
-void StructureObject::sendManageMaintenanceTo(PlayerCreature* player) {
+void StructureObject::sendChangeNamePromptTo(PlayerCreature* player) {
 	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
 	if (_implementation == NULL) {
 		if (!deployed)
 			throw ObjectNotDeployedException(this);
 
-		DistributedMethod method(this, RPC_SENDMANAGEMAINTENANCETO__PLAYERCREATURE_);
+		DistributedMethod method(this, RPC_SENDCHANGENAMEPROMPTTO__PLAYERCREATURE_);
 		method.addObjectParameter(player);
 
 		method.executeWithVoidReturn();
 	} else
-		_implementation->sendManageMaintenanceTo(player);
+		_implementation->sendChangeNamePromptTo(player);
 }
 
-void StructureObject::sendChangeNamePromptTo(PlayerCreature* player) {
+void StructureObject::sendStatusTo(PlayerCreature* player) {
 	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
 	if (_implementation == NULL) {
 		if (!deployed)
 			throw ObjectNotDeployedException(this);
 
-		DistributedMethod method(this, RPC_SENDCHANGENAMEPROMPTTO__PLAYERCREATURE_);
+		DistributedMethod method(this, RPC_SENDSTATUSTO__PLAYERCREATURE_);
 		method.addObjectParameter(player);
 
 		method.executeWithVoidReturn();
 	} else
-		_implementation->sendChangeNamePromptTo(player);
+		_implementation->sendStatusTo(player);
 }
 
-String StructureObject::getTimeString(unsigned int timestamp) {
+void StructureObject::sendManageMaintenanceTo(PlayerCreature* player) {
 	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
 	if (_implementation == NULL) {
 		if (!deployed)
 			throw ObjectNotDeployedException(this);
 
-		DistributedMethod method(this, RPC_GETTIMESTRING__INT_);
-		method.addUnsignedIntParameter(timestamp);
+		DistributedMethod method(this, RPC_SENDMANAGEMAINTENANCETO__PLAYERCREATURE_);
+		method.addObjectParameter(player);
 
-		method.executeWithAsciiReturn(_return_getTimeString);
-		return _return_getTimeString;
+		method.executeWithVoidReturn();
 	} else
-		return _implementation->getTimeString(timestamp);
+		_implementation->sendManageMaintenanceTo(player);
 }
 
-unsigned int StructureObject::generateDestroyCode() {
+void StructureObject::sendPermissionListTo(PlayerCreature* player, const String& listName) {
 	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
 	if (_implementation == NULL) {
 		if (!deployed)
 			throw ObjectNotDeployedException(this);
 
-		DistributedMethod method(this, RPC_GENERATEDESTROYCODE__);
+		DistributedMethod method(this, RPC_SENDPERMISSIONLISTTO__PLAYERCREATURE_STRING_);
+		method.addObjectParameter(player);
+		method.addAsciiParameter(listName);
 
-		return method.executeWithUnsignedIntReturn();
+		method.executeWithVoidReturn();
 	} else
-		return _implementation->generateDestroyCode();
+		_implementation->sendPermissionListTo(player, listName);
 }
 
-bool StructureObject::isValidDestroyCode(unsigned int code) {
+void StructureObject::loadTemplateData(SharedObjectTemplate* templateData) {
 	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
 	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_ISVALIDDESTROYCODE__INT_);
-		method.addUnsignedIntParameter(code);
+		throw ObjectNotLocalException(this);
 
-		return method.executeWithBooleanReturn();
 	} else
-		return _implementation->isValidDestroyCode(code);
+		_implementation->loadTemplateData(templateData);
 }
 
-void StructureObject::scheduleMaintenanceExpirationEvent() {
+void StructureObject::createChildObjects() {
 	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
 	if (_implementation == NULL) {
 		if (!deployed)
 			throw ObjectNotDeployedException(this);
 
-		DistributedMethod method(this, RPC_SCHEDULEMAINTENANCEEXPIRATIONEVENT__);
+		DistributedMethod method(this, RPC_CREATECHILDOBJECTS__);
 
 		method.executeWithVoidReturn();
 	} else
-		_implementation->scheduleMaintenanceExpirationEvent();
+		_implementation->createChildObjects();
 }
 
-bool StructureObject::isOnAdminList(SceneObject* obj) {
+int StructureObject::notifyStructurePlaced(PlayerCreature* player) {
 	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
 	if (_implementation == NULL) {
 		if (!deployed)
 			throw ObjectNotDeployedException(this);
 
-		DistributedMethod method(this, RPC_ISONADMINLIST__SCENEOBJECT_);
-		method.addObjectParameter(obj);
+		DistributedMethod method(this, RPC_NOTIFYSTRUCTUREPLACED__PLAYERCREATURE_);
+		method.addObjectParameter(player);
 
-		return method.executeWithBooleanReturn();
+		return method.executeWithSignedIntReturn();
 	} else
-		return _implementation->isOnAdminList(obj);
+		return _implementation->notifyStructurePlaced(player);
 }
 
-bool StructureObject::isOnAdminList(unsigned long long oid) {
+bool StructureObject::checkRequisitesForPlacement(PlayerCreature* player) {
 	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
 	if (_implementation == NULL) {
 		if (!deployed)
 			throw ObjectNotDeployedException(this);
 
-		DistributedMethod method(this, RPC_ISONADMINLIST__LONG_);
-		method.addUnsignedLongParameter(oid);
+		DistributedMethod method(this, RPC_CHECKREQUISITESFORPLACEMENT__PLAYERCREATURE_);
+		method.addObjectParameter(player);
 
 		return method.executeWithBooleanReturn();
 	} else
-		return _implementation->isOnAdminList(oid);
+		return _implementation->checkRequisitesForPlacement(player);
 }
 
-bool StructureObject::isOnEntryList(SceneObject* obj) {
+String StructureObject::getTimeString(unsigned int timestamp) {
 	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
 	if (_implementation == NULL) {
 		if (!deployed)
 			throw ObjectNotDeployedException(this);
 
-		DistributedMethod method(this, RPC_ISONENTRYLIST__SCENEOBJECT_);
-		method.addObjectParameter(obj);
+		DistributedMethod method(this, RPC_GETTIMESTRING__INT_);
+		method.addUnsignedIntParameter(timestamp);
 
-		return method.executeWithBooleanReturn();
+		method.executeWithAsciiReturn(_return_getTimeString);
+		return _return_getTimeString;
 	} else
-		return _implementation->isOnEntryList(obj);
+		return _implementation->getTimeString(timestamp);
 }
 
-bool StructureObject::isOnEntryList(unsigned long long oid) {
+bool StructureObject::isPublicStructure() {
 	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
 	if (_implementation == NULL) {
 		if (!deployed)
 			throw ObjectNotDeployedException(this);
 
-		DistributedMethod method(this, RPC_ISONENTRYLIST__LONG_);
-		method.addUnsignedLongParameter(oid);
+		DistributedMethod method(this, RPC_ISPUBLICSTRUCTURE__);
 
 		return method.executeWithBooleanReturn();
 	} else
-		return _implementation->isOnEntryList(oid);
+		return _implementation->isPublicStructure();
 }
 
-bool StructureObject::isOnBanList(SceneObject* obj) {
+void StructureObject::setPublicStructure(bool privacy) {
 	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
 	if (_implementation == NULL) {
 		if (!deployed)
 			throw ObjectNotDeployedException(this);
 
-		DistributedMethod method(this, RPC_ISONBANLIST__SCENEOBJECT_);
-		method.addObjectParameter(obj);
+		DistributedMethod method(this, RPC_SETPUBLICSTRUCTURE__BOOL_);
+		method.addBooleanParameter(privacy);
 
-		return method.executeWithBooleanReturn();
+		method.executeWithVoidReturn();
 	} else
-		return _implementation->isOnBanList(obj);
+		_implementation->setPublicStructure(privacy);
 }
 
-bool StructureObject::isOnBanList(unsigned long long oid) {
+bool StructureObject::isStructureObject() {
 	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
 	if (_implementation == NULL) {
 		if (!deployed)
 			throw ObjectNotDeployedException(this);
 
-		DistributedMethod method(this, RPC_ISONBANLIST__LONG_);
-		method.addUnsignedLongParameter(oid);
+		DistributedMethod method(this, RPC_ISSTRUCTUREOBJECT__);
 
 		return method.executeWithBooleanReturn();
 	} else
-		return _implementation->isOnBanList(oid);
+		return _implementation->isStructureObject();
 }
 
-bool StructureObject::isOwnerOf(SceneObject* obj) {
+AABBTree* StructureObject::getAABBTree() {
 	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
 	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_ISOWNEROF__SCENEOBJECT_);
-		method.addObjectParameter(obj);
+		throw ObjectNotLocalException(this);
 
-		return method.executeWithBooleanReturn();
 	} else
-		return _implementation->isOwnerOf(obj);
+		return _implementation->getAABBTree();
 }
 
-bool StructureObject::isOwnerOf(unsigned long long oid) {
+PlayerStructureComponent* StructureObject::createPlayerStructureComponent(PlayerCreature* owner) {
 	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
 	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_ISOWNEROF__LONG_);
-		method.addUnsignedLongParameter(oid);
+		throw ObjectNotLocalException(this);
 
-		return method.executeWithBooleanReturn();
 	} else
-		return _implementation->isOwnerOf(oid);
+		return _implementation->createPlayerStructureComponent(owner);
 }
 
-bool StructureObject::isOnAccessList(SceneObject* obj) {
+PlayerStructureComponent* StructureObject::getPlayerStructureComponent() {
 	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
 	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_ISONACCESSLIST__SCENEOBJECT_);
-		method.addObjectParameter(obj);
+		throw ObjectNotLocalException(this);
 
-		return method.executeWithBooleanReturn();
 	} else
-		return _implementation->isOnAccessList(obj);
+		return _implementation->getPlayerStructureComponent();
 }
 
-bool StructureObject::isOnAccessList(unsigned long long oid) {
-	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_ISONACCESSLIST__LONG_);
-		method.addUnsignedLongParameter(oid);
+DistributedObjectServant* StructureObject::_getImplementation() {
 
-		return method.executeWithBooleanReturn();
-	} else
-		return _implementation->isOnAccessList(oid);
+	_updated = true;
+	return _impl;
 }
 
-void StructureObject::sendPermissionListTo(PlayerCreature* player, const String& listName) {
-	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
+void StructureObject::_setImplementation(DistributedObjectServant* servant) {
+	_impl = servant;
+}
 
-		DistributedMethod method(this, RPC_SENDPERMISSIONLISTTO__PLAYERCREATURE_STRING_);
-		method.addObjectParameter(player);
-		method.addAsciiParameter(listName);
+/*
+ *	StructureObjectImplementation
+ */
 
-		method.executeWithVoidReturn();
-	} else
-		_implementation->sendPermissionListTo(player, listName);
+StructureObjectImplementation::StructureObjectImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
+	_initializeImplementation();
 }
 
-bool StructureObject::addPermission(PlayerCreature* player, PlayerCreature* targetPlayer, const String& listName) {
-	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_ADDPERMISSION__PLAYERCREATURE_PLAYERCREATURE_STRING_);
-		method.addObjectParameter(player);
-		method.addObjectParameter(targetPlayer);
-		method.addAsciiParameter(listName);
 
-		return method.executeWithBooleanReturn();
-	} else
-		return _implementation->addPermission(player, targetPlayer, listName);
+StructureObjectImplementation::~StructureObjectImplementation() {
+	StructureObjectImplementation::finalize();
 }
 
-bool StructureObject::addPermission(PlayerCreature* player, const String& targetPlayerName, const String& listName) {
-	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
 
-		DistributedMethod method(this, RPC_ADDPERMISSION__PLAYERCREATURE_STRING_STRING_);
-		method.addObjectParameter(player);
-		method.addAsciiParameter(targetPlayerName);
-		method.addAsciiParameter(listName);
+void StructureObjectImplementation::_initializeImplementation() {
+	_setClassHelper(StructureObjectHelper::instance());
 
-		return method.executeWithBooleanReturn();
-	} else
-		return _implementation->addPermission(player, targetPlayerName, listName);
+	_serializationHelperMethod();
+	_serializationHelperMethod();
 }
 
-bool StructureObject::removePermission(PlayerCreature* player, PlayerCreature* targetPlayer, const String& listName) {
-	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_REMOVEPERMISSION__PLAYERCREATURE_PLAYERCREATURE_STRING_);
-		method.addObjectParameter(player);
-		method.addObjectParameter(targetPlayer);
-		method.addAsciiParameter(listName);
-
-		return method.executeWithBooleanReturn();
-	} else
-		return _implementation->removePermission(player, targetPlayer, listName);
+void StructureObjectImplementation::_setStub(DistributedObjectStub* stub) {
+	_this = (StructureObject*) stub;
+	TangibleObjectImplementation::_setStub(stub);
 }
 
-bool StructureObject::removePermission(PlayerCreature* player, const String& targetPlayerName, const String& listName) {
-	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
+DistributedObjectStub* StructureObjectImplementation::_getStub() {
+	return _this;
+}
 
-		DistributedMethod method(this, RPC_REMOVEPERMISSION__PLAYERCREATURE_STRING_STRING_);
-		method.addObjectParameter(player);
-		method.addAsciiParameter(targetPlayerName);
-		method.addAsciiParameter(listName);
+StructureObjectImplementation::operator const StructureObject*() {
+	return _this;
+}
 
-		return method.executeWithBooleanReturn();
-	} else
-		return _implementation->removePermission(player, targetPlayerName, listName);
+void StructureObjectImplementation::lock(bool doLock) {
+	_this->lock(doLock);
 }
 
-void StructureObject::createVendor(PlayerCreature* player) {
-	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
+void StructureObjectImplementation::lock(ManagedObject* obj) {
+	_this->lock(obj);
+}
 
-		DistributedMethod method(this, RPC_CREATEVENDOR__PLAYERCREATURE_);
-		method.addObjectParameter(player);
+void StructureObjectImplementation::rlock(bool doLock) {
+	_this->rlock(doLock);
+}
 
-		method.executeWithVoidReturn();
-	} else
-		_implementation->createVendor(player);
-}
-
-int StructureObject::getRedeedCost() {
-	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_GETREDEEDCOST__);
-
-		return method.executeWithSignedIntReturn();
-	} else
-		return _implementation->getRedeedCost();
-}
-
-unsigned long long StructureObject::getOwnerObjectID() {
-	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_GETOWNEROBJECTID__);
-
-		return method.executeWithUnsignedLongReturn();
-	} else
-		return _implementation->getOwnerObjectID();
-}
-
-unsigned long long StructureObject::getDeedObjectID() {
-	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_GETDEEDOBJECTID__);
-
-		return method.executeWithUnsignedLongReturn();
-	} else
-		return _implementation->getDeedObjectID();
-}
-
-int StructureObject::getLotSize() {
-	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_GETLOTSIZE__);
-
-		return method.executeWithSignedIntReturn();
-	} else
-		return _implementation->getLotSize();
-}
-
-unsigned int StructureObject::getDestroyCode() {
-	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_GETDESTROYCODE__);
-
-		return method.executeWithUnsignedIntReturn();
-	} else
-		return _implementation->getDestroyCode();
-}
-
-int StructureObject::getBaseMaintenanceRate() {
-	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_GETBASEMAINTENANCERATE__);
-
-		return method.executeWithSignedIntReturn();
-	} else
-		return _implementation->getBaseMaintenanceRate();
-}
-
-int StructureObject::getBasePowerRate() {
-	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_GETBASEPOWERRATE__);
-
-		return method.executeWithSignedIntReturn();
-	} else
-		return _implementation->getBasePowerRate();
-}
-
-int StructureObject::getSurplusMaintenance() {
-	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_GETSURPLUSMAINTENANCE__);
-
-		return method.executeWithSignedIntReturn();
-	} else
-		return _implementation->getSurplusMaintenance();
-}
-
-int StructureObject::getSurplusPower() {
-	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_GETSURPLUSPOWER__);
-
-		return method.executeWithSignedIntReturn();
-	} else
-		return _implementation->getSurplusPower();
-}
-
-bool StructureObject::isPublicStructure() {
-	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_ISPUBLICSTRUCTURE__);
-
-		return method.executeWithBooleanReturn();
-	} else
-		return _implementation->isPublicStructure();
-}
-
-void StructureObject::setOwnerObjectID(unsigned long long objectID) {
-	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_SETOWNEROBJECTID__LONG_);
-		method.addUnsignedLongParameter(objectID);
-
-		method.executeWithVoidReturn();
-	} else
-		_implementation->setOwnerObjectID(objectID);
-}
-
-void StructureObject::setDeedObjectID(unsigned long long deedID) {
-	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_SETDEEDOBJECTID__LONG_);
-		method.addUnsignedLongParameter(deedID);
-
-		method.executeWithVoidReturn();
-	} else
-		_implementation->setDeedObjectID(deedID);
-}
-
-void StructureObject::setLotSize(int lots) {
-	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_SETLOTSIZE__INT_);
-		method.addSignedIntParameter(lots);
-
-		method.executeWithVoidReturn();
-	} else
-		_implementation->setLotSize(lots);
-}
-
-void StructureObject::setDestroyCode(unsigned int code) {
-	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_SETDESTROYCODE__INT_);
-		method.addUnsignedIntParameter(code);
-
-		method.executeWithVoidReturn();
-	} else
-		_implementation->setDestroyCode(code);
-}
-
-void StructureObject::setBaseMaintenanceRate(int rate) {
-	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_SETBASEMAINTENANCERATE__INT_);
-		method.addSignedIntParameter(rate);
-
-		method.executeWithVoidReturn();
-	} else
-		_implementation->setBaseMaintenanceRate(rate);
-}
-
-void StructureObject::setBasePowerRate(int rate) {
-	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_SETBASEPOWERRATE__INT_);
-		method.addSignedIntParameter(rate);
-
-		method.executeWithVoidReturn();
-	} else
-		_implementation->setBasePowerRate(rate);
-}
-
-void StructureObject::setSurplusMaintenance(int surplus) {
-	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_SETSURPLUSMAINTENANCE__INT_);
-		method.addSignedIntParameter(surplus);
-
-		method.executeWithVoidReturn();
-	} else
-		_implementation->setSurplusMaintenance(surplus);
-}
-
-void StructureObject::addMaintenance(int add) {
-	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_ADDMAINTENANCE__INT_);
-		method.addSignedIntParameter(add);
-
-		method.executeWithVoidReturn();
-	} else
-		_implementation->addMaintenance(add);
-}
-
-void StructureObject::setSurplusPower(int surplus) {
-	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_SETSURPLUSPOWER__INT_);
-		method.addSignedIntParameter(surplus);
-
-		method.executeWithVoidReturn();
-	} else
-		_implementation->setSurplusPower(surplus);
-}
-
-void StructureObject::addPower(int add) {
-	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_ADDPOWER__INT_);
-		method.addSignedIntParameter(add);
-
-		method.executeWithVoidReturn();
-	} else
-		_implementation->addPower(add);
-}
-
-void StructureObject::setPublicStructure(bool privacy) {
-	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_SETPUBLICSTRUCTURE__BOOL_);
-		method.addBooleanParameter(privacy);
-
-		method.executeWithVoidReturn();
-	} else
-		_implementation->setPublicStructure(privacy);
-}
-
-bool StructureObject::isStructureObject() {
-	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_ISSTRUCTUREOBJECT__);
-
-		return method.executeWithBooleanReturn();
-	} else
-		return _implementation->isStructureObject();
-}
-
-bool StructureObject::isRedeedable() {
-	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_ISREDEEDABLE__);
-
-		return method.executeWithBooleanReturn();
-	} else
-		return _implementation->isRedeedable();
-}
-
-int StructureObject::getLength() {
-	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_GETLENGTH__);
-
-		return method.executeWithSignedIntReturn();
-	} else
-		return _implementation->getLength();
-}
-
-AABBTree* StructureObject::getAABBTree() {
-	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		throw ObjectNotLocalException(this);
-
-	} else
-		return _implementation->getAABBTree();
-}
-
-void StructureObject::setLength(int len) {
-	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_SETLENGTH__INT_);
-		method.addSignedIntParameter(len);
-
-		method.executeWithVoidReturn();
-	} else
-		_implementation->setLength(len);
-}
-
-int StructureObject::getWidth() {
-	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_GETWIDTH__);
-
-		return method.executeWithSignedIntReturn();
-	} else
-		return _implementation->getWidth();
-}
-
-void StructureObject::setWidth(int wid) {
-	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_SETWIDTH__INT_);
-		method.addSignedIntParameter(wid);
-
-		method.executeWithVoidReturn();
-	} else
-		_implementation->setWidth(wid);
-}
-
-DistributedObjectServant* StructureObject::_getImplementation() {
-
-	_updated = true;
-	return _impl;
-}
-
-void StructureObject::_setImplementation(DistributedObjectServant* servant) {
-	_impl = servant;
-}
-
-/*
- *	StructureObjectImplementation
- */
-
-StructureObjectImplementation::StructureObjectImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
-	_initializeImplementation();
-}
-
-
-StructureObjectImplementation::~StructureObjectImplementation() {
-	StructureObjectImplementation::finalize();
-}
-
-
-void StructureObjectImplementation::_initializeImplementation() {
-	_setClassHelper(StructureObjectHelper::instance());
-
-	_serializationHelperMethod();
-	_serializationHelperMethod();
-}
-
-void StructureObjectImplementation::_setStub(DistributedObjectStub* stub) {
-	_this = (StructureObject*) stub;
-	TangibleObjectImplementation::_setStub(stub);
-}
-
-DistributedObjectStub* StructureObjectImplementation::_getStub() {
-	return _this;
-}
-
-StructureObjectImplementation::operator const StructureObject*() {
-	return _this;
-}
-
-void StructureObjectImplementation::lock(bool doLock) {
-	_this->lock(doLock);
-}
-
-void StructureObjectImplementation::lock(ManagedObject* obj) {
-	_this->lock(obj);
-}
-
-void StructureObjectImplementation::rlock(bool doLock) {
-	_this->rlock(doLock);
-}
-
-void StructureObjectImplementation::wlock(bool doLock) {
-	_this->wlock(doLock);
+void StructureObjectImplementation::wlock(bool doLock) {
+	_this->wlock(doLock);
 }
 
 void StructureObjectImplementation::wlock(ManagedObject* obj) {
@@ -931,71 +417,11 @@
 	if (TangibleObjectImplementation::readObjectMember(stream, _name))
 		return true;
 
-	if (_name == "structurePermissionList") {
-		TypeInfo<StructurePermissionList >::parseFromBinaryStream(&structurePermissionList, stream);
+	if (_name == "playerStructureComponent") {
+		TypeInfo<PlayerStructureComponent* >::parseFromBinaryStream(&playerStructureComponent, stream);
 		return true;
 	}
 
-	if (_name == "maintenanceExpires") {
-		TypeInfo<Time >::parseFromBinaryStream(&maintenanceExpires, stream);
-		return true;
-	}
-
-	if (_name == "powerExpires") {
-		TypeInfo<Time >::parseFromBinaryStream(&powerExpires, stream);
-		return true;
-	}
-
-	if (_name == "ownerObjectID") {
-		TypeInfo<unsigned long long >::parseFromBinaryStream(&ownerObjectID, stream);
-		return true;
-	}
-
-	if (_name == "deedObjectID") {
-		TypeInfo<unsigned long long >::parseFromBinaryStream(&deedObjectID, stream);
-		return true;
-	}
-
-	if (_name == "lotSize") {
-		TypeInfo<int >::parseFromBinaryStream(&lotSize, stream);
-		return true;
-	}
-
-	if (_name == "destroyCode") {
-		TypeInfo<unsigned int >::parseFromBinaryStream(&destroyCode, stream);
-		return true;
-	}
-
-	if (_name == "baseMaintenanceRate") {
-		TypeInfo<int >::parseFromBinaryStream(&baseMaintenanceRate, stream);
-		return true;
-	}
-
-	if (_name == "basePowerRate") {
-		TypeInfo<int >::parseFromBinaryStream(&basePowerRate, stream);
-		return true;
-	}
-
-	if (_name == "surplusMaintenance") {
-		TypeInfo<float >::parseFromBinaryStream(&surplusMaintenance, stream);
-		return true;
-	}
-
-	if (_name == "surplusPower") {
-		TypeInfo<float >::parseFromBinaryStream(&surplusPower, stream);
-		return true;
-	}
-
-	if (_name == "length") {
-		TypeInfo<int >::parseFromBinaryStream(&length, stream);
-		return true;
-	}
-
-	if (_name == "width") {
-		TypeInfo<int >::parseFromBinaryStream(&width, stream);
-		return true;
-	}
-
 
 	return false;
 }
@@ -1011,112 +437,16 @@
 	String _name;
 	int _offset;
 	uint16 _totalSize;
-	_name = "structurePermissionList";
-	_name.toBinaryStream(stream);
-	_offset = stream->getOffset();
-	stream->writeShort(0);
-	TypeInfo<StructurePermissionList >::toBinaryStream(&structurePermissionList, stream);
-	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
-	stream->writeShort(_offset, _totalSize);
-
-	_name = "maintenanceExpires";
-	_name.toBinaryStream(stream);
-	_offset = stream->getOffset();
-	stream->writeShort(0);
-	TypeInfo<Time >::toBinaryStream(&maintenanceExpires, stream);
-	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
-	stream->writeShort(_offset, _totalSize);
-
-	_name = "powerExpires";
-	_name.toBinaryStream(stream);
-	_offset = stream->getOffset();
-	stream->writeShort(0);
-	TypeInfo<Time >::toBinaryStream(&powerExpires, stream);
-	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
-	stream->writeShort(_offset, _totalSize);
-
-	_name = "ownerObjectID";
-	_name.toBinaryStream(stream);
-	_offset = stream->getOffset();
-	stream->writeShort(0);
-	TypeInfo<unsigned long long >::toBinaryStream(&ownerObjectID, stream);
-	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
-	stream->writeShort(_offset, _totalSize);
-
-	_name = "deedObjectID";
-	_name.toBinaryStream(stream);
-	_offset = stream->getOffset();
-	stream->writeShort(0);
-	TypeInfo<unsigned long long >::toBinaryStream(&deedObjectID, stream);
-	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
-	stream->writeShort(_offset, _totalSize);
-
-	_name = "lotSize";
-	_name.toBinaryStream(stream);
-	_offset = stream->getOffset();
-	stream->writeShort(0);
-	TypeInfo<int >::toBinaryStream(&lotSize, stream);
-	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
-	stream->writeShort(_offset, _totalSize);
-
-	_name = "destroyCode";
-	_name.toBinaryStream(stream);
-	_offset = stream->getOffset();
-	stream->writeShort(0);
-	TypeInfo<unsigned int >::toBinaryStream(&destroyCode, stream);
-	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
-	stream->writeShort(_offset, _totalSize);
-
-	_name = "baseMaintenanceRate";
-	_name.toBinaryStream(stream);
-	_offset = stream->getOffset();
-	stream->writeShort(0);
-	TypeInfo<int >::toBinaryStream(&baseMaintenanceRate, stream);
-	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
-	stream->writeShort(_offset, _totalSize);
-
-	_name = "basePowerRate";
-	_name.toBinaryStream(stream);
-	_offset = stream->getOffset();
-	stream->writeShort(0);
-	TypeInfo<int >::toBinaryStream(&basePowerRate, stream);
-	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
-	stream->writeShort(_offset, _totalSize);
-
-	_name = "surplusMaintenance";
-	_name.toBinaryStream(stream);
-	_offset = stream->getOffset();
-	stream->writeShort(0);
-	TypeInfo<float >::toBinaryStream(&surplusMaintenance, stream);
-	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
-	stream->writeShort(_offset, _totalSize);
-
-	_name = "surplusPower";
-	_name.toBinaryStream(stream);
-	_offset = stream->getOffset();
-	stream->writeShort(0);
-	TypeInfo<float >::toBinaryStream(&surplusPower, stream);
-	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
-	stream->writeShort(_offset, _totalSize);
-
-	_name = "length";
-	_name.toBinaryStream(stream);
-	_offset = stream->getOffset();
-	stream->writeShort(0);
-	TypeInfo<int >::toBinaryStream(&length, stream);
-	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
-	stream->writeShort(_offset, _totalSize);
-
-	_name = "width";
+	_name = "playerStructureComponent";
 	_name.toBinaryStream(stream);
 	_offset = stream->getOffset();
 	stream->writeShort(0);
-	TypeInfo<int >::toBinaryStream(&width, stream);
+	TypeInfo<PlayerStructureComponent* >::toBinaryStream(&playerStructureComponent, stream);
 	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
 	stream->writeShort(_offset, _totalSize);
 
 
-	return 13 + TangibleObjectImplementation::writeObjectMembers(stream);
+	return 1 + TangibleObjectImplementation::writeObjectMembers(stream);
 }
 
 StructureObjectImplementation::StructureObjectImplementation() {
@@ -1125,28 +455,8 @@
 	Logger::setLoggingName("StructureObject");
 	// server/zone/objects/structure/StructureObject.idl():  		super.staticObject = false;
 	TangibleObjectImplementation::staticObject = false;
-	// server/zone/objects/structure/StructureObject.idl():  		lotSize = 0;
-	lotSize = 0;
-	// server/zone/objects/structure/StructureObject.idl():  		ownerObjectID = 0;
-	ownerObjectID = 0;
-	// server/zone/objects/structure/StructureObject.idl():  		deedObjectID = 0;
-	deedObjectID = 0;
-	// server/zone/objects/structure/StructureObject.idl():  		destroyCode = 0;
-	destroyCode = 0;
-	// server/zone/objects/structure/StructureObject.idl():  		baseMaintenanceRate = 0;
-	baseMaintenanceRate = 0;
-	// server/zone/objects/structure/StructureObject.idl():  		basePowerRate = 0;
-	basePowerRate = 0;
-	// server/zone/objects/structure/StructureObject.idl():  		surplusMaintenance = 0;
-	surplusMaintenance = 0;
-	// server/zone/objects/structure/StructureObject.idl():  		surplusPower = 0;
-	surplusPower = 0;
-	// server/zone/objects/structure/StructureObject.idl():  		length = 0;
-	length = 0;
-	// server/zone/objects/structure/StructureObject.idl():  		width = 0;
-	width = 0;
-	// server/zone/objects/structure/StructureObject.idl():  		structureMaintenanceTask = null;
-	structureMaintenanceTask = NULL;
+	// server/zone/objects/structure/StructureObject.idl():  		playerStructureComponent = null;
+	playerStructureComponent = NULL;
 }
 
 void StructureObjectImplementation::createChildObjects() {
@@ -1164,167 +474,11 @@
 	return true;
 }
 
-unsigned int StructureObjectImplementation::generateDestroyCode() {
-	// server/zone/objects/structure/StructureObject.idl():  		destroyCode = System.random(899999) + 100000;
-	destroyCode = System::random(899999) + 100000;
-	// server/zone/objects/structure/StructureObject.idl():  		return destroyCode;
-	return destroyCode;
-}
-
-bool StructureObjectImplementation::isValidDestroyCode(unsigned int code) {
-	// server/zone/objects/structure/StructureObject.idl():  		return (destroyCode == code);
-	return (destroyCode == code);
-}
-
-bool StructureObjectImplementation::isOnAdminList(SceneObject* obj) {
-	// server/zone/objects/structure/StructureObject.idl():  		return structurePermissionList.isOnAdminList(obj.getObjectID());
-	return (&structurePermissionList)->isOnAdminList(obj->getObjectID());
-}
-
-bool StructureObjectImplementation::isOnAdminList(unsigned long long oid) {
-	// server/zone/objects/structure/StructureObject.idl():  		return structurePermissionList.isOnAdminList(oid);
-	return (&structurePermissionList)->isOnAdminList(oid);
-}
-
-bool StructureObjectImplementation::isOnEntryList(SceneObject* obj) {
-	// server/zone/objects/structure/StructureObject.idl():  		return structurePermissionList.isOnEntryList(obj.getObjectID());
-	return (&structurePermissionList)->isOnEntryList(obj->getObjectID());
-}
-
-bool StructureObjectImplementation::isOnEntryList(unsigned long long oid) {
-	// server/zone/objects/structure/StructureObject.idl():  		return structurePermissionList.isOnEntryList(oid);
-	return (&structurePermissionList)->isOnEntryList(oid);
-}
-
-bool StructureObjectImplementation::isOnBanList(SceneObject* obj) {
-	// server/zone/objects/structure/StructureObject.idl():  		return structurePermissionList.isOnBanList(obj.getObjectID());
-	return (&structurePermissionList)->isOnBanList(obj->getObjectID());
-}
-
-bool StructureObjectImplementation::isOnBanList(unsigned long long oid) {
-	// server/zone/objects/structure/StructureObject.idl():  		return structurePermissionList.isOnBanList(oid);
-	return (&structurePermissionList)->isOnBanList(oid);
-}
-
-bool StructureObjectImplementation::isOnAccessList(SceneObject* obj) {
-	// server/zone/objects/structure/StructureObject.idl():  		return false;
-	return false;
-}
-
-bool StructureObjectImplementation::isOnAccessList(unsigned long long oid) {
-	// server/zone/objects/structure/StructureObject.idl():  		return false;
-	return false;
-}
-
-void StructureObjectImplementation::sendPermissionListTo(PlayerCreature* player, const String& listName) {
-	// server/zone/objects/structure/StructureObject.idl():  		structurePermissionList.sendTo(player, listName);
-	(&structurePermissionList)->sendTo(player, listName);
-}
-
-int StructureObjectImplementation::getRedeedCost() {
-	// server/zone/objects/structure/StructureObject.idl():  		return (baseMaintenanceRate * 50);
-	return (baseMaintenanceRate * 50);
-}
-
-unsigned long long StructureObjectImplementation::getOwnerObjectID() {
-	// server/zone/objects/structure/StructureObject.idl():  		return ownerObjectID;
-	return ownerObjectID;
-}
-
-unsigned long long StructureObjectImplementation::getDeedObjectID() {
-	// server/zone/objects/structure/StructureObject.idl():  		return deedObjectID;
-	return deedObjectID;
-}
-
-int StructureObjectImplementation::getLotSize() {
-	// server/zone/objects/structure/StructureObject.idl():  		return lotSize;
-	return lotSize;
-}
-
-unsigned int StructureObjectImplementation::getDestroyCode() {
-	// server/zone/objects/structure/StructureObject.idl():  		return destroyCode;
-	return destroyCode;
-}
-
-int StructureObjectImplementation::getBaseMaintenanceRate() {
-	// server/zone/objects/structure/StructureObject.idl():  		return baseMaintenanceRate;
-	return baseMaintenanceRate;
-}
-
-int StructureObjectImplementation::getBasePowerRate() {
-	// server/zone/objects/structure/StructureObject.idl():  		return basePowerRate;
-	return basePowerRate;
-}
-
-int StructureObjectImplementation::getSurplusMaintenance() {
-	// server/zone/objects/structure/StructureObject.idl():  		return surplusMaintenance;
-	return surplusMaintenance;
-}
-
-int StructureObjectImplementation::getSurplusPower() {
-	// server/zone/objects/structure/StructureObject.idl():  		return surplusPower;
-	return surplusPower;
-}
-
 bool StructureObjectImplementation::isPublicStructure() {
 	// server/zone/objects/structure/StructureObject.idl():  		return false;
 	return false;
 }
 
-void StructureObjectImplementation::setOwnerObjectID(unsigned long long objectID) {
-	// server/zone/objects/structure/StructureObject.idl():  		structurePermissionList.removePermission(ownerObjectID, StructurePermissionList.OWNER);
-	(&structurePermissionList)->removePermission(ownerObjectID, StructurePermissionList::OWNER);
-	// server/zone/objects/structure/StructureObject.idl():  		ownerObjectID = objectID;
-	ownerObjectID = objectID;
-	// server/zone/objects/structure/StructureObject.idl():  		structurePermissionList.addPermission(objectID, StructurePermissionList.OWNER);
-	(&structurePermissionList)->addPermission(objectID, StructurePermissionList::OWNER);
-}
-
-void StructureObjectImplementation::setDeedObjectID(unsigned long long deedID) {
-	// server/zone/objects/structure/StructureObject.idl():  		deedObjectID = deedID;
-	deedObjectID = deedID;
-}
-
-void StructureObjectImplementation::setLotSize(int lots) {
-	// server/zone/objects/structure/StructureObject.idl():  		lotSize = lots;
-	lotSize = lots;
-}
-
-void StructureObjectImplementation::setDestroyCode(unsigned int code) {
-	// server/zone/objects/structure/StructureObject.idl():  		destroyCode = code;
-	destroyCode = code;
-}
-
-void StructureObjectImplementation::setBaseMaintenanceRate(int rate) {
-	// server/zone/objects/structure/StructureObject.idl():  		baseMaintenanceRate = rate;
-	baseMaintenanceRate = rate;
-}
-
-void StructureObjectImplementation::setBasePowerRate(int rate) {
-	// server/zone/objects/structure/StructureObject.idl():  		basePowerRate = rate;
-	basePowerRate = rate;
-}
-
-void StructureObjectImplementation::setSurplusMaintenance(int surplus) {
-	// server/zone/objects/structure/StructureObject.idl():  		surplusMaintenance = surplus;
-	surplusMaintenance = surplus;
-}
-
-void StructureObjectImplementation::addMaintenance(int add) {
-	// server/zone/objects/structure/StructureObject.idl():  		surplusMaintenance += add;
-	surplusMaintenance += add;
-}
-
-void StructureObjectImplementation::setSurplusPower(int surplus) {
-	// server/zone/objects/structure/StructureObject.idl():  		surplusPower = surplus;
-	surplusPower = surplus;
-}
-
-void StructureObjectImplementation::addPower(int add) {
-	// server/zone/objects/structure/StructureObject.idl():  		surplusPower += add;
-	surplusPower += add;
-}
-
 void StructureObjectImplementation::setPublicStructure(bool privacy) {
 }
 
@@ -1333,29 +487,9 @@
 	return true;
 }
 
-bool StructureObjectImplementation::isRedeedable() {
-	// server/zone/objects/structure/StructureObject.idl():  		return (getRedeedCost() < (surplusMaintenance + 1));
-	return (getRedeedCost() < (surplusMaintenance + 1));
-}
-
-int StructureObjectImplementation::getLength() {
-	// server/zone/objects/structure/StructureObject.idl():  		return length;
-	return length;
-}
-
-void StructureObjectImplementation::setLength(int len) {
-	// server/zone/objects/structure/StructureObject.idl():  		length = len;
-	length = len;
-}
-
-int StructureObjectImplementation::getWidth() {
-	// server/zone/objects/structure/StructureObject.idl():  		return width;
-	return width;
-}
-
-void StructureObjectImplementation::setWidth(int wid) {
-	// server/zone/objects/structure/StructureObject.idl():  		width = wid;
-	width = wid;
+PlayerStructureComponent* StructureObjectImplementation::getPlayerStructureComponent() {
+	// server/zone/objects/structure/StructureObject.idl():  		return playerStructureComponent;
+	return playerStructureComponent;
 }
 
 /*
@@ -1375,171 +509,57 @@
 	case RPC_FINALIZE__:
 		finalize();
 		break;
-	case RPC_CREATECHILDOBJECTS__:
-		createChildObjects();
-		break;
-	case RPC_NOTIFYSTRUCTUREPLACED__PLAYERCREATURE_:
-		resp->insertSignedInt(notifyStructurePlaced((PlayerCreature*) inv->getObjectParameter()));
-		break;
-	case RPC_CHECKREQUISITESFORPLACEMENT__PLAYERCREATURE_:
-		resp->insertBoolean(checkRequisitesForPlacement((PlayerCreature*) inv->getObjectParameter()));
-		break;
-	case RPC_SENDSTATUSTO__PLAYERCREATURE_:
-		sendStatusTo((PlayerCreature*) inv->getObjectParameter());
-		break;
-	case RPC_SENDDESTROYCONFIRMTO__PLAYERCREATURE_:
-		sendDestroyConfirmTo((PlayerCreature*) inv->getObjectParameter());
-		break;
-	case RPC_SENDDESTROYCODETO__PLAYERCREATURE_:
-		sendDestroyCodeTo((PlayerCreature*) inv->getObjectParameter());
-		break;
-	case RPC_SENDMANAGEMAINTENANCETO__PLAYERCREATURE_:
-		sendManageMaintenanceTo((PlayerCreature*) inv->getObjectParameter());
-		break;
-	case RPC_SENDCHANGENAMEPROMPTTO__PLAYERCREATURE_:
-		sendChangeNamePromptTo((PlayerCreature*) inv->getObjectParameter());
-		break;
-	case RPC_GETTIMESTRING__INT_:
-		resp->insertAscii(getTimeString(inv->getUnsignedIntParameter()));
-		break;
-	case RPC_GENERATEDESTROYCODE__:
-		resp->insertInt(generateDestroyCode());
-		break;
-	case RPC_ISVALIDDESTROYCODE__INT_:
-		resp->insertBoolean(isValidDestroyCode(inv->getUnsignedIntParameter()));
-		break;
-	case RPC_SCHEDULEMAINTENANCEEXPIRATIONEVENT__:
-		scheduleMaintenanceExpirationEvent();
-		break;
 	case RPC_ISONADMINLIST__SCENEOBJECT_:
 		resp->insertBoolean(isOnAdminList((SceneObject*) inv->getObjectParameter()));
 		break;
-	case RPC_ISONADMINLIST__LONG_:
-		resp->insertBoolean(isOnAdminList(inv->getUnsignedLongParameter()));
+	case RPC_ISONBANLIST__SCENEOBJECT_:
+		resp->insertBoolean(isOnBanList((SceneObject*) inv->getObjectParameter()));
+		break;
+	case RPC_ISONVENDORLIST__SCENEOBJECT_:
+		resp->insertBoolean(isOnVendorList((SceneObject*) inv->getObjectParameter()));
 		break;
 	case RPC_ISONENTRYLIST__SCENEOBJECT_:
 		resp->insertBoolean(isOnEntryList((SceneObject*) inv->getObjectParameter()));
 		break;
-	case RPC_ISONENTRYLIST__LONG_:
-		resp->insertBoolean(isOnEntryList(inv->getUnsignedLongParameter()));
-		break;
-	case RPC_ISONBANLIST__SCENEOBJECT_:
-		resp->insertBoolean(isOnBanList((SceneObject*) inv->getObjectParameter()));
-		break;
-	case RPC_ISONBANLIST__LONG_:
-		resp->insertBoolean(isOnBanList(inv->getUnsignedLongParameter()));
+	case RPC_ISONHOPPERLIST__SCENEOBJECT_:
+		resp->insertBoolean(isOnHopperList((SceneObject*) inv->getObjectParameter()));
 		break;
 	case RPC_ISOWNEROF__SCENEOBJECT_:
 		resp->insertBoolean(isOwnerOf((SceneObject*) inv->getObjectParameter()));
 		break;
-	case RPC_ISOWNEROF__LONG_:
-		resp->insertBoolean(isOwnerOf(inv->getUnsignedLongParameter()));
+	case RPC_SENDCHANGENAMEPROMPTTO__PLAYERCREATURE_:
+		sendChangeNamePromptTo((PlayerCreature*) inv->getObjectParameter());
 		break;
-	case RPC_ISONACCESSLIST__SCENEOBJECT_:
-		resp->insertBoolean(isOnAccessList((SceneObject*) inv->getObjectParameter()));
+	case RPC_SENDSTATUSTO__PLAYERCREATURE_:
+		sendStatusTo((PlayerCreature*) inv->getObjectParameter());
 		break;
-	case RPC_ISONACCESSLIST__LONG_:
-		resp->insertBoolean(isOnAccessList(inv->getUnsignedLongParameter()));
+	case RPC_SENDMANAGEMAINTENANCETO__PLAYERCREATURE_:
+		sendManageMaintenanceTo((PlayerCreature*) inv->getObjectParameter());
 		break;
 	case RPC_SENDPERMISSIONLISTTO__PLAYERCREATURE_STRING_:
 		sendPermissionListTo((PlayerCreature*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_sendPermissionListTo__PlayerCreature_String_));
 		break;
-	case RPC_ADDPERMISSION__PLAYERCREATURE_PLAYERCREATURE_STRING_:
-		resp->insertBoolean(addPermission((PlayerCreature*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter(), inv->getAsciiParameter(_param2_addPermission__PlayerCreature_PlayerCreature_String_)));
-		break;
-	case RPC_ADDPERMISSION__PLAYERCREATURE_STRING_STRING_:
-		resp->insertBoolean(addPermission((PlayerCreature*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_addPermission__PlayerCreature_String_String_), inv->getAsciiParameter(_param2_addPermission__PlayerCreature_String_String_)));
-		break;
-	case RPC_REMOVEPERMISSION__PLAYERCREATURE_PLAYERCREATURE_STRING_:
-		resp->insertBoolean(removePermission((PlayerCreature*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter(), inv->getAsciiParameter(_param2_removePermission__PlayerCreature_PlayerCreature_String_)));
-		break;
-	case RPC_REMOVEPERMISSION__PLAYERCREATURE_STRING_STRING_:
-		resp->insertBoolean(removePermission((PlayerCreature*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_removePermission__PlayerCreature_String_String_), inv->getAsciiParameter(_param2_removePermission__PlayerCreature_String_String_)));
-		break;
-	case RPC_CREATEVENDOR__PLAYERCREATURE_:
-		createVendor((PlayerCreature*) inv->getObjectParameter());
-		break;
-	case RPC_GETREDEEDCOST__:
-		resp->insertSignedInt(getRedeedCost());
-		break;
-	case RPC_GETOWNEROBJECTID__:
-		resp->insertLong(getOwnerObjectID());
-		break;
-	case RPC_GETDEEDOBJECTID__:
-		resp->insertLong(getDeedObjectID());
-		break;
-	case RPC_GETLOTSIZE__:
-		resp->insertSignedInt(getLotSize());
-		break;
-	case RPC_GETDESTROYCODE__:
-		resp->insertInt(getDestroyCode());
-		break;
-	case RPC_GETBASEMAINTENANCERATE__:
-		resp->insertSignedInt(getBaseMaintenanceRate());
+	case RPC_CREATECHILDOBJECTS__:
+		createChildObjects();
 		break;
-	case RPC_GETBASEPOWERRATE__:
-		resp->insertSignedInt(getBasePowerRate());
+	case RPC_NOTIFYSTRUCTUREPLACED__PLAYERCREATURE_:
+		resp->insertSignedInt(notifyStructurePlaced((PlayerCreature*) inv->getObjectParameter()));
 		break;
-	case RPC_GETSURPLUSMAINTENANCE__:
-		resp->insertSignedInt(getSurplusMaintenance());
+	case RPC_CHECKREQUISITESFORPLACEMENT__PLAYERCREATURE_:
+		resp->insertBoolean(checkRequisitesForPlacement((PlayerCreature*) inv->getObjectParameter()));
 		break;
-	case RPC_GETSURPLUSPOWER__:
-		resp->insertSignedInt(getSurplusPower());
+	case RPC_GETTIMESTRING__INT_:
+		resp->insertAscii(getTimeString(inv->getUnsignedIntParameter()));
 		break;
 	case RPC_ISPUBLICSTRUCTURE__:
 		resp->insertBoolean(isPublicStructure());
 		break;
-	case RPC_SETOWNEROBJECTID__LONG_:
-		setOwnerObjectID(inv->getUnsignedLongParameter());
-		break;
-	case RPC_SETDEEDOBJECTID__LONG_:
-		setDeedObjectID(inv->getUnsignedLongParameter());
-		break;
-	case RPC_SETLOTSIZE__INT_:
-		setLotSize(inv->getSignedIntParameter());
-		break;
-	case RPC_SETDESTROYCODE__INT_:
-		setDestroyCode(inv->getUnsignedIntParameter());
-		break;
-	case RPC_SETBASEMAINTENANCERATE__INT_:
-		setBaseMaintenanceRate(inv->getSignedIntParameter());
-		break;
-	case RPC_SETBASEPOWERRATE__INT_:
-		setBasePowerRate(inv->getSignedIntParameter());
-		break;
-	case RPC_SETSURPLUSMAINTENANCE__INT_:
-		setSurplusMaintenance(inv->getSignedIntParameter());
-		break;
-	case RPC_ADDMAINTENANCE__INT_:
-		addMaintenance(inv->getSignedIntParameter());
-		break;
-	case RPC_SETSURPLUSPOWER__INT_:
-		setSurplusPower(inv->getSignedIntParameter());
-		break;
-	case RPC_ADDPOWER__INT_:
-		addPower(inv->getSignedIntParameter());
-		break;
 	case RPC_SETPUBLICSTRUCTURE__BOOL_:
 		setPublicStructure(inv->getBooleanParameter());
 		break;
 	case RPC_ISSTRUCTUREOBJECT__:
 		resp->insertBoolean(isStructureObject());
 		break;
-	case RPC_ISREDEEDABLE__:
-		resp->insertBoolean(isRedeedable());
-		break;
-	case RPC_GETLENGTH__:
-		resp->insertSignedInt(getLength());
-		break;
-	case RPC_SETLENGTH__INT_:
-		setLength(inv->getSignedIntParameter());
-		break;
-	case RPC_GETWIDTH__:
-		resp->insertSignedInt(getWidth());
-		break;
-	case RPC_SETWIDTH__INT_:
-		setWidth(inv->getSignedIntParameter());
-		break;
 	default:
 		return NULL;
 	}
@@ -1555,198 +575,66 @@
 	((StructureObjectImplementation*) impl)->finalize();
 }
 
-void StructureObjectAdapter::createChildObjects() {
-	((StructureObjectImplementation*) impl)->createChildObjects();
-}
-
-int StructureObjectAdapter::notifyStructurePlaced(PlayerCreature* player) {
-	return ((StructureObjectImplementation*) impl)->notifyStructurePlaced(player);
-}
-
-bool StructureObjectAdapter::checkRequisitesForPlacement(PlayerCreature* player) {
-	return ((StructureObjectImplementation*) impl)->checkRequisitesForPlacement(player);
-}
-
-void StructureObjectAdapter::sendStatusTo(PlayerCreature* player) {
-	((StructureObjectImplementation*) impl)->sendStatusTo(player);
-}
-
-void StructureObjectAdapter::sendDestroyConfirmTo(PlayerCreature* player) {
-	((StructureObjectImplementation*) impl)->sendDestroyConfirmTo(player);
-}
-
-void StructureObjectAdapter::sendDestroyCodeTo(PlayerCreature* player) {
-	((StructureObjectImplementation*) impl)->sendDestroyCodeTo(player);
-}
-
-void StructureObjectAdapter::sendManageMaintenanceTo(PlayerCreature* player) {
-	((StructureObjectImplementation*) impl)->sendManageMaintenanceTo(player);
-}
-
-void StructureObjectAdapter::sendChangeNamePromptTo(PlayerCreature* player) {
-	((StructureObjectImplementation*) impl)->sendChangeNamePromptTo(player);
-}
-
-String StructureObjectAdapter::getTimeString(unsigned int timestamp) {
-	return ((StructureObjectImplementation*) impl)->getTimeString(timestamp);
-}
-
-unsigned int StructureObjectAdapter::generateDestroyCode() {
-	return ((StructureObjectImplementation*) impl)->generateDestroyCode();
-}
-
-bool StructureObjectAdapter::isValidDestroyCode(unsigned int code) {
-	return ((StructureObjectImplementation*) impl)->isValidDestroyCode(code);
-}
-
-void StructureObjectAdapter::scheduleMaintenanceExpirationEvent() {
-	((StructureObjectImplementation*) impl)->scheduleMaintenanceExpirationEvent();
-}
-
 bool StructureObjectAdapter::isOnAdminList(SceneObject* obj) {
 	return ((StructureObjectImplementation*) impl)->isOnAdminList(obj);
 }
 
-bool StructureObjectAdapter::isOnAdminList(unsigned long long oid) {
-	return ((StructureObjectImplementation*) impl)->isOnAdminList(oid);
-}
-
-bool StructureObjectAdapter::isOnEntryList(SceneObject* obj) {
-	return ((StructureObjectImplementation*) impl)->isOnEntryList(obj);
+bool StructureObjectAdapter::isOnBanList(SceneObject* obj) {
+	return ((StructureObjectImplementation*) impl)->isOnBanList(obj);
 }
 
-bool StructureObjectAdapter::isOnEntryList(unsigned long long oid) {
-	return ((StructureObjectImplementation*) impl)->isOnEntryList(oid);
+bool StructureObjectAdapter::isOnVendorList(SceneObject* obj) {
+	return ((StructureObjectImplementation*) impl)->isOnVendorList(obj);
 }
 
-bool StructureObjectAdapter::isOnBanList(SceneObject* obj) {
-	return ((StructureObjectImplementation*) impl)->isOnBanList(obj);
+bool StructureObjectAdapter::isOnEntryList(SceneObject* obj) {
+	return ((StructureObjectImplementation*) impl)->isOnEntryList(obj);
 }
 
-bool StructureObjectAdapter::isOnBanList(unsigned long long oid) {
-	return ((StructureObjectImplementation*) impl)->isOnBanList(oid);
+bool StructureObjectAdapter::isOnHopperList(SceneObject* obj) {
+	return ((StructureObjectImplementation*) impl)->isOnHopperList(obj);
 }
 
 bool StructureObjectAdapter::isOwnerOf(SceneObject* obj) {
 	return ((StructureObjectImplementation*) impl)->isOwnerOf(obj);
 }
 
-bool StructureObjectAdapter::isOwnerOf(unsigned long long oid) {
-	return ((StructureObjectImplementation*) impl)->isOwnerOf(oid);
+void StructureObjectAdapter::sendChangeNamePromptTo(PlayerCreature* player) {
+	((StructureObjectImplementation*) impl)->sendChangeNamePromptTo(player);
 }
 
-bool StructureObjectAdapter::isOnAccessList(SceneObject* obj) {
-	return ((StructureObjectImplementation*) impl)->isOnAccessList(obj);
+void StructureObjectAdapter::sendStatusTo(PlayerCreature* player) {
+	((StructureObjectImplementation*) impl)->sendStatusTo(player);
 }
 
-bool StructureObjectAdapter::isOnAccessList(unsigned long long oid) {
-	return ((StructureObjectImplementation*) impl)->isOnAccessList(oid);
+void StructureObjectAdapter::sendManageMaintenanceTo(PlayerCreature* player) {
+	((StructureObjectImplementation*) impl)->sendManageMaintenanceTo(player);
 }
 
 void StructureObjectAdapter::sendPermissionListTo(PlayerCreature* player, const String& listName) {
 	((StructureObjectImplementation*) impl)->sendPermissionListTo(player, listName);
 }
 
-bool StructureObjectAdapter::addPermission(PlayerCreature* player, PlayerCreature* targetPlayer, const String& listName) {
-	return ((StructureObjectImplementation*) impl)->addPermission(player, targetPlayer, listName);
-}
-
-bool StructureObjectAdapter::addPermission(PlayerCreature* player, const String& targetPlayerName, const String& listName) {
-	return ((StructureObjectImplementation*) impl)->addPermission(player, targetPlayerName, listName);
-}
-
-bool StructureObjectAdapter::removePermission(PlayerCreature* player, PlayerCreature* targetPlayer, const String& listName) {
-	return ((StructureObjectImplementation*) impl)->removePermission(player, targetPlayer, listName);
-}
-
-bool StructureObjectAdapter::removePermission(PlayerCreature* player, const String& targetPlayerName, const String& listName) {
-	return ((StructureObjectImplementation*) impl)->removePermission(player, targetPlayerName, listName);
-}
-
-void StructureObjectAdapter::createVendor(PlayerCreature* player) {
-	((StructureObjectImplementation*) impl)->createVendor(player);
-}
-
-int StructureObjectAdapter::getRedeedCost() {
-	return ((StructureObjectImplementation*) impl)->getRedeedCost();
-}
-
-unsigned long long StructureObjectAdapter::getOwnerObjectID() {
-	return ((StructureObjectImplementation*) impl)->getOwnerObjectID();
-}
-
-unsigned long long StructureObjectAdapter::getDeedObjectID() {
-	return ((StructureObjectImplementation*) impl)->getDeedObjectID();
-}
-
-int StructureObjectAdapter::getLotSize() {
-	return ((StructureObjectImplementation*) impl)->getLotSize();
-}
-
-unsigned int StructureObjectAdapter::getDestroyCode() {
-	return ((StructureObjectImplementation*) impl)->getDestroyCode();
-}
-
-int StructureObjectAdapter::getBaseMaintenanceRate() {
-	return ((StructureObjectImplementation*) impl)->getBaseMaintenanceRate();
+void StructureObjectAdapter::createChildObjects() {
+	((StructureObjectImplementation*) impl)->createChildObjects();
 }
 
-int StructureObjectAdapter::getBasePowerRate() {
-	return ((StructureObjectImplementation*) impl)->getBasePowerRate();
+int StructureObjectAdapter::notifyStructurePlaced(PlayerCreature* player) {
+	return ((StructureObjectImplementation*) impl)->notifyStructurePlaced(player);
 }
 
-int StructureObjectAdapter::getSurplusMaintenance() {
-	return ((StructureObjectImplementation*) impl)->getSurplusMaintenance();
+bool StructureObjectAdapter::checkRequisitesForPlacement(PlayerCreature* player) {
+	return ((StructureObjectImplementation*) impl)->checkRequisitesForPlacement(player);
 }
 
-int StructureObjectAdapter::getSurplusPower() {
-	return ((StructureObjectImplementation*) impl)->getSurplusPower();
+String StructureObjectAdapter::getTimeString(unsigned int timestamp) {
+	return ((StructureObjectImplementation*) impl)->getTimeString(timestamp);
 }
 
 bool StructureObjectAdapter::isPublicStructure() {
 	return ((StructureObjectImplementation*) impl)->isPublicStructure();
 }
 
-void StructureObjectAdapter::setOwnerObjectID(unsigned long long objectID) {
-	((StructureObjectImplementation*) impl)->setOwnerObjectID(objectID);
-}
-
-void StructureObjectAdapter::setDeedObjectID(unsigned long long deedID) {
-	((StructureObjectImplementation*) impl)->setDeedObjectID(deedID);
-}
-
-void StructureObjectAdapter::setLotSize(int lots) {
-	((StructureObjectImplementation*) impl)->setLotSize(lots);
-}
-
-void StructureObjectAdapter::setDestroyCode(unsigned int code) {
-	((StructureObjectImplementation*) impl)->setDestroyCode(code);
-}
-
-void StructureObjectAdapter::setBaseMaintenanceRate(int rate) {
-	((StructureObjectImplementation*) impl)->setBaseMaintenanceRate(rate);
-}
-
-void StructureObjectAdapter::setBasePowerRate(int rate) {
-	((StructureObjectImplementation*) impl)->setBasePowerRate(rate);
-}
-
-void StructureObjectAdapter::setSurplusMaintenance(int surplus) {
-	((StructureObjectImplementation*) impl)->setSurplusMaintenance(surplus);
-}
-
-void StructureObjectAdapter::addMaintenance(int add) {
-	((StructureObjectImplementation*) impl)->addMaintenance(add);
-}
-
-void StructureObjectAdapter::setSurplusPower(int surplus) {
-	((StructureObjectImplementation*) impl)->setSurplusPower(surplus);
-}
-
-void StructureObjectAdapter::addPower(int add) {
-	((StructureObjectImplementation*) impl)->addPower(add);
-}
-
 void StructureObjectAdapter::setPublicStructure(bool privacy) {
 	((StructureObjectImplementation*) impl)->setPublicStructure(privacy);
 }
@@ -1755,26 +643,6 @@
 	return ((StructureObjectImplementation*) impl)->isStructureObject();
 }
 
-bool StructureObjectAdapter::isRedeedable() {
-	return ((StructureObjectImplementation*) impl)->isRedeedable();
-}
-
-int StructureObjectAdapter::getLength() {
-	return ((StructureObjectImplementation*) impl)->getLength();
-}
-
-void StructureObjectAdapter::setLength(int len) {
-	((StructureObjectImplementation*) impl)->setLength(len);
-}
-
-int StructureObjectAdapter::getWidth() {
-	return ((StructureObjectImplementation*) impl)->getWidth();
-}
-
-void StructureObjectAdapter::setWidth(int wid) {
-	((StructureObjectImplementation*) impl)->setWidth(wid);
-}
-
 /*
  *	StructureObjectHelper
  */
Index: src/server/zone/objects/structure/StructureObject.h
===================================================================
--- src/server/zone/objects/structure/StructureObject.h	(revision 2976)
+++ src/server/zone/objects/structure/StructureObject.h	(working copy)
@@ -14,22 +14,6 @@
 namespace server {
 namespace zone {
 namespace objects {
-namespace structure {
-namespace events {
-
-class StructureMaintenanceTask;
-
-} // namespace events
-} // namespace structure
-} // namespace objects
-} // namespace zone
-} // namespace server
-
-using namespace server::zone::objects::structure::events;
-
-namespace server {
-namespace zone {
-namespace objects {
 namespace scene {
 
 class SceneObject;
@@ -44,20 +28,6 @@
 namespace server {
 namespace zone {
 namespace objects {
-namespace creature {
-
-class CreatureObject;
-
-} // namespace creature
-} // namespace objects
-} // namespace zone
-} // namespace server
-
-using namespace server::zone::objects::creature;
-
-namespace server {
-namespace zone {
-namespace objects {
 namespace player {
 
 class PlayerCreature;
@@ -81,32 +51,14 @@
 
 using namespace server::zone::templates;
 
-namespace server {
-namespace zone {
-namespace objects {
-namespace area {
-
-class ActiveArea;
-
-} // namespace area
-} // namespace objects
-} // namespace zone
-} // namespace server
-
-using namespace server::zone::objects::area;
+#include "server/zone/objects/structure/PlayerStructureComponent.h"
 
 #include "server/zone/objects/structure/StructurePermissionList.h"
 
-#include "server/zone/packets/ui/CreateClientPathMessage.h"
-
 #include "server/zone/objects/tangible/TangibleObject.h"
 
 #include "engine/util/u3d/AABBTree.h"
 
-#include "engine/util/u3d/AABBNode.h"
-
-#include "engine/util/u3d/Vector3.h"
-
 namespace server {
 namespace zone {
 namespace objects {
@@ -118,119 +70,47 @@
 
 	void initializeTransientMembers();
 
-	void loadTemplateData(SharedObjectTemplate* templateData);
-
-	void createChildObjects();
-
-	int notifyStructurePlaced(PlayerCreature* player);
-
-	bool checkRequisitesForPlacement(PlayerCreature* player);
-
-	void sendStatusTo(PlayerCreature* player);
-
-	void sendDestroyConfirmTo(PlayerCreature* player);
-
-	void sendDestroyCodeTo(PlayerCreature* player);
-
-	void sendManageMaintenanceTo(PlayerCreature* player);
-
-	void sendChangeNamePromptTo(PlayerCreature* player);
-
-	String getTimeString(unsigned int timestamp);
-
-	unsigned int generateDestroyCode();
-
-	bool isValidDestroyCode(unsigned int code);
-
-	void scheduleMaintenanceExpirationEvent();
-
 	bool isOnAdminList(SceneObject* obj);
 
-	bool isOnAdminList(unsigned long long oid);
-
-	bool isOnEntryList(SceneObject* obj);
+	bool isOnBanList(SceneObject* obj);
 
-	bool isOnEntryList(unsigned long long oid);
+	bool isOnVendorList(SceneObject* obj);
 
-	bool isOnBanList(SceneObject* obj);
+	bool isOnEntryList(SceneObject* obj);
 
-	bool isOnBanList(unsigned long long oid);
+	bool isOnHopperList(SceneObject* obj);
 
 	bool isOwnerOf(SceneObject* obj);
 
-	bool isOwnerOf(unsigned long long oid);
+	void sendChangeNamePromptTo(PlayerCreature* player);
 
-	bool isOnAccessList(SceneObject* obj);
+	void sendStatusTo(PlayerCreature* player);
 
-	bool isOnAccessList(unsigned long long oid);
+	void sendManageMaintenanceTo(PlayerCreature* player);
 
 	void sendPermissionListTo(PlayerCreature* player, const String& listName);
 
-	bool addPermission(PlayerCreature* player, PlayerCreature* targetPlayer, const String& listName);
-
-	bool addPermission(PlayerCreature* player, const String& targetPlayerName, const String& listName);
-
-	bool removePermission(PlayerCreature* player, PlayerCreature* targetPlayer, const String& listName);
-
-	bool removePermission(PlayerCreature* player, const String& targetPlayerName, const String& listName);
-
-	void createVendor(PlayerCreature* player);
-
-	int getRedeedCost();
-
-	unsigned long long getOwnerObjectID();
-
-	unsigned long long getDeedObjectID();
-
-	int getLotSize();
-
-	unsigned int getDestroyCode();
+	void loadTemplateData(SharedObjectTemplate* templateData);
 
-	int getBaseMaintenanceRate();
+	void createChildObjects();
 
-	int getBasePowerRate();
+	int notifyStructurePlaced(PlayerCreature* player);
 
-	int getSurplusMaintenance();
+	bool checkRequisitesForPlacement(PlayerCreature* player);
 
-	int getSurplusPower();
+	String getTimeString(unsigned int timestamp);
 
 	bool isPublicStructure();
 
-	void setOwnerObjectID(unsigned long long objectID);
-
-	void setDeedObjectID(unsigned long long deedID);
-
-	void setLotSize(int lots);
-
-	void setDestroyCode(unsigned int code);
-
-	void setBaseMaintenanceRate(int rate);
-
-	void setBasePowerRate(int rate);
-
-	void setSurplusMaintenance(int surplus);
-
-	void addMaintenance(int add);
-
-	void setSurplusPower(int surplus);
-
-	void addPower(int add);
-
 	void setPublicStructure(bool privacy);
 
 	bool isStructureObject();
 
-	bool isRedeedable();
-
-	int getLength();
-
 	AABBTree* getAABBTree();
 
-	void setLength(int len);
-
-	int getWidth();
+	PlayerStructureComponent* createPlayerStructureComponent(PlayerCreature* owner);
 
-	void setWidth(int wid);
+	PlayerStructureComponent* getPlayerStructureComponent();
 
 	DistributedObjectServant* _getImplementation();
 
@@ -260,33 +140,7 @@
 
 class StructureObjectImplementation : public TangibleObjectImplementation {
 protected:
-	StructureMaintenanceTask* structureMaintenanceTask;
-
-	StructurePermissionList structurePermissionList;
-
-	Time maintenanceExpires;
-
-	Time powerExpires;
-
-	unsigned long long ownerObjectID;
-
-	unsigned long long deedObjectID;
-
-	int lotSize;
-
-	unsigned int destroyCode;
-
-	int baseMaintenanceRate;
-
-	int basePowerRate;
-
-	float surplusMaintenance;
-
-	float surplusPower;
-
-	int length;
-
-	int width;
+	PlayerStructureComponent* playerStructureComponent;
 
 public:
 	StructureObjectImplementation();
@@ -297,119 +151,47 @@
 
 	void finalize();
 
-	void loadTemplateData(SharedObjectTemplate* templateData);
-
-	void createChildObjects();
-
-	virtual int notifyStructurePlaced(PlayerCreature* player);
-
-	virtual bool checkRequisitesForPlacement(PlayerCreature* player);
-
-	void sendStatusTo(PlayerCreature* player);
-
-	void sendDestroyConfirmTo(PlayerCreature* player);
-
-	void sendDestroyCodeTo(PlayerCreature* player);
-
-	void sendManageMaintenanceTo(PlayerCreature* player);
-
-	void sendChangeNamePromptTo(PlayerCreature* player);
-
-	String getTimeString(unsigned int timestamp);
-
-	virtual unsigned int generateDestroyCode();
-
-	bool isValidDestroyCode(unsigned int code);
-
-	void scheduleMaintenanceExpirationEvent();
-
 	bool isOnAdminList(SceneObject* obj);
 
-	bool isOnAdminList(unsigned long long oid);
-
-	bool isOnEntryList(SceneObject* obj);
+	bool isOnBanList(SceneObject* obj);
 
-	bool isOnEntryList(unsigned long long oid);
+	bool isOnVendorList(SceneObject* obj);
 
-	bool isOnBanList(SceneObject* obj);
+	bool isOnEntryList(SceneObject* obj);
 
-	bool isOnBanList(unsigned long long oid);
+	bool isOnHopperList(SceneObject* obj);
 
 	bool isOwnerOf(SceneObject* obj);
 
-	bool isOwnerOf(unsigned long long oid);
+	void sendChangeNamePromptTo(PlayerCreature* player);
 
-	bool isOnAccessList(SceneObject* obj);
+	void sendStatusTo(PlayerCreature* player);
 
-	bool isOnAccessList(unsigned long long oid);
+	void sendManageMaintenanceTo(PlayerCreature* player);
 
 	void sendPermissionListTo(PlayerCreature* player, const String& listName);
 
-	bool addPermission(PlayerCreature* player, PlayerCreature* targetPlayer, const String& listName);
-
-	bool addPermission(PlayerCreature* player, const String& targetPlayerName, const String& listName);
-
-	bool removePermission(PlayerCreature* player, PlayerCreature* targetPlayer, const String& listName);
-
-	bool removePermission(PlayerCreature* player, const String& targetPlayerName, const String& listName);
-
-	void createVendor(PlayerCreature* player);
-
-	int getRedeedCost();
-
-	unsigned long long getOwnerObjectID();
-
-	unsigned long long getDeedObjectID();
-
-	int getLotSize();
-
-	unsigned int getDestroyCode();
+	void loadTemplateData(SharedObjectTemplate* templateData);
 
-	int getBaseMaintenanceRate();
+	void createChildObjects();
 
-	int getBasePowerRate();
+	virtual int notifyStructurePlaced(PlayerCreature* player);
 
-	int getSurplusMaintenance();
+	virtual bool checkRequisitesForPlacement(PlayerCreature* player);
 
-	int getSurplusPower();
+	String getTimeString(unsigned int timestamp);
 
 	virtual bool isPublicStructure();
 
-	void setOwnerObjectID(unsigned long long objectID);
-
-	void setDeedObjectID(unsigned long long deedID);
-
-	void setLotSize(int lots);
-
-	void setDestroyCode(unsigned int code);
-
-	void setBaseMaintenanceRate(int rate);
-
-	void setBasePowerRate(int rate);
-
-	void setSurplusMaintenance(int surplus);
-
-	void addMaintenance(int add);
-
-	void setSurplusPower(int surplus);
-
-	void addPower(int add);
-
 	virtual void setPublicStructure(bool privacy);
 
 	bool isStructureObject();
 
-	bool isRedeedable();
-
-	int getLength();
-
 	AABBTree* getAABBTree();
 
-	void setLength(int len);
-
-	int getWidth();
+	PlayerStructureComponent* createPlayerStructureComponent(PlayerCreature* owner);
 
-	void setWidth(int wid);
+	PlayerStructureComponent* getPlayerStructureComponent();
 
 	StructureObject* _this;
 
@@ -456,124 +238,42 @@
 
 	void finalize();
 
-	void createChildObjects();
-
-	int notifyStructurePlaced(PlayerCreature* player);
-
-	bool checkRequisitesForPlacement(PlayerCreature* player);
-
-	void sendStatusTo(PlayerCreature* player);
-
-	void sendDestroyConfirmTo(PlayerCreature* player);
-
-	void sendDestroyCodeTo(PlayerCreature* player);
-
-	void sendManageMaintenanceTo(PlayerCreature* player);
-
-	void sendChangeNamePromptTo(PlayerCreature* player);
-
-	String getTimeString(unsigned int timestamp);
-
-	unsigned int generateDestroyCode();
-
-	bool isValidDestroyCode(unsigned int code);
-
-	void scheduleMaintenanceExpirationEvent();
-
 	bool isOnAdminList(SceneObject* obj);
 
-	bool isOnAdminList(unsigned long long oid);
-
-	bool isOnEntryList(SceneObject* obj);
+	bool isOnBanList(SceneObject* obj);
 
-	bool isOnEntryList(unsigned long long oid);
+	bool isOnVendorList(SceneObject* obj);
 
-	bool isOnBanList(SceneObject* obj);
+	bool isOnEntryList(SceneObject* obj);
 
-	bool isOnBanList(unsigned long long oid);
+	bool isOnHopperList(SceneObject* obj);
 
 	bool isOwnerOf(SceneObject* obj);
 
-	bool isOwnerOf(unsigned long long oid);
+	void sendChangeNamePromptTo(PlayerCreature* player);
 
-	bool isOnAccessList(SceneObject* obj);
+	void sendStatusTo(PlayerCreature* player);
 
-	bool isOnAccessList(unsigned long long oid);
+	void sendManageMaintenanceTo(PlayerCreature* player);
 
 	void sendPermissionListTo(PlayerCreature* player, const String& listName);
 
-	bool addPermission(PlayerCreature* player, PlayerCreature* targetPlayer, const String& listName);
-
-	bool addPermission(PlayerCreature* player, const String& targetPlayerName, const String& listName);
-
-	bool removePermission(PlayerCreature* player, PlayerCreature* targetPlayer, const String& listName);
-
-	bool removePermission(PlayerCreature* player, const String& targetPlayerName, const String& listName);
-
-	void createVendor(PlayerCreature* player);
-
-	int getRedeedCost();
-
-	unsigned long long getOwnerObjectID();
-
-	unsigned long long getDeedObjectID();
-
-	int getLotSize();
-
-	unsigned int getDestroyCode();
-
-	int getBaseMaintenanceRate();
+	void createChildObjects();
 
-	int getBasePowerRate();
+	int notifyStructurePlaced(PlayerCreature* player);
 
-	int getSurplusMaintenance();
+	bool checkRequisitesForPlacement(PlayerCreature* player);
 
-	int getSurplusPower();
+	String getTimeString(unsigned int timestamp);
 
 	bool isPublicStructure();
 
-	void setOwnerObjectID(unsigned long long objectID);
-
-	void setDeedObjectID(unsigned long long deedID);
-
-	void setLotSize(int lots);
-
-	void setDestroyCode(unsigned int code);
-
-	void setBaseMaintenanceRate(int rate);
-
-	void setBasePowerRate(int rate);
-
-	void setSurplusMaintenance(int surplus);
-
-	void addMaintenance(int add);
-
-	void setSurplusPower(int surplus);
-
-	void addPower(int add);
-
 	void setPublicStructure(bool privacy);
 
 	bool isStructureObject();
 
-	bool isRedeedable();
-
-	int getLength();
-
-	void setLength(int len);
-
-	int getWidth();
-
-	void setWidth(int wid);
-
 protected:
 	String _param1_sendPermissionListTo__PlayerCreature_String_;
-	String _param2_addPermission__PlayerCreature_PlayerCreature_String_;
-	String _param1_addPermission__PlayerCreature_String_String_;
-	String _param2_addPermission__PlayerCreature_String_String_;
-	String _param2_removePermission__PlayerCreature_PlayerCreature_String_;
-	String _param1_removePermission__PlayerCreature_String_String_;
-	String _param2_removePermission__PlayerCreature_String_String_;
 };
 
 class StructureObjectHelper : public DistributedObjectClassHelper, public Singleton<StructureObjectHelper> {
Index: src/server/zone/objects/structure/StructureObject.idl
===================================================================
--- src/server/zone/objects/structure/StructureObject.idl	(revision 2976)
+++ src/server/zone/objects/structure/StructureObject.idl	(working copy)
@@ -44,86 +44,42 @@
 
 package server.zone.objects.structure;
 
-import server.zone.objects.tangible.TangibleObject;
-
-include server.zone.objects.structure.StructurePermissionList;
-import server.zone.objects.structure.events.StructureMaintenanceTask;
-
 import server.zone.objects.scene.SceneObject;
-import server.zone.objects.creature.CreatureObject;
+import server.zone.objects.tangible.TangibleObject;
 import server.zone.objects.player.PlayerCreature;
 import server.zone.templates.SharedObjectTemplate;
-import server.zone.objects.area.ActiveArea;
 import engine.util.u3d.AABBTree;
-import engine.util.u3d.AABBNode;
-import engine.util.u3d.Vector3;
 
-include server.zone.packets.ui.CreateClientPathMessage;
+include server.zone.objects.structure.PlayerStructureComponent;
+include server.zone.objects.structure.StructurePermissionList;
 
 class StructureObject extends TangibleObject {
-	//@dereferenced
-	//protected PlayerStructureComponent playerStructureComponent;
-	
-	protected transient StructureMaintenanceTask structureMaintenanceTask;
-	//protected transient StructurePowerTask structurePowerTask;
-	
-	@dereferenced
-	protected StructurePermissionList structurePermissionList;
-	
-	@dereferenced
-	protected Time maintenanceExpires;
-	
-	@dereferenced
-	protected Time powerExpires;
-	
-	protected unsigned long ownerObjectID;
-	protected unsigned long deedObjectID;
-	
-	protected int lotSize;
-	
-	protected unsigned int destroyCode;
-	
-	protected int baseMaintenanceRate;
-	protected int basePowerRate;
-	
-	protected float surplusMaintenance;
-	protected float surplusPower;
-	
-	protected int length;
-	protected int width;
+	protected PlayerStructureComponent playerStructureComponent;
 	
 	public StructureObject() {
 		Logger.setLoggingName("StructureObject");
 		
 		super.staticObject = false;
 		
-		lotSize = 0;
-		
-		ownerObjectID = 0;
-		
-		deedObjectID = 0;
-		
-		destroyCode = 0;
-		
-		baseMaintenanceRate = 0;
-		
-		basePowerRate = 0;
-		
-		surplusMaintenance = 0;
-		
-		surplusPower = 0;
-
-		length = 0;
-		
-		width = 0;
-		
-		structureMaintenanceTask = null;
+		playerStructureComponent = null;
 	}
 	
 	public native void initializeTransientMembers();
 	
 	public native void finalize();
 	
+	public native boolean isOnAdminList(SceneObject obj);
+	public native boolean isOnBanList(SceneObject obj);
+	public native boolean isOnVendorList(SceneObject obj);
+	public native boolean isOnEntryList(SceneObject obj);
+	public native boolean isOnHopperList(SceneObject obj);
+	public native boolean isOwnerOf(SceneObject obj);
+	
+	public native void sendChangeNamePromptTo(PlayerCreature player);
+	public native void sendStatusTo(PlayerCreature player);
+	public native void sendManageMaintenanceTo(PlayerCreature player);
+	public native void sendPermissionListTo(PlayerCreature player, final string listName);
+	
 	/**
 	 * Reads and sets the template data from a SharedObjectTemplate LuaObject
 	 * @pre { templateData is a valid pointer }
@@ -147,175 +103,13 @@
 	public abstract boolean checkRequisitesForPlacement(PlayerCreature player) {
 		return true;
 	}
-	
-	public native void sendStatusTo(PlayerCreature player);
-	public native void sendDestroyConfirmTo(PlayerCreature player);
-	public native void sendDestroyCodeTo(PlayerCreature player);
-	public native void sendManageMaintenanceTo(PlayerCreature player);
-	public native void sendChangeNamePromptTo(PlayerCreature player);
-	
-	public native string getTimeString(unsigned int timestamp);
-	
-	/**
-	 * Generates and sets a random 6 digit code to be confirmed before allowing a player to destroy a structure.
-	 * @return int The generated 6 digit destroy code.
-	 */
-	public abstract unsigned int generateDestroyCode() {
-		destroyCode = System.random(899999) + 100000;
-		return destroyCode;
-	}
-	
-	public boolean isValidDestroyCode(unsigned int code) {
-		return (destroyCode == code);
-	}
-	
-	public native void scheduleMaintenanceExpirationEvent();
-	
-	/**
-	 * Returns if the object is on the admin list or not for this structure.
-	 * @param obj The object to check for admin permissions on.
-	 * @return boolean True if the object is on the admin list.
-	 */
-	public boolean isOnAdminList(SceneObject obj) {
-		return structurePermissionList.isOnAdminList(obj.getObjectID());
-	}
-	
-	public boolean isOnAdminList(unsigned long oid) {
-		return structurePermissionList.isOnAdminList(oid);
-	}
-	
-	public boolean isOnEntryList(SceneObject obj) {
-		return structurePermissionList.isOnEntryList(obj.getObjectID());
-	}
-	
-	public boolean isOnEntryList(unsigned long oid) {
-		return structurePermissionList.isOnEntryList(oid);
-	}
-	
-	public boolean isOnBanList(SceneObject obj) {
-		return structurePermissionList.isOnBanList(obj.getObjectID());
-	}
-	
-	public boolean isOnBanList(unsigned long oid) {
-		return structurePermissionList.isOnBanList(oid);
-	}
-	
-	public native boolean isOwnerOf(SceneObject obj);
-	public native boolean isOwnerOf(unsigned long oid);
-	
-	public boolean isOnAccessList(SceneObject obj) {
-		//TODO: Vector of objects that have temporary access to the structure.
-		return false;
-	}
-	
-	public boolean isOnAccessList(unsigned long oid) {
-		//TODO: See above.
-		return false;
-	}
 
-	public void sendPermissionListTo(PlayerCreature player, final string listName) {
-		structurePermissionList.sendTo(player, listName);
-	}
-	
-	public native boolean addPermission(PlayerCreature player, PlayerCreature targetPlayer, final string listName);
-	public native boolean addPermission(PlayerCreature player, final string targetPlayerName, final string listName);
-	public native boolean removePermission(PlayerCreature player, PlayerCreature targetPlayer, final string listName);
-	public native boolean removePermission(PlayerCreature player, final string targetPlayerName, final string listName);
+	public native string getTimeString(unsigned int timestamp);
 
-	public native void createVendor(PlayerCreature player);
-	
-	/**
-	 * Returns the cost to redeed this building. The redeed cost is 50 times the hourly maintenance rate.
-	 * @return int The cost to redeed this building.
-	 */
-	public int getRedeedCost() {
-		return (baseMaintenanceRate * 50);
-	}
-	
-	public unsigned long getOwnerObjectID() {
-		return ownerObjectID;
-	}
-	
-	public unsigned long getDeedObjectID() {
-		return deedObjectID;
-	}
-	
-	public int getLotSize() {
-		return lotSize;
-	}
-	
-	public unsigned int getDestroyCode() {
-		return destroyCode;
-	}
-	
-	public int getBaseMaintenanceRate() {
-		return baseMaintenanceRate;
-	}
-	
-	public int getBasePowerRate() {
-		return basePowerRate;
-	}
-	
-	public int getSurplusMaintenance() {
-		return surplusMaintenance;
-	}
-	
-	public int getSurplusPower() {
-		return surplusPower;
-	}
-	
 	public abstract boolean isPublicStructure() {
 		return false;
 	}
-	
-	public void setOwnerObjectID(unsigned long objectID) {
-		//Remove the old owner from permission list.
-		structurePermissionList.removePermission(ownerObjectID, StructurePermissionList.OWNER);
-		
-		//Research: Add them as an administrator?
-		//structurePermissionList.addPermission(ownerObjectID, StructurePermissionList.ADMIN);
-
-		ownerObjectID = objectID;
 
-		structurePermissionList.addPermission(objectID, StructurePermissionList.OWNER);
-	}
-	
-	public void setDeedObjectID(unsigned long deedID) {
-		deedObjectID = deedID;
-	}
-	
-	public void setLotSize(int lots) {
-		lotSize = lots;
-	}
-	
-	public void setDestroyCode(unsigned int code) {
-		destroyCode = code;
-	}
-	
-	public void setBaseMaintenanceRate(int rate) {
-		baseMaintenanceRate = rate;
-	}
-	
-	public void setBasePowerRate(int rate) {
-		basePowerRate = rate;
-	}
-	
-	public void setSurplusMaintenance(int surplus) {
-		surplusMaintenance = surplus;
-	}
-	
-	public void addMaintenance(int add) {
-		surplusMaintenance += add;
-	}
-	
-	public void setSurplusPower(int surplus) {
-		surplusPower = surplus;
-	}
-	
-	public void addPower(int add) {
-		surplusPower += add;
-	}
-	
 	public abstract void setPublicStructure(boolean privacy) {
 		
 	}
@@ -324,27 +118,14 @@
 		return true;
 	}
 	
-	//The + 1 is for a bug with IDL where <= throws an error...
-	public boolean isRedeedable() {
-		return (getRedeedCost() < (surplusMaintenance + 1));
-	}
-	
-	public int getLength() {
-		return length;
-	}
-	
 	@local
 	public native AABBTree getAABBTree();
 	
-	public void setLength(int len) {
-		length = len;
-	}
-	
-	public int getWidth() {
-		return width;
-	}
-	
-	public void setWidth(int wid) {
-		width = wid;
+	@local
+	public native PlayerStructureComponent createPlayerStructureComponent(PlayerCreature owner);
+
+	@local
+	public PlayerStructureComponent getPlayerStructureComponent() {
+		return playerStructureComponent;
 	}
 }
Index: src/server/zone/objects/structure/StructureObjectImplementation.cpp
===================================================================
--- src/server/zone/objects/structure/StructureObjectImplementation.cpp	(revision 2976)
+++ src/server/zone/objects/structure/StructureObjectImplementation.cpp	(working copy)
@@ -9,7 +9,6 @@
 #include "server/zone/ZoneServer.h"
 #include "server/zone/Zone.h"
 #include "server/zone/templates/tangible/SharedStructureObjectTemplate.h"
-#include "server/zone/objects/structure/events/StructureMaintenanceTask.h"
 #include "server/zone/objects/installation/InstallationObject.h"
 #include "server/zone/objects/building/BuildingObject.h"
 #include "server/zone/objects/tangible/sign/SignObject.h"
@@ -226,22 +225,6 @@
 	return str.toString();
 }
 
-
-void StructureObjectImplementation::scheduleMaintenanceExpirationEvent() {
-	float timeRemaining = surplusMaintenance / baseMaintenanceRate / 3600000;
-
-	maintenanceExpires.updateToCurrentTime();
-	maintenanceExpires.addMiliTime(timeRemaining);
-
-	if (structureMaintenanceTask == NULL)
-		structureMaintenanceTask = new StructureMaintenanceTask(_this);
-
-	if (structureMaintenanceTask->isScheduled())
-		structureMaintenanceTask->reschedule();
-	else
-		structureMaintenanceTask->schedule(timeRemaining);
-}
-
 void StructureObjectImplementation::sendStatusTo(PlayerCreature* player) {
 	//TODO: Add in extra status information for administrators.
 	//TODO: This needs some refactoring/cleanup
@@ -309,7 +292,6 @@
 		statusBox->addMenuItem(ssnitems.toString());
 	}
 
-	player->addSuiBox(statusBox);
 	player->sendMessage(statusBox->generateMessage());
 }
 
@@ -348,11 +330,13 @@
 	cond << "@player_structure:redeed_condition \\#32CD32 " << (getMaxCondition() - getConditionDamage()) << "/" << getMaxCondition() << "\\#.";
 
 	ManagedReference<SuiListBox*> destroybox = new SuiListBox(player, SuiWindowType::STRUCTURE_DESTROY_CONFIRM);
+	destroybox->setCallback(new StructureDestroyConfirmSuiCallback(server->getZoneServer()));
 	destroybox->setCancelButton(true, "@no");
 	destroybox->setOkButton(true, "@yes");
 	destroybox->setUsingObject(_this);
 	destroybox->setPromptTitle(full);
 	destroybox->setPromptText(entry.toString());
+
 	destroybox->addMenuItem("@player_structure:can_redeed_alert " + redeed);
 	destroybox->addMenuItem(cond.toString());
 	destroybox->addMenuItem(maint.toString());
@@ -367,8 +351,12 @@
 		return;
 	}
 
-	//Generate a new destroy code.
-	uint32 destroyCode = generateDestroyCode();
+	ManagedReference<StructureDestroySession*> session = player->getActiveSession(SessionFacadeType::STRUCTURE_DESTROY);
+
+	if (session == NULL || session->getStructureObject() != _this)
+		return;
+
+	uint32 destroyCode = session->getDestroyCode();
 
 	String red = "\\#FF6347";
 	String green = "\\#32CD32";
@@ -385,6 +373,7 @@
 	entry << "Code: " << destroyCode;
 
 	SuiInputBox* destroycodebox = new SuiInputBox(player, SuiWindowType::STRUCTURE_DESTROY_CODE, 0);
+	destroycodebox->setCallback(new StructureDestroyCodeSuiCallback(server->getZoneServer()));
 	destroycodebox->setUsingObject(_this);
 	destroycodebox->setPromptTitle("@player_structure:confirm_destruction_t"); //Confirm Structure Deletion
 	destroycodebox->setPromptText(entry.toString());
@@ -407,6 +396,7 @@
 	StringBuffer sstext;
 
 	ManagedReference<SuiTransferBox*> maintenanceBox = new SuiTransferBox(player, SuiWindowType::STRUCTURE_MANAGE_MAINTENANCE);
+	maintenanceBox->setCallback(new StructureManageMaintenanceSuiCallback(server->getZoneServer()));
 	maintenanceBox->setPromptTitle("@player_structure:select_amount");
 	maintenanceBox->setUsingObject(_this);
 
@@ -482,3 +472,115 @@
 	player->addActiveSession(SessionFacadeType::CREATEVENDOR, session);
 
 }
+
+PlayerStructureComponent* StructureObjectImplementation::createPlayerStructureComponent(PlayerCreature* owner) {
+	playerStructureComponent = new PlayerStructureComponent();
+
+	return playerStructureComponent;
+}
+
+bool StructureObjectImplementation::isOnAdminList(SceneObject* obj) {
+	//Staff are always on the admin list.
+	if (obj->isPlayerCreature()) {
+		ManagedReference<PlayerObject*> ghost = obj->getSlottedObject("ghost");
+
+		if (ghost->isPrivileged())
+			return true;
+	}
+
+	if (playerStructureComponent == NULL)
+		return false;
+
+	Reference<StructurePermissionList*> permissionList = playerStructureComponent->getStructurePermissionList();
+	return permissionList->isOnAdminList(obj->getObjectID());
+}
+
+bool StructureObjectImplementation::isOnBanList(SceneObject* obj) {
+	//Staff are never on the ban list.
+	if (obj->isPlayerCreature()) {
+		ManagedReference<PlayerObject*> ghost = obj->getSlottedObject("ghost");
+
+		if (ghost->isPrivileged())
+			return false;
+	}
+
+	if (playerStructureComponent == NULL)
+		return false;
+
+	Reference<StructurePermissionList*> permissionList = playerStructureComponent->getStructurePermissionList();
+	return permissionList->isOnBanList(obj->getObjectID());
+}
+
+bool StructureObjectImplementation::isOnEntryList(SceneObject* obj) {
+	//Staff are always on the entry list
+	if (obj->isPlayerCreature()) {
+		ManagedReference<PlayerObject*> ghost = obj->getSlottedObject("ghost");
+
+		if (ghost->isPrivileged())
+			return true;
+	}
+
+	if (playerStructureComponent == NULL)
+		return false;
+
+	Reference<StructurePermissionList*> permissionList = playerStructureComponent->getStructurePermissionList();
+	return permissionList->isOnEntryList(obj->getObjectID());
+}
+
+bool StructureObjectImplementation::isOnVendorList(SceneObject* obj) {
+	//Staff are always on the vendor list
+	if (obj->isPlayerCreature()) {
+		ManagedReference<PlayerObject*> ghost = obj->getSlottedObject("ghost");
+
+		if (ghost->isPrivileged())
+			return true;
+	}
+
+	if (playerStructureComponent == NULL)
+		return false;
+
+	Reference<StructurePermissionList*> permissionList = playerStructureComponent->getStructurePermissionList();
+	return permissionList->isOnVendorList(obj->getObjectID());
+}
+
+bool StructureObjectImplementation::isOnHopperList(SceneObject* obj) {
+	//Staff are always on the hopper list
+	if (obj->isPlayerCreature()) {
+		ManagedReference<PlayerObject*> ghost = obj->getSlottedObject("ghost");
+
+		if (ghost->isPrivileged())
+			return true;
+	}
+
+	if (playerStructureComponent == NULL)
+		return false;
+
+	Reference<StructurePermissionList*> permissionList = playerStructureComponent->getStructurePermissionList();
+	return permissionList->isOnHopperList(obj->getObjectID());
+}
+
+bool StructureObjectImplementation::isOwnerOf(SceneObject* obj) {
+	//Staff are always flagged as the owner
+	if (obj->isPlayerCreature()) {
+		ManagedReference<PlayerObject*> ghost = obj->getSlottedObject("ghost");
+
+		if (ghost->isPrivileged())
+			return true;
+	}
+
+	if (playerStructureComponent == NULL)
+		return false;
+
+	Reference<StructurePermissionList*> permissionList = playerStructureComponent->getStructurePermissionList();
+	return permissionList->isOwner(obj->getObjectID());
+}
+
+void StructureObjectImplementation::sendPermissionListTo(PlayerCreature player, const String& listName) {
+	if (playerStructureComponent == NULL)
+		return;
+
+	//TODO: Check to make sure they have permission to see the list.
+
+	StructurePermissionList* permissionList = playerStructureComponent->getStructurePermissionList();
+	permissionList->sendTo(player, listName);
+}
Index: src/server/zone/objects/structure/StructurePermissionList.cpp
===================================================================
--- src/server/zone/objects/structure/StructurePermissionList.cpp	(revision 2976)
+++ src/server/zone/objects/structure/StructurePermissionList.cpp	(working copy)
@@ -7,6 +7,7 @@
 
 
 #include "StructurePermissionList.h"
+#include "server/zone/objects/player/PlayerCreature.h"
 #include "server/zone/packets/ui/PermissionListCreateMessage.h"
 #include "server/zone/ZoneServer.h"
 
Index: src/server/zone/objects/structure/StructurePermissionList.h
===================================================================
--- src/server/zone/objects/structure/StructurePermissionList.h	(revision 2976)
+++ src/server/zone/objects/structure/StructurePermissionList.h	(working copy)
@@ -10,7 +10,17 @@
 
 #include "engine/engine.h"
 
-#include "server/zone/objects/player/PlayerCreature.h"
+namespace server {
+namespace zone {
+namespace objects {
+namespace player {
+	class PlayerCreature;
+}
+}
+}
+}
+
+using namespace server::zone::objects::player;
 
 class StructurePermissionList : public VectorMap<uint64, uint8> {
 public:
@@ -64,6 +74,23 @@
 	inline bool isOnHopperList(uint64 playerID) {
 		return (get(playerID) & HOPPERLIST);
 	}
+
+	/**
+	 * Attempts to find the object id of the first entry with the permissions set to owner.
+	 * @return The object id of the owner of the list, or 0 if none is found.
+	 */
+	inline uint64 getOwnerObjectID() {
+		for (int i = 0; i < size(); ++i) {
+			VectorMapEntry<uint64, uint8>* entry = &elementAt(i);
+
+			if (entry == NULL || !(entry->getValue() & OWNER))
+				continue;
+
+			return entry->getKey();
+		}
+
+		return 0;
+	}
 };
 
 #endif /* STRUCTUREPERMISSIONLIST_H_ */
Index: src/server/zone/objects/structure/events/MaintenanceEmptyTask.h
===================================================================
--- src/server/zone/objects/structure/events/MaintenanceEmptyTask.h	(revision 0)
+++ src/server/zone/objects/structure/events/MaintenanceEmptyTask.h	(revision 0)
@@ -0,0 +1,21 @@
+/*
+ * MaintenanceEmptyTask.h
+ *
+ *  Created on: Mar 24, 2011
+ *      Author: crush
+ */
+
+#ifndef MAINTENANCEEMPTYTASK_H_
+#define MAINTENANCEEMPTYTASK_H_
+
+#include "engine/engine.h"
+
+class MaintenanceEmptyTask : public Object {
+public:
+	MaintenanceEmptyTask() : Object() {
+
+	}
+};
+
+
+#endif /* MAINTENANCEEMPTYTASK_H_ */
Index: src/server/zone/objects/tangible/terminal/structure/StructureTerminalImplementation.cpp
===================================================================
--- src/server/zone/objects/tangible/terminal/structure/StructureTerminalImplementation.cpp	(revision 2976)
+++ src/server/zone/objects/tangible/terminal/structure/StructureTerminalImplementation.cpp	(working copy)
@@ -5,18 +5,23 @@
  *      Author: crush
  */
 
-#include "engine/util/u3d/Vector3.h"
+//#include "engine/util/u3d/Vector3.h"
 
 #include "StructureTerminal.h"
+
 #include "server/zone/Zone.h"
+
+#include "server/zone/managers/planet/PlanetManager.h"
+#include "server/zone/managers/structure/StructureManager.h"
+//#include "server/zone/managers/vendor/VendorManager.h"
+
+#include "server/zone/objects/building/BuildingObject.h"
 #include "server/zone/objects/player/PlayerCreature.h"
 #include "server/zone/objects/player/PlayerObject.h"
-#include "server/zone/packets/object/ObjectMenuResponse.h"
+#include "server/zone/objects/scene/SceneObject.h"
 #include "server/zone/objects/structure/StructureObject.h"
-#include "server/zone/objects/building/BuildingObject.h"
 
-#include "server/zone/managers/planet/PlanetManager.h"
-#include "server/zone/managers/structure/StructureManager.h"
+#include "server/zone/packets/object/ObjectMenuResponse.h"
 
 void StructureTerminalImplementation::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player) {
 	if (controlledObject == NULL || !controlledObject->isStructureObject())
@@ -39,6 +44,7 @@
 	menuResponse->addRadialMenuItemToRadialID(118, 50, 3, "@base_player:set_name"); //Set Name
 	menuResponse->addRadialMenuItemToRadialID(118, 127, 3, "@player_structure:management_residence"); //Declare Residence
 	menuResponse->addRadialMenuItemToRadialID(118, 125, 3, "@player_structure:management_privacy"); //Privacy
+
 	if (player->hasSkillBox("crafting_artisan_business_03"))
 		menuResponse->addRadialMenuItemToRadialID(118, 130, 3, "@player_structure:create_vendor"); //Create Vendor - 130
 
@@ -47,6 +53,7 @@
 
 	//Only on guild halls...
 	//menuResponse->addRadialMenuItemToRadialID(118, 200, 3, "@player_structure:withdraw_maintenance"); //Withdraw from Treasury
+
 	//Find lost items
 	menuResponse->addRadialMenuItemToRadialID(118, 201, 3, "@player_structure:delete_all_items"); //Delete all items
 
@@ -93,7 +100,7 @@
 		structureObject->sendPermissionListTo(player, "BAN");
 		break;
 	case 128:
-		structureObject->sendDestroyConfirmTo(player);
+		structureManager->startDestroyStructureSession(player, structureObject);
 		break;
 	case 129:
 		structureObject->sendManageMaintenanceTo(player);
@@ -110,9 +117,9 @@
 	case 50:
 		structureObject->sendChangeNamePromptTo(player);
 		break;
-	case 130:
-		structureObject->createVendor(player);
-		break;
+	//case 130:
+		//VendorManager::instance()->beginCreateVendorSession(player);
+		//break;
 	}
 
 	return 0;
Index: src/server/zone/packets/installation/InstallationObjectMessage3.h
===================================================================
--- src/server/zone/packets/installation/InstallationObjectMessage3.h	(revision 2976)
+++ src/server/zone/packets/installation/InstallationObjectMessage3.h	(working copy)
@@ -45,43 +45,27 @@
 #ifndef INSTALLATIONOBJECTMESSAGE3_H_
 #define INSTALLATIONOBJECTMESSAGE3_H_
 
-#include "../BaseLineMessage.h"
-
-#include "../../objects/installation/InstallationObject.h"
-
-#include "../tangible/TangibleObjectMessage3.h"
+#include "server/zone/objects/installation/InstallationObject.h"
+#include "server/zone/objects/structure/PlayerStructureComponent.h"
+#include "server/zone/packets/tangible/TangibleObjectMessage3.h"
 
 class InstallationObjectMessage3 : public TangibleObjectMessage3 {
 public:
 	InstallationObjectMessage3(InstallationObject* inso)
 			: TangibleObjectMessage3(inso, 0x494E534F, 0x05) {
-		/*insertFloat(1.0); // Complexity
-		insertAscii("installation_n"); // STF FileName
-		insertInt(0); //nothing.
-		insertAscii(inso->getTemplateName()); // STF Template
-		insertUnicode(inso->getCustomName()); // Object Name
-		insertInt(1); // Volume
 
-		String app;
-		inso->getCustomizationString(app);
-		insertAscii(app); // I think - seems to work - but no real options to update, //insertShort(0);
+		Reference<PlayerStructureComponent*> playerStructureComponent = inso->getPlayerStructureComponent();
+		float powerBalance = 0;
+		float powerRate = 0;
 
-		insertInt(0); // ?? List  (Defenders?)
-		insertInt(0); // Update Counter
-		// { insertInt(0); } // ??
-
-		insertInt(0x00000100); // 00 01 00 00; // OptionsBitMask
-		//insertInt(0x00010000); // OptionsBitMask
-		insertInt(0); // Timer (Incap/Prototype)
-
-		insertInt(inso->getConditionDamage());//insertInt(0x03E80000); // max condition ??
-		insertInt(inso->getMaxCondition()); //insertInt(0x00010000); //refer to hardcode below. (trying to replace)
-
-		insertByte(0); // ??*/
+		if (playerStructureComponent != NULL) {
+			powerBalance = 0;
+			powerRate = 0;
+		}
 
 		insertByte(1); // Active Flag
-		insertFloat(inso->getSurplusPower()); // Energy Store
-		insertFloat(inso->getBasePowerRate()); // Energy Rate
+		insertFloat(powerBalance); // Energy Store
+		insertFloat(powerRate); // Energy Rate
 
 		setSize();
 	}
Index: src/server/zone/packets/ui/CreateClientPathMessage.h
===================================================================
--- src/server/zone/packets/ui/CreateClientPathMessage.h	(revision 2976)
+++ src/server/zone/packets/ui/CreateClientPathMessage.h	(working copy)
@@ -8,6 +8,8 @@
 #ifndef CREATECLIENTPATHMESSAGE_H_
 #define CREATECLIENTPATHMESSAGE_H_
 
+#include "engine/engine.h"
+
 class CreateClientPathMessage : public BaseMessage {
 	int coordinateCount;
 public:
