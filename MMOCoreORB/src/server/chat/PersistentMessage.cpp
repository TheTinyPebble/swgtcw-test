/*
 *	server/chat/PersistentMessage.cpp generated by engine3 IDL compiler 0.60
 */

#include "PersistentMessage.h"

#include "server/zone/objects/player/PlayerCreature.h"

/*
 *	PersistentMessageStub
 */

PersistentMessage::PersistentMessage() : ManagedObject(DummyConstructorParameter::instance()) {
	PersistentMessageImplementation* _implementation = new PersistentMessageImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

PersistentMessage::PersistentMessage(DummyConstructorParameter* param) : ManagedObject(param) {
}

PersistentMessage::~PersistentMessage() {
}


void PersistentMessage::sendTo(PlayerCreature* player, bool sendBody) {
	PersistentMessageImplementation* _implementation = (PersistentMessageImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);
		method.addBooleanParameter(sendBody);

		method.executeWithVoidReturn();
	} else
		_implementation->sendTo(player, sendBody);
}

StringIdChatParameterVector* PersistentMessage::getStringIdParameters() {
	PersistentMessageImplementation* _implementation = (PersistentMessageImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getStringIdParameters();
}

WaypointChatParameterVector* PersistentMessage::getWaypointParameters() {
	PersistentMessageImplementation* _implementation = (PersistentMessageImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getWaypointParameters();
}

int PersistentMessage::getMailID() {
	PersistentMessageImplementation* _implementation = (PersistentMessageImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getMailID();
}

unsigned long long PersistentMessage::getObjectID() {
	PersistentMessageImplementation* _implementation = (PersistentMessageImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		return method.executeWithUnsignedLongReturn();
	} else
		return _implementation->getObjectID();
}

String PersistentMessage::getSenderName() {
	PersistentMessageImplementation* _implementation = (PersistentMessageImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		method.executeWithAsciiReturn(_return_getSenderName);
		return _return_getSenderName;
	} else
		return _implementation->getSenderName();
}

unsigned long long PersistentMessage::getReceiverObjectID() {
	PersistentMessageImplementation* _implementation = (PersistentMessageImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		return method.executeWithUnsignedLongReturn();
	} else
		return _implementation->getReceiverObjectID();
}

byte PersistentMessage::getStatus() {
	PersistentMessageImplementation* _implementation = (PersistentMessageImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		return method.executeWithByteReturn();
	} else
		return _implementation->getStatus();
}

int PersistentMessage::getTimeStamp() {
	PersistentMessageImplementation* _implementation = (PersistentMessageImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getTimeStamp();
}

UnicodeString PersistentMessage::getBody() {
	PersistentMessageImplementation* _implementation = (PersistentMessageImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		method.executeWithUnicodeReturn(_return_getBody);
		return _return_getBody;
	} else
		return _implementation->getBody();
}

UnicodeString PersistentMessage::getSubject() {
	PersistentMessageImplementation* _implementation = (PersistentMessageImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		method.executeWithUnicodeReturn(_return_getSubject);
		return _return_getSubject;
	} else
		return _implementation->getSubject();
}

void PersistentMessage::setSenderName(const String& name) {
	PersistentMessageImplementation* _implementation = (PersistentMessageImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		_implementation->setSenderName(name);
}

void PersistentMessage::setReceiverObjectID(unsigned long long oid) {
	PersistentMessageImplementation* _implementation = (PersistentMessageImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addUnsignedLongParameter(oid);

		method.executeWithVoidReturn();
	} else
		_implementation->setReceiverObjectID(oid);
}

void PersistentMessage::setStatus(byte stat) {
	PersistentMessageImplementation* _implementation = (PersistentMessageImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addByteParameter(stat);

		method.executeWithVoidReturn();
	} else
		_implementation->setStatus(stat);
}

void PersistentMessage::setTimeStamp(int stamp) {
	PersistentMessageImplementation* _implementation = (PersistentMessageImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addSignedIntParameter(stamp);

		method.executeWithVoidReturn();
	} else
		_implementation->setTimeStamp(stamp);
}

void PersistentMessage::setBody(const UnicodeString& message) {
	PersistentMessageImplementation* _implementation = (PersistentMessageImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addUnicodeParameter(message);

		method.executeWithVoidReturn();
	} else
		_implementation->setBody(message);
}

void PersistentMessage::setSubject(const UnicodeString& subj) {
	PersistentMessageImplementation* _implementation = (PersistentMessageImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addUnicodeParameter(subj);

		method.executeWithVoidReturn();
	} else
		_implementation->setSubject(subj);
}

bool PersistentMessage::isNew() {
	PersistentMessageImplementation* _implementation = (PersistentMessageImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isNew();
}

bool PersistentMessage::isRead() {
	PersistentMessageImplementation* _implementation = (PersistentMessageImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isRead();
}

bool PersistentMessage::isUnread() {
	PersistentMessageImplementation* _implementation = (PersistentMessageImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isUnread();
}

void PersistentMessage::addStringIdParameter(StringIdChatParameter& param) {
	PersistentMessageImplementation* _implementation = (PersistentMessageImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->addStringIdParameter(param);
}

void PersistentMessage::addWaypointParameter(WaypointChatParameter& param) {
	PersistentMessageImplementation* _implementation = (PersistentMessageImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->addWaypointParameter(param);
}

DistributedObjectServant* PersistentMessage::_getImplementation() {

	_updated = true;
	return _impl;
}

void PersistentMessage::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;}

/*
 *	PersistentMessageImplementation
 */

PersistentMessageImplementation::PersistentMessageImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}


PersistentMessageImplementation::~PersistentMessageImplementation() {
}


void PersistentMessageImplementation::finalize() {
}

void PersistentMessageImplementation::_initializeImplementation() {
	_setClassHelper(PersistentMessageHelper::instance());

	_serializationHelperMethod();
}

void PersistentMessageImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (PersistentMessage*) stub;
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* PersistentMessageImplementation::_getStub() {
	return _this;
}

PersistentMessageImplementation::operator const PersistentMessage*() {
	return _this;
}

void PersistentMessageImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void PersistentMessageImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void PersistentMessageImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void PersistentMessageImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void PersistentMessageImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void PersistentMessageImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void PersistentMessageImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void PersistentMessageImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("PersistentMessage");

	addSerializableVariable("senderName", &senderName);
	addSerializableVariable("subject", &subject);
	addSerializableVariable("body", &body);
	addSerializableVariable("timeStamp", &timeStamp);
	addSerializableVariable("status", &status);
	addSerializableVariable("receiverObjectID", &receiverObjectID);
	addSerializableVariable("stringIdParameters", &stringIdParameters);
	addSerializableVariable("waypointParameters", &waypointParameters);
}

PersistentMessageImplementation::PersistentMessageImplementation() {
	_initializeImplementation();
	// server/chat/PersistentMessage.idl(76):  		timeStamp = System.getTime();
	timeStamp = System::getTime();
	// server/chat/PersistentMessage.idl(77):  		status = NEW;
	status = NEW;
	// server/chat/PersistentMessage.idl(79):  		receiverObjectID = 0;
	receiverObjectID = 0;
}

StringIdChatParameterVector* PersistentMessageImplementation::getStringIdParameters() {
	// server/chat/PersistentMessage.idl(86):  		return stringIdParameters;
	return (&stringIdParameters);
}

WaypointChatParameterVector* PersistentMessageImplementation::getWaypointParameters() {
	// server/chat/PersistentMessage.idl(91):  		return waypointParameters;
	return (&waypointParameters);
}

String PersistentMessageImplementation::getSenderName() {
	// server/chat/PersistentMessage.idl(99):  		return senderName;
	return senderName;
}

unsigned long long PersistentMessageImplementation::getReceiverObjectID() {
	// server/chat/PersistentMessage.idl(103):  		return receiverObjectID;
	return receiverObjectID;
}

byte PersistentMessageImplementation::getStatus() {
	// server/chat/PersistentMessage.idl(107):  		return status;
	return status;
}

int PersistentMessageImplementation::getTimeStamp() {
	// server/chat/PersistentMessage.idl(111):  		return timeStamp;
	return timeStamp;
}

UnicodeString PersistentMessageImplementation::getBody() {
	// server/chat/PersistentMessage.idl(115):  		return body;
	return body;
}

UnicodeString PersistentMessageImplementation::getSubject() {
	// server/chat/PersistentMessage.idl(119):  		return subject;
	return subject;
}

void PersistentMessageImplementation::setSenderName(const String& name) {
	// server/chat/PersistentMessage.idl(123):  		senderName = name;
	senderName = name;
}

void PersistentMessageImplementation::setReceiverObjectID(unsigned long long oid) {
	// server/chat/PersistentMessage.idl(127):  		receiverObjectID = oid;
	receiverObjectID = oid;
}

void PersistentMessageImplementation::setStatus(byte stat) {
	// server/chat/PersistentMessage.idl(131):  		status = stat;
	status = stat;
}

void PersistentMessageImplementation::setTimeStamp(int stamp) {
	// server/chat/PersistentMessage.idl(135):  		timeStamp = stamp;
	timeStamp = stamp;
}

void PersistentMessageImplementation::setBody(const UnicodeString& message) {
	// server/chat/PersistentMessage.idl(139):  		body = message;
	body = message;
}

void PersistentMessageImplementation::setSubject(const UnicodeString& subj) {
	// server/chat/PersistentMessage.idl(143):  		subject = subj;
	subject = subj;
}

bool PersistentMessageImplementation::isNew() {
	// server/chat/PersistentMessage.idl(147):  		return status == NEW;
	return status == NEW;
}

bool PersistentMessageImplementation::isRead() {
	// server/chat/PersistentMessage.idl(151):  		return status == READ;
	return status == READ;
}

bool PersistentMessageImplementation::isUnread() {
	// server/chat/PersistentMessage.idl(155):  		return status == UNREAD;
	return status == UNREAD;
}

/*
 *	PersistentMessageAdapter
 */

PersistentMessageAdapter::PersistentMessageAdapter(PersistentMessageImplementation* obj) : ManagedObjectAdapter(obj) {
}

Packet* PersistentMessageAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		sendTo((PlayerCreature*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 7:
		resp->insertSignedInt(getMailID());
		break;
	case 8:
		resp->insertLong(getObjectID());
		break;
	case 9:
		resp->insertAscii(getSenderName());
		break;
	case 10:
		resp->insertLong(getReceiverObjectID());
		break;
	case 11:
		resp->insertByte(getStatus());
		break;
	case 12:
		resp->insertSignedInt(getTimeStamp());
		break;
	case 13:
		resp->insertUnicode(getBody());
		break;
	case 14:
		resp->insertUnicode(getSubject());
		break;
	case 15:
		setSenderName(inv->getAsciiParameter(_param0_setSenderName__String_));
		break;
	case 16:
		setReceiverObjectID(inv->getUnsignedLongParameter());
		break;
	case 17:
		setStatus(inv->getByteParameter());
		break;
	case 18:
		setTimeStamp(inv->getSignedIntParameter());
		break;
	case 19:
		setBody(inv->getUnicodeParameter(_param0_setBody__UnicodeString_));
		break;
	case 20:
		setSubject(inv->getUnicodeParameter(_param0_setSubject__UnicodeString_));
		break;
	case 21:
		resp->insertBoolean(isNew());
		break;
	case 22:
		resp->insertBoolean(isRead());
		break;
	case 23:
		resp->insertBoolean(isUnread());
		break;
	default:
		return NULL;
	}

	return resp;
}

void PersistentMessageAdapter::sendTo(PlayerCreature* player, bool sendBody) {
	((PersistentMessageImplementation*) impl)->sendTo(player, sendBody);
}

int PersistentMessageAdapter::getMailID() {
	return ((PersistentMessageImplementation*) impl)->getMailID();
}

unsigned long long PersistentMessageAdapter::getObjectID() {
	return ((PersistentMessageImplementation*) impl)->getObjectID();
}

String PersistentMessageAdapter::getSenderName() {
	return ((PersistentMessageImplementation*) impl)->getSenderName();
}

unsigned long long PersistentMessageAdapter::getReceiverObjectID() {
	return ((PersistentMessageImplementation*) impl)->getReceiverObjectID();
}

byte PersistentMessageAdapter::getStatus() {
	return ((PersistentMessageImplementation*) impl)->getStatus();
}

int PersistentMessageAdapter::getTimeStamp() {
	return ((PersistentMessageImplementation*) impl)->getTimeStamp();
}

UnicodeString PersistentMessageAdapter::getBody() {
	return ((PersistentMessageImplementation*) impl)->getBody();
}

UnicodeString PersistentMessageAdapter::getSubject() {
	return ((PersistentMessageImplementation*) impl)->getSubject();
}

void PersistentMessageAdapter::setSenderName(const String& name) {
	((PersistentMessageImplementation*) impl)->setSenderName(name);
}

void PersistentMessageAdapter::setReceiverObjectID(unsigned long long oid) {
	((PersistentMessageImplementation*) impl)->setReceiverObjectID(oid);
}

void PersistentMessageAdapter::setStatus(byte stat) {
	((PersistentMessageImplementation*) impl)->setStatus(stat);
}

void PersistentMessageAdapter::setTimeStamp(int stamp) {
	((PersistentMessageImplementation*) impl)->setTimeStamp(stamp);
}

void PersistentMessageAdapter::setBody(const UnicodeString& message) {
	((PersistentMessageImplementation*) impl)->setBody(message);
}

void PersistentMessageAdapter::setSubject(const UnicodeString& subj) {
	((PersistentMessageImplementation*) impl)->setSubject(subj);
}

bool PersistentMessageAdapter::isNew() {
	return ((PersistentMessageImplementation*) impl)->isNew();
}

bool PersistentMessageAdapter::isRead() {
	return ((PersistentMessageImplementation*) impl)->isRead();
}

bool PersistentMessageAdapter::isUnread() {
	return ((PersistentMessageImplementation*) impl)->isUnread();
}

/*
 *	PersistentMessageHelper
 */

PersistentMessageHelper* PersistentMessageHelper::staticInitializer = PersistentMessageHelper::instance();

PersistentMessageHelper::PersistentMessageHelper() {
	className = "PersistentMessage";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void PersistentMessageHelper::finalizeHelper() {
	PersistentMessageHelper::finalize();
}

DistributedObject* PersistentMessageHelper::instantiateObject() {
	return new PersistentMessage(DummyConstructorParameter::instance());
}

DistributedObjectServant* PersistentMessageHelper::instantiateServant() {
	return new PersistentMessageImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* PersistentMessageHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new PersistentMessageAdapter((PersistentMessageImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

