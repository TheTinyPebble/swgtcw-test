/*
 *	server/chat/ChatMessage.h generated by engine3 IDL compiler 0.60
 */

#ifndef CHATMESSAGE_H_
#define CHATMESSAGE_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

#include "server/chat/ChatParameter.h"

#include "server/chat/StringIdChatParameterVector.h"

#include "server/chat/WaypointChatParameter.h"

#include "server/chat/WaypointChatParameterVector.h"

#include "server/chat/StringIdChatParameter.h"

#include "engine/core/ManagedObject.h"

#include "system/lang/System.h"

#include "system/util/Vector.h"

namespace server {
namespace chat {

class ChatMessage : public ManagedObject {
public:
	ChatMessage();

	void setString(const String& msg);

	String toString();

	DistributedObjectServant* _getImplementation();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	ChatMessage(DummyConstructorParameter* param);

	virtual ~ChatMessage();

	friend class ChatMessageHelper;
};

} // namespace chat
} // namespace server

using namespace server::chat;

namespace server {
namespace chat {

class ChatMessageImplementation : public ManagedObjectImplementation {
protected:
	String message;

public:
	ChatMessageImplementation();

	ChatMessageImplementation(DummyConstructorParameter* param);

	void setString(const String& msg);

	String toString();

	WeakReference<ChatMessage*> _this;

	operator const ChatMessage*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~ChatMessageImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const String& name);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class ChatMessage;
};

class ChatMessageAdapter : public ManagedObjectAdapter {
public:
	ChatMessageAdapter(ChatMessage* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void setString(const String& msg);

	String toString();

};

class ChatMessageHelper : public DistributedObjectClassHelper, public Singleton<ChatMessageHelper> {
	static ChatMessageHelper* staticInitializer;

public:
	ChatMessageHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<ChatMessageHelper>;
};

} // namespace chat
} // namespace server

using namespace server::chat;

#endif /*CHATMESSAGE_H_*/
