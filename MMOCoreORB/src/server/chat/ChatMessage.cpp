/*
 *	server/chat/ChatMessage.cpp generated by engine3 IDL compiler 0.60
 */

#include "ChatMessage.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	ChatMessageStub
 */

enum {RPC_SETSTRING__STRING_ = 6,RPC_TOSTRING__};

ChatMessage::ChatMessage() : ManagedObject(DummyConstructorParameter::instance()) {
	ChatMessageImplementation* _implementation = new ChatMessageImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("ChatMessage");
}

ChatMessage::ChatMessage(DummyConstructorParameter* param) : ManagedObject(param) {
	_setClassName("ChatMessage");
}

ChatMessage::~ChatMessage() {
}



void ChatMessage::setString(const String& msg) {
	ChatMessageImplementation* _implementation = static_cast<ChatMessageImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSTRING__STRING_);
		method.addAsciiParameter(msg);

		method.executeWithVoidReturn();
	} else
		_implementation->setString(msg);
}

String ChatMessage::toString() {
	ChatMessageImplementation* _implementation = static_cast<ChatMessageImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_TOSTRING__);

		String _return_toString;
		method.executeWithAsciiReturn(_return_toString);
		return _return_toString;
	} else
		return _implementation->toString();
}

DistributedObjectServant* ChatMessage::_getImplementation() {

	_updated = true;
	return _impl;
}

void ChatMessage::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	ChatMessageImplementation
 */

ChatMessageImplementation::ChatMessageImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}


ChatMessageImplementation::~ChatMessageImplementation() {
}


void ChatMessageImplementation::finalize() {
}

void ChatMessageImplementation::_initializeImplementation() {
	_setClassHelper(ChatMessageHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void ChatMessageImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<ChatMessage*>(stub);
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* ChatMessageImplementation::_getStub() {
	return _this;
}

ChatMessageImplementation::operator const ChatMessage*() {
	return _this;
}

void ChatMessageImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void ChatMessageImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void ChatMessageImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void ChatMessageImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void ChatMessageImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void ChatMessageImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void ChatMessageImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void ChatMessageImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("ChatMessage");

}

void ChatMessageImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(ChatMessageImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ChatMessageImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ManagedObjectImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "ChatMessage.message") {
		TypeInfo<String >::parseFromBinaryStream(&message, stream);
		return true;
	}


	return false;
}

void ChatMessageImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ChatMessageImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ChatMessageImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedObjectImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;
	_name = "ChatMessage.message";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&message, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 1;
}

ChatMessageImplementation::ChatMessageImplementation() {
	_initializeImplementation();
	// server/chat/ChatMessage.idl():  		message = "";
	message = "";
}

void ChatMessageImplementation::setString(const String& msg) {
	// server/chat/ChatMessage.idl():  		message = msg;
	message = msg;
}

String ChatMessageImplementation::toString() {
	// server/chat/ChatMessage.idl():  		return message;
	return message;
}

/*
 *	ChatMessageAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


ChatMessageAdapter::ChatMessageAdapter(ChatMessage* obj) : ManagedObjectAdapter(obj) {
}

void ChatMessageAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_SETSTRING__STRING_:
		{
			String msg; 
			setString(inv->getAsciiParameter(msg));
		}
		break;
	case RPC_TOSTRING__:
		{
			resp->insertAscii(toString());
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void ChatMessageAdapter::setString(const String& msg) {
	(static_cast<ChatMessage*>(stub))->setString(msg);
}

String ChatMessageAdapter::toString() {
	return (static_cast<ChatMessage*>(stub))->toString();
}

/*
 *	ChatMessageHelper
 */

ChatMessageHelper* ChatMessageHelper::staticInitializer = ChatMessageHelper::instance();

ChatMessageHelper::ChatMessageHelper() {
	className = "ChatMessage";

	Core::getObjectBroker()->registerClass(className, this);
}

void ChatMessageHelper::finalizeHelper() {
	ChatMessageHelper::finalize();
}

DistributedObject* ChatMessageHelper::instantiateObject() {
	return new ChatMessage(DummyConstructorParameter::instance());
}

DistributedObjectServant* ChatMessageHelper::instantiateServant() {
	return new ChatMessageImplementation();
}

DistributedObjectAdapter* ChatMessageHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ChatMessageAdapter(static_cast<ChatMessage*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

