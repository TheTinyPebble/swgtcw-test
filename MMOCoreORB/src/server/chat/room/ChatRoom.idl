/*
Copyright (C) 2007 <SWGEmu>
 
This File is part of Core3.
 
This program is free software; you can redistribute 
it and/or modify it under the terms of the GNU Lesser 
General Public License as published by the Free Software
Foundation; either version 2 of the License, 
or (at your option) any later version.
 
This program is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
See the GNU Lesser General Public License for
more details.
 
You should have received a copy of the GNU Lesser General 
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 
Linking Engine3 statically or dynamically with other modules 
is making a combined work based on Engine3. 
Thus, the terms and conditions of the GNU Lesser General Public License 
cover the whole combination.
 
In addition, as a special exception, the copyright holders of Engine3 
give you permission to combine Engine3 program with free software 
programs or libraries that are released under the GNU LGPL and with 
code included in the standard release of Core3 under the GNU LGPL 
license (or modified versions of such code, with unchanged license). 
You may copy and distribute such a system following the terms of the 
GNU LGPL for Engine3 and the licenses of the other code concerned, 
provided that you include the source code of that other code when 
and as the GNU LGPL requires distribution of source code.
 
Note that people who make modified versions of Engine3 are not obligated 
to grant this special exception for their modified versions; 
it is their choice whether to do so. The GNU Lesser General Public License 
gives permission to release a modified version without this exception; 
this exception also makes it possible to release a modified version 
which carries forward this exception.
*/

package server.chat.room;

import engine.core.ManagedObject;
import system.util.VectorMap;
import system.util.Vector;
import engine.service.proto.BaseMessage;
import server.zone.ZoneServer;
import server.zone.objects.player.PlayerCreature;


class ChatRoom extends ManagedObject {
	protected ZoneServer server;

	protected string name;
	protected string fullPath;

	protected string owner;
	protected string creator;

	protected unicode title;
	protected unsigned long roomID;

	protected ChatRoom parent;

	@dereferenced 
	protected VectorMap<string, PlayerCreature> playerList;
	
	@dereferenced 
	protected VectorMap<string, ChatRoom> subRooms;

	protected boolean isPublicRoom;
	
	public ChatRoom(ZoneServer serv, final string roomName, unsigned long channelId) {
		server = serv;

		name = roomName;
		roomID = channelId;

		owner = "system";
		creator = "system";
		title = "";
		fullPath = roomName;

		parent = null;

		isPublicRoom = true;

		subRooms.setNullValue(null);
		subRooms.setNoDuplicateInsertPlan();

		playerList.setNoDuplicateInsertPlan();
		playerList.setNullValue(null);
	}
	
	public ChatRoom(ZoneServer serv, ChatRoom par, final string roomName, unsigned long channelId) {
		server = serv;

		name = roomName;
		fullPath = par.getFullPath() + "." + roomName;

		roomID = channelId;

		owner = "system";
		creator = "system";
		title = "";

		parent = par;

		isPublicRoom = true;

		subRooms.setNullValue(null);
		subRooms.setNoDuplicateInsertPlan();

		playerList.setNoDuplicateInsertPlan();
		playerList.setNullValue(null);
	}
	
	public native void sendTo(PlayerCreature player);
	public native void sendDestroyTo(PlayerCreature player);

	public synchronized void addSubRoom(ChatRoom channel) {
		subRooms.put(channel.getName(), channel);
	}

	public synchronized void removeSubRoom(ChatRoom channel) {
		subRooms.drop(channel.getName());
	}

	public synchronized ChatRoom getSubRoom(int i) {
		return subRooms.get(i);
	}
	
	public synchronized ChatRoom getSubRoom(final string name) {
		return subRooms.get(name);
	}

	public native void addPlayer(PlayerCreature player, boolean doLock = true);
	public native void removePlayer(PlayerCreature player, boolean doLock = true);
	public native void removePlayer(final string player);

	public synchronized void broadcastMessage(BaseMessage msg) {
		for (int i = 0; i < playerList.size(); ++i) {
			PlayerCreature player = playerList.get(i);
			player.sendMessage(msg.clone());
		}

		msg.finalize();
	}
	
	@local 
	public synchronized void broadcastMessages(Vector<BaseMessage> messages) {
		for (int i = 0; i < playerList.size(); ++i) {
			PlayerCreature player = playerList.get(i);

			for (int j = 0; j < messages.size(); ++j) {
				BaseMessage msg = messages.get(j);
				player.sendMessage(msg.clone());
			}
		}

		for (int j = 0; j < messages.size(); ++j) {
			BaseMessage msg = messages.get(j);
			msg.finalize();
		}

		messages.removeAll();
	}

	public synchronized boolean hasPlayer(PlayerCreature player) {
		return playerList.contains(player.getFirstName());
	}
	
	public synchronized boolean hasPlayer(final string name) {
		return playerList.contains(name);
	}

	public native void removeAllPlayers();
	
	public native void deploy();

	public void setPrivate() {
		isPublicRoom = false;
	}

	public void setPublic() {
		isPublicRoom = true;
	}

	public boolean isPublic() {
		return isPublicRoom == true;
	}

	public boolean isPrivate() {
		return isPublicRoom == false;
	}

	public PlayerCreature getPlayer(int idx) {
		return playerList.get(idx);
	}

	public int getPlayerSize() {
		return playerList.size();
	}

	public void setName(final string Name) {
		name = Name;
	}

	public string getName() {
		return name;
	}

	public string getFullPath() {
		return fullPath;
	}

	public string getOwner() {
		return owner;
	}

	public string getCreator() {
		return creator;
	}

	public unicode getTitle() {
		return title;
	}

	public native string getServerName();

	public void setOwner(final string Owner) {
		owner = Owner;
	}

	public void setCreator(final string Creator) {
		creator = Creator;
	}

	public void setTitle(final string Title) {
		title = Title;
	}

	public unsigned int getRoomID() {
		return roomID;
	}

	public int getSubRoomsSize() {
		return subRooms.size();
	}

	public ChatRoom getParent() {
		return parent;
	}

	public int compareTo(ChatRoom obj) {
		if (roomID < obj.getRoomID())
			return 1;
		else if (roomID > obj.getRoomID())
			return -1;
		else
			return 0;
	}
}