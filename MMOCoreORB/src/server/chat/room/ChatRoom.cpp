/*
 *	server/chat/room/ChatRoom.cpp generated by engine3 IDL compiler 0.60
 */

#include "ChatRoom.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/objects/player/PlayerCreature.h"

/*
 *	ChatRoomStub
 */

ChatRoom::ChatRoom(ZoneServer* serv, const String& roomName, unsigned long long channelId) : ManagedObject(DummyConstructorParameter::instance()) {
	_impl = new ChatRoomImplementation(serv, roomName, channelId);
	_impl->_setStub(this);
}

ChatRoom::ChatRoom(ZoneServer* serv, ChatRoom* par, const String& roomName, unsigned long long channelId) : ManagedObject(DummyConstructorParameter::instance()) {
	_impl = new ChatRoomImplementation(serv, par, roomName, channelId);
	_impl->_setStub(this);
}

ChatRoom::ChatRoom(DummyConstructorParameter* param) : ManagedObject(param) {
}

ChatRoom::~ChatRoom() {
}

void ChatRoom::sendTo(PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _impl)->sendTo(player);
}

void ChatRoom::sendDestroyTo(PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _impl)->sendDestroyTo(player);
}

void ChatRoom::addSubRoom(ChatRoom* channel) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(channel);

		method.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _impl)->addSubRoom(channel);
}

void ChatRoom::removeSubRoom(ChatRoom* channel) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(channel);

		method.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _impl)->removeSubRoom(channel);
}

ChatRoom* ChatRoom::getSubRoom(int i) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addSignedIntParameter(i);

		return (ChatRoom*) method.executeWithObjectReturn();
	} else
		return ((ChatRoomImplementation*) _impl)->getSubRoom(i);
}

ChatRoom* ChatRoom::getSubRoom(const String& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addAsciiParameter(name);

		return (ChatRoom*) method.executeWithObjectReturn();
	} else
		return ((ChatRoomImplementation*) _impl)->getSubRoom(name);
}

void ChatRoom::addPlayer(PlayerCreature* player, bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addObjectParameter(player);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _impl)->addPlayer(player, doLock);
}

void ChatRoom::removePlayer(PlayerCreature* player, bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addObjectParameter(player);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _impl)->removePlayer(player, doLock);
}

void ChatRoom::removePlayer(const String& player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addAsciiParameter(player);

		method.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _impl)->removePlayer(player);
}

void ChatRoom::broadcastMessage(BaseMessage* msg) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addObjectParameter(msg);

		method.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _impl)->broadcastMessage(msg);
}

void ChatRoom::broadcastMessages(Vector<BaseMessage*>* messages) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((ChatRoomImplementation*) _impl)->broadcastMessages(messages);
}

bool ChatRoom::hasPlayer(PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return ((ChatRoomImplementation*) _impl)->hasPlayer(player);
}

bool ChatRoom::hasPlayer(const String& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addAsciiParameter(name);

		return method.executeWithBooleanReturn();
	} else
		return ((ChatRoomImplementation*) _impl)->hasPlayer(name);
}

void ChatRoom::removeAllPlayers() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		method.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _impl)->removeAllPlayers();
}

void ChatRoom::deploy() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);

		method.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _impl)->deploy();
}

void ChatRoom::setPrivate() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);

		method.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _impl)->setPrivate();
}

void ChatRoom::setPublic() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);

		method.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _impl)->setPublic();
}

bool ChatRoom::isPublic() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);

		return method.executeWithBooleanReturn();
	} else
		return ((ChatRoomImplementation*) _impl)->isPublic();
}

bool ChatRoom::isPrivate() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);

		return method.executeWithBooleanReturn();
	} else
		return ((ChatRoomImplementation*) _impl)->isPrivate();
}

PlayerCreature* ChatRoom::getPlayer(int idx) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);
		method.addSignedIntParameter(idx);

		return (PlayerCreature*) method.executeWithObjectReturn();
	} else
		return ((ChatRoomImplementation*) _impl)->getPlayer(idx);
}

int ChatRoom::getPlayerSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);

		return method.executeWithSignedIntReturn();
	} else
		return ((ChatRoomImplementation*) _impl)->getPlayerSize();
}

void ChatRoom::setName(const String& Name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);
		method.addAsciiParameter(Name);

		method.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _impl)->setName(Name);
}

String ChatRoom::getName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);

		method.executeWithAsciiReturn(_return_getName);
		return _return_getName;
	} else
		return ((ChatRoomImplementation*) _impl)->getName();
}

String ChatRoom::getFullPath() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);

		method.executeWithAsciiReturn(_return_getFullPath);
		return _return_getFullPath;
	} else
		return ((ChatRoomImplementation*) _impl)->getFullPath();
}

String ChatRoom::getOwner() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);

		method.executeWithAsciiReturn(_return_getOwner);
		return _return_getOwner;
	} else
		return ((ChatRoomImplementation*) _impl)->getOwner();
}

String ChatRoom::getCreator() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);

		method.executeWithAsciiReturn(_return_getCreator);
		return _return_getCreator;
	} else
		return ((ChatRoomImplementation*) _impl)->getCreator();
}

UnicodeString ChatRoom::getTitle() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);

		method.executeWithUnicodeReturn(_return_getTitle);
		return _return_getTitle;
	} else
		return ((ChatRoomImplementation*) _impl)->getTitle();
}

String ChatRoom::getServerName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);

		method.executeWithAsciiReturn(_return_getServerName);
		return _return_getServerName;
	} else
		return ((ChatRoomImplementation*) _impl)->getServerName();
}

void ChatRoom::setOwner(const String& Owner) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);
		method.addAsciiParameter(Owner);

		method.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _impl)->setOwner(Owner);
}

void ChatRoom::setCreator(const String& Creator) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);
		method.addAsciiParameter(Creator);

		method.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _impl)->setCreator(Creator);
}

void ChatRoom::setTitle(const String& Title) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);
		method.addAsciiParameter(Title);

		method.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _impl)->setTitle(Title);
}

unsigned int ChatRoom::getRoomID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 36);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((ChatRoomImplementation*) _impl)->getRoomID();
}

int ChatRoom::getSubRoomsSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 37);

		return method.executeWithSignedIntReturn();
	} else
		return ((ChatRoomImplementation*) _impl)->getSubRoomsSize();
}

ChatRoom* ChatRoom::getParent() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 38);

		return (ChatRoom*) method.executeWithObjectReturn();
	} else
		return ((ChatRoomImplementation*) _impl)->getParent();
}

int ChatRoom::compareTo(ChatRoom* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 39);
		method.addObjectParameter(obj);

		return method.executeWithSignedIntReturn();
	} else
		return ((ChatRoomImplementation*) _impl)->compareTo(obj);
}

/*
 *	ChatRoomImplementation
 */

ChatRoomImplementation::ChatRoomImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}

ChatRoomImplementation::~ChatRoomImplementation() {
}

void ChatRoomImplementation::_initializeImplementation() {
	_setClassHelper(ChatRoomHelper::instance());

	_serializationHelperMethod();
}

void ChatRoomImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (ChatRoom*) stub;
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* ChatRoomImplementation::_getStub() {
	return _this;
}

ChatRoomImplementation::operator const ChatRoom*() {
	return _this;
}

void ChatRoomImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void ChatRoomImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void ChatRoomImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void ChatRoomImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void ChatRoomImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void ChatRoomImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void ChatRoomImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void ChatRoomImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("ChatRoom");

	addSerializableVariable("server", &server);
	addSerializableVariable("name", &name);
	addSerializableVariable("fullPath", &fullPath);
	addSerializableVariable("owner", &owner);
	addSerializableVariable("creator", &creator);
	addSerializableVariable("title", &title);
	addSerializableVariable("roomID", &roomID);
	addSerializableVariable("parent", &parent);
	addSerializableVariable("playerList", &playerList);
	addSerializableVariable("subRooms", &subRooms);
	addSerializableVariable("isPublicRoom", &isPublicRoom);
}

ChatRoomImplementation::ChatRoomImplementation(ZoneServer* serv, const String& roomName, unsigned long long channelId) {
	_initializeImplementation();
	// server/chat/room/ChatRoom.idl(78):  server = serv;
	server = serv;
	// server/chat/room/ChatRoom.idl(80):  name = roomName;
	name = roomName;
	// server/chat/room/ChatRoom.idl(81):  roomID = channelId;
	roomID = channelId;
	// server/chat/room/ChatRoom.idl(83):  owner = "system";
	owner = "system";
	// server/chat/room/ChatRoom.idl(84):  creator = "system";
	creator = "system";
	// server/chat/room/ChatRoom.idl(85):  title = "";
	title = "";
	// server/chat/room/ChatRoom.idl(86):  fullPath = roomName;
	fullPath = roomName;
	// server/chat/room/ChatRoom.idl(88):  parent = null;
	parent = NULL;
	// server/chat/room/ChatRoom.idl(90):  isPublicRoom = true;
	isPublicRoom = true;
	// server/chat/room/ChatRoom.idl(92):  subRooms.setNullValue(null);
	(&subRooms)->setNullValue(NULL);
	// server/chat/room/ChatRoom.idl(93):  subRooms.setNoDuplicateInsertPlan();
	(&subRooms)->setNoDuplicateInsertPlan();
	// server/chat/room/ChatRoom.idl(95):  playerList.setNoDuplicateInsertPlan();
	(&playerList)->setNoDuplicateInsertPlan();
	// server/chat/room/ChatRoom.idl(96):  playerList.setNullValue(null);
	(&playerList)->setNullValue(NULL);
}

ChatRoomImplementation::ChatRoomImplementation(ZoneServer* serv, ChatRoom* par, const String& roomName, unsigned long long channelId) {
	_initializeImplementation();
	// server/chat/room/ChatRoom.idl(100):  server = serv;
	server = serv;
	// server/chat/room/ChatRoom.idl(102):  name = roomName;
	name = roomName;
	// server/chat/room/ChatRoom.idl(103):  fullPath = par.getFullPath() + "." + roomName;
	fullPath = par->getFullPath() + "." + roomName;
	// server/chat/room/ChatRoom.idl(105):  roomID = channelId;
	roomID = channelId;
	// server/chat/room/ChatRoom.idl(107):  owner = "system";
	owner = "system";
	// server/chat/room/ChatRoom.idl(108):  creator = "system";
	creator = "system";
	// server/chat/room/ChatRoom.idl(109):  title = "";
	title = "";
	// server/chat/room/ChatRoom.idl(111):  parent = par;
	parent = par;
	// server/chat/room/ChatRoom.idl(113):  isPublicRoom = true;
	isPublicRoom = true;
	// server/chat/room/ChatRoom.idl(115):  subRooms.setNullValue(null);
	(&subRooms)->setNullValue(NULL);
	// server/chat/room/ChatRoom.idl(116):  subRooms.setNoDuplicateInsertPlan();
	(&subRooms)->setNoDuplicateInsertPlan();
	// server/chat/room/ChatRoom.idl(118):  playerList.setNoDuplicateInsertPlan();
	(&playerList)->setNoDuplicateInsertPlan();
	// server/chat/room/ChatRoom.idl(119):  playerList.setNullValue(null);
	(&playerList)->setNullValue(NULL);
}

void ChatRoomImplementation::addSubRoom(ChatRoom* channel) {
	Locker _locker(_this);
	// server/chat/room/ChatRoom.idl(126):  subRooms.put(channel.getName(), channel);
	(&subRooms)->put(channel->getName(), channel);
}

void ChatRoomImplementation::removeSubRoom(ChatRoom* channel) {
	Locker _locker(_this);
	// server/chat/room/ChatRoom.idl(130):  subRooms.drop(channel.getName());
	(&subRooms)->drop(channel->getName());
}

ChatRoom* ChatRoomImplementation::getSubRoom(int i) {
	Locker _locker(_this);
	// server/chat/room/ChatRoom.idl(134):  return subRooms.get(i);
	return (&subRooms)->get(i);
}

ChatRoom* ChatRoomImplementation::getSubRoom(const String& name) {
	Locker _locker(_this);
	// server/chat/room/ChatRoom.idl(138):  return subRooms.get(name);
	return (&subRooms)->get(name);
}

void ChatRoomImplementation::broadcastMessage(BaseMessage* msg) {
	Locker _locker(_this);
	// server/chat/room/ChatRoom.idl(146):  
	for (	// server/chat/room/ChatRoom.idl(146):  for (int i = 0;
	int i = 0;
	i < (&playerList)->size();
 ++i) {
	// server/chat/room/ChatRoom.idl(147):  PlayerCreature player = playerList.get(i);
	PlayerCreature* player = (&playerList)->get(i);
	// server/chat/room/ChatRoom.idl(148):  player.sendMessage(msg.clone());
	player->sendMessage(msg->clone());
}
	// server/chat/room/ChatRoom.idl(151):  msg.finalize();
	msg->finalize();
}

void ChatRoomImplementation::broadcastMessages(Vector<BaseMessage*>* messages) {
	Locker _locker(_this);
	// server/chat/room/ChatRoom.idl(156):  
	for (	// server/chat/room/ChatRoom.idl(156):  for (int i = 0;
	int i = 0;
	i < (&playerList)->size();
 ++i) {
	// server/chat/room/ChatRoom.idl(157):  PlayerCreature player = playerList.get(i);
	PlayerCreature* player = (&playerList)->get(i);
	// server/chat/room/ChatRoom.idl(159):  
	for (	// server/chat/room/ChatRoom.idl(159):  for (int j = 0;
	int j = 0;
	j < messages->size();
 ++j) {
	// server/chat/room/ChatRoom.idl(160):  BaseMessage msg = messages.get(j);
	BaseMessage* msg = messages->get(j);
	// server/chat/room/ChatRoom.idl(161):  player.sendMessage(msg.clone());
	player->sendMessage(msg->clone());
}
}
	// server/chat/room/ChatRoom.idl(165):  
	for (	// server/chat/room/ChatRoom.idl(165):  for (int j = 0;
	int j = 0;
	j < messages->size();
 ++j) {
	// server/chat/room/ChatRoom.idl(166):  BaseMessage msg = messages.get(j);
	BaseMessage* msg = messages->get(j);
	// server/chat/room/ChatRoom.idl(167):  msg.finalize();
	msg->finalize();
}
	// server/chat/room/ChatRoom.idl(170):  messages.removeAll();
	messages->removeAll();
}

bool ChatRoomImplementation::hasPlayer(PlayerCreature* player) {
	Locker _locker(_this);
	// server/chat/room/ChatRoom.idl(174):  return playerList.contains(player.getFirstName());
	return (&playerList)->contains(player->getFirstName());
}

bool ChatRoomImplementation::hasPlayer(const String& name) {
	Locker _locker(_this);
	// server/chat/room/ChatRoom.idl(178):  return playerList.contains(name);
	return (&playerList)->contains(name);
}

void ChatRoomImplementation::setPrivate() {
	// server/chat/room/ChatRoom.idl(186):  isPublicRoom = false;
	isPublicRoom = false;
}

void ChatRoomImplementation::setPublic() {
	// server/chat/room/ChatRoom.idl(190):  isPublicRoom = true;
	isPublicRoom = true;
}

bool ChatRoomImplementation::isPublic() {
	// server/chat/room/ChatRoom.idl(194):  return isPublicRoom == true;
	return isPublicRoom == true;
}

bool ChatRoomImplementation::isPrivate() {
	// server/chat/room/ChatRoom.idl(198):  return isPublicRoom == false;
	return isPublicRoom == false;
}

PlayerCreature* ChatRoomImplementation::getPlayer(int idx) {
	// server/chat/room/ChatRoom.idl(202):  return playerList.get(idx);
	return (&playerList)->get(idx);
}

int ChatRoomImplementation::getPlayerSize() {
	// server/chat/room/ChatRoom.idl(206):  return playerList.size();
	return (&playerList)->size();
}

void ChatRoomImplementation::setName(const String& Name) {
	// server/chat/room/ChatRoom.idl(210):  name = Name;
	name = Name;
}

String ChatRoomImplementation::getName() {
	// server/chat/room/ChatRoom.idl(214):  return name;
	return name;
}

String ChatRoomImplementation::getFullPath() {
	// server/chat/room/ChatRoom.idl(218):  return fullPath;
	return fullPath;
}

String ChatRoomImplementation::getOwner() {
	// server/chat/room/ChatRoom.idl(222):  return owner;
	return owner;
}

String ChatRoomImplementation::getCreator() {
	// server/chat/room/ChatRoom.idl(226):  return creator;
	return creator;
}

UnicodeString ChatRoomImplementation::getTitle() {
	// server/chat/room/ChatRoom.idl(230):  return title;
	return title;
}

void ChatRoomImplementation::setOwner(const String& Owner) {
	// server/chat/room/ChatRoom.idl(236):  owner = Owner;
	owner = Owner;
}

void ChatRoomImplementation::setCreator(const String& Creator) {
	// server/chat/room/ChatRoom.idl(240):  creator = Creator;
	creator = Creator;
}

void ChatRoomImplementation::setTitle(const String& Title) {
	// server/chat/room/ChatRoom.idl(244):  title = Title;
	title = Title;
}

unsigned int ChatRoomImplementation::getRoomID() {
	// server/chat/room/ChatRoom.idl(248):  return roomID;
	return roomID;
}

int ChatRoomImplementation::getSubRoomsSize() {
	// server/chat/room/ChatRoom.idl(252):  return subRooms.size();
	return (&subRooms)->size();
}

ChatRoom* ChatRoomImplementation::getParent() {
	// server/chat/room/ChatRoom.idl(256):  return parent;
	return parent;
}

int ChatRoomImplementation::compareTo(ChatRoom* obj) {
	// server/chat/room/ChatRoom.idl(260):  
	if (roomID < obj->getRoomID())	// server/chat/room/ChatRoom.idl(261):  return 1;
	return 1;

	else 	// server/chat/room/ChatRoom.idl(262):  
	if (roomID > obj->getRoomID())	// server/chat/room/ChatRoom.idl(263):  return -1;
	return -1;

	else 	// server/chat/room/ChatRoom.idl(266):  return 0;
	return 0;
}

/*
 *	ChatRoomAdapter
 */

ChatRoomAdapter::ChatRoomAdapter(ChatRoomImplementation* obj) : ManagedObjectAdapter(obj) {
}

Packet* ChatRoomAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	default:
		return NULL;
	}

	return resp;
}

/*
 *	ChatRoomHelper
 */

ChatRoomHelper* ChatRoomHelper::staticInitializer = ChatRoomHelper::instance();

ChatRoomHelper::ChatRoomHelper() {
	className = "ChatRoom";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void ChatRoomHelper::finalizeHelper() {
	ChatRoomHelper::finalize();
}

DistributedObject* ChatRoomHelper::instantiateObject() {
	return new ChatRoom(DummyConstructorParameter::instance());
}

DistributedObjectServant* ChatRoomHelper::instantiateServant() {
	return new ChatRoomImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ChatRoomHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ChatRoomAdapter((ChatRoomImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

