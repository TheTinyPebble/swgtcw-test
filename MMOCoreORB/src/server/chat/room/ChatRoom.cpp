/*
 *	server/chat/room/ChatRoom.cpp generated by engine3 IDL compiler 0.60
 */

#include "ChatRoom.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

/*
 *	ChatRoomStub
 */

enum {RPC_INIT__ZONESERVER_CHATROOM_STRING_INT_ = 6,RPC_SENDTO__PLAYERCREATURE_,RPC_SENDDESTROYTO__PLAYERCREATURE_,RPC_ADDSUBROOM__CHATROOM_,RPC_REMOVESUBROOM__CHATROOM_,RPC_GETSUBROOM__INT_,RPC_GETSUBROOM__STRING_,RPC_ADDPLAYER__PLAYERCREATURE_BOOL_,RPC_REMOVEPLAYER__PLAYERCREATURE_BOOL_,RPC_REMOVEPLAYER__STRING_,RPC_BROADCASTMESSAGE__BASEMESSAGE_,RPC_HASPLAYER__PLAYERCREATURE_,RPC_HASPLAYER__STRING_,RPC_REMOVEALLPLAYERS__,RPC_SETPRIVATE__,RPC_SETPUBLIC__,RPC_ISPUBLIC__,RPC_ISPRIVATE__,RPC_ISMODERATED__,RPC_SETMODERATED__BOOL_,RPC_GETPLAYER__INT_,RPC_GETPLAYERSIZE__,RPC_SETNAME__STRING_,RPC_GETNAME__,RPC_GETFULLPATH__,RPC_GETOWNER__,RPC_GETCREATOR__,RPC_GETTITLE__,RPC_GETSERVERNAME__,RPC_SETOWNER__STRING_,RPC_SETCREATOR__STRING_,RPC_SETTITLE__STRING_,RPC_SETROOMID__INT_,RPC_GETROOMID__,RPC_GETSUBROOMSSIZE__,RPC_GETPARENT__,RPC_COMPARETO__CHATROOM_};

ChatRoom::ChatRoom() : ManagedObject(DummyConstructorParameter::instance()) {
	ChatRoomImplementation* _implementation = new ChatRoomImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

ChatRoom::ChatRoom(DummyConstructorParameter* param) : ManagedObject(param) {
}

ChatRoom::~ChatRoom() {
}


void ChatRoom::init(ZoneServer* serv, ChatRoom* par, const String& roomName, unsigned int channelID) {
	ChatRoomImplementation* _implementation = (ChatRoomImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INIT__ZONESERVER_CHATROOM_STRING_INT_);
		method.addObjectParameter(serv);
		method.addObjectParameter(par);
		method.addAsciiParameter(roomName);
		method.addUnsignedIntParameter(channelID);

		method.executeWithVoidReturn();
	} else
		_implementation->init(serv, par, roomName, channelID);
}

void ChatRoom::sendTo(PlayerCreature* player) {
	ChatRoomImplementation* _implementation = (ChatRoomImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDTO__PLAYERCREATURE_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendTo(player);
}

void ChatRoom::sendDestroyTo(PlayerCreature* player) {
	ChatRoomImplementation* _implementation = (ChatRoomImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDDESTROYTO__PLAYERCREATURE_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendDestroyTo(player);
}

void ChatRoom::addSubRoom(ChatRoom* channel) {
	ChatRoomImplementation* _implementation = (ChatRoomImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDSUBROOM__CHATROOM_);
		method.addObjectParameter(channel);

		method.executeWithVoidReturn();
	} else
		_implementation->addSubRoom(channel);
}

void ChatRoom::removeSubRoom(ChatRoom* channel) {
	ChatRoomImplementation* _implementation = (ChatRoomImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVESUBROOM__CHATROOM_);
		method.addObjectParameter(channel);

		method.executeWithVoidReturn();
	} else
		_implementation->removeSubRoom(channel);
}

ChatRoom* ChatRoom::getSubRoom(int i) {
	ChatRoomImplementation* _implementation = (ChatRoomImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSUBROOM__INT_);
		method.addSignedIntParameter(i);

		return (ChatRoom*) method.executeWithObjectReturn();
	} else
		return _implementation->getSubRoom(i);
}

ChatRoom* ChatRoom::getSubRoom(const String& name) {
	ChatRoomImplementation* _implementation = (ChatRoomImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSUBROOM__STRING_);
		method.addAsciiParameter(name);

		return (ChatRoom*) method.executeWithObjectReturn();
	} else
		return _implementation->getSubRoom(name);
}

void ChatRoom::addPlayer(PlayerCreature* player, bool doLock) {
	ChatRoomImplementation* _implementation = (ChatRoomImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDPLAYER__PLAYERCREATURE_BOOL_);
		method.addObjectParameter(player);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		_implementation->addPlayer(player, doLock);
}

void ChatRoom::removePlayer(PlayerCreature* player, bool doLock) {
	ChatRoomImplementation* _implementation = (ChatRoomImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEPLAYER__PLAYERCREATURE_BOOL_);
		method.addObjectParameter(player);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		_implementation->removePlayer(player, doLock);
}

void ChatRoom::removePlayer(const String& player) {
	ChatRoomImplementation* _implementation = (ChatRoomImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEPLAYER__STRING_);
		method.addAsciiParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->removePlayer(player);
}

void ChatRoom::broadcastMessage(BaseMessage* msg) {
	ChatRoomImplementation* _implementation = (ChatRoomImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_BROADCASTMESSAGE__BASEMESSAGE_);
		method.addObjectParameter(msg);

		method.executeWithVoidReturn();
	} else
		_implementation->broadcastMessage(msg);
}

void ChatRoom::broadcastMessages(Vector<BaseMessage*>* messages) {
	ChatRoomImplementation* _implementation = (ChatRoomImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->broadcastMessages(messages);
}

bool ChatRoom::hasPlayer(PlayerCreature* player) {
	ChatRoomImplementation* _implementation = (ChatRoomImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASPLAYER__PLAYERCREATURE_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasPlayer(player);
}

bool ChatRoom::hasPlayer(const String& name) {
	ChatRoomImplementation* _implementation = (ChatRoomImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASPLAYER__STRING_);
		method.addAsciiParameter(name);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasPlayer(name);
}

void ChatRoom::removeAllPlayers() {
	ChatRoomImplementation* _implementation = (ChatRoomImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEALLPLAYERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->removeAllPlayers();
}

void ChatRoom::setPrivate() {
	ChatRoomImplementation* _implementation = (ChatRoomImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPRIVATE__);

		method.executeWithVoidReturn();
	} else
		_implementation->setPrivate();
}

void ChatRoom::setPublic() {
	ChatRoomImplementation* _implementation = (ChatRoomImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPUBLIC__);

		method.executeWithVoidReturn();
	} else
		_implementation->setPublic();
}

bool ChatRoom::isPublic() {
	ChatRoomImplementation* _implementation = (ChatRoomImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISPUBLIC__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isPublic();
}

bool ChatRoom::isPrivate() {
	ChatRoomImplementation* _implementation = (ChatRoomImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISPRIVATE__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isPrivate();
}

bool ChatRoom::isModerated() {
	ChatRoomImplementation* _implementation = (ChatRoomImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISMODERATED__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isModerated();
}

void ChatRoom::setModerated(bool moderate) {
	ChatRoomImplementation* _implementation = (ChatRoomImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMODERATED__BOOL_);
		method.addBooleanParameter(moderate);

		method.executeWithVoidReturn();
	} else
		_implementation->setModerated(moderate);
}

PlayerCreature* ChatRoom::getPlayer(int idx) {
	ChatRoomImplementation* _implementation = (ChatRoomImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPLAYER__INT_);
		method.addSignedIntParameter(idx);

		return (PlayerCreature*) method.executeWithObjectReturn();
	} else
		return _implementation->getPlayer(idx);
}

int ChatRoom::getPlayerSize() {
	ChatRoomImplementation* _implementation = (ChatRoomImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPLAYERSIZE__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getPlayerSize();
}

void ChatRoom::setName(const String& Name) {
	ChatRoomImplementation* _implementation = (ChatRoomImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETNAME__STRING_);
		method.addAsciiParameter(Name);

		method.executeWithVoidReturn();
	} else
		_implementation->setName(Name);
}

String ChatRoom::getName() {
	ChatRoomImplementation* _implementation = (ChatRoomImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETNAME__);

		method.executeWithAsciiReturn(_return_getName);
		return _return_getName;
	} else
		return _implementation->getName();
}

String ChatRoom::getFullPath() {
	ChatRoomImplementation* _implementation = (ChatRoomImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFULLPATH__);

		method.executeWithAsciiReturn(_return_getFullPath);
		return _return_getFullPath;
	} else
		return _implementation->getFullPath();
}

String ChatRoom::getOwner() {
	ChatRoomImplementation* _implementation = (ChatRoomImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETOWNER__);

		method.executeWithAsciiReturn(_return_getOwner);
		return _return_getOwner;
	} else
		return _implementation->getOwner();
}

String ChatRoom::getCreator() {
	ChatRoomImplementation* _implementation = (ChatRoomImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCREATOR__);

		method.executeWithAsciiReturn(_return_getCreator);
		return _return_getCreator;
	} else
		return _implementation->getCreator();
}

UnicodeString ChatRoom::getTitle() {
	ChatRoomImplementation* _implementation = (ChatRoomImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTITLE__);

		method.executeWithUnicodeReturn(_return_getTitle);
		return _return_getTitle;
	} else
		return _implementation->getTitle();
}

String ChatRoom::getServerName() {
	ChatRoomImplementation* _implementation = (ChatRoomImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSERVERNAME__);

		method.executeWithAsciiReturn(_return_getServerName);
		return _return_getServerName;
	} else
		return _implementation->getServerName();
}

void ChatRoom::setOwner(const String& Owner) {
	ChatRoomImplementation* _implementation = (ChatRoomImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETOWNER__STRING_);
		method.addAsciiParameter(Owner);

		method.executeWithVoidReturn();
	} else
		_implementation->setOwner(Owner);
}

void ChatRoom::setCreator(const String& Creator) {
	ChatRoomImplementation* _implementation = (ChatRoomImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCREATOR__STRING_);
		method.addAsciiParameter(Creator);

		method.executeWithVoidReturn();
	} else
		_implementation->setCreator(Creator);
}

void ChatRoom::setTitle(const String& Title) {
	ChatRoomImplementation* _implementation = (ChatRoomImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETTITLE__STRING_);
		method.addAsciiParameter(Title);

		method.executeWithVoidReturn();
	} else
		_implementation->setTitle(Title);
}

void ChatRoom::setRoomID(int id) {
	ChatRoomImplementation* _implementation = (ChatRoomImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETROOMID__INT_);
		method.addSignedIntParameter(id);

		method.executeWithVoidReturn();
	} else
		_implementation->setRoomID(id);
}

unsigned int ChatRoom::getRoomID() {
	ChatRoomImplementation* _implementation = (ChatRoomImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETROOMID__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getRoomID();
}

int ChatRoom::getSubRoomsSize() {
	ChatRoomImplementation* _implementation = (ChatRoomImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSUBROOMSSIZE__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getSubRoomsSize();
}

ChatRoom* ChatRoom::getParent() {
	ChatRoomImplementation* _implementation = (ChatRoomImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPARENT__);

		return (ChatRoom*) method.executeWithObjectReturn();
	} else
		return _implementation->getParent();
}

int ChatRoom::compareTo(ChatRoom* obj) {
	ChatRoomImplementation* _implementation = (ChatRoomImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_COMPARETO__CHATROOM_);
		method.addObjectParameter(obj);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->compareTo(obj);
}

DistributedObjectServant* ChatRoom::_getImplementation() {

	_updated = true;
	return _impl;
}

void ChatRoom::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	ChatRoomImplementation
 */

ChatRoomImplementation::ChatRoomImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}


ChatRoomImplementation::~ChatRoomImplementation() {
}


void ChatRoomImplementation::finalize() {
}

void ChatRoomImplementation::_initializeImplementation() {
	_setClassHelper(ChatRoomHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void ChatRoomImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (ChatRoom*) stub;
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* ChatRoomImplementation::_getStub() {
	return _this;
}

ChatRoomImplementation::operator const ChatRoom*() {
	return _this;
}

void ChatRoomImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void ChatRoomImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void ChatRoomImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void ChatRoomImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void ChatRoomImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void ChatRoomImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void ChatRoomImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void ChatRoomImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("ChatRoom");

}

void ChatRoomImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(ChatRoomImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ChatRoomImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ManagedObjectImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "server") {
		TypeInfo<ManagedReference<ZoneServer* > >::parseFromBinaryStream(&server, stream);
		return true;
	}

	if (_name == "name") {
		TypeInfo<String >::parseFromBinaryStream(&name, stream);
		return true;
	}

	if (_name == "fullPath") {
		TypeInfo<String >::parseFromBinaryStream(&fullPath, stream);
		return true;
	}

	if (_name == "owner") {
		TypeInfo<String >::parseFromBinaryStream(&owner, stream);
		return true;
	}

	if (_name == "creator") {
		TypeInfo<String >::parseFromBinaryStream(&creator, stream);
		return true;
	}

	if (_name == "title") {
		TypeInfo<UnicodeString >::parseFromBinaryStream(&title, stream);
		return true;
	}

	if (_name == "roomID") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&roomID, stream);
		return true;
	}

	if (_name == "parent") {
		TypeInfo<ManagedReference<ChatRoom* > >::parseFromBinaryStream(&parent, stream);
		return true;
	}

	if (_name == "playerList") {
		TypeInfo<VectorMap<String, ManagedReference<PlayerCreature* > > >::parseFromBinaryStream(&playerList, stream);
		return true;
	}

	if (_name == "moderatorList") {
		TypeInfo<VectorMap<String, ManagedReference<PlayerCreature* > > >::parseFromBinaryStream(&moderatorList, stream);
		return true;
	}

	if (_name == "subRooms") {
		TypeInfo<VectorMap<String, ManagedReference<ChatRoom* > > >::parseFromBinaryStream(&subRooms, stream);
		return true;
	}

	if (_name == "isPublicRoom") {
		TypeInfo<bool >::parseFromBinaryStream(&isPublicRoom, stream);
		return true;
	}

	if (_name == "moderated") {
		TypeInfo<bool >::parseFromBinaryStream(&moderated, stream);
		return true;
	}


	return false;
}

void ChatRoomImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ChatRoomImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ChatRoomImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "server";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<ZoneServer* > >::toBinaryStream(&server, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "name";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<String >::toBinaryStream(&name, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "fullPath";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<String >::toBinaryStream(&fullPath, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "owner";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<String >::toBinaryStream(&owner, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "creator";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<String >::toBinaryStream(&creator, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "title";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<UnicodeString >::toBinaryStream(&title, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "roomID";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned int >::toBinaryStream(&roomID, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "parent";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<ChatRoom* > >::toBinaryStream(&parent, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "playerList";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<VectorMap<String, ManagedReference<PlayerCreature* > > >::toBinaryStream(&playerList, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "moderatorList";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<VectorMap<String, ManagedReference<PlayerCreature* > > >::toBinaryStream(&moderatorList, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "subRooms";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<VectorMap<String, ManagedReference<ChatRoom* > > >::toBinaryStream(&subRooms, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "isPublicRoom";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<bool >::toBinaryStream(&isPublicRoom, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "moderated";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<bool >::toBinaryStream(&moderated, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 13 + ManagedObjectImplementation::writeObjectMembers(stream);
}

ChatRoomImplementation::ChatRoomImplementation() {
	_initializeImplementation();
	// server/chat/room/ChatRoom.idl():  		server = null;
	server = NULL;
	// server/chat/room/ChatRoom.idl():  		name = "";
	name = "";
	// server/chat/room/ChatRoom.idl():  		roomID = 0;
	roomID = 0;
	// server/chat/room/ChatRoom.idl():  		owner = "system";
	owner = "system";
	// server/chat/room/ChatRoom.idl():  		creator = "system";
	creator = "system";
	// server/chat/room/ChatRoom.idl():  		title = "";
	title = "";
	// server/chat/room/ChatRoom.idl():  		fullPath = "";
	fullPath = "";
	// server/chat/room/ChatRoom.idl():  		parent = null;
	parent = NULL;
	// server/chat/room/ChatRoom.idl():  		isPublicRoom = true;
	isPublicRoom = true;
	// server/chat/room/ChatRoom.idl():  		moderated = false;
	moderated = false;
	// server/chat/room/ChatRoom.idl():  		subRooms.setNullValue(null);
	(&subRooms)->setNullValue(NULL);
	// server/chat/room/ChatRoom.idl():  		subRooms.setNoDuplicateInsertPlan();
	(&subRooms)->setNoDuplicateInsertPlan();
	// server/chat/room/ChatRoom.idl():  		playerList.setNoDuplicateInsertPlan();
	(&playerList)->setNoDuplicateInsertPlan();
	// server/chat/room/ChatRoom.idl():  		playerList.setNullValue(null);
	(&playerList)->setNullValue(NULL);
	// server/chat/room/ChatRoom.idl():  		moderatorList.setNoDuplicateInsertPlan();
	(&moderatorList)->setNoDuplicateInsertPlan();
	// server/chat/room/ChatRoom.idl():  		moderatorList.setNullValue(null);
	(&moderatorList)->setNullValue(NULL);
}

void ChatRoomImplementation::init(ZoneServer* serv, ChatRoom* par, const String& roomName, unsigned int channelID) {
	// server/chat/room/ChatRoom.idl():  		server = serv;
	server = serv;
	// server/chat/room/ChatRoom.idl():  		name = roomName;
	name = roomName;
	// server/chat/room/ChatRoom.idl():  		roomID = channelID;
	roomID = channelID;
	// server/chat/room/ChatRoom.idl():  		parent = par;
	parent = par;
	// server/chat/room/ChatRoom.idl():  		owner = "system";
	owner = "system";
	// server/chat/room/ChatRoom.idl():  		creator = "system";
	creator = "system";
	// server/chat/room/ChatRoom.idl():  		title = "";
	title = "";
	// server/chat/room/ChatRoom.idl():  		}
	if (par == NULL){
	// server/chat/room/ChatRoom.idl():  			fullPath = roomName;
	fullPath = roomName;
}

	else {
	// server/chat/room/ChatRoom.idl():  			fullPath = par.getFullPath() + "." + roomName;
	fullPath = par->getFullPath() + "." + roomName;
}
	// server/chat/room/ChatRoom.idl():  		isPublicRoom = true;
	isPublicRoom = true;
	// server/chat/room/ChatRoom.idl():  		subRooms.setNullValue(null);
	(&subRooms)->setNullValue(NULL);
	// server/chat/room/ChatRoom.idl():  		subRooms.setNoDuplicateInsertPlan();
	(&subRooms)->setNoDuplicateInsertPlan();
	// server/chat/room/ChatRoom.idl():  		playerList.setNoDuplicateInsertPlan();
	(&playerList)->setNoDuplicateInsertPlan();
	// server/chat/room/ChatRoom.idl():  		playerList.setNullValue(null);
	(&playerList)->setNullValue(NULL);
}

void ChatRoomImplementation::addSubRoom(ChatRoom* channel) {
	Locker _locker(_this);
	// server/chat/room/ChatRoom.idl():  		subRooms.put(channel.getName(), channel);
	(&subRooms)->put(channel->getName(), channel);
}

void ChatRoomImplementation::removeSubRoom(ChatRoom* channel) {
	Locker _locker(_this);
	// server/chat/room/ChatRoom.idl():  		subRooms.drop(channel.getName());
	(&subRooms)->drop(channel->getName());
}

ChatRoom* ChatRoomImplementation::getSubRoom(int i) {
	Locker _locker(_this);
	// server/chat/room/ChatRoom.idl():  		return subRooms.get(i);
	return (&subRooms)->get(i);
}

ChatRoom* ChatRoomImplementation::getSubRoom(const String& name) {
	Locker _locker(_this);
	// server/chat/room/ChatRoom.idl():  		return subRooms.get(name);
	return (&subRooms)->get(name);
}

void ChatRoomImplementation::broadcastMessages(Vector<BaseMessage*>* messages) {
	Locker _locker(_this);
	// server/chat/room/ChatRoom.idl():  		}
	for (	// server/chat/room/ChatRoom.idl():  		for (int i = 0;
	int i = 0;
	i < (&playerList)->size();
 ++i) {
	// server/chat/room/ChatRoom.idl():  			PlayerCreature player = playerList.get(i);
	PlayerCreature* player = (&playerList)->get(i);
	// server/chat/room/ChatRoom.idl():  			}
	for (	// server/chat/room/ChatRoom.idl():  			for (int j = 0;
	int j = 0;
	j < messages->size();
 ++j) {
	// server/chat/room/ChatRoom.idl():  				BaseMessage msg = messages.get(j);
	BaseMessage* msg = messages->get(j);
	// server/chat/room/ChatRoom.idl():  				player.sendMessage(msg.clone());
	player->sendMessage(msg->clone());
}
}
	// server/chat/room/ChatRoom.idl():  		}
	for (	// server/chat/room/ChatRoom.idl():  		for (int j = 0;
	int j = 0;
	j < messages->size();
 ++j) {
	// server/chat/room/ChatRoom.idl():  			BaseMessage msg = messages.get(j);
	BaseMessage* msg = messages->get(j);
	// server/chat/room/ChatRoom.idl():  			msg.finalize();
	msg->finalize();
}
	// server/chat/room/ChatRoom.idl():  		messages.removeAll();
	messages->removeAll();
}

bool ChatRoomImplementation::hasPlayer(PlayerCreature* player) {
	Locker _locker(_this);
	// server/chat/room/ChatRoom.idl():  		return playerList.contains(player.getFirstName());
	return (&playerList)->contains(player->getFirstName());
}

bool ChatRoomImplementation::hasPlayer(const String& name) {
	Locker _locker(_this);
	// server/chat/room/ChatRoom.idl():  		return playerList.contains(name);
	return (&playerList)->contains(name);
}

void ChatRoomImplementation::setPrivate() {
	// server/chat/room/ChatRoom.idl():  		isPublicRoom = false;
	isPublicRoom = false;
}

void ChatRoomImplementation::setPublic() {
	// server/chat/room/ChatRoom.idl():  		isPublicRoom = true;
	isPublicRoom = true;
}

bool ChatRoomImplementation::isPublic() {
	// server/chat/room/ChatRoom.idl():  		return isPublicRoom == true;
	return isPublicRoom == true;
}

bool ChatRoomImplementation::isPrivate() {
	// server/chat/room/ChatRoom.idl():  		return isPublicRoom == false;
	return isPublicRoom == false;
}

bool ChatRoomImplementation::isModerated() {
	// server/chat/room/ChatRoom.idl():  		return moderated;
	return moderated;
}

void ChatRoomImplementation::setModerated(bool moderate) {
	// server/chat/room/ChatRoom.idl():  		moderated = moderate;
	moderated = moderate;
}

PlayerCreature* ChatRoomImplementation::getPlayer(int idx) {
	// server/chat/room/ChatRoom.idl():  		return playerList.get(idx);
	return (&playerList)->get(idx);
}

int ChatRoomImplementation::getPlayerSize() {
	// server/chat/room/ChatRoom.idl():  		return playerList.size();
	return (&playerList)->size();
}

void ChatRoomImplementation::setName(const String& Name) {
	// server/chat/room/ChatRoom.idl():  		name = Name;
	name = Name;
}

String ChatRoomImplementation::getName() {
	// server/chat/room/ChatRoom.idl():  		return name;
	return name;
}

String ChatRoomImplementation::getFullPath() {
	// server/chat/room/ChatRoom.idl():  		return fullPath;
	return fullPath;
}

String ChatRoomImplementation::getOwner() {
	// server/chat/room/ChatRoom.idl():  		return owner;
	return owner;
}

String ChatRoomImplementation::getCreator() {
	// server/chat/room/ChatRoom.idl():  		return creator;
	return creator;
}

UnicodeString ChatRoomImplementation::getTitle() {
	// server/chat/room/ChatRoom.idl():  		return title;
	return title;
}

void ChatRoomImplementation::setOwner(const String& Owner) {
	// server/chat/room/ChatRoom.idl():  		owner = Owner;
	owner = Owner;
}

void ChatRoomImplementation::setCreator(const String& Creator) {
	// server/chat/room/ChatRoom.idl():  		creator = Creator;
	creator = Creator;
}

void ChatRoomImplementation::setTitle(const String& Title) {
	// server/chat/room/ChatRoom.idl():  		title = Title;
	title = Title;
}

void ChatRoomImplementation::setRoomID(int id) {
	// server/chat/room/ChatRoom.idl():  		roomID = id;
	roomID = id;
}

unsigned int ChatRoomImplementation::getRoomID() {
	// server/chat/room/ChatRoom.idl():  		return roomID;
	return roomID;
}

int ChatRoomImplementation::getSubRoomsSize() {
	// server/chat/room/ChatRoom.idl():  		return subRooms.size();
	return (&subRooms)->size();
}

ChatRoom* ChatRoomImplementation::getParent() {
	// server/chat/room/ChatRoom.idl():  		return parent;
	return parent;
}

int ChatRoomImplementation::compareTo(ChatRoom* obj) {
	// server/chat/room/ChatRoom.idl():  			return 0;
	if (roomID < obj->getRoomID())	// server/chat/room/ChatRoom.idl():  			return 1;
	return 1;

	else 	// server/chat/room/ChatRoom.idl():  			return 0;
	if (roomID > obj->getRoomID())	// server/chat/room/ChatRoom.idl():  			return -1;
	return -1;

	else 	// server/chat/room/ChatRoom.idl():  			return 0;
	return 0;
}

/*
 *	ChatRoomAdapter
 */

ChatRoomAdapter::ChatRoomAdapter(ChatRoomImplementation* obj) : ManagedObjectAdapter(obj) {
}

Packet* ChatRoomAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_INIT__ZONESERVER_CHATROOM_STRING_INT_:
		init((ZoneServer*) inv->getObjectParameter(), (ChatRoom*) inv->getObjectParameter(), inv->getAsciiParameter(_param2_init__ZoneServer_ChatRoom_String_int_), inv->getUnsignedIntParameter());
		break;
	case RPC_SENDTO__PLAYERCREATURE_:
		sendTo((PlayerCreature*) inv->getObjectParameter());
		break;
	case RPC_SENDDESTROYTO__PLAYERCREATURE_:
		sendDestroyTo((PlayerCreature*) inv->getObjectParameter());
		break;
	case RPC_ADDSUBROOM__CHATROOM_:
		addSubRoom((ChatRoom*) inv->getObjectParameter());
		break;
	case RPC_REMOVESUBROOM__CHATROOM_:
		removeSubRoom((ChatRoom*) inv->getObjectParameter());
		break;
	case RPC_GETSUBROOM__INT_:
		resp->insertLong(getSubRoom(inv->getSignedIntParameter())->_getObjectID());
		break;
	case RPC_GETSUBROOM__STRING_:
		resp->insertLong(getSubRoom(inv->getAsciiParameter(_param0_getSubRoom__String_))->_getObjectID());
		break;
	case RPC_ADDPLAYER__PLAYERCREATURE_BOOL_:
		addPlayer((PlayerCreature*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case RPC_REMOVEPLAYER__PLAYERCREATURE_BOOL_:
		removePlayer((PlayerCreature*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case RPC_REMOVEPLAYER__STRING_:
		removePlayer(inv->getAsciiParameter(_param0_removePlayer__String_));
		break;
	case RPC_BROADCASTMESSAGE__BASEMESSAGE_:
		broadcastMessage((BaseMessage*) inv->getObjectParameter());
		break;
	case RPC_HASPLAYER__PLAYERCREATURE_:
		resp->insertBoolean(hasPlayer((PlayerCreature*) inv->getObjectParameter()));
		break;
	case RPC_HASPLAYER__STRING_:
		resp->insertBoolean(hasPlayer(inv->getAsciiParameter(_param0_hasPlayer__String_)));
		break;
	case RPC_REMOVEALLPLAYERS__:
		removeAllPlayers();
		break;
	case RPC_SETPRIVATE__:
		setPrivate();
		break;
	case RPC_SETPUBLIC__:
		setPublic();
		break;
	case RPC_ISPUBLIC__:
		resp->insertBoolean(isPublic());
		break;
	case RPC_ISPRIVATE__:
		resp->insertBoolean(isPrivate());
		break;
	case RPC_ISMODERATED__:
		resp->insertBoolean(isModerated());
		break;
	case RPC_SETMODERATED__BOOL_:
		setModerated(inv->getBooleanParameter());
		break;
	case RPC_GETPLAYER__INT_:
		resp->insertLong(getPlayer(inv->getSignedIntParameter())->_getObjectID());
		break;
	case RPC_GETPLAYERSIZE__:
		resp->insertSignedInt(getPlayerSize());
		break;
	case RPC_SETNAME__STRING_:
		setName(inv->getAsciiParameter(_param0_setName__String_));
		break;
	case RPC_GETNAME__:
		resp->insertAscii(getName());
		break;
	case RPC_GETFULLPATH__:
		resp->insertAscii(getFullPath());
		break;
	case RPC_GETOWNER__:
		resp->insertAscii(getOwner());
		break;
	case RPC_GETCREATOR__:
		resp->insertAscii(getCreator());
		break;
	case RPC_GETTITLE__:
		resp->insertUnicode(getTitle());
		break;
	case RPC_GETSERVERNAME__:
		resp->insertAscii(getServerName());
		break;
	case RPC_SETOWNER__STRING_:
		setOwner(inv->getAsciiParameter(_param0_setOwner__String_));
		break;
	case RPC_SETCREATOR__STRING_:
		setCreator(inv->getAsciiParameter(_param0_setCreator__String_));
		break;
	case RPC_SETTITLE__STRING_:
		setTitle(inv->getAsciiParameter(_param0_setTitle__String_));
		break;
	case RPC_SETROOMID__INT_:
		setRoomID(inv->getSignedIntParameter());
		break;
	case RPC_GETROOMID__:
		resp->insertInt(getRoomID());
		break;
	case RPC_GETSUBROOMSSIZE__:
		resp->insertSignedInt(getSubRoomsSize());
		break;
	case RPC_GETPARENT__:
		resp->insertLong(getParent()->_getObjectID());
		break;
	case RPC_COMPARETO__CHATROOM_:
		resp->insertSignedInt(compareTo((ChatRoom*) inv->getObjectParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

void ChatRoomAdapter::init(ZoneServer* serv, ChatRoom* par, const String& roomName, unsigned int channelID) {
	((ChatRoomImplementation*) impl)->init(serv, par, roomName, channelID);
}

void ChatRoomAdapter::sendTo(PlayerCreature* player) {
	((ChatRoomImplementation*) impl)->sendTo(player);
}

void ChatRoomAdapter::sendDestroyTo(PlayerCreature* player) {
	((ChatRoomImplementation*) impl)->sendDestroyTo(player);
}

void ChatRoomAdapter::addSubRoom(ChatRoom* channel) {
	((ChatRoomImplementation*) impl)->addSubRoom(channel);
}

void ChatRoomAdapter::removeSubRoom(ChatRoom* channel) {
	((ChatRoomImplementation*) impl)->removeSubRoom(channel);
}

ChatRoom* ChatRoomAdapter::getSubRoom(int i) {
	return ((ChatRoomImplementation*) impl)->getSubRoom(i);
}

ChatRoom* ChatRoomAdapter::getSubRoom(const String& name) {
	return ((ChatRoomImplementation*) impl)->getSubRoom(name);
}

void ChatRoomAdapter::addPlayer(PlayerCreature* player, bool doLock) {
	((ChatRoomImplementation*) impl)->addPlayer(player, doLock);
}

void ChatRoomAdapter::removePlayer(PlayerCreature* player, bool doLock) {
	((ChatRoomImplementation*) impl)->removePlayer(player, doLock);
}

void ChatRoomAdapter::removePlayer(const String& player) {
	((ChatRoomImplementation*) impl)->removePlayer(player);
}

void ChatRoomAdapter::broadcastMessage(BaseMessage* msg) {
	((ChatRoomImplementation*) impl)->broadcastMessage(msg);
}

bool ChatRoomAdapter::hasPlayer(PlayerCreature* player) {
	return ((ChatRoomImplementation*) impl)->hasPlayer(player);
}

bool ChatRoomAdapter::hasPlayer(const String& name) {
	return ((ChatRoomImplementation*) impl)->hasPlayer(name);
}

void ChatRoomAdapter::removeAllPlayers() {
	((ChatRoomImplementation*) impl)->removeAllPlayers();
}

void ChatRoomAdapter::setPrivate() {
	((ChatRoomImplementation*) impl)->setPrivate();
}

void ChatRoomAdapter::setPublic() {
	((ChatRoomImplementation*) impl)->setPublic();
}

bool ChatRoomAdapter::isPublic() {
	return ((ChatRoomImplementation*) impl)->isPublic();
}

bool ChatRoomAdapter::isPrivate() {
	return ((ChatRoomImplementation*) impl)->isPrivate();
}

bool ChatRoomAdapter::isModerated() {
	return ((ChatRoomImplementation*) impl)->isModerated();
}

void ChatRoomAdapter::setModerated(bool moderate) {
	((ChatRoomImplementation*) impl)->setModerated(moderate);
}

PlayerCreature* ChatRoomAdapter::getPlayer(int idx) {
	return ((ChatRoomImplementation*) impl)->getPlayer(idx);
}

int ChatRoomAdapter::getPlayerSize() {
	return ((ChatRoomImplementation*) impl)->getPlayerSize();
}

void ChatRoomAdapter::setName(const String& Name) {
	((ChatRoomImplementation*) impl)->setName(Name);
}

String ChatRoomAdapter::getName() {
	return ((ChatRoomImplementation*) impl)->getName();
}

String ChatRoomAdapter::getFullPath() {
	return ((ChatRoomImplementation*) impl)->getFullPath();
}

String ChatRoomAdapter::getOwner() {
	return ((ChatRoomImplementation*) impl)->getOwner();
}

String ChatRoomAdapter::getCreator() {
	return ((ChatRoomImplementation*) impl)->getCreator();
}

UnicodeString ChatRoomAdapter::getTitle() {
	return ((ChatRoomImplementation*) impl)->getTitle();
}

String ChatRoomAdapter::getServerName() {
	return ((ChatRoomImplementation*) impl)->getServerName();
}

void ChatRoomAdapter::setOwner(const String& Owner) {
	((ChatRoomImplementation*) impl)->setOwner(Owner);
}

void ChatRoomAdapter::setCreator(const String& Creator) {
	((ChatRoomImplementation*) impl)->setCreator(Creator);
}

void ChatRoomAdapter::setTitle(const String& Title) {
	((ChatRoomImplementation*) impl)->setTitle(Title);
}

void ChatRoomAdapter::setRoomID(int id) {
	((ChatRoomImplementation*) impl)->setRoomID(id);
}

unsigned int ChatRoomAdapter::getRoomID() {
	return ((ChatRoomImplementation*) impl)->getRoomID();
}

int ChatRoomAdapter::getSubRoomsSize() {
	return ((ChatRoomImplementation*) impl)->getSubRoomsSize();
}

ChatRoom* ChatRoomAdapter::getParent() {
	return ((ChatRoomImplementation*) impl)->getParent();
}

int ChatRoomAdapter::compareTo(ChatRoom* obj) {
	return ((ChatRoomImplementation*) impl)->compareTo(obj);
}

/*
 *	ChatRoomHelper
 */

ChatRoomHelper* ChatRoomHelper::staticInitializer = ChatRoomHelper::instance();

ChatRoomHelper::ChatRoomHelper() {
	className = "ChatRoom";

	Core::getObjectBroker()->registerClass(className, this);
}

void ChatRoomHelper::finalizeHelper() {
	ChatRoomHelper::finalize();
}

DistributedObject* ChatRoomHelper::instantiateObject() {
	return new ChatRoom(DummyConstructorParameter::instance());
}

DistributedObjectServant* ChatRoomHelper::instantiateServant() {
	return new ChatRoomImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ChatRoomHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ChatRoomAdapter((ChatRoomImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

