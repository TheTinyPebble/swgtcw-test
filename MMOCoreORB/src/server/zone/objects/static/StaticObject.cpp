/*
 *	server/zone/objects/static/StaticObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "StaticObject.h"

#include "StaticObjectImplementation.h"

#include "../scene/SceneObject.h"

#include "../player/Player.h"

#include "../../Zone.h"

/*
 *	StaticObjectStub
 */

StaticObject::StaticObject(unsigned long long oid, int type) : SceneObject(DummyConstructorParameter::instance()) {
	_impl = new StaticObjectImplementation(oid, type);
	_impl->_setStub(this);
}

StaticObject::StaticObject(DummyConstructorParameter* param) : SceneObject(param) {
}

StaticObject::~StaticObject() {
}

void StaticObject::close(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((StaticObjectImplementation*) _impl)->close(player);
}

void StaticObject::sendTo(Player* player, bool doClose) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);
		method.addBooleanParameter(doClose);

		method.executeWithVoidReturn();
	} else
		((StaticObjectImplementation*) _impl)->sendTo(player, doClose);
}

/*
 *	StaticObjectAdapter
 */

StaticObjectAdapter::StaticObjectAdapter(StaticObjectImplementation* obj) : SceneObjectAdapter(obj) {
}

Packet* StaticObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		close((Player*) inv->getObjectParameter());
		break;
	case 7:
		sendTo((Player*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void StaticObjectAdapter::close(Player* player) {
	return ((StaticObjectImplementation*) impl)->close(player);
}

void StaticObjectAdapter::sendTo(Player* player, bool doClose) {
	return ((StaticObjectImplementation*) impl)->sendTo(player, doClose);
}

/*
 *	StaticObjectHelper
 */

StaticObjectHelper* StaticObjectHelper::staticInitializer = StaticObjectHelper::instance();

StaticObjectHelper::StaticObjectHelper() {
	className = "StaticObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void StaticObjectHelper::finalizeHelper() {
	StaticObjectHelper::finalize();
}

DistributedObject* StaticObjectHelper::instantiateObject() {
	return new StaticObject(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* StaticObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new StaticObjectAdapter((StaticObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	StaticObjectServant
 */

StaticObjectServant::StaticObjectServant(unsigned long long oid, int type) : SceneObjectImplementation(oid, type) {
	_classHelper = StaticObjectHelper::instance();
}

StaticObjectServant::~StaticObjectServant() {
}

void StaticObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (StaticObject*) stub;
	SceneObjectServant::_setStub(stub);
}

DistributedObjectStub* StaticObjectServant::_getStub() {
	return _this;
}

