/*
 *	server/zone/objects/static/firework/FireworkWorld.cpp generated by engine3 IDL compiler 0.55
 */

#include "FireworkWorld.h"

#include "FireworkWorldImplementation.h"

#include "../../player/Player.h"

#include "../../static/StaticObject.h"

/*
 *	FireworkWorldStub
 */

FireworkWorld::FireworkWorld(Player* player) : StaticObject(DummyConstructorParameter::instance()) {
	_impl = new FireworkWorldImplementation(player);
	_impl->_setStub(this);
}

FireworkWorld::FireworkWorld(Player* player, int tp) : StaticObject(DummyConstructorParameter::instance()) {
	_impl = new FireworkWorldImplementation(player, tp);
	_impl->_setStub(this);
}

FireworkWorld::FireworkWorld(DummyConstructorParameter* param) : StaticObject(param) {
}

FireworkWorld::~FireworkWorld() {
}

int FireworkWorld::getFireworkType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		return method.executeWithSignedIntReturn();
	} else
		return ((FireworkWorldImplementation*) _impl)->getFireworkType();
}

int FireworkWorld::setFireworkObject(int crc) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addSignedIntParameter(crc);

		return method.executeWithSignedIntReturn();
	} else
		return ((FireworkWorldImplementation*) _impl)->setFireworkObject(crc);
}

/*
 *	FireworkWorldAdapter
 */

FireworkWorldAdapter::FireworkWorldAdapter(FireworkWorldImplementation* obj) : StaticObjectAdapter(obj) {
}

Packet* FireworkWorldAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertSignedInt(getFireworkType());
		break;
	case 7:
		resp->insertSignedInt(setFireworkObject(inv->getSignedIntParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

int FireworkWorldAdapter::getFireworkType() {
	return ((FireworkWorldImplementation*) impl)->getFireworkType();
}

int FireworkWorldAdapter::setFireworkObject(int crc) {
	return ((FireworkWorldImplementation*) impl)->setFireworkObject(crc);
}

/*
 *	FireworkWorldHelper
 */

FireworkWorldHelper* FireworkWorldHelper::staticInitializer = FireworkWorldHelper::instance();

FireworkWorldHelper::FireworkWorldHelper() {
	className = "FireworkWorld";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void FireworkWorldHelper::finalizeHelper() {
	FireworkWorldHelper::finalize();
}

DistributedObject* FireworkWorldHelper::instantiateObject() {
	return new FireworkWorld(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* FireworkWorldHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new FireworkWorldAdapter((FireworkWorldImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	FireworkWorldServant
 */

FireworkWorldServant::FireworkWorldServant(unsigned long long oid, int tp) : StaticObjectImplementation(oid, tp) {
	_classHelper = FireworkWorldHelper::instance();
}

FireworkWorldServant::~FireworkWorldServant() {
}

void FireworkWorldServant::_setStub(DistributedObjectStub* stub) {
	_this = (FireworkWorld*) stub;
	StaticObjectServant::_setStub(stub);
}

DistributedObjectStub* FireworkWorldServant::_getStub() {
	return _this;
}

