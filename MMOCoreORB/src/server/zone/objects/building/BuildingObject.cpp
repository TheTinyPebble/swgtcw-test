/*
 *	server/zone/objects/building/BuildingObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "BuildingObject.h"

#include "server/zone/objects/cell/CellObject.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/tangible/sign/SignObject.h"

#include "server/zone/objects/tangible/terminal/structure/StructureTerminal.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/Zone.h"

/*
 *	BuildingObjectStub
 */

BuildingObject::BuildingObject() : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new BuildingObjectImplementation();
	_impl->_setStub(this);
}

BuildingObject::BuildingObject(DummyConstructorParameter* param) : TangibleObject(param) {
}

BuildingObject::~BuildingObject() {
}


void BuildingObject::createCellObjects() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->createCellObjects();
}

void BuildingObject::loadTemplateData(SharedObjectTemplate* templateData) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((BuildingObjectImplementation*) _impl)->loadTemplateData(templateData);
}

void BuildingObject::initializeTransientMembers() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->initializeTransientMembers();
}

void BuildingObject::removeFromZone() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->removeFromZone();
}

void BuildingObject::notifyInsert(QuadTreeEntry* obj) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((BuildingObjectImplementation*) _impl)->notifyInsert(obj);
}

void BuildingObject::notifyDissapear(QuadTreeEntry* obj) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((BuildingObjectImplementation*) _impl)->notifyDissapear(obj);
}

void BuildingObject::notifyInsertToZone(SceneObject* object) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->notifyInsertToZone(object);
}

void BuildingObject::insert(QuadTreeEntry* obj) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((BuildingObjectImplementation*) _impl)->insert(obj);
}

void BuildingObject::remove(QuadTreeEntry* obj) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((BuildingObjectImplementation*) _impl)->remove(obj);
}

void BuildingObject::update(QuadTreeEntry* obj) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((BuildingObjectImplementation*) _impl)->update(obj);
}

void BuildingObject::inRange(QuadTreeEntry* obj, float range) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((BuildingObjectImplementation*) _impl)->inRange(obj, range);
}

void BuildingObject::sendTo(SceneObject* player, bool doClose) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(player);
		method.addBooleanParameter(doClose);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->sendTo(player, doClose);
}

void BuildingObject::sendBaselinesTo(SceneObject* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->sendBaselinesTo(player);
}

void BuildingObject::sendDestroyTo(SceneObject* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->sendDestroyTo(player);
}

void BuildingObject::addCell(CellObject* cell) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addObjectParameter(cell);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->addCell(cell);
}

bool BuildingObject::isStaticBuilding() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		return method.executeWithBooleanReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->isStaticBuilding();
}

CellObject* BuildingObject::getCell(int idx) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addSignedIntParameter(idx);

		return (CellObject*) method.executeWithObjectReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->getCell(idx);
}

int BuildingObject::getTotalCellNumber() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		return method.executeWithSignedIntReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->getTotalCellNumber();
}

void BuildingObject::setLotSize(int lotsize) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addSignedIntParameter(lotsize);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->setLotSize(lotsize);
}

int BuildingObject::getLotSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		return method.executeWithSignedIntReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->getLotSize();
}

void BuildingObject::setStaticBuilding(bool value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addBooleanParameter(value);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->setStaticBuilding(value);
}

void BuildingObject::onEnter(PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->onEnter(player);
}

void BuildingObject::onExit(PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->onExit(player);
}

bool BuildingObject::isBuildingObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);

		return method.executeWithBooleanReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->isBuildingObject();
}

void BuildingObject::setDeedObjectID(unsigned long long deedid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);
		method.addUnsignedLongParameter(deedid);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->setDeedObjectID(deedid);
}

unsigned long long BuildingObject::getDeedObjectID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->getDeedObjectID();
}

void BuildingObject::setOwnerObjectID(unsigned long long ownerID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);
		method.addUnsignedLongParameter(ownerID);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->setOwnerObjectID(ownerID);
}

unsigned long long BuildingObject::getOwnerObjectID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->getOwnerObjectID();
}

void BuildingObject::setSignObject(SignObject* sign) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);
		method.addObjectParameter(sign);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->setSignObject(sign);
}

SignObject* BuildingObject::getSignObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);

		return (SignObject*) method.executeWithObjectReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->getSignObject();
}

void BuildingObject::setMaintenancePool(unsigned int maintenance) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);
		method.addUnsignedIntParameter(maintenance);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->setMaintenancePool(maintenance);
}

unsigned int BuildingObject::getMaintenancePool() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->getMaintenancePool();
}

void BuildingObject::setBaseMaintenanceRate(int maintenanceRate) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);
		method.addSignedIntParameter(maintenanceRate);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->setBaseMaintenanceRate(maintenanceRate);
}

int BuildingObject::getBaseMaintenanceRate() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);

		return method.executeWithSignedIntReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->getBaseMaintenanceRate();
}

int BuildingObject::getRedeedCost() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);

		return method.executeWithSignedIntReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->getRedeedCost();
}

bool BuildingObject::isOnAdminList(CreatureObject* creature) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);
		method.addObjectParameter(creature);

		return method.executeWithBooleanReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->isOnAdminList(creature);
}

void BuildingObject::sendPermissionListTo(PlayerCreature* player, const String& listName) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);
		method.addObjectParameter(player);
		method.addAsciiParameter(listName);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->sendPermissionListTo(player, listName);
}

/*
 *	BuildingObjectImplementation
 */

BuildingObjectImplementation::BuildingObjectImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
	_initializeImplementation();
}

BuildingObjectImplementation::~BuildingObjectImplementation() {
}


void BuildingObjectImplementation::finalize() {
}

void BuildingObjectImplementation::_initializeImplementation() {
	_setClassHelper(BuildingObjectHelper::instance());

	_serializationHelperMethod();
}

void BuildingObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (BuildingObject*) stub;
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* BuildingObjectImplementation::_getStub() {
	return _this;
}

BuildingObjectImplementation::operator const BuildingObject*() {
	return _this;
}

void BuildingObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void BuildingObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void BuildingObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void BuildingObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void BuildingObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void BuildingObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void BuildingObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void BuildingObjectImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("BuildingObject");

	addSerializableVariable("cells", &cells);
	addSerializableVariable("structurePermissionList", &structurePermissionList);
	addSerializableVariable("ownerObjectID", &ownerObjectID);
	addSerializableVariable("totalCellNumber", &totalCellNumber);
	addSerializableVariable("signObject", &signObject);
	addSerializableVariable("lotSize", &lotSize);
	addSerializableVariable("deedObjectID", &deedObjectID);
	addSerializableVariable("baseMaintenanceRate", &baseMaintenanceRate);
	addSerializableVariable("maintenancePool", &maintenancePool);
	addSerializableVariable("accessFee", &accessFee);
}

BuildingObjectImplementation::BuildingObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/building/BuildingObject.idl(87):  		Logger.setLoggingName("BuildingObject");
	Logger::setLoggingName("BuildingObject");
	// server/zone/objects/building/BuildingObject.idl(89):  		QuadTree.setSize(-1024, -1024, 1024, 1024);
	QuadTree::setSize(-1024, -1024, 1024, 1024);
	// server/zone/objects/building/BuildingObject.idl(91):  		super.staticObject = false;
	TangibleObjectImplementation::staticObject = false;
	// server/zone/objects/building/BuildingObject.idl(93):  		super.containerVolumeLimit = 0xFFFFFFFF;
	TangibleObjectImplementation::containerVolumeLimit = 0xFFFFFFFF;
	// server/zone/objects/building/BuildingObject.idl(95):  		super.containerType = 2;
	TangibleObjectImplementation::containerType = 2;
	// server/zone/objects/building/BuildingObject.idl(97):  		totalCellNumber = 0;
	totalCellNumber = 0;
	// server/zone/objects/building/BuildingObject.idl(99):  		lotSize = 0;
	lotSize = 0;
	// server/zone/objects/building/BuildingObject.idl(101):  		baseMaintenanceRate = 0;
	baseMaintenanceRate = 0;
	// server/zone/objects/building/BuildingObject.idl(104):  		deedObjectID = 0;
	deedObjectID = 0;
	// server/zone/objects/building/BuildingObject.idl(106):  		accessFee = 0;
	accessFee = 0;
}

void BuildingObjectImplementation::createCellObjects() {
	// server/zone/objects/building/BuildingObject.idl(110):  
	for (	// server/zone/objects/building/BuildingObject.idl(110):  		for (int i = 0;
	int i = 0;
	i < totalCellNumber;
 ++i) {
	// server/zone/objects/building/BuildingObject.idl(111):  			SceneObject newCell = getZoneServer().createObject(2906855187, 2);
	SceneObject* newCell = getZoneServer()->createObject(2906855187, 2);
	// server/zone/objects/building/BuildingObject.idl(113):  			addCell((CellObject)newCell);
	addCell((CellObject*) newCell);
}
}

bool BuildingObjectImplementation::isStaticBuilding() {
	// server/zone/objects/building/BuildingObject.idl(164):  		return super.staticObject;
	return TangibleObjectImplementation::staticObject;
}

CellObject* BuildingObjectImplementation::getCell(int idx) {
	// server/zone/objects/building/BuildingObject.idl(168):  		return cells.get(idx);
	return (&cells)->get(idx);
}

int BuildingObjectImplementation::getTotalCellNumber() {
	// server/zone/objects/building/BuildingObject.idl(172):  		return totalCellNumber;
	return totalCellNumber;
}

void BuildingObjectImplementation::setLotSize(int lotsize) {
	// server/zone/objects/building/BuildingObject.idl(176):  		lotSize = lotsize;
	lotSize = lotsize;
}

int BuildingObjectImplementation::getLotSize() {
	// server/zone/objects/building/BuildingObject.idl(180):  		return lotSize;
	return lotSize;
}

void BuildingObjectImplementation::setStaticBuilding(bool value) {
	// server/zone/objects/building/BuildingObject.idl(184):  		super.staticObject = value;
	TangibleObjectImplementation::staticObject = value;
}

void BuildingObjectImplementation::onEnter(PlayerCreature* player) {
}

void BuildingObjectImplementation::onExit(PlayerCreature* player) {
}

bool BuildingObjectImplementation::isBuildingObject() {
	// server/zone/objects/building/BuildingObject.idl(212):  		return true;
	return true;
}

void BuildingObjectImplementation::setDeedObjectID(unsigned long long deedid) {
	// server/zone/objects/building/BuildingObject.idl(216):  		deedObjectID = deedid;
	deedObjectID = deedid;
}

unsigned long long BuildingObjectImplementation::getDeedObjectID() {
	// server/zone/objects/building/BuildingObject.idl(220):  		return deedObjectID;
	return deedObjectID;
}

void BuildingObjectImplementation::setOwnerObjectID(unsigned long long ownerID) {
	// server/zone/objects/building/BuildingObject.idl(224):  		ownerObjectID = ownerID;
	ownerObjectID = ownerID;
	// server/zone/objects/building/BuildingObject.idl(225):  		structurePermissionList.grantPermission(ownerID, StructurePermissionList.OWNER);
	(&structurePermissionList)->grantPermission(ownerID, StructurePermissionList::OWNER);
}

unsigned long long BuildingObjectImplementation::getOwnerObjectID() {
	// server/zone/objects/building/BuildingObject.idl(229):  		return ownerObjectID;
	return ownerObjectID;
}

void BuildingObjectImplementation::setSignObject(SignObject* sign) {
	// server/zone/objects/building/BuildingObject.idl(233):  		signObject = sign;
	signObject = sign;
}

SignObject* BuildingObjectImplementation::getSignObject() {
	// server/zone/objects/building/BuildingObject.idl(237):  		return signObject;
	return signObject;
}

void BuildingObjectImplementation::setMaintenancePool(unsigned int maintenance) {
	// server/zone/objects/building/BuildingObject.idl(241):  		maintenancePool = maintenance;
	maintenancePool = maintenance;
}

unsigned int BuildingObjectImplementation::getMaintenancePool() {
	// server/zone/objects/building/BuildingObject.idl(245):  		return maintenancePool;
	return maintenancePool;
}

void BuildingObjectImplementation::setBaseMaintenanceRate(int maintenanceRate) {
	// server/zone/objects/building/BuildingObject.idl(253):  		baseMaintenanceRate = maintenanceRate;
	baseMaintenanceRate = maintenanceRate;
}

int BuildingObjectImplementation::getBaseMaintenanceRate() {
	// server/zone/objects/building/BuildingObject.idl(262):  		return baseMaintenanceRate;
	return baseMaintenanceRate;
}

int BuildingObjectImplementation::getRedeedCost() {
	// server/zone/objects/building/BuildingObject.idl(270):  		return baseMaintenanceRate * 50;
	return baseMaintenanceRate * 50;
}

bool BuildingObjectImplementation::isOnAdminList(CreatureObject* creature) {
	// server/zone/objects/building/BuildingObject.idl(279):  		return structurePermissionList.isOnAdminList(creature.getObjectID());
	return (&structurePermissionList)->isOnAdminList(creature->getObjectID());
}

void BuildingObjectImplementation::sendPermissionListTo(PlayerCreature* player, const String& listName) {
	// server/zone/objects/building/BuildingObject.idl(283):  		structurePermissionList.sendTo(player, listName);
	(&structurePermissionList)->sendTo(player, listName);
}

/*
 *	BuildingObjectAdapter
 */

BuildingObjectAdapter::BuildingObjectAdapter(BuildingObjectImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* BuildingObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		createCellObjects();
		break;
	case 7:
		initializeTransientMembers();
		break;
	case 8:
		removeFromZone();
		break;
	case 9:
		notifyInsertToZone((SceneObject*) inv->getObjectParameter());
		break;
	case 10:
		sendTo((SceneObject*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 11:
		sendBaselinesTo((SceneObject*) inv->getObjectParameter());
		break;
	case 12:
		sendDestroyTo((SceneObject*) inv->getObjectParameter());
		break;
	case 13:
		addCell((CellObject*) inv->getObjectParameter());
		break;
	case 14:
		resp->insertBoolean(isStaticBuilding());
		break;
	case 15:
		resp->insertLong(getCell(inv->getSignedIntParameter())->_getObjectID());
		break;
	case 16:
		resp->insertSignedInt(getTotalCellNumber());
		break;
	case 17:
		setLotSize(inv->getSignedIntParameter());
		break;
	case 18:
		resp->insertSignedInt(getLotSize());
		break;
	case 19:
		setStaticBuilding(inv->getBooleanParameter());
		break;
	case 20:
		onEnter((PlayerCreature*) inv->getObjectParameter());
		break;
	case 21:
		onExit((PlayerCreature*) inv->getObjectParameter());
		break;
	case 22:
		resp->insertBoolean(isBuildingObject());
		break;
	case 23:
		setDeedObjectID(inv->getUnsignedLongParameter());
		break;
	case 24:
		resp->insertLong(getDeedObjectID());
		break;
	case 25:
		setOwnerObjectID(inv->getUnsignedLongParameter());
		break;
	case 26:
		resp->insertLong(getOwnerObjectID());
		break;
	case 27:
		setSignObject((SignObject*) inv->getObjectParameter());
		break;
	case 28:
		resp->insertLong(getSignObject()->_getObjectID());
		break;
	case 29:
		setMaintenancePool(inv->getUnsignedIntParameter());
		break;
	case 30:
		resp->insertInt(getMaintenancePool());
		break;
	case 31:
		setBaseMaintenanceRate(inv->getSignedIntParameter());
		break;
	case 32:
		resp->insertSignedInt(getBaseMaintenanceRate());
		break;
	case 33:
		resp->insertSignedInt(getRedeedCost());
		break;
	case 34:
		resp->insertBoolean(isOnAdminList((CreatureObject*) inv->getObjectParameter()));
		break;
	case 35:
		sendPermissionListTo((PlayerCreature*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_sendPermissionListTo__PlayerCreature_String_));
		break;
	default:
		return NULL;
	}

	return resp;
}

void BuildingObjectAdapter::createCellObjects() {
	((BuildingObjectImplementation*) impl)->createCellObjects();
}

void BuildingObjectAdapter::initializeTransientMembers() {
	((BuildingObjectImplementation*) impl)->initializeTransientMembers();
}

void BuildingObjectAdapter::removeFromZone() {
	((BuildingObjectImplementation*) impl)->removeFromZone();
}

void BuildingObjectAdapter::notifyInsertToZone(SceneObject* object) {
	((BuildingObjectImplementation*) impl)->notifyInsertToZone(object);
}

void BuildingObjectAdapter::sendTo(SceneObject* player, bool doClose) {
	((BuildingObjectImplementation*) impl)->sendTo(player, doClose);
}

void BuildingObjectAdapter::sendBaselinesTo(SceneObject* player) {
	((BuildingObjectImplementation*) impl)->sendBaselinesTo(player);
}

void BuildingObjectAdapter::sendDestroyTo(SceneObject* player) {
	((BuildingObjectImplementation*) impl)->sendDestroyTo(player);
}

void BuildingObjectAdapter::addCell(CellObject* cell) {
	((BuildingObjectImplementation*) impl)->addCell(cell);
}

bool BuildingObjectAdapter::isStaticBuilding() {
	return ((BuildingObjectImplementation*) impl)->isStaticBuilding();
}

CellObject* BuildingObjectAdapter::getCell(int idx) {
	return ((BuildingObjectImplementation*) impl)->getCell(idx);
}

int BuildingObjectAdapter::getTotalCellNumber() {
	return ((BuildingObjectImplementation*) impl)->getTotalCellNumber();
}

void BuildingObjectAdapter::setLotSize(int lotsize) {
	((BuildingObjectImplementation*) impl)->setLotSize(lotsize);
}

int BuildingObjectAdapter::getLotSize() {
	return ((BuildingObjectImplementation*) impl)->getLotSize();
}

void BuildingObjectAdapter::setStaticBuilding(bool value) {
	((BuildingObjectImplementation*) impl)->setStaticBuilding(value);
}

void BuildingObjectAdapter::onEnter(PlayerCreature* player) {
	((BuildingObjectImplementation*) impl)->onEnter(player);
}

void BuildingObjectAdapter::onExit(PlayerCreature* player) {
	((BuildingObjectImplementation*) impl)->onExit(player);
}

bool BuildingObjectAdapter::isBuildingObject() {
	return ((BuildingObjectImplementation*) impl)->isBuildingObject();
}

void BuildingObjectAdapter::setDeedObjectID(unsigned long long deedid) {
	((BuildingObjectImplementation*) impl)->setDeedObjectID(deedid);
}

unsigned long long BuildingObjectAdapter::getDeedObjectID() {
	return ((BuildingObjectImplementation*) impl)->getDeedObjectID();
}

void BuildingObjectAdapter::setOwnerObjectID(unsigned long long ownerID) {
	((BuildingObjectImplementation*) impl)->setOwnerObjectID(ownerID);
}

unsigned long long BuildingObjectAdapter::getOwnerObjectID() {
	return ((BuildingObjectImplementation*) impl)->getOwnerObjectID();
}

void BuildingObjectAdapter::setSignObject(SignObject* sign) {
	((BuildingObjectImplementation*) impl)->setSignObject(sign);
}

SignObject* BuildingObjectAdapter::getSignObject() {
	return ((BuildingObjectImplementation*) impl)->getSignObject();
}

void BuildingObjectAdapter::setMaintenancePool(unsigned int maintenance) {
	((BuildingObjectImplementation*) impl)->setMaintenancePool(maintenance);
}

unsigned int BuildingObjectAdapter::getMaintenancePool() {
	return ((BuildingObjectImplementation*) impl)->getMaintenancePool();
}

void BuildingObjectAdapter::setBaseMaintenanceRate(int maintenanceRate) {
	((BuildingObjectImplementation*) impl)->setBaseMaintenanceRate(maintenanceRate);
}

int BuildingObjectAdapter::getBaseMaintenanceRate() {
	return ((BuildingObjectImplementation*) impl)->getBaseMaintenanceRate();
}

int BuildingObjectAdapter::getRedeedCost() {
	return ((BuildingObjectImplementation*) impl)->getRedeedCost();
}

bool BuildingObjectAdapter::isOnAdminList(CreatureObject* creature) {
	return ((BuildingObjectImplementation*) impl)->isOnAdminList(creature);
}

void BuildingObjectAdapter::sendPermissionListTo(PlayerCreature* player, const String& listName) {
	((BuildingObjectImplementation*) impl)->sendPermissionListTo(player, listName);
}

/*
 *	BuildingObjectHelper
 */

BuildingObjectHelper* BuildingObjectHelper::staticInitializer = BuildingObjectHelper::instance();

BuildingObjectHelper::BuildingObjectHelper() {
	className = "BuildingObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void BuildingObjectHelper::finalizeHelper() {
	BuildingObjectHelper::finalize();
}

DistributedObject* BuildingObjectHelper::instantiateObject() {
	return new BuildingObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* BuildingObjectHelper::instantiateServant() {
	return new BuildingObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* BuildingObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new BuildingObjectAdapter((BuildingObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

