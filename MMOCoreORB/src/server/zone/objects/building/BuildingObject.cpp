/*
 *	server/zone/objects/building/BuildingObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "BuildingObject.h"

#include "BuildingObjectImplementation.h"

#include "cell/CellObject.h"

#include "../scene/SceneObject.h"

#include "../player/Player.h"

#include "../guild/Guild.h"

#include "../creature/CreatureObject.h"

#include "../../Zone.h"

#include "../../objects/player/sui/listbox/SuiListBox.h"

/*
 *	BuildingObjectStub
 */

BuildingObject::BuildingObject(unsigned long long oid, bool staticBuilding, int bType) : SceneObject(DummyConstructorParameter::instance()) {
	_impl = new BuildingObjectImplementation(oid, staticBuilding, bType);
	_impl->_setStub(this);
}

BuildingObject::BuildingObject(DummyConstructorParameter* param) : SceneObject(param) {
}

BuildingObject::~BuildingObject() {
}

void BuildingObject::sendPermissionListTo(Player* player, unsigned char listtype) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);
		method.addUnsignedCharParameter(listtype);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->sendPermissionListTo(player, listtype);
}

void BuildingObject::handlePermissionListModify(Player* enforcer, unsigned char listtype, int recipientIdx, SuiListBox* suilist) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(enforcer);
		method.addUnsignedCharParameter(listtype);
		method.addSignedIntParameter(recipientIdx);
		method.addObjectParameter(suilist);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->handlePermissionListModify(enforcer, listtype, recipientIdx, suilist);
}

void BuildingObject::addCell(CellObject* cell) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(cell);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->addCell(cell);
}

void BuildingObject::addSceneObject(SceneObject* sceneObject) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(sceneObject);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->addSceneObject(sceneObject);
}

void BuildingObject::notifyInsertToZone(SceneObject* object) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->notifyInsertToZone(object);
}

bool BuildingObject::isStatic() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		return method.executeWithBooleanReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->isStatic();
}

int BuildingObject::getBuildingType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		return method.executeWithSignedIntReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->getBuildingType();
}

void BuildingObject::setBuildingType(int type) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addSignedIntParameter(type);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->setBuildingType(type);
}

int BuildingObject::getCellCount() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		return method.executeWithSignedIntReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->getCellCount();
}

CellObject* BuildingObject::getCell(int idx) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addSignedIntParameter(idx);

		return (CellObject*) method.executeWithObjectReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->getCell(idx);
}

bool BuildingObject::hasCell(unsigned long long cellID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addUnsignedLongParameter(cellID);

		return method.executeWithBooleanReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->hasCell(cellID);
}

void BuildingObject::setPersistent(bool pers) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addBooleanParameter(pers);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->setPersistent(pers);
}

void BuildingObject::setUpdated(bool up) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addBooleanParameter(up);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->setUpdated(up);
}

bool BuildingObject::isPersistent() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);

		return method.executeWithBooleanReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->isPersistent();
}

bool BuildingObject::isUpdated() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);

		return method.executeWithBooleanReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->isUpdated();
}

void BuildingObject::setAttributes(String& attributeString) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addAsciiParameter(attributeString);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->setAttributes(attributeString);
}

String& BuildingObject::getAttributes() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);

		method.executeWithAsciiReturn(_return_getAttributes);
		return _return_getAttributes;
	} else
		return ((BuildingObjectImplementation*) _impl)->getAttributes();
}

String& BuildingObject::getOwner() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);

		method.executeWithAsciiReturn(_return_getOwner);
		return _return_getOwner;
	} else
		return ((BuildingObjectImplementation*) _impl)->getOwner();
}

void BuildingObject::setOwner(const String& owner) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);
		method.addAsciiParameter(owner);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->setOwner(owner);
}

unsigned long long BuildingObject::getOwnerID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->getOwnerID();
}

void BuildingObject::setOwnerID(unsigned long long owner) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);
		method.addUnsignedLongParameter(owner);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->setOwnerID(owner);
}

bool BuildingObject::isPublic() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);

		return method.executeWithBooleanReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->isPublic();
}

void BuildingObject::setPublicEntry(bool pubentry) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);
		method.addBooleanParameter(pubentry);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->setPublicEntry(pubentry);
}

void BuildingObject::parseItemAttributes() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->parseItemAttributes();
}

UnicodeString& BuildingObject::getName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);

		method.executeWithUnicodeReturn(_return_getName);
		return _return_getName;
	} else
		return ((BuildingObjectImplementation*) _impl)->getName();
}

void BuildingObject::setName(const String& n) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);
		method.addAsciiParameter(n);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->setName(n);
}

void BuildingObject::setName(const UnicodeString& n) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);
		method.addUnicodeParameter(n);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->setName(n);
}

String& BuildingObject::getDefaultName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);

		method.executeWithAsciiReturn(_return_getDefaultName);
		return _return_getDefaultName;
	} else
		return ((BuildingObjectImplementation*) _impl)->getDefaultName();
}

String& BuildingObject::getTemplateName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);

		method.executeWithAsciiReturn(_return_getTemplateName);
		return _return_getTemplateName;
	} else
		return ((BuildingObjectImplementation*) _impl)->getTemplateName();
}

void BuildingObject::lock(bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->lock(doLock);
}

void BuildingObject::unlock(bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 36);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->unlock(doLock);
}

void BuildingObject::setSize(float minx, float miny, float maxx, float maxy) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 37);
		method.addFloatParameter(minx);
		method.addFloatParameter(miny);
		method.addFloatParameter(maxx);
		method.addFloatParameter(maxy);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->setSize(minx, miny, maxx, maxy);
}

void BuildingObject::insert(QuadTreeEntry* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 38);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->insert(obj);
}

void BuildingObject::remove(QuadTreeEntry* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 39);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->remove(obj);
}

void BuildingObject::removeAll() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 40);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->removeAll();
}

bool BuildingObject::update(QuadTreeEntry* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 41);
		method.addObjectParameter(obj);

		return method.executeWithBooleanReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->update(obj);
}

void BuildingObject::inRange(QuadTreeEntry* obj, float range) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 42);
		method.addObjectParameter(obj);
		method.addFloatParameter(range);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->inRange(obj, range);
}

bool BuildingObject::getStorageLoaded() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 43);

		return method.executeWithBooleanReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->getStorageLoaded();
}

void BuildingObject::setStorageLoaded(bool setter) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 44);
		method.addBooleanParameter(setter);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->setStorageLoaded(setter);
}

bool BuildingObject::isCloningFacility() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 45);

		return method.executeWithBooleanReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->isCloningFacility();
}

bool BuildingObject::isOwnedBy(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 46);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->isOwnedBy(player);
}

bool BuildingObject::isOnAdminList(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 47);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->isOnAdminList(player);
}

bool BuildingObject::isOnEntryList(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 48);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->isOnEntryList(player);
}

bool BuildingObject::isOnHopperList(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 49);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->isOnHopperList(player);
}

bool BuildingObject::isOnBanList(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 50);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->isOnBanList(player);
}

void BuildingObject::givePermission(Player* enforcer, Player* recipient, unsigned char permission) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 51);
		method.addObjectParameter(enforcer);
		method.addObjectParameter(recipient);
		method.addUnsignedCharParameter(permission);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->givePermission(enforcer, recipient, permission);
}

void BuildingObject::givePermission(Player* enforcer, Guild* guild, unsigned char permission) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 52);
		method.addObjectParameter(enforcer);
		method.addObjectParameter(guild);
		method.addUnsignedCharParameter(permission);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->givePermission(enforcer, guild, permission);
}

void BuildingObject::givePermission(Player* enforcer, const String& entryname, unsigned char permission) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 53);
		method.addObjectParameter(enforcer);
		method.addAsciiParameter(entryname);
		method.addUnsignedCharParameter(permission);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->givePermission(enforcer, entryname, permission);
}

void BuildingObject::revokePermission(Player* enforcer, Player* recipient, unsigned char permission) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 54);
		method.addObjectParameter(enforcer);
		method.addObjectParameter(recipient);
		method.addUnsignedCharParameter(permission);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->revokePermission(enforcer, recipient, permission);
}

void BuildingObject::revokePermission(Player* enforcer, Guild* guild, unsigned char permission) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 55);
		method.addObjectParameter(enforcer);
		method.addObjectParameter(guild);
		method.addUnsignedCharParameter(permission);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->revokePermission(enforcer, guild, permission);
}

void BuildingObject::revokePermission(Player* enforcer, const String& entryname, unsigned char permission) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 56);
		method.addObjectParameter(enforcer);
		method.addAsciiParameter(entryname);
		method.addUnsignedCharParameter(permission);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->revokePermission(enforcer, entryname, permission);
}

void BuildingObject::setPermissionsList(const String& permissionsString) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 57);
		method.addAsciiParameter(permissionsString);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->setPermissionsList(permissionsString);
}

/*
 *	BuildingObjectAdapter
 */

BuildingObjectAdapter::BuildingObjectAdapter(BuildingObjectImplementation* obj) : SceneObjectAdapter(obj) {
}

Packet* BuildingObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		sendPermissionListTo((Player*) inv->getObjectParameter(), inv->getUnsignedCharParameter());
		break;
	case 7:
		handlePermissionListModify((Player*) inv->getObjectParameter(), inv->getUnsignedCharParameter(), inv->getSignedIntParameter(), (SuiListBox*) inv->getObjectParameter());
		break;
	case 8:
		addCell((CellObject*) inv->getObjectParameter());
		break;
	case 9:
		addSceneObject((SceneObject*) inv->getObjectParameter());
		break;
	case 10:
		notifyInsertToZone((SceneObject*) inv->getObjectParameter());
		break;
	case 11:
		resp->insertBoolean(isStatic());
		break;
	case 12:
		resp->insertSignedInt(getBuildingType());
		break;
	case 13:
		setBuildingType(inv->getSignedIntParameter());
		break;
	case 14:
		resp->insertSignedInt(getCellCount());
		break;
	case 15:
		resp->insertLong(getCell(inv->getSignedIntParameter())->_getObjectID());
		break;
	case 16:
		resp->insertBoolean(hasCell(inv->getUnsignedLongParameter()));
		break;
	case 17:
		setPersistent(inv->getBooleanParameter());
		break;
	case 18:
		setUpdated(inv->getBooleanParameter());
		break;
	case 19:
		resp->insertBoolean(isPersistent());
		break;
	case 20:
		resp->insertBoolean(isUpdated());
		break;
	case 21:
		setAttributes(inv->getAsciiParameter(_param0_setAttributes__String_));
		break;
	case 22:
		resp->insertAscii(getAttributes());
		break;
	case 23:
		resp->insertAscii(getOwner());
		break;
	case 24:
		setOwner(inv->getAsciiParameter(_param0_setOwner__String_));
		break;
	case 25:
		resp->insertLong(getOwnerID());
		break;
	case 26:
		setOwnerID(inv->getUnsignedLongParameter());
		break;
	case 27:
		resp->insertBoolean(isPublic());
		break;
	case 28:
		setPublicEntry(inv->getBooleanParameter());
		break;
	case 29:
		parseItemAttributes();
		break;
	case 30:
		resp->insertUnicode(getName());
		break;
	case 31:
		setName(inv->getAsciiParameter(_param0_setName__String_));
		break;
	case 32:
		setName(inv->getUnicodeParameter(_param0_setName__UnicodeString_));
		break;
	case 33:
		resp->insertAscii(getDefaultName());
		break;
	case 34:
		resp->insertAscii(getTemplateName());
		break;
	case 35:
		lock(inv->getBooleanParameter());
		break;
	case 36:
		unlock(inv->getBooleanParameter());
		break;
	case 37:
		setSize(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter());
		break;
	case 38:
		insert((QuadTreeEntry*) inv->getObjectParameter());
		break;
	case 39:
		remove((QuadTreeEntry*) inv->getObjectParameter());
		break;
	case 40:
		removeAll();
		break;
	case 41:
		resp->insertBoolean(update((QuadTreeEntry*) inv->getObjectParameter()));
		break;
	case 42:
		inRange((QuadTreeEntry*) inv->getObjectParameter(), inv->getFloatParameter());
		break;
	case 43:
		resp->insertBoolean(getStorageLoaded());
		break;
	case 44:
		setStorageLoaded(inv->getBooleanParameter());
		break;
	case 45:
		resp->insertBoolean(isCloningFacility());
		break;
	case 46:
		resp->insertBoolean(isOwnedBy((Player*) inv->getObjectParameter()));
		break;
	case 47:
		resp->insertBoolean(isOnAdminList((Player*) inv->getObjectParameter()));
		break;
	case 48:
		resp->insertBoolean(isOnEntryList((Player*) inv->getObjectParameter()));
		break;
	case 49:
		resp->insertBoolean(isOnHopperList((Player*) inv->getObjectParameter()));
		break;
	case 50:
		resp->insertBoolean(isOnBanList((Player*) inv->getObjectParameter()));
		break;
	case 51:
		givePermission((Player*) inv->getObjectParameter(), (Player*) inv->getObjectParameter(), inv->getUnsignedCharParameter());
		break;
	case 52:
		givePermission((Player*) inv->getObjectParameter(), (Guild*) inv->getObjectParameter(), inv->getUnsignedCharParameter());
		break;
	case 53:
		givePermission((Player*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_givePermission__Player_String_char_), inv->getUnsignedCharParameter());
		break;
	case 54:
		revokePermission((Player*) inv->getObjectParameter(), (Player*) inv->getObjectParameter(), inv->getUnsignedCharParameter());
		break;
	case 55:
		revokePermission((Player*) inv->getObjectParameter(), (Guild*) inv->getObjectParameter(), inv->getUnsignedCharParameter());
		break;
	case 56:
		revokePermission((Player*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_revokePermission__Player_String_char_), inv->getUnsignedCharParameter());
		break;
	case 57:
		setPermissionsList(inv->getAsciiParameter(_param0_setPermissionsList__String_));
		break;
	default:
		return NULL;
	}

	return resp;
}

void BuildingObjectAdapter::sendPermissionListTo(Player* player, unsigned char listtype) {
	return ((BuildingObjectImplementation*) impl)->sendPermissionListTo(player, listtype);
}

void BuildingObjectAdapter::handlePermissionListModify(Player* enforcer, unsigned char listtype, int recipientIdx, SuiListBox* suilist) {
	return ((BuildingObjectImplementation*) impl)->handlePermissionListModify(enforcer, listtype, recipientIdx, suilist);
}

void BuildingObjectAdapter::addCell(CellObject* cell) {
	return ((BuildingObjectImplementation*) impl)->addCell(cell);
}

void BuildingObjectAdapter::addSceneObject(SceneObject* sceneObject) {
	return ((BuildingObjectImplementation*) impl)->addSceneObject(sceneObject);
}

void BuildingObjectAdapter::notifyInsertToZone(SceneObject* object) {
	return ((BuildingObjectImplementation*) impl)->notifyInsertToZone(object);
}

bool BuildingObjectAdapter::isStatic() {
	return ((BuildingObjectImplementation*) impl)->isStatic();
}

int BuildingObjectAdapter::getBuildingType() {
	return ((BuildingObjectImplementation*) impl)->getBuildingType();
}

void BuildingObjectAdapter::setBuildingType(int type) {
	return ((BuildingObjectImplementation*) impl)->setBuildingType(type);
}

int BuildingObjectAdapter::getCellCount() {
	return ((BuildingObjectImplementation*) impl)->getCellCount();
}

CellObject* BuildingObjectAdapter::getCell(int idx) {
	return ((BuildingObjectImplementation*) impl)->getCell(idx);
}

bool BuildingObjectAdapter::hasCell(unsigned long long cellID) {
	return ((BuildingObjectImplementation*) impl)->hasCell(cellID);
}

void BuildingObjectAdapter::setPersistent(bool pers) {
	return ((BuildingObjectImplementation*) impl)->setPersistent(pers);
}

void BuildingObjectAdapter::setUpdated(bool up) {
	return ((BuildingObjectImplementation*) impl)->setUpdated(up);
}

bool BuildingObjectAdapter::isPersistent() {
	return ((BuildingObjectImplementation*) impl)->isPersistent();
}

bool BuildingObjectAdapter::isUpdated() {
	return ((BuildingObjectImplementation*) impl)->isUpdated();
}

void BuildingObjectAdapter::setAttributes(String& attributeString) {
	return ((BuildingObjectImplementation*) impl)->setAttributes(attributeString);
}

String& BuildingObjectAdapter::getAttributes() {
	return ((BuildingObjectImplementation*) impl)->getAttributes();
}

String& BuildingObjectAdapter::getOwner() {
	return ((BuildingObjectImplementation*) impl)->getOwner();
}

void BuildingObjectAdapter::setOwner(const String& owner) {
	return ((BuildingObjectImplementation*) impl)->setOwner(owner);
}

unsigned long long BuildingObjectAdapter::getOwnerID() {
	return ((BuildingObjectImplementation*) impl)->getOwnerID();
}

void BuildingObjectAdapter::setOwnerID(unsigned long long owner) {
	return ((BuildingObjectImplementation*) impl)->setOwnerID(owner);
}

bool BuildingObjectAdapter::isPublic() {
	return ((BuildingObjectImplementation*) impl)->isPublic();
}

void BuildingObjectAdapter::setPublicEntry(bool pubentry) {
	return ((BuildingObjectImplementation*) impl)->setPublicEntry(pubentry);
}

void BuildingObjectAdapter::parseItemAttributes() {
	return ((BuildingObjectImplementation*) impl)->parseItemAttributes();
}

UnicodeString& BuildingObjectAdapter::getName() {
	return ((BuildingObjectImplementation*) impl)->getName();
}

void BuildingObjectAdapter::setName(const String& n) {
	return ((BuildingObjectImplementation*) impl)->setName(n);
}

void BuildingObjectAdapter::setName(const UnicodeString& n) {
	return ((BuildingObjectImplementation*) impl)->setName(n);
}

String& BuildingObjectAdapter::getDefaultName() {
	return ((BuildingObjectImplementation*) impl)->getDefaultName();
}

String& BuildingObjectAdapter::getTemplateName() {
	return ((BuildingObjectImplementation*) impl)->getTemplateName();
}

void BuildingObjectAdapter::lock(bool doLock) {
	return ((BuildingObjectImplementation*) impl)->lock(doLock);
}

void BuildingObjectAdapter::unlock(bool doLock) {
	return ((BuildingObjectImplementation*) impl)->unlock(doLock);
}

void BuildingObjectAdapter::setSize(float minx, float miny, float maxx, float maxy) {
	return ((BuildingObjectImplementation*) impl)->setSize(minx, miny, maxx, maxy);
}

void BuildingObjectAdapter::insert(QuadTreeEntry* obj) {
	return ((BuildingObjectImplementation*) impl)->insert(obj);
}

void BuildingObjectAdapter::remove(QuadTreeEntry* obj) {
	return ((BuildingObjectImplementation*) impl)->remove(obj);
}

void BuildingObjectAdapter::removeAll() {
	return ((BuildingObjectImplementation*) impl)->removeAll();
}

bool BuildingObjectAdapter::update(QuadTreeEntry* obj) {
	return ((BuildingObjectImplementation*) impl)->update(obj);
}

void BuildingObjectAdapter::inRange(QuadTreeEntry* obj, float range) {
	return ((BuildingObjectImplementation*) impl)->inRange(obj, range);
}

bool BuildingObjectAdapter::getStorageLoaded() {
	return ((BuildingObjectImplementation*) impl)->getStorageLoaded();
}

void BuildingObjectAdapter::setStorageLoaded(bool setter) {
	return ((BuildingObjectImplementation*) impl)->setStorageLoaded(setter);
}

bool BuildingObjectAdapter::isCloningFacility() {
	return ((BuildingObjectImplementation*) impl)->isCloningFacility();
}

bool BuildingObjectAdapter::isOwnedBy(Player* player) {
	return ((BuildingObjectImplementation*) impl)->isOwnedBy(player);
}

bool BuildingObjectAdapter::isOnAdminList(Player* player) {
	return ((BuildingObjectImplementation*) impl)->isOnAdminList(player);
}

bool BuildingObjectAdapter::isOnEntryList(Player* player) {
	return ((BuildingObjectImplementation*) impl)->isOnEntryList(player);
}

bool BuildingObjectAdapter::isOnHopperList(Player* player) {
	return ((BuildingObjectImplementation*) impl)->isOnHopperList(player);
}

bool BuildingObjectAdapter::isOnBanList(Player* player) {
	return ((BuildingObjectImplementation*) impl)->isOnBanList(player);
}

void BuildingObjectAdapter::givePermission(Player* enforcer, Player* recipient, unsigned char permission) {
	return ((BuildingObjectImplementation*) impl)->givePermission(enforcer, recipient, permission);
}

void BuildingObjectAdapter::givePermission(Player* enforcer, Guild* guild, unsigned char permission) {
	return ((BuildingObjectImplementation*) impl)->givePermission(enforcer, guild, permission);
}

void BuildingObjectAdapter::givePermission(Player* enforcer, const String& entryname, unsigned char permission) {
	return ((BuildingObjectImplementation*) impl)->givePermission(enforcer, entryname, permission);
}

void BuildingObjectAdapter::revokePermission(Player* enforcer, Player* recipient, unsigned char permission) {
	return ((BuildingObjectImplementation*) impl)->revokePermission(enforcer, recipient, permission);
}

void BuildingObjectAdapter::revokePermission(Player* enforcer, Guild* guild, unsigned char permission) {
	return ((BuildingObjectImplementation*) impl)->revokePermission(enforcer, guild, permission);
}

void BuildingObjectAdapter::revokePermission(Player* enforcer, const String& entryname, unsigned char permission) {
	return ((BuildingObjectImplementation*) impl)->revokePermission(enforcer, entryname, permission);
}

void BuildingObjectAdapter::setPermissionsList(const String& permissionsString) {
	return ((BuildingObjectImplementation*) impl)->setPermissionsList(permissionsString);
}

/*
 *	BuildingObjectHelper
 */

BuildingObjectHelper* BuildingObjectHelper::staticInitializer = BuildingObjectHelper::instance();

BuildingObjectHelper::BuildingObjectHelper() {
	className = "BuildingObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void BuildingObjectHelper::finalizeHelper() {
	BuildingObjectHelper::finalize();
}

DistributedObject* BuildingObjectHelper::instantiateObject() {
	return new BuildingObject(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* BuildingObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new BuildingObjectAdapter((BuildingObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	BuildingObjectServant
 */

BuildingObjectServant::BuildingObjectServant(unsigned long long oid, int type) : SceneObjectImplementation(oid, type) {
	_classHelper = BuildingObjectHelper::instance();
}

BuildingObjectServant::~BuildingObjectServant() {
}

void BuildingObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (BuildingObject*) stub;
	SceneObjectServant::_setStub(stub);
}

DistributedObjectStub* BuildingObjectServant::_getStub() {
	return _this;
}

