/*
Copyright (C) 2007 <SWGEmu>
 
This File is part of Core3.
 
This program is free software; you can redistribute 
it and/or modify it under the terms of the GNU Lesser 
General Public License as published by the Free Software
Foundation; either version 2 of the License, 
or (at your option) any later version.
 
This program is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
See the GNU Lesser General Public License for
more details.
 
You should have received a copy of the GNU Lesser General 
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 
Linking Engine3 statically or dynamically with other modules 
is making a combined work based on Engine3. 
Thus, the terms and conditions of the GNU Lesser General Public License 
cover the whole combination.
 
In addition, as a special exception, the copyright holders of Engine3 
give you permission to combine Engine3 program with free software 
programs or libraries that are released under the GNU LGPL and with 
code included in the standard release of Core3 under the GNU LGPL 
license (or modified versions of such code, with unchanged license). 
You may copy and distribute such a system following the terms of the 
GNU LGPL for Engine3 and the licenses of the other code concerned, 
provided that you include the source code of that other code when 
and as the GNU LGPL requires distribution of source code.
 
Note that people who make modified versions of Engine3 are not obligated 
to grant this special exception for their modified versions; 
it is their choice whether to do so. The GNU Lesser General Public License 
gives permission to release a modified version without this exception; 
this exception also makes it possible to release a modified version 
which carries forward this exception.
*/

include "engine/service/proto/BaseMessage";

include "engine/util/QuadTreeEntry";

import "cell/CellObject";

import "../scene/SceneObject";
import "../player/Player";
import "../guild/Guild";
import "../creature/CreatureObject";

import "../../Zone";

interface BuildingObject implements SceneObject {
	BuildingObject(unsigned long oid, boolean staticBuilding, int bType = 1) {
		super(oid, int type);
	}
	
	//void sendTo(Player* player);
	//void sendDestroyTo(Player* player);
		
	void addCell(CellObject cell);
	
	void addSceneObject(SceneObject sceneObject);
		
	void notifyInsertToZone(SceneObject object);
		
	boolean isStatic();
	
	int getBuildingType();
	void setBuildingType(int type);
	
	int getCellCount();
	CellObject getCell(int idx);
	boolean hasCell(unsigned long cellID);
	
	void setPersistent(boolean pers);
	void setUpdated(boolean up);
	
	boolean isPersistent();
	boolean isUpdated();

	void setAttributes(String attributeString);
	String getAttributes();
	
	String getOwner();
	void setOwner(const String owner);
	
	unsigned long getOwnerID();
	void setOwnerID(unsigned long owner);
	
	boolean isPublic();
	void setPublicEntry(boolean pubentry);

	void parseItemAttributes();

	UnicodeString getName();
	void setName(const String n);
	void setName(const UnicodeString n);

	String getDefaultName();
	
	String getTemplateName();
	
	void lock(boolean doLock = true);
	void unlock(boolean doLock = true);
	
	void setSize(float minx, float miny, float maxx, float maxy);
	void insert(QuadTreeEntry obj);
	void remove(QuadTreeEntry obj);
	void removeAll();
	boolean update(QuadTreeEntry obj);
	void inRange(QuadTreeEntry obj, float range);
	
	//itemStorage getter/setter
	boolean getStorageLoaded();

	void setStorageLoaded(boolean setter);
	
	boolean isCloningFacility();
	
	boolean isOwnedBy(Player player);
	boolean isOnAdminList(Player player);
	boolean isOnEntryList(Player player);
	boolean isOnHopperList(Player player);
	boolean isOnBanList(Player player);
	
	void givePermission(Player enforcer, Player recipient, unsigned char permission);
	void givePermission(Player enforcer, Guild guild, unsigned char permission);
	void givePermission(Player enforcer, const String entryname, unsigned char permission);
	void revokePermission(Player enforcer, Player recipient, unsigned char permission);
	void revokePermission(Player enforcer, Guild guild, unsigned char permission);
	void revokePermission(Player enforcer, const String entryname, unsigned char permission);
	
	void setPermissionsList(const String permissionsString);
}
