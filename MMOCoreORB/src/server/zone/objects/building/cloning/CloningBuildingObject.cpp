/*
 *	server/zone/objects/building/cloning/CloningBuildingObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "CloningBuildingObject.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/cell/CellObject.h"


// Imported class dependencies

#include "system/lang/Time.h"

#include "server/zone/managers/planet/MapLocationTable.h"

#include "server/zone/objects/scene/ObserverEventMap.h"

#include "system/util/Vector.h"

#include "server/zone/managers/creature/CreatureManager.h"

#include "server/zone/ZoneProcessServerImplementation.h"

#include "engine/util/QuadTree.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "server/zone/objects/scene/variables/CustomizationVariables.h"

#include "server/zone/objects/scene/variables/StringId.h"

#include "server/zone/objects/scene/variables/DeltaVector.h"

#include "server/zone/objects/structure/StructurePermissionList.h"

#include "engine/util/Quaternion.h"

#include "system/util/VectorMap.h"

#include "server/zone/managers/object/ObjectMap.h"

#include "server/zone/objects/structure/events/StructureMaintenanceTask.h"

#include "server/zone/objects/tangible/terminal/structure/StructureTerminal.h"

#include "server/zone/objects/tangible/sign/SignObject.h"

#include "server/zone/Zone.h"

#include "server/zone/managers/planet/HeightMap.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "system/util/SortedVector.h"

#include "server/zone/managers/planet/PlanetManager.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

/*
 *	CloningBuildingObjectStub
 */

CloningBuildingObject::CloningBuildingObject() : BuildingObject(DummyConstructorParameter::instance()) {
	CloningBuildingObjectImplementation* _implementation = new CloningBuildingObjectImplementation();
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

CloningBuildingObject::CloningBuildingObject(DummyConstructorParameter* param) : BuildingObject(param) {
}

CloningBuildingObject::~CloningBuildingObject() {
}


void CloningBuildingObject::loadTemplateData(SharedObjectTemplate* templateData) {
	CloningBuildingObjectImplementation* _implementation = (CloningBuildingObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->loadTemplateData(templateData);
}

bool CloningBuildingObject::isCloningBuildingObject() {
	CloningBuildingObjectImplementation* _implementation = (CloningBuildingObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isCloningBuildingObject();
}

CloneSpawnPoint* CloningBuildingObject::getRandomSpawnPoint() {
	CloningBuildingObjectImplementation* _implementation = (CloningBuildingObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getRandomSpawnPoint();
}

DistributedObjectServant* CloningBuildingObject::_getImplementation() {
	return getForUpdate();}

void CloningBuildingObject::_setImplementation(DistributedObjectServant* servant) {
	setObject((ManagedObjectImplementation*) servant);}

/*
 *	CloningBuildingObjectImplementation
 */

CloningBuildingObjectImplementation::CloningBuildingObjectImplementation(DummyConstructorParameter* param) : BuildingObjectImplementation(param) {
	_initializeImplementation();
}


CloningBuildingObjectImplementation::~CloningBuildingObjectImplementation() {
}


void CloningBuildingObjectImplementation::finalize() {
}

void CloningBuildingObjectImplementation::_initializeImplementation() {
	_setClassHelper(CloningBuildingObjectHelper::instance());

	_serializationHelperMethod();
}

void CloningBuildingObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (CloningBuildingObject*) stub;
	BuildingObjectImplementation::_setStub(stub);
}

DistributedObjectStub* CloningBuildingObjectImplementation::_getStub() {
	return _this;
}

CloningBuildingObjectImplementation::operator const CloningBuildingObject*() {
	return _this;
}

TransactionalObject* CloningBuildingObjectImplementation::clone() {
	return (TransactionalObject*) new CloningBuildingObjectImplementation(*this);
}


void CloningBuildingObjectImplementation::lock(bool doLock) {
}

void CloningBuildingObjectImplementation::lock(ManagedObject* obj) {
}

void CloningBuildingObjectImplementation::rlock(bool doLock) {
}

void CloningBuildingObjectImplementation::wlock(bool doLock) {
}

void CloningBuildingObjectImplementation::wlock(ManagedObject* obj) {
}

void CloningBuildingObjectImplementation::unlock(bool doLock) {
}

void CloningBuildingObjectImplementation::runlock(bool doLock) {
}

void CloningBuildingObjectImplementation::_serializationHelperMethod() {
	BuildingObjectImplementation::_serializationHelperMethod();

	_setClassName("CloningBuildingObject");

}

CloningBuildingObjectImplementation::CloningBuildingObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/building/cloning/CloningBuildingObject.idl(57):  		Logger.setLoggingName("CloningBuildingObject");
	Logger::setLoggingName("CloningBuildingObject");
}

void CloningBuildingObjectImplementation::loadTemplateData(SharedObjectTemplate* templateData) {
	// server/zone/objects/building/cloning/CloningBuildingObject.idl(63):  		super.loadTemplateData(templateData);
	BuildingObjectImplementation::loadTemplateData(templateData);
}

bool CloningBuildingObjectImplementation::isCloningBuildingObject() {
	// server/zone/objects/building/cloning/CloningBuildingObject.idl(67):  		return true;
	return true;
}

CloneSpawnPoint* CloningBuildingObjectImplementation::getRandomSpawnPoint() {
	// server/zone/objects/building/cloning/CloningBuildingObject.idl(72):  		CloningBuildingObjectTemplate cloningTemplate = null;
	CloningBuildingObjectTemplate* cloningTemplate = NULL;
	// server/zone/objects/building/cloning/CloningBuildingObject.idl(74):  
	if (BuildingObjectImplementation::templateObject->isCloningBuildingObjectTemplate()){
	// server/zone/objects/building/cloning/CloningBuildingObject.idl(75):  			cloningTemplate = (CloningBuildingObjectTemplate) super.templateObject;
	cloningTemplate = (CloningBuildingObjectTemplate*) BuildingObjectImplementation::templateObject;
	// server/zone/objects/building/cloning/CloningBuildingObject.idl(77):  			return cloningTemplate.getRandomSpawnPoint();
	return cloningTemplate->getRandomSpawnPoint();
}

	else {
	// server/zone/objects/building/cloning/CloningBuildingObject.idl(79):  			return null;
	return NULL;
}
}

/*
 *	CloningBuildingObjectAdapter
 */

CloningBuildingObjectAdapter::CloningBuildingObjectAdapter(CloningBuildingObjectImplementation* obj) : BuildingObjectAdapter(obj) {
}

Packet* CloningBuildingObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertBoolean(isCloningBuildingObject());
		break;
	default:
		return NULL;
	}

	return resp;
}

bool CloningBuildingObjectAdapter::isCloningBuildingObject() {
	return ((CloningBuildingObjectImplementation*) impl)->isCloningBuildingObject();
}

/*
 *	CloningBuildingObjectHelper
 */

CloningBuildingObjectHelper* CloningBuildingObjectHelper::staticInitializer = CloningBuildingObjectHelper::instance();

CloningBuildingObjectHelper::CloningBuildingObjectHelper() {
	className = "CloningBuildingObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void CloningBuildingObjectHelper::finalizeHelper() {
	CloningBuildingObjectHelper::finalize();
}

DistributedObject* CloningBuildingObjectHelper::instantiateObject() {
	return new CloningBuildingObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* CloningBuildingObjectHelper::instantiateServant() {
	return new CloningBuildingObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* CloningBuildingObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new CloningBuildingObjectAdapter((CloningBuildingObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

