/*
Copyright (C) 2007 <SWGEmu>
 
This File is part of Core3.
 
This program is free software; you can redistribute 
it and/or modify it under the terms of the GNU Lesser 
General Public License as published by the Free Software
Foundation; either version 2 of the License, 
or (at your option) any later version.
 
This program is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
See the GNU Lesser General Public License for
more details.
 
You should have received a copy of the GNU Lesser General 
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 
Linking Engine3 statically or dynamically with other modules 
is making a combined work based on Engine3. 
Thus, the terms and conditions of the GNU Lesser General Public License 
cover the whole combination.
 
In addition, as a special exception, the copyright holders of Engine3 
give you permission to combine Engine3 program with free software 
programs or libraries that are released under the GNU LGPL and with 
code included in the standard release of Core3 under the GNU LGPL 
license (or modified versions of such code, with unchanged license). 
You may copy and distribute such a system following the terms of the 
GNU LGPL for Engine3 and the licenses of the other code concerned, 
provided that you include the source code of that other code when 
and as the GNU LGPL requires distribution of source code.
 
Note that people who make modified versions of Engine3 are not obligated 
to grant this special exception for their modified versions; 
it is their choice whether to do so. The GNU Lesser General Public License 
gives permission to release a modified version without this exception; 
this exception also makes it possible to release a modified version 
which carries forward this exception.
*/

package server.zone.objects.building.city;

import server.zone.objects.building.BuildingObject;
import engine.lua.LuaObject;
import server.zone.Zone;
import server.zone.objects.region.Region;
import server.zone.objects.tangible.terminal.city.CityTerminal;
import server.zone.objects.tangible.terminal.city.CityVoteTerminal;
import system.util.SortedVector;

class CityHallObject extends BuildingObject {
	@dereferenced
	protected SortedVector<unsigned long> declaredCitizens;
	
	protected Region cityRegion;
	protected string cityName;
	
	protected unsigned long mayorObjectID;
	
	protected CityTerminal cityTerminal;
	protected CityVoteTerminal cityVoteTerminal;
	
	public CityHallObject() {
		setLoggingName("CityHallObject");
		
		cityName = "test city";
		
		mayorObjectID = 0;
	}
	
	/**
	 * Inserts this object into zone
	 * @pre { this object is locked }
	 * @post { this object is locked and inserted into zone }
	 * @param zone Zone object where this object will be inserted
	 */
	public void insertToZone(Zone zone) {
		super.insertToZone(zone);
		
		spawnCityHallObjects();
	}
	
	public native void spawnCityHallObjects();
	
	public native void trySetCityName(PlayerCreature player, final string name);
	
	public native boolean checkRequisitesForPlacement(PlayerCreature player);
	
	public void setCityName(final string name) {
		cityName = name;
	}
	
	public string getCityName() {
		return cityName;
	}
	
	public native void sendStatusTo(PlayerCreature player);
	public native void sendCitizenshipReportTo(PlayerCreature player);
	public native void sendStructureReportTo(PlayerCreature player);
	public native void sendTreasuryReportTo(PlayerCreature player);
	
	public native void sendChangeCityNameTo(PlayerCreature player);
	public native void sendManageMilitiaTo(PlayerCreature player);
	public native void sendAdjustTaxesTo(PlayerCreature player);
	public native void sendTreasuryDepositTo(PlayerCreature player);
	public native void sendTreasuryWithdrawalTo(PlayerCreature player);
	public native void sendCitySpecializationSelectionTo(PlayerCreature player);
	
	public native void toggleCityRegistration();
	
	/**
	 * Gets called when the structure has been created;
	 */
	public native int notifyStructurePlaced(PlayerCreature player);
	
	public boolean isCityHallBuilding() {
		return true;
	}
	
	/**
	 * Adds a player to the declared citizens list, making them a citizen of the city.
	 * @param player The player declaring citizenship
	 */
	public void declareCitizenship(PlayerCreature player) {
		declaredCitizens.put(player.getObjectID());
	}
	
	/**
	 * Adds a player to the declared citizens list, making them a citizen of the city.
	 * @param playerID The object id of the player declaring citizenship
	 */
	public void declareCitizenship(unsigned long playerID) {
		declaredCitizens.put(playerID);
	}
	
	/**
	 * Remvoes a player from the declared citizens list
	 * @param player The player losing citizenship
	 */
	public void revokeCitizenship(PlayerCreature player) {
		declaredCitizens.drop(player.getObjectID());
	}
	
	/**
	 * Removes a player from the declared citizens list
	 * @param playerID The object id of the player losing citizenship
	 */
	public void revokeCitizenship(unsigned long playerID) {
		declaredCitizens.drop(playerID);
	}
	
	public unsigned long getMayorObjectID() {
		return mayorObjectID;
	}
	
	public void setMayorObjectID(unsigned long oid) {
		mayorObjectID = oid;
	}
	
	public boolean isMayorOf(PlayerCreature player) {
		return player.getObjectID() == mayorObjectID;
	}
	
	public boolean isMayorOf(unsigned long playerID) {
		return playerID == mayorObjectID;
	}
	
	public boolean isCitizenOf(PlayerCreature player) {
		return declaredCitizens.contains(player.getObjectID());
	}
	
	public boolean isCitizenOf(unsigned long playerID) {
		return declaredCitizens.contains(playerID);
	}
	
	public CityTerminal getCityTerminal() {
		return cityTerminal;
	}
	
	public CityVoteTerminal getCityVoteTerminal() {
		return cityVoteTerminal;
	}
	
	public Region getCityRegion() {
		return cityRegion;
	}
	
	public void setCityRegion(Region region) {
		cityRegion = region;
	}
}
