/*
 *	server/zone/objects/building/city/CityHallObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "CityHallObject.h"

#include "server/zone/Zone.h"

#include "server/zone/managers/city/CityManager.h"

#include "server/zone/objects/region/Region.h"

#include "server/zone/objects/tangible/terminal/city/CityTerminal.h"

#include "server/zone/objects/tangible/terminal/city/CityVoteTerminal.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	CityHallObjectStub
 */

enum {RPC_NOTIFYINSERTTOZONE__ZONE_ = 6,RPC_NOTIFYREMOVEFROMZONE__,RPC_NOTIFYLOADFROMDATABASE__,RPC_SPAWNCITYHALLOBJECTS__,RPC_DESPAWNCITYHALLOBJECTS__,RPC_CHECKREQUISITESFORPLACEMENT__CREATUREOBJECT_,RPC_SETCITYNAME__STRING_,RPC_GETCITYNAME__,RPC_GETCITYRANK__,RPC_SENDCITYNAMEPROMPTTO__CREATUREOBJECT_BOOL_,RPC_SENDSTATUSTO__CREATUREOBJECT_,RPC_SENDCITIZENSHIPREPORTTO__CREATUREOBJECT_,RPC_SENDSTRUCTUREREPORTTO__CREATUREOBJECT_,RPC_SENDTREASURYREPORTTO__CREATUREOBJECT_,RPC_SENDCITYADVANCEMENTTO__CREATUREOBJECT_,RPC_SENDMAINTENANCEREPORTTO__CREATUREOBJECT_,RPC_SENDCHANGECITYNAMETO__CREATUREOBJECT_,RPC_SENDENABLEZONINGTO__CREATUREOBJECT_,RPC_SENDMANAGEMILITIATO__CREATUREOBJECT_,RPC_SENDADDMILITIAMEMBERTO__CREATUREOBJECT_,RPC_SENDADJUSTTAXESTO__CREATUREOBJECT_,RPC_SENDTREASURYDEPOSITTO__CREATUREOBJECT_,RPC_SENDTREASURYWITHDRAWALTO__CREATUREOBJECT_,RPC_SENDCITYSPECIALIZATIONSELECTIONTO__CREATUREOBJECT_,RPC_TOGGLECITYREGISTRATION__CREATUREOBJECT_,RPC_DESTROYOBJECTFROMDATABASE__BOOL_,RPC_NOTIFYSTRUCTUREPLACED__CREATUREOBJECT_,RPC_ISCITYHALLBUILDING__,RPC_ADDZONINGRIGHTS__LONG_INT_,RPC_REMOVEZONINGRIGHTS__LONG_,RPC_HASZONINGRIGHTS__LONG_,RPC_GETMAYOROBJECTID__,RPC_SETMAYOROBJECTID__LONG_,RPC_ISMAYOR__LONG_,RPC_ISBANNED__LONG_,RPC_ADDBANNEDPLAYER__LONG_,RPC_REMOVEBANNEDPLAYER__LONG_,RPC_GETCITYTERMINAL__,RPC_GETCITYVOTETERMINAL__,RPC_GETCIVICSTRUCTURECAP__,RPC_ISZONINGENABLED__,RPC_GETREGION__,RPC_SETREGION__REGION_,RPC_TOGGLEZONINGENABLED__CREATUREOBJECT_,RPC_SETZONINGENABLED__BOOL_,RPC_ISCITYUPDATEPAST__,RPC_RESCHEDULECITYUPDATE__INT_,RPC_GETCITIZENCOUNT__,RPC_ADDCITIZEN__LONG_,RPC_REMOVECITIZEN__LONG_,RPC_ISCITIZEN__LONG_,RPC_ADDMILITIAMEMBER__LONG_,RPC_REMOVEMILITIAMEMBER__LONG_,RPC_ISMILITIAMEMBER__LONG_,RPC_GETCITIZENOBJECTID__INT_,RPC_SETCITYRANK__BYTE_};

CityHallObject::CityHallObject() : BuildingObject(DummyConstructorParameter::instance()) {
	CityHallObjectImplementation* _implementation = new CityHallObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

CityHallObject::CityHallObject(DummyConstructorParameter* param) : BuildingObject(param) {
}

CityHallObject::~CityHallObject() {
}



void CityHallObject::notifyInsertToZone(Zone* zone) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYINSERTTOZONE__ZONE_);
		method.addObjectParameter(zone);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyInsertToZone(zone);
}

void CityHallObject::notifyRemoveFromZone() {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYREMOVEFROMZONE__);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyRemoveFromZone();
}

void CityHallObject::notifyLoadFromDatabase() {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYLOADFROMDATABASE__);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyLoadFromDatabase();
}

void CityHallObject::spawnCityHallObjects() {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SPAWNCITYHALLOBJECTS__);

		method.executeWithVoidReturn();
	} else
		_implementation->spawnCityHallObjects();
}

void CityHallObject::despawnCityHallObjects() {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DESPAWNCITYHALLOBJECTS__);

		method.executeWithVoidReturn();
	} else
		_implementation->despawnCityHallObjects();
}

bool CityHallObject::checkRequisitesForPlacement(CreatureObject* player) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CHECKREQUISITESFORPLACEMENT__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->checkRequisitesForPlacement(player);
}

void CityHallObject::setCityName(const String& name) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCITYNAME__STRING_);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		_implementation->setCityName(name);
}

String CityHallObject::getCityName() {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCITYNAME__);

		method.executeWithAsciiReturn(_return_getCityName);
		return _return_getCityName;
	} else
		return _implementation->getCityName();
}

byte CityHallObject::getCityRank() {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCITYRANK__);

		return method.executeWithByteReturn();
	} else
		return _implementation->getCityRank();
}

void CityHallObject::sendCityNamePromptTo(CreatureObject* player, bool newCity) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDCITYNAMEPROMPTTO__CREATUREOBJECT_BOOL_);
		method.addObjectParameter(player);
		method.addBooleanParameter(newCity);

		method.executeWithVoidReturn();
	} else
		_implementation->sendCityNamePromptTo(player, newCity);
}

void CityHallObject::sendStatusTo(CreatureObject* player) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDSTATUSTO__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendStatusTo(player);
}

void CityHallObject::sendCitizenshipReportTo(CreatureObject* player) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDCITIZENSHIPREPORTTO__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendCitizenshipReportTo(player);
}

void CityHallObject::sendStructureReportTo(CreatureObject* player) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDSTRUCTUREREPORTTO__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendStructureReportTo(player);
}

void CityHallObject::sendTreasuryReportTo(CreatureObject* player) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDTREASURYREPORTTO__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendTreasuryReportTo(player);
}

void CityHallObject::sendCityAdvancementTo(CreatureObject* player) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDCITYADVANCEMENTTO__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendCityAdvancementTo(player);
}

void CityHallObject::sendMaintenanceReportTo(CreatureObject* player) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDMAINTENANCEREPORTTO__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendMaintenanceReportTo(player);
}

void CityHallObject::sendChangeCityNameTo(CreatureObject* player) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDCHANGECITYNAMETO__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendChangeCityNameTo(player);
}

void CityHallObject::sendEnableZoningTo(CreatureObject* player) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDENABLEZONINGTO__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendEnableZoningTo(player);
}

void CityHallObject::sendManageMilitiaTo(CreatureObject* player) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDMANAGEMILITIATO__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendManageMilitiaTo(player);
}

void CityHallObject::sendAddMilitiaMemberTo(CreatureObject* player) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDADDMILITIAMEMBERTO__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendAddMilitiaMemberTo(player);
}

void CityHallObject::sendAdjustTaxesTo(CreatureObject* player) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDADJUSTTAXESTO__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendAdjustTaxesTo(player);
}

void CityHallObject::sendTreasuryDepositTo(CreatureObject* player) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDTREASURYDEPOSITTO__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendTreasuryDepositTo(player);
}

void CityHallObject::sendTreasuryWithdrawalTo(CreatureObject* player) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDTREASURYWITHDRAWALTO__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendTreasuryWithdrawalTo(player);
}

void CityHallObject::sendCitySpecializationSelectionTo(CreatureObject* player) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDCITYSPECIALIZATIONSELECTIONTO__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendCitySpecializationSelectionTo(player);
}

void CityHallObject::toggleCityRegistration(CreatureObject* player) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_TOGGLECITYREGISTRATION__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->toggleCityRegistration(player);
}

void CityHallObject::destroyObjectFromDatabase(bool destroyContainedObjects) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DESTROYOBJECTFROMDATABASE__BOOL_);
		method.addBooleanParameter(destroyContainedObjects);

		method.executeWithVoidReturn();
	} else
		_implementation->destroyObjectFromDatabase(destroyContainedObjects);
}

int CityHallObject::notifyStructurePlaced(CreatureObject* creature) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYSTRUCTUREPLACED__CREATUREOBJECT_);
		method.addObjectParameter(creature);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyStructurePlaced(creature);
}

bool CityHallObject::isCityHallBuilding() {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCITYHALLBUILDING__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isCityHallBuilding();
}

void CityHallObject::addZoningRights(unsigned long long playerID, unsigned int seconds) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDZONINGRIGHTS__LONG_INT_);
		method.addUnsignedLongParameter(playerID);
		method.addUnsignedIntParameter(seconds);

		method.executeWithVoidReturn();
	} else
		_implementation->addZoningRights(playerID, seconds);
}

void CityHallObject::removeZoningRights(unsigned long long playerID) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEZONINGRIGHTS__LONG_);
		method.addUnsignedLongParameter(playerID);

		method.executeWithVoidReturn();
	} else
		_implementation->removeZoningRights(playerID);
}

bool CityHallObject::hasZoningRights(unsigned long long playerID) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASZONINGRIGHTS__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasZoningRights(playerID);
}

unsigned long long CityHallObject::getMayorObjectID() {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMAYOROBJECTID__);

		return method.executeWithUnsignedLongReturn();
	} else
		return _implementation->getMayorObjectID();
}

void CityHallObject::setMayorObjectID(unsigned long long oid) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMAYOROBJECTID__LONG_);
		method.addUnsignedLongParameter(oid);

		method.executeWithVoidReturn();
	} else
		_implementation->setMayorObjectID(oid);
}

bool CityHallObject::isMayor(unsigned long long playerID) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISMAYOR__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isMayor(playerID);
}

bool CityHallObject::isBanned(unsigned long long playerID) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISBANNED__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isBanned(playerID);
}

void CityHallObject::addBannedPlayer(unsigned long long playerID) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDBANNEDPLAYER__LONG_);
		method.addUnsignedLongParameter(playerID);

		method.executeWithVoidReturn();
	} else
		_implementation->addBannedPlayer(playerID);
}

void CityHallObject::removeBannedPlayer(unsigned long long playerID) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEBANNEDPLAYER__LONG_);
		method.addUnsignedLongParameter(playerID);

		method.executeWithVoidReturn();
	} else
		_implementation->removeBannedPlayer(playerID);
}

CityTerminal* CityHallObject::getCityTerminal() {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCITYTERMINAL__);

		return static_cast<CityTerminal*>(method.executeWithObjectReturn());
	} else
		return _implementation->getCityTerminal();
}

CityVoteTerminal* CityHallObject::getCityVoteTerminal() {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCITYVOTETERMINAL__);

		return static_cast<CityVoteTerminal*>(method.executeWithObjectReturn());
	} else
		return _implementation->getCityVoteTerminal();
}

int CityHallObject::getCivicStructureCap() {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCIVICSTRUCTURECAP__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getCivicStructureCap();
}

bool CityHallObject::isZoningEnabled() {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISZONINGENABLED__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isZoningEnabled();
}

Region* CityHallObject::getRegion() {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETREGION__);

		return static_cast<Region*>(method.executeWithObjectReturn());
	} else
		return _implementation->getRegion();
}

void CityHallObject::setRegion(Region* reg) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETREGION__REGION_);
		method.addObjectParameter(reg);

		method.executeWithVoidReturn();
	} else
		_implementation->setRegion(reg);
}

void CityHallObject::toggleZoningEnabled(CreatureObject* player) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_TOGGLEZONINGENABLED__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->toggleZoningEnabled(player);
}

void CityHallObject::setZoningEnabled(bool enabled) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETZONINGENABLED__BOOL_);
		method.addBooleanParameter(enabled);

		method.executeWithVoidReturn();
	} else
		_implementation->setZoningEnabled(enabled);
}

bool CityHallObject::isCityUpdatePast() {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCITYUPDATEPAST__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isCityUpdatePast();
}

void CityHallObject::rescheduleCityUpdate(unsigned int minutes) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RESCHEDULECITYUPDATE__INT_);
		method.addUnsignedIntParameter(minutes);

		method.executeWithVoidReturn();
	} else
		_implementation->rescheduleCityUpdate(minutes);
}

int CityHallObject::getCitizenCount() {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCITIZENCOUNT__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getCitizenCount();
}

void CityHallObject::addCitizen(unsigned long long playerID) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDCITIZEN__LONG_);
		method.addUnsignedLongParameter(playerID);

		method.executeWithVoidReturn();
	} else
		_implementation->addCitizen(playerID);
}

void CityHallObject::removeCitizen(unsigned long long playerID) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVECITIZEN__LONG_);
		method.addUnsignedLongParameter(playerID);

		method.executeWithVoidReturn();
	} else
		_implementation->removeCitizen(playerID);
}

bool CityHallObject::isCitizen(unsigned long long playerID) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCITIZEN__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isCitizen(playerID);
}

void CityHallObject::addMilitiaMember(unsigned long long playerID) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDMILITIAMEMBER__LONG_);
		method.addUnsignedLongParameter(playerID);

		method.executeWithVoidReturn();
	} else
		_implementation->addMilitiaMember(playerID);
}

void CityHallObject::removeMilitiaMember(unsigned long long playerID) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEMILITIAMEMBER__LONG_);
		method.addUnsignedLongParameter(playerID);

		method.executeWithVoidReturn();
	} else
		_implementation->removeMilitiaMember(playerID);
}

bool CityHallObject::isMilitiaMember(unsigned long long playerID) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISMILITIAMEMBER__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isMilitiaMember(playerID);
}

unsigned long long CityHallObject::getCitizenObjectID(int idx) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCITIZENOBJECTID__INT_);
		method.addSignedIntParameter(idx);

		return method.executeWithUnsignedLongReturn();
	} else
		return _implementation->getCitizenObjectID(idx);
}

void CityHallObject::setCityRank(byte rank) {
	CityHallObjectImplementation* _implementation = static_cast<CityHallObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCITYRANK__BYTE_);
		method.addByteParameter(rank);

		method.executeWithVoidReturn();
	} else
		_implementation->setCityRank(rank);
}

DistributedObjectServant* CityHallObject::_getImplementation() {

	_updated = true;
	return _impl;
}

void CityHallObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	CityHallObjectImplementation
 */

CityHallObjectImplementation::CityHallObjectImplementation(DummyConstructorParameter* param) : BuildingObjectImplementation(param) {
	_initializeImplementation();
}


CityHallObjectImplementation::~CityHallObjectImplementation() {
}


void CityHallObjectImplementation::finalize() {
}

void CityHallObjectImplementation::_initializeImplementation() {
	_setClassHelper(CityHallObjectHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void CityHallObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<CityHallObject*>(stub);
	BuildingObjectImplementation::_setStub(stub);
}

DistributedObjectStub* CityHallObjectImplementation::_getStub() {
	return _this;
}

CityHallObjectImplementation::operator const CityHallObject*() {
	return _this;
}

void CityHallObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void CityHallObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void CityHallObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void CityHallObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void CityHallObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void CityHallObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void CityHallObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void CityHallObjectImplementation::_serializationHelperMethod() {
	BuildingObjectImplementation::_serializationHelperMethod();

	_setClassName("CityHallObject");

}

void CityHallObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(CityHallObjectImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool CityHallObjectImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (BuildingObjectImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "declaredCitizens") {
		TypeInfo<SortedVector<unsigned long long> >::parseFromBinaryStream(&declaredCitizens, stream);
		return true;
	}

	if (_name == "militiaMembers") {
		TypeInfo<SortedVector<unsigned long long> >::parseFromBinaryStream(&militiaMembers, stream);
		return true;
	}

	if (_name == "bannedPlayers") {
		TypeInfo<SortedVector<unsigned long long> >::parseFromBinaryStream(&bannedPlayers, stream);
		return true;
	}

	if (_name == "cityStructures") {
		TypeInfo<SortedVector<unsigned long long> >::parseFromBinaryStream(&cityStructures, stream);
		return true;
	}

	if (_name == "playerZoningRights") {
		TypeInfo<VectorMap<unsigned long long, unsigned int> >::parseFromBinaryStream(&playerZoningRights, stream);
		return true;
	}

	if (_name == "zoningEnabled") {
		TypeInfo<bool >::parseFromBinaryStream(&zoningEnabled, stream);
		return true;
	}

	if (_name == "cityName") {
		TypeInfo<String >::parseFromBinaryStream(&cityName, stream);
		return true;
	}

	if (_name == "cityRank") {
		TypeInfo<byte >::parseFromBinaryStream(&cityRank, stream);
		return true;
	}

	if (_name == "citySpecialization") {
		TypeInfo<byte >::parseFromBinaryStream(&citySpecialization, stream);
		return true;
	}

	if (_name == "incomeTax") {
		TypeInfo<float >::parseFromBinaryStream(&incomeTax, stream);
		return true;
	}

	if (_name == "propertyTax") {
		TypeInfo<float >::parseFromBinaryStream(&propertyTax, stream);
		return true;
	}

	if (_name == "salesTax") {
		TypeInfo<float >::parseFromBinaryStream(&salesTax, stream);
		return true;
	}

	if (_name == "nextCityUpdate") {
		TypeInfo<Time >::parseFromBinaryStream(&nextCityUpdate, stream);
		return true;
	}

	if (_name == "mayorObjectID") {
		TypeInfo<unsigned long long >::parseFromBinaryStream(&mayorObjectID, stream);
		return true;
	}

	if (_name == "cityTerminal") {
		TypeInfo<ManagedReference<CityTerminal* > >::parseFromBinaryStream(&cityTerminal, stream);
		return true;
	}

	if (_name == "cityVoteTerminal") {
		TypeInfo<ManagedReference<CityVoteTerminal* > >::parseFromBinaryStream(&cityVoteTerminal, stream);
		return true;
	}

	if (_name == "townRegion") {
		TypeInfo<ManagedReference<Region* > >::parseFromBinaryStream(&townRegion, stream);
		return true;
	}


	return false;
}

void CityHallObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = CityHallObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int CityHallObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "declaredCitizens";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<SortedVector<unsigned long long> >::toBinaryStream(&declaredCitizens, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "militiaMembers";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<SortedVector<unsigned long long> >::toBinaryStream(&militiaMembers, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "bannedPlayers";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<SortedVector<unsigned long long> >::toBinaryStream(&bannedPlayers, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "cityStructures";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<SortedVector<unsigned long long> >::toBinaryStream(&cityStructures, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "playerZoningRights";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<VectorMap<unsigned long long, unsigned int> >::toBinaryStream(&playerZoningRights, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "zoningEnabled";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<bool >::toBinaryStream(&zoningEnabled, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "cityName";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<String >::toBinaryStream(&cityName, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "cityRank";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<byte >::toBinaryStream(&cityRank, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "citySpecialization";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<byte >::toBinaryStream(&citySpecialization, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "incomeTax";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<float >::toBinaryStream(&incomeTax, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "propertyTax";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<float >::toBinaryStream(&propertyTax, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "salesTax";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<float >::toBinaryStream(&salesTax, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "nextCityUpdate";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<Time >::toBinaryStream(&nextCityUpdate, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "mayorObjectID";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned long long >::toBinaryStream(&mayorObjectID, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "cityTerminal";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<CityTerminal* > >::toBinaryStream(&cityTerminal, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "cityVoteTerminal";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<CityVoteTerminal* > >::toBinaryStream(&cityVoteTerminal, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "townRegion";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<Region* > >::toBinaryStream(&townRegion, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 17 + BuildingObjectImplementation::writeObjectMembers(stream);
}

CityHallObjectImplementation::CityHallObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/building/city/CityHallObject.idl():  		setLoggingName("CityHallObject");
	setLoggingName("CityHallObject");
	// server/zone/objects/building/city/CityHallObject.idl():  		cityName = "test city";
	cityName = "test city";
	// server/zone/objects/building/city/CityHallObject.idl():  		cityRank = CityManager.NEWCITY;
	cityRank = CityManager::NEWCITY;
	// server/zone/objects/building/city/CityHallObject.idl():  		citySpecialization = 0;
	citySpecialization = 0;
	// server/zone/objects/building/city/CityHallObject.idl():  		mayorObjectID = 0;
	mayorObjectID = 0;
	// server/zone/objects/building/city/CityHallObject.idl():  		zoningEnabled = false;
	zoningEnabled = false;
	// server/zone/objects/building/city/CityHallObject.idl():  		incomeTax = 0.0f;
	incomeTax = 0.0f;
	// server/zone/objects/building/city/CityHallObject.idl():  		propertyTax = 0.0f;
	propertyTax = 0.0f;
	// server/zone/objects/building/city/CityHallObject.idl():  		salesTax = 0.0f;
	salesTax = 0.0f;
	// server/zone/objects/building/city/CityHallObject.idl():  		playerZoningRights.setInsertPlan(3);
	(&playerZoningRights)->setInsertPlan(3);
	// server/zone/objects/building/city/CityHallObject.idl():  		playerZoningRights.setNullValue(0);
	(&playerZoningRights)->setNullValue(0);
	// server/zone/objects/building/city/CityHallObject.idl():  		cityStructures.setInsertPlan(3);
	(&cityStructures)->setInsertPlan(3);
	// server/zone/objects/building/city/CityHallObject.idl():  		militiaMembers.setInsertPlan(3);
	(&militiaMembers)->setInsertPlan(3);
	// server/zone/objects/building/city/CityHallObject.idl():  		declaredCitizens.setInsertPlan(3);
	(&declaredCitizens)->setInsertPlan(3);
	// server/zone/objects/building/city/CityHallObject.idl():  		bannedPlayers.setInsertPlan(3);
	(&bannedPlayers)->setInsertPlan(3);
}

void CityHallObjectImplementation::notifyInsertToZone(Zone* zone) {
	// server/zone/objects/building/city/CityHallObject.idl():  		super.notifyInsertToZone(zone);
	BuildingObjectImplementation::notifyInsertToZone(zone);
	// server/zone/objects/building/city/CityHallObject.idl():  		spawnCityHallObjects();
	spawnCityHallObjects();
}

void CityHallObjectImplementation::notifyRemoveFromZone() {
	// server/zone/objects/building/city/CityHallObject.idl():  		despawnCityHallObjects();
	despawnCityHallObjects();
	// server/zone/objects/building/city/CityHallObject.idl():  		super.notifyRemoveFromZone();
	BuildingObjectImplementation::notifyRemoveFromZone();
	// server/zone/objects/building/city/CityHallObject.idl():  		updateToDatabaseWithoutChildren();
	updateToDatabaseWithoutChildren();
}

void CityHallObjectImplementation::notifyLoadFromDatabase() {
	// server/zone/objects/building/city/CityHallObject.idl():  		super.notifyLoadFromDatabase();
	BuildingObjectImplementation::notifyLoadFromDatabase();
	// server/zone/objects/building/city/CityHallObject.idl():  		CityManager 
	if (BuildingObjectImplementation::getZone() == NULL)	// server/zone/objects/building/city/CityHallObject.idl():  			return;
	return;
	// server/zone/objects/building/city/CityHallObject.idl():  		CityManager cityManager = super.getZone().getCityManager();
	CityManager* cityManager = BuildingObjectImplementation::getZone()->getCityManager();
	// server/zone/objects/building/city/CityHallObject.idl():  		cityManager.addCity(this);
	cityManager->addCity(_this);
}

void CityHallObjectImplementation::setCityName(const String& name) {
	// server/zone/objects/building/city/CityHallObject.idl():  		cityName = name;
	cityName = name;
}

String CityHallObjectImplementation::getCityName() {
	// server/zone/objects/building/city/CityHallObject.idl():  		return cityName;
	return cityName;
}

byte CityHallObjectImplementation::getCityRank() {
	// server/zone/objects/building/city/CityHallObject.idl():  		return cityRank;
	return cityRank;
}

bool CityHallObjectImplementation::isCityHallBuilding() {
	// server/zone/objects/building/city/CityHallObject.idl():  		return true;
	return true;
}

void CityHallObjectImplementation::removeZoningRights(unsigned long long playerID) {
	// server/zone/objects/building/city/CityHallObject.idl():  		playerZoningRights.drop(playerID);
	(&playerZoningRights)->drop(playerID);
}

unsigned long long CityHallObjectImplementation::getMayorObjectID() {
	// server/zone/objects/building/city/CityHallObject.idl():  		return mayorObjectID;
	return mayorObjectID;
}

void CityHallObjectImplementation::setMayorObjectID(unsigned long long oid) {
	// server/zone/objects/building/city/CityHallObject.idl():  		mayorObjectID = oid;
	mayorObjectID = oid;
}

bool CityHallObjectImplementation::isMayor(unsigned long long playerID) {
	// server/zone/objects/building/city/CityHallObject.idl():  		return playerID == mayorObjectID;
	return playerID == mayorObjectID;
}

bool CityHallObjectImplementation::isBanned(unsigned long long playerID) {
	// server/zone/objects/building/city/CityHallObject.idl():  		return bannedPlayers.contains(playerID);
	return (&bannedPlayers)->contains(playerID);
}

void CityHallObjectImplementation::addBannedPlayer(unsigned long long playerID) {
	// server/zone/objects/building/city/CityHallObject.idl():  		bannedPlayers.put(playerID);
	(&bannedPlayers)->put(playerID);
}

void CityHallObjectImplementation::removeBannedPlayer(unsigned long long playerID) {
	// server/zone/objects/building/city/CityHallObject.idl():  		bannedPlayers.drop(playerID);
	(&bannedPlayers)->drop(playerID);
}

CityTerminal* CityHallObjectImplementation::getCityTerminal() {
	// server/zone/objects/building/city/CityHallObject.idl():  		return cityTerminal;
	return cityTerminal;
}

CityVoteTerminal* CityHallObjectImplementation::getCityVoteTerminal() {
	// server/zone/objects/building/city/CityHallObject.idl():  		return cityVoteTerminal;
	return cityVoteTerminal;
}

int CityHallObjectImplementation::getCivicStructureCap() {
	// server/zone/objects/building/city/CityHallObject.idl():  		return cityRank * 6 + 1;
	return cityRank * 6 + 1;
}

bool CityHallObjectImplementation::isZoningEnabled() {
	// server/zone/objects/building/city/CityHallObject.idl():  		return zoningEnabled;
	return zoningEnabled;
}

Region* CityHallObjectImplementation::getRegion() {
	// server/zone/objects/building/city/CityHallObject.idl():  		return townRegion;
	return townRegion;
}

void CityHallObjectImplementation::setRegion(Region* reg) {
	// server/zone/objects/building/city/CityHallObject.idl():  		townRegion = reg;
	townRegion = reg;
}

void CityHallObjectImplementation::toggleZoningEnabled(CreatureObject* player) {
	// server/zone/objects/building/city/CityHallObject.idl():  		zoningEnabled = !zoningEnabled;
	zoningEnabled = !zoningEnabled;
	// server/zone/objects/building/city/CityHallObject.idl():  			player.sendSystemMessage("@city/city:zoning_disabled");
	if (zoningEnabled)	// server/zone/objects/building/city/CityHallObject.idl():  			player.sendSystemMessage("@city/city:zoning_enabled");
	player->sendSystemMessage("@city/city:zoning_enabled");

	else 	// server/zone/objects/building/city/CityHallObject.idl():  			player.sendSystemMessage("@city/city:zoning_disabled");
	player->sendSystemMessage("@city/city:zoning_disabled");
}

void CityHallObjectImplementation::setZoningEnabled(bool enabled) {
	// server/zone/objects/building/city/CityHallObject.idl():  		zoningEnabled = enabled;
	zoningEnabled = enabled;
}

bool CityHallObjectImplementation::isCityUpdatePast() {
	// server/zone/objects/building/city/CityHallObject.idl():  		return nextCityUpdate.isPast();
	return (&nextCityUpdate)->isPast();
}

int CityHallObjectImplementation::getCitizenCount() {
	// server/zone/objects/building/city/CityHallObject.idl():  		return declaredCitizens.size();
	return (&declaredCitizens)->size();
}

void CityHallObjectImplementation::addCitizen(unsigned long long playerID) {
	// server/zone/objects/building/city/CityHallObject.idl():  		declaredCitizens.put(playerID);
	(&declaredCitizens)->put(playerID);
}

void CityHallObjectImplementation::removeCitizen(unsigned long long playerID) {
	// server/zone/objects/building/city/CityHallObject.idl():  		declaredCitizens.drop(playerID);
	(&declaredCitizens)->drop(playerID);
}

bool CityHallObjectImplementation::isCitizen(unsigned long long playerID) {
	// server/zone/objects/building/city/CityHallObject.idl():  		return declaredCitizens.contains(playerID);
	return (&declaredCitizens)->contains(playerID);
}

void CityHallObjectImplementation::addMilitiaMember(unsigned long long playerID) {
	// server/zone/objects/building/city/CityHallObject.idl():  		militiaMembers.put(playerID);
	(&militiaMembers)->put(playerID);
}

void CityHallObjectImplementation::removeMilitiaMember(unsigned long long playerID) {
	// server/zone/objects/building/city/CityHallObject.idl():  		militiaMembers.drop(playerID);
	(&militiaMembers)->drop(playerID);
}

bool CityHallObjectImplementation::isMilitiaMember(unsigned long long playerID) {
	// server/zone/objects/building/city/CityHallObject.idl():  		return militiaMembers.contains(playerID);
	return (&militiaMembers)->contains(playerID);
}

unsigned long long CityHallObjectImplementation::getCitizenObjectID(int idx) {
	// server/zone/objects/building/city/CityHallObject.idl():  		return declaredCitizens.get(idx);
	return (&declaredCitizens)->get(idx);
}

void CityHallObjectImplementation::setCityRank(byte rank) {
	// server/zone/objects/building/city/CityHallObject.idl():  		cityRank = rank;
	cityRank = rank;
}

/*
 *	CityHallObjectAdapter
 */

CityHallObjectAdapter::CityHallObjectAdapter(CityHallObject* obj) : BuildingObjectAdapter(obj) {
}

Packet* CityHallObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_NOTIFYINSERTTOZONE__ZONE_:
		notifyInsertToZone(static_cast<Zone*>(inv->getObjectParameter()));
		break;
	case RPC_NOTIFYREMOVEFROMZONE__:
		notifyRemoveFromZone();
		break;
	case RPC_NOTIFYLOADFROMDATABASE__:
		notifyLoadFromDatabase();
		break;
	case RPC_SPAWNCITYHALLOBJECTS__:
		spawnCityHallObjects();
		break;
	case RPC_DESPAWNCITYHALLOBJECTS__:
		despawnCityHallObjects();
		break;
	case RPC_CHECKREQUISITESFORPLACEMENT__CREATUREOBJECT_:
		resp->insertBoolean(checkRequisitesForPlacement(static_cast<CreatureObject*>(inv->getObjectParameter())));
		break;
	case RPC_SETCITYNAME__STRING_:
		setCityName(inv->getAsciiParameter(_param0_setCityName__String_));
		break;
	case RPC_GETCITYNAME__:
		resp->insertAscii(getCityName());
		break;
	case RPC_GETCITYRANK__:
		resp->insertByte(getCityRank());
		break;
	case RPC_SENDCITYNAMEPROMPTTO__CREATUREOBJECT_BOOL_:
		sendCityNamePromptTo(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getBooleanParameter());
		break;
	case RPC_SENDSTATUSTO__CREATUREOBJECT_:
		sendStatusTo(static_cast<CreatureObject*>(inv->getObjectParameter()));
		break;
	case RPC_SENDCITIZENSHIPREPORTTO__CREATUREOBJECT_:
		sendCitizenshipReportTo(static_cast<CreatureObject*>(inv->getObjectParameter()));
		break;
	case RPC_SENDSTRUCTUREREPORTTO__CREATUREOBJECT_:
		sendStructureReportTo(static_cast<CreatureObject*>(inv->getObjectParameter()));
		break;
	case RPC_SENDTREASURYREPORTTO__CREATUREOBJECT_:
		sendTreasuryReportTo(static_cast<CreatureObject*>(inv->getObjectParameter()));
		break;
	case RPC_SENDCITYADVANCEMENTTO__CREATUREOBJECT_:
		sendCityAdvancementTo(static_cast<CreatureObject*>(inv->getObjectParameter()));
		break;
	case RPC_SENDMAINTENANCEREPORTTO__CREATUREOBJECT_:
		sendMaintenanceReportTo(static_cast<CreatureObject*>(inv->getObjectParameter()));
		break;
	case RPC_SENDCHANGECITYNAMETO__CREATUREOBJECT_:
		sendChangeCityNameTo(static_cast<CreatureObject*>(inv->getObjectParameter()));
		break;
	case RPC_SENDENABLEZONINGTO__CREATUREOBJECT_:
		sendEnableZoningTo(static_cast<CreatureObject*>(inv->getObjectParameter()));
		break;
	case RPC_SENDMANAGEMILITIATO__CREATUREOBJECT_:
		sendManageMilitiaTo(static_cast<CreatureObject*>(inv->getObjectParameter()));
		break;
	case RPC_SENDADDMILITIAMEMBERTO__CREATUREOBJECT_:
		sendAddMilitiaMemberTo(static_cast<CreatureObject*>(inv->getObjectParameter()));
		break;
	case RPC_SENDADJUSTTAXESTO__CREATUREOBJECT_:
		sendAdjustTaxesTo(static_cast<CreatureObject*>(inv->getObjectParameter()));
		break;
	case RPC_SENDTREASURYDEPOSITTO__CREATUREOBJECT_:
		sendTreasuryDepositTo(static_cast<CreatureObject*>(inv->getObjectParameter()));
		break;
	case RPC_SENDTREASURYWITHDRAWALTO__CREATUREOBJECT_:
		sendTreasuryWithdrawalTo(static_cast<CreatureObject*>(inv->getObjectParameter()));
		break;
	case RPC_SENDCITYSPECIALIZATIONSELECTIONTO__CREATUREOBJECT_:
		sendCitySpecializationSelectionTo(static_cast<CreatureObject*>(inv->getObjectParameter()));
		break;
	case RPC_TOGGLECITYREGISTRATION__CREATUREOBJECT_:
		toggleCityRegistration(static_cast<CreatureObject*>(inv->getObjectParameter()));
		break;
	case RPC_DESTROYOBJECTFROMDATABASE__BOOL_:
		destroyObjectFromDatabase(inv->getBooleanParameter());
		break;
	case RPC_NOTIFYSTRUCTUREPLACED__CREATUREOBJECT_:
		resp->insertSignedInt(notifyStructurePlaced(static_cast<CreatureObject*>(inv->getObjectParameter())));
		break;
	case RPC_ISCITYHALLBUILDING__:
		resp->insertBoolean(isCityHallBuilding());
		break;
	case RPC_ADDZONINGRIGHTS__LONG_INT_:
		addZoningRights(inv->getUnsignedLongParameter(), inv->getUnsignedIntParameter());
		break;
	case RPC_REMOVEZONINGRIGHTS__LONG_:
		removeZoningRights(inv->getUnsignedLongParameter());
		break;
	case RPC_HASZONINGRIGHTS__LONG_:
		resp->insertBoolean(hasZoningRights(inv->getUnsignedLongParameter()));
		break;
	case RPC_GETMAYOROBJECTID__:
		resp->insertLong(getMayorObjectID());
		break;
	case RPC_SETMAYOROBJECTID__LONG_:
		setMayorObjectID(inv->getUnsignedLongParameter());
		break;
	case RPC_ISMAYOR__LONG_:
		resp->insertBoolean(isMayor(inv->getUnsignedLongParameter()));
		break;
	case RPC_ISBANNED__LONG_:
		resp->insertBoolean(isBanned(inv->getUnsignedLongParameter()));
		break;
	case RPC_ADDBANNEDPLAYER__LONG_:
		addBannedPlayer(inv->getUnsignedLongParameter());
		break;
	case RPC_REMOVEBANNEDPLAYER__LONG_:
		removeBannedPlayer(inv->getUnsignedLongParameter());
		break;
	case RPC_GETCITYTERMINAL__:
		resp->insertLong(getCityTerminal()->_getObjectID());
		break;
	case RPC_GETCITYVOTETERMINAL__:
		resp->insertLong(getCityVoteTerminal()->_getObjectID());
		break;
	case RPC_GETCIVICSTRUCTURECAP__:
		resp->insertSignedInt(getCivicStructureCap());
		break;
	case RPC_ISZONINGENABLED__:
		resp->insertBoolean(isZoningEnabled());
		break;
	case RPC_GETREGION__:
		resp->insertLong(getRegion()->_getObjectID());
		break;
	case RPC_SETREGION__REGION_:
		setRegion(static_cast<Region*>(inv->getObjectParameter()));
		break;
	case RPC_TOGGLEZONINGENABLED__CREATUREOBJECT_:
		toggleZoningEnabled(static_cast<CreatureObject*>(inv->getObjectParameter()));
		break;
	case RPC_SETZONINGENABLED__BOOL_:
		setZoningEnabled(inv->getBooleanParameter());
		break;
	case RPC_ISCITYUPDATEPAST__:
		resp->insertBoolean(isCityUpdatePast());
		break;
	case RPC_RESCHEDULECITYUPDATE__INT_:
		rescheduleCityUpdate(inv->getUnsignedIntParameter());
		break;
	case RPC_GETCITIZENCOUNT__:
		resp->insertSignedInt(getCitizenCount());
		break;
	case RPC_ADDCITIZEN__LONG_:
		addCitizen(inv->getUnsignedLongParameter());
		break;
	case RPC_REMOVECITIZEN__LONG_:
		removeCitizen(inv->getUnsignedLongParameter());
		break;
	case RPC_ISCITIZEN__LONG_:
		resp->insertBoolean(isCitizen(inv->getUnsignedLongParameter()));
		break;
	case RPC_ADDMILITIAMEMBER__LONG_:
		addMilitiaMember(inv->getUnsignedLongParameter());
		break;
	case RPC_REMOVEMILITIAMEMBER__LONG_:
		removeMilitiaMember(inv->getUnsignedLongParameter());
		break;
	case RPC_ISMILITIAMEMBER__LONG_:
		resp->insertBoolean(isMilitiaMember(inv->getUnsignedLongParameter()));
		break;
	case RPC_GETCITIZENOBJECTID__INT_:
		resp->insertLong(getCitizenObjectID(inv->getSignedIntParameter()));
		break;
	case RPC_SETCITYRANK__BYTE_:
		setCityRank(inv->getByteParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void CityHallObjectAdapter::notifyInsertToZone(Zone* zone) {
	(static_cast<CityHallObject*>(stub))->notifyInsertToZone(zone);
}

void CityHallObjectAdapter::notifyRemoveFromZone() {
	(static_cast<CityHallObject*>(stub))->notifyRemoveFromZone();
}

void CityHallObjectAdapter::notifyLoadFromDatabase() {
	(static_cast<CityHallObject*>(stub))->notifyLoadFromDatabase();
}

void CityHallObjectAdapter::spawnCityHallObjects() {
	(static_cast<CityHallObject*>(stub))->spawnCityHallObjects();
}

void CityHallObjectAdapter::despawnCityHallObjects() {
	(static_cast<CityHallObject*>(stub))->despawnCityHallObjects();
}

bool CityHallObjectAdapter::checkRequisitesForPlacement(CreatureObject* player) {
	return (static_cast<CityHallObject*>(stub))->checkRequisitesForPlacement(player);
}

void CityHallObjectAdapter::setCityName(const String& name) {
	(static_cast<CityHallObject*>(stub))->setCityName(name);
}

String CityHallObjectAdapter::getCityName() {
	return (static_cast<CityHallObject*>(stub))->getCityName();
}

byte CityHallObjectAdapter::getCityRank() {
	return (static_cast<CityHallObject*>(stub))->getCityRank();
}

void CityHallObjectAdapter::sendCityNamePromptTo(CreatureObject* player, bool newCity) {
	(static_cast<CityHallObject*>(stub))->sendCityNamePromptTo(player, newCity);
}

void CityHallObjectAdapter::sendStatusTo(CreatureObject* player) {
	(static_cast<CityHallObject*>(stub))->sendStatusTo(player);
}

void CityHallObjectAdapter::sendCitizenshipReportTo(CreatureObject* player) {
	(static_cast<CityHallObject*>(stub))->sendCitizenshipReportTo(player);
}

void CityHallObjectAdapter::sendStructureReportTo(CreatureObject* player) {
	(static_cast<CityHallObject*>(stub))->sendStructureReportTo(player);
}

void CityHallObjectAdapter::sendTreasuryReportTo(CreatureObject* player) {
	(static_cast<CityHallObject*>(stub))->sendTreasuryReportTo(player);
}

void CityHallObjectAdapter::sendCityAdvancementTo(CreatureObject* player) {
	(static_cast<CityHallObject*>(stub))->sendCityAdvancementTo(player);
}

void CityHallObjectAdapter::sendMaintenanceReportTo(CreatureObject* player) {
	(static_cast<CityHallObject*>(stub))->sendMaintenanceReportTo(player);
}

void CityHallObjectAdapter::sendChangeCityNameTo(CreatureObject* player) {
	(static_cast<CityHallObject*>(stub))->sendChangeCityNameTo(player);
}

void CityHallObjectAdapter::sendEnableZoningTo(CreatureObject* player) {
	(static_cast<CityHallObject*>(stub))->sendEnableZoningTo(player);
}

void CityHallObjectAdapter::sendManageMilitiaTo(CreatureObject* player) {
	(static_cast<CityHallObject*>(stub))->sendManageMilitiaTo(player);
}

void CityHallObjectAdapter::sendAddMilitiaMemberTo(CreatureObject* player) {
	(static_cast<CityHallObject*>(stub))->sendAddMilitiaMemberTo(player);
}

void CityHallObjectAdapter::sendAdjustTaxesTo(CreatureObject* player) {
	(static_cast<CityHallObject*>(stub))->sendAdjustTaxesTo(player);
}

void CityHallObjectAdapter::sendTreasuryDepositTo(CreatureObject* player) {
	(static_cast<CityHallObject*>(stub))->sendTreasuryDepositTo(player);
}

void CityHallObjectAdapter::sendTreasuryWithdrawalTo(CreatureObject* player) {
	(static_cast<CityHallObject*>(stub))->sendTreasuryWithdrawalTo(player);
}

void CityHallObjectAdapter::sendCitySpecializationSelectionTo(CreatureObject* player) {
	(static_cast<CityHallObject*>(stub))->sendCitySpecializationSelectionTo(player);
}

void CityHallObjectAdapter::toggleCityRegistration(CreatureObject* player) {
	(static_cast<CityHallObject*>(stub))->toggleCityRegistration(player);
}

void CityHallObjectAdapter::destroyObjectFromDatabase(bool destroyContainedObjects) {
	(static_cast<CityHallObject*>(stub))->destroyObjectFromDatabase(destroyContainedObjects);
}

int CityHallObjectAdapter::notifyStructurePlaced(CreatureObject* creature) {
	return (static_cast<CityHallObject*>(stub))->notifyStructurePlaced(creature);
}

bool CityHallObjectAdapter::isCityHallBuilding() {
	return (static_cast<CityHallObject*>(stub))->isCityHallBuilding();
}

void CityHallObjectAdapter::addZoningRights(unsigned long long playerID, unsigned int seconds) {
	(static_cast<CityHallObject*>(stub))->addZoningRights(playerID, seconds);
}

void CityHallObjectAdapter::removeZoningRights(unsigned long long playerID) {
	(static_cast<CityHallObject*>(stub))->removeZoningRights(playerID);
}

bool CityHallObjectAdapter::hasZoningRights(unsigned long long playerID) {
	return (static_cast<CityHallObject*>(stub))->hasZoningRights(playerID);
}

unsigned long long CityHallObjectAdapter::getMayorObjectID() {
	return (static_cast<CityHallObject*>(stub))->getMayorObjectID();
}

void CityHallObjectAdapter::setMayorObjectID(unsigned long long oid) {
	(static_cast<CityHallObject*>(stub))->setMayorObjectID(oid);
}

bool CityHallObjectAdapter::isMayor(unsigned long long playerID) {
	return (static_cast<CityHallObject*>(stub))->isMayor(playerID);
}

bool CityHallObjectAdapter::isBanned(unsigned long long playerID) {
	return (static_cast<CityHallObject*>(stub))->isBanned(playerID);
}

void CityHallObjectAdapter::addBannedPlayer(unsigned long long playerID) {
	(static_cast<CityHallObject*>(stub))->addBannedPlayer(playerID);
}

void CityHallObjectAdapter::removeBannedPlayer(unsigned long long playerID) {
	(static_cast<CityHallObject*>(stub))->removeBannedPlayer(playerID);
}

CityTerminal* CityHallObjectAdapter::getCityTerminal() {
	return (static_cast<CityHallObject*>(stub))->getCityTerminal();
}

CityVoteTerminal* CityHallObjectAdapter::getCityVoteTerminal() {
	return (static_cast<CityHallObject*>(stub))->getCityVoteTerminal();
}

int CityHallObjectAdapter::getCivicStructureCap() {
	return (static_cast<CityHallObject*>(stub))->getCivicStructureCap();
}

bool CityHallObjectAdapter::isZoningEnabled() {
	return (static_cast<CityHallObject*>(stub))->isZoningEnabled();
}

Region* CityHallObjectAdapter::getRegion() {
	return (static_cast<CityHallObject*>(stub))->getRegion();
}

void CityHallObjectAdapter::setRegion(Region* reg) {
	(static_cast<CityHallObject*>(stub))->setRegion(reg);
}

void CityHallObjectAdapter::toggleZoningEnabled(CreatureObject* player) {
	(static_cast<CityHallObject*>(stub))->toggleZoningEnabled(player);
}

void CityHallObjectAdapter::setZoningEnabled(bool enabled) {
	(static_cast<CityHallObject*>(stub))->setZoningEnabled(enabled);
}

bool CityHallObjectAdapter::isCityUpdatePast() {
	return (static_cast<CityHallObject*>(stub))->isCityUpdatePast();
}

void CityHallObjectAdapter::rescheduleCityUpdate(unsigned int minutes) {
	(static_cast<CityHallObject*>(stub))->rescheduleCityUpdate(minutes);
}

int CityHallObjectAdapter::getCitizenCount() {
	return (static_cast<CityHallObject*>(stub))->getCitizenCount();
}

void CityHallObjectAdapter::addCitizen(unsigned long long playerID) {
	(static_cast<CityHallObject*>(stub))->addCitizen(playerID);
}

void CityHallObjectAdapter::removeCitizen(unsigned long long playerID) {
	(static_cast<CityHallObject*>(stub))->removeCitizen(playerID);
}

bool CityHallObjectAdapter::isCitizen(unsigned long long playerID) {
	return (static_cast<CityHallObject*>(stub))->isCitizen(playerID);
}

void CityHallObjectAdapter::addMilitiaMember(unsigned long long playerID) {
	(static_cast<CityHallObject*>(stub))->addMilitiaMember(playerID);
}

void CityHallObjectAdapter::removeMilitiaMember(unsigned long long playerID) {
	(static_cast<CityHallObject*>(stub))->removeMilitiaMember(playerID);
}

bool CityHallObjectAdapter::isMilitiaMember(unsigned long long playerID) {
	return (static_cast<CityHallObject*>(stub))->isMilitiaMember(playerID);
}

unsigned long long CityHallObjectAdapter::getCitizenObjectID(int idx) {
	return (static_cast<CityHallObject*>(stub))->getCitizenObjectID(idx);
}

void CityHallObjectAdapter::setCityRank(byte rank) {
	(static_cast<CityHallObject*>(stub))->setCityRank(rank);
}

/*
 *	CityHallObjectHelper
 */

CityHallObjectHelper* CityHallObjectHelper::staticInitializer = CityHallObjectHelper::instance();

CityHallObjectHelper::CityHallObjectHelper() {
	className = "CityHallObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void CityHallObjectHelper::finalizeHelper() {
	CityHallObjectHelper::finalize();
}

DistributedObject* CityHallObjectHelper::instantiateObject() {
	return new CityHallObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* CityHallObjectHelper::instantiateServant() {
	return new CityHallObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* CityHallObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new CityHallObjectAdapter(static_cast<CityHallObject*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

