/*
 *	server/zone/objects/building/recreation/RecreationBuildingObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "RecreationBuildingObject.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/cell/CellObject.h"

/*
 *	RecreationBuildingObjectStub
 */

enum {RPC_ISRECREATIONALBUILDINGOBJECT__ = 6};

RecreationBuildingObject::RecreationBuildingObject() : BuildingObject(DummyConstructorParameter::instance()) {
	RecreationBuildingObjectImplementation* _implementation = new RecreationBuildingObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("RecreationBuildingObject");
}

RecreationBuildingObject::RecreationBuildingObject(DummyConstructorParameter* param) : BuildingObject(param) {
	_setClassName("RecreationBuildingObject");
}

RecreationBuildingObject::~RecreationBuildingObject() {
}



bool RecreationBuildingObject::isRecreationalBuildingObject() {
	RecreationBuildingObjectImplementation* _implementation = static_cast<RecreationBuildingObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISRECREATIONALBUILDINGOBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isRecreationalBuildingObject();
}

DistributedObjectServant* RecreationBuildingObject::_getImplementation() {

	_updated = true;
	return _impl;
}

void RecreationBuildingObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	RecreationBuildingObjectImplementation
 */

RecreationBuildingObjectImplementation::RecreationBuildingObjectImplementation(DummyConstructorParameter* param) : BuildingObjectImplementation(param) {
	_initializeImplementation();
}


RecreationBuildingObjectImplementation::~RecreationBuildingObjectImplementation() {
}


void RecreationBuildingObjectImplementation::finalize() {
}

void RecreationBuildingObjectImplementation::_initializeImplementation() {
	_setClassHelper(RecreationBuildingObjectHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void RecreationBuildingObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<RecreationBuildingObject*>(stub);
	BuildingObjectImplementation::_setStub(stub);
}

DistributedObjectStub* RecreationBuildingObjectImplementation::_getStub() {
	return _this;
}

RecreationBuildingObjectImplementation::operator const RecreationBuildingObject*() {
	return _this;
}

void RecreationBuildingObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void RecreationBuildingObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void RecreationBuildingObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void RecreationBuildingObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void RecreationBuildingObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void RecreationBuildingObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void RecreationBuildingObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void RecreationBuildingObjectImplementation::_serializationHelperMethod() {
	BuildingObjectImplementation::_serializationHelperMethod();

	_setClassName("RecreationBuildingObject");

}

void RecreationBuildingObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(RecreationBuildingObjectImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool RecreationBuildingObjectImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (BuildingObjectImplementation::readObjectMember(stream, _name))
		return true;


	return false;
}

void RecreationBuildingObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = RecreationBuildingObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int RecreationBuildingObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = BuildingObjectImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;

	return _count + 0;
}

RecreationBuildingObjectImplementation::RecreationBuildingObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/building/recreation/RecreationBuildingObject.idl():  		Logger.setLoggingName("RecreationBuildingObject");
	Logger::setLoggingName("RecreationBuildingObject");
}

bool RecreationBuildingObjectImplementation::isRecreationalBuildingObject() {
	// server/zone/objects/building/recreation/RecreationBuildingObject.idl():  		return true;
	return true;
}

/*
 *	RecreationBuildingObjectAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


RecreationBuildingObjectAdapter::RecreationBuildingObjectAdapter(RecreationBuildingObject* obj) : BuildingObjectAdapter(obj) {
}

void RecreationBuildingObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_ISRECREATIONALBUILDINGOBJECT__:
		{
			resp->insertBoolean(isRecreationalBuildingObject());
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

bool RecreationBuildingObjectAdapter::isRecreationalBuildingObject() {
	return (static_cast<RecreationBuildingObject*>(stub))->isRecreationalBuildingObject();
}

/*
 *	RecreationBuildingObjectHelper
 */

RecreationBuildingObjectHelper* RecreationBuildingObjectHelper::staticInitializer = RecreationBuildingObjectHelper::instance();

RecreationBuildingObjectHelper::RecreationBuildingObjectHelper() {
	className = "RecreationBuildingObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void RecreationBuildingObjectHelper::finalizeHelper() {
	RecreationBuildingObjectHelper::finalize();
}

DistributedObject* RecreationBuildingObjectHelper::instantiateObject() {
	return new RecreationBuildingObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* RecreationBuildingObjectHelper::instantiateServant() {
	return new RecreationBuildingObjectImplementation();
}

DistributedObjectAdapter* RecreationBuildingObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new RecreationBuildingObjectAdapter(static_cast<RecreationBuildingObject*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

