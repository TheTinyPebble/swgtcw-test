/*
 *	server/zone/objects/building/recreation/RecreationBuildingObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "RecreationBuildingObject.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/cell/CellObject.h"


// Imported class dependencies

#include "system/lang/Time.h"

#include "server/zone/managers/planet/MapLocationTable.h"

#include "server/zone/objects/scene/ObserverEventMap.h"

#include "system/util/Vector.h"

#include "server/zone/managers/creature/CreatureManager.h"

#include "server/zone/ZoneProcessServerImplementation.h"

#include "engine/util/QuadTree.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "server/zone/objects/scene/variables/CustomizationVariables.h"

#include "server/zone/objects/scene/variables/StringId.h"

#include "server/zone/objects/scene/variables/DeltaVector.h"

#include "server/zone/objects/structure/StructurePermissionList.h"

#include "engine/util/Quaternion.h"

#include "system/util/VectorMap.h"

#include "server/zone/managers/object/ObjectMap.h"

#include "server/zone/objects/structure/events/StructureMaintenanceTask.h"

#include "server/zone/objects/tangible/terminal/structure/StructureTerminal.h"

#include "server/zone/objects/tangible/sign/SignObject.h"

#include "server/zone/Zone.h"

#include "server/zone/managers/planet/HeightMap.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "system/util/SortedVector.h"

#include "server/zone/managers/planet/PlanetManager.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

/*
 *	RecreationBuildingObjectStub
 */

RecreationBuildingObject::RecreationBuildingObject() : BuildingObject(DummyConstructorParameter::instance()) {
	RecreationBuildingObjectImplementation* _implementation = new RecreationBuildingObjectImplementation();
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

RecreationBuildingObject::RecreationBuildingObject(DummyConstructorParameter* param) : BuildingObject(param) {
}

RecreationBuildingObject::~RecreationBuildingObject() {
}


DistributedObjectServant* RecreationBuildingObject::_getImplementation() {
	return getForUpdate();}

void RecreationBuildingObject::_setImplementation(DistributedObjectServant* servant) {
	setObject((ManagedObjectImplementation*) servant);}

/*
 *	RecreationBuildingObjectImplementation
 */

RecreationBuildingObjectImplementation::RecreationBuildingObjectImplementation(DummyConstructorParameter* param) : BuildingObjectImplementation(param) {
	_initializeImplementation();
}


RecreationBuildingObjectImplementation::~RecreationBuildingObjectImplementation() {
}


void RecreationBuildingObjectImplementation::finalize() {
}

void RecreationBuildingObjectImplementation::_initializeImplementation() {
	_setClassHelper(RecreationBuildingObjectHelper::instance());

	_serializationHelperMethod();
}

void RecreationBuildingObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (RecreationBuildingObject*) stub;
	BuildingObjectImplementation::_setStub(stub);
}

DistributedObjectStub* RecreationBuildingObjectImplementation::_getStub() {
	return _this;
}

RecreationBuildingObjectImplementation::operator const RecreationBuildingObject*() {
	return _this;
}

TransactionalObject* RecreationBuildingObjectImplementation::clone() {
	return (TransactionalObject*) new RecreationBuildingObjectImplementation(*this);
}


void RecreationBuildingObjectImplementation::lock(bool doLock) {
}

void RecreationBuildingObjectImplementation::lock(ManagedObject* obj) {
}

void RecreationBuildingObjectImplementation::rlock(bool doLock) {
}

void RecreationBuildingObjectImplementation::wlock(bool doLock) {
}

void RecreationBuildingObjectImplementation::wlock(ManagedObject* obj) {
}

void RecreationBuildingObjectImplementation::unlock(bool doLock) {
}

void RecreationBuildingObjectImplementation::runlock(bool doLock) {
}

void RecreationBuildingObjectImplementation::_serializationHelperMethod() {
	BuildingObjectImplementation::_serializationHelperMethod();

	_setClassName("RecreationBuildingObject");

}

RecreationBuildingObjectImplementation::RecreationBuildingObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/building/recreation/RecreationBuildingObject.idl(55):  		Logger.setLoggingName("RecreationBuildingObject");
	Logger::setLoggingName("RecreationBuildingObject");
}

/*
 *	RecreationBuildingObjectAdapter
 */

RecreationBuildingObjectAdapter::RecreationBuildingObjectAdapter(RecreationBuildingObjectImplementation* obj) : BuildingObjectAdapter(obj) {
}

Packet* RecreationBuildingObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	default:
		return NULL;
	}

	return resp;
}

/*
 *	RecreationBuildingObjectHelper
 */

RecreationBuildingObjectHelper* RecreationBuildingObjectHelper::staticInitializer = RecreationBuildingObjectHelper::instance();

RecreationBuildingObjectHelper::RecreationBuildingObjectHelper() {
	className = "RecreationBuildingObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void RecreationBuildingObjectHelper::finalizeHelper() {
	RecreationBuildingObjectHelper::finalize();
}

DistributedObject* RecreationBuildingObjectHelper::instantiateObject() {
	return new RecreationBuildingObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* RecreationBuildingObjectHelper::instantiateServant() {
	return new RecreationBuildingObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* RecreationBuildingObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new RecreationBuildingObjectAdapter((RecreationBuildingObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

