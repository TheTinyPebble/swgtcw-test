/*
 *	server/zone/objects/building/hospital/HospitalBuildingObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "HospitalBuildingObject.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/cell/CellObject.h"

/*
 *	HospitalBuildingObjectStub
 */

enum {RPC_ISHOSPITALBUILDINGOBJECT__ = 6};

HospitalBuildingObject::HospitalBuildingObject() : BuildingObject(DummyConstructorParameter::instance()) {
	HospitalBuildingObjectImplementation* _implementation = new HospitalBuildingObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("HospitalBuildingObject");
}

HospitalBuildingObject::HospitalBuildingObject(DummyConstructorParameter* param) : BuildingObject(param) {
	_setClassName("HospitalBuildingObject");
}

HospitalBuildingObject::~HospitalBuildingObject() {
}



bool HospitalBuildingObject::isHospitalBuildingObject() {
	HospitalBuildingObjectImplementation* _implementation = static_cast<HospitalBuildingObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISHOSPITALBUILDINGOBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isHospitalBuildingObject();
}

DistributedObjectServant* HospitalBuildingObject::_getImplementation() {

	_updated = true;
	return _impl;
}

void HospitalBuildingObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	HospitalBuildingObjectImplementation
 */

HospitalBuildingObjectImplementation::HospitalBuildingObjectImplementation(DummyConstructorParameter* param) : BuildingObjectImplementation(param) {
	_initializeImplementation();
}


HospitalBuildingObjectImplementation::~HospitalBuildingObjectImplementation() {
}


void HospitalBuildingObjectImplementation::finalize() {
}

void HospitalBuildingObjectImplementation::_initializeImplementation() {
	_setClassHelper(HospitalBuildingObjectHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void HospitalBuildingObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<HospitalBuildingObject*>(stub);
	BuildingObjectImplementation::_setStub(stub);
}

DistributedObjectStub* HospitalBuildingObjectImplementation::_getStub() {
	return _this;
}

HospitalBuildingObjectImplementation::operator const HospitalBuildingObject*() {
	return _this;
}

void HospitalBuildingObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void HospitalBuildingObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void HospitalBuildingObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void HospitalBuildingObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void HospitalBuildingObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void HospitalBuildingObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void HospitalBuildingObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void HospitalBuildingObjectImplementation::_serializationHelperMethod() {
	BuildingObjectImplementation::_serializationHelperMethod();

	_setClassName("HospitalBuildingObject");

}

void HospitalBuildingObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(HospitalBuildingObjectImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool HospitalBuildingObjectImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (BuildingObjectImplementation::readObjectMember(stream, _name))
		return true;


	return false;
}

void HospitalBuildingObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = HospitalBuildingObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int HospitalBuildingObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = BuildingObjectImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;

	return _count + 0;
}

HospitalBuildingObjectImplementation::HospitalBuildingObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/building/hospital/HospitalBuildingObject.idl():  		Logger.setLoggingName("HospitalBuildingObject");
	Logger::setLoggingName("HospitalBuildingObject");
}

bool HospitalBuildingObjectImplementation::isHospitalBuildingObject() {
	// server/zone/objects/building/hospital/HospitalBuildingObject.idl():  		return true;
	return true;
}

/*
 *	HospitalBuildingObjectAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


HospitalBuildingObjectAdapter::HospitalBuildingObjectAdapter(HospitalBuildingObject* obj) : BuildingObjectAdapter(obj) {
}

void HospitalBuildingObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_ISHOSPITALBUILDINGOBJECT__:
		{
			resp->insertBoolean(isHospitalBuildingObject());
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

bool HospitalBuildingObjectAdapter::isHospitalBuildingObject() {
	return (static_cast<HospitalBuildingObject*>(stub))->isHospitalBuildingObject();
}

/*
 *	HospitalBuildingObjectHelper
 */

HospitalBuildingObjectHelper* HospitalBuildingObjectHelper::staticInitializer = HospitalBuildingObjectHelper::instance();

HospitalBuildingObjectHelper::HospitalBuildingObjectHelper() {
	className = "HospitalBuildingObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void HospitalBuildingObjectHelper::finalizeHelper() {
	HospitalBuildingObjectHelper::finalize();
}

DistributedObject* HospitalBuildingObjectHelper::instantiateObject() {
	return new HospitalBuildingObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* HospitalBuildingObjectHelper::instantiateServant() {
	return new HospitalBuildingObjectImplementation();
}

DistributedObjectAdapter* HospitalBuildingObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new HospitalBuildingObjectAdapter(static_cast<HospitalBuildingObject*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

