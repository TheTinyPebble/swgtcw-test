/*
 *	server/zone/objects/ship/ShipObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "ShipObject.h"

/*
 *	ShipObjectStub
 */

enum {RPC_GETUNIQUEID__ = 6,RPC_INITIALIZETRANSIENTMEMBERS__,RPC_SENDTO__SCENEOBJECT_BOOL_,RPC_SENDBASELINESTO__SCENEOBJECT_,RPC_GETTOTALMASS__,RPC_ISSHIPOBJECT__};

ShipObject::ShipObject() : TangibleObject(DummyConstructorParameter::instance()) {
	ShipObjectImplementation* _implementation = new ShipObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("ShipObject");
}

ShipObject::ShipObject(DummyConstructorParameter* param) : TangibleObject(param) {
	_setClassName("ShipObject");
}

ShipObject::~ShipObject() {
}



unsigned short ShipObject::getUniqueID() {
	ShipObjectImplementation* _implementation = static_cast<ShipObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETUNIQUEID__);

		return method.executeWithUnsignedShortReturn();
	} else
		return _implementation->getUniqueID();
}

void ShipObject::initializeTransientMembers() {
	ShipObjectImplementation* _implementation = static_cast<ShipObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void ShipObject::sendTo(SceneObject* player, bool doClose) {
	ShipObjectImplementation* _implementation = static_cast<ShipObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDTO__SCENEOBJECT_BOOL_);
		method.addObjectParameter(player);
		method.addBooleanParameter(doClose);

		method.executeWithVoidReturn();
	} else
		_implementation->sendTo(player, doClose);
}

void ShipObject::sendBaselinesTo(SceneObject* player) {
	ShipObjectImplementation* _implementation = static_cast<ShipObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDBASELINESTO__SCENEOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendBaselinesTo(player);
}

float ShipObject::getTotalMass() {
	ShipObjectImplementation* _implementation = static_cast<ShipObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTOTALMASS__);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getTotalMass();
}

bool ShipObject::isShipObject() {
	ShipObjectImplementation* _implementation = static_cast<ShipObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSHIPOBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isShipObject();
}

DistributedObjectServant* ShipObject::_getImplementation() {

	_updated = true;
	return _impl;
}

void ShipObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	ShipObjectImplementation
 */

ShipObjectImplementation::ShipObjectImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
	_initializeImplementation();
}


ShipObjectImplementation::~ShipObjectImplementation() {
}


void ShipObjectImplementation::finalize() {
}

void ShipObjectImplementation::_initializeImplementation() {
	_setClassHelper(ShipObjectHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void ShipObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<ShipObject*>(stub);
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* ShipObjectImplementation::_getStub() {
	return _this;
}

ShipObjectImplementation::operator const ShipObject*() {
	return _this;
}

void ShipObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void ShipObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void ShipObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void ShipObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void ShipObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void ShipObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void ShipObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void ShipObjectImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("ShipObject");

}

void ShipObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(ShipObjectImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ShipObjectImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (TangibleObjectImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "ShipObject.totalMass") {
		TypeInfo<float >::parseFromBinaryStream(&totalMass, stream);
		return true;
	}


	return false;
}

void ShipObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ShipObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ShipObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = TangibleObjectImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;
	_name = "ShipObject.totalMass";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&totalMass, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 1;
}

ShipObjectImplementation::ShipObjectImplementation() {
	_initializeImplementation();
	Reference<SortedVector<ManagedReference<QuadTreeEntry* > >*> _ref0;
	// server/zone/objects/ship/ShipObject.idl():  		Logger.setLoggingName("ShipObject");
	Logger::setLoggingName("ShipObject");
	// server/zone/objects/ship/ShipObject.idl():  		super.unknownByte = 1;
	TangibleObjectImplementation::unknownByte = 1;
	// server/zone/objects/ship/ShipObject.idl():  		totalMass = 500.0;
	totalMass = 500.0;
	// server/zone/objects/ship/ShipObject.idl():  		super.closeobjects = new SortedVector<QuadTreeEntry>();
	TangibleObjectImplementation::closeobjects = _ref0 = new SortedVector<ManagedReference<QuadTreeEntry* > >();
	// server/zone/objects/ship/ShipObject.idl():  		super.closeobjects.setNoDuplicateInsertPlan();
	TangibleObjectImplementation::closeobjects->setNoDuplicateInsertPlan();
}

float ShipObjectImplementation::getTotalMass() {
	// server/zone/objects/ship/ShipObject.idl():  		return totalMass;
	return totalMass;
}

bool ShipObjectImplementation::isShipObject() {
	// server/zone/objects/ship/ShipObject.idl():  		return true;
	return true;
}

/*
 *	ShipObjectAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


ShipObjectAdapter::ShipObjectAdapter(ShipObject* obj) : TangibleObjectAdapter(obj) {
}

void ShipObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_GETUNIQUEID__:
		{
			resp->insertShort(getUniqueID());
		}
		break;
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			initializeTransientMembers();
		}
		break;
	case RPC_SENDTO__SCENEOBJECT_BOOL_:
		{
			sendTo(static_cast<SceneObject*>(inv->getObjectParameter()), inv->getBooleanParameter());
		}
		break;
	case RPC_SENDBASELINESTO__SCENEOBJECT_:
		{
			sendBaselinesTo(static_cast<SceneObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_GETTOTALMASS__:
		{
			resp->insertFloat(getTotalMass());
		}
		break;
	case RPC_ISSHIPOBJECT__:
		{
			resp->insertBoolean(isShipObject());
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

unsigned short ShipObjectAdapter::getUniqueID() {
	return (static_cast<ShipObject*>(stub))->getUniqueID();
}

void ShipObjectAdapter::initializeTransientMembers() {
	(static_cast<ShipObject*>(stub))->initializeTransientMembers();
}

void ShipObjectAdapter::sendTo(SceneObject* player, bool doClose) {
	(static_cast<ShipObject*>(stub))->sendTo(player, doClose);
}

void ShipObjectAdapter::sendBaselinesTo(SceneObject* player) {
	(static_cast<ShipObject*>(stub))->sendBaselinesTo(player);
}

float ShipObjectAdapter::getTotalMass() {
	return (static_cast<ShipObject*>(stub))->getTotalMass();
}

bool ShipObjectAdapter::isShipObject() {
	return (static_cast<ShipObject*>(stub))->isShipObject();
}

/*
 *	ShipObjectHelper
 */

ShipObjectHelper* ShipObjectHelper::staticInitializer = ShipObjectHelper::instance();

ShipObjectHelper::ShipObjectHelper() {
	className = "ShipObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void ShipObjectHelper::finalizeHelper() {
	ShipObjectHelper::finalize();
}

DistributedObject* ShipObjectHelper::instantiateObject() {
	return new ShipObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* ShipObjectHelper::instantiateServant() {
	return new ShipObjectImplementation();
}

DistributedObjectAdapter* ShipObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ShipObjectAdapter(static_cast<ShipObject*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

