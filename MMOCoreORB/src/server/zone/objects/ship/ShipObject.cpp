/*
 *	server/zone/objects/ship/ShipObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "ShipObject.h"

#include "ShipObjectImplementation.h"

#include "../scene/SceneObject.h"

#include "../player/Player.h"

#include "../intangible/IntangibleObject.h"

#include "../tangible/component/ShipComponent.h"

/*
 *	ShipObjectStub
 */

ShipObject::ShipObject(unsigned long long oid, Player* owner) : SceneObject(DummyConstructorParameter::instance()) {
	_impl = new ShipObjectImplementation(oid, owner);
	_impl->_setStub(this);
}

ShipObject::ShipObject(DummyConstructorParameter* param) : SceneObject(param) {
}

ShipObject::~ShipObject() {
}

void ShipObject::init() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((ShipObjectImplementation*) _impl)->init();
}

void ShipObject::sendToOwner(bool inSpace) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addBooleanParameter(inSpace);

		method.executeWithVoidReturn();
	} else
		((ShipObjectImplementation*) _impl)->sendToOwner(inSpace);
}

void ShipObject::sendTo(Player* player, bool inSpace, bool doClose) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(player);
		method.addBooleanParameter(inSpace);
		method.addBooleanParameter(doClose);

		method.executeWithVoidReturn();
	} else
		((ShipObjectImplementation*) _impl)->sendTo(player, inSpace, doClose);
}

void ShipObject::setShipBody(IntangibleObject* tsb) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(tsb);

		method.executeWithVoidReturn();
	} else
		((ShipObjectImplementation*) _impl)->setShipBody(tsb);
}

IntangibleObject* ShipObject::getShipBody() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		return (IntangibleObject*) method.executeWithObjectReturn();
	} else
		return ((ShipObjectImplementation*) _impl)->getShipBody();
}

void ShipObject::setStfName(const String& Name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addAsciiParameter(Name);

		method.executeWithVoidReturn();
	} else
		((ShipObjectImplementation*) _impl)->setStfName(Name);
}

String& ShipObject::getStfName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		method.executeWithAsciiReturn(_return_getStfName);
		return _return_getStfName;
	} else
		return ((ShipObjectImplementation*) _impl)->getStfName();
}

UnicodeString& ShipObject::getOwnerName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		method.executeWithUnicodeReturn(_return_getOwnerName);
		return _return_getOwnerName;
	} else
		return ((ShipObjectImplementation*) _impl)->getOwnerName();
}

int ShipObject::getComponentListSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		return method.executeWithSignedIntReturn();
	} else
		return ((ShipObjectImplementation*) _impl)->getComponentListSize();
}

void ShipObject::calcActiveComponentListSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		method.executeWithVoidReturn();
	} else
		((ShipObjectImplementation*) _impl)->calcActiveComponentListSize();
}

int ShipObject::getActiveComponentListSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		return method.executeWithSignedIntReturn();
	} else
		return ((ShipObjectImplementation*) _impl)->getActiveComponentListSize();
}

void ShipObject::addComponent(ShipComponent* tsc) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addObjectParameter(tsc);

		method.executeWithVoidReturn();
	} else
		((ShipObjectImplementation*) _impl)->addComponent(tsc);
}

void ShipObject::removeComponent(int compId) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addSignedIntParameter(compId);

		method.executeWithVoidReturn();
	} else
		((ShipObjectImplementation*) _impl)->removeComponent(compId);
}

ShipComponent* ShipObject::getComponent(int compId) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addSignedIntParameter(compId);

		return (ShipComponent*) method.executeWithObjectReturn();
	} else
		return ((ShipObjectImplementation*) _impl)->getComponent(compId);
}

unsigned int ShipObject::getNextUnkShip1UpdateCnt() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((ShipObjectImplementation*) _impl)->getNextUnkShip1UpdateCnt();
}

unsigned int ShipObject::getNextUnkShip1UpdateCnt2() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((ShipObjectImplementation*) _impl)->getNextUnkShip1UpdateCnt2();
}

unsigned int ShipObject::getNextEnergyDrainUpdateCnt() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((ShipObjectImplementation*) _impl)->getNextEnergyDrainUpdateCnt();
}

unsigned int ShipObject::getNextCompMassUpdateCnt() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((ShipObjectImplementation*) _impl)->getNextCompMassUpdateCnt();
}

unsigned int ShipObject::getNextUnkShip1UpdateCnt3() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((ShipObjectImplementation*) _impl)->getNextUnkShip1UpdateCnt3();
}

void ShipObject::setTotalMass(float ttm) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);
		method.addFloatParameter(ttm);

		method.executeWithVoidReturn();
	} else
		((ShipObjectImplementation*) _impl)->setTotalMass(ttm);
}

float ShipObject::getShieldChargeRate() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);

		return method.executeWithFloatReturn();
	} else
		return ((ShipObjectImplementation*) _impl)->getShieldChargeRate();
}

float ShipObject::getCapacitorChargeRate() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);

		return method.executeWithFloatReturn();
	} else
		return ((ShipObjectImplementation*) _impl)->getCapacitorChargeRate();
}

void ShipObject::setTotalEnergy(float tte) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);
		method.addFloatParameter(tte);

		method.executeWithVoidReturn();
	} else
		((ShipObjectImplementation*) _impl)->setTotalEnergy(tte);
}

float ShipObject::getTotalEnergy() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);

		return method.executeWithFloatReturn();
	} else
		return ((ShipObjectImplementation*) _impl)->getTotalEnergy();
}

float ShipObject::getChassisCur() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);

		return method.executeWithFloatReturn();
	} else
		return ((ShipObjectImplementation*) _impl)->getChassisCur();
}

float ShipObject::getChassisMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);

		return method.executeWithFloatReturn();
	} else
		return ((ShipObjectImplementation*) _impl)->getChassisMax();
}

unsigned int ShipObject::getNextCurArmorUpdateCnt() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((ShipObjectImplementation*) _impl)->getNextCurArmorUpdateCnt();
}

unsigned int ShipObject::getNextMaxArmorUpdateCnt() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((ShipObjectImplementation*) _impl)->getNextMaxArmorUpdateCnt();
}

unsigned int ShipObject::getNextCurHitpointsUpdateCnt() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((ShipObjectImplementation*) _impl)->getNextCurHitpointsUpdateCnt();
}

unsigned int ShipObject::getNextMaxHitpointsUpdateCnt() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((ShipObjectImplementation*) _impl)->getNextMaxHitpointsUpdateCnt();
}

unsigned int ShipObject::getNextUnkShip3UpdateCnt() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 36);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((ShipObjectImplementation*) _impl)->getNextUnkShip3UpdateCnt();
}

float ShipObject::getFrontshieldMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 37);

		return method.executeWithFloatReturn();
	} else
		return ((ShipObjectImplementation*) _impl)->getFrontshieldMax();
}

float ShipObject::getBackshieldMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 38);

		return method.executeWithFloatReturn();
	} else
		return ((ShipObjectImplementation*) _impl)->getBackshieldMax();
}

float ShipObject::getTotalMass() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 39);

		return method.executeWithFloatReturn();
	} else
		return ((ShipObjectImplementation*) _impl)->getTotalMass();
}

float ShipObject::getWeaponCharge() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 40);

		return method.executeWithFloatReturn();
	} else
		return ((ShipObjectImplementation*) _impl)->getWeaponCharge();
}

unsigned int ShipObject::getNextCrcUpdateCnt() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 41);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((ShipObjectImplementation*) _impl)->getNextCrcUpdateCnt();
}

float ShipObject::getMaxSpeed() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 42);

		return method.executeWithFloatReturn();
	} else
		return ((ShipObjectImplementation*) _impl)->getMaxSpeed();
}

float ShipObject::getFrontshieldCur() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 43);

		return method.executeWithFloatReturn();
	} else
		return ((ShipObjectImplementation*) _impl)->getFrontshieldCur();
}

float ShipObject::getBackshieldCur() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 44);

		return method.executeWithFloatReturn();
	} else
		return ((ShipObjectImplementation*) _impl)->getBackshieldCur();
}

/*
 *	ShipObjectAdapter
 */

ShipObjectAdapter::ShipObjectAdapter(ShipObjectImplementation* obj) : SceneObjectAdapter(obj) {
}

Packet* ShipObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		init();
		break;
	case 7:
		sendToOwner(inv->getBooleanParameter());
		break;
	case 8:
		sendTo((Player*) inv->getObjectParameter(), inv->getBooleanParameter(), inv->getBooleanParameter());
		break;
	case 9:
		setShipBody((IntangibleObject*) inv->getObjectParameter());
		break;
	case 10:
		resp->insertLong(getShipBody()->_getObjectID());
		break;
	case 11:
		setStfName(inv->getAsciiParameter(_param0_setStfName__String_));
		break;
	case 12:
		resp->insertAscii(getStfName());
		break;
	case 13:
		resp->insertUnicode(getOwnerName());
		break;
	case 14:
		resp->insertSignedInt(getComponentListSize());
		break;
	case 15:
		calcActiveComponentListSize();
		break;
	case 16:
		resp->insertSignedInt(getActiveComponentListSize());
		break;
	case 17:
		addComponent((ShipComponent*) inv->getObjectParameter());
		break;
	case 18:
		removeComponent(inv->getSignedIntParameter());
		break;
	case 19:
		resp->insertLong(getComponent(inv->getSignedIntParameter())->_getObjectID());
		break;
	case 20:
		resp->insertInt(getNextUnkShip1UpdateCnt());
		break;
	case 21:
		resp->insertInt(getNextUnkShip1UpdateCnt2());
		break;
	case 22:
		resp->insertInt(getNextEnergyDrainUpdateCnt());
		break;
	case 23:
		resp->insertInt(getNextCompMassUpdateCnt());
		break;
	case 24:
		resp->insertInt(getNextUnkShip1UpdateCnt3());
		break;
	case 25:
		setTotalMass(inv->getFloatParameter());
		break;
	case 26:
		resp->insertFloat(getShieldChargeRate());
		break;
	case 27:
		resp->insertFloat(getCapacitorChargeRate());
		break;
	case 28:
		setTotalEnergy(inv->getFloatParameter());
		break;
	case 29:
		resp->insertFloat(getTotalEnergy());
		break;
	case 30:
		resp->insertFloat(getChassisCur());
		break;
	case 31:
		resp->insertFloat(getChassisMax());
		break;
	case 32:
		resp->insertInt(getNextCurArmorUpdateCnt());
		break;
	case 33:
		resp->insertInt(getNextMaxArmorUpdateCnt());
		break;
	case 34:
		resp->insertInt(getNextCurHitpointsUpdateCnt());
		break;
	case 35:
		resp->insertInt(getNextMaxHitpointsUpdateCnt());
		break;
	case 36:
		resp->insertInt(getNextUnkShip3UpdateCnt());
		break;
	case 37:
		resp->insertFloat(getFrontshieldMax());
		break;
	case 38:
		resp->insertFloat(getBackshieldMax());
		break;
	case 39:
		resp->insertFloat(getTotalMass());
		break;
	case 40:
		resp->insertFloat(getWeaponCharge());
		break;
	case 41:
		resp->insertInt(getNextCrcUpdateCnt());
		break;
	case 42:
		resp->insertFloat(getMaxSpeed());
		break;
	case 43:
		resp->insertFloat(getFrontshieldCur());
		break;
	case 44:
		resp->insertFloat(getBackshieldCur());
		break;
	default:
		return NULL;
	}

	return resp;
}

void ShipObjectAdapter::init() {
	return ((ShipObjectImplementation*) impl)->init();
}

void ShipObjectAdapter::sendToOwner(bool inSpace) {
	return ((ShipObjectImplementation*) impl)->sendToOwner(inSpace);
}

void ShipObjectAdapter::sendTo(Player* player, bool inSpace, bool doClose) {
	return ((ShipObjectImplementation*) impl)->sendTo(player, inSpace, doClose);
}

void ShipObjectAdapter::setShipBody(IntangibleObject* tsb) {
	return ((ShipObjectImplementation*) impl)->setShipBody(tsb);
}

IntangibleObject* ShipObjectAdapter::getShipBody() {
	return ((ShipObjectImplementation*) impl)->getShipBody();
}

void ShipObjectAdapter::setStfName(const String& Name) {
	return ((ShipObjectImplementation*) impl)->setStfName(Name);
}

String& ShipObjectAdapter::getStfName() {
	return ((ShipObjectImplementation*) impl)->getStfName();
}

UnicodeString& ShipObjectAdapter::getOwnerName() {
	return ((ShipObjectImplementation*) impl)->getOwnerName();
}

int ShipObjectAdapter::getComponentListSize() {
	return ((ShipObjectImplementation*) impl)->getComponentListSize();
}

void ShipObjectAdapter::calcActiveComponentListSize() {
	return ((ShipObjectImplementation*) impl)->calcActiveComponentListSize();
}

int ShipObjectAdapter::getActiveComponentListSize() {
	return ((ShipObjectImplementation*) impl)->getActiveComponentListSize();
}

void ShipObjectAdapter::addComponent(ShipComponent* tsc) {
	return ((ShipObjectImplementation*) impl)->addComponent(tsc);
}

void ShipObjectAdapter::removeComponent(int compId) {
	return ((ShipObjectImplementation*) impl)->removeComponent(compId);
}

ShipComponent* ShipObjectAdapter::getComponent(int compId) {
	return ((ShipObjectImplementation*) impl)->getComponent(compId);
}

unsigned int ShipObjectAdapter::getNextUnkShip1UpdateCnt() {
	return ((ShipObjectImplementation*) impl)->getNextUnkShip1UpdateCnt();
}

unsigned int ShipObjectAdapter::getNextUnkShip1UpdateCnt2() {
	return ((ShipObjectImplementation*) impl)->getNextUnkShip1UpdateCnt2();
}

unsigned int ShipObjectAdapter::getNextEnergyDrainUpdateCnt() {
	return ((ShipObjectImplementation*) impl)->getNextEnergyDrainUpdateCnt();
}

unsigned int ShipObjectAdapter::getNextCompMassUpdateCnt() {
	return ((ShipObjectImplementation*) impl)->getNextCompMassUpdateCnt();
}

unsigned int ShipObjectAdapter::getNextUnkShip1UpdateCnt3() {
	return ((ShipObjectImplementation*) impl)->getNextUnkShip1UpdateCnt3();
}

void ShipObjectAdapter::setTotalMass(float ttm) {
	return ((ShipObjectImplementation*) impl)->setTotalMass(ttm);
}

float ShipObjectAdapter::getShieldChargeRate() {
	return ((ShipObjectImplementation*) impl)->getShieldChargeRate();
}

float ShipObjectAdapter::getCapacitorChargeRate() {
	return ((ShipObjectImplementation*) impl)->getCapacitorChargeRate();
}

void ShipObjectAdapter::setTotalEnergy(float tte) {
	return ((ShipObjectImplementation*) impl)->setTotalEnergy(tte);
}

float ShipObjectAdapter::getTotalEnergy() {
	return ((ShipObjectImplementation*) impl)->getTotalEnergy();
}

float ShipObjectAdapter::getChassisCur() {
	return ((ShipObjectImplementation*) impl)->getChassisCur();
}

float ShipObjectAdapter::getChassisMax() {
	return ((ShipObjectImplementation*) impl)->getChassisMax();
}

unsigned int ShipObjectAdapter::getNextCurArmorUpdateCnt() {
	return ((ShipObjectImplementation*) impl)->getNextCurArmorUpdateCnt();
}

unsigned int ShipObjectAdapter::getNextMaxArmorUpdateCnt() {
	return ((ShipObjectImplementation*) impl)->getNextMaxArmorUpdateCnt();
}

unsigned int ShipObjectAdapter::getNextCurHitpointsUpdateCnt() {
	return ((ShipObjectImplementation*) impl)->getNextCurHitpointsUpdateCnt();
}

unsigned int ShipObjectAdapter::getNextMaxHitpointsUpdateCnt() {
	return ((ShipObjectImplementation*) impl)->getNextMaxHitpointsUpdateCnt();
}

unsigned int ShipObjectAdapter::getNextUnkShip3UpdateCnt() {
	return ((ShipObjectImplementation*) impl)->getNextUnkShip3UpdateCnt();
}

float ShipObjectAdapter::getFrontshieldMax() {
	return ((ShipObjectImplementation*) impl)->getFrontshieldMax();
}

float ShipObjectAdapter::getBackshieldMax() {
	return ((ShipObjectImplementation*) impl)->getBackshieldMax();
}

float ShipObjectAdapter::getTotalMass() {
	return ((ShipObjectImplementation*) impl)->getTotalMass();
}

float ShipObjectAdapter::getWeaponCharge() {
	return ((ShipObjectImplementation*) impl)->getWeaponCharge();
}

unsigned int ShipObjectAdapter::getNextCrcUpdateCnt() {
	return ((ShipObjectImplementation*) impl)->getNextCrcUpdateCnt();
}

float ShipObjectAdapter::getMaxSpeed() {
	return ((ShipObjectImplementation*) impl)->getMaxSpeed();
}

float ShipObjectAdapter::getFrontshieldCur() {
	return ((ShipObjectImplementation*) impl)->getFrontshieldCur();
}

float ShipObjectAdapter::getBackshieldCur() {
	return ((ShipObjectImplementation*) impl)->getBackshieldCur();
}

/*
 *	ShipObjectHelper
 */

ShipObjectHelper* ShipObjectHelper::staticInitializer = ShipObjectHelper::instance();

ShipObjectHelper::ShipObjectHelper() {
	className = "ShipObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void ShipObjectHelper::finalizeHelper() {
	ShipObjectHelper::finalize();
}

DistributedObject* ShipObjectHelper::instantiateObject() {
	return new ShipObject(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ShipObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ShipObjectAdapter((ShipObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	ShipObjectServant
 */

ShipObjectServant::ShipObjectServant(unsigned long long oid, int type) : SceneObjectImplementation(oid, type) {
	_classHelper = ShipObjectHelper::instance();
}

ShipObjectServant::~ShipObjectServant() {
}

void ShipObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (ShipObject*) stub;
	SceneObjectServant::_setStub(stub);
}

DistributedObjectStub* ShipObjectServant::_getStub() {
	return _this;
}

