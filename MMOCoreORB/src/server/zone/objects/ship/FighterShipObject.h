/*
 *	server/zone/objects/ship/FighterShipObject.h generated by engine3 IDL compiler 0.60
 */

#ifndef FIGHTERSHIPOBJECT_H_
#define FIGHTERSHIPOBJECT_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "engine/core/ManagedObject.h"

#include "server/zone/objects/ship/ShipObject.h"

namespace server {
namespace zone {
namespace objects {
namespace ship {

class FighterShipObject : public ShipObject {
public:
	FighterShipObject();

	DistributedObjectServant* _getImplementation();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	FighterShipObject(DummyConstructorParameter* param);

	virtual ~FighterShipObject();

	friend class FighterShipObjectHelper;
};

} // namespace ship
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::ship;

namespace server {
namespace zone {
namespace objects {
namespace ship {

class FighterShipObjectImplementation : public ShipObjectImplementation {

public:
	FighterShipObjectImplementation();

	FighterShipObjectImplementation(DummyConstructorParameter* param);

	WeakReference<FighterShipObject*> _this;

	operator const FighterShipObject*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~FighterShipObjectImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const String& name);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class FighterShipObject;
};

class FighterShipObjectAdapter : public ShipObjectAdapter {
public:
	FighterShipObjectAdapter(FighterShipObject* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

};

class FighterShipObjectHelper : public DistributedObjectClassHelper, public Singleton<FighterShipObjectHelper> {
	static FighterShipObjectHelper* staticInitializer;

public:
	FighterShipObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<FighterShipObjectHelper>;
};

} // namespace ship
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::ship;

#endif /*FIGHTERSHIPOBJECT_H_*/
