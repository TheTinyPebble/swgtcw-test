/*
 *	server/zone/objects/ship/ShipObject.h generated by engine3 IDL compiler 0.55
 */

#ifndef SHIPOBJECT_H_
#define SHIPOBJECT_H_

#include "engine/orb/DistributedObjectBroker.h"

class SceneObject;

class Player;

class IntangibleObject;

class ShipComponent;

#include "../scene/SceneObject.h"

class ShipObject : public SceneObject {
public:
	ShipObject(unsigned long long oid, Player* owner);

	void init();

	void sendToOwner(bool inSpace);

	void sendTo(Player* player, bool inSpace, bool doClose = true);

	void setShipBody(IntangibleObject* tsb);

	IntangibleObject* getShipBody();

	void setStfName(const String& Name);

	String& getStfName();

	UnicodeString& getOwnerName();

	int getComponentListSize();

	void calcActiveComponentListSize();

	int getActiveComponentListSize();

	void addComponent(ShipComponent* tsc);

	void removeComponent(int compId);

	ShipComponent* getComponent(int compId);

	unsigned int getNextUnkShip1UpdateCnt();

	unsigned int getNextUnkShip1UpdateCnt2();

	unsigned int getNextEnergyDrainUpdateCnt();

	unsigned int getNextCompMassUpdateCnt();

	unsigned int getNextUnkShip1UpdateCnt3();

	void setTotalMass(float ttm);

	float getShieldChargeRate();

	float getCapacitorChargeRate();

	void setTotalEnergy(float tte);

	float getTotalEnergy();

	float getChassisCur();

	float getChassisMax();

	unsigned int getNextCurArmorUpdateCnt();

	unsigned int getNextMaxArmorUpdateCnt();

	unsigned int getNextCurHitpointsUpdateCnt();

	unsigned int getNextMaxHitpointsUpdateCnt();

	unsigned int getNextUnkShip3UpdateCnt();

	float getFrontshieldMax();

	float getBackshieldMax();

	float getTotalMass();

	float getWeaponCharge();

	unsigned int getNextCrcUpdateCnt();

	float getMaxSpeed();

	float getFrontshieldCur();

	float getBackshieldCur();

protected:
	ShipObject(DummyConstructorParameter* param);

	virtual ~ShipObject();

	String _return_getStfName;

	UnicodeString _return_getOwnerName;

	friend class ShipObjectHelper;
};

class ShipObjectImplementation;

class ShipObjectAdapter : public SceneObjectAdapter {
public:
	ShipObjectAdapter(ShipObjectImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void init();

	void sendToOwner(bool inSpace);

	void sendTo(Player* player, bool inSpace, bool doClose);

	void setShipBody(IntangibleObject* tsb);

	IntangibleObject* getShipBody();

	void setStfName(const String& Name);

	String& getStfName();

	UnicodeString& getOwnerName();

	int getComponentListSize();

	void calcActiveComponentListSize();

	int getActiveComponentListSize();

	void addComponent(ShipComponent* tsc);

	void removeComponent(int compId);

	ShipComponent* getComponent(int compId);

	unsigned int getNextUnkShip1UpdateCnt();

	unsigned int getNextUnkShip1UpdateCnt2();

	unsigned int getNextEnergyDrainUpdateCnt();

	unsigned int getNextCompMassUpdateCnt();

	unsigned int getNextUnkShip1UpdateCnt3();

	void setTotalMass(float ttm);

	float getShieldChargeRate();

	float getCapacitorChargeRate();

	void setTotalEnergy(float tte);

	float getTotalEnergy();

	float getChassisCur();

	float getChassisMax();

	unsigned int getNextCurArmorUpdateCnt();

	unsigned int getNextMaxArmorUpdateCnt();

	unsigned int getNextCurHitpointsUpdateCnt();

	unsigned int getNextMaxHitpointsUpdateCnt();

	unsigned int getNextUnkShip3UpdateCnt();

	float getFrontshieldMax();

	float getBackshieldMax();

	float getTotalMass();

	float getWeaponCharge();

	unsigned int getNextCrcUpdateCnt();

	float getMaxSpeed();

	float getFrontshieldCur();

	float getBackshieldCur();

protected:
	String _param0_setStfName__String_;
};

class ShipObjectHelper : public DistributedObjectClassHelper, public Singleton<ShipObjectHelper> {
	static ShipObjectHelper* staticInitializer;

public:
	ShipObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<ShipObjectHelper>;
};

#include "../scene/SceneObjectImplementation.h"

class ShipObjectServant : public SceneObjectImplementation {
public:
	ShipObject* _this;

public:
	ShipObjectServant(unsigned long long oid, int type);
	virtual ~ShipObjectServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*SHIPOBJECT_H_*/
