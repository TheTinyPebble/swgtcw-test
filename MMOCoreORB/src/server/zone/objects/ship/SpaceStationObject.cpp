/*
 *	server/zone/objects/ship/SpaceStationObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "SpaceStationObject.h"

/*
 *	SpaceStationObjectStub
 */

SpaceStationObject::SpaceStationObject() : ShipObject(DummyConstructorParameter::instance()) {
	SpaceStationObjectImplementation* _implementation = new SpaceStationObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("SpaceStationObject");
}

SpaceStationObject::SpaceStationObject(DummyConstructorParameter* param) : ShipObject(param) {
	_setClassName("SpaceStationObject");
}

SpaceStationObject::~SpaceStationObject() {
}



DistributedObjectServant* SpaceStationObject::_getImplementation() {

	_updated = true;
	return _impl;
}

void SpaceStationObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	SpaceStationObjectImplementation
 */

SpaceStationObjectImplementation::SpaceStationObjectImplementation(DummyConstructorParameter* param) : ShipObjectImplementation(param) {
	_initializeImplementation();
}


SpaceStationObjectImplementation::~SpaceStationObjectImplementation() {
}


void SpaceStationObjectImplementation::finalize() {
}

void SpaceStationObjectImplementation::_initializeImplementation() {
	_setClassHelper(SpaceStationObjectHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void SpaceStationObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<SpaceStationObject*>(stub);
	ShipObjectImplementation::_setStub(stub);
}

DistributedObjectStub* SpaceStationObjectImplementation::_getStub() {
	return _this;
}

SpaceStationObjectImplementation::operator const SpaceStationObject*() {
	return _this;
}

void SpaceStationObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void SpaceStationObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void SpaceStationObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void SpaceStationObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void SpaceStationObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void SpaceStationObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void SpaceStationObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void SpaceStationObjectImplementation::_serializationHelperMethod() {
	ShipObjectImplementation::_serializationHelperMethod();

	_setClassName("SpaceStationObject");

}

void SpaceStationObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(SpaceStationObjectImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool SpaceStationObjectImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ShipObjectImplementation::readObjectMember(stream, _name))
		return true;


	return false;
}

void SpaceStationObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = SpaceStationObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int SpaceStationObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ShipObjectImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;

	return _count + 0;
}

SpaceStationObjectImplementation::SpaceStationObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/ship/SpaceStationObject.idl():  		Logger.setLoggingName("SpaceStationObject");
	Logger::setLoggingName("SpaceStationObject");
}

/*
 *	SpaceStationObjectAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


SpaceStationObjectAdapter::SpaceStationObjectAdapter(SpaceStationObject* obj) : ShipObjectAdapter(obj) {
}

void SpaceStationObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	default:
		throw Exception("Method does not exists");
	}
}

/*
 *	SpaceStationObjectHelper
 */

SpaceStationObjectHelper* SpaceStationObjectHelper::staticInitializer = SpaceStationObjectHelper::instance();

SpaceStationObjectHelper::SpaceStationObjectHelper() {
	className = "SpaceStationObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void SpaceStationObjectHelper::finalizeHelper() {
	SpaceStationObjectHelper::finalize();
}

DistributedObject* SpaceStationObjectHelper::instantiateObject() {
	return new SpaceStationObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* SpaceStationObjectHelper::instantiateServant() {
	return new SpaceStationObjectImplementation();
}

DistributedObjectAdapter* SpaceStationObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SpaceStationObjectAdapter(static_cast<SpaceStationObject*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

