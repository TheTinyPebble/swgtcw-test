/*
 *	server/zone/objects/manufactureschematic/ManufactureSchematic.cpp generated by engine3 IDL compiler 0.60
 */

#include "ManufactureSchematic.h"

#include "server/zone/objects/player/PlayerCreature.h"

/*
 *	ManufactureSchematicStub
 */

ManufactureSchematic::ManufactureSchematic() : SceneObject(DummyConstructorParameter::instance()) {
	_impl = new ManufactureSchematicImplementation();
	_impl->_setStub(this);
}

ManufactureSchematic::ManufactureSchematic(DummyConstructorParameter* param) : SceneObject(param) {
}

ManufactureSchematic::~ManufactureSchematic() {
}


void ManufactureSchematic::fillAttributeList(AttributeListMessage* msg, PlayerCreature* object) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((ManufactureSchematicImplementation*) _impl)->fillAttributeList(msg, object);
}

void ManufactureSchematic::sendTo(SceneObject* player, bool doClose) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);
		method.addBooleanParameter(doClose);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _impl)->sendTo(player, doClose);
}

void ManufactureSchematic::sendBaselinesTo(SceneObject* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _impl)->sendBaselinesTo(player);
}

void ManufactureSchematic::synchronizedUIListen(SceneObject* player, int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(player);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _impl)->synchronizedUIListen(player, value);
}

void ManufactureSchematic::synchronizedUIStopListen(SceneObject* player, int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(player);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _impl)->synchronizedUIStopListen(player, value);
}

void ManufactureSchematic::setDraftSchematic(DraftSchematic* schematic) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(schematic);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _impl)->setDraftSchematic(schematic);
}

void ManufactureSchematic::initializeIngredientSlots(DraftSchematic* schematic) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addObjectParameter(schematic);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _impl)->initializeIngredientSlots(schematic);
}

void ManufactureSchematic::cleanupIngredientSlots() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _impl)->cleanupIngredientSlots();
}

DraftSchematic* ManufactureSchematic::getDraftSchematic() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		return (DraftSchematic*) method.executeWithObjectReturn();
	} else
		return ((ManufactureSchematicImplementation*) _impl)->getDraftSchematic();
}

Reference<IngredientSlot*> ManufactureSchematic::getIngredientSlot(int index) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((ManufactureSchematicImplementation*) _impl)->getIngredientSlot(index);
}

int ManufactureSchematic::getSlotCount() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		return method.executeWithSignedIntReturn();
	} else
		return ((ManufactureSchematicImplementation*) _impl)->getSlotCount();
}

void ManufactureSchematic::increaseComplexity() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _impl)->increaseComplexity();
}

void ManufactureSchematic::decreaseComplexity() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _impl)->decreaseComplexity();
}

float ManufactureSchematic::getComplexity() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);

		return method.executeWithFloatReturn();
	} else
		return ((ManufactureSchematicImplementation*) _impl)->getComplexity();
}

bool ManufactureSchematic::isReadyForAssembly() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		return method.executeWithBooleanReturn();
	} else
		return ((ManufactureSchematicImplementation*) _impl)->isReadyForAssembly();
}

void ManufactureSchematic::setAssembled() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _impl)->setAssembled();
}

bool ManufactureSchematic::isAssembled() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);

		return method.executeWithBooleanReturn();
	} else
		return ((ManufactureSchematicImplementation*) _impl)->isAssembled();
}

void ManufactureSchematic::setCompleted() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _impl)->setCompleted();
}

bool ManufactureSchematic::isCompleted() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);

		return method.executeWithBooleanReturn();
	} else
		return ((ManufactureSchematicImplementation*) _impl)->isCompleted();
}

CraftingValues* ManufactureSchematic::getCraftingValues() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((ManufactureSchematicImplementation*) _impl)->getCraftingValues();
}

void ManufactureSchematic::setExperimentingCounter(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _impl)->setExperimentingCounter(value);
}

int ManufactureSchematic::getExperimentingCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);

		return method.executeWithSignedIntReturn();
	} else
		return ((ManufactureSchematicImplementation*) _impl)->getExperimentingCounter();
}

int ManufactureSchematic::getExperimentingCounterPrevious() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);

		return method.executeWithSignedIntReturn();
	} else
		return ((ManufactureSchematicImplementation*) _impl)->getExperimentingCounterPrevious();
}

void ManufactureSchematic::setManufactureLimit(int limit) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);
		method.addSignedIntParameter(limit);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _impl)->setManufactureLimit(limit);
}

int ManufactureSchematic::getManufactureLimit() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);

		return method.executeWithSignedIntReturn();
	} else
		return ((ManufactureSchematicImplementation*) _impl)->getManufactureLimit();
}

byte ManufactureSchematic::getCustomizationType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);

		return method.executeWithByteReturn();
	} else
		return ((ManufactureSchematicImplementation*) _impl)->getCustomizationType();
}

/*
 *	ManufactureSchematicImplementation
 */

ManufactureSchematicImplementation::ManufactureSchematicImplementation(DummyConstructorParameter* param) : SceneObjectImplementation(param) {
	_initializeImplementation();
}

ManufactureSchematicImplementation::~ManufactureSchematicImplementation() {
}


void ManufactureSchematicImplementation::finalize() {
}

void ManufactureSchematicImplementation::_initializeImplementation() {
	_setClassHelper(ManufactureSchematicHelper::instance());

	_serializationHelperMethod();
}

void ManufactureSchematicImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (ManufactureSchematic*) stub;
	SceneObjectImplementation::_setStub(stub);
}

DistributedObjectStub* ManufactureSchematicImplementation::_getStub() {
	return _this;
}

ManufactureSchematicImplementation::operator const ManufactureSchematic*() {
	return _this;
}

void ManufactureSchematicImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void ManufactureSchematicImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void ManufactureSchematicImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void ManufactureSchematicImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void ManufactureSchematicImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void ManufactureSchematicImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void ManufactureSchematicImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void ManufactureSchematicImplementation::_serializationHelperMethod() {
	SceneObjectImplementation::_serializationHelperMethod();

	_setClassName("ManufactureSchematic");

}

ManufactureSchematicImplementation::ManufactureSchematicImplementation() {
	_initializeImplementation();
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(76):  		Logger.setLoggingName("ManufactureSchematic");
	Logger::setLoggingName("ManufactureSchematic");
}

void ManufactureSchematicImplementation::setDraftSchematic(DraftSchematic* schematic) {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(126):  		draftSchematic = schematic;
	draftSchematic = schematic;
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(128):  	}
	if (draftSchematic != NULL)	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(129):  			initializeIngredientSlots(draftSchematic);
	initializeIngredientSlots(draftSchematic);
}

DraftSchematic* ManufactureSchematicImplementation::getDraftSchematic() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(137):  		return draftSchematic;
	return draftSchematic;
}

void ManufactureSchematicImplementation::increaseComplexity() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(147):  		complexity++;
	complexity ++;
}

void ManufactureSchematicImplementation::decreaseComplexity() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(151):  	}
	if (complexity > 1)	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(152):  			complexity = complexity - 1;
	complexity = complexity - 1;
}

float ManufactureSchematicImplementation::getComplexity() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(156):  		return complexity;
	return complexity;
}

void ManufactureSchematicImplementation::setAssembled() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(162):  		assembled = true;
	assembled = true;
}

bool ManufactureSchematicImplementation::isAssembled() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(166):  		return assembled;
	return assembled;
}

void ManufactureSchematicImplementation::setCompleted() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(170):  		completed = true;
	completed = true;
}

bool ManufactureSchematicImplementation::isCompleted() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(174):  		return completed;
	return completed;
}

CraftingValues* ManufactureSchematicImplementation::getCraftingValues() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(179):  		return craftingValues;
	return (&craftingValues);
}

void ManufactureSchematicImplementation::setExperimentingCounter(int value) {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(183):  		experimentingCounterPrevious = experimentingCounter;
	experimentingCounterPrevious = experimentingCounter;
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(184):  		experimentingCounter = value;
	experimentingCounter = value;
}

int ManufactureSchematicImplementation::getExperimentingCounter() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(188):  		return experimentingCounter;
	return experimentingCounter;
}

int ManufactureSchematicImplementation::getExperimentingCounterPrevious() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(192):  		return experimentingCounterPrevious;
	return experimentingCounterPrevious;
}

void ManufactureSchematicImplementation::setManufactureLimit(int limit) {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(196):  		manufactureLimit = limit;
	manufactureLimit = limit;
}

int ManufactureSchematicImplementation::getManufactureLimit() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(200):  		return manufactureLimit;
	return manufactureLimit;
}

byte ManufactureSchematicImplementation::getCustomizationType() {
}

/*
 *	ManufactureSchematicAdapter
 */

ManufactureSchematicAdapter::ManufactureSchematicAdapter(ManufactureSchematicImplementation* obj) : SceneObjectAdapter(obj) {
}

Packet* ManufactureSchematicAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		sendTo((SceneObject*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 7:
		sendBaselinesTo((SceneObject*) inv->getObjectParameter());
		break;
	case 8:
		synchronizedUIListen((SceneObject*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case 9:
		synchronizedUIStopListen((SceneObject*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case 10:
		setDraftSchematic((DraftSchematic*) inv->getObjectParameter());
		break;
	case 11:
		initializeIngredientSlots((DraftSchematic*) inv->getObjectParameter());
		break;
	case 12:
		cleanupIngredientSlots();
		break;
	case 13:
		resp->insertLong(getDraftSchematic()->_getObjectID());
		break;
	case 14:
		resp->insertSignedInt(getSlotCount());
		break;
	case 15:
		increaseComplexity();
		break;
	case 16:
		decreaseComplexity();
		break;
	case 17:
		resp->insertFloat(getComplexity());
		break;
	case 18:
		resp->insertBoolean(isReadyForAssembly());
		break;
	case 19:
		setAssembled();
		break;
	case 20:
		resp->insertBoolean(isAssembled());
		break;
	case 21:
		setCompleted();
		break;
	case 22:
		resp->insertBoolean(isCompleted());
		break;
	case 23:
		setExperimentingCounter(inv->getSignedIntParameter());
		break;
	case 24:
		resp->insertSignedInt(getExperimentingCounter());
		break;
	case 25:
		resp->insertSignedInt(getExperimentingCounterPrevious());
		break;
	case 26:
		setManufactureLimit(inv->getSignedIntParameter());
		break;
	case 27:
		resp->insertSignedInt(getManufactureLimit());
		break;
	case 28:
		resp->insertByte(getCustomizationType());
		break;
	default:
		return NULL;
	}

	return resp;
}

void ManufactureSchematicAdapter::sendTo(SceneObject* player, bool doClose) {
	((ManufactureSchematicImplementation*) impl)->sendTo(player, doClose);
}

void ManufactureSchematicAdapter::sendBaselinesTo(SceneObject* player) {
	((ManufactureSchematicImplementation*) impl)->sendBaselinesTo(player);
}

void ManufactureSchematicAdapter::synchronizedUIListen(SceneObject* player, int value) {
	((ManufactureSchematicImplementation*) impl)->synchronizedUIListen(player, value);
}

void ManufactureSchematicAdapter::synchronizedUIStopListen(SceneObject* player, int value) {
	((ManufactureSchematicImplementation*) impl)->synchronizedUIStopListen(player, value);
}

void ManufactureSchematicAdapter::setDraftSchematic(DraftSchematic* schematic) {
	((ManufactureSchematicImplementation*) impl)->setDraftSchematic(schematic);
}

void ManufactureSchematicAdapter::initializeIngredientSlots(DraftSchematic* schematic) {
	((ManufactureSchematicImplementation*) impl)->initializeIngredientSlots(schematic);
}

void ManufactureSchematicAdapter::cleanupIngredientSlots() {
	((ManufactureSchematicImplementation*) impl)->cleanupIngredientSlots();
}

DraftSchematic* ManufactureSchematicAdapter::getDraftSchematic() {
	return ((ManufactureSchematicImplementation*) impl)->getDraftSchematic();
}

int ManufactureSchematicAdapter::getSlotCount() {
	return ((ManufactureSchematicImplementation*) impl)->getSlotCount();
}

void ManufactureSchematicAdapter::increaseComplexity() {
	((ManufactureSchematicImplementation*) impl)->increaseComplexity();
}

void ManufactureSchematicAdapter::decreaseComplexity() {
	((ManufactureSchematicImplementation*) impl)->decreaseComplexity();
}

float ManufactureSchematicAdapter::getComplexity() {
	return ((ManufactureSchematicImplementation*) impl)->getComplexity();
}

bool ManufactureSchematicAdapter::isReadyForAssembly() {
	return ((ManufactureSchematicImplementation*) impl)->isReadyForAssembly();
}

void ManufactureSchematicAdapter::setAssembled() {
	((ManufactureSchematicImplementation*) impl)->setAssembled();
}

bool ManufactureSchematicAdapter::isAssembled() {
	return ((ManufactureSchematicImplementation*) impl)->isAssembled();
}

void ManufactureSchematicAdapter::setCompleted() {
	((ManufactureSchematicImplementation*) impl)->setCompleted();
}

bool ManufactureSchematicAdapter::isCompleted() {
	return ((ManufactureSchematicImplementation*) impl)->isCompleted();
}

void ManufactureSchematicAdapter::setExperimentingCounter(int value) {
	((ManufactureSchematicImplementation*) impl)->setExperimentingCounter(value);
}

int ManufactureSchematicAdapter::getExperimentingCounter() {
	return ((ManufactureSchematicImplementation*) impl)->getExperimentingCounter();
}

int ManufactureSchematicAdapter::getExperimentingCounterPrevious() {
	return ((ManufactureSchematicImplementation*) impl)->getExperimentingCounterPrevious();
}

void ManufactureSchematicAdapter::setManufactureLimit(int limit) {
	((ManufactureSchematicImplementation*) impl)->setManufactureLimit(limit);
}

int ManufactureSchematicAdapter::getManufactureLimit() {
	return ((ManufactureSchematicImplementation*) impl)->getManufactureLimit();
}

byte ManufactureSchematicAdapter::getCustomizationType() {
	return ((ManufactureSchematicImplementation*) impl)->getCustomizationType();
}

/*
 *	ManufactureSchematicHelper
 */

ManufactureSchematicHelper* ManufactureSchematicHelper::staticInitializer = ManufactureSchematicHelper::instance();

ManufactureSchematicHelper::ManufactureSchematicHelper() {
	className = "ManufactureSchematic";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void ManufactureSchematicHelper::finalizeHelper() {
	ManufactureSchematicHelper::finalize();
}

DistributedObject* ManufactureSchematicHelper::instantiateObject() {
	return new ManufactureSchematic(DummyConstructorParameter::instance());
}

DistributedObjectServant* ManufactureSchematicHelper::instantiateServant() {
	return new ManufactureSchematicImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ManufactureSchematicHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ManufactureSchematicAdapter((ManufactureSchematicImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

