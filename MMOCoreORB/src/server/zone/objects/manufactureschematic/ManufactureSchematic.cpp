/*
 *	server/zone/objects/manufactureschematic/ManufactureSchematic.cpp generated by engine3 IDL compiler 0.60
 */

#include "ManufactureSchematic.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/objects/draftschematic/DraftSchematic.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/objects/area/ActiveArea.h"

/*
 *	ManufactureSchematicStub
 */

enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 6,RPC_SENDTO__SCENEOBJECT_BOOL_,RPC_SENDBASELINESTO__SCENEOBJECT_,RPC_SYNCHRONIZEDUILISTEN__SCENEOBJECT_INT_,RPC_SYNCHRONIZEDUISTOPLISTEN__SCENEOBJECT_INT_,RPC_UPDATETODATABASEALLOBJECTS__BOOL_,RPC_ISMANUFACTURESCHEMATIC__,RPC_SETDRAFTSCHEMATIC__SCENEOBJECT_DRAFTSCHEMATIC_,RPC_INITIALIZEINGREDIENTSLOTS__SCENEOBJECT_DRAFTSCHEMATIC_,RPC_CLEANUPINGREDIENTSLOTS__,RPC_GETDRAFTSCHEMATIC__,RPC_GETSLOTCOUNT__,RPC_INCREASECOMPLEXITY__,RPC_DECREASECOMPLEXITY__,RPC_GETCOMPLEXITY__,RPC_ISFIRSTCRAFTINGUPDATE__,RPC_SETFIRSTCRAFTINGUPDATECOMPLETE__,RPC_ISREADYFORASSEMBLY__,RPC_SETASSEMBLED__,RPC_ISASSEMBLED__,RPC_SETCOMPLETED__,RPC_ISCOMPLETED__,RPC_SETCRAFTER__PLAYERCREATURE_,RPC_GETCRAFTER__,RPC_SETEXPERIMENTINGCOUNTER__INT_,RPC_GETEXPERIMENTINGCOUNTER__,RPC_GETEXPERIMENTINGCOUNTERPREVIOUS__,RPC_SETMANUFACTURELIMIT__INT_,RPC_GETMANUFACTURELIMIT__,RPC_SETPROTOTYPE__TANGIBLEOBJECT_,RPC_GETPROTOTYPE__,RPC_INITIALIZEFACTORYINGREDIENTS__,RPC_GETFACTORYINGREDIENTSSIZE__,RPC_GETFACTORYINGREDIENT__INT_,RPC_GETFACTORYINGREDIENTSLOTTYPE__INT_};

ManufactureSchematic::ManufactureSchematic() : IntangibleObject(DummyConstructorParameter::instance()) {
	ManufactureSchematicImplementation* _implementation = new ManufactureSchematicImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

ManufactureSchematic::ManufactureSchematic(DummyConstructorParameter* param) : IntangibleObject(param) {
}

ManufactureSchematic::~ManufactureSchematic() {
}


void ManufactureSchematic::initializeTransientMembers() {
	ManufactureSchematicImplementation* _implementation = (ManufactureSchematicImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void ManufactureSchematic::fillAttributeList(AttributeListMessage* msg, PlayerCreature* object) {
	ManufactureSchematicImplementation* _implementation = (ManufactureSchematicImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->fillAttributeList(msg, object);
}

void ManufactureSchematic::sendTo(SceneObject* player, bool doClose) {
	ManufactureSchematicImplementation* _implementation = (ManufactureSchematicImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDTO__SCENEOBJECT_BOOL_);
		method.addObjectParameter(player);
		method.addBooleanParameter(doClose);

		method.executeWithVoidReturn();
	} else
		_implementation->sendTo(player, doClose);
}

void ManufactureSchematic::sendBaselinesTo(SceneObject* player) {
	ManufactureSchematicImplementation* _implementation = (ManufactureSchematicImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDBASELINESTO__SCENEOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendBaselinesTo(player);
}

void ManufactureSchematic::synchronizedUIListen(SceneObject* player, int value) {
	ManufactureSchematicImplementation* _implementation = (ManufactureSchematicImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SYNCHRONIZEDUILISTEN__SCENEOBJECT_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->synchronizedUIListen(player, value);
}

void ManufactureSchematic::synchronizedUIStopListen(SceneObject* player, int value) {
	ManufactureSchematicImplementation* _implementation = (ManufactureSchematicImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SYNCHRONIZEDUISTOPLISTEN__SCENEOBJECT_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->synchronizedUIStopListen(player, value);
}

void ManufactureSchematic::updateToDatabaseAllObjects(bool startTask) {
	ManufactureSchematicImplementation* _implementation = (ManufactureSchematicImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATETODATABASEALLOBJECTS__BOOL_);
		method.addBooleanParameter(startTask);

		method.executeWithVoidReturn();
	} else
		_implementation->updateToDatabaseAllObjects(startTask);
}

bool ManufactureSchematic::isManufactureSchematic() {
	ManufactureSchematicImplementation* _implementation = (ManufactureSchematicImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISMANUFACTURESCHEMATIC__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isManufactureSchematic();
}

void ManufactureSchematic::setDraftSchematic(SceneObject* craftingTool, DraftSchematic* schematic) {
	ManufactureSchematicImplementation* _implementation = (ManufactureSchematicImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETDRAFTSCHEMATIC__SCENEOBJECT_DRAFTSCHEMATIC_);
		method.addObjectParameter(craftingTool);
		method.addObjectParameter(schematic);

		method.executeWithVoidReturn();
	} else
		_implementation->setDraftSchematic(craftingTool, schematic);
}

void ManufactureSchematic::initializeIngredientSlots(SceneObject* craftingTool, DraftSchematic* schematic) {
	ManufactureSchematicImplementation* _implementation = (ManufactureSchematicImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZEINGREDIENTSLOTS__SCENEOBJECT_DRAFTSCHEMATIC_);
		method.addObjectParameter(craftingTool);
		method.addObjectParameter(schematic);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeIngredientSlots(craftingTool, schematic);
}

void ManufactureSchematic::cleanupIngredientSlots() {
	ManufactureSchematicImplementation* _implementation = (ManufactureSchematicImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLEANUPINGREDIENTSLOTS__);

		method.executeWithVoidReturn();
	} else
		_implementation->cleanupIngredientSlots();
}

DraftSchematic* ManufactureSchematic::getDraftSchematic() {
	ManufactureSchematicImplementation* _implementation = (ManufactureSchematicImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDRAFTSCHEMATIC__);

		return (DraftSchematic*) method.executeWithObjectReturn();
	} else
		return _implementation->getDraftSchematic();
}

Reference<IngredientSlot*> ManufactureSchematic::getIngredientSlot(int index) {
	ManufactureSchematicImplementation* _implementation = (ManufactureSchematicImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getIngredientSlot(index);
}

int ManufactureSchematic::getSlotCount() {
	ManufactureSchematicImplementation* _implementation = (ManufactureSchematicImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSLOTCOUNT__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getSlotCount();
}

void ManufactureSchematic::increaseComplexity() {
	ManufactureSchematicImplementation* _implementation = (ManufactureSchematicImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INCREASECOMPLEXITY__);

		method.executeWithVoidReturn();
	} else
		_implementation->increaseComplexity();
}

void ManufactureSchematic::decreaseComplexity() {
	ManufactureSchematicImplementation* _implementation = (ManufactureSchematicImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DECREASECOMPLEXITY__);

		method.executeWithVoidReturn();
	} else
		_implementation->decreaseComplexity();
}

float ManufactureSchematic::getComplexity() {
	ManufactureSchematicImplementation* _implementation = (ManufactureSchematicImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCOMPLEXITY__);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getComplexity();
}

bool ManufactureSchematic::isFirstCraftingUpdate() {
	ManufactureSchematicImplementation* _implementation = (ManufactureSchematicImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISFIRSTCRAFTINGUPDATE__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isFirstCraftingUpdate();
}

void ManufactureSchematic::setFirstCraftingUpdateComplete() {
	ManufactureSchematicImplementation* _implementation = (ManufactureSchematicImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETFIRSTCRAFTINGUPDATECOMPLETE__);

		method.executeWithVoidReturn();
	} else
		_implementation->setFirstCraftingUpdateComplete();
}

bool ManufactureSchematic::isReadyForAssembly() {
	ManufactureSchematicImplementation* _implementation = (ManufactureSchematicImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISREADYFORASSEMBLY__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isReadyForAssembly();
}

void ManufactureSchematic::setAssembled() {
	ManufactureSchematicImplementation* _implementation = (ManufactureSchematicImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETASSEMBLED__);

		method.executeWithVoidReturn();
	} else
		_implementation->setAssembled();
}

bool ManufactureSchematic::isAssembled() {
	ManufactureSchematicImplementation* _implementation = (ManufactureSchematicImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISASSEMBLED__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isAssembled();
}

void ManufactureSchematic::setCompleted() {
	ManufactureSchematicImplementation* _implementation = (ManufactureSchematicImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCOMPLETED__);

		method.executeWithVoidReturn();
	} else
		_implementation->setCompleted();
}

bool ManufactureSchematic::isCompleted() {
	ManufactureSchematicImplementation* _implementation = (ManufactureSchematicImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCOMPLETED__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isCompleted();
}

void ManufactureSchematic::setCrafter(PlayerCreature* player) {
	ManufactureSchematicImplementation* _implementation = (ManufactureSchematicImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCRAFTER__PLAYERCREATURE_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->setCrafter(player);
}

PlayerCreature* ManufactureSchematic::getCrafter() {
	ManufactureSchematicImplementation* _implementation = (ManufactureSchematicImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCRAFTER__);

		return (PlayerCreature*) method.executeWithObjectReturn();
	} else
		return _implementation->getCrafter();
}

CraftingValues* ManufactureSchematic::getCraftingValues() {
	ManufactureSchematicImplementation* _implementation = (ManufactureSchematicImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getCraftingValues();
}

void ManufactureSchematic::setExperimentingCounter(int value) {
	ManufactureSchematicImplementation* _implementation = (ManufactureSchematicImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETEXPERIMENTINGCOUNTER__INT_);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setExperimentingCounter(value);
}

int ManufactureSchematic::getExperimentingCounter() {
	ManufactureSchematicImplementation* _implementation = (ManufactureSchematicImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETEXPERIMENTINGCOUNTER__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getExperimentingCounter();
}

int ManufactureSchematic::getExperimentingCounterPrevious() {
	ManufactureSchematicImplementation* _implementation = (ManufactureSchematicImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETEXPERIMENTINGCOUNTERPREVIOUS__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getExperimentingCounterPrevious();
}

void ManufactureSchematic::setManufactureLimit(int limit) {
	ManufactureSchematicImplementation* _implementation = (ManufactureSchematicImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMANUFACTURELIMIT__INT_);
		method.addSignedIntParameter(limit);

		method.executeWithVoidReturn();
	} else
		_implementation->setManufactureLimit(limit);
}

int ManufactureSchematic::getManufactureLimit() {
	ManufactureSchematicImplementation* _implementation = (ManufactureSchematicImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMANUFACTURELIMIT__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getManufactureLimit();
}

void ManufactureSchematic::setPrototype(TangibleObject* tano) {
	ManufactureSchematicImplementation* _implementation = (ManufactureSchematicImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPROTOTYPE__TANGIBLEOBJECT_);
		method.addObjectParameter(tano);

		method.executeWithVoidReturn();
	} else
		_implementation->setPrototype(tano);
}

TangibleObject* ManufactureSchematic::getPrototype() {
	ManufactureSchematicImplementation* _implementation = (ManufactureSchematicImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPROTOTYPE__);

		return (TangibleObject*) method.executeWithObjectReturn();
	} else
		return _implementation->getPrototype();
}

void ManufactureSchematic::initializeFactoryIngredients() {
	ManufactureSchematicImplementation* _implementation = (ManufactureSchematicImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZEFACTORYINGREDIENTS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeFactoryIngredients();
}

int ManufactureSchematic::getFactoryIngredientsSize() {
	ManufactureSchematicImplementation* _implementation = (ManufactureSchematicImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFACTORYINGREDIENTSSIZE__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getFactoryIngredientsSize();
}

SceneObject* ManufactureSchematic::getFactoryIngredient(int i) {
	ManufactureSchematicImplementation* _implementation = (ManufactureSchematicImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFACTORYINGREDIENT__INT_);
		method.addSignedIntParameter(i);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return _implementation->getFactoryIngredient(i);
}

int ManufactureSchematic::getFactoryIngredientSlotType(int i) {
	ManufactureSchematicImplementation* _implementation = (ManufactureSchematicImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFACTORYINGREDIENTSLOTTYPE__INT_);
		method.addSignedIntParameter(i);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getFactoryIngredientSlotType(i);
}

DistributedObjectServant* ManufactureSchematic::_getImplementation() {

	_updated = true;
	return _impl;
}

void ManufactureSchematic::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	ManufactureSchematicImplementation
 */

ManufactureSchematicImplementation::ManufactureSchematicImplementation(DummyConstructorParameter* param) : IntangibleObjectImplementation(param) {
	_initializeImplementation();
}


ManufactureSchematicImplementation::~ManufactureSchematicImplementation() {
}


void ManufactureSchematicImplementation::finalize() {
}

void ManufactureSchematicImplementation::_initializeImplementation() {
	_setClassHelper(ManufactureSchematicHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void ManufactureSchematicImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (ManufactureSchematic*) stub;
	IntangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* ManufactureSchematicImplementation::_getStub() {
	return _this;
}

ManufactureSchematicImplementation::operator const ManufactureSchematic*() {
	return _this;
}

void ManufactureSchematicImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void ManufactureSchematicImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void ManufactureSchematicImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void ManufactureSchematicImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void ManufactureSchematicImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void ManufactureSchematicImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void ManufactureSchematicImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void ManufactureSchematicImplementation::_serializationHelperMethod() {
	IntangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("ManufactureSchematic");

}

void ManufactureSchematicImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(ManufactureSchematicImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ManufactureSchematicImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (IntangibleObjectImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "draftSchematic") {
		TypeInfo<ManagedReference<DraftSchematic* > >::parseFromBinaryStream(&draftSchematic, stream);
		return true;
	}

	if (_name == "prototype") {
		TypeInfo<ManagedReference<TangibleObject* > >::parseFromBinaryStream(&prototype, stream);
		return true;
	}

	if (_name == "dataSize") {
		TypeInfo<float >::parseFromBinaryStream(&dataSize, stream);
		return true;
	}

	if (_name == "manufactureLimit") {
		TypeInfo<int >::parseFromBinaryStream(&manufactureLimit, stream);
		return true;
	}

	if (_name == "complexity") {
		TypeInfo<float >::parseFromBinaryStream(&complexity, stream);
		return true;
	}

	if (_name == "crcToSend") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&crcToSend, stream);
		return true;
	}

	if (_name == "crafter") {
		TypeInfo<ManagedReference<PlayerCreature* > >::parseFromBinaryStream(&crafter, stream);
		return true;
	}

	if (_name == "firstCraftingUpdate") {
		TypeInfo<bool >::parseFromBinaryStream(&firstCraftingUpdate, stream);
		return true;
	}

	if (_name == "factoryIngredients") {
		TypeInfo<Vector<ManagedReference<TangibleObject* > > >::parseFromBinaryStream(&factoryIngredients, stream);
		return true;
	}

	if (_name == "factoryIngredientSlotType") {
		TypeInfo<Vector<int> >::parseFromBinaryStream(&factoryIngredientSlotType, stream);
		return true;
	}

	if (_name == "ingredientSlots") {
		TypeInfo<IngredientSlots >::parseFromBinaryStream(&ingredientSlots, stream);
		return true;
	}

	if (_name == "assembled") {
		TypeInfo<bool >::parseFromBinaryStream(&assembled, stream);
		return true;
	}

	if (_name == "completed") {
		TypeInfo<bool >::parseFromBinaryStream(&completed, stream);
		return true;
	}

	if (_name == "experimentingCounter") {
		TypeInfo<int >::parseFromBinaryStream(&experimentingCounter, stream);
		return true;
	}

	if (_name == "experimentingCounterPrevious") {
		TypeInfo<int >::parseFromBinaryStream(&experimentingCounterPrevious, stream);
		return true;
	}

	if (_name == "craftingValues") {
		TypeInfo<CraftingValues >::parseFromBinaryStream(&craftingValues, stream);
		return true;
	}

	if (_name == "customizationOptions") {
		TypeInfo<Vector<byte> >::parseFromBinaryStream(&customizationOptions, stream);
		return true;
	}

	if (_name == "customizationDefaultValues") {
		TypeInfo<Vector<byte> >::parseFromBinaryStream(&customizationDefaultValues, stream);
		return true;
	}


	return false;
}

void ManufactureSchematicImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ManufactureSchematicImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ManufactureSchematicImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "draftSchematic";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<DraftSchematic* > >::toBinaryStream(&draftSchematic, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "prototype";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<TangibleObject* > >::toBinaryStream(&prototype, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "dataSize";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<float >::toBinaryStream(&dataSize, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "manufactureLimit";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&manufactureLimit, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "complexity";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<float >::toBinaryStream(&complexity, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "crcToSend";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned int >::toBinaryStream(&crcToSend, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "crafter";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<PlayerCreature* > >::toBinaryStream(&crafter, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "firstCraftingUpdate";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<bool >::toBinaryStream(&firstCraftingUpdate, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "factoryIngredients";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<Vector<ManagedReference<TangibleObject* > > >::toBinaryStream(&factoryIngredients, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "factoryIngredientSlotType";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<Vector<int> >::toBinaryStream(&factoryIngredientSlotType, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "ingredientSlots";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<IngredientSlots >::toBinaryStream(&ingredientSlots, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "assembled";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<bool >::toBinaryStream(&assembled, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "completed";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<bool >::toBinaryStream(&completed, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "experimentingCounter";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&experimentingCounter, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "experimentingCounterPrevious";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&experimentingCounterPrevious, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "craftingValues";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<CraftingValues >::toBinaryStream(&craftingValues, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "customizationOptions";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<Vector<byte> >::toBinaryStream(&customizationOptions, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "customizationDefaultValues";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<Vector<byte> >::toBinaryStream(&customizationDefaultValues, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 18 + IntangibleObjectImplementation::writeObjectMembers(stream);
}

ManufactureSchematicImplementation::ManufactureSchematicImplementation() {
	_initializeImplementation();
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl():  		Logger.setLoggingName("ManufactureSchematic");
	Logger::setLoggingName("ManufactureSchematic");
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl():  		prototype = null;
	prototype = NULL;
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl():  		firstCraftingUpdate = true;
	firstCraftingUpdate = true;
}

void ManufactureSchematicImplementation::initializeTransientMembers() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl():  		super.initializeTransientMembers();
	IntangibleObjectImplementation::initializeTransientMembers();
}

bool ManufactureSchematicImplementation::isManufactureSchematic() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl():  		return true;
	return true;
}

DraftSchematic* ManufactureSchematicImplementation::getDraftSchematic() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl():  		return draftSchematic;
	return draftSchematic;
}

void ManufactureSchematicImplementation::increaseComplexity() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl():  		complexity++;
	complexity ++;
}

void ManufactureSchematicImplementation::decreaseComplexity() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl():  	}
	if (complexity > 1)	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl():  			complexity = complexity - 1;
	complexity = complexity - 1;
}

float ManufactureSchematicImplementation::getComplexity() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl():  		return complexity;
	return complexity;
}

bool ManufactureSchematicImplementation::isFirstCraftingUpdate() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl():  		return firstCraftingUpdate;
	return firstCraftingUpdate;
}

void ManufactureSchematicImplementation::setFirstCraftingUpdateComplete() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl():  		firstCraftingUpdate = false;
	firstCraftingUpdate = false;
}

void ManufactureSchematicImplementation::setAssembled() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl():  		assembled = true;
	assembled = true;
}

bool ManufactureSchematicImplementation::isAssembled() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl():  		return assembled;
	return assembled;
}

void ManufactureSchematicImplementation::setCompleted() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl():  		completed = true;
	completed = true;
}

bool ManufactureSchematicImplementation::isCompleted() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl():  		return completed;
	return completed;
}

void ManufactureSchematicImplementation::setCrafter(PlayerCreature* player) {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl():  		crafter = player;
	crafter = player;
}

PlayerCreature* ManufactureSchematicImplementation::getCrafter() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl():  		return crafter;
	return crafter;
}

CraftingValues* ManufactureSchematicImplementation::getCraftingValues() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl():  		return craftingValues;
	return (&craftingValues);
}

void ManufactureSchematicImplementation::setExperimentingCounter(int value) {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl():  		experimentingCounterPrevious = experimentingCounter;
	experimentingCounterPrevious = experimentingCounter;
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl():  		experimentingCounter = value;
	experimentingCounter = value;
}

int ManufactureSchematicImplementation::getExperimentingCounter() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl():  		return experimentingCounter;
	return experimentingCounter;
}

int ManufactureSchematicImplementation::getExperimentingCounterPrevious() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl():  		return experimentingCounterPrevious;
	return experimentingCounterPrevious;
}

void ManufactureSchematicImplementation::setManufactureLimit(int limit) {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl():  		manufactureLimit = limit;
	manufactureLimit = limit;
}

int ManufactureSchematicImplementation::getManufactureLimit() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl():  		return manufactureLimit;
	return manufactureLimit;
}

TangibleObject* ManufactureSchematicImplementation::getPrototype() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl():  		return prototype;
	return prototype;
}

int ManufactureSchematicImplementation::getFactoryIngredientsSize() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl():  		return factoryIngredients.size();
	return (&factoryIngredients)->size();
}

SceneObject* ManufactureSchematicImplementation::getFactoryIngredient(int i) {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl():  		return factoryIngredients.get(i);
	return (&factoryIngredients)->get(i);
}

int ManufactureSchematicImplementation::getFactoryIngredientSlotType(int i) {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl():  			return 0;
	if ((&factoryIngredientSlotType)->size() > i)	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl():  			return factoryIngredientSlotType.get(i);
	return (&factoryIngredientSlotType)->get(i);

	else 	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl():  			return 0;
	return 0;
}

/*
 *	ManufactureSchematicAdapter
 */

ManufactureSchematicAdapter::ManufactureSchematicAdapter(ManufactureSchematicImplementation* obj) : IntangibleObjectAdapter(obj) {
}

Packet* ManufactureSchematicAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		initializeTransientMembers();
		break;
	case RPC_SENDTO__SCENEOBJECT_BOOL_:
		sendTo((SceneObject*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case RPC_SENDBASELINESTO__SCENEOBJECT_:
		sendBaselinesTo((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_SYNCHRONIZEDUILISTEN__SCENEOBJECT_INT_:
		synchronizedUIListen((SceneObject*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case RPC_SYNCHRONIZEDUISTOPLISTEN__SCENEOBJECT_INT_:
		synchronizedUIStopListen((SceneObject*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case RPC_UPDATETODATABASEALLOBJECTS__BOOL_:
		updateToDatabaseAllObjects(inv->getBooleanParameter());
		break;
	case RPC_ISMANUFACTURESCHEMATIC__:
		resp->insertBoolean(isManufactureSchematic());
		break;
	case RPC_SETDRAFTSCHEMATIC__SCENEOBJECT_DRAFTSCHEMATIC_:
		setDraftSchematic((SceneObject*) inv->getObjectParameter(), (DraftSchematic*) inv->getObjectParameter());
		break;
	case RPC_INITIALIZEINGREDIENTSLOTS__SCENEOBJECT_DRAFTSCHEMATIC_:
		initializeIngredientSlots((SceneObject*) inv->getObjectParameter(), (DraftSchematic*) inv->getObjectParameter());
		break;
	case RPC_CLEANUPINGREDIENTSLOTS__:
		cleanupIngredientSlots();
		break;
	case RPC_GETDRAFTSCHEMATIC__:
		resp->insertLong(getDraftSchematic()->_getObjectID());
		break;
	case RPC_GETSLOTCOUNT__:
		resp->insertSignedInt(getSlotCount());
		break;
	case RPC_INCREASECOMPLEXITY__:
		increaseComplexity();
		break;
	case RPC_DECREASECOMPLEXITY__:
		decreaseComplexity();
		break;
	case RPC_GETCOMPLEXITY__:
		resp->insertFloat(getComplexity());
		break;
	case RPC_ISFIRSTCRAFTINGUPDATE__:
		resp->insertBoolean(isFirstCraftingUpdate());
		break;
	case RPC_SETFIRSTCRAFTINGUPDATECOMPLETE__:
		setFirstCraftingUpdateComplete();
		break;
	case RPC_ISREADYFORASSEMBLY__:
		resp->insertBoolean(isReadyForAssembly());
		break;
	case RPC_SETASSEMBLED__:
		setAssembled();
		break;
	case RPC_ISASSEMBLED__:
		resp->insertBoolean(isAssembled());
		break;
	case RPC_SETCOMPLETED__:
		setCompleted();
		break;
	case RPC_ISCOMPLETED__:
		resp->insertBoolean(isCompleted());
		break;
	case RPC_SETCRAFTER__PLAYERCREATURE_:
		setCrafter((PlayerCreature*) inv->getObjectParameter());
		break;
	case RPC_GETCRAFTER__:
		resp->insertLong(getCrafter()->_getObjectID());
		break;
	case RPC_SETEXPERIMENTINGCOUNTER__INT_:
		setExperimentingCounter(inv->getSignedIntParameter());
		break;
	case RPC_GETEXPERIMENTINGCOUNTER__:
		resp->insertSignedInt(getExperimentingCounter());
		break;
	case RPC_GETEXPERIMENTINGCOUNTERPREVIOUS__:
		resp->insertSignedInt(getExperimentingCounterPrevious());
		break;
	case RPC_SETMANUFACTURELIMIT__INT_:
		setManufactureLimit(inv->getSignedIntParameter());
		break;
	case RPC_GETMANUFACTURELIMIT__:
		resp->insertSignedInt(getManufactureLimit());
		break;
	case RPC_SETPROTOTYPE__TANGIBLEOBJECT_:
		setPrototype((TangibleObject*) inv->getObjectParameter());
		break;
	case RPC_GETPROTOTYPE__:
		resp->insertLong(getPrototype()->_getObjectID());
		break;
	case RPC_INITIALIZEFACTORYINGREDIENTS__:
		initializeFactoryIngredients();
		break;
	case RPC_GETFACTORYINGREDIENTSSIZE__:
		resp->insertSignedInt(getFactoryIngredientsSize());
		break;
	case RPC_GETFACTORYINGREDIENT__INT_:
		resp->insertLong(getFactoryIngredient(inv->getSignedIntParameter())->_getObjectID());
		break;
	case RPC_GETFACTORYINGREDIENTSLOTTYPE__INT_:
		resp->insertSignedInt(getFactoryIngredientSlotType(inv->getSignedIntParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

void ManufactureSchematicAdapter::initializeTransientMembers() {
	((ManufactureSchematicImplementation*) impl)->initializeTransientMembers();
}

void ManufactureSchematicAdapter::sendTo(SceneObject* player, bool doClose) {
	((ManufactureSchematicImplementation*) impl)->sendTo(player, doClose);
}

void ManufactureSchematicAdapter::sendBaselinesTo(SceneObject* player) {
	((ManufactureSchematicImplementation*) impl)->sendBaselinesTo(player);
}

void ManufactureSchematicAdapter::synchronizedUIListen(SceneObject* player, int value) {
	((ManufactureSchematicImplementation*) impl)->synchronizedUIListen(player, value);
}

void ManufactureSchematicAdapter::synchronizedUIStopListen(SceneObject* player, int value) {
	((ManufactureSchematicImplementation*) impl)->synchronizedUIStopListen(player, value);
}

void ManufactureSchematicAdapter::updateToDatabaseAllObjects(bool startTask) {
	((ManufactureSchematicImplementation*) impl)->updateToDatabaseAllObjects(startTask);
}

bool ManufactureSchematicAdapter::isManufactureSchematic() {
	return ((ManufactureSchematicImplementation*) impl)->isManufactureSchematic();
}

void ManufactureSchematicAdapter::setDraftSchematic(SceneObject* craftingTool, DraftSchematic* schematic) {
	((ManufactureSchematicImplementation*) impl)->setDraftSchematic(craftingTool, schematic);
}

void ManufactureSchematicAdapter::initializeIngredientSlots(SceneObject* craftingTool, DraftSchematic* schematic) {
	((ManufactureSchematicImplementation*) impl)->initializeIngredientSlots(craftingTool, schematic);
}

void ManufactureSchematicAdapter::cleanupIngredientSlots() {
	((ManufactureSchematicImplementation*) impl)->cleanupIngredientSlots();
}

DraftSchematic* ManufactureSchematicAdapter::getDraftSchematic() {
	return ((ManufactureSchematicImplementation*) impl)->getDraftSchematic();
}

int ManufactureSchematicAdapter::getSlotCount() {
	return ((ManufactureSchematicImplementation*) impl)->getSlotCount();
}

void ManufactureSchematicAdapter::increaseComplexity() {
	((ManufactureSchematicImplementation*) impl)->increaseComplexity();
}

void ManufactureSchematicAdapter::decreaseComplexity() {
	((ManufactureSchematicImplementation*) impl)->decreaseComplexity();
}

float ManufactureSchematicAdapter::getComplexity() {
	return ((ManufactureSchematicImplementation*) impl)->getComplexity();
}

bool ManufactureSchematicAdapter::isFirstCraftingUpdate() {
	return ((ManufactureSchematicImplementation*) impl)->isFirstCraftingUpdate();
}

void ManufactureSchematicAdapter::setFirstCraftingUpdateComplete() {
	((ManufactureSchematicImplementation*) impl)->setFirstCraftingUpdateComplete();
}

bool ManufactureSchematicAdapter::isReadyForAssembly() {
	return ((ManufactureSchematicImplementation*) impl)->isReadyForAssembly();
}

void ManufactureSchematicAdapter::setAssembled() {
	((ManufactureSchematicImplementation*) impl)->setAssembled();
}

bool ManufactureSchematicAdapter::isAssembled() {
	return ((ManufactureSchematicImplementation*) impl)->isAssembled();
}

void ManufactureSchematicAdapter::setCompleted() {
	((ManufactureSchematicImplementation*) impl)->setCompleted();
}

bool ManufactureSchematicAdapter::isCompleted() {
	return ((ManufactureSchematicImplementation*) impl)->isCompleted();
}

void ManufactureSchematicAdapter::setCrafter(PlayerCreature* player) {
	((ManufactureSchematicImplementation*) impl)->setCrafter(player);
}

PlayerCreature* ManufactureSchematicAdapter::getCrafter() {
	return ((ManufactureSchematicImplementation*) impl)->getCrafter();
}

void ManufactureSchematicAdapter::setExperimentingCounter(int value) {
	((ManufactureSchematicImplementation*) impl)->setExperimentingCounter(value);
}

int ManufactureSchematicAdapter::getExperimentingCounter() {
	return ((ManufactureSchematicImplementation*) impl)->getExperimentingCounter();
}

int ManufactureSchematicAdapter::getExperimentingCounterPrevious() {
	return ((ManufactureSchematicImplementation*) impl)->getExperimentingCounterPrevious();
}

void ManufactureSchematicAdapter::setManufactureLimit(int limit) {
	((ManufactureSchematicImplementation*) impl)->setManufactureLimit(limit);
}

int ManufactureSchematicAdapter::getManufactureLimit() {
	return ((ManufactureSchematicImplementation*) impl)->getManufactureLimit();
}

void ManufactureSchematicAdapter::setPrototype(TangibleObject* tano) {
	((ManufactureSchematicImplementation*) impl)->setPrototype(tano);
}

TangibleObject* ManufactureSchematicAdapter::getPrototype() {
	return ((ManufactureSchematicImplementation*) impl)->getPrototype();
}

void ManufactureSchematicAdapter::initializeFactoryIngredients() {
	((ManufactureSchematicImplementation*) impl)->initializeFactoryIngredients();
}

int ManufactureSchematicAdapter::getFactoryIngredientsSize() {
	return ((ManufactureSchematicImplementation*) impl)->getFactoryIngredientsSize();
}

SceneObject* ManufactureSchematicAdapter::getFactoryIngredient(int i) {
	return ((ManufactureSchematicImplementation*) impl)->getFactoryIngredient(i);
}

int ManufactureSchematicAdapter::getFactoryIngredientSlotType(int i) {
	return ((ManufactureSchematicImplementation*) impl)->getFactoryIngredientSlotType(i);
}

/*
 *	ManufactureSchematicHelper
 */

ManufactureSchematicHelper* ManufactureSchematicHelper::staticInitializer = ManufactureSchematicHelper::instance();

ManufactureSchematicHelper::ManufactureSchematicHelper() {
	className = "ManufactureSchematic";

	Core::getObjectBroker()->registerClass(className, this);
}

void ManufactureSchematicHelper::finalizeHelper() {
	ManufactureSchematicHelper::finalize();
}

DistributedObject* ManufactureSchematicHelper::instantiateObject() {
	return new ManufactureSchematic(DummyConstructorParameter::instance());
}

DistributedObjectServant* ManufactureSchematicHelper::instantiateServant() {
	return new ManufactureSchematicImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ManufactureSchematicHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ManufactureSchematicAdapter((ManufactureSchematicImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

