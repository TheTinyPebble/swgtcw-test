/*
 *	server/zone/objects/attackable/AttackableObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "AttackableObject.h"

#include "AttackableObjectImplementation.h"

#include "../tangible/TangibleObject.h"

#include "../../Zone.h"

/*
 *	AttackableObjectStub
 */

AttackableObject::AttackableObject(unsigned long long oid) : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new AttackableObjectImplementation(oid);
	_impl->_setStub(this);
}

AttackableObject::AttackableObject(DummyConstructorParameter* param) : TangibleObject(param) {
}

AttackableObject::~AttackableObject() {
}

/*
 *	AttackableObjectAdapter
 */

AttackableObjectAdapter::AttackableObjectAdapter(AttackableObjectImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* AttackableObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	default:
		return NULL;
	}

	return resp;
}

/*
 *	AttackableObjectHelper
 */

AttackableObjectHelper* AttackableObjectHelper::staticInitializer = AttackableObjectHelper::instance();

AttackableObjectHelper::AttackableObjectHelper() {
	className = "AttackableObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void AttackableObjectHelper::finalizeHelper() {
	AttackableObjectHelper::finalize();
}

DistributedObject* AttackableObjectHelper::instantiateObject() {
	return new AttackableObject(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* AttackableObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new AttackableObjectAdapter((AttackableObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	AttackableObjectServant
 */

AttackableObjectServant::AttackableObjectServant(unsigned long long oid, int type) : TangibleObjectImplementation(oid, type) {
	_classHelper = AttackableObjectHelper::instance();
}

AttackableObjectServant::~AttackableObjectServant() {
}

void AttackableObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (AttackableObject*) stub;
	TangibleObjectServant::_setStub(stub);
}

DistributedObjectStub* AttackableObjectServant::_getStub() {
	return _this;
}

