/*
 *	server/zone/objects/attackable/AttackableObject.h generated by engine3 IDL compiler 0.55
 */

#ifndef ATTACKABLEOBJECT_H_
#define ATTACKABLEOBJECT_H_

#include "engine/orb/DistributedObjectBroker.h"

class TangibleObject;

class Zone;

#include "../tangible/TangibleObject.h"

class AttackableObject : public TangibleObject {
public:
	AttackableObject(unsigned long long oid);

protected:
	AttackableObject(DummyConstructorParameter* param);

	virtual ~AttackableObject();

	friend class AttackableObjectHelper;
};

class AttackableObjectImplementation;

class AttackableObjectAdapter : public TangibleObjectAdapter {
public:
	AttackableObjectAdapter(AttackableObjectImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

};

class AttackableObjectHelper : public DistributedObjectClassHelper, public Singleton<AttackableObjectHelper> {
	static AttackableObjectHelper* staticInitializer;

public:
	AttackableObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<AttackableObjectHelper>;
};

#include "../tangible/TangibleObjectImplementation.h"

class AttackableObjectServant : public TangibleObjectImplementation {
public:
	AttackableObject* _this;

public:
	AttackableObjectServant(unsigned long long oid, int type);
	virtual ~AttackableObjectServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*ATTACKABLEOBJECT_H_*/
