/*
 *	server/zone/objects/area/BadgeActiveArea.cpp generated by engine3 IDL compiler 0.60
 */

#include "BadgeActiveArea.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/player/PlayerObject.h"

/*
 *	BadgeActiveAreaStub
 */

enum {RPC_NOTIFYENTER__SCENEOBJECT_ = 6,RPC_SETBADGE__INT_,RPC_GETBADGE__};

BadgeActiveArea::BadgeActiveArea() : ActiveArea(DummyConstructorParameter::instance()) {
	BadgeActiveAreaImplementation* _implementation = new BadgeActiveAreaImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("BadgeActiveArea");
}

BadgeActiveArea::BadgeActiveArea(DummyConstructorParameter* param) : ActiveArea(param) {
	_setClassName("BadgeActiveArea");
}

BadgeActiveArea::~BadgeActiveArea() {
}



void BadgeActiveArea::notifyEnter(SceneObject* player) {
	BadgeActiveAreaImplementation* _implementation = static_cast<BadgeActiveAreaImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYENTER__SCENEOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyEnter(player);
}

void BadgeActiveArea::setBadge(unsigned int a) {
	BadgeActiveAreaImplementation* _implementation = static_cast<BadgeActiveAreaImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETBADGE__INT_);
		method.addUnsignedIntParameter(a);

		method.executeWithVoidReturn();
	} else
		_implementation->setBadge(a);
}

unsigned int BadgeActiveArea::getBadge() {
	BadgeActiveAreaImplementation* _implementation = static_cast<BadgeActiveAreaImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETBADGE__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getBadge();
}

DistributedObjectServant* BadgeActiveArea::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

void BadgeActiveArea::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	BadgeActiveAreaImplementation
 */

BadgeActiveAreaImplementation::BadgeActiveAreaImplementation(DummyConstructorParameter* param) : ActiveAreaImplementation(param) {
	_initializeImplementation();
}


BadgeActiveAreaImplementation::~BadgeActiveAreaImplementation() {
}


void BadgeActiveAreaImplementation::finalize() {
}

void BadgeActiveAreaImplementation::_initializeImplementation() {
	_setClassHelper(BadgeActiveAreaHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void BadgeActiveAreaImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<BadgeActiveArea*>(stub);
	ActiveAreaImplementation::_setStub(stub);
}

DistributedObjectStub* BadgeActiveAreaImplementation::_getStub() {
	return _this.get();
}

BadgeActiveAreaImplementation::operator const BadgeActiveArea*() {
	return _this.get();
}

void BadgeActiveAreaImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void BadgeActiveAreaImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void BadgeActiveAreaImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void BadgeActiveAreaImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void BadgeActiveAreaImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void BadgeActiveAreaImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void BadgeActiveAreaImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void BadgeActiveAreaImplementation::_serializationHelperMethod() {
	ActiveAreaImplementation::_serializationHelperMethod();

	_setClassName("BadgeActiveArea");

}

void BadgeActiveAreaImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(BadgeActiveAreaImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool BadgeActiveAreaImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ActiveAreaImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "BadgeActiveArea.areaBadge") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&areaBadge, stream);
		return true;
	}


	return false;
}

void BadgeActiveAreaImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = BadgeActiveAreaImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int BadgeActiveAreaImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ActiveAreaImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;
	_name = "BadgeActiveArea.areaBadge";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&areaBadge, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 1;
}

BadgeActiveAreaImplementation::BadgeActiveAreaImplementation() {
	_initializeImplementation();
	// server/zone/objects/area/BadgeActiveArea.idl():  		areaBadge = 0;
	areaBadge = 0;
	// server/zone/objects/area/BadgeActiveArea.idl():  		Logger.setLoggingName("BadgeActiveArea");
	Logger::setLoggingName("BadgeActiveArea");
}

void BadgeActiveAreaImplementation::notifyEnter(SceneObject* player) {
	// server/zone/objects/area/BadgeActiveArea.idl():  		CreatureObject 
	if (!player->isPlayerCreature())	// server/zone/objects/area/BadgeActiveArea.idl():  			return;
	return;
	// server/zone/objects/area/BadgeActiveArea.idl():  		CreatureObject playerCreature = (CreatureObject) player;
	ManagedReference<CreatureObject* > playerCreature = (CreatureObject*) player;
	// server/zone/objects/area/BadgeActiveArea.idl():  		PlayerObject ghost = playerCreature.getPlayerObject();
	ManagedReference<PlayerObject* > ghost = playerCreature->getPlayerObject();
	// server/zone/objects/area/BadgeActiveArea.idl():  	}
	if (!ghost->hasBadge(areaBadge)){
	// server/zone/objects/area/BadgeActiveArea.idl():  			ghost.awardBadge(areaBadge);
	ghost->awardBadge(areaBadge);
}
}

void BadgeActiveAreaImplementation::setBadge(unsigned int a) {
	// server/zone/objects/area/BadgeActiveArea.idl():  		areaBadge = a;
	areaBadge = a;
}

unsigned int BadgeActiveAreaImplementation::getBadge() {
	// server/zone/objects/area/BadgeActiveArea.idl():  		return areaBadge;
	return areaBadge;
}

/*
 *	BadgeActiveAreaAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


BadgeActiveAreaAdapter::BadgeActiveAreaAdapter(BadgeActiveArea* obj) : ActiveAreaAdapter(obj) {
}

void BadgeActiveAreaAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_NOTIFYENTER__SCENEOBJECT_:
		{
			notifyEnter(static_cast<SceneObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_SETBADGE__INT_:
		{
			setBadge(inv->getUnsignedIntParameter());
		}
		break;
	case RPC_GETBADGE__:
		{
			resp->insertInt(getBadge());
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void BadgeActiveAreaAdapter::notifyEnter(SceneObject* player) {
	(static_cast<BadgeActiveArea*>(stub))->notifyEnter(player);
}

void BadgeActiveAreaAdapter::setBadge(unsigned int a) {
	(static_cast<BadgeActiveArea*>(stub))->setBadge(a);
}

unsigned int BadgeActiveAreaAdapter::getBadge() {
	return (static_cast<BadgeActiveArea*>(stub))->getBadge();
}

/*
 *	BadgeActiveAreaHelper
 */

BadgeActiveAreaHelper* BadgeActiveAreaHelper::staticInitializer = BadgeActiveAreaHelper::instance();

BadgeActiveAreaHelper::BadgeActiveAreaHelper() {
	className = "BadgeActiveArea";

	Core::getObjectBroker()->registerClass(className, this);
}

void BadgeActiveAreaHelper::finalizeHelper() {
	BadgeActiveAreaHelper::finalize();
}

DistributedObject* BadgeActiveAreaHelper::instantiateObject() {
	return new BadgeActiveArea(DummyConstructorParameter::instance());
}

DistributedObjectServant* BadgeActiveAreaHelper::instantiateServant() {
	return new BadgeActiveAreaImplementation();
}

DistributedObjectAdapter* BadgeActiveAreaHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new BadgeActiveAreaAdapter(static_cast<BadgeActiveArea*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

