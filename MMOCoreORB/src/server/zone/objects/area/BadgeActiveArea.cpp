/*
 *	server/zone/objects/area/BadgeActiveArea.cpp generated by engine3 IDL compiler 0.60
 */

#include "BadgeActiveArea.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

/*
 *	BadgeActiveAreaStub
 */

BadgeActiveArea::BadgeActiveArea() : ActiveArea(DummyConstructorParameter::instance()) {
	_impl = new BadgeActiveAreaImplementation();
	_impl->_setStub(this);
}

BadgeActiveArea::BadgeActiveArea(DummyConstructorParameter* param) : ActiveArea(param) {
}

BadgeActiveArea::~BadgeActiveArea() {
}


void BadgeActiveArea::notifyEnter(PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((BadgeActiveAreaImplementation*) _impl)->notifyEnter(player);
}

void BadgeActiveArea::setBadge(unsigned int a) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addUnsignedIntParameter(a);

		method.executeWithVoidReturn();
	} else
		((BadgeActiveAreaImplementation*) _impl)->setBadge(a);
}

/*
 *	BadgeActiveAreaImplementation
 */

BadgeActiveAreaImplementation::BadgeActiveAreaImplementation(DummyConstructorParameter* param) : ActiveAreaImplementation(param) {
	_initializeImplementation();
}

BadgeActiveAreaImplementation::~BadgeActiveAreaImplementation() {
}


void BadgeActiveAreaImplementation::finalize() {
}

void BadgeActiveAreaImplementation::_initializeImplementation() {
	_setClassHelper(BadgeActiveAreaHelper::instance());

	_serializationHelperMethod();
}

void BadgeActiveAreaImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (BadgeActiveArea*) stub;
	ActiveAreaImplementation::_setStub(stub);
}

DistributedObjectStub* BadgeActiveAreaImplementation::_getStub() {
	return _this;
}

BadgeActiveAreaImplementation::operator const BadgeActiveArea*() {
	return _this;
}

void BadgeActiveAreaImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void BadgeActiveAreaImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void BadgeActiveAreaImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void BadgeActiveAreaImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void BadgeActiveAreaImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void BadgeActiveAreaImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void BadgeActiveAreaImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void BadgeActiveAreaImplementation::_serializationHelperMethod() {
	ActiveAreaImplementation::_serializationHelperMethod();

	_setClassName("BadgeActiveArea");

	addSerializableVariable("areaBadge", &areaBadge);
}

BadgeActiveAreaImplementation::BadgeActiveAreaImplementation() {
	_initializeImplementation();
	// server/zone/objects/area/BadgeActiveArea.idl(55):  		areaBadge = 0;
	areaBadge = 0;
	// server/zone/objects/area/BadgeActiveArea.idl(57):  		Logger.setLoggingName("BadgeActiveArea");
	Logger::setLoggingName("BadgeActiveArea");
}

void BadgeActiveAreaImplementation::notifyEnter(PlayerCreature* player) {
	// server/zone/objects/area/BadgeActiveArea.idl(61):  	}
	if (!player->hasBadge(areaBadge)){
	// server/zone/objects/area/BadgeActiveArea.idl(62):  			player.awardBadge(areaBadge);
	player->awardBadge(areaBadge);
}
}

void BadgeActiveAreaImplementation::setBadge(unsigned int a) {
	// server/zone/objects/area/BadgeActiveArea.idl(67):  		areaBadge = a;
	areaBadge = a;
}

/*
 *	BadgeActiveAreaAdapter
 */

BadgeActiveAreaAdapter::BadgeActiveAreaAdapter(BadgeActiveAreaImplementation* obj) : ActiveAreaAdapter(obj) {
}

Packet* BadgeActiveAreaAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		notifyEnter((PlayerCreature*) inv->getObjectParameter());
		break;
	case 7:
		setBadge(inv->getUnsignedIntParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void BadgeActiveAreaAdapter::notifyEnter(PlayerCreature* player) {
	((BadgeActiveAreaImplementation*) impl)->notifyEnter(player);
}

void BadgeActiveAreaAdapter::setBadge(unsigned int a) {
	((BadgeActiveAreaImplementation*) impl)->setBadge(a);
}

/*
 *	BadgeActiveAreaHelper
 */

BadgeActiveAreaHelper* BadgeActiveAreaHelper::staticInitializer = BadgeActiveAreaHelper::instance();

BadgeActiveAreaHelper::BadgeActiveAreaHelper() {
	className = "BadgeActiveArea";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void BadgeActiveAreaHelper::finalizeHelper() {
	BadgeActiveAreaHelper::finalize();
}

DistributedObject* BadgeActiveAreaHelper::instantiateObject() {
	return new BadgeActiveArea(DummyConstructorParameter::instance());
}

DistributedObjectServant* BadgeActiveAreaHelper::instantiateServant() {
	return new BadgeActiveAreaImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* BadgeActiveAreaHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new BadgeActiveAreaAdapter((BadgeActiveAreaImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

