/*
 *	server/zone/objects/area/GarageArea.h generated by engine3 IDL compiler 0.60
 */

#ifndef GARAGEAREA_H_
#define GARAGEAREA_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

namespace server {
namespace zone {
namespace objects {
namespace player {

class PlayerCreature;

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

#include "server/zone/objects/area/ActiveArea.h"

namespace server {
namespace zone {
namespace objects {
namespace area {

class GarageArea : public ActiveArea {
public:
	GarageArea();

	void notifyEnter(SceneObject* player);

	DistributedObjectServant* _getImplementation();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	GarageArea(DummyConstructorParameter* param);

	virtual ~GarageArea();

	friend class GarageAreaHelper;
};

} // namespace area
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::area;

namespace server {
namespace zone {
namespace objects {
namespace area {

class GarageAreaImplementation : public ActiveAreaImplementation {

public:
	GarageAreaImplementation();

	GarageAreaImplementation(DummyConstructorParameter* param);

	void notifyEnter(SceneObject* player);

	GarageArea* _this;

	operator const GarageArea*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~GarageAreaImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();

	friend class GarageArea;
};

class GarageAreaAdapter : public ActiveAreaAdapter {
public:
	GarageAreaAdapter(GarageAreaImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void notifyEnter(SceneObject* player);

};

class GarageAreaHelper : public DistributedObjectClassHelper, public Singleton<GarageAreaHelper> {
	static GarageAreaHelper* staticInitializer;

public:
	GarageAreaHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<GarageAreaHelper>;
};

} // namespace area
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::area;

#endif /*GARAGEAREA_H_*/
