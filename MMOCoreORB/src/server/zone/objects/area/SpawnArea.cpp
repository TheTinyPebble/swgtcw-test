/*
 *	server/zone/objects/area/SpawnArea.cpp generated by engine3 IDL compiler 0.60
 */

#include "SpawnArea.h"

#include "server/zone/objects/creature/aigroup/AiGroup.h"

#include "server/zone/objects/area/SpawnObserver.h"

#include "server/zone/objects/scene/SceneObject.h"

/*
 *	SpawnAreaStub
 */

enum {RPC_REGISTEROBSERVERS__ = 6,RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_,RPC_ADDTEMPLATE__INT_,RPC_SETTIER__INT_,RPC_SETSPAWNCONSTANT__INT_,RPC_ADDNOSPAWNAREA__SPAWNAREA_,RPC_ISSTATICAREA__,RPC_ISDYNAMICAREA__,RPC_ISLAIRSPAWNAREA__};

SpawnArea::SpawnArea() : ActiveArea(DummyConstructorParameter::instance()) {
	SpawnAreaImplementation* _implementation = new SpawnAreaImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("SpawnArea");
}

SpawnArea::SpawnArea(DummyConstructorParameter* param) : ActiveArea(param) {
	_setClassName("SpawnArea");
}

SpawnArea::~SpawnArea() {
}



void SpawnArea::registerObservers() {
	SpawnAreaImplementation* _implementation = static_cast<SpawnAreaImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REGISTEROBSERVERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->registerObservers();
}

Vector3 SpawnArea::getRandomPosition(SceneObject* player) {
	SpawnAreaImplementation* _implementation = static_cast<SpawnAreaImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getRandomPosition(player);
}

int SpawnArea::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	SpawnAreaImplementation* _implementation = static_cast<SpawnAreaImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(observable);
		method.addObjectParameter(arg1);
		method.addSignedLongParameter(arg2);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyObserverEvent(eventType, observable, arg1, arg2);
}

void SpawnArea::addTemplate(unsigned int tempCRC) {
	SpawnAreaImplementation* _implementation = static_cast<SpawnAreaImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDTEMPLATE__INT_);
		method.addUnsignedIntParameter(tempCRC);

		method.executeWithVoidReturn();
	} else
		_implementation->addTemplate(tempCRC);
}

void SpawnArea::setTier(int n) {
	SpawnAreaImplementation* _implementation = static_cast<SpawnAreaImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETTIER__INT_);
		method.addSignedIntParameter(n);

		method.executeWithVoidReturn();
	} else
		_implementation->setTier(n);
}

void SpawnArea::setSpawnConstant(int n) {
	SpawnAreaImplementation* _implementation = static_cast<SpawnAreaImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSPAWNCONSTANT__INT_);
		method.addSignedIntParameter(n);

		method.executeWithVoidReturn();
	} else
		_implementation->setSpawnConstant(n);
}

void SpawnArea::addNoSpawnArea(SpawnArea* area) {
	SpawnAreaImplementation* _implementation = static_cast<SpawnAreaImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDNOSPAWNAREA__SPAWNAREA_);
		method.addObjectParameter(area);

		method.executeWithVoidReturn();
	} else
		_implementation->addNoSpawnArea(area);
}

bool SpawnArea::isStaticArea() {
	SpawnAreaImplementation* _implementation = static_cast<SpawnAreaImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSTATICAREA__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isStaticArea();
}

bool SpawnArea::isDynamicArea() {
	SpawnAreaImplementation* _implementation = static_cast<SpawnAreaImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISDYNAMICAREA__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isDynamicArea();
}

bool SpawnArea::isLairSpawnArea() {
	SpawnAreaImplementation* _implementation = static_cast<SpawnAreaImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISLAIRSPAWNAREA__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isLairSpawnArea();
}

DistributedObjectServant* SpawnArea::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

void SpawnArea::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	SpawnAreaImplementation
 */

SpawnAreaImplementation::SpawnAreaImplementation(DummyConstructorParameter* param) : ActiveAreaImplementation(param) {
	_initializeImplementation();
}


SpawnAreaImplementation::~SpawnAreaImplementation() {
}


void SpawnAreaImplementation::finalize() {
}

void SpawnAreaImplementation::_initializeImplementation() {
	_setClassHelper(SpawnAreaHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void SpawnAreaImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<SpawnArea*>(stub);
	ActiveAreaImplementation::_setStub(stub);
}

DistributedObjectStub* SpawnAreaImplementation::_getStub() {
	return _this.get();
}

SpawnAreaImplementation::operator const SpawnArea*() {
	return _this.get();
}

void SpawnAreaImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void SpawnAreaImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void SpawnAreaImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void SpawnAreaImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void SpawnAreaImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void SpawnAreaImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void SpawnAreaImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void SpawnAreaImplementation::_serializationHelperMethod() {
	ActiveAreaImplementation::_serializationHelperMethod();

	_setClassName("SpawnArea");

}

void SpawnAreaImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(SpawnAreaImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool SpawnAreaImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ActiveAreaImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "SpawnArea.spawnCreatureTemplates") {
		TypeInfo<SortedVector<unsigned int> >::parseFromBinaryStream(&spawnCreatureTemplates, stream);
		return true;
	}

	if (_name == "SpawnArea.observers") {
		TypeInfo<SortedVector<ManagedReference<SpawnObserver* > > >::parseFromBinaryStream(&observers, stream);
		return true;
	}

	if (_name == "SpawnArea.noSpawnAreas") {
		TypeInfo<Vector<ManagedReference<SpawnArea* > > >::parseFromBinaryStream(&noSpawnAreas, stream);
		return true;
	}

	if (_name == "SpawnArea.tier") {
		TypeInfo<int >::parseFromBinaryStream(&tier, stream);
		return true;
	}

	if (_name == "SpawnArea.spawnConstant") {
		TypeInfo<int >::parseFromBinaryStream(&spawnConstant, stream);
		return true;
	}


	return false;
}

void SpawnAreaImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = SpawnAreaImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int SpawnAreaImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ActiveAreaImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;
	_name = "SpawnArea.spawnCreatureTemplates";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<SortedVector<unsigned int> >::toBinaryStream(&spawnCreatureTemplates, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SpawnArea.observers";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<SortedVector<ManagedReference<SpawnObserver* > > >::toBinaryStream(&observers, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SpawnArea.noSpawnAreas";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<ManagedReference<SpawnArea* > > >::toBinaryStream(&noSpawnAreas, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SpawnArea.tier";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&tier, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SpawnArea.spawnConstant";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&spawnConstant, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 5;
}

SpawnAreaImplementation::SpawnAreaImplementation() {
	_initializeImplementation();
	// server/zone/objects/area/SpawnArea.idl():  		spawnConstant = 0;
	spawnConstant = 0;
	// server/zone/objects/area/SpawnArea.idl():  		Logger.setLoggingName("SpawnArea");
	Logger::setLoggingName("SpawnArea");
}

void SpawnAreaImplementation::registerObservers() {
}

int SpawnAreaImplementation::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	// server/zone/objects/area/SpawnArea.idl():  		return 1;
	return 1;
}

void SpawnAreaImplementation::addTemplate(unsigned int tempCRC) {
	// server/zone/objects/area/SpawnArea.idl():  		spawnCreatureTemplates.add(tempCRC);
	(&spawnCreatureTemplates)->add(tempCRC);
}

void SpawnAreaImplementation::setTier(int n) {
	// server/zone/objects/area/SpawnArea.idl():  		tier = n;
	tier = n;
}

void SpawnAreaImplementation::setSpawnConstant(int n) {
	// server/zone/objects/area/SpawnArea.idl():  		spawnConstant = n;
	spawnConstant = n;
}

void SpawnAreaImplementation::addNoSpawnArea(SpawnArea* area) {
	// server/zone/objects/area/SpawnArea.idl():  		noSpawnAreas.add(area);
	(&noSpawnAreas)->add(area);
}

bool SpawnAreaImplementation::isStaticArea() {
	// server/zone/objects/area/SpawnArea.idl():  		return false;
	return false;
}

bool SpawnAreaImplementation::isDynamicArea() {
	// server/zone/objects/area/SpawnArea.idl():  		return false;
	return false;
}

bool SpawnAreaImplementation::isLairSpawnArea() {
	// server/zone/objects/area/SpawnArea.idl():  		return false;
	return false;
}

/*
 *	SpawnAreaAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


SpawnAreaAdapter::SpawnAreaAdapter(SpawnArea* obj) : ActiveAreaAdapter(obj) {
}

void SpawnAreaAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_REGISTEROBSERVERS__:
		{
			registerObservers();
		}
		break;
	case RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_:
		{
			resp->insertSignedInt(notifyObserverEvent(inv->getUnsignedIntParameter(), static_cast<Observable*>(inv->getObjectParameter()), static_cast<ManagedObject*>(inv->getObjectParameter()), inv->getSignedLongParameter()));
		}
		break;
	case RPC_ADDTEMPLATE__INT_:
		{
			addTemplate(inv->getUnsignedIntParameter());
		}
		break;
	case RPC_SETTIER__INT_:
		{
			setTier(inv->getSignedIntParameter());
		}
		break;
	case RPC_SETSPAWNCONSTANT__INT_:
		{
			setSpawnConstant(inv->getSignedIntParameter());
		}
		break;
	case RPC_ADDNOSPAWNAREA__SPAWNAREA_:
		{
			addNoSpawnArea(static_cast<SpawnArea*>(inv->getObjectParameter()));
		}
		break;
	case RPC_ISSTATICAREA__:
		{
			resp->insertBoolean(isStaticArea());
		}
		break;
	case RPC_ISDYNAMICAREA__:
		{
			resp->insertBoolean(isDynamicArea());
		}
		break;
	case RPC_ISLAIRSPAWNAREA__:
		{
			resp->insertBoolean(isLairSpawnArea());
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void SpawnAreaAdapter::registerObservers() {
	(static_cast<SpawnArea*>(stub))->registerObservers();
}

int SpawnAreaAdapter::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	return (static_cast<SpawnArea*>(stub))->notifyObserverEvent(eventType, observable, arg1, arg2);
}

void SpawnAreaAdapter::addTemplate(unsigned int tempCRC) {
	(static_cast<SpawnArea*>(stub))->addTemplate(tempCRC);
}

void SpawnAreaAdapter::setTier(int n) {
	(static_cast<SpawnArea*>(stub))->setTier(n);
}

void SpawnAreaAdapter::setSpawnConstant(int n) {
	(static_cast<SpawnArea*>(stub))->setSpawnConstant(n);
}

void SpawnAreaAdapter::addNoSpawnArea(SpawnArea* area) {
	(static_cast<SpawnArea*>(stub))->addNoSpawnArea(area);
}

bool SpawnAreaAdapter::isStaticArea() {
	return (static_cast<SpawnArea*>(stub))->isStaticArea();
}

bool SpawnAreaAdapter::isDynamicArea() {
	return (static_cast<SpawnArea*>(stub))->isDynamicArea();
}

bool SpawnAreaAdapter::isLairSpawnArea() {
	return (static_cast<SpawnArea*>(stub))->isLairSpawnArea();
}

/*
 *	SpawnAreaHelper
 */

SpawnAreaHelper* SpawnAreaHelper::staticInitializer = SpawnAreaHelper::instance();

SpawnAreaHelper::SpawnAreaHelper() {
	className = "SpawnArea";

	Core::getObjectBroker()->registerClass(className, this);
}

void SpawnAreaHelper::finalizeHelper() {
	SpawnAreaHelper::finalize();
}

DistributedObject* SpawnAreaHelper::instantiateObject() {
	return new SpawnArea(DummyConstructorParameter::instance());
}

DistributedObjectServant* SpawnAreaHelper::instantiateServant() {
	return new SpawnAreaImplementation();
}

DistributedObjectAdapter* SpawnAreaHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SpawnAreaAdapter(static_cast<SpawnArea*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

