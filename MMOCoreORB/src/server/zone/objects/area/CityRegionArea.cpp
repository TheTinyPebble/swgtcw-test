/*
 *	server/zone/objects/area/CityRegionArea.cpp generated by engine3 IDL compiler 0.60
 */

#include "CityRegionArea.h"

#include "server/zone/objects/region/CityRegion.h"

/*
 *	CityRegionAreaStub
 */

enum {RPC_SETCITYREGION__CITYREGION_ = 6,RPC_GETCITYREGION__,RPC_ISCITYREGION__,RPC_CANBUILD__LONG_};

CityRegionArea::CityRegionArea() : ActiveArea(DummyConstructorParameter::instance()) {
	CityRegionAreaImplementation* _implementation = new CityRegionAreaImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("CityRegionArea");
}

CityRegionArea::CityRegionArea(DummyConstructorParameter* param) : ActiveArea(param) {
	_setClassName("CityRegionArea");
}

CityRegionArea::~CityRegionArea() {
}



void CityRegionArea::setCityRegion(CityRegion* city) {
	CityRegionAreaImplementation* _implementation = static_cast<CityRegionAreaImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCITYREGION__CITYREGION_);
		method.addObjectParameter(city);

		method.executeWithVoidReturn();
	} else
		_implementation->setCityRegion(city);
}

CityRegion* CityRegionArea::getCityRegion() {
	CityRegionAreaImplementation* _implementation = static_cast<CityRegionAreaImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCITYREGION__);

		return static_cast<CityRegion*>(method.executeWithObjectReturn());
	} else
		return _implementation->getCityRegion();
}

bool CityRegionArea::isCityRegion() {
	CityRegionAreaImplementation* _implementation = static_cast<CityRegionAreaImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCITYREGION__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isCityRegion();
}

bool CityRegionArea::canBuild(unsigned long long oid) {
	CityRegionAreaImplementation* _implementation = static_cast<CityRegionAreaImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CANBUILD__LONG_);
		method.addUnsignedLongParameter(oid);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->canBuild(oid);
}

DistributedObjectServant* CityRegionArea::_getImplementation() {

	_updated = true;
	return _impl;
}

void CityRegionArea::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	CityRegionAreaImplementation
 */

CityRegionAreaImplementation::CityRegionAreaImplementation(DummyConstructorParameter* param) : ActiveAreaImplementation(param) {
	_initializeImplementation();
}


CityRegionAreaImplementation::~CityRegionAreaImplementation() {
}


void CityRegionAreaImplementation::finalize() {
}

void CityRegionAreaImplementation::_initializeImplementation() {
	_setClassHelper(CityRegionAreaHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void CityRegionAreaImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<CityRegionArea*>(stub);
	ActiveAreaImplementation::_setStub(stub);
}

DistributedObjectStub* CityRegionAreaImplementation::_getStub() {
	return _this;
}

CityRegionAreaImplementation::operator const CityRegionArea*() {
	return _this;
}

void CityRegionAreaImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void CityRegionAreaImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void CityRegionAreaImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void CityRegionAreaImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void CityRegionAreaImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void CityRegionAreaImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void CityRegionAreaImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void CityRegionAreaImplementation::_serializationHelperMethod() {
	ActiveAreaImplementation::_serializationHelperMethod();

	_setClassName("CityRegionArea");

}

void CityRegionAreaImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(CityRegionAreaImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool CityRegionAreaImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ActiveAreaImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "CityRegionArea.cityRegion") {
		TypeInfo<ManagedReference<CityRegion* > >::parseFromBinaryStream(&cityRegion, stream);
		return true;
	}


	return false;
}

void CityRegionAreaImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = CityRegionAreaImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int CityRegionAreaImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ActiveAreaImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;
	_name = "CityRegionArea.cityRegion";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<CityRegion* > >::toBinaryStream(&cityRegion, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 1;
}

CityRegionAreaImplementation::CityRegionAreaImplementation() {
	_initializeImplementation();
	// server/zone/objects/area/CityRegionArea.idl():  		cityRegion = null;
	cityRegion = NULL;
}

void CityRegionAreaImplementation::setCityRegion(CityRegion* city) {
	// server/zone/objects/area/CityRegionArea.idl():  		cityRegion = city;
	cityRegion = city;
}

CityRegion* CityRegionAreaImplementation::getCityRegion() {
	// server/zone/objects/area/CityRegionArea.idl():  		return cityRegion;
	return cityRegion;
}

bool CityRegionAreaImplementation::isCityRegion() {
	// server/zone/objects/area/CityRegionArea.idl():  		return true;
	return true;
}

bool CityRegionAreaImplementation::canBuild(unsigned long long oid) {
	// server/zone/objects/area/CityRegionArea.idl():  		return cityRegion.isCitizen(oid);
	return cityRegion->isCitizen(oid);
}

/*
 *	CityRegionAreaAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


CityRegionAreaAdapter::CityRegionAreaAdapter(CityRegionArea* obj) : ActiveAreaAdapter(obj) {
}

void CityRegionAreaAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_SETCITYREGION__CITYREGION_:
		{
			setCityRegion(static_cast<CityRegion*>(inv->getObjectParameter()));
		}
		break;
	case RPC_GETCITYREGION__:
		{
			resp->insertLong(getCityRegion()->_getObjectID());
		}
		break;
	case RPC_ISCITYREGION__:
		{
			resp->insertBoolean(isCityRegion());
		}
		break;
	case RPC_CANBUILD__LONG_:
		{
			resp->insertBoolean(canBuild(inv->getUnsignedLongParameter()));
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void CityRegionAreaAdapter::setCityRegion(CityRegion* city) {
	(static_cast<CityRegionArea*>(stub))->setCityRegion(city);
}

CityRegion* CityRegionAreaAdapter::getCityRegion() {
	return (static_cast<CityRegionArea*>(stub))->getCityRegion();
}

bool CityRegionAreaAdapter::isCityRegion() {
	return (static_cast<CityRegionArea*>(stub))->isCityRegion();
}

bool CityRegionAreaAdapter::canBuild(unsigned long long oid) {
	return (static_cast<CityRegionArea*>(stub))->canBuild(oid);
}

/*
 *	CityRegionAreaHelper
 */

CityRegionAreaHelper* CityRegionAreaHelper::staticInitializer = CityRegionAreaHelper::instance();

CityRegionAreaHelper::CityRegionAreaHelper() {
	className = "CityRegionArea";

	Core::getObjectBroker()->registerClass(className, this);
}

void CityRegionAreaHelper::finalizeHelper() {
	CityRegionAreaHelper::finalize();
}

DistributedObject* CityRegionAreaHelper::instantiateObject() {
	return new CityRegionArea(DummyConstructorParameter::instance());
}

DistributedObjectServant* CityRegionAreaHelper::instantiateServant() {
	return new CityRegionAreaImplementation();
}

DistributedObjectAdapter* CityRegionAreaHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new CityRegionAreaAdapter(static_cast<CityRegionArea*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

