/*
 *	server/zone/objects/area/CityRegionArea.h generated by engine3 IDL compiler 0.60
 */

#ifndef CITYREGIONAREA_H_
#define CITYREGIONAREA_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace region {

class CityRegion;

} // namespace region
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::region;

#include "server/zone/objects/area/ActiveArea.h"

namespace server {
namespace zone {
namespace objects {
namespace area {

class CityRegionArea : public ActiveArea {
public:
	CityRegionArea();

	void setCityRegion(CityRegion* city);

	CityRegion* getCityRegion();

	bool isCityRegion();

	bool canBuild(unsigned long long oid);

	DistributedObjectServant* _getImplementation();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	CityRegionArea(DummyConstructorParameter* param);

	virtual ~CityRegionArea();

	friend class CityRegionAreaHelper;
};

} // namespace area
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::area;

namespace server {
namespace zone {
namespace objects {
namespace area {

class CityRegionAreaImplementation : public ActiveAreaImplementation {
protected:
	ManagedReference<CityRegion* > cityRegion;

public:
	CityRegionAreaImplementation();

	CityRegionAreaImplementation(DummyConstructorParameter* param);

	void setCityRegion(CityRegion* city);

	CityRegion* getCityRegion();

	bool isCityRegion();

	bool canBuild(unsigned long long oid);

	WeakReference<CityRegionArea*> _this;

	operator const CityRegionArea*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~CityRegionAreaImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const String& name);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class CityRegionArea;
};

class CityRegionAreaAdapter : public ActiveAreaAdapter {
public:
	CityRegionAreaAdapter(CityRegionArea* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void setCityRegion(CityRegion* city);

	CityRegion* getCityRegion();

	bool isCityRegion();

	bool canBuild(unsigned long long oid);

};

class CityRegionAreaHelper : public DistributedObjectClassHelper, public Singleton<CityRegionAreaHelper> {
	static CityRegionAreaHelper* staticInitializer;

public:
	CityRegionAreaHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<CityRegionAreaHelper>;
};

} // namespace area
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::area;

#endif /*CITYREGIONAREA_H_*/
