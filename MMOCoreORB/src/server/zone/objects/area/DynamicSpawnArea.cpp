/*
 *	server/zone/objects/area/DynamicSpawnArea.cpp generated by engine3 IDL compiler 0.60
 */

#include "DynamicSpawnArea.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/player/PlayerObject.h"

#include "server/zone/managers/object/ObjectManager.h"

#include "server/zone/objects/creature/aigroup/AiGroup.h"

#include "server/zone/objects/area/SpawnObserver.h"

#include "server/zone/objects/area/SpawnDynamicAreaCreatureTask.h"

/*
 *	DynamicSpawnAreaStub
 */

DynamicSpawnArea::DynamicSpawnArea() : SpawnArea(DummyConstructorParameter::instance()) {
	DynamicSpawnAreaImplementation* _implementation = new DynamicSpawnAreaImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

DynamicSpawnArea::DynamicSpawnArea(DummyConstructorParameter* param) : SpawnArea(param) {
}

DynamicSpawnArea::~DynamicSpawnArea() {
}


void DynamicSpawnArea::registerObservers() {
	DynamicSpawnAreaImplementation* _implementation = (DynamicSpawnAreaImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		_implementation->registerObservers();
}

void DynamicSpawnArea::spawnCreature(unsigned int templateCRC, PlayerObject* player) {
	DynamicSpawnAreaImplementation* _implementation = (DynamicSpawnAreaImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addUnsignedIntParameter(templateCRC);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->spawnCreature(templateCRC, player);
}

Vector3 DynamicSpawnArea::getRandomPosition(PlayerObject* player) {
	DynamicSpawnAreaImplementation* _implementation = (DynamicSpawnAreaImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getRandomPosition(player);
}

void DynamicSpawnArea::notifyEnter(SceneObject* object) {
	DynamicSpawnAreaImplementation* _implementation = (DynamicSpawnAreaImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyEnter(object);
}

void DynamicSpawnArea::notifyExit(SceneObject* object) {
	DynamicSpawnAreaImplementation* _implementation = (DynamicSpawnAreaImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyExit(object);
}

SpawnDynamicAreaCreatureTask* DynamicSpawnArea::addSpawnTask(PlayerObject* player) {
	DynamicSpawnAreaImplementation* _implementation = (DynamicSpawnAreaImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->addSpawnTask(player);
}

void DynamicSpawnArea::doSpawnEvent(PlayerObject* player) {
	DynamicSpawnAreaImplementation* _implementation = (DynamicSpawnAreaImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->doSpawnEvent(player);
}

void DynamicSpawnArea::doDespawnEvent() {
	DynamicSpawnAreaImplementation* _implementation = (DynamicSpawnAreaImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		method.executeWithVoidReturn();
	} else
		_implementation->doDespawnEvent();
}

int DynamicSpawnArea::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	DynamicSpawnAreaImplementation* _implementation = (DynamicSpawnAreaImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(observable);
		method.addObjectParameter(arg1);
		method.addSignedLongParameter(arg2);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyObserverEvent(eventType, observable, arg1, arg2);
}

void DynamicSpawnArea::setMaxCreaturesToSpawn(int num) {
	DynamicSpawnAreaImplementation* _implementation = (DynamicSpawnAreaImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addSignedIntParameter(num);

		method.executeWithVoidReturn();
	} else
		_implementation->setMaxCreaturesToSpawn(num);
}

void DynamicSpawnArea::addNoSpawnArea(SpawnArea* area) {
	DynamicSpawnAreaImplementation* _implementation = (DynamicSpawnAreaImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addObjectParameter(area);

		method.executeWithVoidReturn();
	} else
		_implementation->addNoSpawnArea(area);
}

bool DynamicSpawnArea::isDynamicArea() {
	DynamicSpawnAreaImplementation* _implementation = (DynamicSpawnAreaImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isDynamicArea();
}

DistributedObjectServant* DynamicSpawnArea::_getImplementation() {

	_updated = true;
	return _impl;
}

void DynamicSpawnArea::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;}

/*
 *	DynamicSpawnAreaImplementation
 */

DynamicSpawnAreaImplementation::DynamicSpawnAreaImplementation(DummyConstructorParameter* param) : SpawnAreaImplementation(param) {
	_initializeImplementation();
}


DynamicSpawnAreaImplementation::~DynamicSpawnAreaImplementation() {
}


void DynamicSpawnAreaImplementation::finalize() {
}

void DynamicSpawnAreaImplementation::_initializeImplementation() {
	_setClassHelper(DynamicSpawnAreaHelper::instance());

	_serializationHelperMethod();
}

void DynamicSpawnAreaImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (DynamicSpawnArea*) stub;
	SpawnAreaImplementation::_setStub(stub);
}

DistributedObjectStub* DynamicSpawnAreaImplementation::_getStub() {
	return _this;
}

DynamicSpawnAreaImplementation::operator const DynamicSpawnArea*() {
	return _this;
}

void DynamicSpawnAreaImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void DynamicSpawnAreaImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void DynamicSpawnAreaImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void DynamicSpawnAreaImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void DynamicSpawnAreaImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void DynamicSpawnAreaImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void DynamicSpawnAreaImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void DynamicSpawnAreaImplementation::_serializationHelperMethod() {
	SpawnAreaImplementation::_serializationHelperMethod();

	_setClassName("DynamicSpawnArea");

	addSerializableVariable("spawnedGroups", &spawnedGroups);
	addSerializableVariable("noSpawnAreas", &noSpawnAreas);
	addSerializableVariable("playerOccupants", &playerOccupants);
	addSerializableVariable("excludedPlayerOccupants", &excludedPlayerOccupants);
	addSerializableVariable("observers", &observers);
	addSerializableVariable("lastSpawnTime", &lastSpawnTime);
	addSerializableVariable("maxCreaturesToSpawn", &maxCreaturesToSpawn);
}

DynamicSpawnAreaImplementation::DynamicSpawnAreaImplementation() {
	_initializeImplementation();
	// server/zone/objects/area/DynamicSpawnArea.idl(84):  		Logger.setLoggingName("DynamicSpawnArea");
	Logger::setLoggingName("DynamicSpawnArea");
	// server/zone/objects/area/DynamicSpawnArea.idl(85):  		maxCreaturesToSpawn = 1;
	maxCreaturesToSpawn = 1;
	// server/zone/objects/area/DynamicSpawnArea.idl(87):  		playerOccupants.setNoDuplicateInsertPlan();
	(&playerOccupants)->setNoDuplicateInsertPlan();
	// server/zone/objects/area/DynamicSpawnArea.idl(88):  		excludedPlayerOccupants.setAllowDuplicateInsertPlan();
	(&excludedPlayerOccupants)->setAllowDuplicateInsertPlan();
	// server/zone/objects/area/DynamicSpawnArea.idl(90):  		registerObservers();
	registerObservers();
}

void DynamicSpawnAreaImplementation::setMaxCreaturesToSpawn(int num) {
	// server/zone/objects/area/DynamicSpawnArea.idl(113):  		maxCreaturesToSpawn = num;
	maxCreaturesToSpawn = num;
}

void DynamicSpawnAreaImplementation::addNoSpawnArea(SpawnArea* area) {
	// server/zone/objects/area/DynamicSpawnArea.idl(117):  		noSpawnAreas.add(area);
	(&noSpawnAreas)->add(area);
}

bool DynamicSpawnAreaImplementation::isDynamicArea() {
	// server/zone/objects/area/DynamicSpawnArea.idl(121):  		return true;
	return true;
}

/*
 *	DynamicSpawnAreaAdapter
 */

DynamicSpawnAreaAdapter::DynamicSpawnAreaAdapter(DynamicSpawnAreaImplementation* obj) : SpawnAreaAdapter(obj) {
}

Packet* DynamicSpawnAreaAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		registerObservers();
		break;
	case 7:
		spawnCreature(inv->getUnsignedIntParameter(), (PlayerObject*) inv->getObjectParameter());
		break;
	case 8:
		notifyEnter((SceneObject*) inv->getObjectParameter());
		break;
	case 9:
		notifyExit((SceneObject*) inv->getObjectParameter());
		break;
	case 10:
		doSpawnEvent((PlayerObject*) inv->getObjectParameter());
		break;
	case 11:
		doDespawnEvent();
		break;
	case 12:
		resp->insertSignedInt(notifyObserverEvent(inv->getUnsignedIntParameter(), (Observable*) inv->getObjectParameter(), (ManagedObject*) inv->getObjectParameter(), inv->getSignedLongParameter()));
		break;
	case 13:
		setMaxCreaturesToSpawn(inv->getSignedIntParameter());
		break;
	case 14:
		addNoSpawnArea((SpawnArea*) inv->getObjectParameter());
		break;
	case 15:
		resp->insertBoolean(isDynamicArea());
		break;
	default:
		return NULL;
	}

	return resp;
}

void DynamicSpawnAreaAdapter::registerObservers() {
	((DynamicSpawnAreaImplementation*) impl)->registerObservers();
}

void DynamicSpawnAreaAdapter::spawnCreature(unsigned int templateCRC, PlayerObject* player) {
	((DynamicSpawnAreaImplementation*) impl)->spawnCreature(templateCRC, player);
}

void DynamicSpawnAreaAdapter::notifyEnter(SceneObject* object) {
	((DynamicSpawnAreaImplementation*) impl)->notifyEnter(object);
}

void DynamicSpawnAreaAdapter::notifyExit(SceneObject* object) {
	((DynamicSpawnAreaImplementation*) impl)->notifyExit(object);
}

void DynamicSpawnAreaAdapter::doSpawnEvent(PlayerObject* player) {
	((DynamicSpawnAreaImplementation*) impl)->doSpawnEvent(player);
}

void DynamicSpawnAreaAdapter::doDespawnEvent() {
	((DynamicSpawnAreaImplementation*) impl)->doDespawnEvent();
}

int DynamicSpawnAreaAdapter::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	return ((DynamicSpawnAreaImplementation*) impl)->notifyObserverEvent(eventType, observable, arg1, arg2);
}

void DynamicSpawnAreaAdapter::setMaxCreaturesToSpawn(int num) {
	((DynamicSpawnAreaImplementation*) impl)->setMaxCreaturesToSpawn(num);
}

void DynamicSpawnAreaAdapter::addNoSpawnArea(SpawnArea* area) {
	((DynamicSpawnAreaImplementation*) impl)->addNoSpawnArea(area);
}

bool DynamicSpawnAreaAdapter::isDynamicArea() {
	return ((DynamicSpawnAreaImplementation*) impl)->isDynamicArea();
}

/*
 *	DynamicSpawnAreaHelper
 */

DynamicSpawnAreaHelper* DynamicSpawnAreaHelper::staticInitializer = DynamicSpawnAreaHelper::instance();

DynamicSpawnAreaHelper::DynamicSpawnAreaHelper() {
	className = "DynamicSpawnArea";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void DynamicSpawnAreaHelper::finalizeHelper() {
	DynamicSpawnAreaHelper::finalize();
}

DistributedObject* DynamicSpawnAreaHelper::instantiateObject() {
	return new DynamicSpawnArea(DummyConstructorParameter::instance());
}

DistributedObjectServant* DynamicSpawnAreaHelper::instantiateServant() {
	return new DynamicSpawnAreaImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* DynamicSpawnAreaHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new DynamicSpawnAreaAdapter((DynamicSpawnAreaImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

