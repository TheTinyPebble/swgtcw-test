/*
 *	server/zone/objects/area/DynamicSpawnArea.cpp generated by engine3 IDL compiler 0.60
 */

#include "DynamicSpawnArea.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/managers/object/ObjectManager.h"

#include "server/zone/objects/creature/aigroup/AiGroup.h"

#include "server/zone/objects/area/SpawnObserver.h"

#include "server/zone/objects/area/SpawnDynamicAreaCreatureTask.h"

/*
 *	DynamicSpawnAreaStub
 */

enum {RPC_REGISTEROBSERVERS__ = 6,RPC_SPAWNCREATURE__INT_CREATUREOBJECT_,RPC_NOTIFYENTER__SCENEOBJECT_,RPC_NOTIFYEXIT__SCENEOBJECT_,RPC_DOSPAWNEVENT__CREATUREOBJECT_,RPC_DODESPAWNEVENT__,RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_,RPC_SETMAXCREATURESTOSPAWN__INT_,RPC_ISDYNAMICAREA__};

DynamicSpawnArea::DynamicSpawnArea() : SpawnArea(DummyConstructorParameter::instance()) {
	DynamicSpawnAreaImplementation* _implementation = new DynamicSpawnAreaImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("DynamicSpawnArea");
}

DynamicSpawnArea::DynamicSpawnArea(DummyConstructorParameter* param) : SpawnArea(param) {
	_setClassName("DynamicSpawnArea");
}

DynamicSpawnArea::~DynamicSpawnArea() {
}



void DynamicSpawnArea::registerObservers() {
	DynamicSpawnAreaImplementation* _implementation = static_cast<DynamicSpawnAreaImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REGISTEROBSERVERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->registerObservers();
}

void DynamicSpawnArea::spawnCreature(unsigned int templateCRC, CreatureObject* player) {
	DynamicSpawnAreaImplementation* _implementation = static_cast<DynamicSpawnAreaImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SPAWNCREATURE__INT_CREATUREOBJECT_);
		method.addUnsignedIntParameter(templateCRC);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->spawnCreature(templateCRC, player);
}

void DynamicSpawnArea::notifyEnter(SceneObject* object) {
	DynamicSpawnAreaImplementation* _implementation = static_cast<DynamicSpawnAreaImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYENTER__SCENEOBJECT_);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyEnter(object);
}

void DynamicSpawnArea::notifyExit(SceneObject* object) {
	DynamicSpawnAreaImplementation* _implementation = static_cast<DynamicSpawnAreaImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYEXIT__SCENEOBJECT_);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyExit(object);
}

SpawnDynamicAreaCreatureTask* DynamicSpawnArea::addSpawnTask(CreatureObject* player) {
	DynamicSpawnAreaImplementation* _implementation = static_cast<DynamicSpawnAreaImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->addSpawnTask(player);
}

void DynamicSpawnArea::doSpawnEvent(CreatureObject* player) {
	DynamicSpawnAreaImplementation* _implementation = static_cast<DynamicSpawnAreaImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DOSPAWNEVENT__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->doSpawnEvent(player);
}

void DynamicSpawnArea::doDespawnEvent() {
	DynamicSpawnAreaImplementation* _implementation = static_cast<DynamicSpawnAreaImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DODESPAWNEVENT__);

		method.executeWithVoidReturn();
	} else
		_implementation->doDespawnEvent();
}

int DynamicSpawnArea::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	DynamicSpawnAreaImplementation* _implementation = static_cast<DynamicSpawnAreaImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(observable);
		method.addObjectParameter(arg1);
		method.addSignedLongParameter(arg2);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyObserverEvent(eventType, observable, arg1, arg2);
}

void DynamicSpawnArea::setMaxCreaturesToSpawn(int num) {
	DynamicSpawnAreaImplementation* _implementation = static_cast<DynamicSpawnAreaImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMAXCREATURESTOSPAWN__INT_);
		method.addSignedIntParameter(num);

		method.executeWithVoidReturn();
	} else
		_implementation->setMaxCreaturesToSpawn(num);
}

bool DynamicSpawnArea::isDynamicArea() {
	DynamicSpawnAreaImplementation* _implementation = static_cast<DynamicSpawnAreaImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISDYNAMICAREA__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isDynamicArea();
}

DistributedObjectServant* DynamicSpawnArea::_getImplementation() {

	_updated = true;
	return _impl;
}

void DynamicSpawnArea::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	DynamicSpawnAreaImplementation
 */

DynamicSpawnAreaImplementation::DynamicSpawnAreaImplementation(DummyConstructorParameter* param) : SpawnAreaImplementation(param) {
	_initializeImplementation();
}


DynamicSpawnAreaImplementation::~DynamicSpawnAreaImplementation() {
}


void DynamicSpawnAreaImplementation::finalize() {
}

void DynamicSpawnAreaImplementation::_initializeImplementation() {
	_setClassHelper(DynamicSpawnAreaHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void DynamicSpawnAreaImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<DynamicSpawnArea*>(stub);
	SpawnAreaImplementation::_setStub(stub);
}

DistributedObjectStub* DynamicSpawnAreaImplementation::_getStub() {
	return _this;
}

DynamicSpawnAreaImplementation::operator const DynamicSpawnArea*() {
	return _this;
}

void DynamicSpawnAreaImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void DynamicSpawnAreaImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void DynamicSpawnAreaImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void DynamicSpawnAreaImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void DynamicSpawnAreaImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void DynamicSpawnAreaImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void DynamicSpawnAreaImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void DynamicSpawnAreaImplementation::_serializationHelperMethod() {
	SpawnAreaImplementation::_serializationHelperMethod();

	_setClassName("DynamicSpawnArea");

}

void DynamicSpawnAreaImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(DynamicSpawnAreaImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool DynamicSpawnAreaImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (SpawnAreaImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "DynamicSpawnArea.spawnedGroups") {
		TypeInfo<SortedVector<ManagedReference<AiGroup* > > >::parseFromBinaryStream(&spawnedGroups, stream);
		return true;
	}

	if (_name == "DynamicSpawnArea.playerOccupants") {
		TypeInfo<VectorMap<ManagedReference<CreatureObject* >, SpawnDynamicAreaCreatureTask*> >::parseFromBinaryStream(&playerOccupants, stream);
		return true;
	}

	if (_name == "DynamicSpawnArea.excludedPlayerOccupants") {
		TypeInfo<VectorMap<ManagedReference<CreatureObject* >, ManagedReference<DynamicSpawnArea* > > >::parseFromBinaryStream(&excludedPlayerOccupants, stream);
		return true;
	}

	if (_name == "DynamicSpawnArea.observers") {
		TypeInfo<SortedVector<ManagedReference<SpawnObserver* > > >::parseFromBinaryStream(&observers, stream);
		return true;
	}

	if (_name == "DynamicSpawnArea.lastSpawnTime") {
		TypeInfo<Time >::parseFromBinaryStream(&lastSpawnTime, stream);
		return true;
	}

	if (_name == "DynamicSpawnArea.maxCreaturesToSpawn") {
		TypeInfo<int >::parseFromBinaryStream(&maxCreaturesToSpawn, stream);
		return true;
	}


	return false;
}

void DynamicSpawnAreaImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = DynamicSpawnAreaImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int DynamicSpawnAreaImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = SpawnAreaImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;
	_name = "DynamicSpawnArea.spawnedGroups";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<SortedVector<ManagedReference<AiGroup* > > >::toBinaryStream(&spawnedGroups, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "DynamicSpawnArea.playerOccupants";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<ManagedReference<CreatureObject* >, SpawnDynamicAreaCreatureTask*> >::toBinaryStream(&playerOccupants, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "DynamicSpawnArea.excludedPlayerOccupants";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<ManagedReference<CreatureObject* >, ManagedReference<DynamicSpawnArea* > > >::toBinaryStream(&excludedPlayerOccupants, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "DynamicSpawnArea.observers";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<SortedVector<ManagedReference<SpawnObserver* > > >::toBinaryStream(&observers, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "DynamicSpawnArea.lastSpawnTime";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Time >::toBinaryStream(&lastSpawnTime, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "DynamicSpawnArea.maxCreaturesToSpawn";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&maxCreaturesToSpawn, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 6;
}

DynamicSpawnAreaImplementation::DynamicSpawnAreaImplementation() {
	_initializeImplementation();
	// server/zone/objects/area/DynamicSpawnArea.idl():  		Logger.setLoggingName("DynamicSpawnArea");
	Logger::setLoggingName("DynamicSpawnArea");
	// server/zone/objects/area/DynamicSpawnArea.idl():  		maxCreaturesToSpawn = 1;
	maxCreaturesToSpawn = 1;
	// server/zone/objects/area/DynamicSpawnArea.idl():  		playerOccupants.setNoDuplicateInsertPlan();
	(&playerOccupants)->setNoDuplicateInsertPlan();
	// server/zone/objects/area/DynamicSpawnArea.idl():  		excludedPlayerOccupants.setAllowDuplicateInsertPlan();
	(&excludedPlayerOccupants)->setAllowDuplicateInsertPlan();
	// server/zone/objects/area/DynamicSpawnArea.idl():  		registerObservers();
	registerObservers();
}

void DynamicSpawnAreaImplementation::setMaxCreaturesToSpawn(int num) {
	// server/zone/objects/area/DynamicSpawnArea.idl():  		maxCreaturesToSpawn = num;
	maxCreaturesToSpawn = num;
}

bool DynamicSpawnAreaImplementation::isDynamicArea() {
	// server/zone/objects/area/DynamicSpawnArea.idl():  		return true;
	return true;
}

/*
 *	DynamicSpawnAreaAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


DynamicSpawnAreaAdapter::DynamicSpawnAreaAdapter(DynamicSpawnArea* obj) : SpawnAreaAdapter(obj) {
}

void DynamicSpawnAreaAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_REGISTEROBSERVERS__:
		{
			registerObservers();
		}
		break;
	case RPC_SPAWNCREATURE__INT_CREATUREOBJECT_:
		{
			spawnCreature(inv->getUnsignedIntParameter(), static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_NOTIFYENTER__SCENEOBJECT_:
		{
			notifyEnter(static_cast<SceneObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_NOTIFYEXIT__SCENEOBJECT_:
		{
			notifyExit(static_cast<SceneObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_DOSPAWNEVENT__CREATUREOBJECT_:
		{
			doSpawnEvent(static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_DODESPAWNEVENT__:
		{
			doDespawnEvent();
		}
		break;
	case RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_:
		{
			resp->insertSignedInt(notifyObserverEvent(inv->getUnsignedIntParameter(), static_cast<Observable*>(inv->getObjectParameter()), static_cast<ManagedObject*>(inv->getObjectParameter()), inv->getSignedLongParameter()));
		}
		break;
	case RPC_SETMAXCREATURESTOSPAWN__INT_:
		{
			setMaxCreaturesToSpawn(inv->getSignedIntParameter());
		}
		break;
	case RPC_ISDYNAMICAREA__:
		{
			resp->insertBoolean(isDynamicArea());
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void DynamicSpawnAreaAdapter::registerObservers() {
	(static_cast<DynamicSpawnArea*>(stub))->registerObservers();
}

void DynamicSpawnAreaAdapter::spawnCreature(unsigned int templateCRC, CreatureObject* player) {
	(static_cast<DynamicSpawnArea*>(stub))->spawnCreature(templateCRC, player);
}

void DynamicSpawnAreaAdapter::notifyEnter(SceneObject* object) {
	(static_cast<DynamicSpawnArea*>(stub))->notifyEnter(object);
}

void DynamicSpawnAreaAdapter::notifyExit(SceneObject* object) {
	(static_cast<DynamicSpawnArea*>(stub))->notifyExit(object);
}

void DynamicSpawnAreaAdapter::doSpawnEvent(CreatureObject* player) {
	(static_cast<DynamicSpawnArea*>(stub))->doSpawnEvent(player);
}

void DynamicSpawnAreaAdapter::doDespawnEvent() {
	(static_cast<DynamicSpawnArea*>(stub))->doDespawnEvent();
}

int DynamicSpawnAreaAdapter::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	return (static_cast<DynamicSpawnArea*>(stub))->notifyObserverEvent(eventType, observable, arg1, arg2);
}

void DynamicSpawnAreaAdapter::setMaxCreaturesToSpawn(int num) {
	(static_cast<DynamicSpawnArea*>(stub))->setMaxCreaturesToSpawn(num);
}

bool DynamicSpawnAreaAdapter::isDynamicArea() {
	return (static_cast<DynamicSpawnArea*>(stub))->isDynamicArea();
}

/*
 *	DynamicSpawnAreaHelper
 */

DynamicSpawnAreaHelper* DynamicSpawnAreaHelper::staticInitializer = DynamicSpawnAreaHelper::instance();

DynamicSpawnAreaHelper::DynamicSpawnAreaHelper() {
	className = "DynamicSpawnArea";

	Core::getObjectBroker()->registerClass(className, this);
}

void DynamicSpawnAreaHelper::finalizeHelper() {
	DynamicSpawnAreaHelper::finalize();
}

DistributedObject* DynamicSpawnAreaHelper::instantiateObject() {
	return new DynamicSpawnArea(DummyConstructorParameter::instance());
}

DistributedObjectServant* DynamicSpawnAreaHelper::instantiateServant() {
	return new DynamicSpawnAreaImplementation();
}

DistributedObjectAdapter* DynamicSpawnAreaHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new DynamicSpawnAreaAdapter(static_cast<DynamicSpawnArea*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

