/*
 *	server/zone/objects/area/TestActiveArea.cpp generated by engine3 IDL compiler 0.55
 */

#include "TestActiveArea.h"

#include "TestActiveAreaImplementation.h"

#include "ActiveArea.h"

#include "../player/Player.h"

/*
 *	TestActiveAreaStub
 */

TestActiveArea::TestActiveArea(float x, float y, float z, float radius) : ActiveArea(DummyConstructorParameter::instance()) {
	_impl = new TestActiveAreaImplementation(x, y, z, radius);
	_impl->_setStub(this);
}

TestActiveArea::TestActiveArea(DummyConstructorParameter* param) : ActiveArea(param) {
}

TestActiveArea::~TestActiveArea() {
}

void TestActiveArea::onEnter(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((TestActiveAreaImplementation*) _impl)->onEnter(player);
}

void TestActiveArea::onExit(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((TestActiveAreaImplementation*) _impl)->onExit(player);
}

/*
 *	TestActiveAreaAdapter
 */

TestActiveAreaAdapter::TestActiveAreaAdapter(TestActiveAreaImplementation* obj) : ActiveAreaAdapter(obj) {
}

Packet* TestActiveAreaAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		onEnter((Player*) inv->getObjectParameter());
		break;
	case 7:
		onExit((Player*) inv->getObjectParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void TestActiveAreaAdapter::onEnter(Player* player) {
	return ((TestActiveAreaImplementation*) impl)->onEnter(player);
}

void TestActiveAreaAdapter::onExit(Player* player) {
	return ((TestActiveAreaImplementation*) impl)->onExit(player);
}

/*
 *	TestActiveAreaHelper
 */

TestActiveAreaHelper* TestActiveAreaHelper::staticInitializer = TestActiveAreaHelper::instance();

TestActiveAreaHelper::TestActiveAreaHelper() {
	className = "TestActiveArea";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void TestActiveAreaHelper::finalizeHelper() {
	TestActiveAreaHelper::finalize();
}

DistributedObject* TestActiveAreaHelper::instantiateObject() {
	return new TestActiveArea(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* TestActiveAreaHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new TestActiveAreaAdapter((TestActiveAreaImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	TestActiveAreaServant
 */

TestActiveAreaServant::TestActiveAreaServant(float x, float y, float z, float radius) : ActiveAreaImplementation(x, y, z, radius) {
	_classHelper = TestActiveAreaHelper::instance();
}

TestActiveAreaServant::~TestActiveAreaServant() {
}

void TestActiveAreaServant::_setStub(DistributedObjectStub* stub) {
	_this = (TestActiveArea*) stub;
	ActiveAreaServant::_setStub(stub);
}

DistributedObjectStub* TestActiveAreaServant::_getStub() {
	return _this;
}

