/*
 *	server/zone/objects/area/MissionReconActiveArea.cpp generated by engine3 IDL compiler 0.60
 */

#include "MissionReconActiveArea.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/mission/ReconMissionObjective.h"

#include "server/zone/Zone.h"

/*
 *	MissionReconActiveAreaStub
 */

enum {RPC_NOTIFYENTER__SCENEOBJECT_ = 6,RPC_NOTIFYEXIT__SCENEOBJECT_,RPC_SETMISSIONOBJECTIVE__RECONMISSIONOBJECTIVE_};

MissionReconActiveArea::MissionReconActiveArea() : ActiveArea(DummyConstructorParameter::instance()) {
	MissionReconActiveAreaImplementation* _implementation = new MissionReconActiveAreaImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("MissionReconActiveArea");
}

MissionReconActiveArea::MissionReconActiveArea(DummyConstructorParameter* param) : ActiveArea(param) {
	_setClassName("MissionReconActiveArea");
}

MissionReconActiveArea::~MissionReconActiveArea() {
}



void MissionReconActiveArea::notifyEnter(SceneObject* player) {
	MissionReconActiveAreaImplementation* _implementation = static_cast<MissionReconActiveAreaImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYENTER__SCENEOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyEnter(player);
}

void MissionReconActiveArea::notifyExit(SceneObject* player) {
	MissionReconActiveAreaImplementation* _implementation = static_cast<MissionReconActiveAreaImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYEXIT__SCENEOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyExit(player);
}

void MissionReconActiveArea::setMissionObjective(ReconMissionObjective* mission) {
	MissionReconActiveAreaImplementation* _implementation = static_cast<MissionReconActiveAreaImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMISSIONOBJECTIVE__RECONMISSIONOBJECTIVE_);
		method.addObjectParameter(mission);

		method.executeWithVoidReturn();
	} else
		_implementation->setMissionObjective(mission);
}

DistributedObjectServant* MissionReconActiveArea::_getImplementation() {

	_updated = true;
	return _impl;
}

void MissionReconActiveArea::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	MissionReconActiveAreaImplementation
 */

MissionReconActiveAreaImplementation::MissionReconActiveAreaImplementation(DummyConstructorParameter* param) : ActiveAreaImplementation(param) {
	_initializeImplementation();
}


MissionReconActiveAreaImplementation::~MissionReconActiveAreaImplementation() {
}


void MissionReconActiveAreaImplementation::finalize() {
}

void MissionReconActiveAreaImplementation::_initializeImplementation() {
	_setClassHelper(MissionReconActiveAreaHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void MissionReconActiveAreaImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<MissionReconActiveArea*>(stub);
	ActiveAreaImplementation::_setStub(stub);
}

DistributedObjectStub* MissionReconActiveAreaImplementation::_getStub() {
	return _this;
}

MissionReconActiveAreaImplementation::operator const MissionReconActiveArea*() {
	return _this;
}

void MissionReconActiveAreaImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void MissionReconActiveAreaImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void MissionReconActiveAreaImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void MissionReconActiveAreaImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void MissionReconActiveAreaImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void MissionReconActiveAreaImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void MissionReconActiveAreaImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void MissionReconActiveAreaImplementation::_serializationHelperMethod() {
	ActiveAreaImplementation::_serializationHelperMethod();

	_setClassName("MissionReconActiveArea");

}

void MissionReconActiveAreaImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(MissionReconActiveAreaImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool MissionReconActiveAreaImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ActiveAreaImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "MissionReconActiveArea.missionObjective") {
		TypeInfo<ManagedWeakReference<ReconMissionObjective* > >::parseFromBinaryStream(&missionObjective, stream);
		return true;
	}

	if (_name == "MissionReconActiveArea.completeTask") {
		TypeInfo<Reference<CompleteMissionAfterCertainTimeTask* > >::parseFromBinaryStream(&completeTask, stream);
		return true;
	}


	return false;
}

void MissionReconActiveAreaImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = MissionReconActiveAreaImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int MissionReconActiveAreaImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ActiveAreaImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;
	_name = "MissionReconActiveArea.missionObjective";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<ReconMissionObjective* > >::toBinaryStream(&missionObjective, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "MissionReconActiveArea.completeTask";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Reference<CompleteMissionAfterCertainTimeTask* > >::toBinaryStream(&completeTask, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 2;
}

MissionReconActiveAreaImplementation::MissionReconActiveAreaImplementation() {
	_initializeImplementation();
	// server/zone/objects/area/MissionReconActiveArea.idl():  		missionObjective = null;
	missionObjective = NULL;
	// server/zone/objects/area/MissionReconActiveArea.idl():  		completeTask = null;
	completeTask = NULL;
	// server/zone/objects/area/MissionReconActiveArea.idl():  		Logger.setLoggingName("MissionReconActiveArea");
	Logger::setLoggingName("MissionReconActiveArea");
}

void MissionReconActiveAreaImplementation::notifyEnter(SceneObject* player) {
	// server/zone/objects/area/MissionReconActiveArea.idl():  		Logger.info("notifyEnter mission recon");
	Logger::info("notifyEnter mission recon");
	// server/zone/objects/area/MissionReconActiveArea.idl():  		}
	if (!player->isPlayerCreature()){
	// server/zone/objects/area/MissionReconActiveArea.idl():  			return;
	return;
}

	else {
	// server/zone/objects/area/MissionReconActiveArea.idl():  			}
	if (missionObjective != NULL){
	// server/zone/objects/area/MissionReconActiveArea.idl():  				CreatureObject missionOwner = missionObjective.getPlayerOwner();
	CreatureObject* missionOwner = missionObjective->getPlayerOwner();
	// server/zone/objects/area/MissionReconActiveArea.idl():  			}
	if ((CreatureObject*) player == missionOwner){
	// server/zone/objects/area/MissionReconActiveArea.idl():  					if 
	if (completeTask == NULL){
	Reference<CompleteMissionAfterCertainTimeTask*> _ref0;
	// server/zone/objects/area/MissionReconActiveArea.idl():  						completeTask = new CompleteMissionAfterCertainTimeTask(missionObjective);
	completeTask = _ref0 = new CompleteMissionAfterCertainTimeTask(missionObjective);
}
	// server/zone/objects/area/MissionReconActiveArea.idl():  				}
	if (!completeTask->isScheduled()){
	// server/zone/objects/area/MissionReconActiveArea.idl():  						missionOwner.sendSystemMessage("Reconnaisance target reached. Stay at the target to do a full inspection.");
	missionOwner->sendSystemMessage("Reconnaisance target reached. Stay at the target to do a full inspection.");
	// server/zone/objects/area/MissionReconActiveArea.idl():  						completeTask.schedule(30 * 1000);
	completeTask->schedule(30 * 1000);
}
}
}

	else {
	// server/zone/objects/area/MissionReconActiveArea.idl():  				super.destroyObjectFromWorld(false);
	ActiveAreaImplementation::destroyObjectFromWorld(false);
}
}
}

void MissionReconActiveAreaImplementation::notifyExit(SceneObject* player) {
	// server/zone/objects/area/MissionReconActiveArea.idl():  		Logger.info("notifyExit mission recon");
	Logger::info("notifyExit mission recon");
	// server/zone/objects/area/MissionReconActiveArea.idl():  		}
	if (!player->isPlayerCreature()){
	// server/zone/objects/area/MissionReconActiveArea.idl():  			return;
	return;
}

	else {
	// server/zone/objects/area/MissionReconActiveArea.idl():  			}
	if (missionObjective != NULL){
	// server/zone/objects/area/MissionReconActiveArea.idl():  				CreatureObject missionOwner = missionObjective.getPlayerOwner();
	CreatureObject* missionOwner = missionObjective->getPlayerOwner();
	// server/zone/objects/area/MissionReconActiveArea.idl():  			}
	if ((CreatureObject*) player == missionOwner){
	// server/zone/objects/area/MissionReconActiveArea.idl():  				}
	if (completeTask != NULL){
	// server/zone/objects/area/MissionReconActiveArea.idl():  						missionOwner.sendSystemMessage("Reconnaissance aborted.");
	missionOwner->sendSystemMessage("Reconnaissance aborted.");
	// server/zone/objects/area/MissionReconActiveArea.idl():  						completeTask.cancel();
	completeTask->cancel();
}
}
}

	else {
	// server/zone/objects/area/MissionReconActiveArea.idl():  				super.destroyObjectFromWorld(false);
	ActiveAreaImplementation::destroyObjectFromWorld(false);
}
}
}

void MissionReconActiveAreaImplementation::setMissionObjective(ReconMissionObjective* mission) {
	// server/zone/objects/area/MissionReconActiveArea.idl():  		missionObjective = mission;
	missionObjective = mission;
}

/*
 *	MissionReconActiveAreaAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


MissionReconActiveAreaAdapter::MissionReconActiveAreaAdapter(MissionReconActiveArea* obj) : ActiveAreaAdapter(obj) {
}

void MissionReconActiveAreaAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_NOTIFYENTER__SCENEOBJECT_:
		{
			notifyEnter(static_cast<SceneObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_NOTIFYEXIT__SCENEOBJECT_:
		{
			notifyExit(static_cast<SceneObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_SETMISSIONOBJECTIVE__RECONMISSIONOBJECTIVE_:
		{
			setMissionObjective(static_cast<ReconMissionObjective*>(inv->getObjectParameter()));
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void MissionReconActiveAreaAdapter::notifyEnter(SceneObject* player) {
	(static_cast<MissionReconActiveArea*>(stub))->notifyEnter(player);
}

void MissionReconActiveAreaAdapter::notifyExit(SceneObject* player) {
	(static_cast<MissionReconActiveArea*>(stub))->notifyExit(player);
}

void MissionReconActiveAreaAdapter::setMissionObjective(ReconMissionObjective* mission) {
	(static_cast<MissionReconActiveArea*>(stub))->setMissionObjective(mission);
}

/*
 *	MissionReconActiveAreaHelper
 */

MissionReconActiveAreaHelper* MissionReconActiveAreaHelper::staticInitializer = MissionReconActiveAreaHelper::instance();

MissionReconActiveAreaHelper::MissionReconActiveAreaHelper() {
	className = "MissionReconActiveArea";

	Core::getObjectBroker()->registerClass(className, this);
}

void MissionReconActiveAreaHelper::finalizeHelper() {
	MissionReconActiveAreaHelper::finalize();
}

DistributedObject* MissionReconActiveAreaHelper::instantiateObject() {
	return new MissionReconActiveArea(DummyConstructorParameter::instance());
}

DistributedObjectServant* MissionReconActiveAreaHelper::instantiateServant() {
	return new MissionReconActiveAreaImplementation();
}

DistributedObjectAdapter* MissionReconActiveAreaHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new MissionReconActiveAreaAdapter(static_cast<MissionReconActiveArea*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

