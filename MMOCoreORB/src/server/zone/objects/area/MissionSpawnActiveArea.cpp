/*
 *	server/zone/objects/area/MissionSpawnActiveArea.cpp generated by engine3 IDL compiler 0.60
 */

#include "MissionSpawnActiveArea.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/mission/DestroyMissionObjective.h"

#include "server/zone/Zone.h"

/*
 *	MissionSpawnActiveAreaStub
 */

enum {RPC_NOTIFYENTER__SCENEOBJECT_ = 6,RPC_SETMISSIONOBJECTIVE__DESTROYMISSIONOBJECTIVE_};

MissionSpawnActiveArea::MissionSpawnActiveArea() : ActiveArea(DummyConstructorParameter::instance()) {
	MissionSpawnActiveAreaImplementation* _implementation = new MissionSpawnActiveAreaImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("MissionSpawnActiveArea");
}

MissionSpawnActiveArea::MissionSpawnActiveArea(DummyConstructorParameter* param) : ActiveArea(param) {
	_setClassName("MissionSpawnActiveArea");
}

MissionSpawnActiveArea::~MissionSpawnActiveArea() {
}



void MissionSpawnActiveArea::notifyEnter(SceneObject* player) {
	MissionSpawnActiveAreaImplementation* _implementation = static_cast<MissionSpawnActiveAreaImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYENTER__SCENEOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyEnter(player);
}

void MissionSpawnActiveArea::setMissionObjective(DestroyMissionObjective* mission) {
	MissionSpawnActiveAreaImplementation* _implementation = static_cast<MissionSpawnActiveAreaImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMISSIONOBJECTIVE__DESTROYMISSIONOBJECTIVE_);
		method.addObjectParameter(mission);

		method.executeWithVoidReturn();
	} else
		_implementation->setMissionObjective(mission);
}

DistributedObjectServant* MissionSpawnActiveArea::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* MissionSpawnActiveArea::_getImplementationForRead() {
	return _impl;
}

void MissionSpawnActiveArea::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	MissionSpawnActiveAreaImplementation
 */

MissionSpawnActiveAreaImplementation::MissionSpawnActiveAreaImplementation(DummyConstructorParameter* param) : ActiveAreaImplementation(param) {
	_initializeImplementation();
}


MissionSpawnActiveAreaImplementation::~MissionSpawnActiveAreaImplementation() {
}


void MissionSpawnActiveAreaImplementation::finalize() {
}

void MissionSpawnActiveAreaImplementation::_initializeImplementation() {
	_setClassHelper(MissionSpawnActiveAreaHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void MissionSpawnActiveAreaImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<MissionSpawnActiveArea*>(stub);
	ActiveAreaImplementation::_setStub(stub);
}

DistributedObjectStub* MissionSpawnActiveAreaImplementation::_getStub() {
	return _this.get();
}

MissionSpawnActiveAreaImplementation::operator const MissionSpawnActiveArea*() {
	return _this.get();
}

void MissionSpawnActiveAreaImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void MissionSpawnActiveAreaImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void MissionSpawnActiveAreaImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void MissionSpawnActiveAreaImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void MissionSpawnActiveAreaImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void MissionSpawnActiveAreaImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void MissionSpawnActiveAreaImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void MissionSpawnActiveAreaImplementation::_serializationHelperMethod() {
	ActiveAreaImplementation::_serializationHelperMethod();

	_setClassName("MissionSpawnActiveArea");

}

void MissionSpawnActiveAreaImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(MissionSpawnActiveAreaImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool MissionSpawnActiveAreaImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ActiveAreaImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xb21416d4: //MissionSpawnActiveArea.destroyMissionObjective
		TypeInfo<ManagedWeakReference<DestroyMissionObjective* > >::parseFromBinaryStream(&destroyMissionObjective, stream);
		return true;

	}

	return false;
}

void MissionSpawnActiveAreaImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = MissionSpawnActiveAreaImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int MissionSpawnActiveAreaImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ActiveAreaImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0xb21416d4; //MissionSpawnActiveArea.destroyMissionObjective
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<DestroyMissionObjective* > >::toBinaryStream(&destroyMissionObjective, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 1;
}

MissionSpawnActiveAreaImplementation::MissionSpawnActiveAreaImplementation() {
	_initializeImplementation();
	// server/zone/objects/area/MissionSpawnActiveArea.idl():  		destroyMissionObjective = null;
	destroyMissionObjective = NULL;
	// server/zone/objects/area/MissionSpawnActiveArea.idl():  		Logger.setLoggingName("MissionSpawnActiveArea");
	Logger::setLoggingName("MissionSpawnActiveArea");
}

void MissionSpawnActiveAreaImplementation::notifyEnter(SceneObject* player) {
	// server/zone/objects/area/MissionSpawnActiveArea.idl():  		}
	if (!player->isPlayerCreature()){
	// server/zone/objects/area/MissionSpawnActiveArea.idl():  			return;
	return;
}

	else {
	// server/zone/objects/area/MissionSpawnActiveArea.idl():  			DestroyMissionObjective objective = destroyMissionObjective;
	ManagedReference<DestroyMissionObjective* > objective = destroyMissionObjective;
	// server/zone/objects/area/MissionSpawnActiveArea.idl():  			}
	if (objective != NULL){
	// server/zone/objects/area/MissionSpawnActiveArea.idl():  				CreatureObject missionOwner = objective.getPlayerOwner();
	ManagedReference<CreatureObject* > missionOwner = objective->getPlayerOwner();
	// server/zone/objects/area/MissionSpawnActiveArea.idl():  			}
	if ((CreatureObject*) player == missionOwner){
	// server/zone/objects/area/MissionSpawnActiveArea.idl():  					destroyMissionObjective.spawnLair();
	destroyMissionObjective.get()->spawnLair();
}
}

	else {
	// server/zone/objects/area/MissionSpawnActiveArea.idl():  				super.destroyObjectFromWorld(false);
	ActiveAreaImplementation::destroyObjectFromWorld(false);
}
}
}

void MissionSpawnActiveAreaImplementation::setMissionObjective(DestroyMissionObjective* mission) {
	// server/zone/objects/area/MissionSpawnActiveArea.idl():  		destroyMissionObjective = mission;
	destroyMissionObjective = mission;
}

/*
 *	MissionSpawnActiveAreaAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


MissionSpawnActiveAreaAdapter::MissionSpawnActiveAreaAdapter(MissionSpawnActiveArea* obj) : ActiveAreaAdapter(obj) {
}

void MissionSpawnActiveAreaAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_NOTIFYENTER__SCENEOBJECT_:
		{
			notifyEnter(static_cast<SceneObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_SETMISSIONOBJECTIVE__DESTROYMISSIONOBJECTIVE_:
		{
			setMissionObjective(static_cast<DestroyMissionObjective*>(inv->getObjectParameter()));
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void MissionSpawnActiveAreaAdapter::notifyEnter(SceneObject* player) {
	(static_cast<MissionSpawnActiveArea*>(stub))->notifyEnter(player);
}

void MissionSpawnActiveAreaAdapter::setMissionObjective(DestroyMissionObjective* mission) {
	(static_cast<MissionSpawnActiveArea*>(stub))->setMissionObjective(mission);
}

/*
 *	MissionSpawnActiveAreaHelper
 */

MissionSpawnActiveAreaHelper* MissionSpawnActiveAreaHelper::staticInitializer = MissionSpawnActiveAreaHelper::instance();

MissionSpawnActiveAreaHelper::MissionSpawnActiveAreaHelper() {
	className = "MissionSpawnActiveArea";

	Core::getObjectBroker()->registerClass(className, this);
}

void MissionSpawnActiveAreaHelper::finalizeHelper() {
	MissionSpawnActiveAreaHelper::finalize();
}

DistributedObject* MissionSpawnActiveAreaHelper::instantiateObject() {
	return new MissionSpawnActiveArea(DummyConstructorParameter::instance());
}

DistributedObjectServant* MissionSpawnActiveAreaHelper::instantiateServant() {
	return new MissionSpawnActiveAreaImplementation();
}

DistributedObjectAdapter* MissionSpawnActiveAreaHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new MissionSpawnActiveAreaAdapter(static_cast<MissionSpawnActiveArea*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

