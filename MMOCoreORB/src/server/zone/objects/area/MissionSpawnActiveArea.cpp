/*
 *	server/zone/objects/area/MissionSpawnActiveArea.cpp generated by engine3 IDL compiler 0.60
 */

#include "MissionSpawnActiveArea.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/mission/DestroyMissionObjective.h"

/*
 *	MissionSpawnActiveAreaStub
 */

MissionSpawnActiveArea::MissionSpawnActiveArea() : ActiveArea(DummyConstructorParameter::instance()) {
	MissionSpawnActiveAreaImplementation* _implementation = new MissionSpawnActiveAreaImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

MissionSpawnActiveArea::MissionSpawnActiveArea(DummyConstructorParameter* param) : ActiveArea(param) {
}

MissionSpawnActiveArea::~MissionSpawnActiveArea() {
}


void MissionSpawnActiveArea::notifyEnter(SceneObject* player) {
	MissionSpawnActiveAreaImplementation* _implementation = (MissionSpawnActiveAreaImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyEnter(player);
}

void MissionSpawnActiveArea::setMissionObjective(DestroyMissionObjective* mission) {
	MissionSpawnActiveAreaImplementation* _implementation = (MissionSpawnActiveAreaImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(mission);

		method.executeWithVoidReturn();
	} else
		_implementation->setMissionObjective(mission);
}

DistributedObjectServant* MissionSpawnActiveArea::_getImplementation() {
	return _impl;}

void MissionSpawnActiveArea::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;}

/*
 *	MissionSpawnActiveAreaImplementation
 */

MissionSpawnActiveAreaImplementation::MissionSpawnActiveAreaImplementation(DummyConstructorParameter* param) : ActiveAreaImplementation(param) {
	_initializeImplementation();
}


MissionSpawnActiveAreaImplementation::~MissionSpawnActiveAreaImplementation() {
}


void MissionSpawnActiveAreaImplementation::finalize() {
}

void MissionSpawnActiveAreaImplementation::_initializeImplementation() {
	_setClassHelper(MissionSpawnActiveAreaHelper::instance());

	_serializationHelperMethod();
}

void MissionSpawnActiveAreaImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (MissionSpawnActiveArea*) stub;
	ActiveAreaImplementation::_setStub(stub);
}

DistributedObjectStub* MissionSpawnActiveAreaImplementation::_getStub() {
	return _this;
}

MissionSpawnActiveAreaImplementation::operator const MissionSpawnActiveArea*() {
	return _this;
}

void MissionSpawnActiveAreaImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void MissionSpawnActiveAreaImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void MissionSpawnActiveAreaImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void MissionSpawnActiveAreaImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void MissionSpawnActiveAreaImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void MissionSpawnActiveAreaImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void MissionSpawnActiveAreaImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void MissionSpawnActiveAreaImplementation::_serializationHelperMethod() {
	ActiveAreaImplementation::_serializationHelperMethod();

	_setClassName("MissionSpawnActiveArea");

	addSerializableVariable("destroyMissionObjective", &destroyMissionObjective);
}

MissionSpawnActiveAreaImplementation::MissionSpawnActiveAreaImplementation() {
	_initializeImplementation();
	// server/zone/objects/area/MissionSpawnActiveArea.idl(57):  		destroyMissionObjective = null;
	destroyMissionObjective = NULL;
	// server/zone/objects/area/MissionSpawnActiveArea.idl(59):  		Logger.setLoggingName("MissionSpawnActiveArea");
	Logger::setLoggingName("MissionSpawnActiveArea");
}

void MissionSpawnActiveAreaImplementation::notifyEnter(SceneObject* player) {
	// server/zone/objects/area/MissionSpawnActiveArea.idl(65):  
	if (!player->isPlayerCreature()){
	// server/zone/objects/area/MissionSpawnActiveArea.idl(66):  			return;
	return;
}

	else {
	// server/zone/objects/area/MissionSpawnActiveArea.idl(68):  
	if (destroyMissionObjective != NULL){
	// server/zone/objects/area/MissionSpawnActiveArea.idl(71):  				PlayerCreature missionOwner = destroyMissionObjective.getPlayerOwner();
	PlayerCreature* missionOwner = destroyMissionObjective->getPlayerOwner();
	// server/zone/objects/area/MissionSpawnActiveArea.idl(73):  			}
	if ((PlayerCreature*) player == missionOwner){
	// server/zone/objects/area/MissionSpawnActiveArea.idl(75):  					destroyMissionObjective.spawnLair();
	destroyMissionObjective->spawnLair();
}
}

	else {
	// server/zone/objects/area/MissionSpawnActiveArea.idl(80):  				super.removeFromZone();
	ActiveAreaImplementation::removeFromZone();
}
}
}

void MissionSpawnActiveAreaImplementation::setMissionObjective(DestroyMissionObjective* mission) {
	// server/zone/objects/area/MissionSpawnActiveArea.idl(86):  		destroyMissionObjective = mission;
	destroyMissionObjective = mission;
}

/*
 *	MissionSpawnActiveAreaAdapter
 */

MissionSpawnActiveAreaAdapter::MissionSpawnActiveAreaAdapter(MissionSpawnActiveAreaImplementation* obj) : ActiveAreaAdapter(obj) {
}

Packet* MissionSpawnActiveAreaAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		notifyEnter((SceneObject*) inv->getObjectParameter());
		break;
	case 7:
		setMissionObjective((DestroyMissionObjective*) inv->getObjectParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void MissionSpawnActiveAreaAdapter::notifyEnter(SceneObject* player) {
	((MissionSpawnActiveAreaImplementation*) impl)->notifyEnter(player);
}

void MissionSpawnActiveAreaAdapter::setMissionObjective(DestroyMissionObjective* mission) {
	((MissionSpawnActiveAreaImplementation*) impl)->setMissionObjective(mission);
}

/*
 *	MissionSpawnActiveAreaHelper
 */

MissionSpawnActiveAreaHelper* MissionSpawnActiveAreaHelper::staticInitializer = MissionSpawnActiveAreaHelper::instance();

MissionSpawnActiveAreaHelper::MissionSpawnActiveAreaHelper() {
	className = "MissionSpawnActiveArea";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void MissionSpawnActiveAreaHelper::finalizeHelper() {
	MissionSpawnActiveAreaHelper::finalize();
}

DistributedObject* MissionSpawnActiveAreaHelper::instantiateObject() {
	return new MissionSpawnActiveArea(DummyConstructorParameter::instance());
}

DistributedObjectServant* MissionSpawnActiveAreaHelper::instantiateServant() {
	return new MissionSpawnActiveAreaImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* MissionSpawnActiveAreaHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new MissionSpawnActiveAreaAdapter((MissionSpawnActiveAreaImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

