/*
 *	server/zone/objects/area/ActiveArea.cpp generated by engine3 IDL compiler 0.60
 */

#include "ActiveArea.h"

#include "server/zone/objects/player/PlayerCreature.h"

/*
 *	ActiveAreaStub
 */

ActiveArea::ActiveArea() : SceneObject(DummyConstructorParameter::instance()) {
	_impl = new ActiveAreaImplementation();
	_impl->_setStub(this);
}

ActiveArea::ActiveArea(DummyConstructorParameter* param) : SceneObject(param) {
}

ActiveArea::~ActiveArea() {
}


void ActiveArea::notifyEnter(PlayerCreature* object) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		((ActiveAreaImplementation*) _impl)->notifyEnter(object);
}

void ActiveArea::notifyExit(PlayerCreature* object) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		((ActiveAreaImplementation*) _impl)->notifyExit(object);
}

bool ActiveArea::containsPoint(float x, float y) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addFloatParameter(x);
		method.addFloatParameter(y);

		return method.executeWithBooleanReturn();
	} else
		return ((ActiveAreaImplementation*) _impl)->containsPoint(x, y);
}

void ActiveArea::notifyPositionUpdate(QuadTreeEntry* obj) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((ActiveAreaImplementation*) _impl)->notifyPositionUpdate(obj);
}

float ActiveArea::getRadius() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return method.executeWithFloatReturn();
	} else
		return ((ActiveAreaImplementation*) _impl)->getRadius();
}

void ActiveArea::setRadius(float r) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addFloatParameter(r);

		method.executeWithVoidReturn();
	} else
		((ActiveAreaImplementation*) _impl)->setRadius(r);
}

/*
 *	ActiveAreaImplementation
 */

ActiveAreaImplementation::ActiveAreaImplementation(DummyConstructorParameter* param) : SceneObjectImplementation(param) {
	_initializeImplementation();
}

ActiveAreaImplementation::~ActiveAreaImplementation() {
}


void ActiveAreaImplementation::finalize() {
}

void ActiveAreaImplementation::_initializeImplementation() {
	_setClassHelper(ActiveAreaHelper::instance());

	_serializationHelperMethod();
}

void ActiveAreaImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (ActiveArea*) stub;
	SceneObjectImplementation::_setStub(stub);
}

DistributedObjectStub* ActiveAreaImplementation::_getStub() {
	return _this;
}

ActiveAreaImplementation::operator const ActiveArea*() {
	return _this;
}

void ActiveAreaImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void ActiveAreaImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void ActiveAreaImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void ActiveAreaImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void ActiveAreaImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void ActiveAreaImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void ActiveAreaImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void ActiveAreaImplementation::_serializationHelperMethod() {
	SceneObjectImplementation::_serializationHelperMethod();

	_setClassName("ActiveArea");

	addSerializableVariable("radius", &radius);
	addSerializableVariable("radius2", &radius2);
}

ActiveAreaImplementation::ActiveAreaImplementation() {
	_initializeImplementation();
	// server/zone/objects/area/ActiveArea.idl(56):  		radius = 0;
	radius = 0;
	// server/zone/objects/area/ActiveArea.idl(57):  		radius2 = 0;
	radius2 = 0;
	// server/zone/objects/area/ActiveArea.idl(59):  		Logger.setLoggingName("ActiveArea");
	Logger::setLoggingName("ActiveArea");
}

void ActiveAreaImplementation::notifyEnter(PlayerCreature* object) {
}

void ActiveAreaImplementation::notifyExit(PlayerCreature* object) {
}

float ActiveAreaImplementation::getRadius() {
	// server/zone/objects/area/ActiveArea.idl(76):  		return radius;
	return radius;
}

void ActiveAreaImplementation::setRadius(float r) {
	// server/zone/objects/area/ActiveArea.idl(80):  		radius = r;
	radius = r;
	// server/zone/objects/area/ActiveArea.idl(81):  		radius2 = r * r;
	radius2 = r * r;
}

/*
 *	ActiveAreaAdapter
 */

ActiveAreaAdapter::ActiveAreaAdapter(ActiveAreaImplementation* obj) : SceneObjectAdapter(obj) {
}

Packet* ActiveAreaAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		notifyEnter((PlayerCreature*) inv->getObjectParameter());
		break;
	case 7:
		notifyExit((PlayerCreature*) inv->getObjectParameter());
		break;
	case 8:
		resp->insertBoolean(containsPoint(inv->getFloatParameter(), inv->getFloatParameter()));
		break;
	case 9:
		resp->insertFloat(getRadius());
		break;
	case 10:
		setRadius(inv->getFloatParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void ActiveAreaAdapter::notifyEnter(PlayerCreature* object) {
	((ActiveAreaImplementation*) impl)->notifyEnter(object);
}

void ActiveAreaAdapter::notifyExit(PlayerCreature* object) {
	((ActiveAreaImplementation*) impl)->notifyExit(object);
}

bool ActiveAreaAdapter::containsPoint(float x, float y) {
	return ((ActiveAreaImplementation*) impl)->containsPoint(x, y);
}

float ActiveAreaAdapter::getRadius() {
	return ((ActiveAreaImplementation*) impl)->getRadius();
}

void ActiveAreaAdapter::setRadius(float r) {
	((ActiveAreaImplementation*) impl)->setRadius(r);
}

/*
 *	ActiveAreaHelper
 */

ActiveAreaHelper* ActiveAreaHelper::staticInitializer = ActiveAreaHelper::instance();

ActiveAreaHelper::ActiveAreaHelper() {
	className = "ActiveArea";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void ActiveAreaHelper::finalizeHelper() {
	ActiveAreaHelper::finalize();
}

DistributedObject* ActiveAreaHelper::instantiateObject() {
	return new ActiveArea(DummyConstructorParameter::instance());
}

DistributedObjectServant* ActiveAreaHelper::instantiateServant() {
	return new ActiveAreaImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ActiveAreaHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ActiveAreaAdapter((ActiveAreaImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

