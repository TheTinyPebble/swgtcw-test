/*
 *	server/zone/objects/scene/components/ZoneComponent.cpp generated by engine3 IDL compiler 0.60
 */

#include "ZoneComponent.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "server/zone/objects/area/ActiveArea.h"

#include "server/zone/objects/region/CityRegion.h"

/*
 *	ZoneComponentStub
 */

enum {RPC_INITIALIZE__SCENEOBJECT_ = 6,RPC_INITIALIZETRANSIENTMEMBERS__,RPC_NOTIFYLOADFROMDATABASE__,RPC_INSERTTOZONE__ZONE_,RPC_INSERTTOBUILDING__BUILDINGOBJECT_,RPC_SWITCHZONE__STRING_FLOAT_FLOAT_FLOAT_LONG_,RPC_TELEPORT__FLOAT_FLOAT_FLOAT_LONG_,RPC_REMOVEFROMZONE__,RPC_REMOVEFROMBUILDING__BUILDINGOBJECT_,RPC_UPDATEZONE__BOOL_BOOL_,RPC_UPDATEZONEWITHPARENT__SCENEOBJECT_BOOL_BOOL_,RPC_HASNOTIFIEDSENTOBJECT__SCENEOBJECT_,RPC_ADDNOTIFIEDSENTOBJECT__SCENEOBJECT_,RPC_REMOVENOTIFIEDSENTOBJECT__SCENEOBJECT_,RPC_ADDACTIVEAREA__ACTIVEAREA_,RPC_DROPACTIVEAREA__ACTIVEAREA_,RPC_HASACTIVEAREA__ACTIVEAREA_,RPC_GETACTIVEAREASSIZE__,RPC_GETACTIVEREGION__,RPC_GETCITYREGION__,RPC_SETCITYREGION__CITYREGION_,RPC_GETZONE__,RPC_SETZONE__ZONE_};

ZoneComponent::ZoneComponent() : SceneObjectComponent(DummyConstructorParameter::instance()) {
	ZoneComponentImplementation* _implementation = new ZoneComponentImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

ZoneComponent::ZoneComponent(DummyConstructorParameter* param) : SceneObjectComponent(param) {
}

ZoneComponent::~ZoneComponent() {
}


void ZoneComponent::initialize(SceneObject* obj) {
	ZoneComponentImplementation* _implementation = (ZoneComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZE__SCENEOBJECT_);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		_implementation->initialize(obj);
}

void ZoneComponent::initializeTransientMembers() {
	ZoneComponentImplementation* _implementation = (ZoneComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void ZoneComponent::notifyLoadFromDatabase() {
	ZoneComponentImplementation* _implementation = (ZoneComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYLOADFROMDATABASE__);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyLoadFromDatabase();
}

void ZoneComponent::notifyInsert(QuadTreeEntry* entry) {
	ZoneComponentImplementation* _implementation = (ZoneComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->notifyInsert(entry);
}

void ZoneComponent::notifyDissapear(QuadTreeEntry* entry) {
	ZoneComponentImplementation* _implementation = (ZoneComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->notifyDissapear(entry);
}

void ZoneComponent::insertToZone(Zone* zone) {
	ZoneComponentImplementation* _implementation = (ZoneComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INSERTTOZONE__ZONE_);
		method.addObjectParameter(zone);

		method.executeWithVoidReturn();
	} else
		_implementation->insertToZone(zone);
}

void ZoneComponent::insertToBuilding(BuildingObject* building) {
	ZoneComponentImplementation* _implementation = (ZoneComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INSERTTOBUILDING__BUILDINGOBJECT_);
		method.addObjectParameter(building);

		method.executeWithVoidReturn();
	} else
		_implementation->insertToBuilding(building);
}

void ZoneComponent::switchZone(const String& newTerrainName, float newPostionX, float newPositionZ, float newPositionY, unsigned long long parentID) {
	ZoneComponentImplementation* _implementation = (ZoneComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SWITCHZONE__STRING_FLOAT_FLOAT_FLOAT_LONG_);
		method.addAsciiParameter(newTerrainName);
		method.addFloatParameter(newPostionX);
		method.addFloatParameter(newPositionZ);
		method.addFloatParameter(newPositionY);
		method.addUnsignedLongParameter(parentID);

		method.executeWithVoidReturn();
	} else
		_implementation->switchZone(newTerrainName, newPostionX, newPositionZ, newPositionY, parentID);
}

void ZoneComponent::teleport(float newPositionX, float newPositionZ, float newPositionY, unsigned long long parentID) {
	ZoneComponentImplementation* _implementation = (ZoneComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_TELEPORT__FLOAT_FLOAT_FLOAT_LONG_);
		method.addFloatParameter(newPositionX);
		method.addFloatParameter(newPositionZ);
		method.addFloatParameter(newPositionY);
		method.addUnsignedLongParameter(parentID);

		method.executeWithVoidReturn();
	} else
		_implementation->teleport(newPositionX, newPositionZ, newPositionY, parentID);
}

void ZoneComponent::removeFromZone() {
	ZoneComponentImplementation* _implementation = (ZoneComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEFROMZONE__);

		method.executeWithVoidReturn();
	} else
		_implementation->removeFromZone();
}

void ZoneComponent::removeFromBuilding(BuildingObject* building) {
	ZoneComponentImplementation* _implementation = (ZoneComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEFROMBUILDING__BUILDINGOBJECT_);
		method.addObjectParameter(building);

		method.executeWithVoidReturn();
	} else
		_implementation->removeFromBuilding(building);
}

void ZoneComponent::updateZone(bool lightUpdate, bool sendPackets) {
	ZoneComponentImplementation* _implementation = (ZoneComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATEZONE__BOOL_BOOL_);
		method.addBooleanParameter(lightUpdate);
		method.addBooleanParameter(sendPackets);

		method.executeWithVoidReturn();
	} else
		_implementation->updateZone(lightUpdate, sendPackets);
}

void ZoneComponent::updateZoneWithParent(SceneObject* newParent, bool lightUpdate, bool sendPackets) {
	ZoneComponentImplementation* _implementation = (ZoneComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATEZONEWITHPARENT__SCENEOBJECT_BOOL_BOOL_);
		method.addObjectParameter(newParent);
		method.addBooleanParameter(lightUpdate);
		method.addBooleanParameter(sendPackets);

		method.executeWithVoidReturn();
	} else
		_implementation->updateZoneWithParent(newParent, lightUpdate, sendPackets);
}

bool ZoneComponent::hasNotifiedSentObject(SceneObject* object) {
	ZoneComponentImplementation* _implementation = (ZoneComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASNOTIFIEDSENTOBJECT__SCENEOBJECT_);
		method.addObjectParameter(object);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasNotifiedSentObject(object);
}

int ZoneComponent::addNotifiedSentObject(SceneObject* object) {
	ZoneComponentImplementation* _implementation = (ZoneComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDNOTIFIEDSENTOBJECT__SCENEOBJECT_);
		method.addObjectParameter(object);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->addNotifiedSentObject(object);
}

void ZoneComponent::removeNotifiedSentObject(SceneObject* object) {
	ZoneComponentImplementation* _implementation = (ZoneComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVENOTIFIEDSENTOBJECT__SCENEOBJECT_);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		_implementation->removeNotifiedSentObject(object);
}

void ZoneComponent::addActiveArea(ActiveArea* area) {
	ZoneComponentImplementation* _implementation = (ZoneComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDACTIVEAREA__ACTIVEAREA_);
		method.addObjectParameter(area);

		method.executeWithVoidReturn();
	} else
		_implementation->addActiveArea(area);
}

void ZoneComponent::dropActiveArea(ActiveArea* area) {
	ZoneComponentImplementation* _implementation = (ZoneComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DROPACTIVEAREA__ACTIVEAREA_);
		method.addObjectParameter(area);

		method.executeWithVoidReturn();
	} else
		_implementation->dropActiveArea(area);
}

bool ZoneComponent::hasActiveArea(ActiveArea* area) {
	ZoneComponentImplementation* _implementation = (ZoneComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASACTIVEAREA__ACTIVEAREA_);
		method.addObjectParameter(area);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasActiveArea(area);
}

Vector<ManagedReference<ActiveArea* > >* ZoneComponent::getActiveAreas() {
	ZoneComponentImplementation* _implementation = (ZoneComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getActiveAreas();
}

int ZoneComponent::getActiveAreasSize() {
	ZoneComponentImplementation* _implementation = (ZoneComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETACTIVEAREASSIZE__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getActiveAreasSize();
}

ActiveArea* ZoneComponent::getActiveRegion() {
	ZoneComponentImplementation* _implementation = (ZoneComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETACTIVEREGION__);

		return (ActiveArea*) method.executeWithObjectReturn();
	} else
		return _implementation->getActiveRegion();
}

CityRegion* ZoneComponent::getCityRegion() {
	ZoneComponentImplementation* _implementation = (ZoneComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCITYREGION__);

		return (CityRegion*) method.executeWithObjectReturn();
	} else
		return _implementation->getCityRegion();
}

void ZoneComponent::setCityRegion(CityRegion* region) {
	ZoneComponentImplementation* _implementation = (ZoneComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCITYREGION__CITYREGION_);
		method.addObjectParameter(region);

		method.executeWithVoidReturn();
	} else
		_implementation->setCityRegion(region);
}

Zone* ZoneComponent::getZone() {
	ZoneComponentImplementation* _implementation = (ZoneComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETZONE__);

		return (Zone*) method.executeWithObjectReturn();
	} else
		return _implementation->getZone();
}

void ZoneComponent::setZone(Zone* zon) {
	ZoneComponentImplementation* _implementation = (ZoneComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETZONE__ZONE_);
		method.addObjectParameter(zon);

		method.executeWithVoidReturn();
	} else
		_implementation->setZone(zon);
}

DistributedObjectServant* ZoneComponent::_getImplementation() {

	_updated = true;
	return _impl;
}

void ZoneComponent::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	ZoneComponentImplementation
 */

ZoneComponentImplementation::ZoneComponentImplementation(DummyConstructorParameter* param) : SceneObjectComponentImplementation(param) {
	_initializeImplementation();
}


ZoneComponentImplementation::~ZoneComponentImplementation() {
}


void ZoneComponentImplementation::finalize() {
}

void ZoneComponentImplementation::_initializeImplementation() {
	_setClassHelper(ZoneComponentHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void ZoneComponentImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (ZoneComponent*) stub;
	SceneObjectComponentImplementation::_setStub(stub);
}

DistributedObjectStub* ZoneComponentImplementation::_getStub() {
	return _this;
}

ZoneComponentImplementation::operator const ZoneComponent*() {
	return _this;
}

void ZoneComponentImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void ZoneComponentImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void ZoneComponentImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void ZoneComponentImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void ZoneComponentImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void ZoneComponentImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void ZoneComponentImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void ZoneComponentImplementation::_serializationHelperMethod() {
	SceneObjectComponentImplementation::_serializationHelperMethod();

	_setClassName("ZoneComponent");

}

void ZoneComponentImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(ZoneComponentImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ZoneComponentImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (SceneObjectComponentImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "zone") {
		TypeInfo<ZoneReference >::parseFromBinaryStream(&zone, stream);
		return true;
	}

	if (_name == "activeAreas") {
		TypeInfo<SortedVector<ManagedReference<ActiveArea* > > >::parseFromBinaryStream(&activeAreas, stream);
		return true;
	}


	return false;
}

void ZoneComponentImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ZoneComponentImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ZoneComponentImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "zone";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ZoneReference >::toBinaryStream(&zone, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "activeAreas";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<SortedVector<ManagedReference<ActiveArea* > > >::toBinaryStream(&activeAreas, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 2 + SceneObjectComponentImplementation::writeObjectMembers(stream);
}

ZoneComponentImplementation::ZoneComponentImplementation() : SceneObjectComponentImplementation() {
	_initializeImplementation();
}

void ZoneComponentImplementation::initialize(SceneObject* obj) {
	// server/zone/objects/scene/components/ZoneComponent.idl():  		super.initialize(obj);
	SceneObjectComponentImplementation::initialize(obj);
	// server/zone/objects/scene/components/ZoneComponent.idl():  		initializeTransientMembers();
	initializeTransientMembers();
}

void ZoneComponentImplementation::initializeTransientMembers() {
	// server/zone/objects/scene/components/ZoneComponent.idl():  		super.initializeTransientMembers();
	SceneObjectComponentImplementation::initializeTransientMembers();
	// server/zone/objects/scene/components/ZoneComponent.idl():  		Logger.setGlobalLogging(false);
	Logger::setGlobalLogging(false);
	// server/zone/objects/scene/components/ZoneComponent.idl():  		Logger.setLogging(false);
	Logger::setLogging(false);
	// server/zone/objects/scene/components/ZoneComponent.idl():  		Logger.setLoggingName("ZoneComponent");
	Logger::setLoggingName("ZoneComponent");
	// server/zone/objects/scene/components/ZoneComponent.idl():  		notifiedSentObjects.setNoDuplicateInsertPlan();
	(&notifiedSentObjects)->setNoDuplicateInsertPlan();
	// server/zone/objects/scene/components/ZoneComponent.idl():  		activeAreas.setNoDuplicateInsertPlan();
	(&activeAreas)->setNoDuplicateInsertPlan();
}

void ZoneComponentImplementation::notifyLoadFromDatabase() {
}

void ZoneComponentImplementation::notifyInsert(QuadTreeEntry* entry) {
}

void ZoneComponentImplementation::notifyDissapear(QuadTreeEntry* entry) {
}

bool ZoneComponentImplementation::hasNotifiedSentObject(SceneObject* object) {
	// server/zone/objects/scene/components/ZoneComponent.idl():  		return notifiedSentObjects.contains(object);
	return (&notifiedSentObjects)->contains(object);
}

int ZoneComponentImplementation::addNotifiedSentObject(SceneObject* object) {
	// server/zone/objects/scene/components/ZoneComponent.idl():  		return notifiedSentObjects.put(object);
	return (&notifiedSentObjects)->put(object);
}

void ZoneComponentImplementation::removeNotifiedSentObject(SceneObject* object) {
	// server/zone/objects/scene/components/ZoneComponent.idl():  		notifiedSentObjects.drop(object);
	(&notifiedSentObjects)->drop(object);
}

void ZoneComponentImplementation::addActiveArea(ActiveArea* area) {
	// server/zone/objects/scene/components/ZoneComponent.idl():  		activeAreas.put(area);
	(&activeAreas)->put(area);
}

void ZoneComponentImplementation::dropActiveArea(ActiveArea* area) {
	// server/zone/objects/scene/components/ZoneComponent.idl():  		activeAreas.drop(area);
	(&activeAreas)->drop(area);
}

bool ZoneComponentImplementation::hasActiveArea(ActiveArea* area) {
	// server/zone/objects/scene/components/ZoneComponent.idl():  		return activeAreas.contains(area);
	return (&activeAreas)->contains(area);
}

Vector<ManagedReference<ActiveArea* > >* ZoneComponentImplementation::getActiveAreas() {
	// server/zone/objects/scene/components/ZoneComponent.idl():  		return activeAreas;
	return (&activeAreas);
}

int ZoneComponentImplementation::getActiveAreasSize() {
	// server/zone/objects/scene/components/ZoneComponent.idl():  		return activeAreas.size();
	return (&activeAreas)->size();
}

ActiveArea* ZoneComponentImplementation::getActiveRegion() {
	// server/zone/objects/scene/components/ZoneComponent.idl():  		}
	for (	// server/zone/objects/scene/components/ZoneComponent.idl():  		for (int i = 0;
	int i = 0;
	i < (&activeAreas)->size();
i ++) {
	// server/zone/objects/scene/components/ZoneComponent.idl():  			ActiveArea region = activeAreas.get(i);
	ActiveArea* region = (&activeAreas)->get(i);
	// server/zone/objects/scene/components/ZoneComponent.idl():  		}
	if (region->isRegion()){
	// server/zone/objects/scene/components/ZoneComponent.idl():  				return region;
	return region;
}
}
	// server/zone/objects/scene/components/ZoneComponent.idl():  		return null;
	return NULL;
}

CityRegion* ZoneComponentImplementation::getCityRegion() {
	// server/zone/objects/scene/components/ZoneComponent.idl():  		return cityRegion;
	return cityRegion;
}

void ZoneComponentImplementation::setCityRegion(CityRegion* region) {
	// server/zone/objects/scene/components/ZoneComponent.idl():  		cityRegion = region;
	cityRegion = region;
}

Zone* ZoneComponentImplementation::getZone() {
	// server/zone/objects/scene/components/ZoneComponent.idl():  		return zone.get();
	return (&zone)->get();
}

/*
 *	ZoneComponentAdapter
 */

ZoneComponentAdapter::ZoneComponentAdapter(ZoneComponentImplementation* obj) : SceneObjectComponentAdapter(obj) {
}

Packet* ZoneComponentAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_INITIALIZE__SCENEOBJECT_:
		initialize((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		initializeTransientMembers();
		break;
	case RPC_NOTIFYLOADFROMDATABASE__:
		notifyLoadFromDatabase();
		break;
	case RPC_INSERTTOZONE__ZONE_:
		insertToZone((Zone*) inv->getObjectParameter());
		break;
	case RPC_INSERTTOBUILDING__BUILDINGOBJECT_:
		insertToBuilding((BuildingObject*) inv->getObjectParameter());
		break;
	case RPC_SWITCHZONE__STRING_FLOAT_FLOAT_FLOAT_LONG_:
		switchZone(inv->getAsciiParameter(_param0_switchZone__String_float_float_float_long_), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getUnsignedLongParameter());
		break;
	case RPC_TELEPORT__FLOAT_FLOAT_FLOAT_LONG_:
		teleport(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getUnsignedLongParameter());
		break;
	case RPC_REMOVEFROMZONE__:
		removeFromZone();
		break;
	case RPC_REMOVEFROMBUILDING__BUILDINGOBJECT_:
		removeFromBuilding((BuildingObject*) inv->getObjectParameter());
		break;
	case RPC_UPDATEZONE__BOOL_BOOL_:
		updateZone(inv->getBooleanParameter(), inv->getBooleanParameter());
		break;
	case RPC_UPDATEZONEWITHPARENT__SCENEOBJECT_BOOL_BOOL_:
		updateZoneWithParent((SceneObject*) inv->getObjectParameter(), inv->getBooleanParameter(), inv->getBooleanParameter());
		break;
	case RPC_HASNOTIFIEDSENTOBJECT__SCENEOBJECT_:
		resp->insertBoolean(hasNotifiedSentObject((SceneObject*) inv->getObjectParameter()));
		break;
	case RPC_ADDNOTIFIEDSENTOBJECT__SCENEOBJECT_:
		resp->insertSignedInt(addNotifiedSentObject((SceneObject*) inv->getObjectParameter()));
		break;
	case RPC_REMOVENOTIFIEDSENTOBJECT__SCENEOBJECT_:
		removeNotifiedSentObject((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_ADDACTIVEAREA__ACTIVEAREA_:
		addActiveArea((ActiveArea*) inv->getObjectParameter());
		break;
	case RPC_DROPACTIVEAREA__ACTIVEAREA_:
		dropActiveArea((ActiveArea*) inv->getObjectParameter());
		break;
	case RPC_HASACTIVEAREA__ACTIVEAREA_:
		resp->insertBoolean(hasActiveArea((ActiveArea*) inv->getObjectParameter()));
		break;
	case RPC_GETACTIVEAREASSIZE__:
		resp->insertSignedInt(getActiveAreasSize());
		break;
	case RPC_GETACTIVEREGION__:
		resp->insertLong(getActiveRegion()->_getObjectID());
		break;
	case RPC_GETCITYREGION__:
		resp->insertLong(getCityRegion()->_getObjectID());
		break;
	case RPC_SETCITYREGION__CITYREGION_:
		setCityRegion((CityRegion*) inv->getObjectParameter());
		break;
	case RPC_GETZONE__:
		resp->insertLong(getZone()->_getObjectID());
		break;
	case RPC_SETZONE__ZONE_:
		setZone((Zone*) inv->getObjectParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void ZoneComponentAdapter::initialize(SceneObject* obj) {
	((ZoneComponentImplementation*) impl)->initialize(obj);
}

void ZoneComponentAdapter::initializeTransientMembers() {
	((ZoneComponentImplementation*) impl)->initializeTransientMembers();
}

void ZoneComponentAdapter::notifyLoadFromDatabase() {
	((ZoneComponentImplementation*) impl)->notifyLoadFromDatabase();
}

void ZoneComponentAdapter::insertToZone(Zone* zone) {
	((ZoneComponentImplementation*) impl)->insertToZone(zone);
}

void ZoneComponentAdapter::insertToBuilding(BuildingObject* building) {
	((ZoneComponentImplementation*) impl)->insertToBuilding(building);
}

void ZoneComponentAdapter::switchZone(const String& newTerrainName, float newPostionX, float newPositionZ, float newPositionY, unsigned long long parentID) {
	((ZoneComponentImplementation*) impl)->switchZone(newTerrainName, newPostionX, newPositionZ, newPositionY, parentID);
}

void ZoneComponentAdapter::teleport(float newPositionX, float newPositionZ, float newPositionY, unsigned long long parentID) {
	((ZoneComponentImplementation*) impl)->teleport(newPositionX, newPositionZ, newPositionY, parentID);
}

void ZoneComponentAdapter::removeFromZone() {
	((ZoneComponentImplementation*) impl)->removeFromZone();
}

void ZoneComponentAdapter::removeFromBuilding(BuildingObject* building) {
	((ZoneComponentImplementation*) impl)->removeFromBuilding(building);
}

void ZoneComponentAdapter::updateZone(bool lightUpdate, bool sendPackets) {
	((ZoneComponentImplementation*) impl)->updateZone(lightUpdate, sendPackets);
}

void ZoneComponentAdapter::updateZoneWithParent(SceneObject* newParent, bool lightUpdate, bool sendPackets) {
	((ZoneComponentImplementation*) impl)->updateZoneWithParent(newParent, lightUpdate, sendPackets);
}

bool ZoneComponentAdapter::hasNotifiedSentObject(SceneObject* object) {
	return ((ZoneComponentImplementation*) impl)->hasNotifiedSentObject(object);
}

int ZoneComponentAdapter::addNotifiedSentObject(SceneObject* object) {
	return ((ZoneComponentImplementation*) impl)->addNotifiedSentObject(object);
}

void ZoneComponentAdapter::removeNotifiedSentObject(SceneObject* object) {
	((ZoneComponentImplementation*) impl)->removeNotifiedSentObject(object);
}

void ZoneComponentAdapter::addActiveArea(ActiveArea* area) {
	((ZoneComponentImplementation*) impl)->addActiveArea(area);
}

void ZoneComponentAdapter::dropActiveArea(ActiveArea* area) {
	((ZoneComponentImplementation*) impl)->dropActiveArea(area);
}

bool ZoneComponentAdapter::hasActiveArea(ActiveArea* area) {
	return ((ZoneComponentImplementation*) impl)->hasActiveArea(area);
}

int ZoneComponentAdapter::getActiveAreasSize() {
	return ((ZoneComponentImplementation*) impl)->getActiveAreasSize();
}

ActiveArea* ZoneComponentAdapter::getActiveRegion() {
	return ((ZoneComponentImplementation*) impl)->getActiveRegion();
}

CityRegion* ZoneComponentAdapter::getCityRegion() {
	return ((ZoneComponentImplementation*) impl)->getCityRegion();
}

void ZoneComponentAdapter::setCityRegion(CityRegion* region) {
	((ZoneComponentImplementation*) impl)->setCityRegion(region);
}

Zone* ZoneComponentAdapter::getZone() {
	return ((ZoneComponentImplementation*) impl)->getZone();
}

void ZoneComponentAdapter::setZone(Zone* zon) {
	((ZoneComponentImplementation*) impl)->setZone(zon);
}

/*
 *	ZoneComponentHelper
 */

ZoneComponentHelper* ZoneComponentHelper::staticInitializer = ZoneComponentHelper::instance();

ZoneComponentHelper::ZoneComponentHelper() {
	className = "ZoneComponent";

	Core::getObjectBroker()->registerClass(className, this);
}

void ZoneComponentHelper::finalizeHelper() {
	ZoneComponentHelper::finalize();
}

DistributedObject* ZoneComponentHelper::instantiateObject() {
	return new ZoneComponent(DummyConstructorParameter::instance());
}

DistributedObjectServant* ZoneComponentHelper::instantiateServant() {
	return new ZoneComponentImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ZoneComponentHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ZoneComponentAdapter((ZoneComponentImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

