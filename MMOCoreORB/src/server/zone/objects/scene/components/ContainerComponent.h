/*
 *	server/zone/objects/scene/components/ContainerComponent.h generated by engine3 IDL compiler 0.60
 */

#ifndef CONTAINERCOMPONENT_H_
#define CONTAINERCOMPONENT_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

#include "engine/core/ManagedObject.h"

#include "server/zone/objects/scene/components/SceneObjectComponent.h"

#include "system/util/Vector.h"

#include "system/util/VectorMap.h"

namespace server {
namespace zone {
namespace objects {
namespace scene {
namespace components {

class ContainerComponent : public SceneObjectComponent {
public:
	ContainerComponent();

	void initialize(SceneObject* obj);

	void initializeTransientMembers();

	void notifyLoadFromDatabase();

	bool addObject(SceneObject* object, int containmentType, bool notifyClient = false);

	bool removeObject(SceneObject* object, bool notifyClient = false);

	int canAddObject(SceneObject* object, int containmentType, String& errorDescription);

	void getContainmentObjects(VectorMap<String, ManagedReference<SceneObject* > >& objects);

	SceneObject* getSlottedObject(const String& slot);

	SceneObject* getSlottedObject(int idx);

	void dropSlottedObject(const String& arrengementDescriptor);

	void removeSlottedObject(int index);

	int getContainerObjectsSize();

	int getSlottedObjectsSize();

	bool hasFullContainerObjects();

	int getContainerVolumeLimit();

	SceneObject* getContainerObject(int idx);

	VectorMap<unsigned long long, ManagedReference<SceneObject* > >* getContainerObjects();

	bool hasObjectInContainer(unsigned long long objectID);

	bool hasObjectInSlottedContainer(SceneObject* object);

	SceneObject* getContainerObject(unsigned long long objectID);

	void removeAllContainerObjects();

	void putInContainer(SceneObject* obj, unsigned long long key);

	void removeFromContainerObjects(int index);

	void setContainerVolumeLimit(int lim);

	void setContainerType(int type);

	unsigned int getContainerType();

	DistributedObjectServant* _getImplementation();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	ContainerComponent(DummyConstructorParameter* param);

	virtual ~ContainerComponent();

	friend class ContainerComponentHelper;
};

} // namespace components
} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene::components;

namespace server {
namespace zone {
namespace objects {
namespace scene {
namespace components {

class ContainerComponentImplementation : public SceneObjectComponentImplementation {
protected:
	VectorMap<String, ManagedReference<SceneObject* > > slottedObjects;

	VectorMap<unsigned long long, ManagedReference<SceneObject* > > containerObjects;

	unsigned int containerType;

	unsigned int containerVolumeLimit;

public:
	ContainerComponentImplementation();

	ContainerComponentImplementation(DummyConstructorParameter* param);

	void initialize(SceneObject* obj);

	void initializeTransientMembers();

	virtual void notifyLoadFromDatabase();

	virtual bool addObject(SceneObject* object, int containmentType, bool notifyClient = false);

	virtual bool removeObject(SceneObject* object, bool notifyClient = false);

	virtual int canAddObject(SceneObject* object, int containmentType, String& errorDescription);

	void getContainmentObjects(VectorMap<String, ManagedReference<SceneObject* > >& objects);

	SceneObject* getSlottedObject(const String& slot);

	SceneObject* getSlottedObject(int idx);

	void dropSlottedObject(const String& arrengementDescriptor);

	void removeSlottedObject(int index);

	int getContainerObjectsSize();

	int getSlottedObjectsSize();

	bool hasFullContainerObjects();

	int getContainerVolumeLimit();

	SceneObject* getContainerObject(int idx);

	VectorMap<unsigned long long, ManagedReference<SceneObject* > >* getContainerObjects();

	bool hasObjectInContainer(unsigned long long objectID);

	bool hasObjectInSlottedContainer(SceneObject* object);

	SceneObject* getContainerObject(unsigned long long objectID);

	void removeAllContainerObjects();

	void putInContainer(SceneObject* obj, unsigned long long key);

	void removeFromContainerObjects(int index);

	void setContainerVolumeLimit(int lim);

	void setContainerType(int type);

	unsigned int getContainerType();

	ContainerComponent* _this;

	operator const ContainerComponent*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~ContainerComponentImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const String& name);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class ContainerComponent;
};

class ContainerComponentAdapter : public SceneObjectComponentAdapter {
public:
	ContainerComponentAdapter(ContainerComponentImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initialize(SceneObject* obj);

	void initializeTransientMembers();

	void notifyLoadFromDatabase();

	bool addObject(SceneObject* object, int containmentType, bool notifyClient);

	bool removeObject(SceneObject* object, bool notifyClient);

	int canAddObject(SceneObject* object, int containmentType, String& errorDescription);

	SceneObject* getSlottedObject(const String& slot);

	SceneObject* getSlottedObject(int idx);

	void dropSlottedObject(const String& arrengementDescriptor);

	void removeSlottedObject(int index);

	int getContainerObjectsSize();

	int getSlottedObjectsSize();

	bool hasFullContainerObjects();

	int getContainerVolumeLimit();

	SceneObject* getContainerObject(int idx);

	bool hasObjectInContainer(unsigned long long objectID);

	bool hasObjectInSlottedContainer(SceneObject* object);

	SceneObject* getContainerObject(unsigned long long objectID);

	void removeAllContainerObjects();

	void putInContainer(SceneObject* obj, unsigned long long key);

	void removeFromContainerObjects(int index);

	void setContainerVolumeLimit(int lim);

	void setContainerType(int type);

	unsigned int getContainerType();

protected:
	String _param2_canAddObject__SceneObject_int_String_;
	String _param0_getSlottedObject__String_;
	String _param0_dropSlottedObject__String_;
};

class ContainerComponentHelper : public DistributedObjectClassHelper, public Singleton<ContainerComponentHelper> {
	static ContainerComponentHelper* staticInitializer;

public:
	ContainerComponentHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<ContainerComponentHelper>;
};

} // namespace components
} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene::components;

#endif /*CONTAINERCOMPONENT_H_*/
