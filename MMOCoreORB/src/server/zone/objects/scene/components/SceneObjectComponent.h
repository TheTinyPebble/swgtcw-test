/*
 *	server/zone/objects/scene/components/SceneObjectComponent.h generated by engine3 IDL compiler 0.60
 */

#ifndef SCENEOBJECTCOMPONENT_H_
#define SCENEOBJECTCOMPONENT_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

#include "engine/core/ManagedObject.h"

namespace server {
namespace zone {
namespace objects {
namespace scene {
namespace components {

class SceneObjectComponent : public ManagedObject {
public:
	SceneObjectComponent();

	void initialize(SceneObject* obj);

	SceneObject* getSceneObject();

	void notifyLoadFromDatabase();

	DistributedObjectServant* _getImplementation();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	SceneObjectComponent(DummyConstructorParameter* param);

	virtual ~SceneObjectComponent();

	friend class SceneObjectComponentHelper;
};

} // namespace components
} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene::components;

namespace server {
namespace zone {
namespace objects {
namespace scene {
namespace components {

class SceneObjectComponentImplementation : public ManagedObjectImplementation {
protected:
	ManagedWeakReference<SceneObject* > sceneObject;

public:
	SceneObjectComponentImplementation();

	SceneObjectComponentImplementation(DummyConstructorParameter* param);

	void initialize(SceneObject* obj);

	SceneObject* getSceneObject();

	virtual void notifyLoadFromDatabase();

	SceneObjectComponent* _this;

	operator const SceneObjectComponent*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~SceneObjectComponentImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const String& name);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class SceneObjectComponent;
};

class SceneObjectComponentAdapter : public ManagedObjectAdapter {
public:
	SceneObjectComponentAdapter(SceneObjectComponentImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initialize(SceneObject* obj);

	SceneObject* getSceneObject();

	void notifyLoadFromDatabase();

};

class SceneObjectComponentHelper : public DistributedObjectClassHelper, public Singleton<SceneObjectComponentHelper> {
	static SceneObjectComponentHelper* staticInitializer;

public:
	SceneObjectComponentHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<SceneObjectComponentHelper>;
};

} // namespace components
} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene::components;

#endif /*SCENEOBJECTCOMPONENT_H_*/
