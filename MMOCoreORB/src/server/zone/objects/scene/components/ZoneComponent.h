/*
 *	server/zone/objects/scene/components/ZoneComponent.h generated by engine3 IDL compiler 0.60
 */

#ifndef ZONECOMPONENT_H_
#define ZONECOMPONENT_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {

class Zone;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

namespace server {
namespace zone {
namespace objects {
namespace building {

class BuildingObject;

} // namespace building
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::building;

namespace server {
namespace zone {
namespace objects {
namespace area {

class ActiveArea;

} // namespace area
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::area;

namespace server {
namespace zone {
namespace objects {
namespace region {

class CityRegion;

} // namespace region
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::region;

#include "server/zone/ZoneReference.h"

#include "engine/core/ManagedObject.h"

#include "server/zone/objects/scene/components/SceneObjectComponent.h"

#include "engine/log/Logger.h"

#include "system/util/SortedVector.h"

#include "system/util/Vector.h"

#include "engine/util/u3d/QuadTreeEntry.h"

namespace server {
namespace zone {
namespace objects {
namespace scene {
namespace components {

class ZoneComponent : public SceneObjectComponent {
public:
	ZoneComponent();

	void initialize(SceneObject* obj);

	void initializeTransientMembers();

	void notifyLoadFromDatabase();

	void notifyInsert(QuadTreeEntry* entry);

	void notifyDissapear(QuadTreeEntry* entry);

	void insertToZone(Zone* zone);

	void insertToBuilding(BuildingObject* building);

	void switchZone(const String& newTerrainName, float newPostionX, float newPositionZ, float newPositionY, unsigned long long parentID = 0);

	void teleport(float newPositionX, float newPositionZ, float newPositionY, unsigned long long parentID = 0);

	void removeFromZone();

	void removeFromBuilding(BuildingObject* building);

	void updateZone(bool lightUpdate, bool sendPackets = true);

	void updateZoneWithParent(SceneObject* newParent, bool lightUpdate, bool sendPackets = true);

	bool hasNotifiedSentObject(SceneObject* object);

	int addNotifiedSentObject(SceneObject* object);

	void removeNotifiedSentObject(SceneObject* object);

	void addActiveArea(ActiveArea* area);

	void dropActiveArea(ActiveArea* area);

	bool hasActiveArea(ActiveArea* area);

	Vector<ManagedReference<ActiveArea* > >* getActiveAreas();

	int getActiveAreasSize();

	ActiveArea* getActiveRegion();

	CityRegion* getCityRegion();

	void setCityRegion(CityRegion* region);

	Zone* getZone();

	void setZone(Zone* zon);

	DistributedObjectServant* _getImplementation();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	ZoneComponent(DummyConstructorParameter* param);

	virtual ~ZoneComponent();

	friend class ZoneComponentHelper;
};

} // namespace components
} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene::components;

namespace server {
namespace zone {
namespace objects {
namespace scene {
namespace components {

class ZoneComponentImplementation : public SceneObjectComponentImplementation, public Logger {
protected:
	ZoneReference zone;

	ManagedWeakReference<CityRegion* > cityRegion;

	SortedVector<ManagedReference<ActiveArea* > > activeAreas;

	SortedVector<ManagedReference<SceneObject* > > notifiedSentObjects;

public:
	ZoneComponentImplementation();

	ZoneComponentImplementation(DummyConstructorParameter* param);

	void initialize(SceneObject* obj);

	void initializeTransientMembers();

	virtual void notifyLoadFromDatabase();

	virtual void notifyInsert(QuadTreeEntry* entry);

	virtual void notifyDissapear(QuadTreeEntry* entry);

	virtual void insertToZone(Zone* zone);

	virtual void insertToBuilding(BuildingObject* building);

	virtual void switchZone(const String& newTerrainName, float newPostionX, float newPositionZ, float newPositionY, unsigned long long parentID = 0);

	virtual void teleport(float newPositionX, float newPositionZ, float newPositionY, unsigned long long parentID = 0);

	virtual void removeFromZone();

	virtual void removeFromBuilding(BuildingObject* building);

	virtual void updateZone(bool lightUpdate, bool sendPackets = true);

	virtual void updateZoneWithParent(SceneObject* newParent, bool lightUpdate, bool sendPackets = true);

	bool hasNotifiedSentObject(SceneObject* object);

	int addNotifiedSentObject(SceneObject* object);

	void removeNotifiedSentObject(SceneObject* object);

	void addActiveArea(ActiveArea* area);

	void dropActiveArea(ActiveArea* area);

	bool hasActiveArea(ActiveArea* area);

	Vector<ManagedReference<ActiveArea* > >* getActiveAreas();

	int getActiveAreasSize();

	ActiveArea* getActiveRegion();

	CityRegion* getCityRegion();

	void setCityRegion(CityRegion* region);

	Zone* getZone();

	void setZone(Zone* zon);

	ZoneComponent* _this;

	operator const ZoneComponent*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~ZoneComponentImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const String& name);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class ZoneComponent;
};

class ZoneComponentAdapter : public SceneObjectComponentAdapter {
public:
	ZoneComponentAdapter(ZoneComponentImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initialize(SceneObject* obj);

	void initializeTransientMembers();

	void notifyLoadFromDatabase();

	void insertToZone(Zone* zone);

	void insertToBuilding(BuildingObject* building);

	void switchZone(const String& newTerrainName, float newPostionX, float newPositionZ, float newPositionY, unsigned long long parentID);

	void teleport(float newPositionX, float newPositionZ, float newPositionY, unsigned long long parentID);

	void removeFromZone();

	void removeFromBuilding(BuildingObject* building);

	void updateZone(bool lightUpdate, bool sendPackets);

	void updateZoneWithParent(SceneObject* newParent, bool lightUpdate, bool sendPackets);

	bool hasNotifiedSentObject(SceneObject* object);

	int addNotifiedSentObject(SceneObject* object);

	void removeNotifiedSentObject(SceneObject* object);

	void addActiveArea(ActiveArea* area);

	void dropActiveArea(ActiveArea* area);

	bool hasActiveArea(ActiveArea* area);

	int getActiveAreasSize();

	ActiveArea* getActiveRegion();

	CityRegion* getCityRegion();

	void setCityRegion(CityRegion* region);

	Zone* getZone();

	void setZone(Zone* zon);

protected:
	String _param0_switchZone__String_float_float_float_long_;
};

class ZoneComponentHelper : public DistributedObjectClassHelper, public Singleton<ZoneComponentHelper> {
	static ZoneComponentHelper* staticInitializer;

public:
	ZoneComponentHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<ZoneComponentHelper>;
};

} // namespace components
} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene::components;

#endif /*ZONECOMPONENT_H_*/
