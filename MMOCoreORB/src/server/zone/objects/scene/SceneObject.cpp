/*
 *	server/zone/objects/scene/SceneObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "SceneObject.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

#include "server/zone/ZoneProcessServerImplementation.h"

#include "server/zone/ZoneClientSession.h"

#include "server/zone/Zone.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

/*
 *	SceneObjectStub
 */

SceneObject::SceneObject() : ManagedObject(DummyConstructorParameter::instance()) {
	_impl = new SceneObjectImplementation();
	_impl->_setStub(this);
}

SceneObject::SceneObject(DummyConstructorParameter* param) : ManagedObject(param) {
}

SceneObject::~SceneObject() {
}


void SceneObject::loadTemplateData(LuaObject* templateData) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((SceneObjectImplementation*) _impl)->loadTemplateData(templateData);
}

void SceneObject::initializeTransientMembers() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->initializeTransientMembers();
}

void SceneObject::info(const String& msg, bool forced) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addAsciiParameter(msg);
		method.addBooleanParameter(forced);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->info(msg, forced);
}

void SceneObject::error(const String& msg) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addAsciiParameter(msg);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->error(msg);
}

int SceneObject::inRangeObjectCount() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return method.executeWithSignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->inRangeObjectCount();
}

QuadTreeEntry* SceneObject::getInRangeObject(int index) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((SceneObjectImplementation*) _impl)->getInRangeObject(index);
}

bool SceneObject::isInRange(SceneObject* obj, float range) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(obj);
		method.addFloatParameter(range);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isInRange(obj, range);
}

bool SceneObject::isInRange(QuadTreeEntry* obj, float range) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((SceneObjectImplementation*) _impl)->isInRange(obj, range);
}

bool SceneObject::addObject(SceneObject* object, int containmentType, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addObjectParameter(object);
		method.addSignedIntParameter(containmentType);
		method.addBooleanParameter(notifyClient);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->addObject(object, containmentType, notifyClient);
}

bool SceneObject::removeObject(SceneObject* object, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addObjectParameter(object);
		method.addBooleanParameter(notifyClient);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->removeObject(object, notifyClient);
}

int SceneObject::canAddObject(SceneObject* object) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addObjectParameter(object);

		return method.executeWithSignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->canAddObject(object);
}

void SceneObject::updateToDatabase() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->updateToDatabase();
}

void SceneObject::updateToDatabaseWithoutChildren() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->updateToDatabaseWithoutChildren();
}

void SceneObject::updateToDatabaseAllObjects(bool startTask) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addBooleanParameter(startTask);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->updateToDatabaseAllObjects(startTask);
}

void SceneObject::destroyObjectFromDatabase(bool destroyContainedObjects) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addBooleanParameter(destroyContainedObjects);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->destroyObjectFromDatabase(destroyContainedObjects);
}

int SceneObject::canBeDestroyed(PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->canBeDestroyed(player);
}

void SceneObject::create(ZoneClientSession* client) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addObjectParameter(client);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->create(client);
}

void SceneObject::destroy(ZoneClientSession* client) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addObjectParameter(client);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->destroy(client);
}

void SceneObject::close(ZoneClientSession* client) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addObjectParameter(client);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->close(client);
}

void SceneObject::link(ZoneClientSession* client, unsigned int containmentType) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);
		method.addObjectParameter(client);
		method.addUnsignedIntParameter(containmentType);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->link(client, containmentType);
}

BaseMessage* SceneObject::link(unsigned long long objectID, unsigned int containmentType) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);
		method.addUnsignedLongParameter(objectID);
		method.addUnsignedIntParameter(containmentType);

		return (BaseMessage*) method.executeWithObjectReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->link(objectID, containmentType);
}

void SceneObject::sendTo(SceneObject* player, bool doClose) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);
		method.addObjectParameter(player);
		method.addBooleanParameter(doClose);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->sendTo(player, doClose);
}

void SceneObject::sendDestroyTo(SceneObject* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->sendDestroyTo(player);
}

void SceneObject::sendBaselinesTo(SceneObject* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->sendBaselinesTo(player);
}

void SceneObject::sendContainerObjectsTo(SceneObject* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->sendContainerObjectsTo(player);
}

void SceneObject::sendSlottedObjectsTo(SceneObject* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->sendSlottedObjectsTo(player);
}

void SceneObject::sendToOwner(bool doClose) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);
		method.addBooleanParameter(doClose);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->sendToOwner(doClose);
}

void SceneObject::sendAttributeListTo(PlayerCreature* object) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->sendAttributeListTo(object);
}

void SceneObject::fillAttributeList(AttributeListMessage* msg, PlayerCreature* object) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((SceneObjectImplementation*) _impl)->fillAttributeList(msg, object);
}

void SceneObject::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((SceneObjectImplementation*) _impl)->fillObjectMenuResponse(menuResponse, player);
}

void SceneObject::openContainerTo(PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->openContainerTo(player);
}

void SceneObject::insertToZone(Zone* zone) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);
		method.addObjectParameter(zone);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->insertToZone(zone);
}

void SceneObject::insertToBuilding(BuildingObject* building) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);
		method.addObjectParameter(building);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->insertToBuilding(building);
}

void SceneObject::switchZone(int newZoneID, float newPostionX, float newPositionZ, float newPositionY) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);
		method.addSignedIntParameter(newZoneID);
		method.addFloatParameter(newPostionX);
		method.addFloatParameter(newPositionZ);
		method.addFloatParameter(newPositionY);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->switchZone(newZoneID, newPostionX, newPositionZ, newPositionY);
}

void SceneObject::removeFromZone() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->removeFromZone();
}

void SceneObject::removeFromBuilding(BuildingObject* building) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 36);
		method.addObjectParameter(building);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->removeFromBuilding(building);
}

void SceneObject::updateZone(bool lightUpdate) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 37);
		method.addBooleanParameter(lightUpdate);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->updateZone(lightUpdate);
}

void SceneObject::updateZoneWithParent(SceneObject* newParent, bool lightUpdate) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 38);
		method.addObjectParameter(newParent);
		method.addBooleanParameter(lightUpdate);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->updateZoneWithParent(newParent, lightUpdate);
}

void SceneObject::broadcastMessage(BasePacket* message, bool sendSelf) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 39);
		method.addObjectParameter(message);
		method.addBooleanParameter(sendSelf);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->broadcastMessage(message, sendSelf);
}

void SceneObject::broadcastObject(SceneObject* object, bool sendSelf) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 40);
		method.addObjectParameter(object);
		method.addBooleanParameter(sendSelf);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->broadcastObject(object, sendSelf);
}

void SceneObject::broadcastMessages(Vector<BasePacket*>* messages, bool sendSelf) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((SceneObjectImplementation*) _impl)->broadcastMessages(messages, sendSelf);
}

void SceneObject::sendMessage(BasePacket* msg) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 41);
		method.addObjectParameter(msg);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->sendMessage(msg);
}

int SceneObject::compareTo(SceneObject* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 42);
		method.addObjectParameter(obj);

		return method.executeWithSignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->compareTo(obj);
}

void SceneObject::getContainmentObjects(VectorMap<String, ManagedReference<SceneObject* > >& objects) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((SceneObjectImplementation*) _impl)->getContainmentObjects(objects);
}

unsigned long long SceneObject::getParentID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 43);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getParentID();
}

int SceneObject::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 44);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->handleObjectMenuSelect(player, selectedID);
}

float SceneObject::getDistanceTo(SceneObject* object) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 45);
		method.addObjectParameter(object);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getDistanceTo(object);
}

void SceneObject::updateVehiclePosition() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 46);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->updateVehiclePosition();
}

int SceneObject::onPositionUpdate() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 47);

		return method.executeWithSignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->onPositionUpdate();
}

bool SceneObject::hasNotifiedObject(SceneObject* object) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 48);
		method.addObjectParameter(object);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->hasNotifiedObject(object);
}

void SceneObject::addNotifiedObject(SceneObject* object) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 49);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->addNotifiedObject(object);
}

void SceneObject::removeNotifiedObject(SceneObject* object) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 50);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->removeNotifiedObject(object);
}

unsigned long long SceneObject::getObjectID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 51);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getObjectID();
}

float SceneObject::getPositionX() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 52);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getPositionX();
}

float SceneObject::getPositionZ() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 53);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getPositionZ();
}

float SceneObject::getPositionY() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 54);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getPositionY();
}

float SceneObject::getDirectionX() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 55);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getDirectionX();
}

float SceneObject::getDirectionZ() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 56);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getDirectionZ();
}

float SceneObject::getDirectionY() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 57);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getDirectionY();
}

float SceneObject::getDirectionW() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 58);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getDirectionW();
}

unsigned int SceneObject::getClientObjectCRC() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 59);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getClientObjectCRC();
}

unsigned int SceneObject::getServerObjectCRC() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 60);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getServerObjectCRC();
}

bool SceneObject::isWaypointObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 61);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isWaypointObject();
}

StringId* SceneObject::getObjectName() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((SceneObjectImplementation*) _impl)->getObjectName();
}

StringId* SceneObject::getDetailedDescription() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((SceneObjectImplementation*) _impl)->getDetailedDescription();
}

int SceneObject::getArrangementDescriptorSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 62);

		return method.executeWithSignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getArrangementDescriptorSize();
}

String SceneObject::getArrangementDescriptor(int idx) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 63);
		method.addSignedIntParameter(idx);

		method.executeWithAsciiReturn(_return_getArrangementDescriptor);
		return _return_getArrangementDescriptor;
	} else
		return ((SceneObjectImplementation*) _impl)->getArrangementDescriptor(idx);
}

String SceneObject::getSlotDescriptor(int idx) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 64);
		method.addSignedIntParameter(idx);

		method.executeWithAsciiReturn(_return_getSlotDescriptor);
		return _return_getSlotDescriptor;
	} else
		return ((SceneObjectImplementation*) _impl)->getSlotDescriptor(idx);
}

SceneObject* SceneObject::getSlottedObject(const String& slot) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 65);
		method.addAsciiParameter(slot);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getSlottedObject(slot);
}

int SceneObject::getSlotDescriptorSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 66);

		return method.executeWithSignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getSlotDescriptorSize();
}

int SceneObject::getContainerObjectsSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 67);

		return method.executeWithSignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getContainerObjectsSize();
}

bool SceneObject::hasFullContainerObjects() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 68);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->hasFullContainerObjects();
}

SceneObject* SceneObject::getContainerObject(int idx) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 69);
		method.addSignedIntParameter(idx);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getContainerObject(idx);
}

ZoneClientSession* SceneObject::getClient() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 70);

		return (ZoneClientSession*) method.executeWithObjectReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getClient();
}

unsigned int SceneObject::getGameObjectType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 71);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getGameObjectType();
}

unsigned int SceneObject::getContainmentType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 72);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getContainmentType();
}

Zone* SceneObject::getZone() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 73);

		return (Zone*) method.executeWithObjectReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getZone();
}

float SceneObject::getDirectionAngle() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 74);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getDirectionAngle();
}

float SceneObject::getSpecialDirectionAngle() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 75);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getSpecialDirectionAngle();
}

unsigned int SceneObject::getMovementCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 76);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getMovementCounter();
}

SceneObject* SceneObject::getParent() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 77);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getParent();
}

ZoneServer* SceneObject::getZoneServer() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 78);

		return (ZoneServer*) method.executeWithObjectReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getZoneServer();
}

SceneObject* SceneObject::getGrandParent() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 79);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getGrandParent();
}

bool SceneObject::isASubChildOf(SceneObject* object) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 80);
		method.addObjectParameter(object);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isASubChildOf(object);
}

UnicodeString SceneObject::getCustomObjectName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 81);

		method.executeWithUnicodeReturn(_return_getCustomObjectName);
		return _return_getCustomObjectName;
	} else
		return ((SceneObjectImplementation*) _impl)->getCustomObjectName();
}

bool SceneObject::isInQuadTree() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 82);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isInQuadTree();
}

String SceneObject::getLoggingName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 83);

		method.executeWithAsciiReturn(_return_getLoggingName);
		return _return_getLoggingName;
	} else
		return ((SceneObjectImplementation*) _impl)->getLoggingName();
}

bool SceneObject::isPlayerCreature() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 84);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isPlayerCreature();
}

bool SceneObject::isCreatureObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 85);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isCreatureObject();
}

bool SceneObject::isVehicleObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 86);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isVehicleObject();
}

bool SceneObject::isBuildingObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 87);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isBuildingObject();
}

bool SceneObject::isWeaponObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 88);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isWeaponObject();
}

bool SceneObject::isWearableObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 89);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isWearableObject();
}

bool SceneObject::isArmorObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 90);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isArmorObject();
}

bool SceneObject::isCellObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 91);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isCellObject();
}

bool SceneObject::isTangibleObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 92);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isTangibleObject();
}

bool SceneObject::isInstrument() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 93);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isInstrument();
}

bool SceneObject::isBazaarTerminal() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 94);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isBazaarTerminal();
}

void SceneObject::setPosition(float x, float z, float y) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 95);
		method.addFloatParameter(x);
		method.addFloatParameter(z);
		method.addFloatParameter(y);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setPosition(x, z, y);
}

void SceneObject::initializePosition(float x, float z, float y) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 96);
		method.addFloatParameter(x);
		method.addFloatParameter(z);
		method.addFloatParameter(y);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->initializePosition(x, z, y);
}

void SceneObject::setGameObjectType(unsigned int type) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 97);
		method.addUnsignedIntParameter(type);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setGameObjectType(type);
}

void SceneObject::setClientObjectCRC(unsigned int objCRC) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 98);
		method.addUnsignedIntParameter(objCRC);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setClientObjectCRC(objCRC);
}

void SceneObject::setServerObjectCRC(unsigned int objCRC) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 99);
		method.addUnsignedIntParameter(objCRC);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setServerObjectCRC(objCRC);
}

void SceneObject::setParent(SceneObject* par) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 100);
		method.addObjectParameter(par);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setParent(par);
}

void SceneObject::setZoneProcessServer(ZoneProcessServerImplementation* srv) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((SceneObjectImplementation*) _impl)->setZoneProcessServer(srv);
}

void SceneObject::setObjectName(const UnicodeString& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 101);
		method.addUnicodeParameter(name);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setObjectName(name);
}

void SceneObject::setZone(Zone* zon) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 102);
		method.addObjectParameter(zon);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setZone(zon);
}

void SceneObject::setDirection(float fw, float fx, float fy, float fz) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 103);
		method.addFloatParameter(fw);
		method.addFloatParameter(fx);
		method.addFloatParameter(fy);
		method.addFloatParameter(fz);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setDirection(fw, fx, fy, fz);
}

void SceneObject::setMovementCounter(unsigned int count) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 104);
		method.addUnsignedIntParameter(count);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setMovementCounter(count);
}

void SceneObject::incrementMovementCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 105);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->incrementMovementCounter();
}

void SceneObject::setContainmentType(unsigned int type) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 106);
		method.addUnsignedIntParameter(type);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setContainmentType(type);
}

void SceneObject::setLoggingName(const String& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 107);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setLoggingName(name);
}

void SceneObject::setStaticObject(bool val) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 108);
		method.addBooleanParameter(val);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setStaticObject(val);
}

VectorMap<unsigned long long, ManagedReference<SceneObject* > >* SceneObject::getContainerObjects() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((SceneObjectImplementation*) _impl)->getContainerObjects();
}

bool SceneObject::hasObjectInContainer(unsigned long long objectID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 109);
		method.addUnsignedLongParameter(objectID);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->hasObjectInContainer(objectID);
}

SceneObject* SceneObject::getContainerObject(unsigned long long objectID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 110);
		method.addUnsignedLongParameter(objectID);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getContainerObject(objectID);
}

bool SceneObject::isStaticObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 111);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isStaticObject();
}

bool SceneObject::isControlDevice() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 112);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isControlDevice();
}

/*
 *	SceneObjectImplementation
 */

SceneObjectImplementation::SceneObjectImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}

SceneObjectImplementation::~SceneObjectImplementation() {
	SceneObjectImplementation::finalize();
}


void SceneObjectImplementation::_initializeImplementation() {
	_setClassHelper(SceneObjectHelper::instance());

	_serializationHelperMethod();
}

void SceneObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (SceneObject*) stub;
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* SceneObjectImplementation::_getStub() {
	return _this;
}

SceneObjectImplementation::operator const SceneObject*() {
	return _this;
}

void SceneObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void SceneObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void SceneObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void SceneObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void SceneObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void SceneObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void SceneObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void SceneObjectImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("SceneObject");

	addSerializableVariable("zone", &zone);
	addSerializableVariable("parent", &parent);
	addSerializableVariable("slottedObjects", &slottedObjects);
	addSerializableVariable("containerObjects", &containerObjects);
	addSerializableVariable("serverObjectCRC", &serverObjectCRC);
	addSerializableVariable("clientObjectCRC", &clientObjectCRC);
	addSerializableVariable("direction", &direction);
	addSerializableVariable("positionX", &positionX);
	addSerializableVariable("positionZ", &positionZ);
	addSerializableVariable("positionY", &positionY);
	addSerializableVariable("arrangementDescriptors", &arrangementDescriptors);
	addSerializableVariable("slotDescriptors", &slotDescriptors);
	addSerializableVariable("objectName", &objectName);
	addSerializableVariable("detailedDescription", &detailedDescription);
	addSerializableVariable("notifiedObjects", &notifiedObjects);
	addSerializableVariable("staticObject", &staticObject);
	addSerializableVariable("containerType", &containerType);
	addSerializableVariable("containerVolumeLimit", &containerVolumeLimit);
	addSerializableVariable("gameObjectType", &gameObjectType);
	addSerializableVariable("containmentType", &containmentType);
}

SceneObjectImplementation::SceneObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/scene/SceneObject.idl(330):  		initializeTransientMembers();
	initializeTransientMembers();
}

void SceneObjectImplementation::finalize() {
	// server/zone/objects/scene/SceneObject.idl(334):  		Logger.info("deleting object from memory", true);
	Logger::info("deleting object from memory", true);
}

void SceneObjectImplementation::info(const String& msg, bool forced) {
	// server/zone/objects/scene/SceneObject.idl(362):  		Logger.info(msg, forced);
	Logger::info(msg, forced);
}

void SceneObjectImplementation::error(const String& msg) {
	// server/zone/objects/scene/SceneObject.idl(372):  		Logger.error(msg);
	Logger::error(msg);
}

int SceneObjectImplementation::inRangeObjectCount() {
	// server/zone/objects/scene/SceneObject.idl(382):  		return QuadTreeEntry.inRangeObjectCount();
	return QuadTreeEntry::inRangeObjectCount();
}

QuadTreeEntry* SceneObjectImplementation::getInRangeObject(int index) {
	// server/zone/objects/scene/SceneObject.idl(393):  		return QuadTreeEntry.getInRangeObject(index);
	return QuadTreeEntry::getInRangeObject(index);
}

bool SceneObjectImplementation::isInRange(SceneObject* obj, float range) {
	// server/zone/objects/scene/SceneObject.idl(405):  		return QuadTreeEntry.isInRange(obj.getPositionX(), obj.getPositionY(), range);
	return QuadTreeEntry::isInRange(obj->getPositionX(), obj->getPositionY(), range);
}

bool SceneObjectImplementation::isInRange(QuadTreeEntry* obj, float range) {
	// server/zone/objects/scene/SceneObject.idl(418):  		return QuadTreeEntry.isInRange(obj, range);
	return QuadTreeEntry::isInRange(obj, range);
}

int SceneObjectImplementation::canAddObject(SceneObject* object) {
	// server/zone/objects/scene/SceneObject.idl(450):  		int arrangementSize = object.getArrangementDescriptorSize();
	int arrangementSize = object->getArrangementDescriptorSize();
	// server/zone/objects/scene/SceneObject.idl(452):  
	for (	// server/zone/objects/scene/SceneObject.idl(452):  		for (int i = 0;
	int i = 0;
	i < arrangementSize;
 ++i) {
	// server/zone/objects/scene/SceneObject.idl(453):  			string childArrangement = object.getArrangementDescriptor(i);
	String childArrangement = object->getArrangementDescriptor(i);
	// server/zone/objects/scene/SceneObject.idl(455):  		}
	if ((&slottedObjects)->contains(childArrangement))	// server/zone/objects/scene/SceneObject.idl(456):  				return TransferErrorCode.SLOTOCCUPIED;
	return TransferErrorCode::SLOTOCCUPIED;
}
	// server/zone/objects/scene/SceneObject.idl(459):  		return 0;
	return 0;
}

int SceneObjectImplementation::canBeDestroyed(PlayerCreature* player) {
	// server/zone/objects/scene/SceneObject.idl(499):  		return 0;
	return 0;
}

void SceneObjectImplementation::sendBaselinesTo(SceneObject* player) {
}

void SceneObjectImplementation::sendToOwner(bool doClose) {
}

void SceneObjectImplementation::fillAttributeList(AttributeListMessage* msg, PlayerCreature* object) {
}

void SceneObjectImplementation::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player) {
}

int SceneObjectImplementation::compareTo(SceneObject* obj) {
	// server/zone/objects/scene/SceneObject.idl(737):  
	if (getObjectID() < obj->getObjectID())	// server/zone/objects/scene/SceneObject.idl(738):  			return 1;
	return 1;

	else 	// server/zone/objects/scene/SceneObject.idl(739):  
	if (getObjectID() > obj->getObjectID())	// server/zone/objects/scene/SceneObject.idl(740):  			return -1;
	return 1;

	else 	// server/zone/objects/scene/SceneObject.idl(742):  			return 0;
	return 0;
}

unsigned long long SceneObjectImplementation::getParentID() {
	// server/zone/objects/scene/SceneObject.idl(761):  
	if (parent != NULL){
	// server/zone/objects/scene/SceneObject.idl(762):  			return parent.getObjectID();
	return parent->getObjectID();
}

	else 	// server/zone/objects/scene/SceneObject.idl(764):  			return 0;
	return 0;
}

int SceneObjectImplementation::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	// server/zone/objects/scene/SceneObject.idl(776):  		return 0;
	return 0;
}

int SceneObjectImplementation::onPositionUpdate() {
	// server/zone/objects/scene/SceneObject.idl(787):  		return 0;
	return 0;
}

bool SceneObjectImplementation::hasNotifiedObject(SceneObject* object) {
	// server/zone/objects/scene/SceneObject.idl(791):  		return notifiedObjects.contains(object);
	return (&notifiedObjects)->contains(object);
}

void SceneObjectImplementation::addNotifiedObject(SceneObject* object) {
	// server/zone/objects/scene/SceneObject.idl(795):  		notifiedObjects.put(object);
	(&notifiedObjects)->put(object);
}

void SceneObjectImplementation::removeNotifiedObject(SceneObject* object) {
	// server/zone/objects/scene/SceneObject.idl(799):  		notifiedObjects.drop(object);
	(&notifiedObjects)->drop(object);
}

float SceneObjectImplementation::getPositionX() {
	// server/zone/objects/scene/SceneObject.idl(805):  		return QuadTreeEntry.getPositionX();
	return QuadTreeEntry::getPositionX();
}

float SceneObjectImplementation::getPositionZ() {
	// server/zone/objects/scene/SceneObject.idl(809):  		return QuadTreeEntry.getPositionZ();
	return QuadTreeEntry::getPositionZ();
}

float SceneObjectImplementation::getPositionY() {
	// server/zone/objects/scene/SceneObject.idl(813):  		return QuadTreeEntry.getPositionY();
	return QuadTreeEntry::getPositionY();
}

float SceneObjectImplementation::getDirectionX() {
	// server/zone/objects/scene/SceneObject.idl(817):  		return direction.getX();
	return (&direction)->getX();
}

float SceneObjectImplementation::getDirectionZ() {
	// server/zone/objects/scene/SceneObject.idl(821):  		return direction.getZ();
	return (&direction)->getZ();
}

float SceneObjectImplementation::getDirectionY() {
	// server/zone/objects/scene/SceneObject.idl(825):  		return direction.getY();
	return (&direction)->getY();
}

float SceneObjectImplementation::getDirectionW() {
	// server/zone/objects/scene/SceneObject.idl(829):  		return direction.getW();
	return (&direction)->getW();
}

unsigned int SceneObjectImplementation::getClientObjectCRC() {
	// server/zone/objects/scene/SceneObject.idl(833):  		return clientObjectCRC;
	return clientObjectCRC;
}

unsigned int SceneObjectImplementation::getServerObjectCRC() {
	// server/zone/objects/scene/SceneObject.idl(837):  		return serverObjectCRC;
	return serverObjectCRC;
}

bool SceneObjectImplementation::isWaypointObject() {
	// server/zone/objects/scene/SceneObject.idl(841):  		return gameObjectType == WAYPOINT;
	return gameObjectType == WAYPOINT;
}

StringId* SceneObjectImplementation::getObjectName() {
	// server/zone/objects/scene/SceneObject.idl(846):  		return objectName;
	return (&objectName);
}

StringId* SceneObjectImplementation::getDetailedDescription() {
	// server/zone/objects/scene/SceneObject.idl(851):  		return detailedDescription;
	return (&detailedDescription);
}

int SceneObjectImplementation::getArrangementDescriptorSize() {
	// server/zone/objects/scene/SceneObject.idl(855):  		return arrangementDescriptors.size();
	return (&arrangementDescriptors)->size();
}

String SceneObjectImplementation::getArrangementDescriptor(int idx) {
	// server/zone/objects/scene/SceneObject.idl(859):  		return arrangementDescriptors.get(idx);
	return (&arrangementDescriptors)->get(idx);
}

String SceneObjectImplementation::getSlotDescriptor(int idx) {
	// server/zone/objects/scene/SceneObject.idl(863):  		return slotDescriptors.get(idx);
	return (&slotDescriptors)->get(idx);
}

SceneObject* SceneObjectImplementation::getSlottedObject(const String& slot) {
	// server/zone/objects/scene/SceneObject.idl(867):  		return slottedObjects.get(slot);
	return (&slottedObjects)->get(slot);
}

int SceneObjectImplementation::getSlotDescriptorSize() {
	// server/zone/objects/scene/SceneObject.idl(871):  		return slotDescriptors.size();
	return (&slotDescriptors)->size();
}

int SceneObjectImplementation::getContainerObjectsSize() {
	// server/zone/objects/scene/SceneObject.idl(875):  		return containerObjects.size();
	return (&containerObjects)->size();
}

bool SceneObjectImplementation::hasFullContainerObjects() {
	// server/zone/objects/scene/SceneObject.idl(879):  		return containerObjects.size() == containerVolumeLimit;
	return (&containerObjects)->size() == containerVolumeLimit;
}

SceneObject* SceneObjectImplementation::getContainerObject(int idx) {
	// server/zone/objects/scene/SceneObject.idl(883):  		return containerObjects.get(idx);
	return (&containerObjects)->get(idx);
}

ZoneClientSession* SceneObjectImplementation::getClient() {
	// server/zone/objects/scene/SceneObject.idl(887):  		return null;
	return NULL;
}

unsigned int SceneObjectImplementation::getGameObjectType() {
	// server/zone/objects/scene/SceneObject.idl(891):  		return gameObjectType;
	return gameObjectType;
}

unsigned int SceneObjectImplementation::getContainmentType() {
	// server/zone/objects/scene/SceneObject.idl(895):  		return containmentType;
	return containmentType;
}

Zone* SceneObjectImplementation::getZone() {
	// server/zone/objects/scene/SceneObject.idl(899):  		return zone;
	return zone;
}

float SceneObjectImplementation::getDirectionAngle() {
	// server/zone/objects/scene/SceneObject.idl(903):  		return direction.getDegrees();
	return (&direction)->getDegrees();
}

float SceneObjectImplementation::getSpecialDirectionAngle() {
	// server/zone/objects/scene/SceneObject.idl(907):  		return direction.getSpecialDegrees();
	return (&direction)->getSpecialDegrees();
}

unsigned int SceneObjectImplementation::getMovementCounter() {
	// server/zone/objects/scene/SceneObject.idl(911):  		return movementCounter;
	return movementCounter;
}

SceneObject* SceneObjectImplementation::getParent() {
	// server/zone/objects/scene/SceneObject.idl(915):  		return parent;
	return parent;
}

ZoneServer* SceneObjectImplementation::getZoneServer() {
	// server/zone/objects/scene/SceneObject.idl(919):  		return server.getZoneServer();
	return server->getZoneServer();
}

UnicodeString SceneObjectImplementation::getCustomObjectName() {
	// server/zone/objects/scene/SceneObject.idl(940):  		return objectName.getCustomString();
	return (&objectName)->getCustomString();
}

bool SceneObjectImplementation::isInQuadTree() {
	// server/zone/objects/scene/SceneObject.idl(944):  		return QuadTreeEntry.isInQuadTree();
	return QuadTreeEntry::isInQuadTree();
}

String SceneObjectImplementation::getLoggingName() {
	// server/zone/objects/scene/SceneObject.idl(948):  		return Logger.getLoggingName();
	return Logger::getLoggingName();
}

bool SceneObjectImplementation::isPlayerCreature() {
	// server/zone/objects/scene/SceneObject.idl(952):  		return gameObjectType == PLAYERCREATURE;
	return gameObjectType == PLAYERCREATURE;
}

bool SceneObjectImplementation::isCreatureObject() {
	// server/zone/objects/scene/SceneObject.idl(956):  		return false;
	return false;
}

bool SceneObjectImplementation::isVehicleObject() {
	// server/zone/objects/scene/SceneObject.idl(960):  		return false;
	return false;
}

bool SceneObjectImplementation::isBuildingObject() {
	// server/zone/objects/scene/SceneObject.idl(964):  		return false;
	return false;
}

bool SceneObjectImplementation::isWeaponObject() {
	// server/zone/objects/scene/SceneObject.idl(968):  		return gameObjectType & WEAPON;
	return gameObjectType & WEAPON;
}

bool SceneObjectImplementation::isWearableObject() {
	// server/zone/objects/scene/SceneObject.idl(972):  		return false;
	return false;
}

bool SceneObjectImplementation::isArmorObject() {
	// server/zone/objects/scene/SceneObject.idl(976):  		return gameObjectType & ARMOR;
	return gameObjectType & ARMOR;
}

bool SceneObjectImplementation::isCellObject() {
	// server/zone/objects/scene/SceneObject.idl(980):  		return gameObjectType == CELLOBJECT;
	return gameObjectType == CELLOBJECT;
}

bool SceneObjectImplementation::isTangibleObject() {
	// server/zone/objects/scene/SceneObject.idl(984):  		return false;
	return false;
}

bool SceneObjectImplementation::isInstrument() {
	// server/zone/objects/scene/SceneObject.idl(988):  		return gameObjectType == INSTRUMENT;
	return gameObjectType == INSTRUMENT;
}

bool SceneObjectImplementation::isBazaarTerminal() {
	// server/zone/objects/scene/SceneObject.idl(992):  		return gameObjectType == BAZAAR;
	return gameObjectType == BAZAAR;
}

void SceneObjectImplementation::setPosition(float x, float z, float y) {
	// server/zone/objects/scene/SceneObject.idl(996):  		QuadTreeEntry.setPosition(x, z, y);
	QuadTreeEntry::setPosition(x, z, y);
}

void SceneObjectImplementation::initializePosition(float x, float z, float y) {
	// server/zone/objects/scene/SceneObject.idl(1000):  		QuadTreeEntry.initializePosition(x, z, y);
	QuadTreeEntry::initializePosition(x, z, y);
}

void SceneObjectImplementation::setGameObjectType(unsigned int type) {
	// server/zone/objects/scene/SceneObject.idl(1004):  		gameObjectType = type;
	gameObjectType = type;
}

void SceneObjectImplementation::setClientObjectCRC(unsigned int objCRC) {
	// server/zone/objects/scene/SceneObject.idl(1008):  		clientObjectCRC = objCRC;
	clientObjectCRC = objCRC;
}

void SceneObjectImplementation::setServerObjectCRC(unsigned int objCRC) {
	// server/zone/objects/scene/SceneObject.idl(1012):  		serverObjectCRC = objCRC;
	serverObjectCRC = objCRC;
}

void SceneObjectImplementation::setParent(SceneObject* par) {
	// server/zone/objects/scene/SceneObject.idl(1016):  		parent = par;
	parent = par;
}

void SceneObjectImplementation::setZoneProcessServer(ZoneProcessServerImplementation* srv) {
	// server/zone/objects/scene/SceneObject.idl(1021):  		server = srv;
	server = srv;
}

void SceneObjectImplementation::setObjectName(const UnicodeString& name) {
	// server/zone/objects/scene/SceneObject.idl(1025):  		objectName.setCustomString(name);
	(&objectName)->setCustomString(name);
}

void SceneObjectImplementation::setZone(Zone* zon) {
	// server/zone/objects/scene/SceneObject.idl(1029):  		zone = zon;
	zone = zon;
}

void SceneObjectImplementation::setDirection(float fw, float fx, float fy, float fz) {
	// server/zone/objects/scene/SceneObject.idl(1033):  		direction.set(fw, fx, fy, fz);
	(&direction)->set(fw, fx, fy, fz);
}

void SceneObjectImplementation::setMovementCounter(unsigned int count) {
	// server/zone/objects/scene/SceneObject.idl(1037):  		movementCounter = count;
	movementCounter = count;
}

void SceneObjectImplementation::incrementMovementCounter() {
	// server/zone/objects/scene/SceneObject.idl(1041):  		movementCounter++;
	movementCounter ++;
}

void SceneObjectImplementation::setContainmentType(unsigned int type) {
	// server/zone/objects/scene/SceneObject.idl(1045):  		containmentType = type;
	containmentType = type;
}

void SceneObjectImplementation::setLoggingName(const String& name) {
	// server/zone/objects/scene/SceneObject.idl(1049):  		Logger.setLoggingName(name);
	Logger::setLoggingName(name);
}

void SceneObjectImplementation::setStaticObject(bool val) {
	// server/zone/objects/scene/SceneObject.idl(1053):  		staticObject = val;
	staticObject = val;
}

VectorMap<unsigned long long, ManagedReference<SceneObject* > >* SceneObjectImplementation::getContainerObjects() {
	// server/zone/objects/scene/SceneObject.idl(1058):  		return containerObjects;
	return (&containerObjects);
}

bool SceneObjectImplementation::hasObjectInContainer(unsigned long long objectID) {
	// server/zone/objects/scene/SceneObject.idl(1062):  		return containerObjects.contains(objectID);
	return (&containerObjects)->contains(objectID);
}

SceneObject* SceneObjectImplementation::getContainerObject(unsigned long long objectID) {
	// server/zone/objects/scene/SceneObject.idl(1066):  		return containerObjects.get(objectID);
	return (&containerObjects)->get(objectID);
}

bool SceneObjectImplementation::isStaticObject() {
	// server/zone/objects/scene/SceneObject.idl(1070):  		return staticObject;
	return staticObject;
}

bool SceneObjectImplementation::isControlDevice() {
	// server/zone/objects/scene/SceneObject.idl(1074):  		return false;
	return false;
}

/*
 *	SceneObjectAdapter
 */

SceneObjectAdapter::SceneObjectAdapter(SceneObjectImplementation* obj) : ManagedObjectAdapter(obj) {
}

Packet* SceneObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		finalize();
		break;
	case 7:
		initializeTransientMembers();
		break;
	case 8:
		info(inv->getAsciiParameter(_param0_info__String_bool_), inv->getBooleanParameter());
		break;
	case 9:
		error(inv->getAsciiParameter(_param0_error__String_));
		break;
	case 10:
		resp->insertSignedInt(inRangeObjectCount());
		break;
	case 11:
		resp->insertBoolean(isInRange((SceneObject*) inv->getObjectParameter(), inv->getFloatParameter()));
		break;
	case 12:
		resp->insertBoolean(addObject((SceneObject*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 13:
		resp->insertBoolean(removeObject((SceneObject*) inv->getObjectParameter(), inv->getBooleanParameter()));
		break;
	case 14:
		resp->insertSignedInt(canAddObject((SceneObject*) inv->getObjectParameter()));
		break;
	case 15:
		updateToDatabase();
		break;
	case 16:
		updateToDatabaseWithoutChildren();
		break;
	case 17:
		updateToDatabaseAllObjects(inv->getBooleanParameter());
		break;
	case 18:
		destroyObjectFromDatabase(inv->getBooleanParameter());
		break;
	case 19:
		resp->insertSignedInt(canBeDestroyed((PlayerCreature*) inv->getObjectParameter()));
		break;
	case 20:
		create((ZoneClientSession*) inv->getObjectParameter());
		break;
	case 21:
		destroy((ZoneClientSession*) inv->getObjectParameter());
		break;
	case 22:
		close((ZoneClientSession*) inv->getObjectParameter());
		break;
	case 23:
		link((ZoneClientSession*) inv->getObjectParameter(), inv->getUnsignedIntParameter());
		break;
	case 24:
		resp->insertLong(link(inv->getUnsignedLongParameter(), inv->getUnsignedIntParameter())->_getObjectID());
		break;
	case 25:
		sendTo((SceneObject*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 26:
		sendDestroyTo((SceneObject*) inv->getObjectParameter());
		break;
	case 27:
		sendBaselinesTo((SceneObject*) inv->getObjectParameter());
		break;
	case 28:
		sendContainerObjectsTo((SceneObject*) inv->getObjectParameter());
		break;
	case 29:
		sendSlottedObjectsTo((SceneObject*) inv->getObjectParameter());
		break;
	case 30:
		sendToOwner(inv->getBooleanParameter());
		break;
	case 31:
		sendAttributeListTo((PlayerCreature*) inv->getObjectParameter());
		break;
	case 32:
		openContainerTo((PlayerCreature*) inv->getObjectParameter());
		break;
	case 33:
		insertToZone((Zone*) inv->getObjectParameter());
		break;
	case 34:
		insertToBuilding((BuildingObject*) inv->getObjectParameter());
		break;
	case 35:
		switchZone(inv->getSignedIntParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter());
		break;
	case 36:
		removeFromZone();
		break;
	case 37:
		removeFromBuilding((BuildingObject*) inv->getObjectParameter());
		break;
	case 38:
		updateZone(inv->getBooleanParameter());
		break;
	case 39:
		updateZoneWithParent((SceneObject*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 40:
		broadcastMessage((BasePacket*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 41:
		broadcastObject((SceneObject*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 42:
		sendMessage((BasePacket*) inv->getObjectParameter());
		break;
	case 43:
		resp->insertSignedInt(compareTo((SceneObject*) inv->getObjectParameter()));
		break;
	case 44:
		resp->insertLong(getParentID());
		break;
	case 45:
		resp->insertSignedInt(handleObjectMenuSelect((PlayerCreature*) inv->getObjectParameter(), inv->getByteParameter()));
		break;
	case 46:
		resp->insertFloat(getDistanceTo((SceneObject*) inv->getObjectParameter()));
		break;
	case 47:
		updateVehiclePosition();
		break;
	case 48:
		resp->insertSignedInt(onPositionUpdate());
		break;
	case 49:
		resp->insertBoolean(hasNotifiedObject((SceneObject*) inv->getObjectParameter()));
		break;
	case 50:
		addNotifiedObject((SceneObject*) inv->getObjectParameter());
		break;
	case 51:
		removeNotifiedObject((SceneObject*) inv->getObjectParameter());
		break;
	case 52:
		resp->insertLong(getObjectID());
		break;
	case 53:
		resp->insertFloat(getPositionX());
		break;
	case 54:
		resp->insertFloat(getPositionZ());
		break;
	case 55:
		resp->insertFloat(getPositionY());
		break;
	case 56:
		resp->insertFloat(getDirectionX());
		break;
	case 57:
		resp->insertFloat(getDirectionZ());
		break;
	case 58:
		resp->insertFloat(getDirectionY());
		break;
	case 59:
		resp->insertFloat(getDirectionW());
		break;
	case 60:
		resp->insertInt(getClientObjectCRC());
		break;
	case 61:
		resp->insertInt(getServerObjectCRC());
		break;
	case 62:
		resp->insertBoolean(isWaypointObject());
		break;
	case 63:
		resp->insertSignedInt(getArrangementDescriptorSize());
		break;
	case 64:
		resp->insertAscii(getArrangementDescriptor(inv->getSignedIntParameter()));
		break;
	case 65:
		resp->insertAscii(getSlotDescriptor(inv->getSignedIntParameter()));
		break;
	case 66:
		resp->insertLong(getSlottedObject(inv->getAsciiParameter(_param0_getSlottedObject__String_))->_getObjectID());
		break;
	case 67:
		resp->insertSignedInt(getSlotDescriptorSize());
		break;
	case 68:
		resp->insertSignedInt(getContainerObjectsSize());
		break;
	case 69:
		resp->insertBoolean(hasFullContainerObjects());
		break;
	case 70:
		resp->insertLong(getContainerObject(inv->getSignedIntParameter())->_getObjectID());
		break;
	case 71:
		resp->insertLong(getClient()->_getObjectID());
		break;
	case 72:
		resp->insertInt(getGameObjectType());
		break;
	case 73:
		resp->insertInt(getContainmentType());
		break;
	case 74:
		resp->insertLong(getZone()->_getObjectID());
		break;
	case 75:
		resp->insertFloat(getDirectionAngle());
		break;
	case 76:
		resp->insertFloat(getSpecialDirectionAngle());
		break;
	case 77:
		resp->insertInt(getMovementCounter());
		break;
	case 78:
		resp->insertLong(getParent()->_getObjectID());
		break;
	case 79:
		resp->insertLong(getZoneServer()->_getObjectID());
		break;
	case 80:
		resp->insertLong(getGrandParent()->_getObjectID());
		break;
	case 81:
		resp->insertBoolean(isASubChildOf((SceneObject*) inv->getObjectParameter()));
		break;
	case 82:
		resp->insertUnicode(getCustomObjectName());
		break;
	case 83:
		resp->insertBoolean(isInQuadTree());
		break;
	case 84:
		resp->insertAscii(getLoggingName());
		break;
	case 85:
		resp->insertBoolean(isPlayerCreature());
		break;
	case 86:
		resp->insertBoolean(isCreatureObject());
		break;
	case 87:
		resp->insertBoolean(isVehicleObject());
		break;
	case 88:
		resp->insertBoolean(isBuildingObject());
		break;
	case 89:
		resp->insertBoolean(isWeaponObject());
		break;
	case 90:
		resp->insertBoolean(isWearableObject());
		break;
	case 91:
		resp->insertBoolean(isArmorObject());
		break;
	case 92:
		resp->insertBoolean(isCellObject());
		break;
	case 93:
		resp->insertBoolean(isTangibleObject());
		break;
	case 94:
		resp->insertBoolean(isInstrument());
		break;
	case 95:
		resp->insertBoolean(isBazaarTerminal());
		break;
	case 96:
		setPosition(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter());
		break;
	case 97:
		initializePosition(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter());
		break;
	case 98:
		setGameObjectType(inv->getUnsignedIntParameter());
		break;
	case 99:
		setClientObjectCRC(inv->getUnsignedIntParameter());
		break;
	case 100:
		setServerObjectCRC(inv->getUnsignedIntParameter());
		break;
	case 101:
		setParent((SceneObject*) inv->getObjectParameter());
		break;
	case 102:
		setObjectName(inv->getUnicodeParameter(_param0_setObjectName__UnicodeString_));
		break;
	case 103:
		setZone((Zone*) inv->getObjectParameter());
		break;
	case 104:
		setDirection(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter());
		break;
	case 105:
		setMovementCounter(inv->getUnsignedIntParameter());
		break;
	case 106:
		incrementMovementCounter();
		break;
	case 107:
		setContainmentType(inv->getUnsignedIntParameter());
		break;
	case 108:
		setLoggingName(inv->getAsciiParameter(_param0_setLoggingName__String_));
		break;
	case 109:
		setStaticObject(inv->getBooleanParameter());
		break;
	case 110:
		resp->insertBoolean(hasObjectInContainer(inv->getUnsignedLongParameter()));
		break;
	case 111:
		resp->insertLong(getContainerObject(inv->getUnsignedLongParameter())->_getObjectID());
		break;
	case 112:
		resp->insertBoolean(isStaticObject());
		break;
	case 113:
		resp->insertBoolean(isControlDevice());
		break;
	default:
		return NULL;
	}

	return resp;
}

void SceneObjectAdapter::finalize() {
	((SceneObjectImplementation*) impl)->finalize();
}

void SceneObjectAdapter::initializeTransientMembers() {
	((SceneObjectImplementation*) impl)->initializeTransientMembers();
}

void SceneObjectAdapter::info(const String& msg, bool forced) {
	((SceneObjectImplementation*) impl)->info(msg, forced);
}

void SceneObjectAdapter::error(const String& msg) {
	((SceneObjectImplementation*) impl)->error(msg);
}

int SceneObjectAdapter::inRangeObjectCount() {
	return ((SceneObjectImplementation*) impl)->inRangeObjectCount();
}

bool SceneObjectAdapter::isInRange(SceneObject* obj, float range) {
	return ((SceneObjectImplementation*) impl)->isInRange(obj, range);
}

bool SceneObjectAdapter::addObject(SceneObject* object, int containmentType, bool notifyClient) {
	return ((SceneObjectImplementation*) impl)->addObject(object, containmentType, notifyClient);
}

bool SceneObjectAdapter::removeObject(SceneObject* object, bool notifyClient) {
	return ((SceneObjectImplementation*) impl)->removeObject(object, notifyClient);
}

int SceneObjectAdapter::canAddObject(SceneObject* object) {
	return ((SceneObjectImplementation*) impl)->canAddObject(object);
}

void SceneObjectAdapter::updateToDatabase() {
	((SceneObjectImplementation*) impl)->updateToDatabase();
}

void SceneObjectAdapter::updateToDatabaseWithoutChildren() {
	((SceneObjectImplementation*) impl)->updateToDatabaseWithoutChildren();
}

void SceneObjectAdapter::updateToDatabaseAllObjects(bool startTask) {
	((SceneObjectImplementation*) impl)->updateToDatabaseAllObjects(startTask);
}

void SceneObjectAdapter::destroyObjectFromDatabase(bool destroyContainedObjects) {
	((SceneObjectImplementation*) impl)->destroyObjectFromDatabase(destroyContainedObjects);
}

int SceneObjectAdapter::canBeDestroyed(PlayerCreature* player) {
	return ((SceneObjectImplementation*) impl)->canBeDestroyed(player);
}

void SceneObjectAdapter::create(ZoneClientSession* client) {
	((SceneObjectImplementation*) impl)->create(client);
}

void SceneObjectAdapter::destroy(ZoneClientSession* client) {
	((SceneObjectImplementation*) impl)->destroy(client);
}

void SceneObjectAdapter::close(ZoneClientSession* client) {
	((SceneObjectImplementation*) impl)->close(client);
}

void SceneObjectAdapter::link(ZoneClientSession* client, unsigned int containmentType) {
	((SceneObjectImplementation*) impl)->link(client, containmentType);
}

BaseMessage* SceneObjectAdapter::link(unsigned long long objectID, unsigned int containmentType) {
	return ((SceneObjectImplementation*) impl)->link(objectID, containmentType);
}

void SceneObjectAdapter::sendTo(SceneObject* player, bool doClose) {
	((SceneObjectImplementation*) impl)->sendTo(player, doClose);
}

void SceneObjectAdapter::sendDestroyTo(SceneObject* player) {
	((SceneObjectImplementation*) impl)->sendDestroyTo(player);
}

void SceneObjectAdapter::sendBaselinesTo(SceneObject* player) {
	((SceneObjectImplementation*) impl)->sendBaselinesTo(player);
}

void SceneObjectAdapter::sendContainerObjectsTo(SceneObject* player) {
	((SceneObjectImplementation*) impl)->sendContainerObjectsTo(player);
}

void SceneObjectAdapter::sendSlottedObjectsTo(SceneObject* player) {
	((SceneObjectImplementation*) impl)->sendSlottedObjectsTo(player);
}

void SceneObjectAdapter::sendToOwner(bool doClose) {
	((SceneObjectImplementation*) impl)->sendToOwner(doClose);
}

void SceneObjectAdapter::sendAttributeListTo(PlayerCreature* object) {
	((SceneObjectImplementation*) impl)->sendAttributeListTo(object);
}

void SceneObjectAdapter::openContainerTo(PlayerCreature* player) {
	((SceneObjectImplementation*) impl)->openContainerTo(player);
}

void SceneObjectAdapter::insertToZone(Zone* zone) {
	((SceneObjectImplementation*) impl)->insertToZone(zone);
}

void SceneObjectAdapter::insertToBuilding(BuildingObject* building) {
	((SceneObjectImplementation*) impl)->insertToBuilding(building);
}

void SceneObjectAdapter::switchZone(int newZoneID, float newPostionX, float newPositionZ, float newPositionY) {
	((SceneObjectImplementation*) impl)->switchZone(newZoneID, newPostionX, newPositionZ, newPositionY);
}

void SceneObjectAdapter::removeFromZone() {
	((SceneObjectImplementation*) impl)->removeFromZone();
}

void SceneObjectAdapter::removeFromBuilding(BuildingObject* building) {
	((SceneObjectImplementation*) impl)->removeFromBuilding(building);
}

void SceneObjectAdapter::updateZone(bool lightUpdate) {
	((SceneObjectImplementation*) impl)->updateZone(lightUpdate);
}

void SceneObjectAdapter::updateZoneWithParent(SceneObject* newParent, bool lightUpdate) {
	((SceneObjectImplementation*) impl)->updateZoneWithParent(newParent, lightUpdate);
}

void SceneObjectAdapter::broadcastMessage(BasePacket* message, bool sendSelf) {
	((SceneObjectImplementation*) impl)->broadcastMessage(message, sendSelf);
}

void SceneObjectAdapter::broadcastObject(SceneObject* object, bool sendSelf) {
	((SceneObjectImplementation*) impl)->broadcastObject(object, sendSelf);
}

void SceneObjectAdapter::sendMessage(BasePacket* msg) {
	((SceneObjectImplementation*) impl)->sendMessage(msg);
}

int SceneObjectAdapter::compareTo(SceneObject* obj) {
	return ((SceneObjectImplementation*) impl)->compareTo(obj);
}

unsigned long long SceneObjectAdapter::getParentID() {
	return ((SceneObjectImplementation*) impl)->getParentID();
}

int SceneObjectAdapter::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	return ((SceneObjectImplementation*) impl)->handleObjectMenuSelect(player, selectedID);
}

float SceneObjectAdapter::getDistanceTo(SceneObject* object) {
	return ((SceneObjectImplementation*) impl)->getDistanceTo(object);
}

void SceneObjectAdapter::updateVehiclePosition() {
	((SceneObjectImplementation*) impl)->updateVehiclePosition();
}

int SceneObjectAdapter::onPositionUpdate() {
	return ((SceneObjectImplementation*) impl)->onPositionUpdate();
}

bool SceneObjectAdapter::hasNotifiedObject(SceneObject* object) {
	return ((SceneObjectImplementation*) impl)->hasNotifiedObject(object);
}

void SceneObjectAdapter::addNotifiedObject(SceneObject* object) {
	((SceneObjectImplementation*) impl)->addNotifiedObject(object);
}

void SceneObjectAdapter::removeNotifiedObject(SceneObject* object) {
	((SceneObjectImplementation*) impl)->removeNotifiedObject(object);
}

unsigned long long SceneObjectAdapter::getObjectID() {
	return ((SceneObjectImplementation*) impl)->getObjectID();
}

float SceneObjectAdapter::getPositionX() {
	return ((SceneObjectImplementation*) impl)->getPositionX();
}

float SceneObjectAdapter::getPositionZ() {
	return ((SceneObjectImplementation*) impl)->getPositionZ();
}

float SceneObjectAdapter::getPositionY() {
	return ((SceneObjectImplementation*) impl)->getPositionY();
}

float SceneObjectAdapter::getDirectionX() {
	return ((SceneObjectImplementation*) impl)->getDirectionX();
}

float SceneObjectAdapter::getDirectionZ() {
	return ((SceneObjectImplementation*) impl)->getDirectionZ();
}

float SceneObjectAdapter::getDirectionY() {
	return ((SceneObjectImplementation*) impl)->getDirectionY();
}

float SceneObjectAdapter::getDirectionW() {
	return ((SceneObjectImplementation*) impl)->getDirectionW();
}

unsigned int SceneObjectAdapter::getClientObjectCRC() {
	return ((SceneObjectImplementation*) impl)->getClientObjectCRC();
}

unsigned int SceneObjectAdapter::getServerObjectCRC() {
	return ((SceneObjectImplementation*) impl)->getServerObjectCRC();
}

bool SceneObjectAdapter::isWaypointObject() {
	return ((SceneObjectImplementation*) impl)->isWaypointObject();
}

int SceneObjectAdapter::getArrangementDescriptorSize() {
	return ((SceneObjectImplementation*) impl)->getArrangementDescriptorSize();
}

String SceneObjectAdapter::getArrangementDescriptor(int idx) {
	return ((SceneObjectImplementation*) impl)->getArrangementDescriptor(idx);
}

String SceneObjectAdapter::getSlotDescriptor(int idx) {
	return ((SceneObjectImplementation*) impl)->getSlotDescriptor(idx);
}

SceneObject* SceneObjectAdapter::getSlottedObject(const String& slot) {
	return ((SceneObjectImplementation*) impl)->getSlottedObject(slot);
}

int SceneObjectAdapter::getSlotDescriptorSize() {
	return ((SceneObjectImplementation*) impl)->getSlotDescriptorSize();
}

int SceneObjectAdapter::getContainerObjectsSize() {
	return ((SceneObjectImplementation*) impl)->getContainerObjectsSize();
}

bool SceneObjectAdapter::hasFullContainerObjects() {
	return ((SceneObjectImplementation*) impl)->hasFullContainerObjects();
}

SceneObject* SceneObjectAdapter::getContainerObject(int idx) {
	return ((SceneObjectImplementation*) impl)->getContainerObject(idx);
}

ZoneClientSession* SceneObjectAdapter::getClient() {
	return ((SceneObjectImplementation*) impl)->getClient();
}

unsigned int SceneObjectAdapter::getGameObjectType() {
	return ((SceneObjectImplementation*) impl)->getGameObjectType();
}

unsigned int SceneObjectAdapter::getContainmentType() {
	return ((SceneObjectImplementation*) impl)->getContainmentType();
}

Zone* SceneObjectAdapter::getZone() {
	return ((SceneObjectImplementation*) impl)->getZone();
}

float SceneObjectAdapter::getDirectionAngle() {
	return ((SceneObjectImplementation*) impl)->getDirectionAngle();
}

float SceneObjectAdapter::getSpecialDirectionAngle() {
	return ((SceneObjectImplementation*) impl)->getSpecialDirectionAngle();
}

unsigned int SceneObjectAdapter::getMovementCounter() {
	return ((SceneObjectImplementation*) impl)->getMovementCounter();
}

SceneObject* SceneObjectAdapter::getParent() {
	return ((SceneObjectImplementation*) impl)->getParent();
}

ZoneServer* SceneObjectAdapter::getZoneServer() {
	return ((SceneObjectImplementation*) impl)->getZoneServer();
}

SceneObject* SceneObjectAdapter::getGrandParent() {
	return ((SceneObjectImplementation*) impl)->getGrandParent();
}

bool SceneObjectAdapter::isASubChildOf(SceneObject* object) {
	return ((SceneObjectImplementation*) impl)->isASubChildOf(object);
}

UnicodeString SceneObjectAdapter::getCustomObjectName() {
	return ((SceneObjectImplementation*) impl)->getCustomObjectName();
}

bool SceneObjectAdapter::isInQuadTree() {
	return ((SceneObjectImplementation*) impl)->isInQuadTree();
}

String SceneObjectAdapter::getLoggingName() {
	return ((SceneObjectImplementation*) impl)->getLoggingName();
}

bool SceneObjectAdapter::isPlayerCreature() {
	return ((SceneObjectImplementation*) impl)->isPlayerCreature();
}

bool SceneObjectAdapter::isCreatureObject() {
	return ((SceneObjectImplementation*) impl)->isCreatureObject();
}

bool SceneObjectAdapter::isVehicleObject() {
	return ((SceneObjectImplementation*) impl)->isVehicleObject();
}

bool SceneObjectAdapter::isBuildingObject() {
	return ((SceneObjectImplementation*) impl)->isBuildingObject();
}

bool SceneObjectAdapter::isWeaponObject() {
	return ((SceneObjectImplementation*) impl)->isWeaponObject();
}

bool SceneObjectAdapter::isWearableObject() {
	return ((SceneObjectImplementation*) impl)->isWearableObject();
}

bool SceneObjectAdapter::isArmorObject() {
	return ((SceneObjectImplementation*) impl)->isArmorObject();
}

bool SceneObjectAdapter::isCellObject() {
	return ((SceneObjectImplementation*) impl)->isCellObject();
}

bool SceneObjectAdapter::isTangibleObject() {
	return ((SceneObjectImplementation*) impl)->isTangibleObject();
}

bool SceneObjectAdapter::isInstrument() {
	return ((SceneObjectImplementation*) impl)->isInstrument();
}

bool SceneObjectAdapter::isBazaarTerminal() {
	return ((SceneObjectImplementation*) impl)->isBazaarTerminal();
}

void SceneObjectAdapter::setPosition(float x, float z, float y) {
	((SceneObjectImplementation*) impl)->setPosition(x, z, y);
}

void SceneObjectAdapter::initializePosition(float x, float z, float y) {
	((SceneObjectImplementation*) impl)->initializePosition(x, z, y);
}

void SceneObjectAdapter::setGameObjectType(unsigned int type) {
	((SceneObjectImplementation*) impl)->setGameObjectType(type);
}

void SceneObjectAdapter::setClientObjectCRC(unsigned int objCRC) {
	((SceneObjectImplementation*) impl)->setClientObjectCRC(objCRC);
}

void SceneObjectAdapter::setServerObjectCRC(unsigned int objCRC) {
	((SceneObjectImplementation*) impl)->setServerObjectCRC(objCRC);
}

void SceneObjectAdapter::setParent(SceneObject* par) {
	((SceneObjectImplementation*) impl)->setParent(par);
}

void SceneObjectAdapter::setObjectName(const UnicodeString& name) {
	((SceneObjectImplementation*) impl)->setObjectName(name);
}

void SceneObjectAdapter::setZone(Zone* zon) {
	((SceneObjectImplementation*) impl)->setZone(zon);
}

void SceneObjectAdapter::setDirection(float fw, float fx, float fy, float fz) {
	((SceneObjectImplementation*) impl)->setDirection(fw, fx, fy, fz);
}

void SceneObjectAdapter::setMovementCounter(unsigned int count) {
	((SceneObjectImplementation*) impl)->setMovementCounter(count);
}

void SceneObjectAdapter::incrementMovementCounter() {
	((SceneObjectImplementation*) impl)->incrementMovementCounter();
}

void SceneObjectAdapter::setContainmentType(unsigned int type) {
	((SceneObjectImplementation*) impl)->setContainmentType(type);
}

void SceneObjectAdapter::setLoggingName(const String& name) {
	((SceneObjectImplementation*) impl)->setLoggingName(name);
}

void SceneObjectAdapter::setStaticObject(bool val) {
	((SceneObjectImplementation*) impl)->setStaticObject(val);
}

bool SceneObjectAdapter::hasObjectInContainer(unsigned long long objectID) {
	return ((SceneObjectImplementation*) impl)->hasObjectInContainer(objectID);
}

SceneObject* SceneObjectAdapter::getContainerObject(unsigned long long objectID) {
	return ((SceneObjectImplementation*) impl)->getContainerObject(objectID);
}

bool SceneObjectAdapter::isStaticObject() {
	return ((SceneObjectImplementation*) impl)->isStaticObject();
}

bool SceneObjectAdapter::isControlDevice() {
	return ((SceneObjectImplementation*) impl)->isControlDevice();
}

/*
 *	SceneObjectHelper
 */

SceneObjectHelper* SceneObjectHelper::staticInitializer = SceneObjectHelper::instance();

SceneObjectHelper::SceneObjectHelper() {
	className = "SceneObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void SceneObjectHelper::finalizeHelper() {
	SceneObjectHelper::finalize();
}

DistributedObject* SceneObjectHelper::instantiateObject() {
	return new SceneObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* SceneObjectHelper::instantiateServant() {
	return new SceneObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* SceneObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SceneObjectAdapter((SceneObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

