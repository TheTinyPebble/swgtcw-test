/*
 *	server/zone/objects/scene/SceneObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "SceneObject.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

#include "server/zone/ZoneProcessServer.h"

#include "server/zone/ZoneClientSession.h"

#include "server/zone/Zone.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/objects/area/ActiveArea.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	SceneObjectStub
 */

enum {RPC_FINALIZE__ = 6,RPC_INITIALIZEPRIVATEDATA__,RPC_CREATECOMPONENTS__,RPC_CREATECONTAINERCOMPONENT__,RPC_INITIALIZETRANSIENTMEMBERS__,RPC_NOTIFYLOADFROMDATABASE__,RPC_INFO__STRING_BOOL_,RPC_ERROR__STRING_,RPC_INRANGEOBJECTS__INT_FLOAT_,RPC_ISINRANGE__SCENEOBJECT_FLOAT_,RPC_ADDOBJECT__SCENEOBJECT_INT_BOOL_,RPC_REMOVEOBJECT__SCENEOBJECT_BOOL_,RPC_CANADDOBJECT__SCENEOBJECT_INT_STRING_,RPC_SYNCHRONIZEDUILISTEN__SCENEOBJECT_INT_,RPC_SYNCHRONIZEDUISTOPLISTEN__SCENEOBJECT_INT_,RPC_UPDATETODATABASE__,RPC_UPDATETODATABASEWITHOUTCHILDREN__,RPC_UPDATETODATABASEALLOBJECTS__BOOL_,RPC_DESTROYOBJECTFROMDATABASE__BOOL_,RPC_CANBEDESTROYED__CREATUREOBJECT_,RPC_CREATE__ZONECLIENTSESSION_,RPC_DESTROY__ZONECLIENTSESSION_,RPC_CLOSE__ZONECLIENTSESSION_,RPC_LINK__ZONECLIENTSESSION_INT_,RPC_LINK__LONG_INT_,RPC_SENDTO__SCENEOBJECT_BOOL_,RPC_SENDWITHOUTPARENTTO__SCENEOBJECT_,RPC_SENDWITHOUTCONTAINEROBJECTSTO__SCENEOBJECT_,RPC_SENDDESTROYTO__SCENEOBJECT_,RPC_SENDBASELINESTO__SCENEOBJECT_,RPC_SENDCONTAINEROBJECTSTO__SCENEOBJECT_,RPC_SENDSLOTTEDOBJECTSTO__SCENEOBJECT_,RPC_SENDTOOWNER__BOOL_,RPC_SENDATTRIBUTELISTTO__CREATUREOBJECT_,RPC_SETCUSTOMOBJECTNAME__UNICODESTRING_BOOL_,RPC_OPENCONTAINERTO__CREATUREOBJECT_,RPC_CLOSECONTAINERTO__CREATUREOBJECT_BOOL_,RPC_INSERTTOZONE__ZONE_,RPC_INSERTTOBUILDING__BUILDINGOBJECT_,RPC_SWITCHZONE__STRING_FLOAT_FLOAT_FLOAT_LONG_,RPC_TELEPORT__FLOAT_FLOAT_FLOAT_LONG_,RPC_UPDATEDIRECTION__FLOAT_FLOAT_FLOAT_FLOAT_,RPC_REMOVEFROMZONE__,RPC_REMOVEFROMBUILDING__BUILDINGOBJECT_,RPC_UPDATEZONE__BOOL_BOOL_,RPC_UPDATEZONEWITHPARENT__SCENEOBJECT_BOOL_BOOL_,RPC_BROADCASTMESSAGE__BASEPACKET_BOOL_BOOL_,RPC_BROADCASTOBJECT__SCENEOBJECT_BOOL_,RPC_BROADCASTDESTROY__SCENEOBJECT_BOOL_,RPC_SENDMESSAGE__BASEPACKET_,RPC_COMPARETO__SCENEOBJECT_,RPC_GETPARENTID__,RPC_SHOWFLYTEXT__STRING_STRING_BYTE_BYTE_BYTE_,RPC_GETACTIVESESSION__INT_,RPC_ADDACTIVESESSION__INT_FACADE_,RPC_CONTAINSACTIVESESSION__INT_,RPC_DROPACTIVESESSION__INT_,RPC_GETACTIVESESSIONSCOUNT__,RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_,RPC_NOTIFYADDEDTOCLOSEOBJECTS__,RPC_NOTIFYREMOVEDFROMCLOSEOBJECTS__,RPC_GETDISTANCETO__SCENEOBJECT_,RPC_UPDATEVEHICLEPOSITION__,RPC_NOTIFYOBJECTINSERTED__SCENEOBJECT_,RPC_NOTIFYOBJECTREMOVED__SCENEOBJECT_,RPC_ADDACTIVEAREA__ACTIVEAREA_,RPC_DROPACTIVEAREA__ACTIVEAREA_,RPC_HASACTIVEAREA__ACTIVEAREA_,RPC_GETACTIVEAREASSIZE__,RPC_GETACTIVEREGION__,RPC_GETCITYREGION__,RPC_SETCITYREGION__CITYREGION_,RPC_GETZONE__,RPC_GETOBJECTID__,RPC_GETWORLDPOSITIONX__,RPC_GETWORLDPOSITIONY__,RPC_GETWORLDPOSITIONZ__,RPC_GETDIRECTIONX__,RPC_GETDIRECTIONZ__,RPC_GETDIRECTIONY__,RPC_GETDIRECTIONW__,RPC_GETCLIENTOBJECTCRC__,RPC_GETSERVEROBJECTCRC__,RPC_ISWAYPOINTOBJECT__,RPC_GETOBJECTNAMESTRINGIDFILE__,RPC_GETOBJECTNAMESTRINGIDNAME__,RPC_GETARRANGEMENTDESCRIPTORSIZE__,RPC_GETARRANGEMENTDESCRIPTOR__INT_,RPC_GETSLOTDESCRIPTOR__INT_,RPC_HASSLOTDESCRIPTOR__STRING_,RPC_GETSLOTTEDOBJECT__STRING_,RPC_GETSLOTDESCRIPTORSIZE__,RPC_GETSLOTTEDOBJECT__INT_,RPC_DROPSLOTTEDOBJECT__STRING_,RPC_REMOVESLOTTEDOBJECT__INT_,RPC_GETCONTAINEROBJECTSSIZE__,RPC_GETSLOTTEDOBJECTSSIZE__,RPC_HASFULLCONTAINEROBJECTS__,RPC_GETCONTAINERVOLUMELIMIT__,RPC_GETCONTAINEROBJECT__INT_,RPC_HASOBJECTINCONTAINER__LONG_,RPC_HASOBJECTINSLOTTEDCONTAINER__SCENEOBJECT_,RPC_GETCONTAINEROBJECT__LONG_,RPC_REMOVEALLCONTAINEROBJECTS__,RPC_PUTINCONTAINER__SCENEOBJECT_LONG_,RPC_REMOVEFROMCONTAINEROBJECTS__INT_,RPC_SETCONTAINERVOLUMELIMIT__INT_,RPC_SETCONTAINERTYPE__INT_,RPC_GETCONTAINERTYPE__,RPC_GETCLIENT__,RPC_GETGAMEOBJECTTYPE__,RPC_GETCLIENTGAMEOBJECTTYPE__,RPC_GETCONTAINMENTTYPE__,RPC_GETDIRECTIONANGLE__,RPC_GETSPECIALDIRECTIONANGLE__,RPC_ROTATE__INT_,RPC_FACEOBJECT__SCENEOBJECT_,RPC_NOTIFYSELFPOSITIONUPDATE__,RPC_NOTIFYPOSITIONUPDATE__QUADTREEENTRY_,RPC_NOTIFYCLOSECONTAINER__CREATUREOBJECT_,RPC_GETMOVEMENTCOUNTER__,RPC_GETPARENT__,RPC_GETZONESERVER__,RPC_GETROOTPARENT__,RPC_GETPARENTRECURSIVELY__INT_,RPC_ISASUBCHILDOF__SCENEOBJECT_,RPC_GETCUSTOMOBJECTNAME__,RPC_GETLOGGINGNAME__,RPC_ISPLAYERCREATURE__,RPC_ISVENDOR__,RPC_ISCONTAINERFULL__,RPC_ISSHUTTLEINSTALLATION__,RPC_ISPLAYEROBJECT__,RPC_ISACTIVEAREA__,RPC_ISREGION__,RPC_ISCREATUREOBJECT__,RPC_ISVEHICLEOBJECT__,RPC_ISBUILDINGOBJECT__,RPC_ISCLONINGBUILDINGOBJECT__,RPC_ISGARAGE__,RPC_ISWEAPONOBJECT__,RPC_ISWEARABLEOBJECT__,RPC_ISARMOROBJECT__,RPC_ISPSGARMOROBJECT__,RPC_ISCELLOBJECT__,RPC_ISTANGIBLEOBJECT__,RPC_ISRESOURCECONTAINER__,RPC_ISCOMPONENT__,RPC_ISINTANGIBLEOBJECT__,RPC_ISINSTRUMENT__,RPC_ISINSTALLATIONOBJECT__,RPC_ISCITYTERMINAL__,RPC_ISCITYVOTETERMINAL__,RPC_ISFACTORY__,RPC_ISFACTORYCRATE__,RPC_ISFISHINGPOLEOBJECT__,RPC_ISDEEDOBJECT__,RPC_ISVEHICLEDEEDOBJECT__,RPC_ISBUILDINGDEED__,RPC_ISSIGNOBJECT__,RPC_ISINSTALLATIONDEED__,RPC_ISCRAFTINGTOOL__,RPC_ISCRAFTINGSTATION__,RPC_ISMANUFACTURESCHEMATIC__,RPC_ISSTRUCTUREOBJECT__,RPC_ISFISHINGBAIT__,RPC_ISATTACHMENT__,RPC_SETGAMEOBJECTTYPE__INT_,RPC_SETCLIENTOBJECTCRC__INT_,RPC_SETSERVEROBJECTCRC__INT_,RPC_SETPARENT__SCENEOBJECT_,RPC_SETZONE__ZONE_,RPC_SETDIRECTION__FLOAT_FLOAT_FLOAT_FLOAT_,RPC_SETDIRECTION__FLOAT_,RPC_SETMOVEMENTCOUNTER__INT_,RPC_INCREMENTMOVEMENTCOUNTER__,RPC_SETCONTAINMENTTYPE__INT_,RPC_SETLOGGINGNAME__STRING_,RPC_SETCLIENTOBJECT__BOOL_,RPC_GETPLANETCRC__,RPC_ISSTATICOBJECT__,RPC_ISCONTAINEROBJECT__,RPC_ISTERMINAL__,RPC_ISGROUPOBJECT__,RPC_ISGUILDOBJECT__,RPC_ISCONTROLDEVICE__,RPC_ISMISSIONTERMINAL__,RPC_ISMISSIONOBJECT__,RPC_GETPLANETMAPCATEGORYCRC__,RPC_GETPLANETMAPSUBCATEGORYCRC__,RPC_CONTAINSCHILDOBJECT__SCENEOBJECT_,RPC_CREATECHILDOBJECTS__,RPC_INITIALIZECHILDOBJECT__SCENEOBJECT_};

SceneObject::SceneObject() : QuadTreeEntry(DummyConstructorParameter::instance()) {
	SceneObjectImplementation* _implementation = new SceneObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

SceneObject::SceneObject(DummyConstructorParameter* param) : QuadTreeEntry(param) {
}

SceneObject::~SceneObject() {
}


void SceneObject::initializePrivateData() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZEPRIVATEDATA__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializePrivateData();
}

void SceneObject::loadTemplateData(SharedObjectTemplate* templateData) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->loadTemplateData(templateData);
}

void SceneObject::createComponents() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATECOMPONENTS__);

		method.executeWithVoidReturn();
	} else
		_implementation->createComponents();
}

void SceneObject::createContainerComponent() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATECONTAINERCOMPONENT__);

		method.executeWithVoidReturn();
	} else
		_implementation->createContainerComponent();
}

void SceneObject::initializeTransientMembers() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void SceneObject::notifyLoadFromDatabase() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYLOADFROMDATABASE__);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyLoadFromDatabase();
}

void SceneObject::info(const String& msg, bool forced) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INFO__STRING_BOOL_);
		method.addAsciiParameter(msg);
		method.addBooleanParameter(forced);

		method.executeWithVoidReturn();
	} else
		_implementation->info(msg, forced);
}

void SceneObject::error(const String& msg) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ERROR__STRING_);
		method.addAsciiParameter(msg);

		method.executeWithVoidReturn();
	} else
		_implementation->error(msg);
}

int SceneObject::inRangeObjects(unsigned int gameObjectType, float range) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INRANGEOBJECTS__INT_FLOAT_);
		method.addUnsignedIntParameter(gameObjectType);
		method.addFloatParameter(range);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->inRangeObjects(gameObjectType, range);
}

bool SceneObject::isInRange(SceneObject* obj, float range) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISINRANGE__SCENEOBJECT_FLOAT_);
		method.addObjectParameter(obj);
		method.addFloatParameter(range);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isInRange(obj, range);
}

bool SceneObject::addObject(SceneObject* object, int containmentType, bool notifyClient) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDOBJECT__SCENEOBJECT_INT_BOOL_);
		method.addObjectParameter(object);
		method.addSignedIntParameter(containmentType);
		method.addBooleanParameter(notifyClient);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->addObject(object, containmentType, notifyClient);
}

bool SceneObject::removeObject(SceneObject* object, bool notifyClient) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEOBJECT__SCENEOBJECT_BOOL_);
		method.addObjectParameter(object);
		method.addBooleanParameter(notifyClient);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->removeObject(object, notifyClient);
}

int SceneObject::canAddObject(SceneObject* object, int containmentType, String& errorDescription) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CANADDOBJECT__SCENEOBJECT_INT_STRING_);
		method.addObjectParameter(object);
		method.addSignedIntParameter(containmentType);
		method.addAsciiParameter(errorDescription);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->canAddObject(object, containmentType, errorDescription);
}

void SceneObject::synchronizedUIListen(SceneObject* player, int value) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SYNCHRONIZEDUILISTEN__SCENEOBJECT_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->synchronizedUIListen(player, value);
}

void SceneObject::synchronizedUIStopListen(SceneObject* player, int value) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SYNCHRONIZEDUISTOPLISTEN__SCENEOBJECT_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->synchronizedUIStopListen(player, value);
}

void SceneObject::updateToDatabase() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATETODATABASE__);

		method.executeWithVoidReturn();
	} else
		_implementation->updateToDatabase();
}

void SceneObject::updateToDatabaseWithoutChildren() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATETODATABASEWITHOUTCHILDREN__);

		method.executeWithVoidReturn();
	} else
		_implementation->updateToDatabaseWithoutChildren();
}

void SceneObject::updateToDatabaseAllObjects(bool startTask) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATETODATABASEALLOBJECTS__BOOL_);
		method.addBooleanParameter(startTask);

		method.executeWithVoidReturn();
	} else
		_implementation->updateToDatabaseAllObjects(startTask);
}

void SceneObject::destroyObjectFromDatabase(bool destroyContainedObjects) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DESTROYOBJECTFROMDATABASE__BOOL_);
		method.addBooleanParameter(destroyContainedObjects);

		method.executeWithVoidReturn();
	} else
		_implementation->destroyObjectFromDatabase(destroyContainedObjects);
}

int SceneObject::canBeDestroyed(CreatureObject* player) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CANBEDESTROYED__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->canBeDestroyed(player);
}

void SceneObject::create(ZoneClientSession* client) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATE__ZONECLIENTSESSION_);
		method.addObjectParameter(client);

		method.executeWithVoidReturn();
	} else
		_implementation->create(client);
}

void SceneObject::destroy(ZoneClientSession* client) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DESTROY__ZONECLIENTSESSION_);
		method.addObjectParameter(client);

		method.executeWithVoidReturn();
	} else
		_implementation->destroy(client);
}

void SceneObject::close(ZoneClientSession* client) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLOSE__ZONECLIENTSESSION_);
		method.addObjectParameter(client);

		method.executeWithVoidReturn();
	} else
		_implementation->close(client);
}

void SceneObject::link(ZoneClientSession* client, unsigned int containmentType) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_LINK__ZONECLIENTSESSION_INT_);
		method.addObjectParameter(client);
		method.addUnsignedIntParameter(containmentType);

		method.executeWithVoidReturn();
	} else
		_implementation->link(client, containmentType);
}

BaseMessage* SceneObject::link(unsigned long long objectID, unsigned int containmentType) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_LINK__LONG_INT_);
		method.addUnsignedLongParameter(objectID);
		method.addUnsignedIntParameter(containmentType);

		return (BaseMessage*) method.executeWithObjectReturn();
	} else
		return _implementation->link(objectID, containmentType);
}

void SceneObject::sendTo(SceneObject* player, bool doClose) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDTO__SCENEOBJECT_BOOL_);
		method.addObjectParameter(player);
		method.addBooleanParameter(doClose);

		method.executeWithVoidReturn();
	} else
		_implementation->sendTo(player, doClose);
}

void SceneObject::sendWithoutParentTo(SceneObject* player) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDWITHOUTPARENTTO__SCENEOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendWithoutParentTo(player);
}

void SceneObject::sendWithoutContainerObjectsTo(SceneObject* player) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDWITHOUTCONTAINEROBJECTSTO__SCENEOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendWithoutContainerObjectsTo(player);
}

void SceneObject::sendDestroyTo(SceneObject* player) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDDESTROYTO__SCENEOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendDestroyTo(player);
}

void SceneObject::sendBaselinesTo(SceneObject* player) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDBASELINESTO__SCENEOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendBaselinesTo(player);
}

void SceneObject::sendContainerObjectsTo(SceneObject* player) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDCONTAINEROBJECTSTO__SCENEOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendContainerObjectsTo(player);
}

void SceneObject::sendSlottedObjectsTo(SceneObject* player) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDSLOTTEDOBJECTSTO__SCENEOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendSlottedObjectsTo(player);
}

void SceneObject::sendToOwner(bool doClose) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDTOOWNER__BOOL_);
		method.addBooleanParameter(doClose);

		method.executeWithVoidReturn();
	} else
		_implementation->sendToOwner(doClose);
}

void SceneObject::sendAttributeListTo(CreatureObject* object) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDATTRIBUTELISTTO__CREATUREOBJECT_);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		_implementation->sendAttributeListTo(object);
}

void SceneObject::fillAttributeList(AttributeListMessage* msg, CreatureObject* object) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->fillAttributeList(msg, object);
}

void SceneObject::setCustomObjectName(const UnicodeString& name, bool notifyClient) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCUSTOMOBJECTNAME__UNICODESTRING_BOOL_);
		method.addUnicodeParameter(name);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setCustomObjectName(name, notifyClient);
}

void SceneObject::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->fillObjectMenuResponse(menuResponse, player);
}

void SceneObject::openContainerTo(CreatureObject* player) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_OPENCONTAINERTO__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->openContainerTo(player);
}

void SceneObject::closeContainerTo(CreatureObject* player, bool notify) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLOSECONTAINERTO__CREATUREOBJECT_BOOL_);
		method.addObjectParameter(player);
		method.addBooleanParameter(notify);

		method.executeWithVoidReturn();
	} else
		_implementation->closeContainerTo(player, notify);
}

void SceneObject::insertToZone(Zone* zone) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INSERTTOZONE__ZONE_);
		method.addObjectParameter(zone);

		method.executeWithVoidReturn();
	} else
		_implementation->insertToZone(zone);
}

void SceneObject::insertToBuilding(BuildingObject* building) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INSERTTOBUILDING__BUILDINGOBJECT_);
		method.addObjectParameter(building);

		method.executeWithVoidReturn();
	} else
		_implementation->insertToBuilding(building);
}

void SceneObject::switchZone(const String& newTerrainName, float newPostionX, float newPositionZ, float newPositionY, unsigned long long parentID) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SWITCHZONE__STRING_FLOAT_FLOAT_FLOAT_LONG_);
		method.addAsciiParameter(newTerrainName);
		method.addFloatParameter(newPostionX);
		method.addFloatParameter(newPositionZ);
		method.addFloatParameter(newPositionY);
		method.addUnsignedLongParameter(parentID);

		method.executeWithVoidReturn();
	} else
		_implementation->switchZone(newTerrainName, newPostionX, newPositionZ, newPositionY, parentID);
}

void SceneObject::teleport(float newPositionX, float newPositionZ, float newPositionY, unsigned long long parentID) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_TELEPORT__FLOAT_FLOAT_FLOAT_LONG_);
		method.addFloatParameter(newPositionX);
		method.addFloatParameter(newPositionZ);
		method.addFloatParameter(newPositionY);
		method.addUnsignedLongParameter(parentID);

		method.executeWithVoidReturn();
	} else
		_implementation->teleport(newPositionX, newPositionZ, newPositionY, parentID);
}

void SceneObject::updateDirection(float fw, float fx, float fy, float fz) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATEDIRECTION__FLOAT_FLOAT_FLOAT_FLOAT_);
		method.addFloatParameter(fw);
		method.addFloatParameter(fx);
		method.addFloatParameter(fy);
		method.addFloatParameter(fz);

		method.executeWithVoidReturn();
	} else
		_implementation->updateDirection(fw, fx, fy, fz);
}

void SceneObject::notifyInsert(QuadTreeEntry* entry) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->notifyInsert(entry);
}

void SceneObject::notifyDissapear(QuadTreeEntry* entry) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->notifyDissapear(entry);
}

void SceneObject::removeFromZone() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEFROMZONE__);

		method.executeWithVoidReturn();
	} else
		_implementation->removeFromZone();
}

void SceneObject::removeFromBuilding(BuildingObject* building) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEFROMBUILDING__BUILDINGOBJECT_);
		method.addObjectParameter(building);

		method.executeWithVoidReturn();
	} else
		_implementation->removeFromBuilding(building);
}

void SceneObject::updateZone(bool lightUpdate, bool sendPackets) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATEZONE__BOOL_BOOL_);
		method.addBooleanParameter(lightUpdate);
		method.addBooleanParameter(sendPackets);

		method.executeWithVoidReturn();
	} else
		_implementation->updateZone(lightUpdate, sendPackets);
}

void SceneObject::updateZoneWithParent(SceneObject* newParent, bool lightUpdate, bool sendPackets) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATEZONEWITHPARENT__SCENEOBJECT_BOOL_BOOL_);
		method.addObjectParameter(newParent);
		method.addBooleanParameter(lightUpdate);
		method.addBooleanParameter(sendPackets);

		method.executeWithVoidReturn();
	} else
		_implementation->updateZoneWithParent(newParent, lightUpdate, sendPackets);
}

void SceneObject::broadcastMessage(BasePacket* message, bool sendSelf, bool lockZone) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_BROADCASTMESSAGE__BASEPACKET_BOOL_BOOL_);
		method.addObjectParameter(message);
		method.addBooleanParameter(sendSelf);
		method.addBooleanParameter(lockZone);

		method.executeWithVoidReturn();
	} else
		_implementation->broadcastMessage(message, sendSelf, lockZone);
}

void SceneObject::broadcastObject(SceneObject* object, bool sendSelf) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_BROADCASTOBJECT__SCENEOBJECT_BOOL_);
		method.addObjectParameter(object);
		method.addBooleanParameter(sendSelf);

		method.executeWithVoidReturn();
	} else
		_implementation->broadcastObject(object, sendSelf);
}

void SceneObject::broadcastDestroy(SceneObject* object, bool sendSelf) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_BROADCASTDESTROY__SCENEOBJECT_BOOL_);
		method.addObjectParameter(object);
		method.addBooleanParameter(sendSelf);

		method.executeWithVoidReturn();
	} else
		_implementation->broadcastDestroy(object, sendSelf);
}

void SceneObject::broadcastMessages(Vector<BasePacket*>* messages, bool sendSelf) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->broadcastMessages(messages, sendSelf);
}

void SceneObject::sendMessage(BasePacket* msg) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDMESSAGE__BASEPACKET_);
		method.addObjectParameter(msg);

		method.executeWithVoidReturn();
	} else
		_implementation->sendMessage(msg);
}

int SceneObject::compareTo(SceneObject* obj) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_COMPARETO__SCENEOBJECT_);
		method.addObjectParameter(obj);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->compareTo(obj);
}

void SceneObject::getSlottedObjects(VectorMap<String, ManagedReference<SceneObject* > >& objects) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->getSlottedObjects(objects);
}

unsigned long long SceneObject::getParentID() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPARENTID__);

		return method.executeWithUnsignedLongReturn();
	} else
		return _implementation->getParentID();
}

void SceneObject::addPendingTask(const String& name, Task* task) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->addPendingTask(name, task);
}

void SceneObject::removePendingTask(const String& name) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->removePendingTask(name);
}

Task* SceneObject::getPendingTask(const String& name) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getPendingTask(name);
}

void SceneObject::showFlyText(const String& file, const String& uax, byte red, byte green, byte blue) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SHOWFLYTEXT__STRING_STRING_BYTE_BYTE_BYTE_);
		method.addAsciiParameter(file);
		method.addAsciiParameter(uax);
		method.addByteParameter(red);
		method.addByteParameter(green);
		method.addByteParameter(blue);

		method.executeWithVoidReturn();
	} else
		_implementation->showFlyText(file, uax, red, green, blue);
}

Facade* SceneObject::getActiveSession(unsigned int type) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETACTIVESESSION__INT_);
		method.addUnsignedIntParameter(type);

		return (Facade*) method.executeWithObjectReturn();
	} else
		return _implementation->getActiveSession(type);
}

void SceneObject::addActiveSession(unsigned int type, Facade* session) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDACTIVESESSION__INT_FACADE_);
		method.addUnsignedIntParameter(type);
		method.addObjectParameter(session);

		method.executeWithVoidReturn();
	} else
		_implementation->addActiveSession(type, session);
}

bool SceneObject::containsActiveSession(unsigned int type) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CONTAINSACTIVESESSION__INT_);
		method.addUnsignedIntParameter(type);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->containsActiveSession(type);
}

bool SceneObject::dropActiveSession(unsigned int type) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DROPACTIVESESSION__INT_);
		method.addUnsignedIntParameter(type);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->dropActiveSession(type);
}

int SceneObject::getActiveSessionsCount() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETACTIVESESSIONSCOUNT__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getActiveSessionsCount();
}

VectorMap<unsigned int, ManagedReference<Facade* > >* SceneObject::getObjectActiveSessions() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getObjectActiveSessions();
}

int SceneObject::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->handleObjectMenuSelect(player, selectedID);
}

void SceneObject::notifyAddedToCloseObjects() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYADDEDTOCLOSEOBJECTS__);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyAddedToCloseObjects();
}

void SceneObject::notifyRemovedFromCloseObjects() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYREMOVEDFROMCLOSEOBJECTS__);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyRemovedFromCloseObjects();
}

float SceneObject::getDistanceTo(SceneObject* object) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDISTANCETO__SCENEOBJECT_);
		method.addObjectParameter(object);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getDistanceTo(object);
}

float SceneObject::getDistanceTo(Coordinate* coordinate) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getDistanceTo(coordinate);
}

void SceneObject::updateVehiclePosition() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATEVEHICLEPOSITION__);

		method.executeWithVoidReturn();
	} else
		_implementation->updateVehiclePosition();
}

int SceneObject::notifyObjectInserted(SceneObject* object) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBJECTINSERTED__SCENEOBJECT_);
		method.addObjectParameter(object);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyObjectInserted(object);
}

int SceneObject::notifyObjectRemoved(SceneObject* object) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBJECTREMOVED__SCENEOBJECT_);
		method.addObjectParameter(object);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyObjectRemoved(object);
}

void SceneObject::addActiveArea(ActiveArea* area) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDACTIVEAREA__ACTIVEAREA_);
		method.addObjectParameter(area);

		method.executeWithVoidReturn();
	} else
		_implementation->addActiveArea(area);
}

void SceneObject::dropActiveArea(ActiveArea* area) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DROPACTIVEAREA__ACTIVEAREA_);
		method.addObjectParameter(area);

		method.executeWithVoidReturn();
	} else
		_implementation->dropActiveArea(area);
}

bool SceneObject::hasActiveArea(ActiveArea* area) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASACTIVEAREA__ACTIVEAREA_);
		method.addObjectParameter(area);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasActiveArea(area);
}

Vector<ManagedReference<ActiveArea* > >* SceneObject::getActiveAreas() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getActiveAreas();
}

int SceneObject::getActiveAreasSize() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETACTIVEAREASSIZE__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getActiveAreasSize();
}

ActiveArea* SceneObject::getActiveRegion() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETACTIVEREGION__);

		return (ActiveArea*) method.executeWithObjectReturn();
	} else
		return _implementation->getActiveRegion();
}

CityRegion* SceneObject::getCityRegion() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCITYREGION__);

		return (CityRegion*) method.executeWithObjectReturn();
	} else
		return _implementation->getCityRegion();
}

void SceneObject::setCityRegion(CityRegion* region) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCITYREGION__CITYREGION_);
		method.addObjectParameter(region);

		method.executeWithVoidReturn();
	} else
		_implementation->setCityRegion(region);
}

Zone* SceneObject::getZone() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETZONE__);

		return (Zone*) method.executeWithObjectReturn();
	} else
		return _implementation->getZone();
}

unsigned long long SceneObject::getObjectID() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETOBJECTID__);

		return method.executeWithUnsignedLongReturn();
	} else
		return _implementation->getObjectID();
}

Vector3 SceneObject::getCoordinate(float distance, float angleDegrees) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getCoordinate(distance, angleDegrees);
}

float SceneObject::getWorldPositionX() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETWORLDPOSITIONX__);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getWorldPositionX();
}

float SceneObject::getWorldPositionY() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETWORLDPOSITIONY__);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getWorldPositionY();
}

float SceneObject::getWorldPositionZ() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETWORLDPOSITIONZ__);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getWorldPositionZ();
}

Vector3 SceneObject::getWorldPosition() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getWorldPosition();
}

float SceneObject::getDirectionX() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDIRECTIONX__);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getDirectionX();
}

float SceneObject::getDirectionZ() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDIRECTIONZ__);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getDirectionZ();
}

float SceneObject::getDirectionY() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDIRECTIONY__);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getDirectionY();
}

float SceneObject::getDirectionW() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDIRECTIONW__);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getDirectionW();
}

Quaternion* SceneObject::getDirection() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getDirection();
}

unsigned int SceneObject::getClientObjectCRC() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCLIENTOBJECTCRC__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getClientObjectCRC();
}

unsigned int SceneObject::getServerObjectCRC() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSERVEROBJECTCRC__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getServerObjectCRC();
}

bool SceneObject::isWaypointObject() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISWAYPOINTOBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isWaypointObject();
}

StringId* SceneObject::getObjectName() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getObjectName();
}

String SceneObject::getObjectNameStringIdFile() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETOBJECTNAMESTRINGIDFILE__);

		method.executeWithAsciiReturn(_return_getObjectNameStringIdFile);
		return _return_getObjectNameStringIdFile;
	} else
		return _implementation->getObjectNameStringIdFile();
}

String SceneObject::getObjectNameStringIdName() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETOBJECTNAMESTRINGIDNAME__);

		method.executeWithAsciiReturn(_return_getObjectNameStringIdName);
		return _return_getObjectNameStringIdName;
	} else
		return _implementation->getObjectNameStringIdName();
}

String SceneObject::getDetailedDescription() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getDetailedDescription();
}

int SceneObject::getArrangementDescriptorSize() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETARRANGEMENTDESCRIPTORSIZE__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getArrangementDescriptorSize();
}

String SceneObject::getArrangementDescriptor(int idx) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETARRANGEMENTDESCRIPTOR__INT_);
		method.addSignedIntParameter(idx);

		method.executeWithAsciiReturn(_return_getArrangementDescriptor);
		return _return_getArrangementDescriptor;
	} else
		return _implementation->getArrangementDescriptor(idx);
}

String SceneObject::getSlotDescriptor(int idx) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSLOTDESCRIPTOR__INT_);
		method.addSignedIntParameter(idx);

		method.executeWithAsciiReturn(_return_getSlotDescriptor);
		return _return_getSlotDescriptor;
	} else
		return _implementation->getSlotDescriptor(idx);
}

bool SceneObject::hasSlotDescriptor(const String& descr) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASSLOTDESCRIPTOR__STRING_);
		method.addAsciiParameter(descr);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasSlotDescriptor(descr);
}

VectorMap<String, ManagedReference<SceneObject* > >* SceneObject::getSlottedObjects() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getSlottedObjects();
}

SceneObject* SceneObject::getSlottedObject(const String& slot) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSLOTTEDOBJECT__STRING_);
		method.addAsciiParameter(slot);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return _implementation->getSlottedObject(slot);
}

int SceneObject::getSlotDescriptorSize() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSLOTDESCRIPTORSIZE__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getSlotDescriptorSize();
}

SceneObject* SceneObject::getSlottedObject(int idx) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSLOTTEDOBJECT__INT_);
		method.addSignedIntParameter(idx);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return _implementation->getSlottedObject(idx);
}

void SceneObject::dropSlottedObject(const String& arrengementDescriptor) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DROPSLOTTEDOBJECT__STRING_);
		method.addAsciiParameter(arrengementDescriptor);

		method.executeWithVoidReturn();
	} else
		_implementation->dropSlottedObject(arrengementDescriptor);
}

void SceneObject::removeSlottedObject(int index) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVESLOTTEDOBJECT__INT_);
		method.addSignedIntParameter(index);

		method.executeWithVoidReturn();
	} else
		_implementation->removeSlottedObject(index);
}

int SceneObject::getContainerObjectsSize() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCONTAINEROBJECTSSIZE__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getContainerObjectsSize();
}

int SceneObject::getSlottedObjectsSize() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSLOTTEDOBJECTSSIZE__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getSlottedObjectsSize();
}

bool SceneObject::hasFullContainerObjects() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASFULLCONTAINEROBJECTS__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasFullContainerObjects();
}

unsigned int SceneObject::getContainerVolumeLimit() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCONTAINERVOLUMELIMIT__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getContainerVolumeLimit();
}

SceneObject* SceneObject::getContainerObject(int idx) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCONTAINEROBJECT__INT_);
		method.addSignedIntParameter(idx);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return _implementation->getContainerObject(idx);
}

VectorMap<unsigned long long, ManagedReference<SceneObject* > >* SceneObject::getContainerObjects() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getContainerObjects();
}

bool SceneObject::hasObjectInContainer(unsigned long long objectID) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASOBJECTINCONTAINER__LONG_);
		method.addUnsignedLongParameter(objectID);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasObjectInContainer(objectID);
}

bool SceneObject::hasObjectInSlottedContainer(SceneObject* object) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASOBJECTINSLOTTEDCONTAINER__SCENEOBJECT_);
		method.addObjectParameter(object);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasObjectInSlottedContainer(object);
}

SceneObject* SceneObject::getContainerObject(unsigned long long objectID) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCONTAINEROBJECT__LONG_);
		method.addUnsignedLongParameter(objectID);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return _implementation->getContainerObject(objectID);
}

void SceneObject::removeAllContainerObjects() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEALLCONTAINEROBJECTS__);

		method.executeWithVoidReturn();
	} else
		_implementation->removeAllContainerObjects();
}

void SceneObject::putInContainer(SceneObject* obj, unsigned long long key) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_PUTINCONTAINER__SCENEOBJECT_LONG_);
		method.addObjectParameter(obj);
		method.addUnsignedLongParameter(key);

		method.executeWithVoidReturn();
	} else
		_implementation->putInContainer(obj, key);
}

void SceneObject::removeFromContainerObjects(int index) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEFROMCONTAINEROBJECTS__INT_);
		method.addSignedIntParameter(index);

		method.executeWithVoidReturn();
	} else
		_implementation->removeFromContainerObjects(index);
}

void SceneObject::setContainerVolumeLimit(int lim) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCONTAINERVOLUMELIMIT__INT_);
		method.addSignedIntParameter(lim);

		method.executeWithVoidReturn();
	} else
		_implementation->setContainerVolumeLimit(lim);
}

void SceneObject::setContainerType(int type) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCONTAINERTYPE__INT_);
		method.addSignedIntParameter(type);

		method.executeWithVoidReturn();
	} else
		_implementation->setContainerType(type);
}

unsigned int SceneObject::getContainerType() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCONTAINERTYPE__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getContainerType();
}

ZoneClientSession* SceneObject::getClient() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCLIENT__);

		return (ZoneClientSession*) method.executeWithObjectReturn();
	} else
		return _implementation->getClient();
}

unsigned int SceneObject::getGameObjectType() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGAMEOBJECTTYPE__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getGameObjectType();
}

unsigned int SceneObject::getClientGameObjectType() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCLIENTGAMEOBJECTTYPE__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getClientGameObjectType();
}

unsigned int SceneObject::getContainmentType() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCONTAINMENTTYPE__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getContainmentType();
}

float SceneObject::getDirectionAngle() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDIRECTIONANGLE__);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getDirectionAngle();
}

float SceneObject::getSpecialDirectionAngle() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSPECIALDIRECTIONANGLE__);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getSpecialDirectionAngle();
}

void SceneObject::rotate(int degrees) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ROTATE__INT_);
		method.addSignedIntParameter(degrees);

		method.executeWithVoidReturn();
	} else
		_implementation->rotate(degrees);
}

void SceneObject::faceObject(SceneObject* obj) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_FACEOBJECT__SCENEOBJECT_);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		_implementation->faceObject(obj);
}

void SceneObject::notifySelfPositionUpdate() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYSELFPOSITIONUPDATE__);

		method.executeWithVoidReturn();
	} else
		_implementation->notifySelfPositionUpdate();
}

void SceneObject::notifyPositionUpdate(QuadTreeEntry* entry) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYPOSITIONUPDATE__QUADTREEENTRY_);
		method.addObjectParameter(entry);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyPositionUpdate(entry);
}

void SceneObject::notifyCloseContainer(CreatureObject* player) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYCLOSECONTAINER__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyCloseContainer(player);
}

unsigned int SceneObject::getMovementCounter() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMOVEMENTCOUNTER__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getMovementCounter();
}

SceneObject* SceneObject::getParent() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPARENT__);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return _implementation->getParent();
}

ZoneServer* SceneObject::getZoneServer() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETZONESERVER__);

		return (ZoneServer*) method.executeWithObjectReturn();
	} else
		return _implementation->getZoneServer();
}

SceneObject* SceneObject::getRootParent() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETROOTPARENT__);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return _implementation->getRootParent();
}

SceneObject* SceneObject::getParentRecursively(unsigned int gameObjectType) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPARENTRECURSIVELY__INT_);
		method.addUnsignedIntParameter(gameObjectType);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return _implementation->getParentRecursively(gameObjectType);
}

bool SceneObject::isASubChildOf(SceneObject* object) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISASUBCHILDOF__SCENEOBJECT_);
		method.addObjectParameter(object);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isASubChildOf(object);
}

UnicodeString SceneObject::getCustomObjectName() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCUSTOMOBJECTNAME__);

		method.executeWithUnicodeReturn(_return_getCustomObjectName);
		return _return_getCustomObjectName;
	} else
		return _implementation->getCustomObjectName();
}

String SceneObject::getLoggingName() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETLOGGINGNAME__);

		method.executeWithAsciiReturn(_return_getLoggingName);
		return _return_getLoggingName;
	} else
		return _implementation->getLoggingName();
}

bool SceneObject::isPlayerCreature() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISPLAYERCREATURE__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isPlayerCreature();
}

bool SceneObject::isVendor() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISVENDOR__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isVendor();
}

ZoneComponent* SceneObject::getZoneComponent() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getZoneComponent();
}

ObjectMenuComponent* SceneObject::getObjectMenuComponent() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getObjectMenuComponent();
}

bool SceneObject::isContainerFull() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCONTAINERFULL__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isContainerFull();
}

bool SceneObject::isShuttleInstallation() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSHUTTLEINSTALLATION__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isShuttleInstallation();
}

bool SceneObject::isPlayerObject() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISPLAYEROBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isPlayerObject();
}

bool SceneObject::isActiveArea() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISACTIVEAREA__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isActiveArea();
}

bool SceneObject::isRegion() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISREGION__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isRegion();
}

bool SceneObject::isCreatureObject() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCREATUREOBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isCreatureObject();
}

bool SceneObject::isVehicleObject() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISVEHICLEOBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isVehicleObject();
}

bool SceneObject::isBuildingObject() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISBUILDINGOBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isBuildingObject();
}

bool SceneObject::isCloningBuildingObject() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCLONINGBUILDINGOBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isCloningBuildingObject();
}

bool SceneObject::isGarage() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISGARAGE__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isGarage();
}

bool SceneObject::isWeaponObject() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISWEAPONOBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isWeaponObject();
}

bool SceneObject::isWearableObject() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISWEARABLEOBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isWearableObject();
}

bool SceneObject::isArmorObject() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISARMOROBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isArmorObject();
}

bool SceneObject::isPsgArmorObject() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISPSGARMOROBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isPsgArmorObject();
}

bool SceneObject::isCellObject() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCELLOBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isCellObject();
}

bool SceneObject::isTangibleObject() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISTANGIBLEOBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isTangibleObject();
}

bool SceneObject::isResourceContainer() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISRESOURCECONTAINER__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isResourceContainer();
}

bool SceneObject::isComponent() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCOMPONENT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isComponent();
}

bool SceneObject::isIntangibleObject() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISINTANGIBLEOBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isIntangibleObject();
}

bool SceneObject::isInstrument() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISINSTRUMENT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isInstrument();
}

bool SceneObject::isInstallationObject() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISINSTALLATIONOBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isInstallationObject();
}

bool SceneObject::isCityTerminal() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCITYTERMINAL__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isCityTerminal();
}

bool SceneObject::isCityVoteTerminal() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCITYVOTETERMINAL__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isCityVoteTerminal();
}

bool SceneObject::isFactory() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISFACTORY__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isFactory();
}

bool SceneObject::isFactoryCrate() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISFACTORYCRATE__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isFactoryCrate();
}

bool SceneObject::isFishingPoleObject() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISFISHINGPOLEOBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isFishingPoleObject();
}

bool SceneObject::isDeedObject() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISDEEDOBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isDeedObject();
}

bool SceneObject::isVehicleDeedObject() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISVEHICLEDEEDOBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isVehicleDeedObject();
}

bool SceneObject::isBuildingDeed() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISBUILDINGDEED__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isBuildingDeed();
}

bool SceneObject::isSignObject() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSIGNOBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isSignObject();
}

bool SceneObject::isInstallationDeed() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISINSTALLATIONDEED__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isInstallationDeed();
}

bool SceneObject::isCraftingTool() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCRAFTINGTOOL__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isCraftingTool();
}

bool SceneObject::isCraftingStation() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCRAFTINGSTATION__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isCraftingStation();
}

bool SceneObject::isManufactureSchematic() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISMANUFACTURESCHEMATIC__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isManufactureSchematic();
}

bool SceneObject::isStructureObject() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSTRUCTUREOBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isStructureObject();
}

bool SceneObject::isFishingBait() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISFISHINGBAIT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isFishingBait();
}

bool SceneObject::isAttachment() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISATTACHMENT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isAttachment();
}

void SceneObject::setGameObjectType(unsigned int type) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETGAMEOBJECTTYPE__INT_);
		method.addUnsignedIntParameter(type);

		method.executeWithVoidReturn();
	} else
		_implementation->setGameObjectType(type);
}

void SceneObject::setClientObjectCRC(unsigned int objCRC) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCLIENTOBJECTCRC__INT_);
		method.addUnsignedIntParameter(objCRC);

		method.executeWithVoidReturn();
	} else
		_implementation->setClientObjectCRC(objCRC);
}

void SceneObject::setServerObjectCRC(unsigned int objCRC) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSERVEROBJECTCRC__INT_);
		method.addUnsignedIntParameter(objCRC);

		method.executeWithVoidReturn();
	} else
		_implementation->setServerObjectCRC(objCRC);
}

void SceneObject::setParent(SceneObject* par) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPARENT__SCENEOBJECT_);
		method.addObjectParameter(par);

		method.executeWithVoidReturn();
	} else
		_implementation->setParent(par);
}

void SceneObject::setZoneProcessServer(ZoneProcessServer* srv) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->setZoneProcessServer(srv);
}

void SceneObject::setZone(Zone* zone) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETZONE__ZONE_);
		method.addObjectParameter(zone);

		method.executeWithVoidReturn();
	} else
		_implementation->setZone(zone);
}

void SceneObject::setObjectName(StringId& stringID) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->setObjectName(stringID);
}

void SceneObject::setDirection(float fw, float fx, float fy, float fz) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETDIRECTION__FLOAT_FLOAT_FLOAT_FLOAT_);
		method.addFloatParameter(fw);
		method.addFloatParameter(fx);
		method.addFloatParameter(fy);
		method.addFloatParameter(fz);

		method.executeWithVoidReturn();
	} else
		_implementation->setDirection(fw, fx, fy, fz);
}

void SceneObject::setDirection(float headingAngleRadians) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETDIRECTION__FLOAT_);
		method.addFloatParameter(headingAngleRadians);

		method.executeWithVoidReturn();
	} else
		_implementation->setDirection(headingAngleRadians);
}

void SceneObject::setDirection(const Quaternion& dir) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->setDirection(dir);
}

void SceneObject::setMovementCounter(unsigned int count) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMOVEMENTCOUNTER__INT_);
		method.addUnsignedIntParameter(count);

		method.executeWithVoidReturn();
	} else
		_implementation->setMovementCounter(count);
}

void SceneObject::incrementMovementCounter() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INCREMENTMOVEMENTCOUNTER__);

		method.executeWithVoidReturn();
	} else
		_implementation->incrementMovementCounter();
}

void SceneObject::setContainmentType(unsigned int type) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCONTAINMENTTYPE__INT_);
		method.addUnsignedIntParameter(type);

		method.executeWithVoidReturn();
	} else
		_implementation->setContainmentType(type);
}

void SceneObject::setLoggingName(const String& name) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETLOGGINGNAME__STRING_);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		_implementation->setLoggingName(name);
}

void SceneObject::setClientObject(bool val) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCLIENTOBJECT__BOOL_);
		method.addBooleanParameter(val);

		method.executeWithVoidReturn();
	} else
		_implementation->setClientObject(val);
}

unsigned int SceneObject::getPlanetCRC() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPLANETCRC__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getPlanetCRC();
}

bool SceneObject::isStaticObject() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSTATICOBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isStaticObject();
}

bool SceneObject::isContainerObject() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCONTAINEROBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isContainerObject();
}

bool SceneObject::isTerminal() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISTERMINAL__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isTerminal();
}

bool SceneObject::isGroupObject() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISGROUPOBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isGroupObject();
}

bool SceneObject::isGuildObject() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISGUILDOBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isGuildObject();
}

bool SceneObject::isControlDevice() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCONTROLDEVICE__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isControlDevice();
}

bool SceneObject::isMissionTerminal() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISMISSIONTERMINAL__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isMissionTerminal();
}

bool SceneObject::isMissionObject() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISMISSIONOBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isMissionObject();
}

int SceneObject::getPlanetMapCategoryCRC() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPLANETMAPCATEGORYCRC__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getPlanetMapCategoryCRC();
}

int SceneObject::getPlanetMapSubCategoryCRC() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPLANETMAPSUBCATEGORYCRC__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getPlanetMapSubCategoryCRC();
}

void SceneObject::setPlanetMapCategory(PlanetMapCategory* pmc) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->setPlanetMapCategory(pmc);
}

void SceneObject::setPlanetMapSubCategory(PlanetMapCategory* pmc) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->setPlanetMapSubCategory(pmc);
}

PlanetMapCategory* SceneObject::getPlanetMapCategory() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getPlanetMapCategory();
}

PlanetMapCategory* SceneObject::getPlanetMapSubCategory() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getPlanetMapSubCategory();
}

SortedVector<ManagedReference<SceneObject* > >* SceneObject::getChildObjects() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getChildObjects();
}

bool SceneObject::containsChildObject(SceneObject* obj) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CONTAINSCHILDOBJECT__SCENEOBJECT_);
		method.addObjectParameter(obj);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->containsChildObject(obj);
}

SharedObjectTemplate* SceneObject::getObjectTemplate() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getObjectTemplate();
}

void SceneObject::createChildObjects() {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATECHILDOBJECTS__);

		method.executeWithVoidReturn();
	} else
		_implementation->createChildObjects();
}

void SceneObject::initializeChildObject(SceneObject* controllerObject) {
	SceneObjectImplementation* _implementation = (SceneObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZECHILDOBJECT__SCENEOBJECT_);
		method.addObjectParameter(controllerObject);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeChildObject(controllerObject);
}

DistributedObjectServant* SceneObject::_getImplementation() {

	_updated = true;
	return _impl;
}

void SceneObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	SceneObjectImplementation
 */

SceneObjectImplementation::SceneObjectImplementation(DummyConstructorParameter* param) : QuadTreeEntryImplementation(param) {
	_initializeImplementation();
}


SceneObjectImplementation::~SceneObjectImplementation() {
	SceneObjectImplementation::finalize();
}


void SceneObjectImplementation::_initializeImplementation() {
	_setClassHelper(SceneObjectHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void SceneObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (SceneObject*) stub;
	QuadTreeEntryImplementation::_setStub(stub);
}

DistributedObjectStub* SceneObjectImplementation::_getStub() {
	return _this;
}

SceneObjectImplementation::operator const SceneObject*() {
	return _this;
}

void SceneObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void SceneObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void SceneObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void SceneObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void SceneObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void SceneObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void SceneObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void SceneObjectImplementation::_serializationHelperMethod() {
	QuadTreeEntryImplementation::_serializationHelperMethod();

	_setClassName("SceneObject");

}

void SceneObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(SceneObjectImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool SceneObjectImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (QuadTreeEntryImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "slottedObjects") {
		TypeInfo<VectorMap<String, ManagedReference<SceneObject* > > >::parseFromBinaryStream(&slottedObjects, stream);
		return true;
	}

	if (_name == "containerObjects") {
		TypeInfo<VectorMap<unsigned long long, ManagedReference<SceneObject* > > >::parseFromBinaryStream(&containerObjects, stream);
		return true;
	}

	if (_name == "containerType") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&containerType, stream);
		return true;
	}

	if (_name == "containerVolumeLimit") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&containerVolumeLimit, stream);
		return true;
	}

	if (_name == "zone") {
		TypeInfo<ZoneReference >::parseFromBinaryStream(&zone, stream);
		return true;
	}

	if (_name == "activeAreas") {
		TypeInfo<SortedVector<ManagedReference<ActiveArea* > > >::parseFromBinaryStream(&activeAreas, stream);
		return true;
	}

	if (_name == "parent") {
		TypeInfo<ManagedWeakReference<SceneObject* > >::parseFromBinaryStream(&parent, stream);
		return true;
	}

	if (_name == "childObjects") {
		TypeInfo<SortedVector<ManagedReference<SceneObject* > > >::parseFromBinaryStream(&childObjects, stream);
		return true;
	}

	if (_name == "serverObjectCRC") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&serverObjectCRC, stream);
		return true;
	}

	if (_name == "clientObjectCRC") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&clientObjectCRC, stream);
		return true;
	}

	if (_name == "direction") {
		TypeInfo<Quaternion >::parseFromBinaryStream(&direction, stream);
		return true;
	}

	if (_name == "movementCounter") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&movementCounter, stream);
		return true;
	}

	if (_name == "objectName") {
		TypeInfo<StringId >::parseFromBinaryStream(&objectName, stream);
		return true;
	}

	if (_name == "staticObject") {
		TypeInfo<bool >::parseFromBinaryStream(&staticObject, stream);
		return true;
	}

	if (_name == "objectActiveSessions") {
		TypeInfo<VectorMap<unsigned int, ManagedReference<Facade* > > >::parseFromBinaryStream(&objectActiveSessions, stream);
		return true;
	}

	if (_name == "gameObjectType") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&gameObjectType, stream);
		return true;
	}

	if (_name == "clientGameObjectType") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&clientGameObjectType, stream);
		return true;
	}

	if (_name == "containmentType") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&containmentType, stream);
		return true;
	}

	if (_name == "planetMapCategory") {
		TypeInfo<int >::parseFromBinaryStream(&planetMapCategory, stream);
		return true;
	}

	if (_name == "planetMapSubCategory") {
		TypeInfo<int >::parseFromBinaryStream(&planetMapSubCategory, stream);
		return true;
	}


	return false;
}

void SceneObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = SceneObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int SceneObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "slottedObjects";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<VectorMap<String, ManagedReference<SceneObject* > > >::toBinaryStream(&slottedObjects, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "containerObjects";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<VectorMap<unsigned long long, ManagedReference<SceneObject* > > >::toBinaryStream(&containerObjects, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "containerType";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned int >::toBinaryStream(&containerType, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "containerVolumeLimit";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned int >::toBinaryStream(&containerVolumeLimit, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "zone";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ZoneReference >::toBinaryStream(&zone, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "activeAreas";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<SortedVector<ManagedReference<ActiveArea* > > >::toBinaryStream(&activeAreas, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "parent";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedWeakReference<SceneObject* > >::toBinaryStream(&parent, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "childObjects";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<SortedVector<ManagedReference<SceneObject* > > >::toBinaryStream(&childObjects, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "serverObjectCRC";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned int >::toBinaryStream(&serverObjectCRC, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "clientObjectCRC";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned int >::toBinaryStream(&clientObjectCRC, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "direction";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<Quaternion >::toBinaryStream(&direction, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "movementCounter";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned int >::toBinaryStream(&movementCounter, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "objectName";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<StringId >::toBinaryStream(&objectName, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "staticObject";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<bool >::toBinaryStream(&staticObject, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "objectActiveSessions";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<VectorMap<unsigned int, ManagedReference<Facade* > > >::toBinaryStream(&objectActiveSessions, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "gameObjectType";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned int >::toBinaryStream(&gameObjectType, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "clientGameObjectType";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned int >::toBinaryStream(&clientGameObjectType, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "containmentType";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned int >::toBinaryStream(&containmentType, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "planetMapCategory";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&planetMapCategory, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "planetMapSubCategory";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&planetMapSubCategory, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 20 + QuadTreeEntryImplementation::writeObjectMembers(stream);
}

SceneObjectImplementation::SceneObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/scene/SceneObject.idl():  		initializePrivateData();
	initializePrivateData();
}

void SceneObjectImplementation::finalize() {
}

void SceneObjectImplementation::info(const String& msg, bool forced) {
	// server/zone/objects/scene/SceneObject.idl():  		Logger.info(msg, forced);
	Logger::info(msg, forced);
}

void SceneObjectImplementation::error(const String& msg) {
	// server/zone/objects/scene/SceneObject.idl():  		Logger.error(msg);
	Logger::error(msg);
}

void SceneObjectImplementation::synchronizedUIListen(SceneObject* player, int value) {
	// server/zone/objects/scene/SceneObject.idl():  		Logger.info("Unhandled synchronizedUIListen", true);
	Logger::info("Unhandled synchronizedUIListen", true);
}

void SceneObjectImplementation::synchronizedUIStopListen(SceneObject* player, int value) {
	// server/zone/objects/scene/SceneObject.idl():  		Logger.info("Unhandled synchronizedUIStopListen", true);
	Logger::info("Unhandled synchronizedUIStopListen", true);
}

int SceneObjectImplementation::canBeDestroyed(CreatureObject* player) {
	// server/zone/objects/scene/SceneObject.idl():  		return 0;
	return 0;
}

void SceneObjectImplementation::sendBaselinesTo(SceneObject* player) {
}

void SceneObjectImplementation::sendToOwner(bool doClose) {
}

void SceneObjectImplementation::fillAttributeList(AttributeListMessage* msg, CreatureObject* object) {
}

void SceneObjectImplementation::setCustomObjectName(const UnicodeString& name, bool notifyClient) {
	// server/zone/objects/scene/SceneObject.idl():  		objectName.setCustomString(name);
	(&objectName)->setCustomString(name);
}

void SceneObjectImplementation::notifyInsert(QuadTreeEntry* entry) {
	// server/zone/objects/scene/SceneObject.idl():  		zoneComponent.notifyInsert(this, entry);
	zoneComponent->notifyInsert(_this, entry);
}

void SceneObjectImplementation::notifyDissapear(QuadTreeEntry* entry) {
	// server/zone/objects/scene/SceneObject.idl():  		zoneComponent.notifyDissapear(this, entry);
	zoneComponent->notifyDissapear(_this, entry);
}

int SceneObjectImplementation::compareTo(SceneObject* obj) {
	// server/zone/objects/scene/SceneObject.idl():  			return 0;
	if (getObjectID() < obj->getObjectID())	// server/zone/objects/scene/SceneObject.idl():  			return 1;
	return 1;

	else 	// server/zone/objects/scene/SceneObject.idl():  			return 0;
	if (getObjectID() > obj->getObjectID())	// server/zone/objects/scene/SceneObject.idl():  			return -1;
	return -1;

	else 	// server/zone/objects/scene/SceneObject.idl():  			return 0;
	return 0;
}

unsigned long long SceneObjectImplementation::getParentID() {
	// server/zone/objects/scene/SceneObject.idl():  			return 0;
	if (parent != NULL){
	// server/zone/objects/scene/SceneObject.idl():  			return parent.getObjectID();
	return parent->getObjectID();
}

	else 	// server/zone/objects/scene/SceneObject.idl():  			return 0;
	return 0;
}

void SceneObjectImplementation::addPendingTask(const String& name, Task* task) {
	// server/zone/objects/scene/SceneObject.idl():  		pendingTasks.put(name, task);
	(&pendingTasks)->put(name, task);
}

void SceneObjectImplementation::removePendingTask(const String& name) {
	// server/zone/objects/scene/SceneObject.idl():  		pendingTasks.drop(name);
	(&pendingTasks)->drop(name);
}

Task* SceneObjectImplementation::getPendingTask(const String& name) {
	// server/zone/objects/scene/SceneObject.idl():  		return pendingTasks.get(name);
	return (&pendingTasks)->get(name);
}

Facade* SceneObjectImplementation::getActiveSession(unsigned int type) {
	// server/zone/objects/scene/SceneObject.idl():  		return objectActiveSessions.get(type);
	return (&objectActiveSessions)->get(type);
}

void SceneObjectImplementation::addActiveSession(unsigned int type, Facade* session) {
	// server/zone/objects/scene/SceneObject.idl():  		objectActiveSessions.put(type, session);
	(&objectActiveSessions)->put(type, session);
}

bool SceneObjectImplementation::containsActiveSession(unsigned int type) {
	// server/zone/objects/scene/SceneObject.idl():  		return objectActiveSessions.contains(type);
	return (&objectActiveSessions)->contains(type);
}

bool SceneObjectImplementation::dropActiveSession(unsigned int type) {
	// server/zone/objects/scene/SceneObject.idl():  		return objectActiveSessions.drop(type);
	return (&objectActiveSessions)->drop(type);
}

int SceneObjectImplementation::getActiveSessionsCount() {
	// server/zone/objects/scene/SceneObject.idl():  		return objectActiveSessions.size();
	return (&objectActiveSessions)->size();
}

VectorMap<unsigned int, ManagedReference<Facade* > >* SceneObjectImplementation::getObjectActiveSessions() {
	// server/zone/objects/scene/SceneObject.idl():  		return objectActiveSessions;
	return (&objectActiveSessions);
}

int SceneObjectImplementation::notifyObjectInserted(SceneObject* object) {
	// server/zone/objects/scene/SceneObject.idl():  		return 0;
	return 0;
}

int SceneObjectImplementation::notifyObjectRemoved(SceneObject* object) {
	// server/zone/objects/scene/SceneObject.idl():  		return 0;
	return 0;
}

void SceneObjectImplementation::addActiveArea(ActiveArea* area) {
	// server/zone/objects/scene/SceneObject.idl():  		activeAreas.put(area);
	(&activeAreas)->put(area);
}

void SceneObjectImplementation::dropActiveArea(ActiveArea* area) {
	// server/zone/objects/scene/SceneObject.idl():  		activeAreas.drop(area);
	(&activeAreas)->drop(area);
}

bool SceneObjectImplementation::hasActiveArea(ActiveArea* area) {
	// server/zone/objects/scene/SceneObject.idl():  		return activeAreas.contains(area);
	return (&activeAreas)->contains(area);
}

Vector<ManagedReference<ActiveArea* > >* SceneObjectImplementation::getActiveAreas() {
	// server/zone/objects/scene/SceneObject.idl():  		return activeAreas;
	return (&activeAreas);
}

int SceneObjectImplementation::getActiveAreasSize() {
	// server/zone/objects/scene/SceneObject.idl():  		return activeAreas.size();
	return (&activeAreas)->size();
}

ActiveArea* SceneObjectImplementation::getActiveRegion() {
	// server/zone/objects/scene/SceneObject.idl():  		}
	for (	// server/zone/objects/scene/SceneObject.idl():  		for (int i = 0;
	int i = 0;
	i < (&activeAreas)->size();
i ++) {
	// server/zone/objects/scene/SceneObject.idl():  			ActiveArea region = activeAreas.get(i);
	ActiveArea* region = (&activeAreas)->get(i);
	// server/zone/objects/scene/SceneObject.idl():  		}
	if (region->isRegion()){
	// server/zone/objects/scene/SceneObject.idl():  				return region;
	return region;
}
}
	// server/zone/objects/scene/SceneObject.idl():  		return null;
	return NULL;
}

CityRegion* SceneObjectImplementation::getCityRegion() {
	// server/zone/objects/scene/SceneObject.idl():  		return cityRegion;
	return cityRegion;
}

void SceneObjectImplementation::setCityRegion(CityRegion* region) {
	// server/zone/objects/scene/SceneObject.idl():  		cityRegion = region;
	cityRegion = region;
}

Zone* SceneObjectImplementation::getZone() {
	// server/zone/objects/scene/SceneObject.idl():  		return zone.get();
	return (&zone)->get();
}

float SceneObjectImplementation::getDirectionX() {
	// server/zone/objects/scene/SceneObject.idl():  		return direction.getX();
	return (&direction)->getX();
}

float SceneObjectImplementation::getDirectionZ() {
	// server/zone/objects/scene/SceneObject.idl():  		return direction.getZ();
	return (&direction)->getZ();
}

float SceneObjectImplementation::getDirectionY() {
	// server/zone/objects/scene/SceneObject.idl():  		return direction.getY();
	return (&direction)->getY();
}

float SceneObjectImplementation::getDirectionW() {
	// server/zone/objects/scene/SceneObject.idl():  		return direction.getW();
	return (&direction)->getW();
}

unsigned int SceneObjectImplementation::getClientObjectCRC() {
	// server/zone/objects/scene/SceneObject.idl():  		return clientObjectCRC;
	return clientObjectCRC;
}

unsigned int SceneObjectImplementation::getServerObjectCRC() {
	// server/zone/objects/scene/SceneObject.idl():  		return serverObjectCRC;
	return serverObjectCRC;
}

bool SceneObjectImplementation::isWaypointObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return gameObjectType == WAYPOINT;
	return gameObjectType == WAYPOINT;
}

StringId* SceneObjectImplementation::getObjectName() {
	// server/zone/objects/scene/SceneObject.idl():  		return objectName;
	return (&objectName);
}

String SceneObjectImplementation::getObjectNameStringIdFile() {
	// server/zone/objects/scene/SceneObject.idl():  		return objectName.getFile();
	return (&objectName)->getFile();
}

String SceneObjectImplementation::getObjectNameStringIdName() {
	// server/zone/objects/scene/SceneObject.idl():  		return objectName.getStringID();
	return (&objectName)->getStringID();
}

String SceneObjectImplementation::getDetailedDescription() {
	// server/zone/objects/scene/SceneObject.idl():  		return templateObject.getDetailedDescription();
	return templateObject->getDetailedDescription();
}

int SceneObjectImplementation::getArrangementDescriptorSize() {
	// server/zone/objects/scene/SceneObject.idl():  		return 
	if (templateObject->getArrangementDescriptors() != NULL)	// server/zone/objects/scene/SceneObject.idl():  			return templateObject.getArrangementDescriptors().size();
	return templateObject->getArrangementDescriptors()->size();
	// server/zone/objects/scene/SceneObject.idl():  		return 0;
	return 0;
}

String SceneObjectImplementation::getArrangementDescriptor(int idx) {
	// server/zone/objects/scene/SceneObject.idl():  		return templateObject.getArrangementDescriptors().get(idx);
	return templateObject->getArrangementDescriptors()->get(idx);
}

String SceneObjectImplementation::getSlotDescriptor(int idx) {
	// server/zone/objects/scene/SceneObject.idl():  		return templateObject.getSlotDescriptors().get(idx);
	return templateObject->getSlotDescriptors()->get(idx);
}

bool SceneObjectImplementation::hasSlotDescriptor(const String& descr) {
	// server/zone/objects/scene/SceneObject.idl():  		}
	for (	// server/zone/objects/scene/SceneObject.idl():  		for (int i = 0;
	int i = 0;
	i < getSlotDescriptorSize();
 ++i) {
	// server/zone/objects/scene/SceneObject.idl():  		}
	if (getSlotDescriptor(i) == descr)	// server/zone/objects/scene/SceneObject.idl():  				return true;
	return true;
}
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

VectorMap<String, ManagedReference<SceneObject* > >* SceneObjectImplementation::getSlottedObjects() {
	// server/zone/objects/scene/SceneObject.idl():  		return slottedObjects;
	return (&slottedObjects);
}

SceneObject* SceneObjectImplementation::getSlottedObject(const String& slot) {
	// server/zone/objects/scene/SceneObject.idl():  		return slottedObjects.get(slot);
	return (&slottedObjects)->get(slot);
}

int SceneObjectImplementation::getSlotDescriptorSize() {
	// server/zone/objects/scene/SceneObject.idl():  		return 
	if (templateObject->getSlotDescriptors() != NULL)	// server/zone/objects/scene/SceneObject.idl():  			return templateObject.getSlotDescriptors().size();
	return templateObject->getSlotDescriptors()->size();
	// server/zone/objects/scene/SceneObject.idl():  		return 0;
	return 0;
}

SceneObject* SceneObjectImplementation::getSlottedObject(int idx) {
	// server/zone/objects/scene/SceneObject.idl():  		return slottedObjects.get(idx);
	return (&slottedObjects)->get(idx);
}

void SceneObjectImplementation::dropSlottedObject(const String& arrengementDescriptor) {
	// server/zone/objects/scene/SceneObject.idl():  		slottedObjects.drop(arrengementDescriptor);
	(&slottedObjects)->drop(arrengementDescriptor);
}

void SceneObjectImplementation::removeSlottedObject(int index) {
	// server/zone/objects/scene/SceneObject.idl():  		slottedObjects.remove(index);
	(&slottedObjects)->remove(index);
}

int SceneObjectImplementation::getContainerObjectsSize() {
	// server/zone/objects/scene/SceneObject.idl():  		return containerObjects.size();
	return (&containerObjects)->size();
}

int SceneObjectImplementation::getSlottedObjectsSize() {
	// server/zone/objects/scene/SceneObject.idl():  		return slottedObjects.size();
	return (&slottedObjects)->size();
}

bool SceneObjectImplementation::hasFullContainerObjects() {
	// server/zone/objects/scene/SceneObject.idl():  		return containerObjects.size() > containerVolumeLimit || containerObjects.size() == containerVolumeLimit;
	return (&containerObjects)->size() > containerVolumeLimit || (&containerObjects)->size() == containerVolumeLimit;
}

unsigned int SceneObjectImplementation::getContainerVolumeLimit() {
	// server/zone/objects/scene/SceneObject.idl():  		return containerVolumeLimit;
	return containerVolumeLimit;
}

SceneObject* SceneObjectImplementation::getContainerObject(int idx) {
	// server/zone/objects/scene/SceneObject.idl():  		return containerObjects.get(idx);
	return (&containerObjects)->get(idx);
}

VectorMap<unsigned long long, ManagedReference<SceneObject* > >* SceneObjectImplementation::getContainerObjects() {
	// server/zone/objects/scene/SceneObject.idl():  		return containerObjects;
	return (&containerObjects);
}

bool SceneObjectImplementation::hasObjectInContainer(unsigned long long objectID) {
	// server/zone/objects/scene/SceneObject.idl():  		return containerObjects.contains(objectID);
	return (&containerObjects)->contains(objectID);
}

bool SceneObjectImplementation::hasObjectInSlottedContainer(SceneObject* object) {
	// server/zone/objects/scene/SceneObject.idl():  		int arrangementSize = object.getArrangementDescriptorSize();
	int arrangementSize = object->getArrangementDescriptorSize();
	// server/zone/objects/scene/SceneObject.idl():  		SceneObject 
	if (arrangementSize == 0){
	// server/zone/objects/scene/SceneObject.idl():  			return false;
	return false;
}
	// server/zone/objects/scene/SceneObject.idl():  		SceneObject obj = slottedObjects.get(object.getArrangementDescriptor(0));
	SceneObject* obj = (&slottedObjects)->get(object->getArrangementDescriptor(0));
	// server/zone/objects/scene/SceneObject.idl():  		}
	if (object == obj){
	// server/zone/objects/scene/SceneObject.idl():  			return true;
	return true;
}

	else {
	// server/zone/objects/scene/SceneObject.idl():  			return false;
	return false;
}
}

SceneObject* SceneObjectImplementation::getContainerObject(unsigned long long objectID) {
	// server/zone/objects/scene/SceneObject.idl():  		return containerObjects.get(objectID);
	return (&containerObjects)->get(objectID);
}

void SceneObjectImplementation::removeAllContainerObjects() {
	// server/zone/objects/scene/SceneObject.idl():  		containerObjects.removeAll();
	(&containerObjects)->removeAll();
}

void SceneObjectImplementation::putInContainer(SceneObject* obj, unsigned long long key) {
	// server/zone/objects/scene/SceneObject.idl():  		containerObjects.put(key, obj);
	(&containerObjects)->put(key, obj);
}

void SceneObjectImplementation::removeFromContainerObjects(int index) {
	// server/zone/objects/scene/SceneObject.idl():  		containerObjects.removeElementAt(index);
	(&containerObjects)->removeElementAt(index);
}

void SceneObjectImplementation::setContainerVolumeLimit(int lim) {
	// server/zone/objects/scene/SceneObject.idl():  		containerVolumeLimit = lim;
	containerVolumeLimit = lim;
}

void SceneObjectImplementation::setContainerType(int type) {
	// server/zone/objects/scene/SceneObject.idl():  		containerType = type;
	containerType = type;
}

unsigned int SceneObjectImplementation::getContainerType() {
	// server/zone/objects/scene/SceneObject.idl():  		return containerType;
	return containerType;
}

ZoneClientSession* SceneObjectImplementation::getClient() {
	// server/zone/objects/scene/SceneObject.idl():  		return null;
	return NULL;
}

unsigned int SceneObjectImplementation::getGameObjectType() {
	// server/zone/objects/scene/SceneObject.idl():  		return gameObjectType;
	return gameObjectType;
}

unsigned int SceneObjectImplementation::getClientGameObjectType() {
	// server/zone/objects/scene/SceneObject.idl():  		return clientGameObjectType;
	return clientGameObjectType;
}

unsigned int SceneObjectImplementation::getContainmentType() {
	// server/zone/objects/scene/SceneObject.idl():  		return containmentType;
	return containmentType;
}

float SceneObjectImplementation::getDirectionAngle() {
	// server/zone/objects/scene/SceneObject.idl():  		return direction.getDegrees();
	return (&direction)->getDegrees();
}

float SceneObjectImplementation::getSpecialDirectionAngle() {
	// server/zone/objects/scene/SceneObject.idl():  		return direction.getSpecialDegrees();
	return (&direction)->getSpecialDegrees();
}

unsigned int SceneObjectImplementation::getMovementCounter() {
	// server/zone/objects/scene/SceneObject.idl():  		return movementCounter;
	return movementCounter;
}

SceneObject* SceneObjectImplementation::getParent() {
	// server/zone/objects/scene/SceneObject.idl():  		return parent;
	return parent;
}

ZoneServer* SceneObjectImplementation::getZoneServer() {
	// server/zone/objects/scene/SceneObject.idl():  			return null;
	if (server != NULL)	// server/zone/objects/scene/SceneObject.idl():  			return server.getZoneServer();
	return server->getZoneServer();

	else 	// server/zone/objects/scene/SceneObject.idl():  			return null;
	return NULL;
}

UnicodeString SceneObjectImplementation::getCustomObjectName() {
	// server/zone/objects/scene/SceneObject.idl():  		return objectName.getCustomString();
	return (&objectName)->getCustomString();
}

String SceneObjectImplementation::getLoggingName() {
	// server/zone/objects/scene/SceneObject.idl():  		return Logger.getLoggingName();
	return Logger::getLoggingName();
}

bool SceneObjectImplementation::isPlayerCreature() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isVendor() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

ZoneComponent* SceneObjectImplementation::getZoneComponent() {
	// server/zone/objects/scene/SceneObject.idl():  		return zoneComponent;
	return zoneComponent;
}

ObjectMenuComponent* SceneObjectImplementation::getObjectMenuComponent() {
	// server/zone/objects/scene/SceneObject.idl():  		return objectMenuComponent;
	return objectMenuComponent;
}

bool SceneObjectImplementation::isContainerFull() {
	// server/zone/objects/scene/SceneObject.idl():  		return containerVolumeLimit <= containerObjects.size();
	return containerVolumeLimit <= (&containerObjects)->size();
}

bool SceneObjectImplementation::isShuttleInstallation() {
	// server/zone/objects/scene/SceneObject.idl():  		return gameObjectType == SHUTTLEINSTALLATION;
	return gameObjectType == SHUTTLEINSTALLATION;
}

bool SceneObjectImplementation::isPlayerObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return gameObjectType == PLAYEROBJECT;
	return gameObjectType == PLAYEROBJECT;
}

bool SceneObjectImplementation::isActiveArea() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isRegion() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isCreatureObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isVehicleObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isBuildingObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isCloningBuildingObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isGarage() {
	// server/zone/objects/scene/SceneObject.idl():  		return gameObjectType == GARAGEBUILDING || gameObjectType == GARAGEINSTALLATION;
	return gameObjectType == GARAGEBUILDING || gameObjectType == GARAGEINSTALLATION;
}

bool SceneObjectImplementation::isWeaponObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isWearableObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isArmorObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isPsgArmorObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isCellObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isTangibleObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isResourceContainer() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isComponent() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isIntangibleObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isInstrument() {
	// server/zone/objects/scene/SceneObject.idl():  		return gameObjectType == INSTRUMENT;
	return gameObjectType == INSTRUMENT;
}

bool SceneObjectImplementation::isInstallationObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isCityTerminal() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isCityVoteTerminal() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isFactory() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isFactoryCrate() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isFishingPoleObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return gameObjectType == FISHINGPOLE;
	return gameObjectType == FISHINGPOLE;
}

bool SceneObjectImplementation::isDeedObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isVehicleDeedObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isBuildingDeed() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isSignObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isInstallationDeed() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isCraftingTool() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isCraftingStation() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isManufactureSchematic() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isStructureObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isFishingBait() {
	// server/zone/objects/scene/SceneObject.idl():  		return gameObjectType == FISHINGBAIT;
	return gameObjectType == FISHINGBAIT;
}

bool SceneObjectImplementation::isAttachment() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

void SceneObjectImplementation::setGameObjectType(unsigned int type) {
	// server/zone/objects/scene/SceneObject.idl():  		gameObjectType = type;
	gameObjectType = type;
}

void SceneObjectImplementation::setClientObjectCRC(unsigned int objCRC) {
	// server/zone/objects/scene/SceneObject.idl():  		clientObjectCRC = objCRC;
	clientObjectCRC = objCRC;
}

void SceneObjectImplementation::setServerObjectCRC(unsigned int objCRC) {
	// server/zone/objects/scene/SceneObject.idl():  		serverObjectCRC = objCRC;
	serverObjectCRC = objCRC;
}

void SceneObjectImplementation::setParent(SceneObject* par) {
	// server/zone/objects/scene/SceneObject.idl():  		parent = par;
	parent = par;
}

void SceneObjectImplementation::setZoneProcessServer(ZoneProcessServer* srv) {
	// server/zone/objects/scene/SceneObject.idl():  		server = srv;
	server = srv;
}

void SceneObjectImplementation::setDirection(float fw, float fx, float fy, float fz) {
	// server/zone/objects/scene/SceneObject.idl():  		direction.set(fw, fx, fy, fz);
	(&direction)->set(fw, fx, fy, fz);
}

void SceneObjectImplementation::setDirection(float headingAngleRadians) {
	// server/zone/objects/scene/SceneObject.idl():  		direction.setHeadingDirection(headingAngleRadians);
	(&direction)->setHeadingDirection(headingAngleRadians);
}

void SceneObjectImplementation::setMovementCounter(unsigned int count) {
	// server/zone/objects/scene/SceneObject.idl():  		movementCounter = count;
	movementCounter = count;
}

void SceneObjectImplementation::incrementMovementCounter() {
	// server/zone/objects/scene/SceneObject.idl():  		movementCounter++;
	movementCounter ++;
}

void SceneObjectImplementation::setContainmentType(unsigned int type) {
	// server/zone/objects/scene/SceneObject.idl():  		containmentType = type;
	containmentType = type;
}

void SceneObjectImplementation::setLoggingName(const String& name) {
	// server/zone/objects/scene/SceneObject.idl():  		Logger.setLoggingName(name);
	Logger::setLoggingName(name);
}

void SceneObjectImplementation::setClientObject(bool val) {
	// server/zone/objects/scene/SceneObject.idl():  		staticObject = val;
	staticObject = val;
}

bool SceneObjectImplementation::isStaticObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return staticObject;
	return staticObject;
}

bool SceneObjectImplementation::isContainerObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isTerminal() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isGroupObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isGuildObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isControlDevice() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isMissionTerminal() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

bool SceneObjectImplementation::isMissionObject() {
	// server/zone/objects/scene/SceneObject.idl():  		return false;
	return false;
}

int SceneObjectImplementation::getPlanetMapCategoryCRC() {
	// server/zone/objects/scene/SceneObject.idl():  		return planetMapCategory;
	return planetMapCategory;
}

int SceneObjectImplementation::getPlanetMapSubCategoryCRC() {
	// server/zone/objects/scene/SceneObject.idl():  		return planetMapSubCategory;
	return planetMapSubCategory;
}

void SceneObjectImplementation::setPlanetMapCategory(PlanetMapCategory* pmc) {
	// server/zone/objects/scene/SceneObject.idl():  		planetMapCategory = pmc.getCrc();
	planetMapCategory = pmc->getCrc();
}

void SceneObjectImplementation::setPlanetMapSubCategory(PlanetMapCategory* pmc) {
	// server/zone/objects/scene/SceneObject.idl():  		planetMapSubCategory = pmc.getCrc();
	planetMapSubCategory = pmc->getCrc();
}

PlanetMapCategory* SceneObjectImplementation::getPlanetMapCategory() {
	// server/zone/objects/scene/SceneObject.idl():  		TemplateManager templateManager = TemplateManager.instance();
	TemplateManager* templateManager = TemplateManager::instance();
	// server/zone/objects/scene/SceneObject.idl():  		return templateManager.getPlanetMapCategoryByCrc(planetMapCategory);
	return templateManager->getPlanetMapCategoryByCrc(planetMapCategory);
}

PlanetMapCategory* SceneObjectImplementation::getPlanetMapSubCategory() {
	// server/zone/objects/scene/SceneObject.idl():  		TemplateManager templateManager = TemplateManager.instance();
	TemplateManager* templateManager = TemplateManager::instance();
	// server/zone/objects/scene/SceneObject.idl():  		return templateManager.getPlanetMapCategoryByCrc(planetMapSubCategory);
	return templateManager->getPlanetMapCategoryByCrc(planetMapSubCategory);
}

SortedVector<ManagedReference<SceneObject* > >* SceneObjectImplementation::getChildObjects() {
	// server/zone/objects/scene/SceneObject.idl():  		return childObjects;
	return (&childObjects);
}

bool SceneObjectImplementation::containsChildObject(SceneObject* obj) {
	// server/zone/objects/scene/SceneObject.idl():  		return childObjects.contains(obj);
	return (&childObjects)->contains(obj);
}

SharedObjectTemplate* SceneObjectImplementation::getObjectTemplate() {
	// server/zone/objects/scene/SceneObject.idl():  		return templateObject;
	return templateObject;
}

/*
 *	SceneObjectAdapter
 */

SceneObjectAdapter::SceneObjectAdapter(SceneObjectImplementation* obj) : QuadTreeEntryAdapter(obj) {
}

Packet* SceneObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_FINALIZE__:
		finalize();
		break;
	case RPC_INITIALIZEPRIVATEDATA__:
		initializePrivateData();
		break;
	case RPC_CREATECOMPONENTS__:
		createComponents();
		break;
	case RPC_CREATECONTAINERCOMPONENT__:
		createContainerComponent();
		break;
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		initializeTransientMembers();
		break;
	case RPC_NOTIFYLOADFROMDATABASE__:
		notifyLoadFromDatabase();
		break;
	case RPC_INFO__STRING_BOOL_:
		info(inv->getAsciiParameter(_param0_info__String_bool_), inv->getBooleanParameter());
		break;
	case RPC_ERROR__STRING_:
		error(inv->getAsciiParameter(_param0_error__String_));
		break;
	case RPC_INRANGEOBJECTS__INT_FLOAT_:
		resp->insertSignedInt(inRangeObjects(inv->getUnsignedIntParameter(), inv->getFloatParameter()));
		break;
	case RPC_ISINRANGE__SCENEOBJECT_FLOAT_:
		resp->insertBoolean(isInRange((SceneObject*) inv->getObjectParameter(), inv->getFloatParameter()));
		break;
	case RPC_ADDOBJECT__SCENEOBJECT_INT_BOOL_:
		resp->insertBoolean(addObject((SceneObject*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case RPC_REMOVEOBJECT__SCENEOBJECT_BOOL_:
		resp->insertBoolean(removeObject((SceneObject*) inv->getObjectParameter(), inv->getBooleanParameter()));
		break;
	case RPC_CANADDOBJECT__SCENEOBJECT_INT_STRING_:
		resp->insertSignedInt(canAddObject((SceneObject*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getAsciiParameter(_param2_canAddObject__SceneObject_int_String_)));
		break;
	case RPC_SYNCHRONIZEDUILISTEN__SCENEOBJECT_INT_:
		synchronizedUIListen((SceneObject*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case RPC_SYNCHRONIZEDUISTOPLISTEN__SCENEOBJECT_INT_:
		synchronizedUIStopListen((SceneObject*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case RPC_UPDATETODATABASE__:
		updateToDatabase();
		break;
	case RPC_UPDATETODATABASEWITHOUTCHILDREN__:
		updateToDatabaseWithoutChildren();
		break;
	case RPC_UPDATETODATABASEALLOBJECTS__BOOL_:
		updateToDatabaseAllObjects(inv->getBooleanParameter());
		break;
	case RPC_DESTROYOBJECTFROMDATABASE__BOOL_:
		destroyObjectFromDatabase(inv->getBooleanParameter());
		break;
	case RPC_CANBEDESTROYED__CREATUREOBJECT_:
		resp->insertSignedInt(canBeDestroyed((CreatureObject*) inv->getObjectParameter()));
		break;
	case RPC_CREATE__ZONECLIENTSESSION_:
		create((ZoneClientSession*) inv->getObjectParameter());
		break;
	case RPC_DESTROY__ZONECLIENTSESSION_:
		destroy((ZoneClientSession*) inv->getObjectParameter());
		break;
	case RPC_CLOSE__ZONECLIENTSESSION_:
		close((ZoneClientSession*) inv->getObjectParameter());
		break;
	case RPC_LINK__ZONECLIENTSESSION_INT_:
		link((ZoneClientSession*) inv->getObjectParameter(), inv->getUnsignedIntParameter());
		break;
	case RPC_LINK__LONG_INT_:
		resp->insertLong(link(inv->getUnsignedLongParameter(), inv->getUnsignedIntParameter())->_getObjectID());
		break;
	case RPC_SENDTO__SCENEOBJECT_BOOL_:
		sendTo((SceneObject*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case RPC_SENDWITHOUTPARENTTO__SCENEOBJECT_:
		sendWithoutParentTo((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_SENDWITHOUTCONTAINEROBJECTSTO__SCENEOBJECT_:
		sendWithoutContainerObjectsTo((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_SENDDESTROYTO__SCENEOBJECT_:
		sendDestroyTo((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_SENDBASELINESTO__SCENEOBJECT_:
		sendBaselinesTo((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_SENDCONTAINEROBJECTSTO__SCENEOBJECT_:
		sendContainerObjectsTo((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_SENDSLOTTEDOBJECTSTO__SCENEOBJECT_:
		sendSlottedObjectsTo((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_SENDTOOWNER__BOOL_:
		sendToOwner(inv->getBooleanParameter());
		break;
	case RPC_SENDATTRIBUTELISTTO__CREATUREOBJECT_:
		sendAttributeListTo((CreatureObject*) inv->getObjectParameter());
		break;
	case RPC_SETCUSTOMOBJECTNAME__UNICODESTRING_BOOL_:
		setCustomObjectName(inv->getUnicodeParameter(_param0_setCustomObjectName__UnicodeString_bool_), inv->getBooleanParameter());
		break;
	case RPC_OPENCONTAINERTO__CREATUREOBJECT_:
		openContainerTo((CreatureObject*) inv->getObjectParameter());
		break;
	case RPC_CLOSECONTAINERTO__CREATUREOBJECT_BOOL_:
		closeContainerTo((CreatureObject*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case RPC_INSERTTOZONE__ZONE_:
		insertToZone((Zone*) inv->getObjectParameter());
		break;
	case RPC_INSERTTOBUILDING__BUILDINGOBJECT_:
		insertToBuilding((BuildingObject*) inv->getObjectParameter());
		break;
	case RPC_SWITCHZONE__STRING_FLOAT_FLOAT_FLOAT_LONG_:
		switchZone(inv->getAsciiParameter(_param0_switchZone__String_float_float_float_long_), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getUnsignedLongParameter());
		break;
	case RPC_TELEPORT__FLOAT_FLOAT_FLOAT_LONG_:
		teleport(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getUnsignedLongParameter());
		break;
	case RPC_UPDATEDIRECTION__FLOAT_FLOAT_FLOAT_FLOAT_:
		updateDirection(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter());
		break;
	case RPC_REMOVEFROMZONE__:
		removeFromZone();
		break;
	case RPC_REMOVEFROMBUILDING__BUILDINGOBJECT_:
		removeFromBuilding((BuildingObject*) inv->getObjectParameter());
		break;
	case RPC_UPDATEZONE__BOOL_BOOL_:
		updateZone(inv->getBooleanParameter(), inv->getBooleanParameter());
		break;
	case RPC_UPDATEZONEWITHPARENT__SCENEOBJECT_BOOL_BOOL_:
		updateZoneWithParent((SceneObject*) inv->getObjectParameter(), inv->getBooleanParameter(), inv->getBooleanParameter());
		break;
	case RPC_BROADCASTMESSAGE__BASEPACKET_BOOL_BOOL_:
		broadcastMessage((BasePacket*) inv->getObjectParameter(), inv->getBooleanParameter(), inv->getBooleanParameter());
		break;
	case RPC_BROADCASTOBJECT__SCENEOBJECT_BOOL_:
		broadcastObject((SceneObject*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case RPC_BROADCASTDESTROY__SCENEOBJECT_BOOL_:
		broadcastDestroy((SceneObject*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case RPC_SENDMESSAGE__BASEPACKET_:
		sendMessage((BasePacket*) inv->getObjectParameter());
		break;
	case RPC_COMPARETO__SCENEOBJECT_:
		resp->insertSignedInt(compareTo((SceneObject*) inv->getObjectParameter()));
		break;
	case RPC_GETPARENTID__:
		resp->insertLong(getParentID());
		break;
	case RPC_SHOWFLYTEXT__STRING_STRING_BYTE_BYTE_BYTE_:
		showFlyText(inv->getAsciiParameter(_param0_showFlyText__String_String_byte_byte_byte_), inv->getAsciiParameter(_param1_showFlyText__String_String_byte_byte_byte_), inv->getByteParameter(), inv->getByteParameter(), inv->getByteParameter());
		break;
	case RPC_GETACTIVESESSION__INT_:
		resp->insertLong(getActiveSession(inv->getUnsignedIntParameter())->_getObjectID());
		break;
	case RPC_ADDACTIVESESSION__INT_FACADE_:
		addActiveSession(inv->getUnsignedIntParameter(), (Facade*) inv->getObjectParameter());
		break;
	case RPC_CONTAINSACTIVESESSION__INT_:
		resp->insertBoolean(containsActiveSession(inv->getUnsignedIntParameter()));
		break;
	case RPC_DROPACTIVESESSION__INT_:
		resp->insertBoolean(dropActiveSession(inv->getUnsignedIntParameter()));
		break;
	case RPC_GETACTIVESESSIONSCOUNT__:
		resp->insertSignedInt(getActiveSessionsCount());
		break;
	case RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_:
		resp->insertSignedInt(handleObjectMenuSelect((CreatureObject*) inv->getObjectParameter(), inv->getByteParameter()));
		break;
	case RPC_NOTIFYADDEDTOCLOSEOBJECTS__:
		notifyAddedToCloseObjects();
		break;
	case RPC_NOTIFYREMOVEDFROMCLOSEOBJECTS__:
		notifyRemovedFromCloseObjects();
		break;
	case RPC_GETDISTANCETO__SCENEOBJECT_:
		resp->insertFloat(getDistanceTo((SceneObject*) inv->getObjectParameter()));
		break;
	case RPC_UPDATEVEHICLEPOSITION__:
		updateVehiclePosition();
		break;
	case RPC_NOTIFYOBJECTINSERTED__SCENEOBJECT_:
		resp->insertSignedInt(notifyObjectInserted((SceneObject*) inv->getObjectParameter()));
		break;
	case RPC_NOTIFYOBJECTREMOVED__SCENEOBJECT_:
		resp->insertSignedInt(notifyObjectRemoved((SceneObject*) inv->getObjectParameter()));
		break;
	case RPC_ADDACTIVEAREA__ACTIVEAREA_:
		addActiveArea((ActiveArea*) inv->getObjectParameter());
		break;
	case RPC_DROPACTIVEAREA__ACTIVEAREA_:
		dropActiveArea((ActiveArea*) inv->getObjectParameter());
		break;
	case RPC_HASACTIVEAREA__ACTIVEAREA_:
		resp->insertBoolean(hasActiveArea((ActiveArea*) inv->getObjectParameter()));
		break;
	case RPC_GETACTIVEAREASSIZE__:
		resp->insertSignedInt(getActiveAreasSize());
		break;
	case RPC_GETACTIVEREGION__:
		resp->insertLong(getActiveRegion()->_getObjectID());
		break;
	case RPC_GETCITYREGION__:
		resp->insertLong(getCityRegion()->_getObjectID());
		break;
	case RPC_SETCITYREGION__CITYREGION_:
		setCityRegion((CityRegion*) inv->getObjectParameter());
		break;
	case RPC_GETZONE__:
		resp->insertLong(getZone()->_getObjectID());
		break;
	case RPC_GETOBJECTID__:
		resp->insertLong(getObjectID());
		break;
	case RPC_GETWORLDPOSITIONX__:
		resp->insertFloat(getWorldPositionX());
		break;
	case RPC_GETWORLDPOSITIONY__:
		resp->insertFloat(getWorldPositionY());
		break;
	case RPC_GETWORLDPOSITIONZ__:
		resp->insertFloat(getWorldPositionZ());
		break;
	case RPC_GETDIRECTIONX__:
		resp->insertFloat(getDirectionX());
		break;
	case RPC_GETDIRECTIONZ__:
		resp->insertFloat(getDirectionZ());
		break;
	case RPC_GETDIRECTIONY__:
		resp->insertFloat(getDirectionY());
		break;
	case RPC_GETDIRECTIONW__:
		resp->insertFloat(getDirectionW());
		break;
	case RPC_GETCLIENTOBJECTCRC__:
		resp->insertInt(getClientObjectCRC());
		break;
	case RPC_GETSERVEROBJECTCRC__:
		resp->insertInt(getServerObjectCRC());
		break;
	case RPC_ISWAYPOINTOBJECT__:
		resp->insertBoolean(isWaypointObject());
		break;
	case RPC_GETOBJECTNAMESTRINGIDFILE__:
		resp->insertAscii(getObjectNameStringIdFile());
		break;
	case RPC_GETOBJECTNAMESTRINGIDNAME__:
		resp->insertAscii(getObjectNameStringIdName());
		break;
	case RPC_GETARRANGEMENTDESCRIPTORSIZE__:
		resp->insertSignedInt(getArrangementDescriptorSize());
		break;
	case RPC_GETARRANGEMENTDESCRIPTOR__INT_:
		resp->insertAscii(getArrangementDescriptor(inv->getSignedIntParameter()));
		break;
	case RPC_GETSLOTDESCRIPTOR__INT_:
		resp->insertAscii(getSlotDescriptor(inv->getSignedIntParameter()));
		break;
	case RPC_HASSLOTDESCRIPTOR__STRING_:
		resp->insertBoolean(hasSlotDescriptor(inv->getAsciiParameter(_param0_hasSlotDescriptor__String_)));
		break;
	case RPC_GETSLOTTEDOBJECT__STRING_:
		resp->insertLong(getSlottedObject(inv->getAsciiParameter(_param0_getSlottedObject__String_))->_getObjectID());
		break;
	case RPC_GETSLOTDESCRIPTORSIZE__:
		resp->insertSignedInt(getSlotDescriptorSize());
		break;
	case RPC_GETSLOTTEDOBJECT__INT_:
		resp->insertLong(getSlottedObject(inv->getSignedIntParameter())->_getObjectID());
		break;
	case RPC_DROPSLOTTEDOBJECT__STRING_:
		dropSlottedObject(inv->getAsciiParameter(_param0_dropSlottedObject__String_));
		break;
	case RPC_REMOVESLOTTEDOBJECT__INT_:
		removeSlottedObject(inv->getSignedIntParameter());
		break;
	case RPC_GETCONTAINEROBJECTSSIZE__:
		resp->insertSignedInt(getContainerObjectsSize());
		break;
	case RPC_GETSLOTTEDOBJECTSSIZE__:
		resp->insertSignedInt(getSlottedObjectsSize());
		break;
	case RPC_HASFULLCONTAINEROBJECTS__:
		resp->insertBoolean(hasFullContainerObjects());
		break;
	case RPC_GETCONTAINERVOLUMELIMIT__:
		resp->insertInt(getContainerVolumeLimit());
		break;
	case RPC_GETCONTAINEROBJECT__INT_:
		resp->insertLong(getContainerObject(inv->getSignedIntParameter())->_getObjectID());
		break;
	case RPC_HASOBJECTINCONTAINER__LONG_:
		resp->insertBoolean(hasObjectInContainer(inv->getUnsignedLongParameter()));
		break;
	case RPC_HASOBJECTINSLOTTEDCONTAINER__SCENEOBJECT_:
		resp->insertBoolean(hasObjectInSlottedContainer((SceneObject*) inv->getObjectParameter()));
		break;
	case RPC_GETCONTAINEROBJECT__LONG_:
		resp->insertLong(getContainerObject(inv->getUnsignedLongParameter())->_getObjectID());
		break;
	case RPC_REMOVEALLCONTAINEROBJECTS__:
		removeAllContainerObjects();
		break;
	case RPC_PUTINCONTAINER__SCENEOBJECT_LONG_:
		putInContainer((SceneObject*) inv->getObjectParameter(), inv->getUnsignedLongParameter());
		break;
	case RPC_REMOVEFROMCONTAINEROBJECTS__INT_:
		removeFromContainerObjects(inv->getSignedIntParameter());
		break;
	case RPC_SETCONTAINERVOLUMELIMIT__INT_:
		setContainerVolumeLimit(inv->getSignedIntParameter());
		break;
	case RPC_SETCONTAINERTYPE__INT_:
		setContainerType(inv->getSignedIntParameter());
		break;
	case RPC_GETCONTAINERTYPE__:
		resp->insertInt(getContainerType());
		break;
	case RPC_GETCLIENT__:
		resp->insertLong(getClient()->_getObjectID());
		break;
	case RPC_GETGAMEOBJECTTYPE__:
		resp->insertInt(getGameObjectType());
		break;
	case RPC_GETCLIENTGAMEOBJECTTYPE__:
		resp->insertInt(getClientGameObjectType());
		break;
	case RPC_GETCONTAINMENTTYPE__:
		resp->insertInt(getContainmentType());
		break;
	case RPC_GETDIRECTIONANGLE__:
		resp->insertFloat(getDirectionAngle());
		break;
	case RPC_GETSPECIALDIRECTIONANGLE__:
		resp->insertFloat(getSpecialDirectionAngle());
		break;
	case RPC_ROTATE__INT_:
		rotate(inv->getSignedIntParameter());
		break;
	case RPC_FACEOBJECT__SCENEOBJECT_:
		faceObject((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_NOTIFYSELFPOSITIONUPDATE__:
		notifySelfPositionUpdate();
		break;
	case RPC_NOTIFYPOSITIONUPDATE__QUADTREEENTRY_:
		notifyPositionUpdate((QuadTreeEntry*) inv->getObjectParameter());
		break;
	case RPC_NOTIFYCLOSECONTAINER__CREATUREOBJECT_:
		notifyCloseContainer((CreatureObject*) inv->getObjectParameter());
		break;
	case RPC_GETMOVEMENTCOUNTER__:
		resp->insertInt(getMovementCounter());
		break;
	case RPC_GETPARENT__:
		resp->insertLong(getParent()->_getObjectID());
		break;
	case RPC_GETZONESERVER__:
		resp->insertLong(getZoneServer()->_getObjectID());
		break;
	case RPC_GETROOTPARENT__:
		resp->insertLong(getRootParent()->_getObjectID());
		break;
	case RPC_GETPARENTRECURSIVELY__INT_:
		resp->insertLong(getParentRecursively(inv->getUnsignedIntParameter())->_getObjectID());
		break;
	case RPC_ISASUBCHILDOF__SCENEOBJECT_:
		resp->insertBoolean(isASubChildOf((SceneObject*) inv->getObjectParameter()));
		break;
	case RPC_GETCUSTOMOBJECTNAME__:
		resp->insertUnicode(getCustomObjectName());
		break;
	case RPC_GETLOGGINGNAME__:
		resp->insertAscii(getLoggingName());
		break;
	case RPC_ISPLAYERCREATURE__:
		resp->insertBoolean(isPlayerCreature());
		break;
	case RPC_ISVENDOR__:
		resp->insertBoolean(isVendor());
		break;
	case RPC_ISCONTAINERFULL__:
		resp->insertBoolean(isContainerFull());
		break;
	case RPC_ISSHUTTLEINSTALLATION__:
		resp->insertBoolean(isShuttleInstallation());
		break;
	case RPC_ISPLAYEROBJECT__:
		resp->insertBoolean(isPlayerObject());
		break;
	case RPC_ISACTIVEAREA__:
		resp->insertBoolean(isActiveArea());
		break;
	case RPC_ISREGION__:
		resp->insertBoolean(isRegion());
		break;
	case RPC_ISCREATUREOBJECT__:
		resp->insertBoolean(isCreatureObject());
		break;
	case RPC_ISVEHICLEOBJECT__:
		resp->insertBoolean(isVehicleObject());
		break;
	case RPC_ISBUILDINGOBJECT__:
		resp->insertBoolean(isBuildingObject());
		break;
	case RPC_ISCLONINGBUILDINGOBJECT__:
		resp->insertBoolean(isCloningBuildingObject());
		break;
	case RPC_ISGARAGE__:
		resp->insertBoolean(isGarage());
		break;
	case RPC_ISWEAPONOBJECT__:
		resp->insertBoolean(isWeaponObject());
		break;
	case RPC_ISWEARABLEOBJECT__:
		resp->insertBoolean(isWearableObject());
		break;
	case RPC_ISARMOROBJECT__:
		resp->insertBoolean(isArmorObject());
		break;
	case RPC_ISPSGARMOROBJECT__:
		resp->insertBoolean(isPsgArmorObject());
		break;
	case RPC_ISCELLOBJECT__:
		resp->insertBoolean(isCellObject());
		break;
	case RPC_ISTANGIBLEOBJECT__:
		resp->insertBoolean(isTangibleObject());
		break;
	case RPC_ISRESOURCECONTAINER__:
		resp->insertBoolean(isResourceContainer());
		break;
	case RPC_ISCOMPONENT__:
		resp->insertBoolean(isComponent());
		break;
	case RPC_ISINTANGIBLEOBJECT__:
		resp->insertBoolean(isIntangibleObject());
		break;
	case RPC_ISINSTRUMENT__:
		resp->insertBoolean(isInstrument());
		break;
	case RPC_ISINSTALLATIONOBJECT__:
		resp->insertBoolean(isInstallationObject());
		break;
	case RPC_ISCITYTERMINAL__:
		resp->insertBoolean(isCityTerminal());
		break;
	case RPC_ISCITYVOTETERMINAL__:
		resp->insertBoolean(isCityVoteTerminal());
		break;
	case RPC_ISFACTORY__:
		resp->insertBoolean(isFactory());
		break;
	case RPC_ISFACTORYCRATE__:
		resp->insertBoolean(isFactoryCrate());
		break;
	case RPC_ISFISHINGPOLEOBJECT__:
		resp->insertBoolean(isFishingPoleObject());
		break;
	case RPC_ISDEEDOBJECT__:
		resp->insertBoolean(isDeedObject());
		break;
	case RPC_ISVEHICLEDEEDOBJECT__:
		resp->insertBoolean(isVehicleDeedObject());
		break;
	case RPC_ISBUILDINGDEED__:
		resp->insertBoolean(isBuildingDeed());
		break;
	case RPC_ISSIGNOBJECT__:
		resp->insertBoolean(isSignObject());
		break;
	case RPC_ISINSTALLATIONDEED__:
		resp->insertBoolean(isInstallationDeed());
		break;
	case RPC_ISCRAFTINGTOOL__:
		resp->insertBoolean(isCraftingTool());
		break;
	case RPC_ISCRAFTINGSTATION__:
		resp->insertBoolean(isCraftingStation());
		break;
	case RPC_ISMANUFACTURESCHEMATIC__:
		resp->insertBoolean(isManufactureSchematic());
		break;
	case RPC_ISSTRUCTUREOBJECT__:
		resp->insertBoolean(isStructureObject());
		break;
	case RPC_ISFISHINGBAIT__:
		resp->insertBoolean(isFishingBait());
		break;
	case RPC_ISATTACHMENT__:
		resp->insertBoolean(isAttachment());
		break;
	case RPC_SETGAMEOBJECTTYPE__INT_:
		setGameObjectType(inv->getUnsignedIntParameter());
		break;
	case RPC_SETCLIENTOBJECTCRC__INT_:
		setClientObjectCRC(inv->getUnsignedIntParameter());
		break;
	case RPC_SETSERVEROBJECTCRC__INT_:
		setServerObjectCRC(inv->getUnsignedIntParameter());
		break;
	case RPC_SETPARENT__SCENEOBJECT_:
		setParent((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_SETZONE__ZONE_:
		setZone((Zone*) inv->getObjectParameter());
		break;
	case RPC_SETDIRECTION__FLOAT_FLOAT_FLOAT_FLOAT_:
		setDirection(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter());
		break;
	case RPC_SETDIRECTION__FLOAT_:
		setDirection(inv->getFloatParameter());
		break;
	case RPC_SETMOVEMENTCOUNTER__INT_:
		setMovementCounter(inv->getUnsignedIntParameter());
		break;
	case RPC_INCREMENTMOVEMENTCOUNTER__:
		incrementMovementCounter();
		break;
	case RPC_SETCONTAINMENTTYPE__INT_:
		setContainmentType(inv->getUnsignedIntParameter());
		break;
	case RPC_SETLOGGINGNAME__STRING_:
		setLoggingName(inv->getAsciiParameter(_param0_setLoggingName__String_));
		break;
	case RPC_SETCLIENTOBJECT__BOOL_:
		setClientObject(inv->getBooleanParameter());
		break;
	case RPC_GETPLANETCRC__:
		resp->insertInt(getPlanetCRC());
		break;
	case RPC_ISSTATICOBJECT__:
		resp->insertBoolean(isStaticObject());
		break;
	case RPC_ISCONTAINEROBJECT__:
		resp->insertBoolean(isContainerObject());
		break;
	case RPC_ISTERMINAL__:
		resp->insertBoolean(isTerminal());
		break;
	case RPC_ISGROUPOBJECT__:
		resp->insertBoolean(isGroupObject());
		break;
	case RPC_ISGUILDOBJECT__:
		resp->insertBoolean(isGuildObject());
		break;
	case RPC_ISCONTROLDEVICE__:
		resp->insertBoolean(isControlDevice());
		break;
	case RPC_ISMISSIONTERMINAL__:
		resp->insertBoolean(isMissionTerminal());
		break;
	case RPC_ISMISSIONOBJECT__:
		resp->insertBoolean(isMissionObject());
		break;
	case RPC_GETPLANETMAPCATEGORYCRC__:
		resp->insertSignedInt(getPlanetMapCategoryCRC());
		break;
	case RPC_GETPLANETMAPSUBCATEGORYCRC__:
		resp->insertSignedInt(getPlanetMapSubCategoryCRC());
		break;
	case RPC_CONTAINSCHILDOBJECT__SCENEOBJECT_:
		resp->insertBoolean(containsChildObject((SceneObject*) inv->getObjectParameter()));
		break;
	case RPC_CREATECHILDOBJECTS__:
		createChildObjects();
		break;
	case RPC_INITIALIZECHILDOBJECT__SCENEOBJECT_:
		initializeChildObject((SceneObject*) inv->getObjectParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void SceneObjectAdapter::finalize() {
	((SceneObjectImplementation*) impl)->finalize();
}

void SceneObjectAdapter::initializePrivateData() {
	((SceneObjectImplementation*) impl)->initializePrivateData();
}

void SceneObjectAdapter::createComponents() {
	((SceneObjectImplementation*) impl)->createComponents();
}

void SceneObjectAdapter::createContainerComponent() {
	((SceneObjectImplementation*) impl)->createContainerComponent();
}

void SceneObjectAdapter::initializeTransientMembers() {
	((SceneObjectImplementation*) impl)->initializeTransientMembers();
}

void SceneObjectAdapter::notifyLoadFromDatabase() {
	((SceneObjectImplementation*) impl)->notifyLoadFromDatabase();
}

void SceneObjectAdapter::info(const String& msg, bool forced) {
	((SceneObjectImplementation*) impl)->info(msg, forced);
}

void SceneObjectAdapter::error(const String& msg) {
	((SceneObjectImplementation*) impl)->error(msg);
}

int SceneObjectAdapter::inRangeObjects(unsigned int gameObjectType, float range) {
	return ((SceneObjectImplementation*) impl)->inRangeObjects(gameObjectType, range);
}

bool SceneObjectAdapter::isInRange(SceneObject* obj, float range) {
	return ((SceneObjectImplementation*) impl)->isInRange(obj, range);
}

bool SceneObjectAdapter::addObject(SceneObject* object, int containmentType, bool notifyClient) {
	return ((SceneObjectImplementation*) impl)->addObject(object, containmentType, notifyClient);
}

bool SceneObjectAdapter::removeObject(SceneObject* object, bool notifyClient) {
	return ((SceneObjectImplementation*) impl)->removeObject(object, notifyClient);
}

int SceneObjectAdapter::canAddObject(SceneObject* object, int containmentType, String& errorDescription) {
	return ((SceneObjectImplementation*) impl)->canAddObject(object, containmentType, errorDescription);
}

void SceneObjectAdapter::synchronizedUIListen(SceneObject* player, int value) {
	((SceneObjectImplementation*) impl)->synchronizedUIListen(player, value);
}

void SceneObjectAdapter::synchronizedUIStopListen(SceneObject* player, int value) {
	((SceneObjectImplementation*) impl)->synchronizedUIStopListen(player, value);
}

void SceneObjectAdapter::updateToDatabase() {
	((SceneObjectImplementation*) impl)->updateToDatabase();
}

void SceneObjectAdapter::updateToDatabaseWithoutChildren() {
	((SceneObjectImplementation*) impl)->updateToDatabaseWithoutChildren();
}

void SceneObjectAdapter::updateToDatabaseAllObjects(bool startTask) {
	((SceneObjectImplementation*) impl)->updateToDatabaseAllObjects(startTask);
}

void SceneObjectAdapter::destroyObjectFromDatabase(bool destroyContainedObjects) {
	((SceneObjectImplementation*) impl)->destroyObjectFromDatabase(destroyContainedObjects);
}

int SceneObjectAdapter::canBeDestroyed(CreatureObject* player) {
	return ((SceneObjectImplementation*) impl)->canBeDestroyed(player);
}

void SceneObjectAdapter::create(ZoneClientSession* client) {
	((SceneObjectImplementation*) impl)->create(client);
}

void SceneObjectAdapter::destroy(ZoneClientSession* client) {
	((SceneObjectImplementation*) impl)->destroy(client);
}

void SceneObjectAdapter::close(ZoneClientSession* client) {
	((SceneObjectImplementation*) impl)->close(client);
}

void SceneObjectAdapter::link(ZoneClientSession* client, unsigned int containmentType) {
	((SceneObjectImplementation*) impl)->link(client, containmentType);
}

BaseMessage* SceneObjectAdapter::link(unsigned long long objectID, unsigned int containmentType) {
	return ((SceneObjectImplementation*) impl)->link(objectID, containmentType);
}

void SceneObjectAdapter::sendTo(SceneObject* player, bool doClose) {
	((SceneObjectImplementation*) impl)->sendTo(player, doClose);
}

void SceneObjectAdapter::sendWithoutParentTo(SceneObject* player) {
	((SceneObjectImplementation*) impl)->sendWithoutParentTo(player);
}

void SceneObjectAdapter::sendWithoutContainerObjectsTo(SceneObject* player) {
	((SceneObjectImplementation*) impl)->sendWithoutContainerObjectsTo(player);
}

void SceneObjectAdapter::sendDestroyTo(SceneObject* player) {
	((SceneObjectImplementation*) impl)->sendDestroyTo(player);
}

void SceneObjectAdapter::sendBaselinesTo(SceneObject* player) {
	((SceneObjectImplementation*) impl)->sendBaselinesTo(player);
}

void SceneObjectAdapter::sendContainerObjectsTo(SceneObject* player) {
	((SceneObjectImplementation*) impl)->sendContainerObjectsTo(player);
}

void SceneObjectAdapter::sendSlottedObjectsTo(SceneObject* player) {
	((SceneObjectImplementation*) impl)->sendSlottedObjectsTo(player);
}

void SceneObjectAdapter::sendToOwner(bool doClose) {
	((SceneObjectImplementation*) impl)->sendToOwner(doClose);
}

void SceneObjectAdapter::sendAttributeListTo(CreatureObject* object) {
	((SceneObjectImplementation*) impl)->sendAttributeListTo(object);
}

void SceneObjectAdapter::setCustomObjectName(const UnicodeString& name, bool notifyClient) {
	((SceneObjectImplementation*) impl)->setCustomObjectName(name, notifyClient);
}

void SceneObjectAdapter::openContainerTo(CreatureObject* player) {
	((SceneObjectImplementation*) impl)->openContainerTo(player);
}

void SceneObjectAdapter::closeContainerTo(CreatureObject* player, bool notify) {
	((SceneObjectImplementation*) impl)->closeContainerTo(player, notify);
}

void SceneObjectAdapter::insertToZone(Zone* zone) {
	((SceneObjectImplementation*) impl)->insertToZone(zone);
}

void SceneObjectAdapter::insertToBuilding(BuildingObject* building) {
	((SceneObjectImplementation*) impl)->insertToBuilding(building);
}

void SceneObjectAdapter::switchZone(const String& newTerrainName, float newPostionX, float newPositionZ, float newPositionY, unsigned long long parentID) {
	((SceneObjectImplementation*) impl)->switchZone(newTerrainName, newPostionX, newPositionZ, newPositionY, parentID);
}

void SceneObjectAdapter::teleport(float newPositionX, float newPositionZ, float newPositionY, unsigned long long parentID) {
	((SceneObjectImplementation*) impl)->teleport(newPositionX, newPositionZ, newPositionY, parentID);
}

void SceneObjectAdapter::updateDirection(float fw, float fx, float fy, float fz) {
	((SceneObjectImplementation*) impl)->updateDirection(fw, fx, fy, fz);
}

void SceneObjectAdapter::removeFromZone() {
	((SceneObjectImplementation*) impl)->removeFromZone();
}

void SceneObjectAdapter::removeFromBuilding(BuildingObject* building) {
	((SceneObjectImplementation*) impl)->removeFromBuilding(building);
}

void SceneObjectAdapter::updateZone(bool lightUpdate, bool sendPackets) {
	((SceneObjectImplementation*) impl)->updateZone(lightUpdate, sendPackets);
}

void SceneObjectAdapter::updateZoneWithParent(SceneObject* newParent, bool lightUpdate, bool sendPackets) {
	((SceneObjectImplementation*) impl)->updateZoneWithParent(newParent, lightUpdate, sendPackets);
}

void SceneObjectAdapter::broadcastMessage(BasePacket* message, bool sendSelf, bool lockZone) {
	((SceneObjectImplementation*) impl)->broadcastMessage(message, sendSelf, lockZone);
}

void SceneObjectAdapter::broadcastObject(SceneObject* object, bool sendSelf) {
	((SceneObjectImplementation*) impl)->broadcastObject(object, sendSelf);
}

void SceneObjectAdapter::broadcastDestroy(SceneObject* object, bool sendSelf) {
	((SceneObjectImplementation*) impl)->broadcastDestroy(object, sendSelf);
}

void SceneObjectAdapter::sendMessage(BasePacket* msg) {
	((SceneObjectImplementation*) impl)->sendMessage(msg);
}

int SceneObjectAdapter::compareTo(SceneObject* obj) {
	return ((SceneObjectImplementation*) impl)->compareTo(obj);
}

unsigned long long SceneObjectAdapter::getParentID() {
	return ((SceneObjectImplementation*) impl)->getParentID();
}

void SceneObjectAdapter::showFlyText(const String& file, const String& uax, byte red, byte green, byte blue) {
	((SceneObjectImplementation*) impl)->showFlyText(file, uax, red, green, blue);
}

Facade* SceneObjectAdapter::getActiveSession(unsigned int type) {
	return ((SceneObjectImplementation*) impl)->getActiveSession(type);
}

void SceneObjectAdapter::addActiveSession(unsigned int type, Facade* session) {
	((SceneObjectImplementation*) impl)->addActiveSession(type, session);
}

bool SceneObjectAdapter::containsActiveSession(unsigned int type) {
	return ((SceneObjectImplementation*) impl)->containsActiveSession(type);
}

bool SceneObjectAdapter::dropActiveSession(unsigned int type) {
	return ((SceneObjectImplementation*) impl)->dropActiveSession(type);
}

int SceneObjectAdapter::getActiveSessionsCount() {
	return ((SceneObjectImplementation*) impl)->getActiveSessionsCount();
}

int SceneObjectAdapter::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	return ((SceneObjectImplementation*) impl)->handleObjectMenuSelect(player, selectedID);
}

void SceneObjectAdapter::notifyAddedToCloseObjects() {
	((SceneObjectImplementation*) impl)->notifyAddedToCloseObjects();
}

void SceneObjectAdapter::notifyRemovedFromCloseObjects() {
	((SceneObjectImplementation*) impl)->notifyRemovedFromCloseObjects();
}

float SceneObjectAdapter::getDistanceTo(SceneObject* object) {
	return ((SceneObjectImplementation*) impl)->getDistanceTo(object);
}

void SceneObjectAdapter::updateVehiclePosition() {
	((SceneObjectImplementation*) impl)->updateVehiclePosition();
}

int SceneObjectAdapter::notifyObjectInserted(SceneObject* object) {
	return ((SceneObjectImplementation*) impl)->notifyObjectInserted(object);
}

int SceneObjectAdapter::notifyObjectRemoved(SceneObject* object) {
	return ((SceneObjectImplementation*) impl)->notifyObjectRemoved(object);
}

void SceneObjectAdapter::addActiveArea(ActiveArea* area) {
	((SceneObjectImplementation*) impl)->addActiveArea(area);
}

void SceneObjectAdapter::dropActiveArea(ActiveArea* area) {
	((SceneObjectImplementation*) impl)->dropActiveArea(area);
}

bool SceneObjectAdapter::hasActiveArea(ActiveArea* area) {
	return ((SceneObjectImplementation*) impl)->hasActiveArea(area);
}

int SceneObjectAdapter::getActiveAreasSize() {
	return ((SceneObjectImplementation*) impl)->getActiveAreasSize();
}

ActiveArea* SceneObjectAdapter::getActiveRegion() {
	return ((SceneObjectImplementation*) impl)->getActiveRegion();
}

CityRegion* SceneObjectAdapter::getCityRegion() {
	return ((SceneObjectImplementation*) impl)->getCityRegion();
}

void SceneObjectAdapter::setCityRegion(CityRegion* region) {
	((SceneObjectImplementation*) impl)->setCityRegion(region);
}

Zone* SceneObjectAdapter::getZone() {
	return ((SceneObjectImplementation*) impl)->getZone();
}

unsigned long long SceneObjectAdapter::getObjectID() {
	return ((SceneObjectImplementation*) impl)->getObjectID();
}

float SceneObjectAdapter::getWorldPositionX() {
	return ((SceneObjectImplementation*) impl)->getWorldPositionX();
}

float SceneObjectAdapter::getWorldPositionY() {
	return ((SceneObjectImplementation*) impl)->getWorldPositionY();
}

float SceneObjectAdapter::getWorldPositionZ() {
	return ((SceneObjectImplementation*) impl)->getWorldPositionZ();
}

float SceneObjectAdapter::getDirectionX() {
	return ((SceneObjectImplementation*) impl)->getDirectionX();
}

float SceneObjectAdapter::getDirectionZ() {
	return ((SceneObjectImplementation*) impl)->getDirectionZ();
}

float SceneObjectAdapter::getDirectionY() {
	return ((SceneObjectImplementation*) impl)->getDirectionY();
}

float SceneObjectAdapter::getDirectionW() {
	return ((SceneObjectImplementation*) impl)->getDirectionW();
}

unsigned int SceneObjectAdapter::getClientObjectCRC() {
	return ((SceneObjectImplementation*) impl)->getClientObjectCRC();
}

unsigned int SceneObjectAdapter::getServerObjectCRC() {
	return ((SceneObjectImplementation*) impl)->getServerObjectCRC();
}

bool SceneObjectAdapter::isWaypointObject() {
	return ((SceneObjectImplementation*) impl)->isWaypointObject();
}

String SceneObjectAdapter::getObjectNameStringIdFile() {
	return ((SceneObjectImplementation*) impl)->getObjectNameStringIdFile();
}

String SceneObjectAdapter::getObjectNameStringIdName() {
	return ((SceneObjectImplementation*) impl)->getObjectNameStringIdName();
}

int SceneObjectAdapter::getArrangementDescriptorSize() {
	return ((SceneObjectImplementation*) impl)->getArrangementDescriptorSize();
}

String SceneObjectAdapter::getArrangementDescriptor(int idx) {
	return ((SceneObjectImplementation*) impl)->getArrangementDescriptor(idx);
}

String SceneObjectAdapter::getSlotDescriptor(int idx) {
	return ((SceneObjectImplementation*) impl)->getSlotDescriptor(idx);
}

bool SceneObjectAdapter::hasSlotDescriptor(const String& descr) {
	return ((SceneObjectImplementation*) impl)->hasSlotDescriptor(descr);
}

SceneObject* SceneObjectAdapter::getSlottedObject(const String& slot) {
	return ((SceneObjectImplementation*) impl)->getSlottedObject(slot);
}

int SceneObjectAdapter::getSlotDescriptorSize() {
	return ((SceneObjectImplementation*) impl)->getSlotDescriptorSize();
}

SceneObject* SceneObjectAdapter::getSlottedObject(int idx) {
	return ((SceneObjectImplementation*) impl)->getSlottedObject(idx);
}

void SceneObjectAdapter::dropSlottedObject(const String& arrengementDescriptor) {
	((SceneObjectImplementation*) impl)->dropSlottedObject(arrengementDescriptor);
}

void SceneObjectAdapter::removeSlottedObject(int index) {
	((SceneObjectImplementation*) impl)->removeSlottedObject(index);
}

int SceneObjectAdapter::getContainerObjectsSize() {
	return ((SceneObjectImplementation*) impl)->getContainerObjectsSize();
}

int SceneObjectAdapter::getSlottedObjectsSize() {
	return ((SceneObjectImplementation*) impl)->getSlottedObjectsSize();
}

bool SceneObjectAdapter::hasFullContainerObjects() {
	return ((SceneObjectImplementation*) impl)->hasFullContainerObjects();
}

unsigned int SceneObjectAdapter::getContainerVolumeLimit() {
	return ((SceneObjectImplementation*) impl)->getContainerVolumeLimit();
}

SceneObject* SceneObjectAdapter::getContainerObject(int idx) {
	return ((SceneObjectImplementation*) impl)->getContainerObject(idx);
}

bool SceneObjectAdapter::hasObjectInContainer(unsigned long long objectID) {
	return ((SceneObjectImplementation*) impl)->hasObjectInContainer(objectID);
}

bool SceneObjectAdapter::hasObjectInSlottedContainer(SceneObject* object) {
	return ((SceneObjectImplementation*) impl)->hasObjectInSlottedContainer(object);
}

SceneObject* SceneObjectAdapter::getContainerObject(unsigned long long objectID) {
	return ((SceneObjectImplementation*) impl)->getContainerObject(objectID);
}

void SceneObjectAdapter::removeAllContainerObjects() {
	((SceneObjectImplementation*) impl)->removeAllContainerObjects();
}

void SceneObjectAdapter::putInContainer(SceneObject* obj, unsigned long long key) {
	((SceneObjectImplementation*) impl)->putInContainer(obj, key);
}

void SceneObjectAdapter::removeFromContainerObjects(int index) {
	((SceneObjectImplementation*) impl)->removeFromContainerObjects(index);
}

void SceneObjectAdapter::setContainerVolumeLimit(int lim) {
	((SceneObjectImplementation*) impl)->setContainerVolumeLimit(lim);
}

void SceneObjectAdapter::setContainerType(int type) {
	((SceneObjectImplementation*) impl)->setContainerType(type);
}

unsigned int SceneObjectAdapter::getContainerType() {
	return ((SceneObjectImplementation*) impl)->getContainerType();
}

ZoneClientSession* SceneObjectAdapter::getClient() {
	return ((SceneObjectImplementation*) impl)->getClient();
}

unsigned int SceneObjectAdapter::getGameObjectType() {
	return ((SceneObjectImplementation*) impl)->getGameObjectType();
}

unsigned int SceneObjectAdapter::getClientGameObjectType() {
	return ((SceneObjectImplementation*) impl)->getClientGameObjectType();
}

unsigned int SceneObjectAdapter::getContainmentType() {
	return ((SceneObjectImplementation*) impl)->getContainmentType();
}

float SceneObjectAdapter::getDirectionAngle() {
	return ((SceneObjectImplementation*) impl)->getDirectionAngle();
}

float SceneObjectAdapter::getSpecialDirectionAngle() {
	return ((SceneObjectImplementation*) impl)->getSpecialDirectionAngle();
}

void SceneObjectAdapter::rotate(int degrees) {
	((SceneObjectImplementation*) impl)->rotate(degrees);
}

void SceneObjectAdapter::faceObject(SceneObject* obj) {
	((SceneObjectImplementation*) impl)->faceObject(obj);
}

void SceneObjectAdapter::notifySelfPositionUpdate() {
	((SceneObjectImplementation*) impl)->notifySelfPositionUpdate();
}

void SceneObjectAdapter::notifyPositionUpdate(QuadTreeEntry* entry) {
	((SceneObjectImplementation*) impl)->notifyPositionUpdate(entry);
}

void SceneObjectAdapter::notifyCloseContainer(CreatureObject* player) {
	((SceneObjectImplementation*) impl)->notifyCloseContainer(player);
}

unsigned int SceneObjectAdapter::getMovementCounter() {
	return ((SceneObjectImplementation*) impl)->getMovementCounter();
}

SceneObject* SceneObjectAdapter::getParent() {
	return ((SceneObjectImplementation*) impl)->getParent();
}

ZoneServer* SceneObjectAdapter::getZoneServer() {
	return ((SceneObjectImplementation*) impl)->getZoneServer();
}

SceneObject* SceneObjectAdapter::getRootParent() {
	return ((SceneObjectImplementation*) impl)->getRootParent();
}

SceneObject* SceneObjectAdapter::getParentRecursively(unsigned int gameObjectType) {
	return ((SceneObjectImplementation*) impl)->getParentRecursively(gameObjectType);
}

bool SceneObjectAdapter::isASubChildOf(SceneObject* object) {
	return ((SceneObjectImplementation*) impl)->isASubChildOf(object);
}

UnicodeString SceneObjectAdapter::getCustomObjectName() {
	return ((SceneObjectImplementation*) impl)->getCustomObjectName();
}

String SceneObjectAdapter::getLoggingName() {
	return ((SceneObjectImplementation*) impl)->getLoggingName();
}

bool SceneObjectAdapter::isPlayerCreature() {
	return ((SceneObjectImplementation*) impl)->isPlayerCreature();
}

bool SceneObjectAdapter::isVendor() {
	return ((SceneObjectImplementation*) impl)->isVendor();
}

bool SceneObjectAdapter::isContainerFull() {
	return ((SceneObjectImplementation*) impl)->isContainerFull();
}

bool SceneObjectAdapter::isShuttleInstallation() {
	return ((SceneObjectImplementation*) impl)->isShuttleInstallation();
}

bool SceneObjectAdapter::isPlayerObject() {
	return ((SceneObjectImplementation*) impl)->isPlayerObject();
}

bool SceneObjectAdapter::isActiveArea() {
	return ((SceneObjectImplementation*) impl)->isActiveArea();
}

bool SceneObjectAdapter::isRegion() {
	return ((SceneObjectImplementation*) impl)->isRegion();
}

bool SceneObjectAdapter::isCreatureObject() {
	return ((SceneObjectImplementation*) impl)->isCreatureObject();
}

bool SceneObjectAdapter::isVehicleObject() {
	return ((SceneObjectImplementation*) impl)->isVehicleObject();
}

bool SceneObjectAdapter::isBuildingObject() {
	return ((SceneObjectImplementation*) impl)->isBuildingObject();
}

bool SceneObjectAdapter::isCloningBuildingObject() {
	return ((SceneObjectImplementation*) impl)->isCloningBuildingObject();
}

bool SceneObjectAdapter::isGarage() {
	return ((SceneObjectImplementation*) impl)->isGarage();
}

bool SceneObjectAdapter::isWeaponObject() {
	return ((SceneObjectImplementation*) impl)->isWeaponObject();
}

bool SceneObjectAdapter::isWearableObject() {
	return ((SceneObjectImplementation*) impl)->isWearableObject();
}

bool SceneObjectAdapter::isArmorObject() {
	return ((SceneObjectImplementation*) impl)->isArmorObject();
}

bool SceneObjectAdapter::isPsgArmorObject() {
	return ((SceneObjectImplementation*) impl)->isPsgArmorObject();
}

bool SceneObjectAdapter::isCellObject() {
	return ((SceneObjectImplementation*) impl)->isCellObject();
}

bool SceneObjectAdapter::isTangibleObject() {
	return ((SceneObjectImplementation*) impl)->isTangibleObject();
}

bool SceneObjectAdapter::isResourceContainer() {
	return ((SceneObjectImplementation*) impl)->isResourceContainer();
}

bool SceneObjectAdapter::isComponent() {
	return ((SceneObjectImplementation*) impl)->isComponent();
}

bool SceneObjectAdapter::isIntangibleObject() {
	return ((SceneObjectImplementation*) impl)->isIntangibleObject();
}

bool SceneObjectAdapter::isInstrument() {
	return ((SceneObjectImplementation*) impl)->isInstrument();
}

bool SceneObjectAdapter::isInstallationObject() {
	return ((SceneObjectImplementation*) impl)->isInstallationObject();
}

bool SceneObjectAdapter::isCityTerminal() {
	return ((SceneObjectImplementation*) impl)->isCityTerminal();
}

bool SceneObjectAdapter::isCityVoteTerminal() {
	return ((SceneObjectImplementation*) impl)->isCityVoteTerminal();
}

bool SceneObjectAdapter::isFactory() {
	return ((SceneObjectImplementation*) impl)->isFactory();
}

bool SceneObjectAdapter::isFactoryCrate() {
	return ((SceneObjectImplementation*) impl)->isFactoryCrate();
}

bool SceneObjectAdapter::isFishingPoleObject() {
	return ((SceneObjectImplementation*) impl)->isFishingPoleObject();
}

bool SceneObjectAdapter::isDeedObject() {
	return ((SceneObjectImplementation*) impl)->isDeedObject();
}

bool SceneObjectAdapter::isVehicleDeedObject() {
	return ((SceneObjectImplementation*) impl)->isVehicleDeedObject();
}

bool SceneObjectAdapter::isBuildingDeed() {
	return ((SceneObjectImplementation*) impl)->isBuildingDeed();
}

bool SceneObjectAdapter::isSignObject() {
	return ((SceneObjectImplementation*) impl)->isSignObject();
}

bool SceneObjectAdapter::isInstallationDeed() {
	return ((SceneObjectImplementation*) impl)->isInstallationDeed();
}

bool SceneObjectAdapter::isCraftingTool() {
	return ((SceneObjectImplementation*) impl)->isCraftingTool();
}

bool SceneObjectAdapter::isCraftingStation() {
	return ((SceneObjectImplementation*) impl)->isCraftingStation();
}

bool SceneObjectAdapter::isManufactureSchematic() {
	return ((SceneObjectImplementation*) impl)->isManufactureSchematic();
}

bool SceneObjectAdapter::isStructureObject() {
	return ((SceneObjectImplementation*) impl)->isStructureObject();
}

bool SceneObjectAdapter::isFishingBait() {
	return ((SceneObjectImplementation*) impl)->isFishingBait();
}

bool SceneObjectAdapter::isAttachment() {
	return ((SceneObjectImplementation*) impl)->isAttachment();
}

void SceneObjectAdapter::setGameObjectType(unsigned int type) {
	((SceneObjectImplementation*) impl)->setGameObjectType(type);
}

void SceneObjectAdapter::setClientObjectCRC(unsigned int objCRC) {
	((SceneObjectImplementation*) impl)->setClientObjectCRC(objCRC);
}

void SceneObjectAdapter::setServerObjectCRC(unsigned int objCRC) {
	((SceneObjectImplementation*) impl)->setServerObjectCRC(objCRC);
}

void SceneObjectAdapter::setParent(SceneObject* par) {
	((SceneObjectImplementation*) impl)->setParent(par);
}

void SceneObjectAdapter::setZone(Zone* zone) {
	((SceneObjectImplementation*) impl)->setZone(zone);
}

void SceneObjectAdapter::setDirection(float fw, float fx, float fy, float fz) {
	((SceneObjectImplementation*) impl)->setDirection(fw, fx, fy, fz);
}

void SceneObjectAdapter::setDirection(float headingAngleRadians) {
	((SceneObjectImplementation*) impl)->setDirection(headingAngleRadians);
}

void SceneObjectAdapter::setMovementCounter(unsigned int count) {
	((SceneObjectImplementation*) impl)->setMovementCounter(count);
}

void SceneObjectAdapter::incrementMovementCounter() {
	((SceneObjectImplementation*) impl)->incrementMovementCounter();
}

void SceneObjectAdapter::setContainmentType(unsigned int type) {
	((SceneObjectImplementation*) impl)->setContainmentType(type);
}

void SceneObjectAdapter::setLoggingName(const String& name) {
	((SceneObjectImplementation*) impl)->setLoggingName(name);
}

void SceneObjectAdapter::setClientObject(bool val) {
	((SceneObjectImplementation*) impl)->setClientObject(val);
}

unsigned int SceneObjectAdapter::getPlanetCRC() {
	return ((SceneObjectImplementation*) impl)->getPlanetCRC();
}

bool SceneObjectAdapter::isStaticObject() {
	return ((SceneObjectImplementation*) impl)->isStaticObject();
}

bool SceneObjectAdapter::isContainerObject() {
	return ((SceneObjectImplementation*) impl)->isContainerObject();
}

bool SceneObjectAdapter::isTerminal() {
	return ((SceneObjectImplementation*) impl)->isTerminal();
}

bool SceneObjectAdapter::isGroupObject() {
	return ((SceneObjectImplementation*) impl)->isGroupObject();
}

bool SceneObjectAdapter::isGuildObject() {
	return ((SceneObjectImplementation*) impl)->isGuildObject();
}

bool SceneObjectAdapter::isControlDevice() {
	return ((SceneObjectImplementation*) impl)->isControlDevice();
}

bool SceneObjectAdapter::isMissionTerminal() {
	return ((SceneObjectImplementation*) impl)->isMissionTerminal();
}

bool SceneObjectAdapter::isMissionObject() {
	return ((SceneObjectImplementation*) impl)->isMissionObject();
}

int SceneObjectAdapter::getPlanetMapCategoryCRC() {
	return ((SceneObjectImplementation*) impl)->getPlanetMapCategoryCRC();
}

int SceneObjectAdapter::getPlanetMapSubCategoryCRC() {
	return ((SceneObjectImplementation*) impl)->getPlanetMapSubCategoryCRC();
}

bool SceneObjectAdapter::containsChildObject(SceneObject* obj) {
	return ((SceneObjectImplementation*) impl)->containsChildObject(obj);
}

void SceneObjectAdapter::createChildObjects() {
	((SceneObjectImplementation*) impl)->createChildObjects();
}

void SceneObjectAdapter::initializeChildObject(SceneObject* controllerObject) {
	((SceneObjectImplementation*) impl)->initializeChildObject(controllerObject);
}

/*
 *	SceneObjectHelper
 */

SceneObjectHelper* SceneObjectHelper::staticInitializer = SceneObjectHelper::instance();

SceneObjectHelper::SceneObjectHelper() {
	className = "SceneObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void SceneObjectHelper::finalizeHelper() {
	SceneObjectHelper::finalize();
}

DistributedObject* SceneObjectHelper::instantiateObject() {
	return new SceneObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* SceneObjectHelper::instantiateServant() {
	return new SceneObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* SceneObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SceneObjectAdapter((SceneObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

