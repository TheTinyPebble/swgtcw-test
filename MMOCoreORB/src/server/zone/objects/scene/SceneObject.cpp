/*
 *	server/zone/objects/scene/SceneObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "SceneObject.h"

#include "server/zone/ZoneProcessServerImplementation.h"

#include "server/zone/objects/scene/variables/StringId.h"

#include "server/zone/objects/scene/SceneObject.h"

/*
 *	SceneObjectStub
 */

SceneObject::SceneObject(LuaObject* templateData, SceneObject* parent) : ManagedObject(DummyConstructorParameter::instance()) {
	_impl = new SceneObjectImplementation(templateData, parent);
	_impl->_setStub(this);
}

SceneObject::SceneObject(DummyConstructorParameter* param) : ManagedObject(param) {
}

SceneObject::~SceneObject() {
}

void SceneObject::addSerializableVariables() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->addSerializableVariables();
}

void SceneObject::serialize(string& data) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addAsciiParameter(data);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->serialize(data);
}

void SceneObject::deSerialize(const string& data) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addAsciiParameter(data);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->deSerialize(data);
}

unsigned long long SceneObject::getObjectID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getObjectID();
}

float SceneObject::getPositionX() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getPositionX();
}

float SceneObject::getPositionZ() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getPositionZ();
}

float SceneObject::getPositionY() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getPositionY();
}

float SceneObject::getDirectionX() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getDirectionX();
}

float SceneObject::getDirectionZ() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getDirectionZ();
}

float SceneObject::getDirectionY() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getDirectionY();
}

float SceneObject::getDirectionW() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getDirectionW();
}

unsigned int SceneObject::getObjectCRC() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getObjectCRC();
}

unsigned int SceneObject::getGameObjectType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getGameObjectType();
}

void SceneObject::setPosition(float x, float z, float y) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addFloatParameter(x);
		method.addFloatParameter(z);
		method.addFloatParameter(y);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setPosition(x, z, y);
}

void SceneObject::setGameObjectType(unsigned int type) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addUnsignedIntParameter(type);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setGameObjectType(type);
}

void SceneObject::setObjectCRC(unsigned int objCRC) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addUnsignedIntParameter(objCRC);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setObjectCRC(objCRC);
}

void SceneObject::redeploy() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->redeploy();
}

void SceneObject::scheduleUndeploy() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->scheduleUndeploy();
}

void SceneObject::undeploy() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->undeploy();
}

void SceneObject::removeUndeploymentEvent() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->removeUndeploymentEvent();
}

bool SceneObject::isPlayer(byte test) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);
		method.addByteParameter(test);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isPlayer(test);
}

bool SceneObject::addObject(unsigned int slot, SceneObject* object) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);
		method.addUnsignedIntParameter(slot);
		method.addObjectParameter(object);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->addObject(slot, object);
}

bool SceneObject::removeObject(unsigned int slot) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);
		method.addUnsignedIntParameter(slot);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->removeObject(slot);
}

void SceneObject::create(ZoneClientSession* client) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);
		method.addObjectParameter(client);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->create(client);
}

void SceneObject::destroy(ZoneClientSession* client) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);
		method.addObjectParameter(client);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->destroy(client);
}

void SceneObject::sendTo(SceneObject* player, bool doClose) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);
		method.addObjectParameter(player);
		method.addBooleanParameter(doClose);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->sendTo(player, doClose);
}

void SceneObject::setParent(SceneObject* parent) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);
		method.addObjectParameter(parent);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setParent(parent);
}

void SceneObject::setStrTemp(string& strtmp) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);
		method.addAsciiParameter(strtmp);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setStrTemp(strtmp);
}

/*
 *	SceneObjectImplementation
 */

SceneObjectImplementation::~SceneObjectImplementation() {
}

void SceneObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (SceneObject*) stub;
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* SceneObjectImplementation::_getStub() {
	return _this;
}

void SceneObjectImplementation::serialize(string& data) {
	// server/zone/objects/scene/SceneObject.idl(96):  Serializable.serialize(data);
	Serializable::serialize((&data));
}

void SceneObjectImplementation::deSerialize(const string& data) {
	// server/zone/objects/scene/SceneObject.idl(100):  Serializable.deSerialize(data);
	Serializable::deSerialize((&data));
}

unsigned long long SceneObjectImplementation::getObjectID() {
	// server/zone/objects/scene/SceneObject.idl(292):  return QuadTreeEntry.objectID;
	return QuadTreeEntry::objectID;
}

float SceneObjectImplementation::getPositionX() {
	// server/zone/objects/scene/SceneObject.idl(296):  return QuadTreeEntry.getPositionX();
	return QuadTreeEntry::getPositionX();
}

float SceneObjectImplementation::getPositionZ() {
	// server/zone/objects/scene/SceneObject.idl(300):  return QuadTreeEntry.getPositionZ();
	return QuadTreeEntry::getPositionZ();
}

float SceneObjectImplementation::getPositionY() {
	// server/zone/objects/scene/SceneObject.idl(304):  return QuadTreeEntry.getPositionY();
	return QuadTreeEntry::getPositionY();
}

float SceneObjectImplementation::getDirectionX() {
	// server/zone/objects/scene/SceneObject.idl(308):  return direction.getX();
	return direction->getX();
}

float SceneObjectImplementation::getDirectionZ() {
	// server/zone/objects/scene/SceneObject.idl(312):  return direction.getZ();
	return direction->getZ();
}

float SceneObjectImplementation::getDirectionY() {
	// server/zone/objects/scene/SceneObject.idl(316):  return direction.getY();
	return direction->getY();
}

float SceneObjectImplementation::getDirectionW() {
	// server/zone/objects/scene/SceneObject.idl(320):  return direction.getW();
	return direction->getW();
}

unsigned int SceneObjectImplementation::getObjectCRC() {
	// server/zone/objects/scene/SceneObject.idl(324):  return this.objectCRC;
	return this->objectCRC;
}

unsigned int SceneObjectImplementation::getGameObjectType() {
	// server/zone/objects/scene/SceneObject.idl(332):  return this.gameObjectType;
	return this->gameObjectType;
}

void SceneObjectImplementation::setPosition(float x, float z, float y) {
	// server/zone/objects/scene/SceneObject.idl(336):  QuadTreeEntry.setPosition(x, z, y);
	QuadTreeEntry::setPosition(x, z, y);
}

void SceneObjectImplementation::setGameObjectType(unsigned int type) {
	// server/zone/objects/scene/SceneObject.idl(340):  this.gameObjectType = type;
	this->gameObjectType = type;
}

void SceneObjectImplementation::setObjectCRC(unsigned int objCRC) {
	// server/zone/objects/scene/SceneObject.idl(344):  this.objectCRC = objCRC;
	this->objectCRC = objCRC;
}

void SceneObjectImplementation::redeploy() {
}

void SceneObjectImplementation::scheduleUndeploy() {
}

void SceneObjectImplementation::undeploy() {
}

void SceneObjectImplementation::removeUndeploymentEvent() {
}

bool SceneObjectImplementation::isPlayer(byte test) {
	// server/zone/objects/scene/SceneObject.idl(360):  return true;
	return true;
}

bool SceneObjectImplementation::addObject(unsigned int slot, SceneObject* object) {
	// server/zone/objects/scene/SceneObject.idl(364):  children.
	if (children->contains(slot)){
	// server/zone/objects/scene/SceneObject.idl(365):  removeObject(slot);
	removeObject(slot);
}
	// server/zone/objects/scene/SceneObject.idl(368):  put(slot, object);
	children->put(slot, object);
	// server/zone/objects/scene/SceneObject.idl(370):  object.setParent(this);
	object->setParent(this);
	// server/zone/objects/scene/SceneObject.idl(372):  return true;
	return true;
}

bool SceneObjectImplementation::removeObject(unsigned int slot) {
	// server/zone/objects/scene/SceneObject.idl(376):  return children.drop(slot);
	return children->drop(slot);
}

void SceneObjectImplementation::sendTo(SceneObject* player, bool doClose) {
}

void SceneObjectImplementation::setParent(SceneObject* parent) {
	// server/zone/objects/scene/SceneObject.idl(387):  this.parent = parent;
	this->parent = parent;
}

void SceneObjectImplementation::setStrTemp(string& strtmp) {
	// server/zone/objects/scene/SceneObject.idl(393):  strTemp = strtmp;
	(&strTemp) = (&strtmp);
}

/*
 *	SceneObjectAdapter
 */

SceneObjectAdapter::SceneObjectAdapter(SceneObjectImplementation* obj) : ManagedObjectAdapter(obj) {
}

Packet* SceneObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		addSerializableVariables();
		break;
	case 7:
		serialize(inv->getAsciiParameter(_param0_serialize__string_));
		break;
	case 8:
		deSerialize(inv->getAsciiParameter(_param0_deSerialize__string_));
		break;
	case 9:
		resp->insertLong(getObjectID());
		break;
	case 10:
		resp->insertFloat(getPositionX());
		break;
	case 11:
		resp->insertFloat(getPositionZ());
		break;
	case 12:
		resp->insertFloat(getPositionY());
		break;
	case 13:
		resp->insertFloat(getDirectionX());
		break;
	case 14:
		resp->insertFloat(getDirectionZ());
		break;
	case 15:
		resp->insertFloat(getDirectionY());
		break;
	case 16:
		resp->insertFloat(getDirectionW());
		break;
	case 17:
		resp->insertInt(getObjectCRC());
		break;
	case 18:
		resp->insertInt(getGameObjectType());
		break;
	case 19:
		setPosition(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter());
		break;
	case 20:
		setGameObjectType(inv->getUnsignedIntParameter());
		break;
	case 21:
		setObjectCRC(inv->getUnsignedIntParameter());
		break;
	case 22:
		redeploy();
		break;
	case 23:
		scheduleUndeploy();
		break;
	case 24:
		undeploy();
		break;
	case 25:
		removeUndeploymentEvent();
		break;
	case 26:
		resp->insertBoolean(isPlayer(inv->getByteParameter()));
		break;
	case 27:
		resp->insertBoolean(addObject(inv->getUnsignedIntParameter(), (SceneObject*) inv->getObjectParameter()));
		break;
	case 28:
		resp->insertBoolean(removeObject(inv->getUnsignedIntParameter()));
		break;
	case 29:
		create((ZoneClientSession*) inv->getObjectParameter());
		break;
	case 30:
		destroy((ZoneClientSession*) inv->getObjectParameter());
		break;
	case 31:
		sendTo((SceneObject*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 32:
		setParent((SceneObject*) inv->getObjectParameter());
		break;
	case 33:
		setStrTemp(inv->getAsciiParameter(_param0_setStrTemp__string_));
		break;
	default:
		return NULL;
	}

	return resp;
}

void SceneObjectAdapter::addSerializableVariables() {
	return ((SceneObjectImplementation*) impl)->addSerializableVariables();
}

void SceneObjectAdapter::serialize(string& data) {
	return ((SceneObjectImplementation*) impl)->serialize(data);
}

void SceneObjectAdapter::deSerialize(const string& data) {
	return ((SceneObjectImplementation*) impl)->deSerialize(data);
}

unsigned long long SceneObjectAdapter::getObjectID() {
	return ((SceneObjectImplementation*) impl)->getObjectID();
}

float SceneObjectAdapter::getPositionX() {
	return ((SceneObjectImplementation*) impl)->getPositionX();
}

float SceneObjectAdapter::getPositionZ() {
	return ((SceneObjectImplementation*) impl)->getPositionZ();
}

float SceneObjectAdapter::getPositionY() {
	return ((SceneObjectImplementation*) impl)->getPositionY();
}

float SceneObjectAdapter::getDirectionX() {
	return ((SceneObjectImplementation*) impl)->getDirectionX();
}

float SceneObjectAdapter::getDirectionZ() {
	return ((SceneObjectImplementation*) impl)->getDirectionZ();
}

float SceneObjectAdapter::getDirectionY() {
	return ((SceneObjectImplementation*) impl)->getDirectionY();
}

float SceneObjectAdapter::getDirectionW() {
	return ((SceneObjectImplementation*) impl)->getDirectionW();
}

unsigned int SceneObjectAdapter::getObjectCRC() {
	return ((SceneObjectImplementation*) impl)->getObjectCRC();
}

unsigned int SceneObjectAdapter::getGameObjectType() {
	return ((SceneObjectImplementation*) impl)->getGameObjectType();
}

void SceneObjectAdapter::setPosition(float x, float z, float y) {
	return ((SceneObjectImplementation*) impl)->setPosition(x, z, y);
}

void SceneObjectAdapter::setGameObjectType(unsigned int type) {
	return ((SceneObjectImplementation*) impl)->setGameObjectType(type);
}

void SceneObjectAdapter::setObjectCRC(unsigned int objCRC) {
	return ((SceneObjectImplementation*) impl)->setObjectCRC(objCRC);
}

void SceneObjectAdapter::redeploy() {
	return ((SceneObjectImplementation*) impl)->redeploy();
}

void SceneObjectAdapter::scheduleUndeploy() {
	return ((SceneObjectImplementation*) impl)->scheduleUndeploy();
}

void SceneObjectAdapter::undeploy() {
	return ((SceneObjectImplementation*) impl)->undeploy();
}

void SceneObjectAdapter::removeUndeploymentEvent() {
	return ((SceneObjectImplementation*) impl)->removeUndeploymentEvent();
}

bool SceneObjectAdapter::isPlayer(byte test) {
	return ((SceneObjectImplementation*) impl)->isPlayer(test);
}

bool SceneObjectAdapter::addObject(unsigned int slot, SceneObject* object) {
	return ((SceneObjectImplementation*) impl)->addObject(slot, object);
}

bool SceneObjectAdapter::removeObject(unsigned int slot) {
	return ((SceneObjectImplementation*) impl)->removeObject(slot);
}

void SceneObjectAdapter::create(ZoneClientSession* client) {
	return ((SceneObjectImplementation*) impl)->create(client);
}

void SceneObjectAdapter::destroy(ZoneClientSession* client) {
	return ((SceneObjectImplementation*) impl)->destroy(client);
}

void SceneObjectAdapter::sendTo(SceneObject* player, bool doClose) {
	return ((SceneObjectImplementation*) impl)->sendTo(player, doClose);
}

void SceneObjectAdapter::setParent(SceneObject* parent) {
	return ((SceneObjectImplementation*) impl)->setParent(parent);
}

void SceneObjectAdapter::setStrTemp(string& strtmp) {
	return ((SceneObjectImplementation*) impl)->setStrTemp(strtmp);
}

/*
 *	SceneObjectHelper
 */

SceneObjectHelper* SceneObjectHelper::staticInitializer = SceneObjectHelper::instance();

SceneObjectHelper::SceneObjectHelper() {
	className = "SceneObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void SceneObjectHelper::finalizeHelper() {
	SceneObjectHelper::finalize();
}

DistributedObject* SceneObjectHelper::instantiateObject() {
	return new SceneObject(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* SceneObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SceneObjectAdapter((SceneObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

