/*
 *	server/zone/objects/scene/SceneObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "SceneObject.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

#include "server/zone/ZoneProcessServerImplementation.h"

#include "server/zone/ZoneClientSession.h"

#include "server/zone/Zone.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/objects/area/ActiveArea.h"

/*
 *	SceneObjectStub
 */

SceneObject::SceneObject() : Observable(DummyConstructorParameter::instance()) {
	_impl = new SceneObjectImplementation();
	_impl->_setStub(this);
}

SceneObject::SceneObject(DummyConstructorParameter* param) : Observable(param) {
}

SceneObject::~SceneObject() {
}


void SceneObject::initializePrivateData() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->initializePrivateData();
}

void SceneObject::loadTemplateData(SharedObjectTemplate* templateData) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((SceneObjectImplementation*) _impl)->loadTemplateData(templateData);
}

void SceneObject::initializeTransientMembers() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->initializeTransientMembers();
}

void SceneObject::notifyLoadFromDatabase() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->notifyLoadFromDatabase();
}

void SceneObject::info(const String& msg, bool forced) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addAsciiParameter(msg);
		method.addBooleanParameter(forced);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->info(msg, forced);
}

void SceneObject::error(const String& msg) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addAsciiParameter(msg);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->error(msg);
}

int SceneObject::inRangeObjectCount() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		return method.executeWithSignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->inRangeObjectCount();
}

QuadTreeEntry* SceneObject::getInRangeObject(int index) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((SceneObjectImplementation*) _impl)->getInRangeObject(index);
}

int SceneObject::inRangeObjects(unsigned int gameObjectType, float range) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addUnsignedIntParameter(gameObjectType);
		method.addFloatParameter(range);

		return method.executeWithSignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->inRangeObjects(gameObjectType, range);
}

bool SceneObject::isInRange(SceneObject* obj, float range) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addObjectParameter(obj);
		method.addFloatParameter(range);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isInRange(obj, range);
}

bool SceneObject::isInRange(QuadTreeEntry* obj, float range) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((SceneObjectImplementation*) _impl)->isInRange(obj, range);
}

void SceneObject::removeInRangeObject(QuadTreeEntry* obj) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((SceneObjectImplementation*) _impl)->removeInRangeObject(obj);
}

bool SceneObject::addObject(SceneObject* object, int containmentType, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addObjectParameter(object);
		method.addSignedIntParameter(containmentType);
		method.addBooleanParameter(notifyClient);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->addObject(object, containmentType, notifyClient);
}

bool SceneObject::removeObject(SceneObject* object, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addObjectParameter(object);
		method.addBooleanParameter(notifyClient);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->removeObject(object, notifyClient);
}

int SceneObject::canAddObject(SceneObject* object, String& errorDescription) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addObjectParameter(object);
		method.addAsciiParameter(errorDescription);

		return method.executeWithSignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->canAddObject(object, errorDescription);
}

void SceneObject::synchronizedUIListen(SceneObject* player, int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addObjectParameter(player);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->synchronizedUIListen(player, value);
}

void SceneObject::synchronizedUIStopListen(SceneObject* player, int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addObjectParameter(player);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->synchronizedUIStopListen(player, value);
}

void SceneObject::updateToDatabase() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->updateToDatabase();
}

void SceneObject::updateToDatabaseWithoutChildren() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->updateToDatabaseWithoutChildren();
}

void SceneObject::updateToDatabaseAllObjects(bool startTask) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addBooleanParameter(startTask);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->updateToDatabaseAllObjects(startTask);
}

void SceneObject::destroyObjectFromDatabase(bool destroyContainedObjects) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);
		method.addBooleanParameter(destroyContainedObjects);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->destroyObjectFromDatabase(destroyContainedObjects);
}

int SceneObject::canBeDestroyed(PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->canBeDestroyed(player);
}

void SceneObject::create(ZoneClientSession* client) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);
		method.addObjectParameter(client);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->create(client);
}

void SceneObject::destroy(ZoneClientSession* client) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);
		method.addObjectParameter(client);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->destroy(client);
}

void SceneObject::close(ZoneClientSession* client) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);
		method.addObjectParameter(client);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->close(client);
}

void SceneObject::link(ZoneClientSession* client, unsigned int containmentType) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);
		method.addObjectParameter(client);
		method.addUnsignedIntParameter(containmentType);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->link(client, containmentType);
}

BaseMessage* SceneObject::link(unsigned long long objectID, unsigned int containmentType) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);
		method.addUnsignedLongParameter(objectID);
		method.addUnsignedIntParameter(containmentType);

		return (BaseMessage*) method.executeWithObjectReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->link(objectID, containmentType);
}

void SceneObject::sendTo(SceneObject* player, bool doClose) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);
		method.addObjectParameter(player);
		method.addBooleanParameter(doClose);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->sendTo(player, doClose);
}

void SceneObject::sendWithoutParentTo(SceneObject* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->sendWithoutParentTo(player);
}

void SceneObject::sendDestroyTo(SceneObject* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->sendDestroyTo(player);
}

void SceneObject::sendBaselinesTo(SceneObject* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->sendBaselinesTo(player);
}

void SceneObject::sendContainerObjectsTo(SceneObject* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->sendContainerObjectsTo(player);
}

void SceneObject::sendSlottedObjectsTo(SceneObject* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->sendSlottedObjectsTo(player);
}

void SceneObject::sendToOwner(bool doClose) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);
		method.addBooleanParameter(doClose);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->sendToOwner(doClose);
}

void SceneObject::sendAttributeListTo(PlayerCreature* object) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 36);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->sendAttributeListTo(object);
}

void SceneObject::fillAttributeList(AttributeListMessage* msg, PlayerCreature* object) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((SceneObjectImplementation*) _impl)->fillAttributeList(msg, object);
}

void SceneObject::setCustomObjectName(const UnicodeString& name, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 37);
		method.addUnicodeParameter(name);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setCustomObjectName(name, notifyClient);
}

void SceneObject::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((SceneObjectImplementation*) _impl)->fillObjectMenuResponse(menuResponse, player);
}

void SceneObject::openContainerTo(PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 38);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->openContainerTo(player);
}

void SceneObject::closeContainerTo(PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 39);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->closeContainerTo(player);
}

void SceneObject::insertToZone(Zone* zone) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 40);
		method.addObjectParameter(zone);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->insertToZone(zone);
}

void SceneObject::insertToBuilding(BuildingObject* building) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 41);
		method.addObjectParameter(building);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->insertToBuilding(building);
}

void SceneObject::switchZone(int newZoneID, float newPostionX, float newPositionZ, float newPositionY, unsigned long long parentID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 42);
		method.addSignedIntParameter(newZoneID);
		method.addFloatParameter(newPostionX);
		method.addFloatParameter(newPositionZ);
		method.addFloatParameter(newPositionY);
		method.addUnsignedLongParameter(parentID);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->switchZone(newZoneID, newPostionX, newPositionZ, newPositionY, parentID);
}

void SceneObject::teleport(float newPositionX, float newPositionZ, float newPositionY, unsigned long long parentID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 43);
		method.addFloatParameter(newPositionX);
		method.addFloatParameter(newPositionZ);
		method.addFloatParameter(newPositionY);
		method.addUnsignedLongParameter(parentID);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->teleport(newPositionX, newPositionZ, newPositionY, parentID);
}

void SceneObject::removeFromZone() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 44);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->removeFromZone();
}

void SceneObject::removeFromBuilding(BuildingObject* building) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 45);
		method.addObjectParameter(building);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->removeFromBuilding(building);
}

void SceneObject::updateZone(bool lightUpdate, bool sendPackets) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 46);
		method.addBooleanParameter(lightUpdate);
		method.addBooleanParameter(sendPackets);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->updateZone(lightUpdate, sendPackets);
}

void SceneObject::updateZoneWithParent(SceneObject* newParent, bool lightUpdate, bool sendPackets) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 47);
		method.addObjectParameter(newParent);
		method.addBooleanParameter(lightUpdate);
		method.addBooleanParameter(sendPackets);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->updateZoneWithParent(newParent, lightUpdate, sendPackets);
}

void SceneObject::broadcastMessage(BasePacket* message, bool sendSelf) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 48);
		method.addObjectParameter(message);
		method.addBooleanParameter(sendSelf);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->broadcastMessage(message, sendSelf);
}

void SceneObject::broadcastObject(SceneObject* object, bool sendSelf) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 49);
		method.addObjectParameter(object);
		method.addBooleanParameter(sendSelf);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->broadcastObject(object, sendSelf);
}

void SceneObject::broadcastMessages(Vector<BasePacket*>* messages, bool sendSelf) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((SceneObjectImplementation*) _impl)->broadcastMessages(messages, sendSelf);
}

void SceneObject::sendMessage(BasePacket* msg) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 50);
		method.addObjectParameter(msg);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->sendMessage(msg);
}

int SceneObject::compareTo(SceneObject* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 51);
		method.addObjectParameter(obj);

		return method.executeWithSignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->compareTo(obj);
}

void SceneObject::getContainmentObjects(VectorMap<String, ManagedReference<SceneObject* > >& objects) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((SceneObjectImplementation*) _impl)->getContainmentObjects(objects);
}

unsigned long long SceneObject::getParentID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 52);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getParentID();
}

void SceneObject::addPendingTask(const String& name, Task* task) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((SceneObjectImplementation*) _impl)->addPendingTask(name, task);
}

void SceneObject::removePendingTask(const String& name) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((SceneObjectImplementation*) _impl)->removePendingTask(name);
}

Task* SceneObject::getPendingTask(const String& name) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((SceneObjectImplementation*) _impl)->getPendingTask(name);
}

int SceneObject::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 53);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->handleObjectMenuSelect(player, selectedID);
}

float SceneObject::getDistanceTo(SceneObject* object) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 54);
		method.addObjectParameter(object);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getDistanceTo(object);
}

void SceneObject::updateVehiclePosition() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 55);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->updateVehiclePosition();
}

int SceneObject::notifyObjectInserted(SceneObject* object) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 56);
		method.addObjectParameter(object);

		return method.executeWithSignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->notifyObjectInserted(object);
}

int SceneObject::notifyObjectRemoved(SceneObject* object) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 57);
		method.addObjectParameter(object);

		return method.executeWithSignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->notifyObjectRemoved(object);
}

bool SceneObject::hasNotifiedSentObject(SceneObject* object) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 58);
		method.addObjectParameter(object);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->hasNotifiedSentObject(object);
}

void SceneObject::addNotifiedSentObject(SceneObject* object) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 59);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->addNotifiedSentObject(object);
}

void SceneObject::removeNotifiedSentObject(SceneObject* object) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 60);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->removeNotifiedSentObject(object);
}

unsigned long long SceneObject::getObjectID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 61);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getObjectID();
}

Vector3 SceneObject::getPosition() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((SceneObjectImplementation*) _impl)->getPosition();
}

float SceneObject::getWorldPositionX() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 62);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getWorldPositionX();
}

float SceneObject::getWorldPositionY() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 63);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getWorldPositionY();
}

float SceneObject::getWorldPositionZ() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 64);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getWorldPositionZ();
}

Vector3 SceneObject::getWorldPosition() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((SceneObjectImplementation*) _impl)->getWorldPosition();
}

float SceneObject::getPositionX() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 65);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getPositionX();
}

float SceneObject::getPositionZ() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 66);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getPositionZ();
}

float SceneObject::getPositionY() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 67);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getPositionY();
}

float SceneObject::getDirectionX() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 68);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getDirectionX();
}

float SceneObject::getDirectionZ() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 69);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getDirectionZ();
}

float SceneObject::getDirectionY() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 70);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getDirectionY();
}

float SceneObject::getDirectionW() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 71);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getDirectionW();
}

Quaternion* SceneObject::getDirection() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((SceneObjectImplementation*) _impl)->getDirection();
}

unsigned int SceneObject::getClientObjectCRC() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 72);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getClientObjectCRC();
}

unsigned int SceneObject::getServerObjectCRC() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 73);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getServerObjectCRC();
}

bool SceneObject::isWaypointObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 74);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isWaypointObject();
}

StringId* SceneObject::getObjectName() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((SceneObjectImplementation*) _impl)->getObjectName();
}

String SceneObject::getObjectNameStringIdFile() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 75);

		method.executeWithAsciiReturn(_return_getObjectNameStringIdFile);
		return _return_getObjectNameStringIdFile;
	} else
		return ((SceneObjectImplementation*) _impl)->getObjectNameStringIdFile();
}

String SceneObject::getObjectNameStringIdName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 76);

		method.executeWithAsciiReturn(_return_getObjectNameStringIdName);
		return _return_getObjectNameStringIdName;
	} else
		return ((SceneObjectImplementation*) _impl)->getObjectNameStringIdName();
}

StringId* SceneObject::getDetailedDescription() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((SceneObjectImplementation*) _impl)->getDetailedDescription();
}

int SceneObject::getArrangementDescriptorSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 77);

		return method.executeWithSignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getArrangementDescriptorSize();
}

String SceneObject::getArrangementDescriptor(int idx) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 78);
		method.addSignedIntParameter(idx);

		method.executeWithAsciiReturn(_return_getArrangementDescriptor);
		return _return_getArrangementDescriptor;
	} else
		return ((SceneObjectImplementation*) _impl)->getArrangementDescriptor(idx);
}

String SceneObject::getSlotDescriptor(int idx) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 79);
		method.addSignedIntParameter(idx);

		method.executeWithAsciiReturn(_return_getSlotDescriptor);
		return _return_getSlotDescriptor;
	} else
		return ((SceneObjectImplementation*) _impl)->getSlotDescriptor(idx);
}

bool SceneObject::hasSlotDescriptor(const String& descr) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 80);
		method.addAsciiParameter(descr);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->hasSlotDescriptor(descr);
}

SceneObject* SceneObject::getSlottedObject(const String& slot) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 81);
		method.addAsciiParameter(slot);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getSlottedObject(slot);
}

int SceneObject::getSlotDescriptorSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 82);

		return method.executeWithSignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getSlotDescriptorSize();
}

int SceneObject::getContainerObjectsSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 83);

		return method.executeWithSignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getContainerObjectsSize();
}

bool SceneObject::hasFullContainerObjects() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 84);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->hasFullContainerObjects();
}

SceneObject* SceneObject::getContainerObject(int idx) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 85);
		method.addSignedIntParameter(idx);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getContainerObject(idx);
}

ZoneClientSession* SceneObject::getClient() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 86);

		return (ZoneClientSession*) method.executeWithObjectReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getClient();
}

unsigned int SceneObject::getGameObjectType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 87);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getGameObjectType();
}

unsigned int SceneObject::getContainmentType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 88);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getContainmentType();
}

Zone* SceneObject::getZone() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 89);

		return (Zone*) method.executeWithObjectReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getZone();
}

float SceneObject::getDirectionAngle() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 90);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getDirectionAngle();
}

float SceneObject::getSpecialDirectionAngle() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 91);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getSpecialDirectionAngle();
}

void SceneObject::rotate(int degrees) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 92);
		method.addSignedIntParameter(degrees);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->rotate(degrees);
}

void SceneObject::notifySelfPositionUpdate() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 93);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->notifySelfPositionUpdate();
}

void SceneObject::notifyCloseContainer(PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 94);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->notifyCloseContainer(player);
}

unsigned int SceneObject::getMovementCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 95);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getMovementCounter();
}

SceneObject* SceneObject::getParent() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 96);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getParent();
}

ZoneServer* SceneObject::getZoneServer() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 97);

		return (ZoneServer*) method.executeWithObjectReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getZoneServer();
}

SceneObject* SceneObject::getRootParent() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 98);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getRootParent();
}

SceneObject* SceneObject::getParentRecursively(unsigned int gameObjectType) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 99);
		method.addUnsignedIntParameter(gameObjectType);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getParentRecursively(gameObjectType);
}

bool SceneObject::isASubChildOf(SceneObject* object) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 100);
		method.addObjectParameter(object);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isASubChildOf(object);
}

UnicodeString SceneObject::getCustomObjectName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 101);

		method.executeWithUnicodeReturn(_return_getCustomObjectName);
		return _return_getCustomObjectName;
	} else
		return ((SceneObjectImplementation*) _impl)->getCustomObjectName();
}

bool SceneObject::isInQuadTree() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 102);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isInQuadTree();
}

String SceneObject::getLoggingName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 103);

		method.executeWithAsciiReturn(_return_getLoggingName);
		return _return_getLoggingName;
	} else
		return ((SceneObjectImplementation*) _impl)->getLoggingName();
}

bool SceneObject::isPlayerCreature() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 104);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isPlayerCreature();
}

bool SceneObject::isCreatureObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 105);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isCreatureObject();
}

bool SceneObject::isVehicleObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 106);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isVehicleObject();
}

bool SceneObject::isBuildingObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 107);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isBuildingObject();
}

bool SceneObject::isCloningBuildingObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 108);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isCloningBuildingObject();
}

bool SceneObject::isGarage() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 109);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isGarage();
}

bool SceneObject::isWeaponObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 110);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isWeaponObject();
}

bool SceneObject::isWearableObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 111);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isWearableObject();
}

bool SceneObject::isArmorObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 112);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isArmorObject();
}

bool SceneObject::isCellObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 113);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isCellObject();
}

bool SceneObject::isTangibleObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 114);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isTangibleObject();
}

bool SceneObject::isResourceContainer() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 115);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isResourceContainer();
}

bool SceneObject::isInstrument() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 116);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isInstrument();
}

bool SceneObject::isInstallationObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 117);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isInstallationObject();
}

bool SceneObject::isFishingPoleObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 118);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isFishingPoleObject();
}

bool SceneObject::isDeedObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 119);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isDeedObject();
}

bool SceneObject::isBuildingDeed() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 120);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isBuildingDeed();
}

bool SceneObject::isInstallationDeed() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 121);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isInstallationDeed();
}

bool SceneObject::isCraftingTool() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 122);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isCraftingTool();
}

bool SceneObject::isCraftingStation() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 123);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isCraftingStation();
}

bool SceneObject::isBazaarTerminal() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 124);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isBazaarTerminal();
}

bool SceneObject::isFishingBait() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 125);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isFishingBait();
}

void SceneObject::setPosition(float x, float z, float y) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 126);
		method.addFloatParameter(x);
		method.addFloatParameter(z);
		method.addFloatParameter(y);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setPosition(x, z, y);
}

void SceneObject::initializePosition(float x, float z, float y) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 127);
		method.addFloatParameter(x);
		method.addFloatParameter(z);
		method.addFloatParameter(y);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->initializePosition(x, z, y);
}

void SceneObject::setGameObjectType(unsigned int type) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 128);
		method.addUnsignedIntParameter(type);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setGameObjectType(type);
}

void SceneObject::setActiveArea(ActiveArea* area) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 129);
		method.addObjectParameter(area);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setActiveArea(area);
}

void SceneObject::setClientObjectCRC(unsigned int objCRC) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 130);
		method.addUnsignedIntParameter(objCRC);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setClientObjectCRC(objCRC);
}

void SceneObject::setServerObjectCRC(unsigned int objCRC) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 131);
		method.addUnsignedIntParameter(objCRC);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setServerObjectCRC(objCRC);
}

void SceneObject::setParent(SceneObject* par) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 132);
		method.addObjectParameter(par);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setParent(par);
}

void SceneObject::setZoneProcessServer(ZoneProcessServerImplementation* srv) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((SceneObjectImplementation*) _impl)->setZoneProcessServer(srv);
}

void SceneObject::setObjectName(StringId& stringID) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((SceneObjectImplementation*) _impl)->setObjectName(stringID);
}

void SceneObject::setZone(Zone* zon) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 133);
		method.addObjectParameter(zon);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setZone(zon);
}

void SceneObject::setDirection(float fw, float fx, float fy, float fz) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 134);
		method.addFloatParameter(fw);
		method.addFloatParameter(fx);
		method.addFloatParameter(fy);
		method.addFloatParameter(fz);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setDirection(fw, fx, fy, fz);
}

void SceneObject::setDirection(float headingAngleRadians) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 135);
		method.addFloatParameter(headingAngleRadians);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setDirection(headingAngleRadians);
}

void SceneObject::setDirection(const Quaternion& dir) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((SceneObjectImplementation*) _impl)->setDirection(dir);
}

void SceneObject::setMovementCounter(unsigned int count) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 136);
		method.addUnsignedIntParameter(count);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setMovementCounter(count);
}

void SceneObject::incrementMovementCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 137);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->incrementMovementCounter();
}

void SceneObject::setContainmentType(unsigned int type) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 138);
		method.addUnsignedIntParameter(type);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setContainmentType(type);
}

void SceneObject::setLoggingName(const String& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 139);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setLoggingName(name);
}

void SceneObject::setStaticObject(bool val) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 140);
		method.addBooleanParameter(val);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setStaticObject(val);
}

VectorMap<unsigned long long, ManagedReference<SceneObject* > >* SceneObject::getContainerObjects() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((SceneObjectImplementation*) _impl)->getContainerObjects();
}

bool SceneObject::hasObjectInContainer(unsigned long long objectID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 141);
		method.addUnsignedLongParameter(objectID);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->hasObjectInContainer(objectID);
}

SceneObject* SceneObject::getContainerObject(unsigned long long objectID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 142);
		method.addUnsignedLongParameter(objectID);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getContainerObject(objectID);
}

unsigned int SceneObject::getPlanetCRC() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 143);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getPlanetCRC();
}

bool SceneObject::isStaticObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 144);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isStaticObject();
}

bool SceneObject::isControlDevice() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 145);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isControlDevice();
}

bool SceneObject::isMissionTerminal() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 146);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isMissionTerminal();
}

bool SceneObject::isMissionObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 147);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isMissionObject();
}

ActiveArea* SceneObject::getActiveArea() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 148);

		return (ActiveArea*) method.executeWithObjectReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getActiveArea();
}

int SceneObject::getMapLocationsType1() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 149);

		return method.executeWithSignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getMapLocationsType1();
}

int SceneObject::getMapLocationsType2() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 150);

		return method.executeWithSignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getMapLocationsType2();
}

int SceneObject::getMapLocationsType3() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 151);

		return method.executeWithSignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getMapLocationsType3();
}

/*
 *	SceneObjectImplementation
 */

SceneObjectImplementation::SceneObjectImplementation(DummyConstructorParameter* param) : ObservableImplementation(param) {
	_initializeImplementation();
}

SceneObjectImplementation::~SceneObjectImplementation() {
	SceneObjectImplementation::finalize();
}


void SceneObjectImplementation::_initializeImplementation() {
	_setClassHelper(SceneObjectHelper::instance());

	_serializationHelperMethod();
}

void SceneObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (SceneObject*) stub;
	ObservableImplementation::_setStub(stub);
}

DistributedObjectStub* SceneObjectImplementation::_getStub() {
	return _this;
}

SceneObjectImplementation::operator const SceneObject*() {
	return _this;
}

void SceneObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void SceneObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void SceneObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void SceneObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void SceneObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void SceneObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void SceneObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void SceneObjectImplementation::_serializationHelperMethod() {
	ObservableImplementation::_serializationHelperMethod();

	_setClassName("SceneObject");

	addSerializableVariable("zone", &zone);
	addSerializableVariable("parent", &parent);
	addSerializableVariable("slottedObjects", &slottedObjects);
	addSerializableVariable("containerObjects", &containerObjects);
	addSerializableVariable("serverObjectCRC", &serverObjectCRC);
	addSerializableVariable("clientObjectCRC", &clientObjectCRC);
	addSerializableVariable("direction", &direction);
	addSerializableVariable("movementCounter", &movementCounter);
	addSerializableVariable("positionX", &positionX);
	addSerializableVariable("previousPositionX", &previousPositionX);
	addSerializableVariable("positionZ", &positionZ);
	addSerializableVariable("previousPositionZ", &previousPositionZ);
	addSerializableVariable("positionY", &positionY);
	addSerializableVariable("previousPositionY", &previousPositionY);
	addSerializableVariable("arrangementDescriptors", &arrangementDescriptors);
	addSerializableVariable("slotDescriptors", &slotDescriptors);
	addSerializableVariable("objectName", &objectName);
	addSerializableVariable("detailedDescription", &detailedDescription);
	addSerializableVariable("staticObject", &staticObject);
	addSerializableVariable("activeArea", &activeArea);
	addSerializableVariable("containerType", &containerType);
	addSerializableVariable("containerVolumeLimit", &containerVolumeLimit);
	addSerializableVariable("gameObjectType", &gameObjectType);
	addSerializableVariable("containmentType", &containmentType);
}

SceneObjectImplementation::SceneObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/scene/SceneObject.idl(375):  		initializePrivateData();
	initializePrivateData();
}

void SceneObjectImplementation::finalize() {
	// server/zone/objects/scene/SceneObject.idl(379):  		Logger.info("deleting object from memory", true);
	Logger::info("deleting object from memory", true);
}

void SceneObjectImplementation::notifyLoadFromDatabase() {
	// server/zone/objects/scene/SceneObject.idl(407):  	}
	if (zone != NULL){
	// server/zone/objects/scene/SceneObject.idl(408):  			insertToZone(zone);
	insertToZone(zone);
}
}

void SceneObjectImplementation::info(const String& msg, bool forced) {
	// server/zone/objects/scene/SceneObject.idl(420):  		Logger.info(msg, forced);
	Logger::info(msg, forced);
}

void SceneObjectImplementation::error(const String& msg) {
	// server/zone/objects/scene/SceneObject.idl(430):  		Logger.error(msg);
	Logger::error(msg);
}

int SceneObjectImplementation::inRangeObjectCount() {
	// server/zone/objects/scene/SceneObject.idl(440):  		return QuadTreeEntry.inRangeObjectCount();
	return QuadTreeEntry::inRangeObjectCount();
}

QuadTreeEntry* SceneObjectImplementation::getInRangeObject(int index) {
	// server/zone/objects/scene/SceneObject.idl(451):  		return QuadTreeEntry.getInRangeObject(index);
	return QuadTreeEntry::getInRangeObject(index);
}

bool SceneObjectImplementation::isInRange(QuadTreeEntry* obj, float range) {
	// server/zone/objects/scene/SceneObject.idl(482):  		return QuadTreeEntry.isInRange(obj, range);
	return QuadTreeEntry::isInRange(obj, range);
}

void SceneObjectImplementation::removeInRangeObject(QuadTreeEntry* obj) {
	// server/zone/objects/scene/SceneObject.idl(486):  		QuadTreeEntry.removeInRangeObject(obj);
	QuadTreeEntry::removeInRangeObject(obj);
}

void SceneObjectImplementation::synchronizedUIListen(SceneObject* player, int value) {
	// server/zone/objects/scene/SceneObject.idl(528):  		Logger.info("Unhandled synchronizedUIListen", true);
	Logger::info("Unhandled synchronizedUIListen", true);
}

void SceneObjectImplementation::synchronizedUIStopListen(SceneObject* player, int value) {
	// server/zone/objects/scene/SceneObject.idl(539):  		Logger.info("Unhandled synchronizedUIStopListen", true);
	Logger::info("Unhandled synchronizedUIStopListen", true);
}

int SceneObjectImplementation::canBeDestroyed(PlayerCreature* player) {
	// server/zone/objects/scene/SceneObject.idl(579):  		return 0;
	return 0;
}

void SceneObjectImplementation::sendBaselinesTo(SceneObject* player) {
}

void SceneObjectImplementation::sendToOwner(bool doClose) {
}

void SceneObjectImplementation::fillAttributeList(AttributeListMessage* msg, PlayerCreature* object) {
}

void SceneObjectImplementation::setCustomObjectName(const UnicodeString& name, bool notifyClient) {
	// server/zone/objects/scene/SceneObject.idl(707):  		objectName.setCustomString(name);
	(&objectName)->setCustomString(name);
}

int SceneObjectImplementation::compareTo(SceneObject* obj) {
	// server/zone/objects/scene/SceneObject.idl(837):  
	if (getObjectID() < obj->getObjectID())	// server/zone/objects/scene/SceneObject.idl(838):  			return 1;
	return 1;

	else 	// server/zone/objects/scene/SceneObject.idl(839):  
	if (getObjectID() > obj->getObjectID())	// server/zone/objects/scene/SceneObject.idl(840):  			return -1;
	return -1;

	else 	// server/zone/objects/scene/SceneObject.idl(842):  			return 0;
	return 0;
}

unsigned long long SceneObjectImplementation::getParentID() {
	// server/zone/objects/scene/SceneObject.idl(861):  
	if (parent != NULL){
	// server/zone/objects/scene/SceneObject.idl(862):  			return parent.getObjectID();
	return parent->getObjectID();
}

	else 	// server/zone/objects/scene/SceneObject.idl(864):  			return 0;
	return 0;
}

void SceneObjectImplementation::addPendingTask(const String& name, Task* task) {
	// server/zone/objects/scene/SceneObject.idl(876):  		pendingTasks.put(name, task);
	(&pendingTasks)->put(name, task);
}

void SceneObjectImplementation::removePendingTask(const String& name) {
	// server/zone/objects/scene/SceneObject.idl(887):  		pendingTasks.drop(name);
	(&pendingTasks)->drop(name);
}

Task* SceneObjectImplementation::getPendingTask(const String& name) {
	// server/zone/objects/scene/SceneObject.idl(898):  		return pendingTasks.get(name);
	return (&pendingTasks)->get(name);
}

int SceneObjectImplementation::notifyObjectInserted(SceneObject* object) {
	// server/zone/objects/scene/SceneObject.idl(922):  		return 0;
	return 0;
}

int SceneObjectImplementation::notifyObjectRemoved(SceneObject* object) {
	// server/zone/objects/scene/SceneObject.idl(930):  		return 0;
	return 0;
}

bool SceneObjectImplementation::hasNotifiedSentObject(SceneObject* object) {
	// server/zone/objects/scene/SceneObject.idl(934):  		return notifiedSentObjects.contains(object);
	return (&notifiedSentObjects)->contains(object);
}

void SceneObjectImplementation::addNotifiedSentObject(SceneObject* object) {
	// server/zone/objects/scene/SceneObject.idl(938):  		notifiedSentObjects.put(object);
	(&notifiedSentObjects)->put(object);
}

void SceneObjectImplementation::removeNotifiedSentObject(SceneObject* object) {
	// server/zone/objects/scene/SceneObject.idl(942):  		notifiedSentObjects.drop(object);
	(&notifiedSentObjects)->drop(object);
}

Vector3 SceneObjectImplementation::getPosition() {
	// server/zone/objects/scene/SceneObject.idl(950):  		return QuadTreeEntry.getPosition();
	return QuadTreeEntry::getPosition();
}

float SceneObjectImplementation::getPositionX() {
	// server/zone/objects/scene/SceneObject.idl(962):  		return QuadTreeEntry.getPositionX();
	return QuadTreeEntry::getPositionX();
}

float SceneObjectImplementation::getPositionZ() {
	// server/zone/objects/scene/SceneObject.idl(966):  		return QuadTreeEntry.getPositionZ();
	return QuadTreeEntry::getPositionZ();
}

float SceneObjectImplementation::getPositionY() {
	// server/zone/objects/scene/SceneObject.idl(970):  		return QuadTreeEntry.getPositionY();
	return QuadTreeEntry::getPositionY();
}

float SceneObjectImplementation::getDirectionX() {
	// server/zone/objects/scene/SceneObject.idl(974):  		return direction.getX();
	return (&direction)->getX();
}

float SceneObjectImplementation::getDirectionZ() {
	// server/zone/objects/scene/SceneObject.idl(978):  		return direction.getZ();
	return (&direction)->getZ();
}

float SceneObjectImplementation::getDirectionY() {
	// server/zone/objects/scene/SceneObject.idl(982):  		return direction.getY();
	return (&direction)->getY();
}

float SceneObjectImplementation::getDirectionW() {
	// server/zone/objects/scene/SceneObject.idl(986):  		return direction.getW();
	return (&direction)->getW();
}

unsigned int SceneObjectImplementation::getClientObjectCRC() {
	// server/zone/objects/scene/SceneObject.idl(993):  		return clientObjectCRC;
	return clientObjectCRC;
}

unsigned int SceneObjectImplementation::getServerObjectCRC() {
	// server/zone/objects/scene/SceneObject.idl(997):  		return serverObjectCRC;
	return serverObjectCRC;
}

bool SceneObjectImplementation::isWaypointObject() {
	// server/zone/objects/scene/SceneObject.idl(1001):  		return gameObjectType == WAYPOINT;
	return gameObjectType == WAYPOINT;
}

StringId* SceneObjectImplementation::getObjectName() {
	// server/zone/objects/scene/SceneObject.idl(1006):  		return objectName;
	return (&objectName);
}

String SceneObjectImplementation::getObjectNameStringIdFile() {
	// server/zone/objects/scene/SceneObject.idl(1010):  		return objectName.getFile();
	return (&objectName)->getFile();
}

String SceneObjectImplementation::getObjectNameStringIdName() {
	// server/zone/objects/scene/SceneObject.idl(1014):  		return objectName.getStringID();
	return (&objectName)->getStringID();
}

StringId* SceneObjectImplementation::getDetailedDescription() {
	// server/zone/objects/scene/SceneObject.idl(1019):  		return detailedDescription;
	return (&detailedDescription);
}

int SceneObjectImplementation::getArrangementDescriptorSize() {
	// server/zone/objects/scene/SceneObject.idl(1023):  		return arrangementDescriptors.size();
	return (&arrangementDescriptors)->size();
}

String SceneObjectImplementation::getArrangementDescriptor(int idx) {
	// server/zone/objects/scene/SceneObject.idl(1027):  		return arrangementDescriptors.get(idx);
	return (&arrangementDescriptors)->get(idx);
}

String SceneObjectImplementation::getSlotDescriptor(int idx) {
	// server/zone/objects/scene/SceneObject.idl(1031):  		return slotDescriptors.get(idx);
	return (&slotDescriptors)->get(idx);
}

bool SceneObjectImplementation::hasSlotDescriptor(const String& descr) {
	// server/zone/objects/scene/SceneObject.idl(1035):  
	for (	// server/zone/objects/scene/SceneObject.idl(1035):  		for (int i = 0;
	int i = 0;
	i < (&slotDescriptors)->size();
 ++i) {
	// server/zone/objects/scene/SceneObject.idl(1036):  		}
	if ((&slotDescriptors)->get(i) == descr)	// server/zone/objects/scene/SceneObject.idl(1037):  				return true;
	return true;
}
	// server/zone/objects/scene/SceneObject.idl(1040):  		return false;
	return false;
}

SceneObject* SceneObjectImplementation::getSlottedObject(const String& slot) {
	// server/zone/objects/scene/SceneObject.idl(1044):  		return slottedObjects.get(slot);
	return (&slottedObjects)->get(slot);
}

int SceneObjectImplementation::getSlotDescriptorSize() {
	// server/zone/objects/scene/SceneObject.idl(1048):  		return slotDescriptors.size();
	return (&slotDescriptors)->size();
}

int SceneObjectImplementation::getContainerObjectsSize() {
	// server/zone/objects/scene/SceneObject.idl(1052):  		return containerObjects.size();
	return (&containerObjects)->size();
}

bool SceneObjectImplementation::hasFullContainerObjects() {
	// server/zone/objects/scene/SceneObject.idl(1056):  		return containerObjects.size() == containerVolumeLimit;
	return (&containerObjects)->size() == containerVolumeLimit;
}

SceneObject* SceneObjectImplementation::getContainerObject(int idx) {
	// server/zone/objects/scene/SceneObject.idl(1060):  		return containerObjects.get(idx);
	return (&containerObjects)->get(idx);
}

ZoneClientSession* SceneObjectImplementation::getClient() {
	// server/zone/objects/scene/SceneObject.idl(1064):  		return null;
	return NULL;
}

unsigned int SceneObjectImplementation::getGameObjectType() {
	// server/zone/objects/scene/SceneObject.idl(1068):  		return gameObjectType;
	return gameObjectType;
}

unsigned int SceneObjectImplementation::getContainmentType() {
	// server/zone/objects/scene/SceneObject.idl(1072):  		return containmentType;
	return containmentType;
}

Zone* SceneObjectImplementation::getZone() {
	// server/zone/objects/scene/SceneObject.idl(1076):  		return zone;
	return zone;
}

float SceneObjectImplementation::getDirectionAngle() {
	// server/zone/objects/scene/SceneObject.idl(1080):  		return direction.getDegrees();
	return (&direction)->getDegrees();
}

float SceneObjectImplementation::getSpecialDirectionAngle() {
	// server/zone/objects/scene/SceneObject.idl(1084):  		return direction.getSpecialDegrees();
	return (&direction)->getSpecialDegrees();
}

unsigned int SceneObjectImplementation::getMovementCounter() {
	// server/zone/objects/scene/SceneObject.idl(1102):  		return movementCounter;
	return movementCounter;
}

SceneObject* SceneObjectImplementation::getParent() {
	// server/zone/objects/scene/SceneObject.idl(1106):  		return parent;
	return parent;
}

ZoneServer* SceneObjectImplementation::getZoneServer() {
	// server/zone/objects/scene/SceneObject.idl(1110):  		return server.getZoneServer();
	return server->getZoneServer();
}

UnicodeString SceneObjectImplementation::getCustomObjectName() {
	// server/zone/objects/scene/SceneObject.idl(1139):  		return objectName.getCustomString();
	return (&objectName)->getCustomString();
}

bool SceneObjectImplementation::isInQuadTree() {
	// server/zone/objects/scene/SceneObject.idl(1143):  		return QuadTreeEntry.isInQuadTree();
	return QuadTreeEntry::isInQuadTree();
}

String SceneObjectImplementation::getLoggingName() {
	// server/zone/objects/scene/SceneObject.idl(1147):  		return Logger.getLoggingName();
	return Logger::getLoggingName();
}

bool SceneObjectImplementation::isPlayerCreature() {
	// server/zone/objects/scene/SceneObject.idl(1151):  		return gameObjectType == PLAYERCREATURE;
	return gameObjectType == PLAYERCREATURE;
}

bool SceneObjectImplementation::isCreatureObject() {
	// server/zone/objects/scene/SceneObject.idl(1155):  		return false;
	return false;
}

bool SceneObjectImplementation::isVehicleObject() {
	// server/zone/objects/scene/SceneObject.idl(1159):  		return false;
	return false;
}

bool SceneObjectImplementation::isBuildingObject() {
	// server/zone/objects/scene/SceneObject.idl(1163):  		return false;
	return false;
}

bool SceneObjectImplementation::isCloningBuildingObject() {
	// server/zone/objects/scene/SceneObject.idl(1167):  		return false;
	return false;
}

bool SceneObjectImplementation::isGarage() {
	// server/zone/objects/scene/SceneObject.idl(1171):  		return gameObjectType == GARAGEBUILDING || gameObjectType == GARAGEINSTALLATION;
	return gameObjectType == GARAGEBUILDING || gameObjectType == GARAGEINSTALLATION;
}

bool SceneObjectImplementation::isWeaponObject() {
	// server/zone/objects/scene/SceneObject.idl(1175):  		return false;
	return false;
}

bool SceneObjectImplementation::isWearableObject() {
	// server/zone/objects/scene/SceneObject.idl(1179):  		return false;
	return false;
}

bool SceneObjectImplementation::isArmorObject() {
	// server/zone/objects/scene/SceneObject.idl(1183):  		return false;
	return false;
}

bool SceneObjectImplementation::isCellObject() {
	// server/zone/objects/scene/SceneObject.idl(1187):  		return false;
	return false;
}

bool SceneObjectImplementation::isTangibleObject() {
	// server/zone/objects/scene/SceneObject.idl(1191):  		return false;
	return false;
}

bool SceneObjectImplementation::isResourceContainer() {
	// server/zone/objects/scene/SceneObject.idl(1195):  		return false;
	return false;
}

bool SceneObjectImplementation::isInstrument() {
	// server/zone/objects/scene/SceneObject.idl(1199):  		return gameObjectType == INSTRUMENT;
	return gameObjectType == INSTRUMENT;
}

bool SceneObjectImplementation::isInstallationObject() {
	// server/zone/objects/scene/SceneObject.idl(1203):  		return false;
	return false;
}

bool SceneObjectImplementation::isFishingPoleObject() {
	// server/zone/objects/scene/SceneObject.idl(1207):  		return gameObjectType == FISHINGPOLE;
	return gameObjectType == FISHINGPOLE;
}

bool SceneObjectImplementation::isDeedObject() {
	// server/zone/objects/scene/SceneObject.idl(1211):  		return false;
	return false;
}

bool SceneObjectImplementation::isBuildingDeed() {
	// server/zone/objects/scene/SceneObject.idl(1215):  		return false;
	return false;
}

bool SceneObjectImplementation::isInstallationDeed() {
	// server/zone/objects/scene/SceneObject.idl(1219):  		return false;
	return false;
}

bool SceneObjectImplementation::isCraftingTool() {
	// server/zone/objects/scene/SceneObject.idl(1223):  		return false;
	return false;
}

bool SceneObjectImplementation::isCraftingStation() {
	// server/zone/objects/scene/SceneObject.idl(1227):  		return false;
	return false;
}

bool SceneObjectImplementation::isBazaarTerminal() {
	// server/zone/objects/scene/SceneObject.idl(1231):  		return gameObjectType == BAZAAR;
	return gameObjectType == BAZAAR;
}

bool SceneObjectImplementation::isFishingBait() {
	// server/zone/objects/scene/SceneObject.idl(1235):  		return gameObjectType == FISHINGBAIT;
	return gameObjectType == FISHINGBAIT;
}

void SceneObjectImplementation::setPosition(float x, float z, float y) {
	// server/zone/objects/scene/SceneObject.idl(1239):  		QuadTreeEntry.setPosition(x, z, y);
	QuadTreeEntry::setPosition(x, z, y);
}

void SceneObjectImplementation::initializePosition(float x, float z, float y) {
	// server/zone/objects/scene/SceneObject.idl(1243):  		QuadTreeEntry.initializePosition(x, z, y);
	QuadTreeEntry::initializePosition(x, z, y);
}

void SceneObjectImplementation::setGameObjectType(unsigned int type) {
	// server/zone/objects/scene/SceneObject.idl(1247):  		gameObjectType = type;
	gameObjectType = type;
}

void SceneObjectImplementation::setActiveArea(ActiveArea* area) {
	// server/zone/objects/scene/SceneObject.idl(1251):  		activeArea = area;
	activeArea = area;
}

void SceneObjectImplementation::setClientObjectCRC(unsigned int objCRC) {
	// server/zone/objects/scene/SceneObject.idl(1255):  		clientObjectCRC = objCRC;
	clientObjectCRC = objCRC;
}

void SceneObjectImplementation::setServerObjectCRC(unsigned int objCRC) {
	// server/zone/objects/scene/SceneObject.idl(1259):  		serverObjectCRC = objCRC;
	serverObjectCRC = objCRC;
}

void SceneObjectImplementation::setParent(SceneObject* par) {
	// server/zone/objects/scene/SceneObject.idl(1263):  		parent = par;
	parent = par;
}

void SceneObjectImplementation::setZoneProcessServer(ZoneProcessServerImplementation* srv) {
	// server/zone/objects/scene/SceneObject.idl(1268):  		server = srv;
	server = srv;
}

void SceneObjectImplementation::setZone(Zone* zon) {
	// server/zone/objects/scene/SceneObject.idl(1275):  		zone = zon;
	zone = zon;
}

void SceneObjectImplementation::setDirection(float fw, float fx, float fy, float fz) {
	// server/zone/objects/scene/SceneObject.idl(1279):  		direction.set(fw, fx, fy, fz);
	(&direction)->set(fw, fx, fy, fz);
}

void SceneObjectImplementation::setDirection(float headingAngleRadians) {
	// server/zone/objects/scene/SceneObject.idl(1283):  		direction.setHeadingDirection(headingAngleRadians);
	(&direction)->setHeadingDirection(headingAngleRadians);
}

void SceneObjectImplementation::setMovementCounter(unsigned int count) {
	// server/zone/objects/scene/SceneObject.idl(1290):  		movementCounter = count;
	movementCounter = count;
}

void SceneObjectImplementation::incrementMovementCounter() {
	// server/zone/objects/scene/SceneObject.idl(1294):  		movementCounter++;
	movementCounter ++;
}

void SceneObjectImplementation::setContainmentType(unsigned int type) {
	// server/zone/objects/scene/SceneObject.idl(1298):  		containmentType = type;
	containmentType = type;
}

void SceneObjectImplementation::setLoggingName(const String& name) {
	// server/zone/objects/scene/SceneObject.idl(1302):  		Logger.setLoggingName(name);
	Logger::setLoggingName(name);
}

void SceneObjectImplementation::setStaticObject(bool val) {
	// server/zone/objects/scene/SceneObject.idl(1306):  		staticObject = val;
	staticObject = val;
}

VectorMap<unsigned long long, ManagedReference<SceneObject* > >* SceneObjectImplementation::getContainerObjects() {
	// server/zone/objects/scene/SceneObject.idl(1311):  		return containerObjects;
	return (&containerObjects);
}

bool SceneObjectImplementation::hasObjectInContainer(unsigned long long objectID) {
	// server/zone/objects/scene/SceneObject.idl(1315):  		return containerObjects.contains(objectID);
	return (&containerObjects)->contains(objectID);
}

SceneObject* SceneObjectImplementation::getContainerObject(unsigned long long objectID) {
	// server/zone/objects/scene/SceneObject.idl(1319):  		return containerObjects.get(objectID);
	return (&containerObjects)->get(objectID);
}

bool SceneObjectImplementation::isStaticObject() {
	// server/zone/objects/scene/SceneObject.idl(1325):  		return staticObject;
	return staticObject;
}

bool SceneObjectImplementation::isControlDevice() {
	// server/zone/objects/scene/SceneObject.idl(1329):  		return false;
	return false;
}

bool SceneObjectImplementation::isMissionTerminal() {
	// server/zone/objects/scene/SceneObject.idl(1333):  		return false;
	return false;
}

bool SceneObjectImplementation::isMissionObject() {
	// server/zone/objects/scene/SceneObject.idl(1337):  		return false;
	return false;
}

ActiveArea* SceneObjectImplementation::getActiveArea() {
	// server/zone/objects/scene/SceneObject.idl(1341):  		return activeArea;
	return activeArea;
}

int SceneObjectImplementation::getMapLocationsType1() {
	// server/zone/objects/scene/SceneObject.idl(1345):  		return templateObject.getMapLocationsType1();
	return templateObject->getMapLocationsType1();
}

int SceneObjectImplementation::getMapLocationsType2() {
	// server/zone/objects/scene/SceneObject.idl(1349):  		return templateObject.getMapLocationsType2();
	return templateObject->getMapLocationsType2();
}

int SceneObjectImplementation::getMapLocationsType3() {
	// server/zone/objects/scene/SceneObject.idl(1353):  		return templateObject.getMapLocationsType3();
	return templateObject->getMapLocationsType3();
}

/*
 *	SceneObjectAdapter
 */

SceneObjectAdapter::SceneObjectAdapter(SceneObjectImplementation* obj) : ObservableAdapter(obj) {
}

Packet* SceneObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		finalize();
		break;
	case 7:
		initializePrivateData();
		break;
	case 8:
		initializeTransientMembers();
		break;
	case 9:
		notifyLoadFromDatabase();
		break;
	case 10:
		info(inv->getAsciiParameter(_param0_info__String_bool_), inv->getBooleanParameter());
		break;
	case 11:
		error(inv->getAsciiParameter(_param0_error__String_));
		break;
	case 12:
		resp->insertSignedInt(inRangeObjectCount());
		break;
	case 13:
		resp->insertSignedInt(inRangeObjects(inv->getUnsignedIntParameter(), inv->getFloatParameter()));
		break;
	case 14:
		resp->insertBoolean(isInRange((SceneObject*) inv->getObjectParameter(), inv->getFloatParameter()));
		break;
	case 15:
		resp->insertBoolean(addObject((SceneObject*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 16:
		resp->insertBoolean(removeObject((SceneObject*) inv->getObjectParameter(), inv->getBooleanParameter()));
		break;
	case 17:
		resp->insertSignedInt(canAddObject((SceneObject*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_canAddObject__SceneObject_String_)));
		break;
	case 18:
		synchronizedUIListen((SceneObject*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case 19:
		synchronizedUIStopListen((SceneObject*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case 20:
		updateToDatabase();
		break;
	case 21:
		updateToDatabaseWithoutChildren();
		break;
	case 22:
		updateToDatabaseAllObjects(inv->getBooleanParameter());
		break;
	case 23:
		destroyObjectFromDatabase(inv->getBooleanParameter());
		break;
	case 24:
		resp->insertSignedInt(canBeDestroyed((PlayerCreature*) inv->getObjectParameter()));
		break;
	case 25:
		create((ZoneClientSession*) inv->getObjectParameter());
		break;
	case 26:
		destroy((ZoneClientSession*) inv->getObjectParameter());
		break;
	case 27:
		close((ZoneClientSession*) inv->getObjectParameter());
		break;
	case 28:
		link((ZoneClientSession*) inv->getObjectParameter(), inv->getUnsignedIntParameter());
		break;
	case 29:
		resp->insertLong(link(inv->getUnsignedLongParameter(), inv->getUnsignedIntParameter())->_getObjectID());
		break;
	case 30:
		sendTo((SceneObject*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 31:
		sendWithoutParentTo((SceneObject*) inv->getObjectParameter());
		break;
	case 32:
		sendDestroyTo((SceneObject*) inv->getObjectParameter());
		break;
	case 33:
		sendBaselinesTo((SceneObject*) inv->getObjectParameter());
		break;
	case 34:
		sendContainerObjectsTo((SceneObject*) inv->getObjectParameter());
		break;
	case 35:
		sendSlottedObjectsTo((SceneObject*) inv->getObjectParameter());
		break;
	case 36:
		sendToOwner(inv->getBooleanParameter());
		break;
	case 37:
		sendAttributeListTo((PlayerCreature*) inv->getObjectParameter());
		break;
	case 38:
		setCustomObjectName(inv->getUnicodeParameter(_param0_setCustomObjectName__UnicodeString_bool_), inv->getBooleanParameter());
		break;
	case 39:
		openContainerTo((PlayerCreature*) inv->getObjectParameter());
		break;
	case 40:
		closeContainerTo((PlayerCreature*) inv->getObjectParameter());
		break;
	case 41:
		insertToZone((Zone*) inv->getObjectParameter());
		break;
	case 42:
		insertToBuilding((BuildingObject*) inv->getObjectParameter());
		break;
	case 43:
		switchZone(inv->getSignedIntParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getUnsignedLongParameter());
		break;
	case 44:
		teleport(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getUnsignedLongParameter());
		break;
	case 45:
		removeFromZone();
		break;
	case 46:
		removeFromBuilding((BuildingObject*) inv->getObjectParameter());
		break;
	case 47:
		updateZone(inv->getBooleanParameter(), inv->getBooleanParameter());
		break;
	case 48:
		updateZoneWithParent((SceneObject*) inv->getObjectParameter(), inv->getBooleanParameter(), inv->getBooleanParameter());
		break;
	case 49:
		broadcastMessage((BasePacket*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 50:
		broadcastObject((SceneObject*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 51:
		sendMessage((BasePacket*) inv->getObjectParameter());
		break;
	case 52:
		resp->insertSignedInt(compareTo((SceneObject*) inv->getObjectParameter()));
		break;
	case 53:
		resp->insertLong(getParentID());
		break;
	case 54:
		resp->insertSignedInt(handleObjectMenuSelect((PlayerCreature*) inv->getObjectParameter(), inv->getByteParameter()));
		break;
	case 55:
		resp->insertFloat(getDistanceTo((SceneObject*) inv->getObjectParameter()));
		break;
	case 56:
		updateVehiclePosition();
		break;
	case 57:
		resp->insertSignedInt(notifyObjectInserted((SceneObject*) inv->getObjectParameter()));
		break;
	case 58:
		resp->insertSignedInt(notifyObjectRemoved((SceneObject*) inv->getObjectParameter()));
		break;
	case 59:
		resp->insertBoolean(hasNotifiedSentObject((SceneObject*) inv->getObjectParameter()));
		break;
	case 60:
		addNotifiedSentObject((SceneObject*) inv->getObjectParameter());
		break;
	case 61:
		removeNotifiedSentObject((SceneObject*) inv->getObjectParameter());
		break;
	case 62:
		resp->insertLong(getObjectID());
		break;
	case 63:
		resp->insertFloat(getWorldPositionX());
		break;
	case 64:
		resp->insertFloat(getWorldPositionY());
		break;
	case 65:
		resp->insertFloat(getWorldPositionZ());
		break;
	case 66:
		resp->insertFloat(getPositionX());
		break;
	case 67:
		resp->insertFloat(getPositionZ());
		break;
	case 68:
		resp->insertFloat(getPositionY());
		break;
	case 69:
		resp->insertFloat(getDirectionX());
		break;
	case 70:
		resp->insertFloat(getDirectionZ());
		break;
	case 71:
		resp->insertFloat(getDirectionY());
		break;
	case 72:
		resp->insertFloat(getDirectionW());
		break;
	case 73:
		resp->insertInt(getClientObjectCRC());
		break;
	case 74:
		resp->insertInt(getServerObjectCRC());
		break;
	case 75:
		resp->insertBoolean(isWaypointObject());
		break;
	case 76:
		resp->insertAscii(getObjectNameStringIdFile());
		break;
	case 77:
		resp->insertAscii(getObjectNameStringIdName());
		break;
	case 78:
		resp->insertSignedInt(getArrangementDescriptorSize());
		break;
	case 79:
		resp->insertAscii(getArrangementDescriptor(inv->getSignedIntParameter()));
		break;
	case 80:
		resp->insertAscii(getSlotDescriptor(inv->getSignedIntParameter()));
		break;
	case 81:
		resp->insertBoolean(hasSlotDescriptor(inv->getAsciiParameter(_param0_hasSlotDescriptor__String_)));
		break;
	case 82:
		resp->insertLong(getSlottedObject(inv->getAsciiParameter(_param0_getSlottedObject__String_))->_getObjectID());
		break;
	case 83:
		resp->insertSignedInt(getSlotDescriptorSize());
		break;
	case 84:
		resp->insertSignedInt(getContainerObjectsSize());
		break;
	case 85:
		resp->insertBoolean(hasFullContainerObjects());
		break;
	case 86:
		resp->insertLong(getContainerObject(inv->getSignedIntParameter())->_getObjectID());
		break;
	case 87:
		resp->insertLong(getClient()->_getObjectID());
		break;
	case 88:
		resp->insertInt(getGameObjectType());
		break;
	case 89:
		resp->insertInt(getContainmentType());
		break;
	case 90:
		resp->insertLong(getZone()->_getObjectID());
		break;
	case 91:
		resp->insertFloat(getDirectionAngle());
		break;
	case 92:
		resp->insertFloat(getSpecialDirectionAngle());
		break;
	case 93:
		rotate(inv->getSignedIntParameter());
		break;
	case 94:
		notifySelfPositionUpdate();
		break;
	case 95:
		notifyCloseContainer((PlayerCreature*) inv->getObjectParameter());
		break;
	case 96:
		resp->insertInt(getMovementCounter());
		break;
	case 97:
		resp->insertLong(getParent()->_getObjectID());
		break;
	case 98:
		resp->insertLong(getZoneServer()->_getObjectID());
		break;
	case 99:
		resp->insertLong(getRootParent()->_getObjectID());
		break;
	case 100:
		resp->insertLong(getParentRecursively(inv->getUnsignedIntParameter())->_getObjectID());
		break;
	case 101:
		resp->insertBoolean(isASubChildOf((SceneObject*) inv->getObjectParameter()));
		break;
	case 102:
		resp->insertUnicode(getCustomObjectName());
		break;
	case 103:
		resp->insertBoolean(isInQuadTree());
		break;
	case 104:
		resp->insertAscii(getLoggingName());
		break;
	case 105:
		resp->insertBoolean(isPlayerCreature());
		break;
	case 106:
		resp->insertBoolean(isCreatureObject());
		break;
	case 107:
		resp->insertBoolean(isVehicleObject());
		break;
	case 108:
		resp->insertBoolean(isBuildingObject());
		break;
	case 109:
		resp->insertBoolean(isCloningBuildingObject());
		break;
	case 110:
		resp->insertBoolean(isGarage());
		break;
	case 111:
		resp->insertBoolean(isWeaponObject());
		break;
	case 112:
		resp->insertBoolean(isWearableObject());
		break;
	case 113:
		resp->insertBoolean(isArmorObject());
		break;
	case 114:
		resp->insertBoolean(isCellObject());
		break;
	case 115:
		resp->insertBoolean(isTangibleObject());
		break;
	case 116:
		resp->insertBoolean(isResourceContainer());
		break;
	case 117:
		resp->insertBoolean(isInstrument());
		break;
	case 118:
		resp->insertBoolean(isInstallationObject());
		break;
	case 119:
		resp->insertBoolean(isFishingPoleObject());
		break;
	case 120:
		resp->insertBoolean(isDeedObject());
		break;
	case 121:
		resp->insertBoolean(isBuildingDeed());
		break;
	case 122:
		resp->insertBoolean(isInstallationDeed());
		break;
	case 123:
		resp->insertBoolean(isCraftingTool());
		break;
	case 124:
		resp->insertBoolean(isCraftingStation());
		break;
	case 125:
		resp->insertBoolean(isBazaarTerminal());
		break;
	case 126:
		resp->insertBoolean(isFishingBait());
		break;
	case 127:
		setPosition(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter());
		break;
	case 128:
		initializePosition(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter());
		break;
	case 129:
		setGameObjectType(inv->getUnsignedIntParameter());
		break;
	case 130:
		setActiveArea((ActiveArea*) inv->getObjectParameter());
		break;
	case 131:
		setClientObjectCRC(inv->getUnsignedIntParameter());
		break;
	case 132:
		setServerObjectCRC(inv->getUnsignedIntParameter());
		break;
	case 133:
		setParent((SceneObject*) inv->getObjectParameter());
		break;
	case 134:
		setZone((Zone*) inv->getObjectParameter());
		break;
	case 135:
		setDirection(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter());
		break;
	case 136:
		setDirection(inv->getFloatParameter());
		break;
	case 137:
		setMovementCounter(inv->getUnsignedIntParameter());
		break;
	case 138:
		incrementMovementCounter();
		break;
	case 139:
		setContainmentType(inv->getUnsignedIntParameter());
		break;
	case 140:
		setLoggingName(inv->getAsciiParameter(_param0_setLoggingName__String_));
		break;
	case 141:
		setStaticObject(inv->getBooleanParameter());
		break;
	case 142:
		resp->insertBoolean(hasObjectInContainer(inv->getUnsignedLongParameter()));
		break;
	case 143:
		resp->insertLong(getContainerObject(inv->getUnsignedLongParameter())->_getObjectID());
		break;
	case 144:
		resp->insertInt(getPlanetCRC());
		break;
	case 145:
		resp->insertBoolean(isStaticObject());
		break;
	case 146:
		resp->insertBoolean(isControlDevice());
		break;
	case 147:
		resp->insertBoolean(isMissionTerminal());
		break;
	case 148:
		resp->insertBoolean(isMissionObject());
		break;
	case 149:
		resp->insertLong(getActiveArea()->_getObjectID());
		break;
	case 150:
		resp->insertSignedInt(getMapLocationsType1());
		break;
	case 151:
		resp->insertSignedInt(getMapLocationsType2());
		break;
	case 152:
		resp->insertSignedInt(getMapLocationsType3());
		break;
	default:
		return NULL;
	}

	return resp;
}

void SceneObjectAdapter::finalize() {
	((SceneObjectImplementation*) impl)->finalize();
}

void SceneObjectAdapter::initializePrivateData() {
	((SceneObjectImplementation*) impl)->initializePrivateData();
}

void SceneObjectAdapter::initializeTransientMembers() {
	((SceneObjectImplementation*) impl)->initializeTransientMembers();
}

void SceneObjectAdapter::notifyLoadFromDatabase() {
	((SceneObjectImplementation*) impl)->notifyLoadFromDatabase();
}

void SceneObjectAdapter::info(const String& msg, bool forced) {
	((SceneObjectImplementation*) impl)->info(msg, forced);
}

void SceneObjectAdapter::error(const String& msg) {
	((SceneObjectImplementation*) impl)->error(msg);
}

int SceneObjectAdapter::inRangeObjectCount() {
	return ((SceneObjectImplementation*) impl)->inRangeObjectCount();
}

int SceneObjectAdapter::inRangeObjects(unsigned int gameObjectType, float range) {
	return ((SceneObjectImplementation*) impl)->inRangeObjects(gameObjectType, range);
}

bool SceneObjectAdapter::isInRange(SceneObject* obj, float range) {
	return ((SceneObjectImplementation*) impl)->isInRange(obj, range);
}

bool SceneObjectAdapter::addObject(SceneObject* object, int containmentType, bool notifyClient) {
	return ((SceneObjectImplementation*) impl)->addObject(object, containmentType, notifyClient);
}

bool SceneObjectAdapter::removeObject(SceneObject* object, bool notifyClient) {
	return ((SceneObjectImplementation*) impl)->removeObject(object, notifyClient);
}

int SceneObjectAdapter::canAddObject(SceneObject* object, String& errorDescription) {
	return ((SceneObjectImplementation*) impl)->canAddObject(object, errorDescription);
}

void SceneObjectAdapter::synchronizedUIListen(SceneObject* player, int value) {
	((SceneObjectImplementation*) impl)->synchronizedUIListen(player, value);
}

void SceneObjectAdapter::synchronizedUIStopListen(SceneObject* player, int value) {
	((SceneObjectImplementation*) impl)->synchronizedUIStopListen(player, value);
}

void SceneObjectAdapter::updateToDatabase() {
	((SceneObjectImplementation*) impl)->updateToDatabase();
}

void SceneObjectAdapter::updateToDatabaseWithoutChildren() {
	((SceneObjectImplementation*) impl)->updateToDatabaseWithoutChildren();
}

void SceneObjectAdapter::updateToDatabaseAllObjects(bool startTask) {
	((SceneObjectImplementation*) impl)->updateToDatabaseAllObjects(startTask);
}

void SceneObjectAdapter::destroyObjectFromDatabase(bool destroyContainedObjects) {
	((SceneObjectImplementation*) impl)->destroyObjectFromDatabase(destroyContainedObjects);
}

int SceneObjectAdapter::canBeDestroyed(PlayerCreature* player) {
	return ((SceneObjectImplementation*) impl)->canBeDestroyed(player);
}

void SceneObjectAdapter::create(ZoneClientSession* client) {
	((SceneObjectImplementation*) impl)->create(client);
}

void SceneObjectAdapter::destroy(ZoneClientSession* client) {
	((SceneObjectImplementation*) impl)->destroy(client);
}

void SceneObjectAdapter::close(ZoneClientSession* client) {
	((SceneObjectImplementation*) impl)->close(client);
}

void SceneObjectAdapter::link(ZoneClientSession* client, unsigned int containmentType) {
	((SceneObjectImplementation*) impl)->link(client, containmentType);
}

BaseMessage* SceneObjectAdapter::link(unsigned long long objectID, unsigned int containmentType) {
	return ((SceneObjectImplementation*) impl)->link(objectID, containmentType);
}

void SceneObjectAdapter::sendTo(SceneObject* player, bool doClose) {
	((SceneObjectImplementation*) impl)->sendTo(player, doClose);
}

void SceneObjectAdapter::sendWithoutParentTo(SceneObject* player) {
	((SceneObjectImplementation*) impl)->sendWithoutParentTo(player);
}

void SceneObjectAdapter::sendDestroyTo(SceneObject* player) {
	((SceneObjectImplementation*) impl)->sendDestroyTo(player);
}

void SceneObjectAdapter::sendBaselinesTo(SceneObject* player) {
	((SceneObjectImplementation*) impl)->sendBaselinesTo(player);
}

void SceneObjectAdapter::sendContainerObjectsTo(SceneObject* player) {
	((SceneObjectImplementation*) impl)->sendContainerObjectsTo(player);
}

void SceneObjectAdapter::sendSlottedObjectsTo(SceneObject* player) {
	((SceneObjectImplementation*) impl)->sendSlottedObjectsTo(player);
}

void SceneObjectAdapter::sendToOwner(bool doClose) {
	((SceneObjectImplementation*) impl)->sendToOwner(doClose);
}

void SceneObjectAdapter::sendAttributeListTo(PlayerCreature* object) {
	((SceneObjectImplementation*) impl)->sendAttributeListTo(object);
}

void SceneObjectAdapter::setCustomObjectName(const UnicodeString& name, bool notifyClient) {
	((SceneObjectImplementation*) impl)->setCustomObjectName(name, notifyClient);
}

void SceneObjectAdapter::openContainerTo(PlayerCreature* player) {
	((SceneObjectImplementation*) impl)->openContainerTo(player);
}

void SceneObjectAdapter::closeContainerTo(PlayerCreature* player) {
	((SceneObjectImplementation*) impl)->closeContainerTo(player);
}

void SceneObjectAdapter::insertToZone(Zone* zone) {
	((SceneObjectImplementation*) impl)->insertToZone(zone);
}

void SceneObjectAdapter::insertToBuilding(BuildingObject* building) {
	((SceneObjectImplementation*) impl)->insertToBuilding(building);
}

void SceneObjectAdapter::switchZone(int newZoneID, float newPostionX, float newPositionZ, float newPositionY, unsigned long long parentID) {
	((SceneObjectImplementation*) impl)->switchZone(newZoneID, newPostionX, newPositionZ, newPositionY, parentID);
}

void SceneObjectAdapter::teleport(float newPositionX, float newPositionZ, float newPositionY, unsigned long long parentID) {
	((SceneObjectImplementation*) impl)->teleport(newPositionX, newPositionZ, newPositionY, parentID);
}

void SceneObjectAdapter::removeFromZone() {
	((SceneObjectImplementation*) impl)->removeFromZone();
}

void SceneObjectAdapter::removeFromBuilding(BuildingObject* building) {
	((SceneObjectImplementation*) impl)->removeFromBuilding(building);
}

void SceneObjectAdapter::updateZone(bool lightUpdate, bool sendPackets) {
	((SceneObjectImplementation*) impl)->updateZone(lightUpdate, sendPackets);
}

void SceneObjectAdapter::updateZoneWithParent(SceneObject* newParent, bool lightUpdate, bool sendPackets) {
	((SceneObjectImplementation*) impl)->updateZoneWithParent(newParent, lightUpdate, sendPackets);
}

void SceneObjectAdapter::broadcastMessage(BasePacket* message, bool sendSelf) {
	((SceneObjectImplementation*) impl)->broadcastMessage(message, sendSelf);
}

void SceneObjectAdapter::broadcastObject(SceneObject* object, bool sendSelf) {
	((SceneObjectImplementation*) impl)->broadcastObject(object, sendSelf);
}

void SceneObjectAdapter::sendMessage(BasePacket* msg) {
	((SceneObjectImplementation*) impl)->sendMessage(msg);
}

int SceneObjectAdapter::compareTo(SceneObject* obj) {
	return ((SceneObjectImplementation*) impl)->compareTo(obj);
}

unsigned long long SceneObjectAdapter::getParentID() {
	return ((SceneObjectImplementation*) impl)->getParentID();
}

int SceneObjectAdapter::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	return ((SceneObjectImplementation*) impl)->handleObjectMenuSelect(player, selectedID);
}

float SceneObjectAdapter::getDistanceTo(SceneObject* object) {
	return ((SceneObjectImplementation*) impl)->getDistanceTo(object);
}

void SceneObjectAdapter::updateVehiclePosition() {
	((SceneObjectImplementation*) impl)->updateVehiclePosition();
}

int SceneObjectAdapter::notifyObjectInserted(SceneObject* object) {
	return ((SceneObjectImplementation*) impl)->notifyObjectInserted(object);
}

int SceneObjectAdapter::notifyObjectRemoved(SceneObject* object) {
	return ((SceneObjectImplementation*) impl)->notifyObjectRemoved(object);
}

bool SceneObjectAdapter::hasNotifiedSentObject(SceneObject* object) {
	return ((SceneObjectImplementation*) impl)->hasNotifiedSentObject(object);
}

void SceneObjectAdapter::addNotifiedSentObject(SceneObject* object) {
	((SceneObjectImplementation*) impl)->addNotifiedSentObject(object);
}

void SceneObjectAdapter::removeNotifiedSentObject(SceneObject* object) {
	((SceneObjectImplementation*) impl)->removeNotifiedSentObject(object);
}

unsigned long long SceneObjectAdapter::getObjectID() {
	return ((SceneObjectImplementation*) impl)->getObjectID();
}

float SceneObjectAdapter::getWorldPositionX() {
	return ((SceneObjectImplementation*) impl)->getWorldPositionX();
}

float SceneObjectAdapter::getWorldPositionY() {
	return ((SceneObjectImplementation*) impl)->getWorldPositionY();
}

float SceneObjectAdapter::getWorldPositionZ() {
	return ((SceneObjectImplementation*) impl)->getWorldPositionZ();
}

float SceneObjectAdapter::getPositionX() {
	return ((SceneObjectImplementation*) impl)->getPositionX();
}

float SceneObjectAdapter::getPositionZ() {
	return ((SceneObjectImplementation*) impl)->getPositionZ();
}

float SceneObjectAdapter::getPositionY() {
	return ((SceneObjectImplementation*) impl)->getPositionY();
}

float SceneObjectAdapter::getDirectionX() {
	return ((SceneObjectImplementation*) impl)->getDirectionX();
}

float SceneObjectAdapter::getDirectionZ() {
	return ((SceneObjectImplementation*) impl)->getDirectionZ();
}

float SceneObjectAdapter::getDirectionY() {
	return ((SceneObjectImplementation*) impl)->getDirectionY();
}

float SceneObjectAdapter::getDirectionW() {
	return ((SceneObjectImplementation*) impl)->getDirectionW();
}

unsigned int SceneObjectAdapter::getClientObjectCRC() {
	return ((SceneObjectImplementation*) impl)->getClientObjectCRC();
}

unsigned int SceneObjectAdapter::getServerObjectCRC() {
	return ((SceneObjectImplementation*) impl)->getServerObjectCRC();
}

bool SceneObjectAdapter::isWaypointObject() {
	return ((SceneObjectImplementation*) impl)->isWaypointObject();
}

String SceneObjectAdapter::getObjectNameStringIdFile() {
	return ((SceneObjectImplementation*) impl)->getObjectNameStringIdFile();
}

String SceneObjectAdapter::getObjectNameStringIdName() {
	return ((SceneObjectImplementation*) impl)->getObjectNameStringIdName();
}

int SceneObjectAdapter::getArrangementDescriptorSize() {
	return ((SceneObjectImplementation*) impl)->getArrangementDescriptorSize();
}

String SceneObjectAdapter::getArrangementDescriptor(int idx) {
	return ((SceneObjectImplementation*) impl)->getArrangementDescriptor(idx);
}

String SceneObjectAdapter::getSlotDescriptor(int idx) {
	return ((SceneObjectImplementation*) impl)->getSlotDescriptor(idx);
}

bool SceneObjectAdapter::hasSlotDescriptor(const String& descr) {
	return ((SceneObjectImplementation*) impl)->hasSlotDescriptor(descr);
}

SceneObject* SceneObjectAdapter::getSlottedObject(const String& slot) {
	return ((SceneObjectImplementation*) impl)->getSlottedObject(slot);
}

int SceneObjectAdapter::getSlotDescriptorSize() {
	return ((SceneObjectImplementation*) impl)->getSlotDescriptorSize();
}

int SceneObjectAdapter::getContainerObjectsSize() {
	return ((SceneObjectImplementation*) impl)->getContainerObjectsSize();
}

bool SceneObjectAdapter::hasFullContainerObjects() {
	return ((SceneObjectImplementation*) impl)->hasFullContainerObjects();
}

SceneObject* SceneObjectAdapter::getContainerObject(int idx) {
	return ((SceneObjectImplementation*) impl)->getContainerObject(idx);
}

ZoneClientSession* SceneObjectAdapter::getClient() {
	return ((SceneObjectImplementation*) impl)->getClient();
}

unsigned int SceneObjectAdapter::getGameObjectType() {
	return ((SceneObjectImplementation*) impl)->getGameObjectType();
}

unsigned int SceneObjectAdapter::getContainmentType() {
	return ((SceneObjectImplementation*) impl)->getContainmentType();
}

Zone* SceneObjectAdapter::getZone() {
	return ((SceneObjectImplementation*) impl)->getZone();
}

float SceneObjectAdapter::getDirectionAngle() {
	return ((SceneObjectImplementation*) impl)->getDirectionAngle();
}

float SceneObjectAdapter::getSpecialDirectionAngle() {
	return ((SceneObjectImplementation*) impl)->getSpecialDirectionAngle();
}

void SceneObjectAdapter::rotate(int degrees) {
	((SceneObjectImplementation*) impl)->rotate(degrees);
}

void SceneObjectAdapter::notifySelfPositionUpdate() {
	((SceneObjectImplementation*) impl)->notifySelfPositionUpdate();
}

void SceneObjectAdapter::notifyCloseContainer(PlayerCreature* player) {
	((SceneObjectImplementation*) impl)->notifyCloseContainer(player);
}

unsigned int SceneObjectAdapter::getMovementCounter() {
	return ((SceneObjectImplementation*) impl)->getMovementCounter();
}

SceneObject* SceneObjectAdapter::getParent() {
	return ((SceneObjectImplementation*) impl)->getParent();
}

ZoneServer* SceneObjectAdapter::getZoneServer() {
	return ((SceneObjectImplementation*) impl)->getZoneServer();
}

SceneObject* SceneObjectAdapter::getRootParent() {
	return ((SceneObjectImplementation*) impl)->getRootParent();
}

SceneObject* SceneObjectAdapter::getParentRecursively(unsigned int gameObjectType) {
	return ((SceneObjectImplementation*) impl)->getParentRecursively(gameObjectType);
}

bool SceneObjectAdapter::isASubChildOf(SceneObject* object) {
	return ((SceneObjectImplementation*) impl)->isASubChildOf(object);
}

UnicodeString SceneObjectAdapter::getCustomObjectName() {
	return ((SceneObjectImplementation*) impl)->getCustomObjectName();
}

bool SceneObjectAdapter::isInQuadTree() {
	return ((SceneObjectImplementation*) impl)->isInQuadTree();
}

String SceneObjectAdapter::getLoggingName() {
	return ((SceneObjectImplementation*) impl)->getLoggingName();
}

bool SceneObjectAdapter::isPlayerCreature() {
	return ((SceneObjectImplementation*) impl)->isPlayerCreature();
}

bool SceneObjectAdapter::isCreatureObject() {
	return ((SceneObjectImplementation*) impl)->isCreatureObject();
}

bool SceneObjectAdapter::isVehicleObject() {
	return ((SceneObjectImplementation*) impl)->isVehicleObject();
}

bool SceneObjectAdapter::isBuildingObject() {
	return ((SceneObjectImplementation*) impl)->isBuildingObject();
}

bool SceneObjectAdapter::isCloningBuildingObject() {
	return ((SceneObjectImplementation*) impl)->isCloningBuildingObject();
}

bool SceneObjectAdapter::isGarage() {
	return ((SceneObjectImplementation*) impl)->isGarage();
}

bool SceneObjectAdapter::isWeaponObject() {
	return ((SceneObjectImplementation*) impl)->isWeaponObject();
}

bool SceneObjectAdapter::isWearableObject() {
	return ((SceneObjectImplementation*) impl)->isWearableObject();
}

bool SceneObjectAdapter::isArmorObject() {
	return ((SceneObjectImplementation*) impl)->isArmorObject();
}

bool SceneObjectAdapter::isCellObject() {
	return ((SceneObjectImplementation*) impl)->isCellObject();
}

bool SceneObjectAdapter::isTangibleObject() {
	return ((SceneObjectImplementation*) impl)->isTangibleObject();
}

bool SceneObjectAdapter::isResourceContainer() {
	return ((SceneObjectImplementation*) impl)->isResourceContainer();
}

bool SceneObjectAdapter::isInstrument() {
	return ((SceneObjectImplementation*) impl)->isInstrument();
}

bool SceneObjectAdapter::isInstallationObject() {
	return ((SceneObjectImplementation*) impl)->isInstallationObject();
}

bool SceneObjectAdapter::isFishingPoleObject() {
	return ((SceneObjectImplementation*) impl)->isFishingPoleObject();
}

bool SceneObjectAdapter::isDeedObject() {
	return ((SceneObjectImplementation*) impl)->isDeedObject();
}

bool SceneObjectAdapter::isBuildingDeed() {
	return ((SceneObjectImplementation*) impl)->isBuildingDeed();
}

bool SceneObjectAdapter::isInstallationDeed() {
	return ((SceneObjectImplementation*) impl)->isInstallationDeed();
}

bool SceneObjectAdapter::isCraftingTool() {
	return ((SceneObjectImplementation*) impl)->isCraftingTool();
}

bool SceneObjectAdapter::isCraftingStation() {
	return ((SceneObjectImplementation*) impl)->isCraftingStation();
}

bool SceneObjectAdapter::isBazaarTerminal() {
	return ((SceneObjectImplementation*) impl)->isBazaarTerminal();
}

bool SceneObjectAdapter::isFishingBait() {
	return ((SceneObjectImplementation*) impl)->isFishingBait();
}

void SceneObjectAdapter::setPosition(float x, float z, float y) {
	((SceneObjectImplementation*) impl)->setPosition(x, z, y);
}

void SceneObjectAdapter::initializePosition(float x, float z, float y) {
	((SceneObjectImplementation*) impl)->initializePosition(x, z, y);
}

void SceneObjectAdapter::setGameObjectType(unsigned int type) {
	((SceneObjectImplementation*) impl)->setGameObjectType(type);
}

void SceneObjectAdapter::setActiveArea(ActiveArea* area) {
	((SceneObjectImplementation*) impl)->setActiveArea(area);
}

void SceneObjectAdapter::setClientObjectCRC(unsigned int objCRC) {
	((SceneObjectImplementation*) impl)->setClientObjectCRC(objCRC);
}

void SceneObjectAdapter::setServerObjectCRC(unsigned int objCRC) {
	((SceneObjectImplementation*) impl)->setServerObjectCRC(objCRC);
}

void SceneObjectAdapter::setParent(SceneObject* par) {
	((SceneObjectImplementation*) impl)->setParent(par);
}

void SceneObjectAdapter::setZone(Zone* zon) {
	((SceneObjectImplementation*) impl)->setZone(zon);
}

void SceneObjectAdapter::setDirection(float fw, float fx, float fy, float fz) {
	((SceneObjectImplementation*) impl)->setDirection(fw, fx, fy, fz);
}

void SceneObjectAdapter::setDirection(float headingAngleRadians) {
	((SceneObjectImplementation*) impl)->setDirection(headingAngleRadians);
}

void SceneObjectAdapter::setMovementCounter(unsigned int count) {
	((SceneObjectImplementation*) impl)->setMovementCounter(count);
}

void SceneObjectAdapter::incrementMovementCounter() {
	((SceneObjectImplementation*) impl)->incrementMovementCounter();
}

void SceneObjectAdapter::setContainmentType(unsigned int type) {
	((SceneObjectImplementation*) impl)->setContainmentType(type);
}

void SceneObjectAdapter::setLoggingName(const String& name) {
	((SceneObjectImplementation*) impl)->setLoggingName(name);
}

void SceneObjectAdapter::setStaticObject(bool val) {
	((SceneObjectImplementation*) impl)->setStaticObject(val);
}

bool SceneObjectAdapter::hasObjectInContainer(unsigned long long objectID) {
	return ((SceneObjectImplementation*) impl)->hasObjectInContainer(objectID);
}

SceneObject* SceneObjectAdapter::getContainerObject(unsigned long long objectID) {
	return ((SceneObjectImplementation*) impl)->getContainerObject(objectID);
}

unsigned int SceneObjectAdapter::getPlanetCRC() {
	return ((SceneObjectImplementation*) impl)->getPlanetCRC();
}

bool SceneObjectAdapter::isStaticObject() {
	return ((SceneObjectImplementation*) impl)->isStaticObject();
}

bool SceneObjectAdapter::isControlDevice() {
	return ((SceneObjectImplementation*) impl)->isControlDevice();
}

bool SceneObjectAdapter::isMissionTerminal() {
	return ((SceneObjectImplementation*) impl)->isMissionTerminal();
}

bool SceneObjectAdapter::isMissionObject() {
	return ((SceneObjectImplementation*) impl)->isMissionObject();
}

ActiveArea* SceneObjectAdapter::getActiveArea() {
	return ((SceneObjectImplementation*) impl)->getActiveArea();
}

int SceneObjectAdapter::getMapLocationsType1() {
	return ((SceneObjectImplementation*) impl)->getMapLocationsType1();
}

int SceneObjectAdapter::getMapLocationsType2() {
	return ((SceneObjectImplementation*) impl)->getMapLocationsType2();
}

int SceneObjectAdapter::getMapLocationsType3() {
	return ((SceneObjectImplementation*) impl)->getMapLocationsType3();
}

/*
 *	SceneObjectHelper
 */

SceneObjectHelper* SceneObjectHelper::staticInitializer = SceneObjectHelper::instance();

SceneObjectHelper::SceneObjectHelper() {
	className = "SceneObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void SceneObjectHelper::finalizeHelper() {
	SceneObjectHelper::finalize();
}

DistributedObject* SceneObjectHelper::instantiateObject() {
	return new SceneObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* SceneObjectHelper::instantiateServant() {
	return new SceneObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* SceneObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SceneObjectAdapter((SceneObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

