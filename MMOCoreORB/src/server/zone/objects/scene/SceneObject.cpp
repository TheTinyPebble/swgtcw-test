/*
 *	server/zone/objects/scene/SceneObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "SceneObject.h"

#include "server/zone/ZoneProcessServerImplementation.h"

#include "server/zone/ZoneClientSession.h"

#include "server/zone/Zone.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

/*
 *	SceneObjectStub
 */

SceneObject::SceneObject(LuaObject* templateData) : ManagedObject(DummyConstructorParameter::instance()) {
	_impl = new SceneObjectImplementation(templateData);
	_impl->_setStub(this);
}

SceneObject::SceneObject(DummyConstructorParameter* param) : ManagedObject(param) {
}

SceneObject::~SceneObject() {
}


void SceneObject::loadTemplateData(LuaObject* templateData) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((SceneObjectImplementation*) _impl)->loadTemplateData(templateData);
}

void SceneObject::initializeTransientMembers() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->initializeTransientMembers();
}

void SceneObject::info(const String& msg, bool forced) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addAsciiParameter(msg);
		method.addBooleanParameter(forced);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->info(msg, forced);
}

void SceneObject::error(const String& msg) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addAsciiParameter(msg);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->error(msg);
}

int SceneObject::inRangeObjectCount() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return method.executeWithSignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->inRangeObjectCount();
}

QuadTreeEntry* SceneObject::getInRangeObject(int index) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((SceneObjectImplementation*) _impl)->getInRangeObject(index);
}

bool SceneObject::isInRange(SceneObject* obj, float range) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(obj);
		method.addFloatParameter(range);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isInRange(obj, range);
}

bool SceneObject::isInRange(QuadTreeEntry* obj, float range) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((SceneObjectImplementation*) _impl)->isInRange(obj, range);
}

bool SceneObject::addObject(SceneObject* object, int containmentType, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addObjectParameter(object);
		method.addSignedIntParameter(containmentType);
		method.addBooleanParameter(notifyClient);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->addObject(object, containmentType, notifyClient);
}

bool SceneObject::removeObject(SceneObject* object, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addObjectParameter(object);
		method.addBooleanParameter(notifyClient);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->removeObject(object, notifyClient);
}

bool SceneObject::canAddObject(SceneObject* object) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addObjectParameter(object);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->canAddObject(object);
}

void SceneObject::updateToDatabase(bool startTask) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addBooleanParameter(startTask);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->updateToDatabase(startTask);
}

void SceneObject::create(ZoneClientSession* client) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addObjectParameter(client);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->create(client);
}

void SceneObject::destroy(ZoneClientSession* client) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addObjectParameter(client);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->destroy(client);
}

void SceneObject::close(ZoneClientSession* client) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addObjectParameter(client);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->close(client);
}

void SceneObject::link(ZoneClientSession* client, unsigned int containmentType) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addObjectParameter(client);
		method.addUnsignedIntParameter(containmentType);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->link(client, containmentType);
}

BaseMessage* SceneObject::link(unsigned long long objectID, unsigned int containmentType) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addUnsignedLongParameter(objectID);
		method.addUnsignedIntParameter(containmentType);

		return (BaseMessage*) method.executeWithObjectReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->link(objectID, containmentType);
}

void SceneObject::sendTo(SceneObject* player, bool doClose) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addObjectParameter(player);
		method.addBooleanParameter(doClose);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->sendTo(player, doClose);
}

void SceneObject::sendDestroyTo(SceneObject* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->sendDestroyTo(player);
}

void SceneObject::sendBaselinesTo(SceneObject* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->sendBaselinesTo(player);
}

void SceneObject::sendContainerObjectsTo(SceneObject* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->sendContainerObjectsTo(player);
}

void SceneObject::sendSlottedObjectsTo(SceneObject* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->sendSlottedObjectsTo(player);
}

void SceneObject::sendToOwner(bool doClose) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);
		method.addBooleanParameter(doClose);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->sendToOwner(doClose);
}

void SceneObject::sendAttributeListTo(SceneObject* object) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->sendAttributeListTo(object);
}

void SceneObject::fillObjectMenuResponse(ObjectMenuResponse* menuResponse) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);
		method.addObjectParameter(menuResponse);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->fillObjectMenuResponse(menuResponse);
}

int SceneObject::useObject(SceneObject* object) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);
		method.addObjectParameter(object);

		return method.executeWithSignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->useObject(object);
}

void SceneObject::insertToZone(Zone* zone) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);
		method.addObjectParameter(zone);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->insertToZone(zone);
}

void SceneObject::insertToBuilding(BuildingObject* building) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);
		method.addObjectParameter(building);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->insertToBuilding(building);
}

void SceneObject::switchZone(int newZoneID, float newPostionX, float newPositionZ, float newPositionY) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);
		method.addSignedIntParameter(newZoneID);
		method.addFloatParameter(newPostionX);
		method.addFloatParameter(newPositionZ);
		method.addFloatParameter(newPositionY);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->switchZone(newZoneID, newPostionX, newPositionZ, newPositionY);
}

void SceneObject::removeFromZone() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->removeFromZone();
}

void SceneObject::removeFromBuilding(BuildingObject* building) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);
		method.addObjectParameter(building);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->removeFromBuilding(building);
}

void SceneObject::updateZone(bool lightUpdate) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);
		method.addBooleanParameter(lightUpdate);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->updateZone(lightUpdate);
}

void SceneObject::updateZoneWithParent(SceneObject* newParent, bool lightUpdate) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);
		method.addObjectParameter(newParent);
		method.addBooleanParameter(lightUpdate);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->updateZoneWithParent(newParent, lightUpdate);
}

void SceneObject::broadcastMessage(BasePacket* message, bool sendSelf) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 36);
		method.addObjectParameter(message);
		method.addBooleanParameter(sendSelf);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->broadcastMessage(message, sendSelf);
}

void SceneObject::broadcastObject(SceneObject* object, bool sendSelf) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 37);
		method.addObjectParameter(object);
		method.addBooleanParameter(sendSelf);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->broadcastObject(object, sendSelf);
}

void SceneObject::broadcastMessages(Vector<BasePacket*>* messages, bool sendSelf) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((SceneObjectImplementation*) _impl)->broadcastMessages(messages, sendSelf);
}

void SceneObject::sendMessage(BasePacket* msg) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 38);
		method.addObjectParameter(msg);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->sendMessage(msg);
}

int SceneObject::compareTo(SceneObject* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 39);
		method.addObjectParameter(obj);

		return method.executeWithSignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->compareTo(obj);
}

void SceneObject::getContainmentObjects(VectorMap<String, ManagedReference<SceneObject* > >& objects) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((SceneObjectImplementation*) _impl)->getContainmentObjects(objects);
}

unsigned long long SceneObject::getParentID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 40);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getParentID();
}

unsigned long long SceneObject::getObjectID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 41);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getObjectID();
}

float SceneObject::getPositionX() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 42);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getPositionX();
}

float SceneObject::getPositionZ() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 43);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getPositionZ();
}

float SceneObject::getPositionY() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 44);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getPositionY();
}

float SceneObject::getDirectionX() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 45);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getDirectionX();
}

float SceneObject::getDirectionZ() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 46);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getDirectionZ();
}

float SceneObject::getDirectionY() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 47);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getDirectionY();
}

float SceneObject::getDirectionW() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 48);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getDirectionW();
}

unsigned int SceneObject::getClientObjectCRC() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 49);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getClientObjectCRC();
}

unsigned int SceneObject::getServerObjectCRC() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 50);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getServerObjectCRC();
}

StringId* SceneObject::getObjectName() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((SceneObjectImplementation*) _impl)->getObjectName();
}

StringId* SceneObject::getDetailedDescription() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((SceneObjectImplementation*) _impl)->getDetailedDescription();
}

int SceneObject::getArrangementDescriptorSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 51);

		return method.executeWithSignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getArrangementDescriptorSize();
}

String SceneObject::getArrangementDescriptor(int idx) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 52);
		method.addSignedIntParameter(idx);

		method.executeWithAsciiReturn(_return_getArrangementDescriptor);
		return _return_getArrangementDescriptor;
	} else
		return ((SceneObjectImplementation*) _impl)->getArrangementDescriptor(idx);
}

String SceneObject::getSlotDescriptor(int idx) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 53);
		method.addSignedIntParameter(idx);

		method.executeWithAsciiReturn(_return_getSlotDescriptor);
		return _return_getSlotDescriptor;
	} else
		return ((SceneObjectImplementation*) _impl)->getSlotDescriptor(idx);
}

SceneObject* SceneObject::getSlottedObject(const String& slot) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 54);
		method.addAsciiParameter(slot);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getSlottedObject(slot);
}

int SceneObject::getSlotDescriptorSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 55);

		return method.executeWithSignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getSlotDescriptorSize();
}

int SceneObject::getContainerObjectsSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 56);

		return method.executeWithSignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getContainerObjectsSize();
}

SceneObject* SceneObject::getContainerObject(int idx) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 57);
		method.addSignedIntParameter(idx);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getContainerObject(idx);
}

ZoneClientSession* SceneObject::getClient() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 58);

		return (ZoneClientSession*) method.executeWithObjectReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getClient();
}

unsigned int SceneObject::getGameObjectType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 59);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getGameObjectType();
}

unsigned int SceneObject::getContainmentType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 60);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getContainmentType();
}

Zone* SceneObject::getZone() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 61);

		return (Zone*) method.executeWithObjectReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getZone();
}

float SceneObject::getDirectionAngle() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 62);

		return method.executeWithFloatReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getDirectionAngle();
}

unsigned int SceneObject::getMovementCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 63);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getMovementCounter();
}

SceneObject* SceneObject::getParent() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 64);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getParent();
}

ZoneServer* SceneObject::getZoneServer() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 65);

		return (ZoneServer*) method.executeWithObjectReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getZoneServer();
}

SceneObject* SceneObject::getGrandParent() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 66);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->getGrandParent();
}

bool SceneObject::isASubChildOf(SceneObject* object) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 67);
		method.addObjectParameter(object);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isASubChildOf(object);
}

bool SceneObject::isInQuadTree() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 68);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isInQuadTree();
}

String SceneObject::getLoggingName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 69);

		method.executeWithAsciiReturn(_return_getLoggingName);
		return _return_getLoggingName;
	} else
		return ((SceneObjectImplementation*) _impl)->getLoggingName();
}

bool SceneObject::isPlayerCreature() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 70);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isPlayerCreature();
}

bool SceneObject::isCreatureObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 71);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isCreatureObject();
}

bool SceneObject::isBuildingObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 72);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isBuildingObject();
}

bool SceneObject::isWeaponObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 73);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isWeaponObject();
}

bool SceneObject::isArmorObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 74);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isArmorObject();
}

bool SceneObject::isCellObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 75);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isCellObject();
}

void SceneObject::setPosition(float x, float z, float y) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 76);
		method.addFloatParameter(x);
		method.addFloatParameter(z);
		method.addFloatParameter(y);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setPosition(x, z, y);
}

void SceneObject::initializePosition(float x, float z, float y) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 77);
		method.addFloatParameter(x);
		method.addFloatParameter(z);
		method.addFloatParameter(y);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->initializePosition(x, z, y);
}

void SceneObject::setGameObjectType(unsigned int type) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 78);
		method.addUnsignedIntParameter(type);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setGameObjectType(type);
}

void SceneObject::setClientObjectCRC(unsigned int objCRC) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 79);
		method.addUnsignedIntParameter(objCRC);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setClientObjectCRC(objCRC);
}

void SceneObject::setServerObjectCRC(unsigned int objCRC) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 80);
		method.addUnsignedIntParameter(objCRC);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setServerObjectCRC(objCRC);
}

void SceneObject::setParent(SceneObject* par) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 81);
		method.addObjectParameter(par);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setParent(par);
}

void SceneObject::setZoneProcessServer(ZoneProcessServerImplementation* srv) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((SceneObjectImplementation*) _impl)->setZoneProcessServer(srv);
}

void SceneObject::setObjectName(const UnicodeString& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 82);
		method.addUnicodeParameter(name);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setObjectName(name);
}

void SceneObject::setZone(Zone* zon) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 83);
		method.addObjectParameter(zon);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setZone(zon);
}

void SceneObject::setDirection(float fw, float fx, float fy, float fz) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 84);
		method.addFloatParameter(fw);
		method.addFloatParameter(fx);
		method.addFloatParameter(fy);
		method.addFloatParameter(fz);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setDirection(fw, fx, fy, fz);
}

void SceneObject::setMovementCounter(unsigned int count) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 85);
		method.addUnsignedIntParameter(count);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setMovementCounter(count);
}

void SceneObject::setContainmentType(unsigned int type) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 86);
		method.addUnsignedIntParameter(type);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setContainmentType(type);
}

void SceneObject::setLoggingName(const String& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 87);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setLoggingName(name);
}

VectorMap<unsigned long long, ManagedReference<SceneObject* > >* SceneObject::getContainerObjects() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((SceneObjectImplementation*) _impl)->getContainerObjects();
}

bool SceneObject::isPermanent() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 88);

		return method.executeWithBooleanReturn();
	} else
		return ((SceneObjectImplementation*) _impl)->isPermanent();
}

void SceneObject::setPermanent() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 89);

		method.executeWithVoidReturn();
	} else
		((SceneObjectImplementation*) _impl)->setPermanent();
}

/*
 *	SceneObjectImplementation
 */

SceneObjectImplementation::SceneObjectImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}

SceneObjectImplementation::~SceneObjectImplementation() {
	SceneObjectImplementation::finalize();
}


void SceneObjectImplementation::finalize() {
}

void SceneObjectImplementation::_initializeImplementation() {
	_setClassHelper(SceneObjectHelper::instance());

	_serializationHelperMethod();
}

void SceneObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (SceneObject*) stub;
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* SceneObjectImplementation::_getStub() {
	return _this;
}

SceneObjectImplementation::operator const SceneObject*() {
	return _this;
}

void SceneObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void SceneObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void SceneObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void SceneObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void SceneObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void SceneObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void SceneObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void SceneObjectImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("SceneObject");

	addSerializableVariable("zone", &zone);
	addSerializableVariable("parent", &parent);
	addSerializableVariable("slottedObjects", &slottedObjects);
	addSerializableVariable("containerObjects", &containerObjects);
	addSerializableVariable("serverObjectCRC", &serverObjectCRC);
	addSerializableVariable("clientObjectCRC", &clientObjectCRC);
	addSerializableVariable("direction", &direction);
	addSerializableVariable("positionX", &positionX);
	addSerializableVariable("positionZ", &positionZ);
	addSerializableVariable("positionY", &positionY);
	addSerializableVariable("arrangementDescriptors", &arrangementDescriptors);
	addSerializableVariable("slotDescriptors", &slotDescriptors);
	addSerializableVariable("objectName", &objectName);
	addSerializableVariable("detailedDescription", &detailedDescription);
	addSerializableVariable("permanent", &permanent);
	addSerializableVariable("containerType", &containerType);
	addSerializableVariable("containerVolumeLimit", &containerVolumeLimit);
	addSerializableVariable("gameObjectType", &gameObjectType);
	addSerializableVariable("containmentType", &containmentType);
}

SceneObjectImplementation::SceneObjectImplementation(LuaObject* templateData) {
	_initializeImplementation();
	// server/zone/objects/scene/SceneObject.idl(313):  loadTemplateData(templateData);
	loadTemplateData(templateData);
	// server/zone/objects/scene/SceneObject.idl(314):  initializeTransientMembers();
	initializeTransientMembers();
}

void SceneObjectImplementation::info(const String& msg, bool forced) {
	// server/zone/objects/scene/SceneObject.idl(341):  Logger.info(msg, forced);
	Logger::info(msg, forced);
}

void SceneObjectImplementation::error(const String& msg) {
	// server/zone/objects/scene/SceneObject.idl(351):  Logger.error(msg);
	Logger::error(msg);
}

int SceneObjectImplementation::inRangeObjectCount() {
	// server/zone/objects/scene/SceneObject.idl(361):  return QuadTreeEntry.inRangeObjectCount();
	return QuadTreeEntry::inRangeObjectCount();
}

QuadTreeEntry* SceneObjectImplementation::getInRangeObject(int index) {
	// server/zone/objects/scene/SceneObject.idl(372):  return QuadTreeEntry.getInRangeObject(index);
	return QuadTreeEntry::getInRangeObject(index);
}

bool SceneObjectImplementation::isInRange(SceneObject* obj, float range) {
	// server/zone/objects/scene/SceneObject.idl(384):  return QuadTreeEntry.isInRange(obj.getPositionX(), obj.getPositionY(), range);
	return QuadTreeEntry::isInRange(obj->getPositionX(), obj->getPositionY(), range);
}

bool SceneObjectImplementation::isInRange(QuadTreeEntry* obj, float range) {
	// server/zone/objects/scene/SceneObject.idl(397):  return QuadTreeEntry.isInRange(obj, range);
	return QuadTreeEntry::isInRange(obj, range);
}

bool SceneObjectImplementation::canAddObject(SceneObject* object) {
	// server/zone/objects/scene/SceneObject.idl(429):  int arrangementSize = object.getArrangementDescriptorSize();
	int arrangementSize = object->getArrangementDescriptorSize();
	// server/zone/objects/scene/SceneObject.idl(431):  
	for (	// server/zone/objects/scene/SceneObject.idl(431):  for (int i = 0;
	int i = 0;
	i < arrangementSize;
 ++i) {
	// server/zone/objects/scene/SceneObject.idl(432):  string childArrangement = object.getArrangementDescriptor(i);
	String childArrangement = object->getArrangementDescriptor(i);
	// server/zone/objects/scene/SceneObject.idl(434):  }
	if ((&slottedObjects)->contains(childArrangement))	// server/zone/objects/scene/SceneObject.idl(435):  return false;
	return false;
}
	// server/zone/objects/scene/SceneObject.idl(438):  return true;
	return true;
}

void SceneObjectImplementation::sendBaselinesTo(SceneObject* player) {
}

void SceneObjectImplementation::sendToOwner(bool doClose) {
}

void SceneObjectImplementation::fillObjectMenuResponse(ObjectMenuResponse* menuResponse) {
}

int SceneObjectImplementation::useObject(SceneObject* object) {
	// server/zone/objects/scene/SceneObject.idl(561):  return 0;
	return 0;
}

void SceneObjectImplementation::sendMessage(BasePacket* msg) {
	// server/zone/objects/scene/SceneObject.idl(658):  }
	if (msg != NULL)	// server/zone/objects/scene/SceneObject.idl(659):  msg.finalize();
	msg->finalize();
}

int SceneObjectImplementation::compareTo(SceneObject* obj) {
	// server/zone/objects/scene/SceneObject.idl(670):  
	if (getObjectID() < obj->getObjectID())	// server/zone/objects/scene/SceneObject.idl(671):  return 1;
	return 1;

	else 	// server/zone/objects/scene/SceneObject.idl(672):  
	if (getObjectID() > obj->getObjectID())	// server/zone/objects/scene/SceneObject.idl(673):  return -1;
	return -1;

	else 	// server/zone/objects/scene/SceneObject.idl(675):  return 0;
	return 0;
}

unsigned long long SceneObjectImplementation::getParentID() {
	// server/zone/objects/scene/SceneObject.idl(694):  
	if (parent != NULL){
	// server/zone/objects/scene/SceneObject.idl(695):  return parent.getObjectID();
	return parent->getObjectID();
}

	else 	// server/zone/objects/scene/SceneObject.idl(697):  return 0;
	return 0;
}

float SceneObjectImplementation::getPositionX() {
	// server/zone/objects/scene/SceneObject.idl(704):  return QuadTreeEntry.getPositionX();
	return QuadTreeEntry::getPositionX();
}

float SceneObjectImplementation::getPositionZ() {
	// server/zone/objects/scene/SceneObject.idl(708):  return QuadTreeEntry.getPositionZ();
	return QuadTreeEntry::getPositionZ();
}

float SceneObjectImplementation::getPositionY() {
	// server/zone/objects/scene/SceneObject.idl(712):  return QuadTreeEntry.getPositionY();
	return QuadTreeEntry::getPositionY();
}

float SceneObjectImplementation::getDirectionX() {
	// server/zone/objects/scene/SceneObject.idl(716):  return direction.getX();
	return (&direction)->getX();
}

float SceneObjectImplementation::getDirectionZ() {
	// server/zone/objects/scene/SceneObject.idl(720):  return direction.getZ();
	return (&direction)->getZ();
}

float SceneObjectImplementation::getDirectionY() {
	// server/zone/objects/scene/SceneObject.idl(724):  return direction.getY();
	return (&direction)->getY();
}

float SceneObjectImplementation::getDirectionW() {
	// server/zone/objects/scene/SceneObject.idl(728):  return direction.getW();
	return (&direction)->getW();
}

unsigned int SceneObjectImplementation::getClientObjectCRC() {
	// server/zone/objects/scene/SceneObject.idl(732):  return clientObjectCRC;
	return clientObjectCRC;
}

unsigned int SceneObjectImplementation::getServerObjectCRC() {
	// server/zone/objects/scene/SceneObject.idl(736):  return serverObjectCRC;
	return serverObjectCRC;
}

StringId* SceneObjectImplementation::getObjectName() {
	// server/zone/objects/scene/SceneObject.idl(741):  return objectName;
	return (&objectName);
}

StringId* SceneObjectImplementation::getDetailedDescription() {
	// server/zone/objects/scene/SceneObject.idl(746):  return detailedDescription;
	return (&detailedDescription);
}

int SceneObjectImplementation::getArrangementDescriptorSize() {
	// server/zone/objects/scene/SceneObject.idl(750):  return arrangementDescriptors.size();
	return (&arrangementDescriptors)->size();
}

String SceneObjectImplementation::getArrangementDescriptor(int idx) {
	// server/zone/objects/scene/SceneObject.idl(754):  return arrangementDescriptors.get(idx);
	return (&arrangementDescriptors)->get(idx);
}

String SceneObjectImplementation::getSlotDescriptor(int idx) {
	// server/zone/objects/scene/SceneObject.idl(758):  return slotDescriptors.get(idx);
	return (&slotDescriptors)->get(idx);
}

SceneObject* SceneObjectImplementation::getSlottedObject(const String& slot) {
	// server/zone/objects/scene/SceneObject.idl(762):  return slottedObjects.get(slot);
	return (&slottedObjects)->get(slot);
}

int SceneObjectImplementation::getSlotDescriptorSize() {
	// server/zone/objects/scene/SceneObject.idl(766):  return slotDescriptors.size();
	return (&slotDescriptors)->size();
}

int SceneObjectImplementation::getContainerObjectsSize() {
	// server/zone/objects/scene/SceneObject.idl(770):  return containerObjects.size();
	return (&containerObjects)->size();
}

SceneObject* SceneObjectImplementation::getContainerObject(int idx) {
	// server/zone/objects/scene/SceneObject.idl(774):  return containerObjects.get(idx);
	return (&containerObjects)->get(idx);
}

ZoneClientSession* SceneObjectImplementation::getClient() {
	// server/zone/objects/scene/SceneObject.idl(778):  return null;
	return NULL;
}

unsigned int SceneObjectImplementation::getGameObjectType() {
	// server/zone/objects/scene/SceneObject.idl(782):  return gameObjectType;
	return gameObjectType;
}

unsigned int SceneObjectImplementation::getContainmentType() {
	// server/zone/objects/scene/SceneObject.idl(786):  return containmentType;
	return containmentType;
}

Zone* SceneObjectImplementation::getZone() {
	// server/zone/objects/scene/SceneObject.idl(790):  return zone;
	return zone;
}

float SceneObjectImplementation::getDirectionAngle() {
	// server/zone/objects/scene/SceneObject.idl(794):  return direction.getDegrees();
	return (&direction)->getDegrees();
}

unsigned int SceneObjectImplementation::getMovementCounter() {
	// server/zone/objects/scene/SceneObject.idl(798):  return movementCounter;
	return movementCounter;
}

SceneObject* SceneObjectImplementation::getParent() {
	// server/zone/objects/scene/SceneObject.idl(802):  return parent;
	return parent;
}

ZoneServer* SceneObjectImplementation::getZoneServer() {
	// server/zone/objects/scene/SceneObject.idl(806):  return server.getZoneServer();
	return server->getZoneServer();
}

bool SceneObjectImplementation::isInQuadTree() {
	// server/zone/objects/scene/SceneObject.idl(827):  return QuadTreeEntry.isInQuadTree();
	return QuadTreeEntry::isInQuadTree();
}

String SceneObjectImplementation::getLoggingName() {
	// server/zone/objects/scene/SceneObject.idl(831):  return Logger.getLoggingName();
	return Logger::getLoggingName();
}

bool SceneObjectImplementation::isPlayerCreature() {
	// server/zone/objects/scene/SceneObject.idl(835):  return gameObjectType == PLAYERCREATURE;
	return gameObjectType == PLAYERCREATURE;
}

bool SceneObjectImplementation::isCreatureObject() {
	// server/zone/objects/scene/SceneObject.idl(839):  return gameObjectType & CREATURE;
	return gameObjectType & CREATURE;
}

bool SceneObjectImplementation::isBuildingObject() {
	// server/zone/objects/scene/SceneObject.idl(843):  return gameObjectType & BUILDING;
	return gameObjectType & BUILDING;
}

bool SceneObjectImplementation::isWeaponObject() {
	// server/zone/objects/scene/SceneObject.idl(847):  return gameObjectType & WEAPON;
	return gameObjectType & WEAPON;
}

bool SceneObjectImplementation::isArmorObject() {
	// server/zone/objects/scene/SceneObject.idl(851):  return gameObjectType & ARMOR;
	return gameObjectType & ARMOR;
}

bool SceneObjectImplementation::isCellObject() {
	// server/zone/objects/scene/SceneObject.idl(855):  return gameObjectType == CELLOBJECT;
	return gameObjectType == CELLOBJECT;
}

void SceneObjectImplementation::setPosition(float x, float z, float y) {
	// server/zone/objects/scene/SceneObject.idl(859):  QuadTreeEntry.setPosition(x, z, y);
	QuadTreeEntry::setPosition(x, z, y);
}

void SceneObjectImplementation::initializePosition(float x, float z, float y) {
	// server/zone/objects/scene/SceneObject.idl(863):  QuadTreeEntry.initializePosition(x, z, y);
	QuadTreeEntry::initializePosition(x, z, y);
}

void SceneObjectImplementation::setGameObjectType(unsigned int type) {
	// server/zone/objects/scene/SceneObject.idl(867):  gameObjectType = type;
	gameObjectType = type;
}

void SceneObjectImplementation::setClientObjectCRC(unsigned int objCRC) {
	// server/zone/objects/scene/SceneObject.idl(871):  clientObjectCRC = objCRC;
	clientObjectCRC = objCRC;
}

void SceneObjectImplementation::setServerObjectCRC(unsigned int objCRC) {
	// server/zone/objects/scene/SceneObject.idl(875):  serverObjectCRC = objCRC;
	serverObjectCRC = objCRC;
}

void SceneObjectImplementation::setParent(SceneObject* par) {
	// server/zone/objects/scene/SceneObject.idl(879):  parent = par;
	parent = par;
}

void SceneObjectImplementation::setZoneProcessServer(ZoneProcessServerImplementation* srv) {
	// server/zone/objects/scene/SceneObject.idl(884):  server = srv;
	server = srv;
}

void SceneObjectImplementation::setObjectName(const UnicodeString& name) {
	// server/zone/objects/scene/SceneObject.idl(888):  objectName.setCustomString(name);
	(&objectName)->setCustomString(name);
}

void SceneObjectImplementation::setZone(Zone* zon) {
	// server/zone/objects/scene/SceneObject.idl(892):  zone = zon;
	zone = zon;
}

void SceneObjectImplementation::setDirection(float fw, float fx, float fy, float fz) {
	// server/zone/objects/scene/SceneObject.idl(896):  direction.set(fw, fx, fy, fz);
	(&direction)->set(fw, fx, fy, fz);
}

void SceneObjectImplementation::setMovementCounter(unsigned int count) {
	// server/zone/objects/scene/SceneObject.idl(900):  movementCounter = count;
	movementCounter = count;
}

void SceneObjectImplementation::setContainmentType(unsigned int type) {
	// server/zone/objects/scene/SceneObject.idl(904):  containmentType = type;
	containmentType = type;
}

void SceneObjectImplementation::setLoggingName(const String& name) {
	// server/zone/objects/scene/SceneObject.idl(908):  Logger.setLoggingName(name);
	Logger::setLoggingName(name);
}

VectorMap<unsigned long long, ManagedReference<SceneObject* > >* SceneObjectImplementation::getContainerObjects() {
	// server/zone/objects/scene/SceneObject.idl(913):  return containerObjects;
	return (&containerObjects);
}

bool SceneObjectImplementation::isPermanent() {
	// server/zone/objects/scene/SceneObject.idl(918):  return permanent;
	return permanent;
}

void SceneObjectImplementation::setPermanent() {
	// server/zone/objects/scene/SceneObject.idl(923):  permanent = true;
	permanent = true;
}

/*
 *	SceneObjectAdapter
 */

SceneObjectAdapter::SceneObjectAdapter(SceneObjectImplementation* obj) : ManagedObjectAdapter(obj) {
}

Packet* SceneObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initializeTransientMembers();
		break;
	case 7:
		info(inv->getAsciiParameter(_param0_info__String_bool_), inv->getBooleanParameter());
		break;
	case 8:
		error(inv->getAsciiParameter(_param0_error__String_));
		break;
	case 9:
		resp->insertSignedInt(inRangeObjectCount());
		break;
	case 10:
		resp->insertBoolean(isInRange((SceneObject*) inv->getObjectParameter(), inv->getFloatParameter()));
		break;
	case 11:
		resp->insertBoolean(addObject((SceneObject*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 12:
		resp->insertBoolean(removeObject((SceneObject*) inv->getObjectParameter(), inv->getBooleanParameter()));
		break;
	case 13:
		resp->insertBoolean(canAddObject((SceneObject*) inv->getObjectParameter()));
		break;
	case 14:
		updateToDatabase(inv->getBooleanParameter());
		break;
	case 15:
		create((ZoneClientSession*) inv->getObjectParameter());
		break;
	case 16:
		destroy((ZoneClientSession*) inv->getObjectParameter());
		break;
	case 17:
		close((ZoneClientSession*) inv->getObjectParameter());
		break;
	case 18:
		link((ZoneClientSession*) inv->getObjectParameter(), inv->getUnsignedIntParameter());
		break;
	case 19:
		resp->insertLong(link(inv->getUnsignedLongParameter(), inv->getUnsignedIntParameter())->_getObjectID());
		break;
	case 20:
		sendTo((SceneObject*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 21:
		sendDestroyTo((SceneObject*) inv->getObjectParameter());
		break;
	case 22:
		sendBaselinesTo((SceneObject*) inv->getObjectParameter());
		break;
	case 23:
		sendContainerObjectsTo((SceneObject*) inv->getObjectParameter());
		break;
	case 24:
		sendSlottedObjectsTo((SceneObject*) inv->getObjectParameter());
		break;
	case 25:
		sendToOwner(inv->getBooleanParameter());
		break;
	case 26:
		sendAttributeListTo((SceneObject*) inv->getObjectParameter());
		break;
	case 27:
		fillObjectMenuResponse((ObjectMenuResponse*) inv->getObjectParameter());
		break;
	case 28:
		resp->insertSignedInt(useObject((SceneObject*) inv->getObjectParameter()));
		break;
	case 29:
		insertToZone((Zone*) inv->getObjectParameter());
		break;
	case 30:
		insertToBuilding((BuildingObject*) inv->getObjectParameter());
		break;
	case 31:
		switchZone(inv->getSignedIntParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter());
		break;
	case 32:
		removeFromZone();
		break;
	case 33:
		removeFromBuilding((BuildingObject*) inv->getObjectParameter());
		break;
	case 34:
		updateZone(inv->getBooleanParameter());
		break;
	case 35:
		updateZoneWithParent((SceneObject*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 36:
		broadcastMessage((BasePacket*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 37:
		broadcastObject((SceneObject*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 38:
		sendMessage((BasePacket*) inv->getObjectParameter());
		break;
	case 39:
		resp->insertSignedInt(compareTo((SceneObject*) inv->getObjectParameter()));
		break;
	case 40:
		resp->insertLong(getParentID());
		break;
	case 41:
		resp->insertLong(getObjectID());
		break;
	case 42:
		resp->insertFloat(getPositionX());
		break;
	case 43:
		resp->insertFloat(getPositionZ());
		break;
	case 44:
		resp->insertFloat(getPositionY());
		break;
	case 45:
		resp->insertFloat(getDirectionX());
		break;
	case 46:
		resp->insertFloat(getDirectionZ());
		break;
	case 47:
		resp->insertFloat(getDirectionY());
		break;
	case 48:
		resp->insertFloat(getDirectionW());
		break;
	case 49:
		resp->insertInt(getClientObjectCRC());
		break;
	case 50:
		resp->insertInt(getServerObjectCRC());
		break;
	case 51:
		resp->insertSignedInt(getArrangementDescriptorSize());
		break;
	case 52:
		resp->insertAscii(getArrangementDescriptor(inv->getSignedIntParameter()));
		break;
	case 53:
		resp->insertAscii(getSlotDescriptor(inv->getSignedIntParameter()));
		break;
	case 54:
		resp->insertLong(getSlottedObject(inv->getAsciiParameter(_param0_getSlottedObject__String_))->_getObjectID());
		break;
	case 55:
		resp->insertSignedInt(getSlotDescriptorSize());
		break;
	case 56:
		resp->insertSignedInt(getContainerObjectsSize());
		break;
	case 57:
		resp->insertLong(getContainerObject(inv->getSignedIntParameter())->_getObjectID());
		break;
	case 58:
		resp->insertLong(getClient()->_getObjectID());
		break;
	case 59:
		resp->insertInt(getGameObjectType());
		break;
	case 60:
		resp->insertInt(getContainmentType());
		break;
	case 61:
		resp->insertLong(getZone()->_getObjectID());
		break;
	case 62:
		resp->insertFloat(getDirectionAngle());
		break;
	case 63:
		resp->insertInt(getMovementCounter());
		break;
	case 64:
		resp->insertLong(getParent()->_getObjectID());
		break;
	case 65:
		resp->insertLong(getZoneServer()->_getObjectID());
		break;
	case 66:
		resp->insertLong(getGrandParent()->_getObjectID());
		break;
	case 67:
		resp->insertBoolean(isASubChildOf((SceneObject*) inv->getObjectParameter()));
		break;
	case 68:
		resp->insertBoolean(isInQuadTree());
		break;
	case 69:
		resp->insertAscii(getLoggingName());
		break;
	case 70:
		resp->insertBoolean(isPlayerCreature());
		break;
	case 71:
		resp->insertBoolean(isCreatureObject());
		break;
	case 72:
		resp->insertBoolean(isBuildingObject());
		break;
	case 73:
		resp->insertBoolean(isWeaponObject());
		break;
	case 74:
		resp->insertBoolean(isArmorObject());
		break;
	case 75:
		resp->insertBoolean(isCellObject());
		break;
	case 76:
		setPosition(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter());
		break;
	case 77:
		initializePosition(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter());
		break;
	case 78:
		setGameObjectType(inv->getUnsignedIntParameter());
		break;
	case 79:
		setClientObjectCRC(inv->getUnsignedIntParameter());
		break;
	case 80:
		setServerObjectCRC(inv->getUnsignedIntParameter());
		break;
	case 81:
		setParent((SceneObject*) inv->getObjectParameter());
		break;
	case 82:
		setObjectName(inv->getUnicodeParameter(_param0_setObjectName__UnicodeString_));
		break;
	case 83:
		setZone((Zone*) inv->getObjectParameter());
		break;
	case 84:
		setDirection(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter());
		break;
	case 85:
		setMovementCounter(inv->getUnsignedIntParameter());
		break;
	case 86:
		setContainmentType(inv->getUnsignedIntParameter());
		break;
	case 87:
		setLoggingName(inv->getAsciiParameter(_param0_setLoggingName__String_));
		break;
	case 88:
		resp->insertBoolean(isPermanent());
		break;
	case 89:
		setPermanent();
		break;
	default:
		return NULL;
	}

	return resp;
}

void SceneObjectAdapter::initializeTransientMembers() {
	((SceneObjectImplementation*) impl)->initializeTransientMembers();
}

void SceneObjectAdapter::info(const String& msg, bool forced) {
	((SceneObjectImplementation*) impl)->info(msg, forced);
}

void SceneObjectAdapter::error(const String& msg) {
	((SceneObjectImplementation*) impl)->error(msg);
}

int SceneObjectAdapter::inRangeObjectCount() {
	return ((SceneObjectImplementation*) impl)->inRangeObjectCount();
}

bool SceneObjectAdapter::isInRange(SceneObject* obj, float range) {
	return ((SceneObjectImplementation*) impl)->isInRange(obj, range);
}

bool SceneObjectAdapter::addObject(SceneObject* object, int containmentType, bool notifyClient) {
	return ((SceneObjectImplementation*) impl)->addObject(object, containmentType, notifyClient);
}

bool SceneObjectAdapter::removeObject(SceneObject* object, bool notifyClient) {
	return ((SceneObjectImplementation*) impl)->removeObject(object, notifyClient);
}

bool SceneObjectAdapter::canAddObject(SceneObject* object) {
	return ((SceneObjectImplementation*) impl)->canAddObject(object);
}

void SceneObjectAdapter::updateToDatabase(bool startTask) {
	((SceneObjectImplementation*) impl)->updateToDatabase(startTask);
}

void SceneObjectAdapter::create(ZoneClientSession* client) {
	((SceneObjectImplementation*) impl)->create(client);
}

void SceneObjectAdapter::destroy(ZoneClientSession* client) {
	((SceneObjectImplementation*) impl)->destroy(client);
}

void SceneObjectAdapter::close(ZoneClientSession* client) {
	((SceneObjectImplementation*) impl)->close(client);
}

void SceneObjectAdapter::link(ZoneClientSession* client, unsigned int containmentType) {
	((SceneObjectImplementation*) impl)->link(client, containmentType);
}

BaseMessage* SceneObjectAdapter::link(unsigned long long objectID, unsigned int containmentType) {
	return ((SceneObjectImplementation*) impl)->link(objectID, containmentType);
}

void SceneObjectAdapter::sendTo(SceneObject* player, bool doClose) {
	((SceneObjectImplementation*) impl)->sendTo(player, doClose);
}

void SceneObjectAdapter::sendDestroyTo(SceneObject* player) {
	((SceneObjectImplementation*) impl)->sendDestroyTo(player);
}

void SceneObjectAdapter::sendBaselinesTo(SceneObject* player) {
	((SceneObjectImplementation*) impl)->sendBaselinesTo(player);
}

void SceneObjectAdapter::sendContainerObjectsTo(SceneObject* player) {
	((SceneObjectImplementation*) impl)->sendContainerObjectsTo(player);
}

void SceneObjectAdapter::sendSlottedObjectsTo(SceneObject* player) {
	((SceneObjectImplementation*) impl)->sendSlottedObjectsTo(player);
}

void SceneObjectAdapter::sendToOwner(bool doClose) {
	((SceneObjectImplementation*) impl)->sendToOwner(doClose);
}

void SceneObjectAdapter::sendAttributeListTo(SceneObject* object) {
	((SceneObjectImplementation*) impl)->sendAttributeListTo(object);
}

void SceneObjectAdapter::fillObjectMenuResponse(ObjectMenuResponse* menuResponse) {
	((SceneObjectImplementation*) impl)->fillObjectMenuResponse(menuResponse);
}

int SceneObjectAdapter::useObject(SceneObject* object) {
	return ((SceneObjectImplementation*) impl)->useObject(object);
}

void SceneObjectAdapter::insertToZone(Zone* zone) {
	((SceneObjectImplementation*) impl)->insertToZone(zone);
}

void SceneObjectAdapter::insertToBuilding(BuildingObject* building) {
	((SceneObjectImplementation*) impl)->insertToBuilding(building);
}

void SceneObjectAdapter::switchZone(int newZoneID, float newPostionX, float newPositionZ, float newPositionY) {
	((SceneObjectImplementation*) impl)->switchZone(newZoneID, newPostionX, newPositionZ, newPositionY);
}

void SceneObjectAdapter::removeFromZone() {
	((SceneObjectImplementation*) impl)->removeFromZone();
}

void SceneObjectAdapter::removeFromBuilding(BuildingObject* building) {
	((SceneObjectImplementation*) impl)->removeFromBuilding(building);
}

void SceneObjectAdapter::updateZone(bool lightUpdate) {
	((SceneObjectImplementation*) impl)->updateZone(lightUpdate);
}

void SceneObjectAdapter::updateZoneWithParent(SceneObject* newParent, bool lightUpdate) {
	((SceneObjectImplementation*) impl)->updateZoneWithParent(newParent, lightUpdate);
}

void SceneObjectAdapter::broadcastMessage(BasePacket* message, bool sendSelf) {
	((SceneObjectImplementation*) impl)->broadcastMessage(message, sendSelf);
}

void SceneObjectAdapter::broadcastObject(SceneObject* object, bool sendSelf) {
	((SceneObjectImplementation*) impl)->broadcastObject(object, sendSelf);
}

void SceneObjectAdapter::sendMessage(BasePacket* msg) {
	((SceneObjectImplementation*) impl)->sendMessage(msg);
}

int SceneObjectAdapter::compareTo(SceneObject* obj) {
	return ((SceneObjectImplementation*) impl)->compareTo(obj);
}

unsigned long long SceneObjectAdapter::getParentID() {
	return ((SceneObjectImplementation*) impl)->getParentID();
}

unsigned long long SceneObjectAdapter::getObjectID() {
	return ((SceneObjectImplementation*) impl)->getObjectID();
}

float SceneObjectAdapter::getPositionX() {
	return ((SceneObjectImplementation*) impl)->getPositionX();
}

float SceneObjectAdapter::getPositionZ() {
	return ((SceneObjectImplementation*) impl)->getPositionZ();
}

float SceneObjectAdapter::getPositionY() {
	return ((SceneObjectImplementation*) impl)->getPositionY();
}

float SceneObjectAdapter::getDirectionX() {
	return ((SceneObjectImplementation*) impl)->getDirectionX();
}

float SceneObjectAdapter::getDirectionZ() {
	return ((SceneObjectImplementation*) impl)->getDirectionZ();
}

float SceneObjectAdapter::getDirectionY() {
	return ((SceneObjectImplementation*) impl)->getDirectionY();
}

float SceneObjectAdapter::getDirectionW() {
	return ((SceneObjectImplementation*) impl)->getDirectionW();
}

unsigned int SceneObjectAdapter::getClientObjectCRC() {
	return ((SceneObjectImplementation*) impl)->getClientObjectCRC();
}

unsigned int SceneObjectAdapter::getServerObjectCRC() {
	return ((SceneObjectImplementation*) impl)->getServerObjectCRC();
}

int SceneObjectAdapter::getArrangementDescriptorSize() {
	return ((SceneObjectImplementation*) impl)->getArrangementDescriptorSize();
}

String SceneObjectAdapter::getArrangementDescriptor(int idx) {
	return ((SceneObjectImplementation*) impl)->getArrangementDescriptor(idx);
}

String SceneObjectAdapter::getSlotDescriptor(int idx) {
	return ((SceneObjectImplementation*) impl)->getSlotDescriptor(idx);
}

SceneObject* SceneObjectAdapter::getSlottedObject(const String& slot) {
	return ((SceneObjectImplementation*) impl)->getSlottedObject(slot);
}

int SceneObjectAdapter::getSlotDescriptorSize() {
	return ((SceneObjectImplementation*) impl)->getSlotDescriptorSize();
}

int SceneObjectAdapter::getContainerObjectsSize() {
	return ((SceneObjectImplementation*) impl)->getContainerObjectsSize();
}

SceneObject* SceneObjectAdapter::getContainerObject(int idx) {
	return ((SceneObjectImplementation*) impl)->getContainerObject(idx);
}

ZoneClientSession* SceneObjectAdapter::getClient() {
	return ((SceneObjectImplementation*) impl)->getClient();
}

unsigned int SceneObjectAdapter::getGameObjectType() {
	return ((SceneObjectImplementation*) impl)->getGameObjectType();
}

unsigned int SceneObjectAdapter::getContainmentType() {
	return ((SceneObjectImplementation*) impl)->getContainmentType();
}

Zone* SceneObjectAdapter::getZone() {
	return ((SceneObjectImplementation*) impl)->getZone();
}

float SceneObjectAdapter::getDirectionAngle() {
	return ((SceneObjectImplementation*) impl)->getDirectionAngle();
}

unsigned int SceneObjectAdapter::getMovementCounter() {
	return ((SceneObjectImplementation*) impl)->getMovementCounter();
}

SceneObject* SceneObjectAdapter::getParent() {
	return ((SceneObjectImplementation*) impl)->getParent();
}

ZoneServer* SceneObjectAdapter::getZoneServer() {
	return ((SceneObjectImplementation*) impl)->getZoneServer();
}

SceneObject* SceneObjectAdapter::getGrandParent() {
	return ((SceneObjectImplementation*) impl)->getGrandParent();
}

bool SceneObjectAdapter::isASubChildOf(SceneObject* object) {
	return ((SceneObjectImplementation*) impl)->isASubChildOf(object);
}

bool SceneObjectAdapter::isInQuadTree() {
	return ((SceneObjectImplementation*) impl)->isInQuadTree();
}

String SceneObjectAdapter::getLoggingName() {
	return ((SceneObjectImplementation*) impl)->getLoggingName();
}

bool SceneObjectAdapter::isPlayerCreature() {
	return ((SceneObjectImplementation*) impl)->isPlayerCreature();
}

bool SceneObjectAdapter::isCreatureObject() {
	return ((SceneObjectImplementation*) impl)->isCreatureObject();
}

bool SceneObjectAdapter::isBuildingObject() {
	return ((SceneObjectImplementation*) impl)->isBuildingObject();
}

bool SceneObjectAdapter::isWeaponObject() {
	return ((SceneObjectImplementation*) impl)->isWeaponObject();
}

bool SceneObjectAdapter::isArmorObject() {
	return ((SceneObjectImplementation*) impl)->isArmorObject();
}

bool SceneObjectAdapter::isCellObject() {
	return ((SceneObjectImplementation*) impl)->isCellObject();
}

void SceneObjectAdapter::setPosition(float x, float z, float y) {
	((SceneObjectImplementation*) impl)->setPosition(x, z, y);
}

void SceneObjectAdapter::initializePosition(float x, float z, float y) {
	((SceneObjectImplementation*) impl)->initializePosition(x, z, y);
}

void SceneObjectAdapter::setGameObjectType(unsigned int type) {
	((SceneObjectImplementation*) impl)->setGameObjectType(type);
}

void SceneObjectAdapter::setClientObjectCRC(unsigned int objCRC) {
	((SceneObjectImplementation*) impl)->setClientObjectCRC(objCRC);
}

void SceneObjectAdapter::setServerObjectCRC(unsigned int objCRC) {
	((SceneObjectImplementation*) impl)->setServerObjectCRC(objCRC);
}

void SceneObjectAdapter::setParent(SceneObject* par) {
	((SceneObjectImplementation*) impl)->setParent(par);
}

void SceneObjectAdapter::setObjectName(const UnicodeString& name) {
	((SceneObjectImplementation*) impl)->setObjectName(name);
}

void SceneObjectAdapter::setZone(Zone* zon) {
	((SceneObjectImplementation*) impl)->setZone(zon);
}

void SceneObjectAdapter::setDirection(float fw, float fx, float fy, float fz) {
	((SceneObjectImplementation*) impl)->setDirection(fw, fx, fy, fz);
}

void SceneObjectAdapter::setMovementCounter(unsigned int count) {
	((SceneObjectImplementation*) impl)->setMovementCounter(count);
}

void SceneObjectAdapter::setContainmentType(unsigned int type) {
	((SceneObjectImplementation*) impl)->setContainmentType(type);
}

void SceneObjectAdapter::setLoggingName(const String& name) {
	((SceneObjectImplementation*) impl)->setLoggingName(name);
}

bool SceneObjectAdapter::isPermanent() {
	return ((SceneObjectImplementation*) impl)->isPermanent();
}

void SceneObjectAdapter::setPermanent() {
	((SceneObjectImplementation*) impl)->setPermanent();
}

/*
 *	SceneObjectHelper
 */

SceneObjectHelper* SceneObjectHelper::staticInitializer = SceneObjectHelper::instance();

SceneObjectHelper::SceneObjectHelper() {
	className = "SceneObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void SceneObjectHelper::finalizeHelper() {
	SceneObjectHelper::finalize();
}

DistributedObject* SceneObjectHelper::instantiateObject() {
	return new SceneObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* SceneObjectHelper::instantiateServant() {
	return new SceneObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* SceneObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SceneObjectAdapter((SceneObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

