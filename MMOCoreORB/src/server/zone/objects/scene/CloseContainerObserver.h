/*
 *	server/zone/objects/scene/CloseContainerObserver.h generated by engine3 IDL compiler 0.60
 */

#ifndef CLOSECONTAINEROBSERVER_H_
#define CLOSECONTAINEROBSERVER_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace scene {

class Observable;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

namespace server {
namespace zone {
namespace objects {
namespace player {

class PlayerCreature;

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

#include "engine/core/ManagedObject.h"

#include "engine/log/Logger.h"

#include "engine/core/ManagedReference.h"

namespace server {
namespace zone {
namespace objects {
namespace scene {

class CloseContainerObserver : public Observer {
public:
	int notifyCloseContainer(PlayerCreature* player, SceneObject* container);

protected:
	CloseContainerObserver(DummyConstructorParameter* param);

	virtual ~CloseContainerObserver();

	friend class CloseContainerObserverHelper;
};

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

namespace server {
namespace zone {
namespace objects {
namespace scene {

class CloseContainerObserverImplementation : public ObserverImplementation {

public:
	CloseContainerObserverImplementation();
	CloseContainerObserverImplementation(DummyConstructorParameter* param);

	virtual int notifyCloseContainer(PlayerCreature* player, SceneObject* container);

	CloseContainerObserver* _this;

	operator const CloseContainerObserver*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~CloseContainerObserverImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();

	friend class CloseContainerObserver;
};

class CloseContainerObserverAdapter : public ObserverAdapter {
public:
	CloseContainerObserverAdapter(CloseContainerObserverImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	int notifyCloseContainer(PlayerCreature* player, SceneObject* container);

};

class CloseContainerObserverHelper : public DistributedObjectClassHelper, public Singleton<CloseContainerObserverHelper> {
	static CloseContainerObserverHelper* staticInitializer;

public:
	CloseContainerObserverHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<CloseContainerObserverHelper>;
};

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

#endif /*CLOSECONTAINEROBSERVER_H_*/
