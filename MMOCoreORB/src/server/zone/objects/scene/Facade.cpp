/*
 *	server/zone/objects/scene/Facade.cpp generated by engine3 IDL compiler 0.60
 */

#include "Facade.h"

/*
 *	FacadeStub
 */

Facade::Facade() : ManagedObject(DummyConstructorParameter::instance()) {
	_impl = new FacadeImplementation();
	_impl->_setStub(this);
}

Facade::Facade(DummyConstructorParameter* param) : ManagedObject(param) {
}

Facade::~Facade() {
}


int Facade::initializeSession() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		return method.executeWithSignedIntReturn();
	} else
		return ((FacadeImplementation*) _impl)->initializeSession();
}

int Facade::cancelSession() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		return method.executeWithSignedIntReturn();
	} else
		return ((FacadeImplementation*) _impl)->cancelSession();
}

int Facade::clearSession() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		return method.executeWithSignedIntReturn();
	} else
		return ((FacadeImplementation*) _impl)->clearSession();
}

/*
 *	FacadeImplementation
 */

FacadeImplementation::FacadeImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}


FacadeImplementation::~FacadeImplementation() {
}


void FacadeImplementation::finalize() {
}

void FacadeImplementation::_initializeImplementation() {
	_setClassHelper(FacadeHelper::instance());

	_serializationHelperMethod();
}

void FacadeImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (Facade*) stub;
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* FacadeImplementation::_getStub() {
	return _this;
}

FacadeImplementation::operator const Facade*() {
	return _this;
}

void FacadeImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void FacadeImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void FacadeImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void FacadeImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void FacadeImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void FacadeImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void FacadeImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void FacadeImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("Facade");

}

FacadeImplementation::FacadeImplementation() {
	_initializeImplementation();
	// server/zone/objects/scene/Facade.idl(55):  		Logger.setLoggingName("Facade");
	Logger::setLoggingName("Facade");
}

int FacadeImplementation::initializeSession() {
	// server/zone/objects/scene/Facade.idl(59):  		return 0;
	return 0;
}

int FacadeImplementation::cancelSession() {
	// server/zone/objects/scene/Facade.idl(63):  		return 0;
	return 0;
}

int FacadeImplementation::clearSession() {
	// server/zone/objects/scene/Facade.idl(67):  		return 0;
	return 0;
}

/*
 *	FacadeAdapter
 */

FacadeAdapter::FacadeAdapter(FacadeImplementation* obj) : ManagedObjectAdapter(obj) {
}

Packet* FacadeAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertSignedInt(initializeSession());
		break;
	case 7:
		resp->insertSignedInt(cancelSession());
		break;
	case 8:
		resp->insertSignedInt(clearSession());
		break;
	default:
		return NULL;
	}

	return resp;
}

int FacadeAdapter::initializeSession() {
	return ((FacadeImplementation*) impl)->initializeSession();
}

int FacadeAdapter::cancelSession() {
	return ((FacadeImplementation*) impl)->cancelSession();
}

int FacadeAdapter::clearSession() {
	return ((FacadeImplementation*) impl)->clearSession();
}

/*
 *	FacadeHelper
 */

FacadeHelper* FacadeHelper::staticInitializer = FacadeHelper::instance();

FacadeHelper::FacadeHelper() {
	className = "Facade";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void FacadeHelper::finalizeHelper() {
	FacadeHelper::finalize();
}

DistributedObject* FacadeHelper::instantiateObject() {
	return new Facade(DummyConstructorParameter::instance());
}

DistributedObjectServant* FacadeHelper::instantiateServant() {
	return new FacadeImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* FacadeHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new FacadeAdapter((FacadeImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

