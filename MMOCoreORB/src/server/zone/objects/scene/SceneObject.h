/*
 *	server/zone/objects/scene/SceneObject.h generated by engine3 IDL compiler 0.60
 */

#ifndef SCENEOBJECT_H_
#define SCENEOBJECT_H_

#include "engine/orb/DistributedObjectBroker.h"

class ZoneProcessServerImplementation;

class StringId;

#include "server/zone/ZoneClientSession.h"

#include "engine/core/ManagedObject.h"

#include "engine/log/Logger.h"

#include "engine/core/ManagedReference.h"

#include "engine/util/Coordinate.h"

#include "engine/util/QuadTreeEntry.h"

#include "system/io/Serializable.h"

#include "engine/lua/Lua.h"

#include "engine/lua/LuaObject.h"

#include "system/util/VectorMap.h"

#include "system/util/Quaternion.h"

#include "engine/core/ManagedReference.h"

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject : public ManagedObject {
public:
	SceneObject(LuaObject* templateData, SceneObject* parent = NULL);

	void addSerializableVariables();

	void serialize(string& data);

	void deSerialize(const string& data);

	void redeploy();

	void scheduleUndeploy();

	void undeploy();

	void removeUndeploymentEvent();

	bool isPlayer();

	bool addObject(string& slot, SceneObject* object);

	bool removeObject(string& slot);

	void create(ZoneClientSession* client);

	void destroy(ZoneClientSession* client);

	void sendTo(SceneObject* player, bool doClose = true);

	unsigned long long getObjectID();

	float getPositionX();

	float getPositionZ();

	float getPositionY();

	float getDirectionX();

	float getDirectionZ();

	float getDirectionY();

	float getDirectionW();

	unsigned int getObjectCRC();

	unsigned int getGameObjectType();

	void setPosition(float x, float z, float y);

	void setGameObjectType(unsigned int type);

	void setObjectCRC(unsigned int objCRC);

	void setParent(SceneObject* parent);

protected:
	SceneObject(DummyConstructorParameter* param);

	virtual ~SceneObject();

	friend class SceneObjectHelper;
};

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

#include "engine/core/ManagedObjectImplementation.h"

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObjectImplementation : public ManagedObjectImplementation, public QuadTreeEntry, public Logger, public Serializable {
protected:
	ZoneProcessServerImplementation* server;

	SceneObject* parent;

	VectorMap<string, SceneObject* >* children;

	unsigned int objectCRC;

	Quaternion* direction;

	string arrangementDescriptor;

	StringId* objectName;

	StringId* detailedDescription;

	unsigned int containerType;

	unsigned int containerVolumeLimit;

	unsigned int gameObjectType;

public:
	static bool registered;

	SceneObjectImplementation(LuaObject* templateData, SceneObject* parent = NULL);

	void addSerializableVariables();

	void serialize(string& data);

	void deSerialize(const string& data);

	void redeploy();

	void scheduleUndeploy();

	void undeploy();

	void removeUndeploymentEvent();

	bool isPlayer();

	virtual bool addObject(string& slot, SceneObject* object);

	virtual bool removeObject(string& slot);

	void create(ZoneClientSession* client);

	void destroy(ZoneClientSession* client);

	virtual void sendTo(SceneObject* player, bool doClose = true);

	unsigned long long getObjectID();

	float getPositionX();

	float getPositionZ();

	float getPositionY();

	float getDirectionX();

	float getDirectionZ();

	float getDirectionY();

	float getDirectionW();

	unsigned int getObjectCRC();

	unsigned int getGameObjectType();

	void setPosition(float x, float z, float y);

	void setGameObjectType(unsigned int type);

	void setObjectCRC(unsigned int objCRC);

	void setParent(SceneObject* parent);

	SceneObject* _this;

protected:
	virtual ~SceneObjectImplementation();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();
};

class SceneObjectAdapter : public ManagedObjectAdapter {
public:
	SceneObjectAdapter(SceneObjectImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void addSerializableVariables();

	void serialize(string& data);

	void deSerialize(const string& data);

	void redeploy();

	void scheduleUndeploy();

	void undeploy();

	void removeUndeploymentEvent();

	bool isPlayer();

	bool addObject(string& slot, SceneObject* object);

	bool removeObject(string& slot);

	void create(ZoneClientSession* client);

	void destroy(ZoneClientSession* client);

	void sendTo(SceneObject* player, bool doClose);

	unsigned long long getObjectID();

	float getPositionX();

	float getPositionZ();

	float getPositionY();

	float getDirectionX();

	float getDirectionZ();

	float getDirectionY();

	float getDirectionW();

	unsigned int getObjectCRC();

	unsigned int getGameObjectType();

	void setPosition(float x, float z, float y);

	void setGameObjectType(unsigned int type);

	void setObjectCRC(unsigned int objCRC);

	void setParent(SceneObject* parent);

protected:
	string _param0_serialize__string_;
	string _param0_deSerialize__string_;
	string _param0_addObject__string_SceneObject_;
	string _param0_removeObject__string_;
};

class SceneObjectHelper : public DistributedObjectClassHelper, public Singleton<SceneObjectHelper> {
	static SceneObjectHelper* staticInitializer;

public:
	SceneObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<SceneObjectHelper>;
};

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

#endif /*SCENEOBJECT_H_*/
