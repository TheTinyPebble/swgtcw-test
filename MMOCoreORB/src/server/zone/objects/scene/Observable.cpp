/*
 *	server/zone/objects/scene/Observable.cpp generated by engine3 IDL compiler 0.60
 */

#include "Observable.h"


// Imported class dependencies

#include "engine/core/ObjectUpdateToDatabaseTask.h"

/*
 *	ObservableStub
 */

Observable::Observable(DummyConstructorParameter* param) : ManagedObject(param) {
}

Observable::~Observable() {
}


void Observable::notifyObservers(unsigned int eventType, ManagedObject* arg1, long long arg2) {
	ObservableImplementation* _implementation = (ObservableImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(arg1);
		method.addSignedLongParameter(arg2);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyObservers(eventType, arg1, arg2);
}

void Observable::registerObserver(unsigned int eventType, Observer* observer) {
	ObservableImplementation* _implementation = (ObservableImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(observer);

		method.executeWithVoidReturn();
	} else
		_implementation->registerObserver(eventType, observer);
}

void Observable::dropObserver(unsigned int eventType, Observer* observer) {
	ObservableImplementation* _implementation = (ObservableImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(observer);

		method.executeWithVoidReturn();
	} else
		_implementation->dropObserver(eventType, observer);
}

int Observable::getObserverCount(unsigned int eventType) {
	ObservableImplementation* _implementation = (ObservableImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addUnsignedIntParameter(eventType);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getObserverCount(eventType);
}

DistributedObjectServant* Observable::_getImplementation() {
	return getForUpdate();}

void Observable::_setImplementation(DistributedObjectServant* servant) {
	setObject((ManagedObjectImplementation*) servant);}

/*
 *	ObservableImplementation
 */

ObservableImplementation::ObservableImplementation() : ManagedObjectImplementation() {
	_initializeImplementation();
}

ObservableImplementation::ObservableImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}


ObservableImplementation::~ObservableImplementation() {
}


void ObservableImplementation::finalize() {
}

void ObservableImplementation::_initializeImplementation() {
	_setClassHelper(ObservableHelper::instance());

	_serializationHelperMethod();
}

void ObservableImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (Observable*) stub;
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* ObservableImplementation::_getStub() {
	return _this;
}

ObservableImplementation::operator const Observable*() {
	return _this;
}

TransactionalObject* ObservableImplementation::clone() {
	return (TransactionalObject*) new ObservableImplementation(*this);
}


void ObservableImplementation::lock(bool doLock) {
}

void ObservableImplementation::lock(ManagedObject* obj) {
}

void ObservableImplementation::rlock(bool doLock) {
}

void ObservableImplementation::wlock(bool doLock) {
}

void ObservableImplementation::wlock(ManagedObject* obj) {
}

void ObservableImplementation::unlock(bool doLock) {
}

void ObservableImplementation::runlock(bool doLock) {
}

void ObservableImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("Observable");

	addSerializableVariable("observerEventMap", &observerEventMap);
}

void ObservableImplementation::notifyObservers(unsigned int eventType, ManagedObject* arg1, long long arg2) {
	// server/zone/objects/scene/Observable.idl(60):  		observerEventMap.notifyObservers(eventType, this, arg1, arg2);
	(&observerEventMap)->notifyObservers(eventType, _this, arg1, arg2);
}

void ObservableImplementation::registerObserver(unsigned int eventType, Observer* observer) {
	// server/zone/objects/scene/Observable.idl(64):  		observerEventMap.registerObserver(eventType, observer);
	(&observerEventMap)->registerObserver(eventType, observer);
}

void ObservableImplementation::dropObserver(unsigned int eventType, Observer* observer) {
	// server/zone/objects/scene/Observable.idl(68):  		observerEventMap.dropObserver(eventType, observer);
	(&observerEventMap)->dropObserver(eventType, observer);
}

int ObservableImplementation::getObserverCount(unsigned int eventType) {
	// server/zone/objects/scene/Observable.idl(72):  		return observerEventMap.getObserverCount(eventType);
	return (&observerEventMap)->getObserverCount(eventType);
}

/*
 *	ObservableAdapter
 */

ObservableAdapter::ObservableAdapter(ObservableImplementation* obj) : ManagedObjectAdapter(obj) {
}

Packet* ObservableAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		notifyObservers(inv->getUnsignedIntParameter(), (ManagedObject*) inv->getObjectParameter(), inv->getSignedLongParameter());
		break;
	case 7:
		registerObserver(inv->getUnsignedIntParameter(), (Observer*) inv->getObjectParameter());
		break;
	case 8:
		dropObserver(inv->getUnsignedIntParameter(), (Observer*) inv->getObjectParameter());
		break;
	case 9:
		resp->insertSignedInt(getObserverCount(inv->getUnsignedIntParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

void ObservableAdapter::notifyObservers(unsigned int eventType, ManagedObject* arg1, long long arg2) {
	((ObservableImplementation*) impl)->notifyObservers(eventType, arg1, arg2);
}

void ObservableAdapter::registerObserver(unsigned int eventType, Observer* observer) {
	((ObservableImplementation*) impl)->registerObserver(eventType, observer);
}

void ObservableAdapter::dropObserver(unsigned int eventType, Observer* observer) {
	((ObservableImplementation*) impl)->dropObserver(eventType, observer);
}

int ObservableAdapter::getObserverCount(unsigned int eventType) {
	return ((ObservableImplementation*) impl)->getObserverCount(eventType);
}

/*
 *	ObservableHelper
 */

ObservableHelper* ObservableHelper::staticInitializer = ObservableHelper::instance();

ObservableHelper::ObservableHelper() {
	className = "Observable";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void ObservableHelper::finalizeHelper() {
	ObservableHelper::finalize();
}

DistributedObject* ObservableHelper::instantiateObject() {
	return new Observable(DummyConstructorParameter::instance());
}

DistributedObjectServant* ObservableHelper::instantiateServant() {
	return new ObservableImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ObservableHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ObservableAdapter((ObservableImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

