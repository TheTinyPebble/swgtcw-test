/*
 *	server/zone/objects/structure/PlayerStructureComponent.h generated by engine3 IDL compiler 0.60
 */

#ifndef PLAYERSTRUCTURECOMPONENT_H_
#define PLAYERSTRUCTURECOMPONENT_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "engine/core/ManagedObject.h"

namespace server {
namespace zone {
namespace objects {
namespace structure {

class PlayerStructureComponent : public ManagedObject {
public:
	PlayerStructureComponent();

	DistributedObjectServant* _getImplementation();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	PlayerStructureComponent(DummyConstructorParameter* param);

	virtual ~PlayerStructureComponent();

	friend class PlayerStructureComponentHelper;
};

} // namespace structure
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::structure;

namespace server {
namespace zone {
namespace objects {
namespace structure {

class PlayerStructureComponentImplementation : public ManagedObjectImplementation {

public:
	PlayerStructureComponentImplementation();

	PlayerStructureComponentImplementation(DummyConstructorParameter* param);

	PlayerStructureComponent* _this;

	operator const PlayerStructureComponent*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~PlayerStructureComponentImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const String& name);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class PlayerStructureComponent;
};

class PlayerStructureComponentAdapter : public ManagedObjectAdapter {
public:
	PlayerStructureComponentAdapter(PlayerStructureComponentImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

};

class PlayerStructureComponentHelper : public DistributedObjectClassHelper, public Singleton<PlayerStructureComponentHelper> {
	static PlayerStructureComponentHelper* staticInitializer;

public:
	PlayerStructureComponentHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<PlayerStructureComponentHelper>;
};

} // namespace structure
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::structure;

#endif /*PLAYERSTRUCTURECOMPONENT_H_*/
