/*
 *	server/zone/objects/structure/building/BuildingObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "BuildingObject.h"

#include "BuildingObjectImplementation.h"

#include "cell/CellObject.h"

#include "../../scene/SceneObject.h"

#include "../../player/Player.h"

/*
 *	BuildingObjectStub
 */

BuildingObject::BuildingObject(unsigned long long objid, unsigned char buildingtype, bool staticbuilding) : SceneObject(DummyConstructorParameter::instance()) {
	_impl = new BuildingObjectImplementation(objid, buildingtype, staticbuilding);
	_impl->_setStub(this);
}

BuildingObject::BuildingObject(DummyConstructorParameter* param) : SceneObject(param) {
}

BuildingObject::~BuildingObject() {
}

void BuildingObject::serialize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->serialize();
}

void BuildingObject::deserialize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->deserialize();
}

void BuildingObject::notifyInsertToZone(SceneObject* object) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->notifyInsertToZone(object);
}

void BuildingObject::sendPermissionListTo(Player* player, const String& listname) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(player);
		method.addAsciiParameter(listname);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->sendPermissionListTo(player, listname);
}

void BuildingObject::sendConfirmDestroyTo(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->sendConfirmDestroyTo(player);
}

void BuildingObject::setPermissionsList(const String& permissionsString) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addAsciiParameter(permissionsString);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->setPermissionsList(permissionsString);
}

void BuildingObject::modifyPermissionList(Player* player, const String& listname, const String& entryname, bool add) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addObjectParameter(player);
		method.addAsciiParameter(listname);
		method.addAsciiParameter(entryname);
		method.addBooleanParameter(add);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->modifyPermissionList(player, listname, entryname, add);
}

void BuildingObject::addCell(CellObject* cell) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addObjectParameter(cell);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->addCell(cell);
}

void BuildingObject::addSceneObject(SceneObject* sceneobject) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addObjectParameter(sceneobject);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->addSceneObject(sceneobject);
}

void BuildingObject::setAttributes(String& attributeString) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addAsciiParameter(attributeString);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->setAttributes(attributeString);
}

String& BuildingObject::getAttributes() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		method.executeWithAsciiReturn(_return_getAttributes);
		return _return_getAttributes;
	} else
		return ((BuildingObjectImplementation*) _impl)->getAttributes();
}

void BuildingObject::parseItemAttributes() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->parseItemAttributes();
}

void BuildingObject::setBuildingType(unsigned char type) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addUnsignedCharParameter(type);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->setBuildingType(type);
}

unsigned char BuildingObject::getBuildingType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);

		return method.executeWithUnsignedCharReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->getBuildingType();
}

unsigned int BuildingObject::getCellCount() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->getCellCount();
}

CellObject* BuildingObject::getCell(int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addSignedIntParameter(index);

		return (CellObject*) method.executeWithObjectReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->getCell(index);
}

bool BuildingObject::containsCell(unsigned long long cellid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);
		method.addUnsignedLongParameter(cellid);

		return method.executeWithBooleanReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->containsCell(cellid);
}

bool BuildingObject::isCloningFacility() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);

		return method.executeWithBooleanReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->isCloningFacility();
}

bool BuildingObject::isOwnedBy(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->isOwnedBy(player);
}

bool BuildingObject::isOnAdminList(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->isOnAdminList(player);
}

bool BuildingObject::isOnEntryList(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->isOnEntryList(player);
}

bool BuildingObject::isOnHopperList(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->isOnHopperList(player);
}

bool BuildingObject::isOnBanList(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->isOnBanList(player);
}

void BuildingObject::setSize(float minx, float miny, float maxx, float maxy) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);
		method.addFloatParameter(minx);
		method.addFloatParameter(miny);
		method.addFloatParameter(maxx);
		method.addFloatParameter(maxy);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->setSize(minx, miny, maxx, maxy);
}

void BuildingObject::insert(QuadTreeEntry* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->insert(obj);
}

void BuildingObject::remove(QuadTreeEntry* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->remove(obj);
}

void BuildingObject::removeAll() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->removeAll();
}

bool BuildingObject::update(QuadTreeEntry* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);
		method.addObjectParameter(obj);

		return method.executeWithBooleanReturn();
	} else
		return ((BuildingObjectImplementation*) _impl)->update(obj);
}

void BuildingObject::inRange(QuadTreeEntry* obj, float range) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);
		method.addObjectParameter(obj);
		method.addFloatParameter(range);

		method.executeWithVoidReturn();
	} else
		((BuildingObjectImplementation*) _impl)->inRange(obj, range);
}

/*
 *	BuildingObjectAdapter
 */

BuildingObjectAdapter::BuildingObjectAdapter(BuildingObjectImplementation* obj) : SceneObjectAdapter(obj) {
}

Packet* BuildingObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		serialize();
		break;
	case 7:
		deserialize();
		break;
	case 8:
		notifyInsertToZone((SceneObject*) inv->getObjectParameter());
		break;
	case 9:
		sendPermissionListTo((Player*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_sendPermissionListTo__Player_String_));
		break;
	case 10:
		sendConfirmDestroyTo((Player*) inv->getObjectParameter());
		break;
	case 11:
		setPermissionsList(inv->getAsciiParameter(_param0_setPermissionsList__String_));
		break;
	case 12:
		modifyPermissionList((Player*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_modifyPermissionList__Player_String_String_bool_), inv->getAsciiParameter(_param2_modifyPermissionList__Player_String_String_bool_), inv->getBooleanParameter());
		break;
	case 13:
		addCell((CellObject*) inv->getObjectParameter());
		break;
	case 14:
		addSceneObject((SceneObject*) inv->getObjectParameter());
		break;
	case 15:
		setAttributes(inv->getAsciiParameter(_param0_setAttributes__String_));
		break;
	case 16:
		resp->insertAscii(getAttributes());
		break;
	case 17:
		parseItemAttributes();
		break;
	case 18:
		setBuildingType(inv->getUnsignedCharParameter());
		break;
	case 19:
		resp->insertByte(getBuildingType());
		break;
	case 20:
		resp->insertInt(getCellCount());
		break;
	case 21:
		resp->insertLong(getCell(inv->getSignedIntParameter())->_getObjectID());
		break;
	case 22:
		resp->insertBoolean(containsCell(inv->getUnsignedLongParameter()));
		break;
	case 23:
		resp->insertBoolean(isCloningFacility());
		break;
	case 24:
		resp->insertBoolean(isOwnedBy((Player*) inv->getObjectParameter()));
		break;
	case 25:
		resp->insertBoolean(isOnAdminList((Player*) inv->getObjectParameter()));
		break;
	case 26:
		resp->insertBoolean(isOnEntryList((Player*) inv->getObjectParameter()));
		break;
	case 27:
		resp->insertBoolean(isOnHopperList((Player*) inv->getObjectParameter()));
		break;
	case 28:
		resp->insertBoolean(isOnBanList((Player*) inv->getObjectParameter()));
		break;
	case 29:
		setSize(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter());
		break;
	case 30:
		insert((QuadTreeEntry*) inv->getObjectParameter());
		break;
	case 31:
		remove((QuadTreeEntry*) inv->getObjectParameter());
		break;
	case 32:
		removeAll();
		break;
	case 33:
		resp->insertBoolean(update((QuadTreeEntry*) inv->getObjectParameter()));
		break;
	case 34:
		inRange((QuadTreeEntry*) inv->getObjectParameter(), inv->getFloatParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void BuildingObjectAdapter::serialize() {
	return ((BuildingObjectImplementation*) impl)->serialize();
}

void BuildingObjectAdapter::deserialize() {
	return ((BuildingObjectImplementation*) impl)->deserialize();
}

void BuildingObjectAdapter::notifyInsertToZone(SceneObject* object) {
	return ((BuildingObjectImplementation*) impl)->notifyInsertToZone(object);
}

void BuildingObjectAdapter::sendPermissionListTo(Player* player, const String& listname) {
	return ((BuildingObjectImplementation*) impl)->sendPermissionListTo(player, listname);
}

void BuildingObjectAdapter::sendConfirmDestroyTo(Player* player) {
	return ((BuildingObjectImplementation*) impl)->sendConfirmDestroyTo(player);
}

void BuildingObjectAdapter::setPermissionsList(const String& permissionsString) {
	return ((BuildingObjectImplementation*) impl)->setPermissionsList(permissionsString);
}

void BuildingObjectAdapter::modifyPermissionList(Player* player, const String& listname, const String& entryname, bool add) {
	return ((BuildingObjectImplementation*) impl)->modifyPermissionList(player, listname, entryname, add);
}

void BuildingObjectAdapter::addCell(CellObject* cell) {
	return ((BuildingObjectImplementation*) impl)->addCell(cell);
}

void BuildingObjectAdapter::addSceneObject(SceneObject* sceneobject) {
	return ((BuildingObjectImplementation*) impl)->addSceneObject(sceneobject);
}

void BuildingObjectAdapter::setAttributes(String& attributeString) {
	return ((BuildingObjectImplementation*) impl)->setAttributes(attributeString);
}

String& BuildingObjectAdapter::getAttributes() {
	return ((BuildingObjectImplementation*) impl)->getAttributes();
}

void BuildingObjectAdapter::parseItemAttributes() {
	return ((BuildingObjectImplementation*) impl)->parseItemAttributes();
}

void BuildingObjectAdapter::setBuildingType(unsigned char type) {
	return ((BuildingObjectImplementation*) impl)->setBuildingType(type);
}

unsigned char BuildingObjectAdapter::getBuildingType() {
	return ((BuildingObjectImplementation*) impl)->getBuildingType();
}

unsigned int BuildingObjectAdapter::getCellCount() {
	return ((BuildingObjectImplementation*) impl)->getCellCount();
}

CellObject* BuildingObjectAdapter::getCell(int index) {
	return ((BuildingObjectImplementation*) impl)->getCell(index);
}

bool BuildingObjectAdapter::containsCell(unsigned long long cellid) {
	return ((BuildingObjectImplementation*) impl)->containsCell(cellid);
}

bool BuildingObjectAdapter::isCloningFacility() {
	return ((BuildingObjectImplementation*) impl)->isCloningFacility();
}

bool BuildingObjectAdapter::isOwnedBy(Player* player) {
	return ((BuildingObjectImplementation*) impl)->isOwnedBy(player);
}

bool BuildingObjectAdapter::isOnAdminList(Player* player) {
	return ((BuildingObjectImplementation*) impl)->isOnAdminList(player);
}

bool BuildingObjectAdapter::isOnEntryList(Player* player) {
	return ((BuildingObjectImplementation*) impl)->isOnEntryList(player);
}

bool BuildingObjectAdapter::isOnHopperList(Player* player) {
	return ((BuildingObjectImplementation*) impl)->isOnHopperList(player);
}

bool BuildingObjectAdapter::isOnBanList(Player* player) {
	return ((BuildingObjectImplementation*) impl)->isOnBanList(player);
}

void BuildingObjectAdapter::setSize(float minx, float miny, float maxx, float maxy) {
	return ((BuildingObjectImplementation*) impl)->setSize(minx, miny, maxx, maxy);
}

void BuildingObjectAdapter::insert(QuadTreeEntry* obj) {
	return ((BuildingObjectImplementation*) impl)->insert(obj);
}

void BuildingObjectAdapter::remove(QuadTreeEntry* obj) {
	return ((BuildingObjectImplementation*) impl)->remove(obj);
}

void BuildingObjectAdapter::removeAll() {
	return ((BuildingObjectImplementation*) impl)->removeAll();
}

bool BuildingObjectAdapter::update(QuadTreeEntry* obj) {
	return ((BuildingObjectImplementation*) impl)->update(obj);
}

void BuildingObjectAdapter::inRange(QuadTreeEntry* obj, float range) {
	return ((BuildingObjectImplementation*) impl)->inRange(obj, range);
}

/*
 *	BuildingObjectHelper
 */

BuildingObjectHelper* BuildingObjectHelper::staticInitializer = BuildingObjectHelper::instance();

BuildingObjectHelper::BuildingObjectHelper() {
	className = "BuildingObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void BuildingObjectHelper::finalizeHelper() {
	BuildingObjectHelper::finalize();
}

DistributedObject* BuildingObjectHelper::instantiateObject() {
	return new BuildingObject(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* BuildingObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new BuildingObjectAdapter((BuildingObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	BuildingObjectServant
 */

BuildingObjectServant::BuildingObjectServant(unsigned long long objid, int type) : SceneObjectImplementation(objid, type) {
	_classHelper = BuildingObjectHelper::instance();
}

BuildingObjectServant::~BuildingObjectServant() {
}

void BuildingObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (BuildingObject*) stub;
	SceneObjectServant::_setStub(stub);
}

DistributedObjectStub* BuildingObjectServant::_getStub() {
	return _this;
}

