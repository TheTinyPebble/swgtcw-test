/*
 *	server/zone/objects/structure/installation/InstallationObject.h generated by engine3 IDL compiler 0.55
 */

#ifndef INSTALLATIONOBJECT_H_
#define INSTALLATIONOBJECT_H_

#include "engine/orb/DistributedObjectBroker.h"

class TangibleObject;

class Player;

class InstallationDeed;

#include "../../tangible/TangibleObject.h"

class InstallationObject : public TangibleObject {
public:
	InstallationObject(unsigned long long oid);

	InstallationObject(unsigned long long oid, InstallationDeed* deed);

	void serialize();

	void deserialize();

	void sendTo(Player* player, bool doClose = true);

	void sendPermissionListTo(Player* player, const String& listname);

	void sendCustomNamePromptTo(Player* player);

	void updateCustomName(Player* player, const String& value);

	void sendStatusTo(Player* player);

	void sendManageMaintenanceTo(Player* player);

	void sendManagePowerTo(Player* player);

	void sendConfirmDestroyTo(Player* player);

	void sendDestroyCodeTo(Player* player);

	bool start(Player* player);

	void shutdown(unsigned char errorcode = 0, bool sendmail = true);

	bool destroyStructure(Player* player);

	InstallationDeed* redeed(Player* player);

	void modifyPermissionList(Player* player, const String& listname, const String& entryname, bool add = true);

	void pollStatus(bool reschedule = true);

	void consumeMaintenance();

	void consumePower();

	void payTaxes();

	void depositMaintenance(Player* player, unsigned int amount);

	void depositPower(Player* player, unsigned int amount);

	void addOperator(Player* player);

	void removeOperator(Player* player);

	bool isValidDestroyCode(unsigned int code);

	void setStructureID(unsigned int structureid);

	void setDeedCRC(unsigned int crc);

	void setDeedStfName(const String& stfname);

	void setObjectFile(const String& objectfile);

	void setReclaimFee(unsigned int fee);

	void setPowerRate(float rate);

	void setMaintenancePool(float maint);

	void setMaintenanceRate(float rate);

	void setPowerReserves(float pow);

	void setOperating(bool state);

	void setPublicStructure(bool status);

	void setLotSize(unsigned char size);

	void setPermissionsFromString(const String& permissionsstring);

	unsigned int getStructureID();

	unsigned int getDeedCRC();

	String& getDeedStfName();

	String& getObjectFile();

	unsigned int getReclaimFee();

	float getMaintenancePool();

	float getMaintenanceRate();

	float getPowerReserves();

	float getPowerRate();

	unsigned int getDestroyCode();

	unsigned char getLotSize();

	String& getPermissionsString();

	unsigned int getNewUpdateCounter(unsigned int update);

	unsigned int getUpdateCounter();

	bool isRedeedable();

	bool isOperating();

	bool isHopperEmpty();

	bool isHopperFull();

	bool isOutOfMaintenance();

	bool isOutOfPower();

	bool isPublicStructure();

	bool isOnAdminList(Player* player);

	bool isOnHopperList(Player* player);

	bool isHarvester();

	bool isGenerator();

	bool isFactory();

	bool isTurret();

	bool isMinefield();

	void setBaseExtractionRate(float rate);

	void setHopperSizeMax(float maxsize);

	void setHarvesterType(unsigned char type);

	unsigned long long getSelectedResourceID();

	float getDisplayedBaseExtractionRate();

	float getBaseExtractionRate();

	float getExtractionRate();

	float getHopperSize();

	float getHopperSizeMax();

	unsigned int getHopperListSize();

	unsigned long long getHopperItemID(int index);

	float getHopperItemQuantity(int index);

	float getHopperItemQuantity(unsigned long long resourceid);

	int getHopperItemIndex(unsigned long long resourceid);

protected:
	InstallationObject(DummyConstructorParameter* param);

	virtual ~InstallationObject();

	String _return_getDeedStfName;
	String _return_getObjectFile;
	String _return_getPermissionsString;

	friend class InstallationObjectHelper;
};

class InstallationObjectImplementation;

class InstallationObjectAdapter : public TangibleObjectAdapter {
public:
	InstallationObjectAdapter(InstallationObjectImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void serialize();

	void deserialize();

	void sendTo(Player* player, bool doClose);

	void sendPermissionListTo(Player* player, const String& listname);

	void sendCustomNamePromptTo(Player* player);

	void updateCustomName(Player* player, const String& value);

	void sendStatusTo(Player* player);

	void sendManageMaintenanceTo(Player* player);

	void sendManagePowerTo(Player* player);

	void sendConfirmDestroyTo(Player* player);

	void sendDestroyCodeTo(Player* player);

	bool start(Player* player);

	void shutdown(unsigned char errorcode, bool sendmail);

	bool destroyStructure(Player* player);

	InstallationDeed* redeed(Player* player);

	void modifyPermissionList(Player* player, const String& listname, const String& entryname, bool add);

	void pollStatus(bool reschedule);

	void consumeMaintenance();

	void consumePower();

	void payTaxes();

	void depositMaintenance(Player* player, unsigned int amount);

	void depositPower(Player* player, unsigned int amount);

	void addOperator(Player* player);

	void removeOperator(Player* player);

	bool isValidDestroyCode(unsigned int code);

	void setStructureID(unsigned int structureid);

	void setDeedCRC(unsigned int crc);

	void setDeedStfName(const String& stfname);

	void setObjectFile(const String& objectfile);

	void setReclaimFee(unsigned int fee);

	void setPowerRate(float rate);

	void setMaintenancePool(float maint);

	void setMaintenanceRate(float rate);

	void setPowerReserves(float pow);

	void setOperating(bool state);

	void setPublicStructure(bool status);

	void setLotSize(unsigned char size);

	void setPermissionsFromString(const String& permissionsstring);

	unsigned int getStructureID();

	unsigned int getDeedCRC();

	String& getDeedStfName();

	String& getObjectFile();

	unsigned int getReclaimFee();

	float getMaintenancePool();

	float getMaintenanceRate();

	float getPowerReserves();

	float getPowerRate();

	unsigned int getDestroyCode();

	unsigned char getLotSize();

	String& getPermissionsString();

	unsigned int getNewUpdateCounter(unsigned int update);

	unsigned int getUpdateCounter();

	bool isRedeedable();

	bool isOperating();

	bool isHopperEmpty();

	bool isHopperFull();

	bool isOutOfMaintenance();

	bool isOutOfPower();

	bool isPublicStructure();

	bool isOnAdminList(Player* player);

	bool isOnHopperList(Player* player);

	bool isHarvester();

	bool isGenerator();

	bool isFactory();

	bool isTurret();

	bool isMinefield();

	void setBaseExtractionRate(float rate);

	void setHopperSizeMax(float maxsize);

	void setHarvesterType(unsigned char type);

	unsigned long long getSelectedResourceID();

	float getDisplayedBaseExtractionRate();

	float getBaseExtractionRate();

	float getExtractionRate();

	float getHopperSize();

	float getHopperSizeMax();

	unsigned int getHopperListSize();

	unsigned long long getHopperItemID(int index);

	float getHopperItemQuantity(int index);

	float getHopperItemQuantity(unsigned long long resourceid);

	int getHopperItemIndex(unsigned long long resourceid);

protected:
	String _param1_sendPermissionListTo__Player_String_;
	String _param1_updateCustomName__Player_String_;
	String _param1_modifyPermissionList__Player_String_String_bool_;
	String _param2_modifyPermissionList__Player_String_String_bool_;
	String _param0_setDeedStfName__String_;
	String _param0_setObjectFile__String_;
	String _param0_setPermissionsFromString__String_;
};

class InstallationObjectHelper : public DistributedObjectClassHelper, public Singleton<InstallationObjectHelper> {
	static InstallationObjectHelper* staticInitializer;

public:
	InstallationObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<InstallationObjectHelper>;
};

#include "../../tangible/TangibleObjectImplementation.h"

class InstallationObjectServant : public TangibleObjectImplementation {
public:
	InstallationObject* _this;

public:
	InstallationObjectServant(unsigned long long oid, int type);
	virtual ~InstallationObjectServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*INSTALLATIONOBJECT_H_*/
