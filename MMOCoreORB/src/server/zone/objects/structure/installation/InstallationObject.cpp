/*
 *	server/zone/objects/structure/installation/InstallationObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "InstallationObject.h"

#include "InstallationObjectImplementation.h"

#include "../../tangible/TangibleObject.h"

#include "../../player/Player.h"

#include "../../tangible/deed/installationdeed/InstallationDeed.h"

/*
 *	InstallationObjectStub
 */

InstallationObject::InstallationObject(unsigned long long oid) : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new InstallationObjectImplementation(oid);
	_impl->_setStub(this);
}

InstallationObject::InstallationObject(unsigned long long oid, InstallationDeed* deed) : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new InstallationObjectImplementation(oid, deed);
	_impl->_setStub(this);
}

InstallationObject::InstallationObject(DummyConstructorParameter* param) : TangibleObject(param) {
}

InstallationObject::~InstallationObject() {
}

void InstallationObject::serialize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->serialize();
}

void InstallationObject::deserialize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->deserialize();
}

void InstallationObject::sendTo(Player* player, bool doClose) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(player);
		method.addBooleanParameter(doClose);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->sendTo(player, doClose);
}

void InstallationObject::sendPermissionListTo(Player* player, const String& listname) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(player);
		method.addAsciiParameter(listname);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->sendPermissionListTo(player, listname);
}

void InstallationObject::sendCustomNamePromptTo(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->sendCustomNamePromptTo(player);
}

void InstallationObject::updateCustomName(Player* player, const String& value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addObjectParameter(player);
		method.addAsciiParameter(value);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->updateCustomName(player, value);
}

void InstallationObject::sendStatusTo(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->sendStatusTo(player);
}

void InstallationObject::sendManageMaintenanceTo(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->sendManageMaintenanceTo(player);
}

void InstallationObject::sendManagePowerTo(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->sendManagePowerTo(player);
}

void InstallationObject::sendConfirmDestroyTo(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->sendConfirmDestroyTo(player);
}

void InstallationObject::sendDestroyCodeTo(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->sendDestroyCodeTo(player);
}

bool InstallationObject::start(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->start(player);
}

void InstallationObject::shutdown(unsigned char errorcode, bool sendmail) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addUnsignedCharParameter(errorcode);
		method.addBooleanParameter(sendmail);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->shutdown(errorcode, sendmail);
}

bool InstallationObject::destroyStructure(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->destroyStructure(player);
}

InstallationDeed* InstallationObject::redeed(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addObjectParameter(player);

		return (InstallationDeed*) method.executeWithObjectReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->redeed(player);
}

void InstallationObject::modifyPermissionList(Player* player, const String& listname, const String& entryname, bool add) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addObjectParameter(player);
		method.addAsciiParameter(listname);
		method.addAsciiParameter(entryname);
		method.addBooleanParameter(add);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->modifyPermissionList(player, listname, entryname, add);
}

void InstallationObject::pollStatus(bool reschedule) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);
		method.addBooleanParameter(reschedule);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->pollStatus(reschedule);
}

void InstallationObject::consumeMaintenance() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->consumeMaintenance();
}

void InstallationObject::consumePower() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->consumePower();
}

void InstallationObject::payTaxes() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->payTaxes();
}

void InstallationObject::depositMaintenance(Player* player, unsigned int amount) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(amount);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->depositMaintenance(player, amount);
}

void InstallationObject::depositPower(Player* player, unsigned int amount) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(amount);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->depositPower(player, amount);
}

void InstallationObject::addOperator(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->addOperator(player);
}

void InstallationObject::removeOperator(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->removeOperator(player);
}

bool InstallationObject::isValidDestroyCode(unsigned int code) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);
		method.addUnsignedIntParameter(code);

		return method.executeWithBooleanReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->isValidDestroyCode(code);
}

void InstallationObject::setStructureID(unsigned int structureid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);
		method.addUnsignedIntParameter(structureid);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->setStructureID(structureid);
}

void InstallationObject::setDeedCRC(unsigned int crc) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);
		method.addUnsignedIntParameter(crc);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->setDeedCRC(crc);
}

void InstallationObject::setDeedStfName(const String& stfname) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);
		method.addAsciiParameter(stfname);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->setDeedStfName(stfname);
}

void InstallationObject::setDeedCustomName(const UnicodeString& customname) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);
		method.addUnicodeParameter(customname);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->setDeedCustomName(customname);
}

void InstallationObject::setConstructionObjectCRC(unsigned int crc) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);
		method.addUnsignedIntParameter(crc);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->setConstructionObjectCRC(crc);
}

void InstallationObject::setObjectFile(const String& objectfile) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 36);
		method.addAsciiParameter(objectfile);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->setObjectFile(objectfile);
}

void InstallationObject::setPowerRate(float rate) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 37);
		method.addFloatParameter(rate);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->setPowerRate(rate);
}

void InstallationObject::setMaintenancePool(float maint) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 38);
		method.addFloatParameter(maint);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->setMaintenancePool(maint);
}

void InstallationObject::setMaintenanceRate(float rate) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 39);
		method.addFloatParameter(rate);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->setMaintenanceRate(rate);
}

void InstallationObject::setPowerReserves(float pow) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 40);
		method.addFloatParameter(pow);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->setPowerReserves(pow);
}

void InstallationObject::setOperating(bool state) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 41);
		method.addBooleanParameter(state);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->setOperating(state);
}

void InstallationObject::setPublicStructure(bool status) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 42);
		method.addBooleanParameter(status);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->setPublicStructure(status);
}

void InstallationObject::setLotSize(unsigned char size) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 43);
		method.addUnsignedCharParameter(size);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->setLotSize(size);
}

void InstallationObject::setPermissionsFromString(const String& permissionsstring) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 44);
		method.addAsciiParameter(permissionsstring);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->setPermissionsFromString(permissionsstring);
}

unsigned int InstallationObject::getStructureID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 45);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getStructureID();
}

unsigned int InstallationObject::getDeedCRC() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 46);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getDeedCRC();
}

String& InstallationObject::getDeedStfName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 47);

		method.executeWithAsciiReturn(_return_getDeedStfName);
		return _return_getDeedStfName;
	} else
		return ((InstallationObjectImplementation*) _impl)->getDeedStfName();
}

UnicodeString& InstallationObject::getDeedCustomName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 48);

		method.executeWithUnicodeReturn(_return_getDeedCustomName);
		return _return_getDeedCustomName;
	} else
		return ((InstallationObjectImplementation*) _impl)->getDeedCustomName();
}

unsigned int InstallationObject::getConstructionObjectCRC() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 49);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getConstructionObjectCRC();
}

String& InstallationObject::getObjectFile() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 50);

		method.executeWithAsciiReturn(_return_getObjectFile);
		return _return_getObjectFile;
	} else
		return ((InstallationObjectImplementation*) _impl)->getObjectFile();
}

unsigned int InstallationObject::getReclaimFee() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 51);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getReclaimFee();
}

float InstallationObject::getMaintenancePool() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 52);

		return method.executeWithFloatReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getMaintenancePool();
}

float InstallationObject::getMaintenanceRate() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 53);

		return method.executeWithFloatReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getMaintenanceRate();
}

float InstallationObject::getPowerReserves() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 54);

		return method.executeWithFloatReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getPowerReserves();
}

float InstallationObject::getPowerRate() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 55);

		return method.executeWithFloatReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getPowerRate();
}

unsigned int InstallationObject::getDestroyCode() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 56);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getDestroyCode();
}

unsigned char InstallationObject::getLotSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 57);

		return method.executeWithUnsignedCharReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getLotSize();
}

String& InstallationObject::getPermissionsString() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 58);

		method.executeWithAsciiReturn(_return_getPermissionsString);
		return _return_getPermissionsString;
	} else
		return ((InstallationObjectImplementation*) _impl)->getPermissionsString();
}

unsigned int InstallationObject::getNewUpdateCounter(unsigned int update) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 59);
		method.addUnsignedIntParameter(update);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getNewUpdateCounter(update);
}

unsigned int InstallationObject::getUpdateCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 60);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getUpdateCounter();
}

bool InstallationObject::isRedeedable() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 61);

		return method.executeWithBooleanReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->isRedeedable();
}

bool InstallationObject::isOperating() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 62);

		return method.executeWithBooleanReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->isOperating();
}

bool InstallationObject::isHopperEmpty() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 63);

		return method.executeWithBooleanReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->isHopperEmpty();
}

bool InstallationObject::isHopperFull() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 64);

		return method.executeWithBooleanReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->isHopperFull();
}

bool InstallationObject::isOutOfMaintenance() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 65);

		return method.executeWithBooleanReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->isOutOfMaintenance();
}

bool InstallationObject::isOutOfPower() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 66);

		return method.executeWithBooleanReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->isOutOfPower();
}

bool InstallationObject::isPublicStructure() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 67);

		return method.executeWithBooleanReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->isPublicStructure();
}

bool InstallationObject::isOnAdminList(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 68);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->isOnAdminList(player);
}

bool InstallationObject::isOnHopperList(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 69);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->isOnHopperList(player);
}

bool InstallationObject::isHarvester() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 70);

		return method.executeWithBooleanReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->isHarvester();
}

bool InstallationObject::isGenerator() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 71);

		return method.executeWithBooleanReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->isGenerator();
}

bool InstallationObject::isFactory() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 72);

		return method.executeWithBooleanReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->isFactory();
}

bool InstallationObject::isTurret() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 73);

		return method.executeWithBooleanReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->isTurret();
}

bool InstallationObject::isMinefield() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 74);

		return method.executeWithBooleanReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->isMinefield();
}

void InstallationObject::setBaseExtractionRate(float rate) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 75);
		method.addFloatParameter(rate);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->setBaseExtractionRate(rate);
}

void InstallationObject::setHopperSizeMax(float maxsize) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 76);
		method.addFloatParameter(maxsize);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->setHopperSizeMax(maxsize);
}

void InstallationObject::setHarvesterType(unsigned char type) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 77);
		method.addUnsignedCharParameter(type);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->setHarvesterType(type);
}

unsigned long long InstallationObject::getSelectedResourceID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 78);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getSelectedResourceID();
}

float InstallationObject::getDisplayedBaseExtractionRate() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 79);

		return method.executeWithFloatReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getDisplayedBaseExtractionRate();
}

float InstallationObject::getBaseExtractionRate() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 80);

		return method.executeWithFloatReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getBaseExtractionRate();
}

float InstallationObject::getExtractionRate() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 81);

		return method.executeWithFloatReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getExtractionRate();
}

float InstallationObject::getHopperSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 82);

		return method.executeWithFloatReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getHopperSize();
}

float InstallationObject::getHopperSizeMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 83);

		return method.executeWithFloatReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getHopperSizeMax();
}

unsigned int InstallationObject::getHopperListSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 84);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getHopperListSize();
}

unsigned long long InstallationObject::getHopperItemID(int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 85);
		method.addSignedIntParameter(index);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getHopperItemID(index);
}

float InstallationObject::getHopperItemQuantity(int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 86);
		method.addSignedIntParameter(index);

		return method.executeWithFloatReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getHopperItemQuantity(index);
}

float InstallationObject::getHopperItemQuantity(unsigned long long resourceid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 87);
		method.addUnsignedLongParameter(resourceid);

		return method.executeWithFloatReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getHopperItemQuantity(resourceid);
}

int InstallationObject::getHopperItemIndex(unsigned long long resourceid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 88);
		method.addUnsignedLongParameter(resourceid);

		return method.executeWithSignedIntReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getHopperItemIndex(resourceid);
}

/*
 *	InstallationObjectAdapter
 */

InstallationObjectAdapter::InstallationObjectAdapter(InstallationObjectImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* InstallationObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		serialize();
		break;
	case 7:
		deserialize();
		break;
	case 8:
		sendTo((Player*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 9:
		sendPermissionListTo((Player*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_sendPermissionListTo__Player_String_));
		break;
	case 10:
		sendCustomNamePromptTo((Player*) inv->getObjectParameter());
		break;
	case 11:
		updateCustomName((Player*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_updateCustomName__Player_String_));
		break;
	case 12:
		sendStatusTo((Player*) inv->getObjectParameter());
		break;
	case 13:
		sendManageMaintenanceTo((Player*) inv->getObjectParameter());
		break;
	case 14:
		sendManagePowerTo((Player*) inv->getObjectParameter());
		break;
	case 15:
		sendConfirmDestroyTo((Player*) inv->getObjectParameter());
		break;
	case 16:
		sendDestroyCodeTo((Player*) inv->getObjectParameter());
		break;
	case 17:
		resp->insertBoolean(start((Player*) inv->getObjectParameter()));
		break;
	case 18:
		shutdown(inv->getUnsignedCharParameter(), inv->getBooleanParameter());
		break;
	case 19:
		resp->insertBoolean(destroyStructure((Player*) inv->getObjectParameter()));
		break;
	case 20:
		resp->insertLong(redeed((Player*) inv->getObjectParameter())->_getObjectID());
		break;
	case 21:
		modifyPermissionList((Player*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_modifyPermissionList__Player_String_String_bool_), inv->getAsciiParameter(_param2_modifyPermissionList__Player_String_String_bool_), inv->getBooleanParameter());
		break;
	case 22:
		pollStatus(inv->getBooleanParameter());
		break;
	case 23:
		consumeMaintenance();
		break;
	case 24:
		consumePower();
		break;
	case 25:
		payTaxes();
		break;
	case 26:
		depositMaintenance((Player*) inv->getObjectParameter(), inv->getUnsignedIntParameter());
		break;
	case 27:
		depositPower((Player*) inv->getObjectParameter(), inv->getUnsignedIntParameter());
		break;
	case 28:
		addOperator((Player*) inv->getObjectParameter());
		break;
	case 29:
		removeOperator((Player*) inv->getObjectParameter());
		break;
	case 30:
		resp->insertBoolean(isValidDestroyCode(inv->getUnsignedIntParameter()));
		break;
	case 31:
		setStructureID(inv->getUnsignedIntParameter());
		break;
	case 32:
		setDeedCRC(inv->getUnsignedIntParameter());
		break;
	case 33:
		setDeedStfName(inv->getAsciiParameter(_param0_setDeedStfName__String_));
		break;
	case 34:
		setDeedCustomName(inv->getUnicodeParameter(_param0_setDeedCustomName__UnicodeString_));
		break;
	case 35:
		setConstructionObjectCRC(inv->getUnsignedIntParameter());
		break;
	case 36:
		setObjectFile(inv->getAsciiParameter(_param0_setObjectFile__String_));
		break;
	case 37:
		setPowerRate(inv->getFloatParameter());
		break;
	case 38:
		setMaintenancePool(inv->getFloatParameter());
		break;
	case 39:
		setMaintenanceRate(inv->getFloatParameter());
		break;
	case 40:
		setPowerReserves(inv->getFloatParameter());
		break;
	case 41:
		setOperating(inv->getBooleanParameter());
		break;
	case 42:
		setPublicStructure(inv->getBooleanParameter());
		break;
	case 43:
		setLotSize(inv->getUnsignedCharParameter());
		break;
	case 44:
		setPermissionsFromString(inv->getAsciiParameter(_param0_setPermissionsFromString__String_));
		break;
	case 45:
		resp->insertInt(getStructureID());
		break;
	case 46:
		resp->insertInt(getDeedCRC());
		break;
	case 47:
		resp->insertAscii(getDeedStfName());
		break;
	case 48:
		resp->insertUnicode(getDeedCustomName());
		break;
	case 49:
		resp->insertInt(getConstructionObjectCRC());
		break;
	case 50:
		resp->insertAscii(getObjectFile());
		break;
	case 51:
		resp->insertInt(getReclaimFee());
		break;
	case 52:
		resp->insertFloat(getMaintenancePool());
		break;
	case 53:
		resp->insertFloat(getMaintenanceRate());
		break;
	case 54:
		resp->insertFloat(getPowerReserves());
		break;
	case 55:
		resp->insertFloat(getPowerRate());
		break;
	case 56:
		resp->insertInt(getDestroyCode());
		break;
	case 57:
		resp->insertByte(getLotSize());
		break;
	case 58:
		resp->insertAscii(getPermissionsString());
		break;
	case 59:
		resp->insertInt(getNewUpdateCounter(inv->getUnsignedIntParameter()));
		break;
	case 60:
		resp->insertInt(getUpdateCounter());
		break;
	case 61:
		resp->insertBoolean(isRedeedable());
		break;
	case 62:
		resp->insertBoolean(isOperating());
		break;
	case 63:
		resp->insertBoolean(isHopperEmpty());
		break;
	case 64:
		resp->insertBoolean(isHopperFull());
		break;
	case 65:
		resp->insertBoolean(isOutOfMaintenance());
		break;
	case 66:
		resp->insertBoolean(isOutOfPower());
		break;
	case 67:
		resp->insertBoolean(isPublicStructure());
		break;
	case 68:
		resp->insertBoolean(isOnAdminList((Player*) inv->getObjectParameter()));
		break;
	case 69:
		resp->insertBoolean(isOnHopperList((Player*) inv->getObjectParameter()));
		break;
	case 70:
		resp->insertBoolean(isHarvester());
		break;
	case 71:
		resp->insertBoolean(isGenerator());
		break;
	case 72:
		resp->insertBoolean(isFactory());
		break;
	case 73:
		resp->insertBoolean(isTurret());
		break;
	case 74:
		resp->insertBoolean(isMinefield());
		break;
	case 75:
		setBaseExtractionRate(inv->getFloatParameter());
		break;
	case 76:
		setHopperSizeMax(inv->getFloatParameter());
		break;
	case 77:
		setHarvesterType(inv->getUnsignedCharParameter());
		break;
	case 78:
		resp->insertLong(getSelectedResourceID());
		break;
	case 79:
		resp->insertFloat(getDisplayedBaseExtractionRate());
		break;
	case 80:
		resp->insertFloat(getBaseExtractionRate());
		break;
	case 81:
		resp->insertFloat(getExtractionRate());
		break;
	case 82:
		resp->insertFloat(getHopperSize());
		break;
	case 83:
		resp->insertFloat(getHopperSizeMax());
		break;
	case 84:
		resp->insertInt(getHopperListSize());
		break;
	case 85:
		resp->insertLong(getHopperItemID(inv->getSignedIntParameter()));
		break;
	case 86:
		resp->insertFloat(getHopperItemQuantity(inv->getSignedIntParameter()));
		break;
	case 87:
		resp->insertFloat(getHopperItemQuantity(inv->getUnsignedLongParameter()));
		break;
	case 88:
		resp->insertSignedInt(getHopperItemIndex(inv->getUnsignedLongParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

void InstallationObjectAdapter::serialize() {
	return ((InstallationObjectImplementation*) impl)->serialize();
}

void InstallationObjectAdapter::deserialize() {
	return ((InstallationObjectImplementation*) impl)->deserialize();
}

void InstallationObjectAdapter::sendTo(Player* player, bool doClose) {
	return ((InstallationObjectImplementation*) impl)->sendTo(player, doClose);
}

void InstallationObjectAdapter::sendPermissionListTo(Player* player, const String& listname) {
	return ((InstallationObjectImplementation*) impl)->sendPermissionListTo(player, listname);
}

void InstallationObjectAdapter::sendCustomNamePromptTo(Player* player) {
	return ((InstallationObjectImplementation*) impl)->sendCustomNamePromptTo(player);
}

void InstallationObjectAdapter::updateCustomName(Player* player, const String& value) {
	return ((InstallationObjectImplementation*) impl)->updateCustomName(player, value);
}

void InstallationObjectAdapter::sendStatusTo(Player* player) {
	return ((InstallationObjectImplementation*) impl)->sendStatusTo(player);
}

void InstallationObjectAdapter::sendManageMaintenanceTo(Player* player) {
	return ((InstallationObjectImplementation*) impl)->sendManageMaintenanceTo(player);
}

void InstallationObjectAdapter::sendManagePowerTo(Player* player) {
	return ((InstallationObjectImplementation*) impl)->sendManagePowerTo(player);
}

void InstallationObjectAdapter::sendConfirmDestroyTo(Player* player) {
	return ((InstallationObjectImplementation*) impl)->sendConfirmDestroyTo(player);
}

void InstallationObjectAdapter::sendDestroyCodeTo(Player* player) {
	return ((InstallationObjectImplementation*) impl)->sendDestroyCodeTo(player);
}

bool InstallationObjectAdapter::start(Player* player) {
	return ((InstallationObjectImplementation*) impl)->start(player);
}

void InstallationObjectAdapter::shutdown(unsigned char errorcode, bool sendmail) {
	return ((InstallationObjectImplementation*) impl)->shutdown(errorcode, sendmail);
}

bool InstallationObjectAdapter::destroyStructure(Player* player) {
	return ((InstallationObjectImplementation*) impl)->destroyStructure(player);
}

InstallationDeed* InstallationObjectAdapter::redeed(Player* player) {
	return ((InstallationObjectImplementation*) impl)->redeed(player);
}

void InstallationObjectAdapter::modifyPermissionList(Player* player, const String& listname, const String& entryname, bool add) {
	return ((InstallationObjectImplementation*) impl)->modifyPermissionList(player, listname, entryname, add);
}

void InstallationObjectAdapter::pollStatus(bool reschedule) {
	return ((InstallationObjectImplementation*) impl)->pollStatus(reschedule);
}

void InstallationObjectAdapter::consumeMaintenance() {
	return ((InstallationObjectImplementation*) impl)->consumeMaintenance();
}

void InstallationObjectAdapter::consumePower() {
	return ((InstallationObjectImplementation*) impl)->consumePower();
}

void InstallationObjectAdapter::payTaxes() {
	return ((InstallationObjectImplementation*) impl)->payTaxes();
}

void InstallationObjectAdapter::depositMaintenance(Player* player, unsigned int amount) {
	return ((InstallationObjectImplementation*) impl)->depositMaintenance(player, amount);
}

void InstallationObjectAdapter::depositPower(Player* player, unsigned int amount) {
	return ((InstallationObjectImplementation*) impl)->depositPower(player, amount);
}

void InstallationObjectAdapter::addOperator(Player* player) {
	return ((InstallationObjectImplementation*) impl)->addOperator(player);
}

void InstallationObjectAdapter::removeOperator(Player* player) {
	return ((InstallationObjectImplementation*) impl)->removeOperator(player);
}

bool InstallationObjectAdapter::isValidDestroyCode(unsigned int code) {
	return ((InstallationObjectImplementation*) impl)->isValidDestroyCode(code);
}

void InstallationObjectAdapter::setStructureID(unsigned int structureid) {
	return ((InstallationObjectImplementation*) impl)->setStructureID(structureid);
}

void InstallationObjectAdapter::setDeedCRC(unsigned int crc) {
	return ((InstallationObjectImplementation*) impl)->setDeedCRC(crc);
}

void InstallationObjectAdapter::setDeedStfName(const String& stfname) {
	return ((InstallationObjectImplementation*) impl)->setDeedStfName(stfname);
}

void InstallationObjectAdapter::setDeedCustomName(const UnicodeString& customname) {
	return ((InstallationObjectImplementation*) impl)->setDeedCustomName(customname);
}

void InstallationObjectAdapter::setConstructionObjectCRC(unsigned int crc) {
	return ((InstallationObjectImplementation*) impl)->setConstructionObjectCRC(crc);
}

void InstallationObjectAdapter::setObjectFile(const String& objectfile) {
	return ((InstallationObjectImplementation*) impl)->setObjectFile(objectfile);
}

void InstallationObjectAdapter::setPowerRate(float rate) {
	return ((InstallationObjectImplementation*) impl)->setPowerRate(rate);
}

void InstallationObjectAdapter::setMaintenancePool(float maint) {
	return ((InstallationObjectImplementation*) impl)->setMaintenancePool(maint);
}

void InstallationObjectAdapter::setMaintenanceRate(float rate) {
	return ((InstallationObjectImplementation*) impl)->setMaintenanceRate(rate);
}

void InstallationObjectAdapter::setPowerReserves(float pow) {
	return ((InstallationObjectImplementation*) impl)->setPowerReserves(pow);
}

void InstallationObjectAdapter::setOperating(bool state) {
	return ((InstallationObjectImplementation*) impl)->setOperating(state);
}

void InstallationObjectAdapter::setPublicStructure(bool status) {
	return ((InstallationObjectImplementation*) impl)->setPublicStructure(status);
}

void InstallationObjectAdapter::setLotSize(unsigned char size) {
	return ((InstallationObjectImplementation*) impl)->setLotSize(size);
}

void InstallationObjectAdapter::setPermissionsFromString(const String& permissionsstring) {
	return ((InstallationObjectImplementation*) impl)->setPermissionsFromString(permissionsstring);
}

unsigned int InstallationObjectAdapter::getStructureID() {
	return ((InstallationObjectImplementation*) impl)->getStructureID();
}

unsigned int InstallationObjectAdapter::getDeedCRC() {
	return ((InstallationObjectImplementation*) impl)->getDeedCRC();
}

String& InstallationObjectAdapter::getDeedStfName() {
	return ((InstallationObjectImplementation*) impl)->getDeedStfName();
}

UnicodeString& InstallationObjectAdapter::getDeedCustomName() {
	return ((InstallationObjectImplementation*) impl)->getDeedCustomName();
}

unsigned int InstallationObjectAdapter::getConstructionObjectCRC() {
	return ((InstallationObjectImplementation*) impl)->getConstructionObjectCRC();
}

String& InstallationObjectAdapter::getObjectFile() {
	return ((InstallationObjectImplementation*) impl)->getObjectFile();
}

unsigned int InstallationObjectAdapter::getReclaimFee() {
	return ((InstallationObjectImplementation*) impl)->getReclaimFee();
}

float InstallationObjectAdapter::getMaintenancePool() {
	return ((InstallationObjectImplementation*) impl)->getMaintenancePool();
}

float InstallationObjectAdapter::getMaintenanceRate() {
	return ((InstallationObjectImplementation*) impl)->getMaintenanceRate();
}

float InstallationObjectAdapter::getPowerReserves() {
	return ((InstallationObjectImplementation*) impl)->getPowerReserves();
}

float InstallationObjectAdapter::getPowerRate() {
	return ((InstallationObjectImplementation*) impl)->getPowerRate();
}

unsigned int InstallationObjectAdapter::getDestroyCode() {
	return ((InstallationObjectImplementation*) impl)->getDestroyCode();
}

unsigned char InstallationObjectAdapter::getLotSize() {
	return ((InstallationObjectImplementation*) impl)->getLotSize();
}

String& InstallationObjectAdapter::getPermissionsString() {
	return ((InstallationObjectImplementation*) impl)->getPermissionsString();
}

unsigned int InstallationObjectAdapter::getNewUpdateCounter(unsigned int update) {
	return ((InstallationObjectImplementation*) impl)->getNewUpdateCounter(update);
}

unsigned int InstallationObjectAdapter::getUpdateCounter() {
	return ((InstallationObjectImplementation*) impl)->getUpdateCounter();
}

bool InstallationObjectAdapter::isRedeedable() {
	return ((InstallationObjectImplementation*) impl)->isRedeedable();
}

bool InstallationObjectAdapter::isOperating() {
	return ((InstallationObjectImplementation*) impl)->isOperating();
}

bool InstallationObjectAdapter::isHopperEmpty() {
	return ((InstallationObjectImplementation*) impl)->isHopperEmpty();
}

bool InstallationObjectAdapter::isHopperFull() {
	return ((InstallationObjectImplementation*) impl)->isHopperFull();
}

bool InstallationObjectAdapter::isOutOfMaintenance() {
	return ((InstallationObjectImplementation*) impl)->isOutOfMaintenance();
}

bool InstallationObjectAdapter::isOutOfPower() {
	return ((InstallationObjectImplementation*) impl)->isOutOfPower();
}

bool InstallationObjectAdapter::isPublicStructure() {
	return ((InstallationObjectImplementation*) impl)->isPublicStructure();
}

bool InstallationObjectAdapter::isOnAdminList(Player* player) {
	return ((InstallationObjectImplementation*) impl)->isOnAdminList(player);
}

bool InstallationObjectAdapter::isOnHopperList(Player* player) {
	return ((InstallationObjectImplementation*) impl)->isOnHopperList(player);
}

bool InstallationObjectAdapter::isHarvester() {
	return ((InstallationObjectImplementation*) impl)->isHarvester();
}

bool InstallationObjectAdapter::isGenerator() {
	return ((InstallationObjectImplementation*) impl)->isGenerator();
}

bool InstallationObjectAdapter::isFactory() {
	return ((InstallationObjectImplementation*) impl)->isFactory();
}

bool InstallationObjectAdapter::isTurret() {
	return ((InstallationObjectImplementation*) impl)->isTurret();
}

bool InstallationObjectAdapter::isMinefield() {
	return ((InstallationObjectImplementation*) impl)->isMinefield();
}

void InstallationObjectAdapter::setBaseExtractionRate(float rate) {
	return ((InstallationObjectImplementation*) impl)->setBaseExtractionRate(rate);
}

void InstallationObjectAdapter::setHopperSizeMax(float maxsize) {
	return ((InstallationObjectImplementation*) impl)->setHopperSizeMax(maxsize);
}

void InstallationObjectAdapter::setHarvesterType(unsigned char type) {
	return ((InstallationObjectImplementation*) impl)->setHarvesterType(type);
}

unsigned long long InstallationObjectAdapter::getSelectedResourceID() {
	return ((InstallationObjectImplementation*) impl)->getSelectedResourceID();
}

float InstallationObjectAdapter::getDisplayedBaseExtractionRate() {
	return ((InstallationObjectImplementation*) impl)->getDisplayedBaseExtractionRate();
}

float InstallationObjectAdapter::getBaseExtractionRate() {
	return ((InstallationObjectImplementation*) impl)->getBaseExtractionRate();
}

float InstallationObjectAdapter::getExtractionRate() {
	return ((InstallationObjectImplementation*) impl)->getExtractionRate();
}

float InstallationObjectAdapter::getHopperSize() {
	return ((InstallationObjectImplementation*) impl)->getHopperSize();
}

float InstallationObjectAdapter::getHopperSizeMax() {
	return ((InstallationObjectImplementation*) impl)->getHopperSizeMax();
}

unsigned int InstallationObjectAdapter::getHopperListSize() {
	return ((InstallationObjectImplementation*) impl)->getHopperListSize();
}

unsigned long long InstallationObjectAdapter::getHopperItemID(int index) {
	return ((InstallationObjectImplementation*) impl)->getHopperItemID(index);
}

float InstallationObjectAdapter::getHopperItemQuantity(int index) {
	return ((InstallationObjectImplementation*) impl)->getHopperItemQuantity(index);
}

float InstallationObjectAdapter::getHopperItemQuantity(unsigned long long resourceid) {
	return ((InstallationObjectImplementation*) impl)->getHopperItemQuantity(resourceid);
}

int InstallationObjectAdapter::getHopperItemIndex(unsigned long long resourceid) {
	return ((InstallationObjectImplementation*) impl)->getHopperItemIndex(resourceid);
}

/*
 *	InstallationObjectHelper
 */

InstallationObjectHelper* InstallationObjectHelper::staticInitializer = InstallationObjectHelper::instance();

InstallationObjectHelper::InstallationObjectHelper() {
	className = "InstallationObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void InstallationObjectHelper::finalizeHelper() {
	InstallationObjectHelper::finalize();
}

DistributedObject* InstallationObjectHelper::instantiateObject() {
	return new InstallationObject(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* InstallationObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new InstallationObjectAdapter((InstallationObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	InstallationObjectServant
 */

InstallationObjectServant::InstallationObjectServant(unsigned long long oid, int type) : TangibleObjectImplementation(oid, type) {
	_classHelper = InstallationObjectHelper::instance();
}

InstallationObjectServant::~InstallationObjectServant() {
}

void InstallationObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (InstallationObject*) stub;
	TangibleObjectServant::_setStub(stub);
}

DistributedObjectStub* InstallationObjectServant::_getStub() {
	return _this;
}

