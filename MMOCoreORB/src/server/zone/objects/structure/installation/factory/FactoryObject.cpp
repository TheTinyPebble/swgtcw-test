/*
 *	server/zone/objects/structure/installation/factory/FactoryObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "FactoryObject.h"

#include "FactoryObjectImplementation.h"

#include "../../../tangible/deed/installationdeed/InstallationDeed.h"

#include "../InstallationObject.h"

/*
 *	FactoryObjectStub
 */

FactoryObject::FactoryObject(unsigned long long objid) : InstallationObject(DummyConstructorParameter::instance()) {
	_impl = new FactoryObjectImplementation(objid);
	_impl->_setStub(this);
}

FactoryObject::FactoryObject(unsigned long long objid, InstallationDeed* theDeed) : InstallationObject(DummyConstructorParameter::instance()) {
	_impl = new FactoryObjectImplementation(objid, theDeed);
	_impl->_setStub(this);
}

FactoryObject::FactoryObject(DummyConstructorParameter* param) : InstallationObject(param) {
}

FactoryObject::~FactoryObject() {
}

void FactoryObject::setHopperSizeMax(float size) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addFloatParameter(size);

		method.executeWithVoidReturn();
	} else
		((FactoryObjectImplementation*) _impl)->setHopperSizeMax(size);
}

void FactoryObject::setFactoryType(unsigned char type) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addUnsignedCharParameter(type);

		method.executeWithVoidReturn();
	} else
		((FactoryObjectImplementation*) _impl)->setFactoryType(type);
}

float FactoryObject::getHopperSizeMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		return method.executeWithFloatReturn();
	} else
		return ((FactoryObjectImplementation*) _impl)->getHopperSizeMax();
}

unsigned char FactoryObject::getFactoryType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return method.executeWithUnsignedCharReturn();
	} else
		return ((FactoryObjectImplementation*) _impl)->getFactoryType();
}

/*
 *	FactoryObjectAdapter
 */

FactoryObjectAdapter::FactoryObjectAdapter(FactoryObjectImplementation* obj) : InstallationObjectAdapter(obj) {
}

Packet* FactoryObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		setHopperSizeMax(inv->getFloatParameter());
		break;
	case 7:
		setFactoryType(inv->getUnsignedCharParameter());
		break;
	case 8:
		resp->insertFloat(getHopperSizeMax());
		break;
	case 9:
		resp->insertByte(getFactoryType());
		break;
	default:
		return NULL;
	}

	return resp;
}

void FactoryObjectAdapter::setHopperSizeMax(float size) {
	return ((FactoryObjectImplementation*) impl)->setHopperSizeMax(size);
}

void FactoryObjectAdapter::setFactoryType(unsigned char type) {
	return ((FactoryObjectImplementation*) impl)->setFactoryType(type);
}

float FactoryObjectAdapter::getHopperSizeMax() {
	return ((FactoryObjectImplementation*) impl)->getHopperSizeMax();
}

unsigned char FactoryObjectAdapter::getFactoryType() {
	return ((FactoryObjectImplementation*) impl)->getFactoryType();
}

/*
 *	FactoryObjectHelper
 */

FactoryObjectHelper* FactoryObjectHelper::staticInitializer = FactoryObjectHelper::instance();

FactoryObjectHelper::FactoryObjectHelper() {
	className = "FactoryObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void FactoryObjectHelper::finalizeHelper() {
	FactoryObjectHelper::finalize();
}

DistributedObject* FactoryObjectHelper::instantiateObject() {
	return new FactoryObject(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* FactoryObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new FactoryObjectAdapter((FactoryObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	FactoryObjectServant
 */

FactoryObjectServant::FactoryObjectServant(unsigned long long objid) : InstallationObjectImplementation(objid) {
	_classHelper = FactoryObjectHelper::instance();
}

FactoryObjectServant::~FactoryObjectServant() {
}

void FactoryObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (FactoryObject*) stub;
	InstallationObjectServant::_setStub(stub);
}

DistributedObjectStub* FactoryObjectServant::_getStub() {
	return _this;
}

