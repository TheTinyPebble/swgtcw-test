/*
Copyright (C) 2007 <SWGEmu>
 
This File is part of Core3.
 
This program is free software; you can redistribute 
it and/or modify it under the terms of the GNU Lesser 
General Public License as published by the Free Software
Foundation; either version 2 of the License, 
or (at your option) any later version.
 
This program is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
See the GNU Lesser General Public License for
more details.
 
You should have received a copy of the GNU Lesser General 
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 
Linking Engine3 statically or dynamically with other modules 
is making a combined work based on Engine3. 
Thus, the terms and conditions of the GNU Lesser General Public License 
cover the whole combination.
 
In addition, as a special exception, the copyright holders of Engine3 
give you permission to combine Engine3 program with free software 
programs or libraries that are released under the GNU LGPL and with 
code included in the standard release of Core3 under the GNU LGPL 
license (or modified versions of such code, with unchanged license). 
You may copy and distribute such a system following the terms of the 
GNU LGPL for Engine3 and the licenses of the other code concerned, 
provided that you include the source code of that other code when 
and as the GNU LGPL requires distribution of source code.
 
Note that people who make modified versions of Engine3 are not obligated 
to grant this special exception for their modified versions; 
it is their choice whether to do so. The GNU Lesser General Public License 
gives permission to release a modified version without this exception; 
this exception also makes it possible to release a modified version 
which carries forward this exception.
*/

import "../../tangible/TangibleObject";
import "../../player/Player";
import "../../tangible/deed/installationdeed/InstallationDeed";

interface InstallationObject implements TangibleObject {

	InstallationObject(unsigned long oid) {
		super(unsigned long oid, int type);
	}

	InstallationObject(unsigned long oid, InstallationDeed deed) {
		super(unsigned long oid, int type);
	}
	
	void serialize();
	void deserialize();

	void sendTo(Player player, boolean doClose = true);
	void sendPermissionListTo(Player player, const String listname);
	void sendCustomNamePromptTo(Player player);
	
	void updateCustomName(Player player, const String& value);
	
	void sendStatusTo(Player player);
	void sendManageMaintenanceTo(Player player);
	void sendManagePowerTo(Player player);
	void sendConfirmDestroyTo(Player player);
	void sendDestroyCodeTo(Player player);
	
	boolean start(Player player);
	void shutdown(unsigned char errorcode = 0, boolean sendmail = true);
	boolean destroyStructure(Player player);
	InstallationDeed redeed(Player player);
	
	void modifyPermissionList(Player player, const String& listname, const String& entryname, boolean add = true);
	
	void pollStatus(boolean reschedule = true);
	void consumeMaintenance();
	void consumePower();
	void payTaxes();
	
	void depositMaintenance(Player player, unsigned int amount);
	void depositPower(Player player, unsigned int amount);
	
	void addOperator(Player player);
	void removeOperator(Player player);
	
	boolean isValidDestroyCode(unsigned int code);

	//Setters
	void setStructureID(unsigned int structureid);
	void setDeedCRC(unsigned int crc);
	void setDeedStfName(const String stfname);
	void setDeedCustomName(const UnicodeString customname);
	void setConstructionObjectCRC(unsigned int crc);
	void setObjectFile(const String objectfile);
	void setPowerRate(float rate);
	void setMaintenancePool(float maint);
	void setMaintenanceRate(float rate);
	void setPowerReserves(float pow);
	void setOperating(boolean state);
	void setPublicStructure(boolean status);
	void setLotSize(unsigned char size);
	void setPermissionsFromString(const String permissionsstring);
	
	//Getters
	unsigned int getStructureID();
	unsigned int getDeedCRC();
	String getDeedStfName();
	UnicodeString getDeedCustomName();
	unsigned int getConstructionObjectCRC();
	String getObjectFile();
	unsigned int getReclaimFee();
	float getMaintenancePool();
	float getMaintenanceRate();
	float getPowerReserves();
	float getPowerRate();
	unsigned int getDestroyCode();
	unsigned char getLotSize();
	String getPermissionsString();
	
	unsigned int getNewUpdateCounter(unsigned int update);
	unsigned int getUpdateCounter();
	
	boolean isRedeedable();
	boolean isOperating();
	boolean isHopperEmpty();
	boolean isHopperFull();
	boolean isOutOfMaintenance();
	boolean isOutOfPower();
	boolean isPublicStructure();
	
	boolean isOnAdminList(Player player);
	boolean isOnHopperList(Player player);
	
	boolean isHarvester();
	boolean isGenerator();
	boolean isFactory();
	boolean isTurret();
	boolean isMinefield();
	
	//Virtuals to be overridden
	
	void setBaseExtractionRate(float rate);
	void setHopperSizeMax(float maxsize);
	void setHarvesterType(unsigned char type);
	
	unsigned long getSelectedResourceID();
	float getDisplayedBaseExtractionRate();
	float getBaseExtractionRate();
	float getExtractionRate();
	
	float getHopperSize();
	float getHopperSizeMax();
	
	unsigned int getHopperListSize();
	unsigned long getHopperItemID(int index);
	float getHopperItemQuantity(int index);
	float getHopperItemQuantity(unsigned long resourceid);
	int getHopperItemIndex(unsigned long resourceid);
}
