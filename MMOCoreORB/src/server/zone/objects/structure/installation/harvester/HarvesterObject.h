/*
 *	server/zone/objects/structure/installation/harvester/HarvesterObject.h generated by engine3 IDL compiler 0.55
 */

#ifndef HARVESTEROBJECT_H_
#define HARVESTEROBJECT_H_

#include "engine/orb/DistributedObjectBroker.h"

class InstallationDeed;

class Player;

class InstallationObject;

#include "../InstallationObject.h"

class HarvesterObject : public InstallationObject {
public:
	HarvesterObject(unsigned long long objid);

	HarvesterObject(unsigned long long objid, InstallationDeed* theDeed);

	void changeSelectedResourceID(unsigned long long resourceid);

	void sendHopperUpdatesToOperators();

	void serialize();

	void deserialize();

	void loadHopper(const String& hopperstring);

	void cleanOperatorsList();

	void harvestResource();

	bool isSelectedResourceSpawning();

	bool retrieveResource(Player* player, unsigned long long resourceid, float amount);

	bool discardResource(Player* player, unsigned long long resourceid, float amount);

	bool emptyHarvester(Player* player);

	void setHopperSizeMax(float size);

	void setBaseExtractionRate(float max);

	void setSelectedResourceID(unsigned long long resourceid);

	void setSpawnDensity(int dens);

	unsigned long long getSelectedResourceID();

	unsigned int getSpawnDensity();

	unsigned char getHarvesterType();

	bool hasOperators();

protected:
	HarvesterObject(DummyConstructorParameter* param);

	virtual ~HarvesterObject();

	friend class HarvesterObjectHelper;
};

class HarvesterObjectImplementation;

class HarvesterObjectAdapter : public InstallationObjectAdapter {
public:
	HarvesterObjectAdapter(HarvesterObjectImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void changeSelectedResourceID(unsigned long long resourceid);

	void sendHopperUpdatesToOperators();

	void serialize();

	void deserialize();

	void loadHopper(const String& hopperstring);

	void cleanOperatorsList();

	void harvestResource();

	bool isSelectedResourceSpawning();

	bool retrieveResource(Player* player, unsigned long long resourceid, float amount);

	bool discardResource(Player* player, unsigned long long resourceid, float amount);

	bool emptyHarvester(Player* player);

	void setHopperSizeMax(float size);

	void setBaseExtractionRate(float max);

	void setSelectedResourceID(unsigned long long resourceid);

	void setSpawnDensity(int dens);

	unsigned long long getSelectedResourceID();

	unsigned int getSpawnDensity();

	unsigned char getHarvesterType();

	bool hasOperators();

protected:
	String _param0_loadHopper__String_;
};

class HarvesterObjectHelper : public DistributedObjectClassHelper, public Singleton<HarvesterObjectHelper> {
	static HarvesterObjectHelper* staticInitializer;

public:
	HarvesterObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<HarvesterObjectHelper>;
};

#include "../InstallationObjectImplementation.h"

class HarvesterObjectServant : public InstallationObjectImplementation {
public:
	HarvesterObject* _this;

public:
	HarvesterObjectServant(unsigned long long objid);
	virtual ~HarvesterObjectServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*HARVESTEROBJECT_H_*/
