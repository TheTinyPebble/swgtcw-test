/*
 *	server/zone/objects/structure/installation/harvester/HarvesterObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "HarvesterObject.h"

#include "HarvesterObjectImplementation.h"

#include "../../../tangible/deed/installationdeed/InstallationDeed.h"

#include "../../../player/Player.h"

#include "../InstallationObject.h"

/*
 *	HarvesterObjectStub
 */

HarvesterObject::HarvesterObject(unsigned long long objid) : InstallationObject(DummyConstructorParameter::instance()) {
	_impl = new HarvesterObjectImplementation(objid);
	_impl->_setStub(this);
}

HarvesterObject::HarvesterObject(unsigned long long objid, InstallationDeed* theDeed) : InstallationObject(DummyConstructorParameter::instance()) {
	_impl = new HarvesterObjectImplementation(objid, theDeed);
	_impl->_setStub(this);
}

HarvesterObject::HarvesterObject(DummyConstructorParameter* param) : InstallationObject(param) {
}

HarvesterObject::~HarvesterObject() {
}

void HarvesterObject::changeSelectedResourceID(unsigned long long resourceid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addUnsignedLongParameter(resourceid);

		method.executeWithVoidReturn();
	} else
		((HarvesterObjectImplementation*) _impl)->changeSelectedResourceID(resourceid);
}

void HarvesterObject::sendHopperUpdatesToOperators() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		((HarvesterObjectImplementation*) _impl)->sendHopperUpdatesToOperators();
}

void HarvesterObject::serialize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		method.executeWithVoidReturn();
	} else
		((HarvesterObjectImplementation*) _impl)->serialize();
}

void HarvesterObject::deserialize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		method.executeWithVoidReturn();
	} else
		((HarvesterObjectImplementation*) _impl)->deserialize();
}

void HarvesterObject::loadHopper(const String& hopperstring) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addAsciiParameter(hopperstring);

		method.executeWithVoidReturn();
	} else
		((HarvesterObjectImplementation*) _impl)->loadHopper(hopperstring);
}

void HarvesterObject::cleanOperatorsList() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		method.executeWithVoidReturn();
	} else
		((HarvesterObjectImplementation*) _impl)->cleanOperatorsList();
}

void HarvesterObject::harvestResource() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		method.executeWithVoidReturn();
	} else
		((HarvesterObjectImplementation*) _impl)->harvestResource();
}

bool HarvesterObject::isSelectedResourceSpawning() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		return method.executeWithBooleanReturn();
	} else
		return ((HarvesterObjectImplementation*) _impl)->isSelectedResourceSpawning();
}

bool HarvesterObject::retrieveResource(Player* player, unsigned long long resourceid, float amount) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addObjectParameter(player);
		method.addUnsignedLongParameter(resourceid);
		method.addFloatParameter(amount);

		return method.executeWithBooleanReturn();
	} else
		return ((HarvesterObjectImplementation*) _impl)->retrieveResource(player, resourceid, amount);
}

bool HarvesterObject::discardResource(Player* player, unsigned long long resourceid, float amount) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addObjectParameter(player);
		method.addUnsignedLongParameter(resourceid);
		method.addFloatParameter(amount);

		return method.executeWithBooleanReturn();
	} else
		return ((HarvesterObjectImplementation*) _impl)->discardResource(player, resourceid, amount);
}

bool HarvesterObject::emptyHarvester(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return ((HarvesterObjectImplementation*) _impl)->emptyHarvester(player);
}

void HarvesterObject::setHopperSizeMax(float size) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addFloatParameter(size);

		method.executeWithVoidReturn();
	} else
		((HarvesterObjectImplementation*) _impl)->setHopperSizeMax(size);
}

void HarvesterObject::setBaseExtractionRate(float max) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addFloatParameter(max);

		method.executeWithVoidReturn();
	} else
		((HarvesterObjectImplementation*) _impl)->setBaseExtractionRate(max);
}

void HarvesterObject::setSelectedResourceID(unsigned long long resourceid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addUnsignedLongParameter(resourceid);

		method.executeWithVoidReturn();
	} else
		((HarvesterObjectImplementation*) _impl)->setSelectedResourceID(resourceid);
}

void HarvesterObject::setSpawnDensity(int dens) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addSignedIntParameter(dens);

		method.executeWithVoidReturn();
	} else
		((HarvesterObjectImplementation*) _impl)->setSpawnDensity(dens);
}

unsigned long long HarvesterObject::getSelectedResourceID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((HarvesterObjectImplementation*) _impl)->getSelectedResourceID();
}

unsigned int HarvesterObject::getSpawnDensity() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((HarvesterObjectImplementation*) _impl)->getSpawnDensity();
}

unsigned char HarvesterObject::getHarvesterType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);

		return method.executeWithUnsignedCharReturn();
	} else
		return ((HarvesterObjectImplementation*) _impl)->getHarvesterType();
}

bool HarvesterObject::hasOperators() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);

		return method.executeWithBooleanReturn();
	} else
		return ((HarvesterObjectImplementation*) _impl)->hasOperators();
}

/*
 *	HarvesterObjectAdapter
 */

HarvesterObjectAdapter::HarvesterObjectAdapter(HarvesterObjectImplementation* obj) : InstallationObjectAdapter(obj) {
}

Packet* HarvesterObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		changeSelectedResourceID(inv->getUnsignedLongParameter());
		break;
	case 7:
		sendHopperUpdatesToOperators();
		break;
	case 8:
		serialize();
		break;
	case 9:
		deserialize();
		break;
	case 10:
		loadHopper(inv->getAsciiParameter(_param0_loadHopper__String_));
		break;
	case 11:
		cleanOperatorsList();
		break;
	case 12:
		harvestResource();
		break;
	case 13:
		resp->insertBoolean(isSelectedResourceSpawning());
		break;
	case 14:
		resp->insertBoolean(retrieveResource((Player*) inv->getObjectParameter(), inv->getUnsignedLongParameter(), inv->getFloatParameter()));
		break;
	case 15:
		resp->insertBoolean(discardResource((Player*) inv->getObjectParameter(), inv->getUnsignedLongParameter(), inv->getFloatParameter()));
		break;
	case 16:
		resp->insertBoolean(emptyHarvester((Player*) inv->getObjectParameter()));
		break;
	case 17:
		setHopperSizeMax(inv->getFloatParameter());
		break;
	case 18:
		setBaseExtractionRate(inv->getFloatParameter());
		break;
	case 19:
		setSelectedResourceID(inv->getUnsignedLongParameter());
		break;
	case 20:
		setSpawnDensity(inv->getSignedIntParameter());
		break;
	case 21:
		resp->insertLong(getSelectedResourceID());
		break;
	case 22:
		resp->insertInt(getSpawnDensity());
		break;
	case 23:
		resp->insertByte(getHarvesterType());
		break;
	case 24:
		resp->insertBoolean(hasOperators());
		break;
	default:
		return NULL;
	}

	return resp;
}

void HarvesterObjectAdapter::changeSelectedResourceID(unsigned long long resourceid) {
	return ((HarvesterObjectImplementation*) impl)->changeSelectedResourceID(resourceid);
}

void HarvesterObjectAdapter::sendHopperUpdatesToOperators() {
	return ((HarvesterObjectImplementation*) impl)->sendHopperUpdatesToOperators();
}

void HarvesterObjectAdapter::serialize() {
	return ((HarvesterObjectImplementation*) impl)->serialize();
}

void HarvesterObjectAdapter::deserialize() {
	return ((HarvesterObjectImplementation*) impl)->deserialize();
}

void HarvesterObjectAdapter::loadHopper(const String& hopperstring) {
	return ((HarvesterObjectImplementation*) impl)->loadHopper(hopperstring);
}

void HarvesterObjectAdapter::cleanOperatorsList() {
	return ((HarvesterObjectImplementation*) impl)->cleanOperatorsList();
}

void HarvesterObjectAdapter::harvestResource() {
	return ((HarvesterObjectImplementation*) impl)->harvestResource();
}

bool HarvesterObjectAdapter::isSelectedResourceSpawning() {
	return ((HarvesterObjectImplementation*) impl)->isSelectedResourceSpawning();
}

bool HarvesterObjectAdapter::retrieveResource(Player* player, unsigned long long resourceid, float amount) {
	return ((HarvesterObjectImplementation*) impl)->retrieveResource(player, resourceid, amount);
}

bool HarvesterObjectAdapter::discardResource(Player* player, unsigned long long resourceid, float amount) {
	return ((HarvesterObjectImplementation*) impl)->discardResource(player, resourceid, amount);
}

bool HarvesterObjectAdapter::emptyHarvester(Player* player) {
	return ((HarvesterObjectImplementation*) impl)->emptyHarvester(player);
}

void HarvesterObjectAdapter::setHopperSizeMax(float size) {
	return ((HarvesterObjectImplementation*) impl)->setHopperSizeMax(size);
}

void HarvesterObjectAdapter::setBaseExtractionRate(float max) {
	return ((HarvesterObjectImplementation*) impl)->setBaseExtractionRate(max);
}

void HarvesterObjectAdapter::setSelectedResourceID(unsigned long long resourceid) {
	return ((HarvesterObjectImplementation*) impl)->setSelectedResourceID(resourceid);
}

void HarvesterObjectAdapter::setSpawnDensity(int dens) {
	return ((HarvesterObjectImplementation*) impl)->setSpawnDensity(dens);
}

unsigned long long HarvesterObjectAdapter::getSelectedResourceID() {
	return ((HarvesterObjectImplementation*) impl)->getSelectedResourceID();
}

unsigned int HarvesterObjectAdapter::getSpawnDensity() {
	return ((HarvesterObjectImplementation*) impl)->getSpawnDensity();
}

unsigned char HarvesterObjectAdapter::getHarvesterType() {
	return ((HarvesterObjectImplementation*) impl)->getHarvesterType();
}

bool HarvesterObjectAdapter::hasOperators() {
	return ((HarvesterObjectImplementation*) impl)->hasOperators();
}

/*
 *	HarvesterObjectHelper
 */

HarvesterObjectHelper* HarvesterObjectHelper::staticInitializer = HarvesterObjectHelper::instance();

HarvesterObjectHelper::HarvesterObjectHelper() {
	className = "HarvesterObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void HarvesterObjectHelper::finalizeHelper() {
	HarvesterObjectHelper::finalize();
}

DistributedObject* HarvesterObjectHelper::instantiateObject() {
	return new HarvesterObject(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* HarvesterObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new HarvesterObjectAdapter((HarvesterObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	HarvesterObjectServant
 */

HarvesterObjectServant::HarvesterObjectServant(unsigned long long objid) : InstallationObjectImplementation(objid) {
	_classHelper = HarvesterObjectHelper::instance();
}

HarvesterObjectServant::~HarvesterObjectServant() {
}

void HarvesterObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (HarvesterObject*) stub;
	InstallationObjectServant::_setStub(stub);
}

DistributedObjectStub* HarvesterObjectServant::_getStub() {
	return _this;
}

