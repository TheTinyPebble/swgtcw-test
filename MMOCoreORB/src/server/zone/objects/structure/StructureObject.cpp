/*
 *	server/zone/objects/structure/StructureObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "StructureObject.h"

#include "server/zone/objects/structure/events/StructureMaintenanceTask.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/objects/area/ActiveArea.h"


// Imported class dependencies

#include "server/zone/ZoneProcessServerImplementation.h"

#include "server/zone/objects/scene/variables/CustomizationVariables.h"

#include "server/zone/ZoneClientSession.h"

#include "server/zone/objects/scene/ObserverEventMap.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/objects/creature/variables/CooldownTimerMap.h"

#include "server/zone/objects/player/badges/Badges.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "server/zone/objects/tangible/tool/CraftingTool.h"

#include "server/zone/objects/tangible/weapon/WeaponObject.h"

#include "system/util/SortedVector.h"

#include "system/util/Vector.h"

#include "server/zone/objects/creature/damageovertime/DamageOverTimeList.h"

#include "system/lang/Time.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "system/util/VectorMap.h"

#include "server/zone/objects/intangible/ControlDevice.h"

#include "server/zone/objects/player/events/PlayerRecoveryEvent.h"

#include "server/zone/objects/tangible/tool/SurveyTool.h"

#include "server/zone/objects/player/TradeContainer.h"

#include "server/zone/objects/creature/variables/SkillBoxList.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/scene/variables/DeltaVectorMap.h"

#include "server/zone/objects/scene/variables/StringId.h"

#include "server/zone/objects/group/GroupObject.h"

#include "server/zone/objects/scene/variables/DeltaVector.h"

#include "server/zone/objects/player/events/PlayerDisconnectEvent.h"

#include "server/zone/Zone.h"

#include "engine/util/Quaternion.h"

#include "server/zone/objects/creature/buffs/BuffList.h"

/*
 *	StructureObjectStub
 */

StructureObject::StructureObject() : TangibleObject(DummyConstructorParameter::instance()) {
	StructureObjectImplementation* _implementation = new StructureObjectImplementation();
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

StructureObject::StructureObject(DummyConstructorParameter* param) : TangibleObject(param) {
}

StructureObject::~StructureObject() {
}


void StructureObject::initializeTransientMembers() {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void StructureObject::loadTemplateData(SharedObjectTemplate* templateData) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->loadTemplateData(templateData);
}

void StructureObject::createChildObjects() {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		_implementation->createChildObjects();
}

int StructureObject::notifyStructurePlaced(PlayerCreature* player) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyStructurePlaced(player);
}

bool StructureObject::checkRequisitesForPlacement(PlayerCreature* player) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->checkRequisitesForPlacement(player);
}

void StructureObject::sendStatusTo(PlayerCreature* player) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendStatusTo(player);
}

void StructureObject::sendDestroyConfirmTo(PlayerCreature* player) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendDestroyConfirmTo(player);
}

void StructureObject::sendDestroyCodeTo(PlayerCreature* player) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendDestroyCodeTo(player);
}

void StructureObject::sendManageMaintenanceTo(PlayerCreature* player) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendManageMaintenanceTo(player);
}

void StructureObject::sendChangeNamePromptTo(PlayerCreature* player) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendChangeNamePromptTo(player);
}

String StructureObject::getTimeString(unsigned int timestamp) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addUnsignedIntParameter(timestamp);

		method.executeWithAsciiReturn(_return_getTimeString);
		return _return_getTimeString;
	} else
		return _implementation->getTimeString(timestamp);
}

unsigned int StructureObject::generateDestroyCode() {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->generateDestroyCode();
}

bool StructureObject::isValidDestroyCode(unsigned int code) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addUnsignedIntParameter(code);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isValidDestroyCode(code);
}

void StructureObject::scheduleMaintenanceExpirationEvent() {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		method.executeWithVoidReturn();
	} else
		_implementation->scheduleMaintenanceExpirationEvent();
}

bool StructureObject::isOnAdminList(SceneObject* obj) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addObjectParameter(obj);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isOnAdminList(obj);
}

bool StructureObject::isOnAdminList(unsigned long long oid) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addUnsignedLongParameter(oid);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isOnAdminList(oid);
}

bool StructureObject::isOnEntryList(SceneObject* obj) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addObjectParameter(obj);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isOnEntryList(obj);
}

bool StructureObject::isOnEntryList(unsigned long long oid) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);
		method.addUnsignedLongParameter(oid);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isOnEntryList(oid);
}

bool StructureObject::isOnBanList(SceneObject* obj) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);
		method.addObjectParameter(obj);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isOnBanList(obj);
}

bool StructureObject::isOnBanList(unsigned long long oid) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);
		method.addUnsignedLongParameter(oid);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isOnBanList(oid);
}

bool StructureObject::isOwnerOf(SceneObject* obj) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);
		method.addObjectParameter(obj);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isOwnerOf(obj);
}

bool StructureObject::isOwnerOf(unsigned long long oid) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);
		method.addUnsignedLongParameter(oid);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isOwnerOf(oid);
}

bool StructureObject::isOnAccessList(SceneObject* obj) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);
		method.addObjectParameter(obj);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isOnAccessList(obj);
}

bool StructureObject::isOnAccessList(unsigned long long oid) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);
		method.addUnsignedLongParameter(oid);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isOnAccessList(oid);
}

void StructureObject::sendPermissionListTo(PlayerCreature* player, const String& listName) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);
		method.addObjectParameter(player);
		method.addAsciiParameter(listName);

		method.executeWithVoidReturn();
	} else
		_implementation->sendPermissionListTo(player, listName);
}

bool StructureObject::addPermission(PlayerCreature* player, PlayerCreature* targetPlayer, const String& listName) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);
		method.addObjectParameter(player);
		method.addObjectParameter(targetPlayer);
		method.addAsciiParameter(listName);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->addPermission(player, targetPlayer, listName);
}

bool StructureObject::addPermission(PlayerCreature* player, const String& targetPlayerName, const String& listName) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);
		method.addObjectParameter(player);
		method.addAsciiParameter(targetPlayerName);
		method.addAsciiParameter(listName);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->addPermission(player, targetPlayerName, listName);
}

bool StructureObject::removePermission(PlayerCreature* player, PlayerCreature* targetPlayer, const String& listName) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);
		method.addObjectParameter(player);
		method.addObjectParameter(targetPlayer);
		method.addAsciiParameter(listName);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->removePermission(player, targetPlayer, listName);
}

bool StructureObject::removePermission(PlayerCreature* player, const String& targetPlayerName, const String& listName) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);
		method.addObjectParameter(player);
		method.addAsciiParameter(targetPlayerName);
		method.addAsciiParameter(listName);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->removePermission(player, targetPlayerName, listName);
}

int StructureObject::getRedeedCost() {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getRedeedCost();
}

unsigned long long StructureObject::getOwnerObjectID() {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);

		return method.executeWithUnsignedLongReturn();
	} else
		return _implementation->getOwnerObjectID();
}

unsigned long long StructureObject::getDeedObjectID() {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 36);

		return method.executeWithUnsignedLongReturn();
	} else
		return _implementation->getDeedObjectID();
}

int StructureObject::getLotSize() {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 37);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getLotSize();
}

unsigned int StructureObject::getDestroyCode() {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 38);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getDestroyCode();
}

int StructureObject::getBaseMaintenanceRate() {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 39);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getBaseMaintenanceRate();
}

int StructureObject::getBasePowerRate() {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 40);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getBasePowerRate();
}

int StructureObject::getSurplusMaintenance() {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 41);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getSurplusMaintenance();
}

int StructureObject::getSurplusPower() {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 42);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getSurplusPower();
}

bool StructureObject::isPublicStructure() {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 43);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isPublicStructure();
}

void StructureObject::setOwnerObjectID(unsigned long long objectID) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 44);
		method.addUnsignedLongParameter(objectID);

		method.executeWithVoidReturn();
	} else
		_implementation->setOwnerObjectID(objectID);
}

void StructureObject::setDeedObjectID(unsigned long long deedID) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 45);
		method.addUnsignedLongParameter(deedID);

		method.executeWithVoidReturn();
	} else
		_implementation->setDeedObjectID(deedID);
}

void StructureObject::setLotSize(int lots) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 46);
		method.addSignedIntParameter(lots);

		method.executeWithVoidReturn();
	} else
		_implementation->setLotSize(lots);
}

void StructureObject::setDestroyCode(unsigned int code) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 47);
		method.addUnsignedIntParameter(code);

		method.executeWithVoidReturn();
	} else
		_implementation->setDestroyCode(code);
}

void StructureObject::setBaseMaintenanceRate(int rate) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 48);
		method.addSignedIntParameter(rate);

		method.executeWithVoidReturn();
	} else
		_implementation->setBaseMaintenanceRate(rate);
}

void StructureObject::setBasePowerRate(int rate) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 49);
		method.addSignedIntParameter(rate);

		method.executeWithVoidReturn();
	} else
		_implementation->setBasePowerRate(rate);
}

void StructureObject::setSurplusMaintenance(int surplus) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 50);
		method.addSignedIntParameter(surplus);

		method.executeWithVoidReturn();
	} else
		_implementation->setSurplusMaintenance(surplus);
}

void StructureObject::addMaintenance(int add) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 51);
		method.addSignedIntParameter(add);

		method.executeWithVoidReturn();
	} else
		_implementation->addMaintenance(add);
}

void StructureObject::setSurplusPower(int surplus) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 52);
		method.addSignedIntParameter(surplus);

		method.executeWithVoidReturn();
	} else
		_implementation->setSurplusPower(surplus);
}

void StructureObject::addPower(int add) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 53);
		method.addSignedIntParameter(add);

		method.executeWithVoidReturn();
	} else
		_implementation->addPower(add);
}

void StructureObject::setPublicStructure(bool privacy) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 54);
		method.addBooleanParameter(privacy);

		method.executeWithVoidReturn();
	} else
		_implementation->setPublicStructure(privacy);
}

bool StructureObject::isStructureObject() {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 55);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isStructureObject();
}

bool StructureObject::isRedeedable() {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 56);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isRedeedable();
}

int StructureObject::getLength() {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 57);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getLength();
}

void StructureObject::setLength(int len) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 58);
		method.addSignedIntParameter(len);

		method.executeWithVoidReturn();
	} else
		_implementation->setLength(len);
}

int StructureObject::getWidth() {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 59);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getWidth();
}

void StructureObject::setWidth(int wid) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 60);
		method.addSignedIntParameter(wid);

		method.executeWithVoidReturn();
	} else
		_implementation->setWidth(wid);
}

DistributedObjectServant* StructureObject::_getImplementation() {
	return getForUpdate();}

void StructureObject::_setImplementation(DistributedObjectServant* servant) {
	setObject((ManagedObjectImplementation*) servant);}

/*
 *	StructureObjectImplementation
 */

StructureObjectImplementation::StructureObjectImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
	_initializeImplementation();
}


StructureObjectImplementation::~StructureObjectImplementation() {
}


void StructureObjectImplementation::finalize() {
}

void StructureObjectImplementation::_initializeImplementation() {
	_setClassHelper(StructureObjectHelper::instance());

	_serializationHelperMethod();
}

void StructureObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (StructureObject*) stub;
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* StructureObjectImplementation::_getStub() {
	return _this;
}

StructureObjectImplementation::operator const StructureObject*() {
	return _this;
}

TransactionalObject* StructureObjectImplementation::clone() {
	return (TransactionalObject*) new StructureObjectImplementation(*this);
}


void StructureObjectImplementation::lock(bool doLock) {
}

void StructureObjectImplementation::lock(ManagedObject* obj) {
}

void StructureObjectImplementation::rlock(bool doLock) {
}

void StructureObjectImplementation::wlock(bool doLock) {
}

void StructureObjectImplementation::wlock(ManagedObject* obj) {
}

void StructureObjectImplementation::unlock(bool doLock) {
}

void StructureObjectImplementation::runlock(bool doLock) {
}

void StructureObjectImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("StructureObject");

	addSerializableVariable("structurePermissionList", &structurePermissionList);
	addSerializableVariable("maintenanceExpires", &maintenanceExpires);
	addSerializableVariable("powerExpires", &powerExpires);
	addSerializableVariable("ownerObjectID", &ownerObjectID);
	addSerializableVariable("deedObjectID", &deedObjectID);
	addSerializableVariable("lotSize", &lotSize);
	addSerializableVariable("destroyCode", &destroyCode);
	addSerializableVariable("baseMaintenanceRate", &baseMaintenanceRate);
	addSerializableVariable("basePowerRate", &basePowerRate);
	addSerializableVariable("surplusMaintenance", &surplusMaintenance);
	addSerializableVariable("surplusPower", &surplusPower);
	addSerializableVariable("length", &length);
	addSerializableVariable("width", &width);
	addSerializableVariable("publicStructure", &publicStructure);
}

StructureObjectImplementation::StructureObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/structure/StructureObject.idl(90):  		Logger.setLoggingName("StructureObject");
	Logger::setLoggingName("StructureObject");
	// server/zone/objects/structure/StructureObject.idl(92):  		super.staticObject = false;
	TangibleObjectImplementation::staticObject = false;
	// server/zone/objects/structure/StructureObject.idl(94):  		lotSize = 0;
	lotSize = 0;
	// server/zone/objects/structure/StructureObject.idl(96):  		ownerObjectID = 0;
	ownerObjectID = 0;
	// server/zone/objects/structure/StructureObject.idl(98):  		deedObjectID = 0;
	deedObjectID = 0;
	// server/zone/objects/structure/StructureObject.idl(100):  		destroyCode = 0;
	destroyCode = 0;
	// server/zone/objects/structure/StructureObject.idl(102):  		baseMaintenanceRate = 0;
	baseMaintenanceRate = 0;
	// server/zone/objects/structure/StructureObject.idl(104):  		basePowerRate = 0;
	basePowerRate = 0;
	// server/zone/objects/structure/StructureObject.idl(106):  		surplusMaintenance = 0;
	surplusMaintenance = 0;
	// server/zone/objects/structure/StructureObject.idl(108):  		surplusPower = 0;
	surplusPower = 0;
	// server/zone/objects/structure/StructureObject.idl(110):  		publicStructure = false;
	publicStructure = false;
	// server/zone/objects/structure/StructureObject.idl(112):  		length = 0;
	length = 0;
	// server/zone/objects/structure/StructureObject.idl(114):  		width = 0;
	width = 0;
	// server/zone/objects/structure/StructureObject.idl(116):  		structureMaintenanceTask = null;
	structureMaintenanceTask = NULL;
}

void StructureObjectImplementation::initializeTransientMembers() {
	// server/zone/objects/structure/StructureObject.idl(120):  		super.initializeTransientMembers();
	TangibleObjectImplementation::initializeTransientMembers();
	// server/zone/objects/structure/StructureObject.idl(122):  		Logger.setLoggingName("StructureObject");
	Logger::setLoggingName("StructureObject");
}

void StructureObjectImplementation::createChildObjects() {
	// server/zone/objects/structure/StructureObject.idl(135):  		super.createChildObjects();
	TangibleObjectImplementation::createChildObjects();
}

int StructureObjectImplementation::notifyStructurePlaced(PlayerCreature* player) {
	// server/zone/objects/structure/StructureObject.idl(142):  		return 0;
	return 0;
}

bool StructureObjectImplementation::checkRequisitesForPlacement(PlayerCreature* player) {
	// server/zone/objects/structure/StructureObject.idl(146):  		return true;
	return true;
}

unsigned int StructureObjectImplementation::generateDestroyCode() {
	// server/zone/objects/structure/StructureObject.idl(162):  		destroyCode = System.random(899999) + 100000;
	destroyCode = System::random(899999) + 100000;
	// server/zone/objects/structure/StructureObject.idl(163):  		return destroyCode;
	return destroyCode;
}

bool StructureObjectImplementation::isValidDestroyCode(unsigned int code) {
	// server/zone/objects/structure/StructureObject.idl(167):  		return (destroyCode == code);
	return (destroyCode == code);
}

bool StructureObjectImplementation::isOnAdminList(SceneObject* obj) {
	// server/zone/objects/structure/StructureObject.idl(178):  		return structurePermissionList.isOnAdminList(obj.getObjectID());
	return (&structurePermissionList)->isOnAdminList(obj->getObjectID());
}

bool StructureObjectImplementation::isOnAdminList(unsigned long long oid) {
	// server/zone/objects/structure/StructureObject.idl(182):  		return structurePermissionList.isOnAdminList(oid);
	return (&structurePermissionList)->isOnAdminList(oid);
}

bool StructureObjectImplementation::isOnEntryList(SceneObject* obj) {
	// server/zone/objects/structure/StructureObject.idl(186):  		return structurePermissionList.isOnEntryList(obj.getObjectID());
	return (&structurePermissionList)->isOnEntryList(obj->getObjectID());
}

bool StructureObjectImplementation::isOnEntryList(unsigned long long oid) {
	// server/zone/objects/structure/StructureObject.idl(190):  		return structurePermissionList.isOnEntryList(oid);
	return (&structurePermissionList)->isOnEntryList(oid);
}

bool StructureObjectImplementation::isOnBanList(SceneObject* obj) {
	// server/zone/objects/structure/StructureObject.idl(194):  		return structurePermissionList.isOnBanList(obj.getObjectID());
	return (&structurePermissionList)->isOnBanList(obj->getObjectID());
}

bool StructureObjectImplementation::isOnBanList(unsigned long long oid) {
	// server/zone/objects/structure/StructureObject.idl(198):  		return structurePermissionList.isOnBanList(oid);
	return (&structurePermissionList)->isOnBanList(oid);
}

bool StructureObjectImplementation::isOwnerOf(SceneObject* obj) {
	// server/zone/objects/structure/StructureObject.idl(202):  		return obj.getObjectID() == ownerObjectID;
	return obj->getObjectID() == ownerObjectID;
}

bool StructureObjectImplementation::isOwnerOf(unsigned long long oid) {
	// server/zone/objects/structure/StructureObject.idl(206):  		return oid == ownerObjectID;
	return oid == ownerObjectID;
}

bool StructureObjectImplementation::isOnAccessList(SceneObject* obj) {
	// server/zone/objects/structure/StructureObject.idl(211):  		return false;
	return false;
}

bool StructureObjectImplementation::isOnAccessList(unsigned long long oid) {
	// server/zone/objects/structure/StructureObject.idl(216):  		return false;
	return false;
}

void StructureObjectImplementation::sendPermissionListTo(PlayerCreature* player, const String& listName) {
	// server/zone/objects/structure/StructureObject.idl(220):  		structurePermissionList.sendTo(player, listName);
	(&structurePermissionList)->sendTo(player, listName);
}

int StructureObjectImplementation::getRedeedCost() {
	// server/zone/objects/structure/StructureObject.idl(233):  		return (baseMaintenanceRate * 50);
	return (baseMaintenanceRate * 50);
}

unsigned long long StructureObjectImplementation::getOwnerObjectID() {
	// server/zone/objects/structure/StructureObject.idl(237):  		return ownerObjectID;
	return ownerObjectID;
}

unsigned long long StructureObjectImplementation::getDeedObjectID() {
	// server/zone/objects/structure/StructureObject.idl(241):  		return deedObjectID;
	return deedObjectID;
}

int StructureObjectImplementation::getLotSize() {
	// server/zone/objects/structure/StructureObject.idl(245):  		return lotSize;
	return lotSize;
}

unsigned int StructureObjectImplementation::getDestroyCode() {
	// server/zone/objects/structure/StructureObject.idl(249):  		return destroyCode;
	return destroyCode;
}

int StructureObjectImplementation::getBaseMaintenanceRate() {
	// server/zone/objects/structure/StructureObject.idl(253):  		return baseMaintenanceRate;
	return baseMaintenanceRate;
}

int StructureObjectImplementation::getBasePowerRate() {
	// server/zone/objects/structure/StructureObject.idl(257):  		return basePowerRate;
	return basePowerRate;
}

int StructureObjectImplementation::getSurplusMaintenance() {
	// server/zone/objects/structure/StructureObject.idl(261):  		return surplusMaintenance;
	return surplusMaintenance;
}

int StructureObjectImplementation::getSurplusPower() {
	// server/zone/objects/structure/StructureObject.idl(265):  		return surplusPower;
	return surplusPower;
}

bool StructureObjectImplementation::isPublicStructure() {
	// server/zone/objects/structure/StructureObject.idl(269):  		return publicStructure;
	return publicStructure;
}

void StructureObjectImplementation::setOwnerObjectID(unsigned long long objectID) {
	// server/zone/objects/structure/StructureObject.idl(273):  		ownerObjectID = objectID;
	ownerObjectID = objectID;
	// server/zone/objects/structure/StructureObject.idl(274):  		structurePermissionList.addPermission(objectID, StructurePermissionList.OWNER);
	(&structurePermissionList)->addPermission(objectID, StructurePermissionList::OWNER);
}

void StructureObjectImplementation::setDeedObjectID(unsigned long long deedID) {
	// server/zone/objects/structure/StructureObject.idl(278):  		deedObjectID = deedID;
	deedObjectID = deedID;
}

void StructureObjectImplementation::setLotSize(int lots) {
	// server/zone/objects/structure/StructureObject.idl(282):  		lotSize = lots;
	lotSize = lots;
}

void StructureObjectImplementation::setDestroyCode(unsigned int code) {
	// server/zone/objects/structure/StructureObject.idl(286):  		destroyCode = code;
	destroyCode = code;
}

void StructureObjectImplementation::setBaseMaintenanceRate(int rate) {
	// server/zone/objects/structure/StructureObject.idl(290):  		baseMaintenanceRate = rate;
	baseMaintenanceRate = rate;
}

void StructureObjectImplementation::setBasePowerRate(int rate) {
	// server/zone/objects/structure/StructureObject.idl(294):  		basePowerRate = rate;
	basePowerRate = rate;
}

void StructureObjectImplementation::setSurplusMaintenance(int surplus) {
	// server/zone/objects/structure/StructureObject.idl(298):  		surplusMaintenance = surplus;
	surplusMaintenance = surplus;
}

void StructureObjectImplementation::addMaintenance(int add) {
	// server/zone/objects/structure/StructureObject.idl(302):  		surplusMaintenance += add;
	surplusMaintenance += add;
}

void StructureObjectImplementation::setSurplusPower(int surplus) {
	// server/zone/objects/structure/StructureObject.idl(306):  		surplusPower = surplus;
	surplusPower = surplus;
}

void StructureObjectImplementation::addPower(int add) {
	// server/zone/objects/structure/StructureObject.idl(310):  		surplusPower += add;
	surplusPower += add;
}

void StructureObjectImplementation::setPublicStructure(bool privacy) {
	// server/zone/objects/structure/StructureObject.idl(314):  		publicStructure = privacy;
	publicStructure = privacy;
}

bool StructureObjectImplementation::isStructureObject() {
	// server/zone/objects/structure/StructureObject.idl(318):  		return true;
	return true;
}

bool StructureObjectImplementation::isRedeedable() {
	// server/zone/objects/structure/StructureObject.idl(323):  		return (getRedeedCost() < (surplusMaintenance + 1));
	return (getRedeedCost() < (surplusMaintenance + 1));
}

int StructureObjectImplementation::getLength() {
	// server/zone/objects/structure/StructureObject.idl(327):  		return length;
	return length;
}

void StructureObjectImplementation::setLength(int len) {
	// server/zone/objects/structure/StructureObject.idl(331):  		length = len;
	length = len;
}

int StructureObjectImplementation::getWidth() {
	// server/zone/objects/structure/StructureObject.idl(335):  		return width;
	return width;
}

void StructureObjectImplementation::setWidth(int wid) {
	// server/zone/objects/structure/StructureObject.idl(339):  		width = wid;
	width = wid;
}

/*
 *	StructureObjectAdapter
 */

StructureObjectAdapter::StructureObjectAdapter(StructureObjectImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* StructureObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initializeTransientMembers();
		break;
	case 7:
		createChildObjects();
		break;
	case 8:
		resp->insertSignedInt(notifyStructurePlaced((PlayerCreature*) inv->getObjectParameter()));
		break;
	case 9:
		resp->insertBoolean(checkRequisitesForPlacement((PlayerCreature*) inv->getObjectParameter()));
		break;
	case 10:
		sendStatusTo((PlayerCreature*) inv->getObjectParameter());
		break;
	case 11:
		sendDestroyConfirmTo((PlayerCreature*) inv->getObjectParameter());
		break;
	case 12:
		sendDestroyCodeTo((PlayerCreature*) inv->getObjectParameter());
		break;
	case 13:
		sendManageMaintenanceTo((PlayerCreature*) inv->getObjectParameter());
		break;
	case 14:
		sendChangeNamePromptTo((PlayerCreature*) inv->getObjectParameter());
		break;
	case 15:
		resp->insertAscii(getTimeString(inv->getUnsignedIntParameter()));
		break;
	case 16:
		resp->insertInt(generateDestroyCode());
		break;
	case 17:
		resp->insertBoolean(isValidDestroyCode(inv->getUnsignedIntParameter()));
		break;
	case 18:
		scheduleMaintenanceExpirationEvent();
		break;
	case 19:
		resp->insertBoolean(isOnAdminList((SceneObject*) inv->getObjectParameter()));
		break;
	case 20:
		resp->insertBoolean(isOnAdminList(inv->getUnsignedLongParameter()));
		break;
	case 21:
		resp->insertBoolean(isOnEntryList((SceneObject*) inv->getObjectParameter()));
		break;
	case 22:
		resp->insertBoolean(isOnEntryList(inv->getUnsignedLongParameter()));
		break;
	case 23:
		resp->insertBoolean(isOnBanList((SceneObject*) inv->getObjectParameter()));
		break;
	case 24:
		resp->insertBoolean(isOnBanList(inv->getUnsignedLongParameter()));
		break;
	case 25:
		resp->insertBoolean(isOwnerOf((SceneObject*) inv->getObjectParameter()));
		break;
	case 26:
		resp->insertBoolean(isOwnerOf(inv->getUnsignedLongParameter()));
		break;
	case 27:
		resp->insertBoolean(isOnAccessList((SceneObject*) inv->getObjectParameter()));
		break;
	case 28:
		resp->insertBoolean(isOnAccessList(inv->getUnsignedLongParameter()));
		break;
	case 29:
		sendPermissionListTo((PlayerCreature*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_sendPermissionListTo__PlayerCreature_String_));
		break;
	case 30:
		resp->insertBoolean(addPermission((PlayerCreature*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter(), inv->getAsciiParameter(_param2_addPermission__PlayerCreature_PlayerCreature_String_)));
		break;
	case 31:
		resp->insertBoolean(addPermission((PlayerCreature*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_addPermission__PlayerCreature_String_String_), inv->getAsciiParameter(_param2_addPermission__PlayerCreature_String_String_)));
		break;
	case 32:
		resp->insertBoolean(removePermission((PlayerCreature*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter(), inv->getAsciiParameter(_param2_removePermission__PlayerCreature_PlayerCreature_String_)));
		break;
	case 33:
		resp->insertBoolean(removePermission((PlayerCreature*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_removePermission__PlayerCreature_String_String_), inv->getAsciiParameter(_param2_removePermission__PlayerCreature_String_String_)));
		break;
	case 34:
		resp->insertSignedInt(getRedeedCost());
		break;
	case 35:
		resp->insertLong(getOwnerObjectID());
		break;
	case 36:
		resp->insertLong(getDeedObjectID());
		break;
	case 37:
		resp->insertSignedInt(getLotSize());
		break;
	case 38:
		resp->insertInt(getDestroyCode());
		break;
	case 39:
		resp->insertSignedInt(getBaseMaintenanceRate());
		break;
	case 40:
		resp->insertSignedInt(getBasePowerRate());
		break;
	case 41:
		resp->insertSignedInt(getSurplusMaintenance());
		break;
	case 42:
		resp->insertSignedInt(getSurplusPower());
		break;
	case 43:
		resp->insertBoolean(isPublicStructure());
		break;
	case 44:
		setOwnerObjectID(inv->getUnsignedLongParameter());
		break;
	case 45:
		setDeedObjectID(inv->getUnsignedLongParameter());
		break;
	case 46:
		setLotSize(inv->getSignedIntParameter());
		break;
	case 47:
		setDestroyCode(inv->getUnsignedIntParameter());
		break;
	case 48:
		setBaseMaintenanceRate(inv->getSignedIntParameter());
		break;
	case 49:
		setBasePowerRate(inv->getSignedIntParameter());
		break;
	case 50:
		setSurplusMaintenance(inv->getSignedIntParameter());
		break;
	case 51:
		addMaintenance(inv->getSignedIntParameter());
		break;
	case 52:
		setSurplusPower(inv->getSignedIntParameter());
		break;
	case 53:
		addPower(inv->getSignedIntParameter());
		break;
	case 54:
		setPublicStructure(inv->getBooleanParameter());
		break;
	case 55:
		resp->insertBoolean(isStructureObject());
		break;
	case 56:
		resp->insertBoolean(isRedeedable());
		break;
	case 57:
		resp->insertSignedInt(getLength());
		break;
	case 58:
		setLength(inv->getSignedIntParameter());
		break;
	case 59:
		resp->insertSignedInt(getWidth());
		break;
	case 60:
		setWidth(inv->getSignedIntParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void StructureObjectAdapter::initializeTransientMembers() {
	((StructureObjectImplementation*) impl)->initializeTransientMembers();
}

void StructureObjectAdapter::createChildObjects() {
	((StructureObjectImplementation*) impl)->createChildObjects();
}

int StructureObjectAdapter::notifyStructurePlaced(PlayerCreature* player) {
	return ((StructureObjectImplementation*) impl)->notifyStructurePlaced(player);
}

bool StructureObjectAdapter::checkRequisitesForPlacement(PlayerCreature* player) {
	return ((StructureObjectImplementation*) impl)->checkRequisitesForPlacement(player);
}

void StructureObjectAdapter::sendStatusTo(PlayerCreature* player) {
	((StructureObjectImplementation*) impl)->sendStatusTo(player);
}

void StructureObjectAdapter::sendDestroyConfirmTo(PlayerCreature* player) {
	((StructureObjectImplementation*) impl)->sendDestroyConfirmTo(player);
}

void StructureObjectAdapter::sendDestroyCodeTo(PlayerCreature* player) {
	((StructureObjectImplementation*) impl)->sendDestroyCodeTo(player);
}

void StructureObjectAdapter::sendManageMaintenanceTo(PlayerCreature* player) {
	((StructureObjectImplementation*) impl)->sendManageMaintenanceTo(player);
}

void StructureObjectAdapter::sendChangeNamePromptTo(PlayerCreature* player) {
	((StructureObjectImplementation*) impl)->sendChangeNamePromptTo(player);
}

String StructureObjectAdapter::getTimeString(unsigned int timestamp) {
	return ((StructureObjectImplementation*) impl)->getTimeString(timestamp);
}

unsigned int StructureObjectAdapter::generateDestroyCode() {
	return ((StructureObjectImplementation*) impl)->generateDestroyCode();
}

bool StructureObjectAdapter::isValidDestroyCode(unsigned int code) {
	return ((StructureObjectImplementation*) impl)->isValidDestroyCode(code);
}

void StructureObjectAdapter::scheduleMaintenanceExpirationEvent() {
	((StructureObjectImplementation*) impl)->scheduleMaintenanceExpirationEvent();
}

bool StructureObjectAdapter::isOnAdminList(SceneObject* obj) {
	return ((StructureObjectImplementation*) impl)->isOnAdminList(obj);
}

bool StructureObjectAdapter::isOnAdminList(unsigned long long oid) {
	return ((StructureObjectImplementation*) impl)->isOnAdminList(oid);
}

bool StructureObjectAdapter::isOnEntryList(SceneObject* obj) {
	return ((StructureObjectImplementation*) impl)->isOnEntryList(obj);
}

bool StructureObjectAdapter::isOnEntryList(unsigned long long oid) {
	return ((StructureObjectImplementation*) impl)->isOnEntryList(oid);
}

bool StructureObjectAdapter::isOnBanList(SceneObject* obj) {
	return ((StructureObjectImplementation*) impl)->isOnBanList(obj);
}

bool StructureObjectAdapter::isOnBanList(unsigned long long oid) {
	return ((StructureObjectImplementation*) impl)->isOnBanList(oid);
}

bool StructureObjectAdapter::isOwnerOf(SceneObject* obj) {
	return ((StructureObjectImplementation*) impl)->isOwnerOf(obj);
}

bool StructureObjectAdapter::isOwnerOf(unsigned long long oid) {
	return ((StructureObjectImplementation*) impl)->isOwnerOf(oid);
}

bool StructureObjectAdapter::isOnAccessList(SceneObject* obj) {
	return ((StructureObjectImplementation*) impl)->isOnAccessList(obj);
}

bool StructureObjectAdapter::isOnAccessList(unsigned long long oid) {
	return ((StructureObjectImplementation*) impl)->isOnAccessList(oid);
}

void StructureObjectAdapter::sendPermissionListTo(PlayerCreature* player, const String& listName) {
	((StructureObjectImplementation*) impl)->sendPermissionListTo(player, listName);
}

bool StructureObjectAdapter::addPermission(PlayerCreature* player, PlayerCreature* targetPlayer, const String& listName) {
	return ((StructureObjectImplementation*) impl)->addPermission(player, targetPlayer, listName);
}

bool StructureObjectAdapter::addPermission(PlayerCreature* player, const String& targetPlayerName, const String& listName) {
	return ((StructureObjectImplementation*) impl)->addPermission(player, targetPlayerName, listName);
}

bool StructureObjectAdapter::removePermission(PlayerCreature* player, PlayerCreature* targetPlayer, const String& listName) {
	return ((StructureObjectImplementation*) impl)->removePermission(player, targetPlayer, listName);
}

bool StructureObjectAdapter::removePermission(PlayerCreature* player, const String& targetPlayerName, const String& listName) {
	return ((StructureObjectImplementation*) impl)->removePermission(player, targetPlayerName, listName);
}

int StructureObjectAdapter::getRedeedCost() {
	return ((StructureObjectImplementation*) impl)->getRedeedCost();
}

unsigned long long StructureObjectAdapter::getOwnerObjectID() {
	return ((StructureObjectImplementation*) impl)->getOwnerObjectID();
}

unsigned long long StructureObjectAdapter::getDeedObjectID() {
	return ((StructureObjectImplementation*) impl)->getDeedObjectID();
}

int StructureObjectAdapter::getLotSize() {
	return ((StructureObjectImplementation*) impl)->getLotSize();
}

unsigned int StructureObjectAdapter::getDestroyCode() {
	return ((StructureObjectImplementation*) impl)->getDestroyCode();
}

int StructureObjectAdapter::getBaseMaintenanceRate() {
	return ((StructureObjectImplementation*) impl)->getBaseMaintenanceRate();
}

int StructureObjectAdapter::getBasePowerRate() {
	return ((StructureObjectImplementation*) impl)->getBasePowerRate();
}

int StructureObjectAdapter::getSurplusMaintenance() {
	return ((StructureObjectImplementation*) impl)->getSurplusMaintenance();
}

int StructureObjectAdapter::getSurplusPower() {
	return ((StructureObjectImplementation*) impl)->getSurplusPower();
}

bool StructureObjectAdapter::isPublicStructure() {
	return ((StructureObjectImplementation*) impl)->isPublicStructure();
}

void StructureObjectAdapter::setOwnerObjectID(unsigned long long objectID) {
	((StructureObjectImplementation*) impl)->setOwnerObjectID(objectID);
}

void StructureObjectAdapter::setDeedObjectID(unsigned long long deedID) {
	((StructureObjectImplementation*) impl)->setDeedObjectID(deedID);
}

void StructureObjectAdapter::setLotSize(int lots) {
	((StructureObjectImplementation*) impl)->setLotSize(lots);
}

void StructureObjectAdapter::setDestroyCode(unsigned int code) {
	((StructureObjectImplementation*) impl)->setDestroyCode(code);
}

void StructureObjectAdapter::setBaseMaintenanceRate(int rate) {
	((StructureObjectImplementation*) impl)->setBaseMaintenanceRate(rate);
}

void StructureObjectAdapter::setBasePowerRate(int rate) {
	((StructureObjectImplementation*) impl)->setBasePowerRate(rate);
}

void StructureObjectAdapter::setSurplusMaintenance(int surplus) {
	((StructureObjectImplementation*) impl)->setSurplusMaintenance(surplus);
}

void StructureObjectAdapter::addMaintenance(int add) {
	((StructureObjectImplementation*) impl)->addMaintenance(add);
}

void StructureObjectAdapter::setSurplusPower(int surplus) {
	((StructureObjectImplementation*) impl)->setSurplusPower(surplus);
}

void StructureObjectAdapter::addPower(int add) {
	((StructureObjectImplementation*) impl)->addPower(add);
}

void StructureObjectAdapter::setPublicStructure(bool privacy) {
	((StructureObjectImplementation*) impl)->setPublicStructure(privacy);
}

bool StructureObjectAdapter::isStructureObject() {
	return ((StructureObjectImplementation*) impl)->isStructureObject();
}

bool StructureObjectAdapter::isRedeedable() {
	return ((StructureObjectImplementation*) impl)->isRedeedable();
}

int StructureObjectAdapter::getLength() {
	return ((StructureObjectImplementation*) impl)->getLength();
}

void StructureObjectAdapter::setLength(int len) {
	((StructureObjectImplementation*) impl)->setLength(len);
}

int StructureObjectAdapter::getWidth() {
	return ((StructureObjectImplementation*) impl)->getWidth();
}

void StructureObjectAdapter::setWidth(int wid) {
	((StructureObjectImplementation*) impl)->setWidth(wid);
}

/*
 *	StructureObjectHelper
 */

StructureObjectHelper* StructureObjectHelper::staticInitializer = StructureObjectHelper::instance();

StructureObjectHelper::StructureObjectHelper() {
	className = "StructureObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void StructureObjectHelper::finalizeHelper() {
	StructureObjectHelper::finalize();
}

DistributedObject* StructureObjectHelper::instantiateObject() {
	return new StructureObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* StructureObjectHelper::instantiateServant() {
	return new StructureObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* StructureObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new StructureObjectAdapter((StructureObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

