/*
 *	server/zone/objects/structure/StructureObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "StructureObject.h"

#include "server/zone/objects/structure/events/StructureMaintenanceTask.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/objects/area/ActiveArea.h"

/*
 *	StructureObjectStub
 */

enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 6,RPC_FINALIZE__,RPC_CREATECHILDOBJECTS__,RPC_NOTIFYSTRUCTUREPLACED__PLAYERCREATURE_,RPC_CHECKREQUISITESFORPLACEMENT__PLAYERCREATURE_,RPC_SENDSTATUSTO__PLAYERCREATURE_,RPC_SENDDESTROYCONFIRMTO__PLAYERCREATURE_,RPC_SENDDESTROYCODETO__PLAYERCREATURE_,RPC_SENDMANAGEMAINTENANCETO__PLAYERCREATURE_,RPC_SENDCHANGENAMEPROMPTTO__PLAYERCREATURE_,RPC_GETTIMESTRING__INT_,RPC_GENERATEDESTROYCODE__,RPC_ISVALIDDESTROYCODE__INT_,RPC_SCHEDULEMAINTENANCEEXPIRATIONEVENT__,RPC_ISONADMINLIST__SCENEOBJECT_,RPC_ISONADMINLIST__LONG_,RPC_ISONENTRYLIST__SCENEOBJECT_,RPC_ISONENTRYLIST__LONG_,RPC_ISONBANLIST__SCENEOBJECT_,RPC_ISONBANLIST__LONG_,RPC_ISOWNEROF__SCENEOBJECT_,RPC_ISOWNEROF__LONG_,RPC_ISONACCESSLIST__SCENEOBJECT_,RPC_ISONACCESSLIST__LONG_,RPC_SENDPERMISSIONLISTTO__PLAYERCREATURE_STRING_,RPC_ADDPERMISSION__PLAYERCREATURE_PLAYERCREATURE_STRING_,RPC_ADDPERMISSION__PLAYERCREATURE_STRING_STRING_,RPC_REMOVEPERMISSION__PLAYERCREATURE_PLAYERCREATURE_STRING_,RPC_REMOVEPERMISSION__PLAYERCREATURE_STRING_STRING_,RPC_CREATEVENDOR__PLAYERCREATURE_,RPC_GETREDEEDCOST__,RPC_GETOWNEROBJECTID__,RPC_GETDEEDOBJECTID__,RPC_GETLOTSIZE__,RPC_GETDESTROYCODE__,RPC_GETBASEMAINTENANCERATE__,RPC_GETBASEPOWERRATE__,RPC_GETSURPLUSMAINTENANCE__,RPC_GETSURPLUSPOWER__,RPC_ISPUBLICSTRUCTURE__,RPC_SETOWNEROBJECTID__LONG_,RPC_SETDEEDOBJECTID__LONG_,RPC_SETLOTSIZE__INT_,RPC_SETDESTROYCODE__INT_,RPC_SETBASEMAINTENANCERATE__INT_,RPC_SETBASEPOWERRATE__INT_,RPC_SETSURPLUSMAINTENANCE__INT_,RPC_ADDMAINTENANCE__INT_,RPC_SETSURPLUSPOWER__INT_,RPC_ADDPOWER__INT_,RPC_SETPUBLICSTRUCTURE__BOOL_,RPC_ISSTRUCTUREOBJECT__,RPC_ISREDEEDABLE__,RPC_GETLENGTH__,RPC_SETLENGTH__INT_,RPC_GETWIDTH__,RPC_SETWIDTH__INT_};

StructureObject::StructureObject() : TangibleObject(DummyConstructorParameter::instance()) {
	StructureObjectImplementation* _implementation = new StructureObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

StructureObject::StructureObject(DummyConstructorParameter* param) : TangibleObject(param) {
}

StructureObject::~StructureObject() {
}


void StructureObject::initializeTransientMembers() {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void StructureObject::loadTemplateData(SharedObjectTemplate* templateData) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->loadTemplateData(templateData);
}

void StructureObject::createChildObjects() {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATECHILDOBJECTS__);

		method.executeWithVoidReturn();
	} else
		_implementation->createChildObjects();
}

int StructureObject::notifyStructurePlaced(PlayerCreature* player) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYSTRUCTUREPLACED__PLAYERCREATURE_);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyStructurePlaced(player);
}

bool StructureObject::checkRequisitesForPlacement(PlayerCreature* player) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CHECKREQUISITESFORPLACEMENT__PLAYERCREATURE_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->checkRequisitesForPlacement(player);
}

void StructureObject::sendStatusTo(PlayerCreature* player) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDSTATUSTO__PLAYERCREATURE_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendStatusTo(player);
}

void StructureObject::sendDestroyConfirmTo(PlayerCreature* player) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDDESTROYCONFIRMTO__PLAYERCREATURE_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendDestroyConfirmTo(player);
}

void StructureObject::sendDestroyCodeTo(PlayerCreature* player) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDDESTROYCODETO__PLAYERCREATURE_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendDestroyCodeTo(player);
}

void StructureObject::sendManageMaintenanceTo(PlayerCreature* player) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDMANAGEMAINTENANCETO__PLAYERCREATURE_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendManageMaintenanceTo(player);
}

void StructureObject::sendChangeNamePromptTo(PlayerCreature* player) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDCHANGENAMEPROMPTTO__PLAYERCREATURE_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendChangeNamePromptTo(player);
}

String StructureObject::getTimeString(unsigned int timestamp) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTIMESTRING__INT_);
		method.addUnsignedIntParameter(timestamp);

		method.executeWithAsciiReturn(_return_getTimeString);
		return _return_getTimeString;
	} else
		return _implementation->getTimeString(timestamp);
}

unsigned int StructureObject::generateDestroyCode() {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GENERATEDESTROYCODE__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->generateDestroyCode();
}

bool StructureObject::isValidDestroyCode(unsigned int code) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISVALIDDESTROYCODE__INT_);
		method.addUnsignedIntParameter(code);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isValidDestroyCode(code);
}

void StructureObject::scheduleMaintenanceExpirationEvent() {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SCHEDULEMAINTENANCEEXPIRATIONEVENT__);

		method.executeWithVoidReturn();
	} else
		_implementation->scheduleMaintenanceExpirationEvent();
}

bool StructureObject::isOnAdminList(SceneObject* obj) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISONADMINLIST__SCENEOBJECT_);
		method.addObjectParameter(obj);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isOnAdminList(obj);
}

bool StructureObject::isOnAdminList(unsigned long long oid) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISONADMINLIST__LONG_);
		method.addUnsignedLongParameter(oid);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isOnAdminList(oid);
}

bool StructureObject::isOnEntryList(SceneObject* obj) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISONENTRYLIST__SCENEOBJECT_);
		method.addObjectParameter(obj);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isOnEntryList(obj);
}

bool StructureObject::isOnEntryList(unsigned long long oid) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISONENTRYLIST__LONG_);
		method.addUnsignedLongParameter(oid);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isOnEntryList(oid);
}

bool StructureObject::isOnBanList(SceneObject* obj) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISONBANLIST__SCENEOBJECT_);
		method.addObjectParameter(obj);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isOnBanList(obj);
}

bool StructureObject::isOnBanList(unsigned long long oid) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISONBANLIST__LONG_);
		method.addUnsignedLongParameter(oid);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isOnBanList(oid);
}

bool StructureObject::isOwnerOf(SceneObject* obj) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISOWNEROF__SCENEOBJECT_);
		method.addObjectParameter(obj);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isOwnerOf(obj);
}

bool StructureObject::isOwnerOf(unsigned long long oid) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISOWNEROF__LONG_);
		method.addUnsignedLongParameter(oid);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isOwnerOf(oid);
}

bool StructureObject::isOnAccessList(SceneObject* obj) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISONACCESSLIST__SCENEOBJECT_);
		method.addObjectParameter(obj);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isOnAccessList(obj);
}

bool StructureObject::isOnAccessList(unsigned long long oid) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISONACCESSLIST__LONG_);
		method.addUnsignedLongParameter(oid);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isOnAccessList(oid);
}

void StructureObject::sendPermissionListTo(PlayerCreature* player, const String& listName) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDPERMISSIONLISTTO__PLAYERCREATURE_STRING_);
		method.addObjectParameter(player);
		method.addAsciiParameter(listName);

		method.executeWithVoidReturn();
	} else
		_implementation->sendPermissionListTo(player, listName);
}

bool StructureObject::addPermission(PlayerCreature* player, PlayerCreature* targetPlayer, const String& listName) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDPERMISSION__PLAYERCREATURE_PLAYERCREATURE_STRING_);
		method.addObjectParameter(player);
		method.addObjectParameter(targetPlayer);
		method.addAsciiParameter(listName);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->addPermission(player, targetPlayer, listName);
}

bool StructureObject::addPermission(PlayerCreature* player, const String& targetPlayerName, const String& listName) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDPERMISSION__PLAYERCREATURE_STRING_STRING_);
		method.addObjectParameter(player);
		method.addAsciiParameter(targetPlayerName);
		method.addAsciiParameter(listName);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->addPermission(player, targetPlayerName, listName);
}

bool StructureObject::removePermission(PlayerCreature* player, PlayerCreature* targetPlayer, const String& listName) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEPERMISSION__PLAYERCREATURE_PLAYERCREATURE_STRING_);
		method.addObjectParameter(player);
		method.addObjectParameter(targetPlayer);
		method.addAsciiParameter(listName);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->removePermission(player, targetPlayer, listName);
}

bool StructureObject::removePermission(PlayerCreature* player, const String& targetPlayerName, const String& listName) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEPERMISSION__PLAYERCREATURE_STRING_STRING_);
		method.addObjectParameter(player);
		method.addAsciiParameter(targetPlayerName);
		method.addAsciiParameter(listName);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->removePermission(player, targetPlayerName, listName);
}

void StructureObject::createVendor(PlayerCreature* player) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATEVENDOR__PLAYERCREATURE_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->createVendor(player);
}

int StructureObject::getRedeedCost() {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETREDEEDCOST__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getRedeedCost();
}

unsigned long long StructureObject::getOwnerObjectID() {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETOWNEROBJECTID__);

		return method.executeWithUnsignedLongReturn();
	} else
		return _implementation->getOwnerObjectID();
}

unsigned long long StructureObject::getDeedObjectID() {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDEEDOBJECTID__);

		return method.executeWithUnsignedLongReturn();
	} else
		return _implementation->getDeedObjectID();
}

int StructureObject::getLotSize() {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETLOTSIZE__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getLotSize();
}

unsigned int StructureObject::getDestroyCode() {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDESTROYCODE__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getDestroyCode();
}

int StructureObject::getBaseMaintenanceRate() {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETBASEMAINTENANCERATE__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getBaseMaintenanceRate();
}

int StructureObject::getBasePowerRate() {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETBASEPOWERRATE__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getBasePowerRate();
}

int StructureObject::getSurplusMaintenance() {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSURPLUSMAINTENANCE__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getSurplusMaintenance();
}

int StructureObject::getSurplusPower() {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSURPLUSPOWER__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getSurplusPower();
}

bool StructureObject::isPublicStructure() {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISPUBLICSTRUCTURE__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isPublicStructure();
}

void StructureObject::setOwnerObjectID(unsigned long long objectID) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETOWNEROBJECTID__LONG_);
		method.addUnsignedLongParameter(objectID);

		method.executeWithVoidReturn();
	} else
		_implementation->setOwnerObjectID(objectID);
}

void StructureObject::setDeedObjectID(unsigned long long deedID) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETDEEDOBJECTID__LONG_);
		method.addUnsignedLongParameter(deedID);

		method.executeWithVoidReturn();
	} else
		_implementation->setDeedObjectID(deedID);
}

void StructureObject::setLotSize(int lots) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETLOTSIZE__INT_);
		method.addSignedIntParameter(lots);

		method.executeWithVoidReturn();
	} else
		_implementation->setLotSize(lots);
}

void StructureObject::setDestroyCode(unsigned int code) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETDESTROYCODE__INT_);
		method.addUnsignedIntParameter(code);

		method.executeWithVoidReturn();
	} else
		_implementation->setDestroyCode(code);
}

void StructureObject::setBaseMaintenanceRate(int rate) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETBASEMAINTENANCERATE__INT_);
		method.addSignedIntParameter(rate);

		method.executeWithVoidReturn();
	} else
		_implementation->setBaseMaintenanceRate(rate);
}

void StructureObject::setBasePowerRate(int rate) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETBASEPOWERRATE__INT_);
		method.addSignedIntParameter(rate);

		method.executeWithVoidReturn();
	} else
		_implementation->setBasePowerRate(rate);
}

void StructureObject::setSurplusMaintenance(int surplus) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSURPLUSMAINTENANCE__INT_);
		method.addSignedIntParameter(surplus);

		method.executeWithVoidReturn();
	} else
		_implementation->setSurplusMaintenance(surplus);
}

void StructureObject::addMaintenance(int add) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDMAINTENANCE__INT_);
		method.addSignedIntParameter(add);

		method.executeWithVoidReturn();
	} else
		_implementation->addMaintenance(add);
}

void StructureObject::setSurplusPower(int surplus) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSURPLUSPOWER__INT_);
		method.addSignedIntParameter(surplus);

		method.executeWithVoidReturn();
	} else
		_implementation->setSurplusPower(surplus);
}

void StructureObject::addPower(int add) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDPOWER__INT_);
		method.addSignedIntParameter(add);

		method.executeWithVoidReturn();
	} else
		_implementation->addPower(add);
}

void StructureObject::setPublicStructure(bool privacy) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPUBLICSTRUCTURE__BOOL_);
		method.addBooleanParameter(privacy);

		method.executeWithVoidReturn();
	} else
		_implementation->setPublicStructure(privacy);
}

bool StructureObject::isStructureObject() {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSTRUCTUREOBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isStructureObject();
}

bool StructureObject::isRedeedable() {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISREDEEDABLE__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isRedeedable();
}

int StructureObject::getLength() {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETLENGTH__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getLength();
}

AABBTree* StructureObject::getAABBTree() {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getAABBTree();
}

void StructureObject::setLength(int len) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETLENGTH__INT_);
		method.addSignedIntParameter(len);

		method.executeWithVoidReturn();
	} else
		_implementation->setLength(len);
}

int StructureObject::getWidth() {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETWIDTH__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getWidth();
}

void StructureObject::setWidth(int wid) {
	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETWIDTH__INT_);
		method.addSignedIntParameter(wid);

		method.executeWithVoidReturn();
	} else
		_implementation->setWidth(wid);
}

DistributedObjectServant* StructureObject::_getImplementation() {

	_updated = true;
	return _impl;
}

void StructureObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	StructureObjectImplementation
 */

StructureObjectImplementation::StructureObjectImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
	_initializeImplementation();
}


StructureObjectImplementation::~StructureObjectImplementation() {
	StructureObjectImplementation::finalize();
}


void StructureObjectImplementation::_initializeImplementation() {
	_setClassHelper(StructureObjectHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void StructureObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (StructureObject*) stub;
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* StructureObjectImplementation::_getStub() {
	return _this;
}

StructureObjectImplementation::operator const StructureObject*() {
	return _this;
}

void StructureObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void StructureObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void StructureObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void StructureObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void StructureObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void StructureObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void StructureObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void StructureObjectImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("StructureObject");

}

void StructureObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(StructureObjectImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool StructureObjectImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (TangibleObjectImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "structurePermissionList") {
		TypeInfo<StructurePermissionList >::parseFromBinaryStream(&structurePermissionList, stream);
		return true;
	}

	if (_name == "maintenanceExpires") {
		TypeInfo<Time >::parseFromBinaryStream(&maintenanceExpires, stream);
		return true;
	}

	if (_name == "powerExpires") {
		TypeInfo<Time >::parseFromBinaryStream(&powerExpires, stream);
		return true;
	}

	if (_name == "ownerObjectID") {
		TypeInfo<unsigned long long >::parseFromBinaryStream(&ownerObjectID, stream);
		return true;
	}

	if (_name == "deedObjectID") {
		TypeInfo<unsigned long long >::parseFromBinaryStream(&deedObjectID, stream);
		return true;
	}

	if (_name == "lotSize") {
		TypeInfo<int >::parseFromBinaryStream(&lotSize, stream);
		return true;
	}

	if (_name == "destroyCode") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&destroyCode, stream);
		return true;
	}

	if (_name == "baseMaintenanceRate") {
		TypeInfo<int >::parseFromBinaryStream(&baseMaintenanceRate, stream);
		return true;
	}

	if (_name == "basePowerRate") {
		TypeInfo<int >::parseFromBinaryStream(&basePowerRate, stream);
		return true;
	}

	if (_name == "surplusMaintenance") {
		TypeInfo<float >::parseFromBinaryStream(&surplusMaintenance, stream);
		return true;
	}

	if (_name == "surplusPower") {
		TypeInfo<float >::parseFromBinaryStream(&surplusPower, stream);
		return true;
	}

	if (_name == "length") {
		TypeInfo<int >::parseFromBinaryStream(&length, stream);
		return true;
	}

	if (_name == "width") {
		TypeInfo<int >::parseFromBinaryStream(&width, stream);
		return true;
	}


	return false;
}

void StructureObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = StructureObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int StructureObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "structurePermissionList";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<StructurePermissionList >::toBinaryStream(&structurePermissionList, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "maintenanceExpires";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<Time >::toBinaryStream(&maintenanceExpires, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "powerExpires";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<Time >::toBinaryStream(&powerExpires, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "ownerObjectID";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned long long >::toBinaryStream(&ownerObjectID, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "deedObjectID";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned long long >::toBinaryStream(&deedObjectID, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "lotSize";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&lotSize, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "destroyCode";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned int >::toBinaryStream(&destroyCode, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "baseMaintenanceRate";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&baseMaintenanceRate, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "basePowerRate";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&basePowerRate, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "surplusMaintenance";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<float >::toBinaryStream(&surplusMaintenance, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "surplusPower";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<float >::toBinaryStream(&surplusPower, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "length";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&length, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "width";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&width, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 13 + TangibleObjectImplementation::writeObjectMembers(stream);
}

StructureObjectImplementation::StructureObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/structure/StructureObject.idl():  		Logger.setLoggingName("StructureObject");
	Logger::setLoggingName("StructureObject");
	// server/zone/objects/structure/StructureObject.idl():  		super.staticObject = false;
	TangibleObjectImplementation::staticObject = false;
	// server/zone/objects/structure/StructureObject.idl():  		lotSize = 0;
	lotSize = 0;
	// server/zone/objects/structure/StructureObject.idl():  		ownerObjectID = 0;
	ownerObjectID = 0;
	// server/zone/objects/structure/StructureObject.idl():  		deedObjectID = 0;
	deedObjectID = 0;
	// server/zone/objects/structure/StructureObject.idl():  		destroyCode = 0;
	destroyCode = 0;
	// server/zone/objects/structure/StructureObject.idl():  		baseMaintenanceRate = 0;
	baseMaintenanceRate = 0;
	// server/zone/objects/structure/StructureObject.idl():  		basePowerRate = 0;
	basePowerRate = 0;
	// server/zone/objects/structure/StructureObject.idl():  		surplusMaintenance = 0;
	surplusMaintenance = 0;
	// server/zone/objects/structure/StructureObject.idl():  		surplusPower = 0;
	surplusPower = 0;
	// server/zone/objects/structure/StructureObject.idl():  		length = 0;
	length = 0;
	// server/zone/objects/structure/StructureObject.idl():  		width = 0;
	width = 0;
	// server/zone/objects/structure/StructureObject.idl():  		structureMaintenanceTask = null;
	structureMaintenanceTask = NULL;
}

void StructureObjectImplementation::createChildObjects() {
	// server/zone/objects/structure/StructureObject.idl():  		super.createChildObjects();
	TangibleObjectImplementation::createChildObjects();
}

int StructureObjectImplementation::notifyStructurePlaced(PlayerCreature* player) {
	// server/zone/objects/structure/StructureObject.idl():  		return 0;
	return 0;
}

bool StructureObjectImplementation::checkRequisitesForPlacement(PlayerCreature* player) {
	// server/zone/objects/structure/StructureObject.idl():  		return true;
	return true;
}

unsigned int StructureObjectImplementation::generateDestroyCode() {
	// server/zone/objects/structure/StructureObject.idl():  		destroyCode = System.random(899999) + 100000;
	destroyCode = System::random(899999) + 100000;
	// server/zone/objects/structure/StructureObject.idl():  		return destroyCode;
	return destroyCode;
}

bool StructureObjectImplementation::isValidDestroyCode(unsigned int code) {
	// server/zone/objects/structure/StructureObject.idl():  		return (destroyCode == code);
	return (destroyCode == code);
}

bool StructureObjectImplementation::isOnAdminList(SceneObject* obj) {
	// server/zone/objects/structure/StructureObject.idl():  		return structurePermissionList.isOnAdminList(obj.getObjectID());
	return (&structurePermissionList)->isOnAdminList(obj->getObjectID());
}

bool StructureObjectImplementation::isOnAdminList(unsigned long long oid) {
	// server/zone/objects/structure/StructureObject.idl():  		return structurePermissionList.isOnAdminList(oid);
	return (&structurePermissionList)->isOnAdminList(oid);
}

bool StructureObjectImplementation::isOnEntryList(SceneObject* obj) {
	// server/zone/objects/structure/StructureObject.idl():  		return structurePermissionList.isOnEntryList(obj.getObjectID());
	return (&structurePermissionList)->isOnEntryList(obj->getObjectID());
}

bool StructureObjectImplementation::isOnEntryList(unsigned long long oid) {
	// server/zone/objects/structure/StructureObject.idl():  		return structurePermissionList.isOnEntryList(oid);
	return (&structurePermissionList)->isOnEntryList(oid);
}

bool StructureObjectImplementation::isOnBanList(SceneObject* obj) {
	// server/zone/objects/structure/StructureObject.idl():  		return structurePermissionList.isOnBanList(obj.getObjectID());
	return (&structurePermissionList)->isOnBanList(obj->getObjectID());
}

bool StructureObjectImplementation::isOnBanList(unsigned long long oid) {
	// server/zone/objects/structure/StructureObject.idl():  		return structurePermissionList.isOnBanList(oid);
	return (&structurePermissionList)->isOnBanList(oid);
}

bool StructureObjectImplementation::isOnAccessList(SceneObject* obj) {
	// server/zone/objects/structure/StructureObject.idl():  		return false;
	return false;
}

bool StructureObjectImplementation::isOnAccessList(unsigned long long oid) {
	// server/zone/objects/structure/StructureObject.idl():  		return false;
	return false;
}

void StructureObjectImplementation::sendPermissionListTo(PlayerCreature* player, const String& listName) {
	// server/zone/objects/structure/StructureObject.idl():  		structurePermissionList.sendTo(player, listName);
	(&structurePermissionList)->sendTo(player, listName);
}

int StructureObjectImplementation::getRedeedCost() {
	// server/zone/objects/structure/StructureObject.idl():  		return (baseMaintenanceRate * 50);
	return (baseMaintenanceRate * 50);
}

unsigned long long StructureObjectImplementation::getOwnerObjectID() {
	// server/zone/objects/structure/StructureObject.idl():  		return ownerObjectID;
	return ownerObjectID;
}

unsigned long long StructureObjectImplementation::getDeedObjectID() {
	// server/zone/objects/structure/StructureObject.idl():  		return deedObjectID;
	return deedObjectID;
}

int StructureObjectImplementation::getLotSize() {
	// server/zone/objects/structure/StructureObject.idl():  		return lotSize;
	return lotSize;
}

unsigned int StructureObjectImplementation::getDestroyCode() {
	// server/zone/objects/structure/StructureObject.idl():  		return destroyCode;
	return destroyCode;
}

int StructureObjectImplementation::getBaseMaintenanceRate() {
	// server/zone/objects/structure/StructureObject.idl():  		return baseMaintenanceRate;
	return baseMaintenanceRate;
}

int StructureObjectImplementation::getBasePowerRate() {
	// server/zone/objects/structure/StructureObject.idl():  		return basePowerRate;
	return basePowerRate;
}

int StructureObjectImplementation::getSurplusMaintenance() {
	// server/zone/objects/structure/StructureObject.idl():  		return surplusMaintenance;
	return surplusMaintenance;
}

int StructureObjectImplementation::getSurplusPower() {
	// server/zone/objects/structure/StructureObject.idl():  		return surplusPower;
	return surplusPower;
}

bool StructureObjectImplementation::isPublicStructure() {
	// server/zone/objects/structure/StructureObject.idl():  		return false;
	return false;
}

void StructureObjectImplementation::setOwnerObjectID(unsigned long long objectID) {
	// server/zone/objects/structure/StructureObject.idl():  		structurePermissionList.removePermission(ownerObjectID, StructurePermissionList.OWNER);
	(&structurePermissionList)->removePermission(ownerObjectID, StructurePermissionList::OWNER);
	// server/zone/objects/structure/StructureObject.idl():  		ownerObjectID = objectID;
	ownerObjectID = objectID;
	// server/zone/objects/structure/StructureObject.idl():  		structurePermissionList.addPermission(objectID, StructurePermissionList.OWNER);
	(&structurePermissionList)->addPermission(objectID, StructurePermissionList::OWNER);
}

void StructureObjectImplementation::setDeedObjectID(unsigned long long deedID) {
	// server/zone/objects/structure/StructureObject.idl():  		deedObjectID = deedID;
	deedObjectID = deedID;
}

void StructureObjectImplementation::setLotSize(int lots) {
	// server/zone/objects/structure/StructureObject.idl():  		lotSize = lots;
	lotSize = lots;
}

void StructureObjectImplementation::setDestroyCode(unsigned int code) {
	// server/zone/objects/structure/StructureObject.idl():  		destroyCode = code;
	destroyCode = code;
}

void StructureObjectImplementation::setBaseMaintenanceRate(int rate) {
	// server/zone/objects/structure/StructureObject.idl():  		baseMaintenanceRate = rate;
	baseMaintenanceRate = rate;
}

void StructureObjectImplementation::setBasePowerRate(int rate) {
	// server/zone/objects/structure/StructureObject.idl():  		basePowerRate = rate;
	basePowerRate = rate;
}

void StructureObjectImplementation::setSurplusMaintenance(int surplus) {
	// server/zone/objects/structure/StructureObject.idl():  		surplusMaintenance = surplus;
	surplusMaintenance = surplus;
}

void StructureObjectImplementation::addMaintenance(int add) {
	// server/zone/objects/structure/StructureObject.idl():  		surplusMaintenance += add;
	surplusMaintenance += add;
}

void StructureObjectImplementation::setSurplusPower(int surplus) {
	// server/zone/objects/structure/StructureObject.idl():  		surplusPower = surplus;
	surplusPower = surplus;
}

void StructureObjectImplementation::addPower(int add) {
	// server/zone/objects/structure/StructureObject.idl():  		surplusPower += add;
	surplusPower += add;
}

void StructureObjectImplementation::setPublicStructure(bool privacy) {
}

bool StructureObjectImplementation::isStructureObject() {
	// server/zone/objects/structure/StructureObject.idl():  		return true;
	return true;
}

bool StructureObjectImplementation::isRedeedable() {
	// server/zone/objects/structure/StructureObject.idl():  		return (getRedeedCost() < (surplusMaintenance + 1));
	return (getRedeedCost() < (surplusMaintenance + 1));
}

int StructureObjectImplementation::getLength() {
	// server/zone/objects/structure/StructureObject.idl():  		return length;
	return length;
}

void StructureObjectImplementation::setLength(int len) {
	// server/zone/objects/structure/StructureObject.idl():  		length = len;
	length = len;
}

int StructureObjectImplementation::getWidth() {
	// server/zone/objects/structure/StructureObject.idl():  		return width;
	return width;
}

void StructureObjectImplementation::setWidth(int wid) {
	// server/zone/objects/structure/StructureObject.idl():  		width = wid;
	width = wid;
}

/*
 *	StructureObjectAdapter
 */

StructureObjectAdapter::StructureObjectAdapter(StructureObjectImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* StructureObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		initializeTransientMembers();
		break;
	case RPC_FINALIZE__:
		finalize();
		break;
	case RPC_CREATECHILDOBJECTS__:
		createChildObjects();
		break;
	case RPC_NOTIFYSTRUCTUREPLACED__PLAYERCREATURE_:
		resp->insertSignedInt(notifyStructurePlaced((PlayerCreature*) inv->getObjectParameter()));
		break;
	case RPC_CHECKREQUISITESFORPLACEMENT__PLAYERCREATURE_:
		resp->insertBoolean(checkRequisitesForPlacement((PlayerCreature*) inv->getObjectParameter()));
		break;
	case RPC_SENDSTATUSTO__PLAYERCREATURE_:
		sendStatusTo((PlayerCreature*) inv->getObjectParameter());
		break;
	case RPC_SENDDESTROYCONFIRMTO__PLAYERCREATURE_:
		sendDestroyConfirmTo((PlayerCreature*) inv->getObjectParameter());
		break;
	case RPC_SENDDESTROYCODETO__PLAYERCREATURE_:
		sendDestroyCodeTo((PlayerCreature*) inv->getObjectParameter());
		break;
	case RPC_SENDMANAGEMAINTENANCETO__PLAYERCREATURE_:
		sendManageMaintenanceTo((PlayerCreature*) inv->getObjectParameter());
		break;
	case RPC_SENDCHANGENAMEPROMPTTO__PLAYERCREATURE_:
		sendChangeNamePromptTo((PlayerCreature*) inv->getObjectParameter());
		break;
	case RPC_GETTIMESTRING__INT_:
		resp->insertAscii(getTimeString(inv->getUnsignedIntParameter()));
		break;
	case RPC_GENERATEDESTROYCODE__:
		resp->insertInt(generateDestroyCode());
		break;
	case RPC_ISVALIDDESTROYCODE__INT_:
		resp->insertBoolean(isValidDestroyCode(inv->getUnsignedIntParameter()));
		break;
	case RPC_SCHEDULEMAINTENANCEEXPIRATIONEVENT__:
		scheduleMaintenanceExpirationEvent();
		break;
	case RPC_ISONADMINLIST__SCENEOBJECT_:
		resp->insertBoolean(isOnAdminList((SceneObject*) inv->getObjectParameter()));
		break;
	case RPC_ISONADMINLIST__LONG_:
		resp->insertBoolean(isOnAdminList(inv->getUnsignedLongParameter()));
		break;
	case RPC_ISONENTRYLIST__SCENEOBJECT_:
		resp->insertBoolean(isOnEntryList((SceneObject*) inv->getObjectParameter()));
		break;
	case RPC_ISONENTRYLIST__LONG_:
		resp->insertBoolean(isOnEntryList(inv->getUnsignedLongParameter()));
		break;
	case RPC_ISONBANLIST__SCENEOBJECT_:
		resp->insertBoolean(isOnBanList((SceneObject*) inv->getObjectParameter()));
		break;
	case RPC_ISONBANLIST__LONG_:
		resp->insertBoolean(isOnBanList(inv->getUnsignedLongParameter()));
		break;
	case RPC_ISOWNEROF__SCENEOBJECT_:
		resp->insertBoolean(isOwnerOf((SceneObject*) inv->getObjectParameter()));
		break;
	case RPC_ISOWNEROF__LONG_:
		resp->insertBoolean(isOwnerOf(inv->getUnsignedLongParameter()));
		break;
	case RPC_ISONACCESSLIST__SCENEOBJECT_:
		resp->insertBoolean(isOnAccessList((SceneObject*) inv->getObjectParameter()));
		break;
	case RPC_ISONACCESSLIST__LONG_:
		resp->insertBoolean(isOnAccessList(inv->getUnsignedLongParameter()));
		break;
	case RPC_SENDPERMISSIONLISTTO__PLAYERCREATURE_STRING_:
		sendPermissionListTo((PlayerCreature*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_sendPermissionListTo__PlayerCreature_String_));
		break;
	case RPC_ADDPERMISSION__PLAYERCREATURE_PLAYERCREATURE_STRING_:
		resp->insertBoolean(addPermission((PlayerCreature*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter(), inv->getAsciiParameter(_param2_addPermission__PlayerCreature_PlayerCreature_String_)));
		break;
	case RPC_ADDPERMISSION__PLAYERCREATURE_STRING_STRING_:
		resp->insertBoolean(addPermission((PlayerCreature*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_addPermission__PlayerCreature_String_String_), inv->getAsciiParameter(_param2_addPermission__PlayerCreature_String_String_)));
		break;
	case RPC_REMOVEPERMISSION__PLAYERCREATURE_PLAYERCREATURE_STRING_:
		resp->insertBoolean(removePermission((PlayerCreature*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter(), inv->getAsciiParameter(_param2_removePermission__PlayerCreature_PlayerCreature_String_)));
		break;
	case RPC_REMOVEPERMISSION__PLAYERCREATURE_STRING_STRING_:
		resp->insertBoolean(removePermission((PlayerCreature*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_removePermission__PlayerCreature_String_String_), inv->getAsciiParameter(_param2_removePermission__PlayerCreature_String_String_)));
		break;
	case RPC_CREATEVENDOR__PLAYERCREATURE_:
		createVendor((PlayerCreature*) inv->getObjectParameter());
		break;
	case RPC_GETREDEEDCOST__:
		resp->insertSignedInt(getRedeedCost());
		break;
	case RPC_GETOWNEROBJECTID__:
		resp->insertLong(getOwnerObjectID());
		break;
	case RPC_GETDEEDOBJECTID__:
		resp->insertLong(getDeedObjectID());
		break;
	case RPC_GETLOTSIZE__:
		resp->insertSignedInt(getLotSize());
		break;
	case RPC_GETDESTROYCODE__:
		resp->insertInt(getDestroyCode());
		break;
	case RPC_GETBASEMAINTENANCERATE__:
		resp->insertSignedInt(getBaseMaintenanceRate());
		break;
	case RPC_GETBASEPOWERRATE__:
		resp->insertSignedInt(getBasePowerRate());
		break;
	case RPC_GETSURPLUSMAINTENANCE__:
		resp->insertSignedInt(getSurplusMaintenance());
		break;
	case RPC_GETSURPLUSPOWER__:
		resp->insertSignedInt(getSurplusPower());
		break;
	case RPC_ISPUBLICSTRUCTURE__:
		resp->insertBoolean(isPublicStructure());
		break;
	case RPC_SETOWNEROBJECTID__LONG_:
		setOwnerObjectID(inv->getUnsignedLongParameter());
		break;
	case RPC_SETDEEDOBJECTID__LONG_:
		setDeedObjectID(inv->getUnsignedLongParameter());
		break;
	case RPC_SETLOTSIZE__INT_:
		setLotSize(inv->getSignedIntParameter());
		break;
	case RPC_SETDESTROYCODE__INT_:
		setDestroyCode(inv->getUnsignedIntParameter());
		break;
	case RPC_SETBASEMAINTENANCERATE__INT_:
		setBaseMaintenanceRate(inv->getSignedIntParameter());
		break;
	case RPC_SETBASEPOWERRATE__INT_:
		setBasePowerRate(inv->getSignedIntParameter());
		break;
	case RPC_SETSURPLUSMAINTENANCE__INT_:
		setSurplusMaintenance(inv->getSignedIntParameter());
		break;
	case RPC_ADDMAINTENANCE__INT_:
		addMaintenance(inv->getSignedIntParameter());
		break;
	case RPC_SETSURPLUSPOWER__INT_:
		setSurplusPower(inv->getSignedIntParameter());
		break;
	case RPC_ADDPOWER__INT_:
		addPower(inv->getSignedIntParameter());
		break;
	case RPC_SETPUBLICSTRUCTURE__BOOL_:
		setPublicStructure(inv->getBooleanParameter());
		break;
	case RPC_ISSTRUCTUREOBJECT__:
		resp->insertBoolean(isStructureObject());
		break;
	case RPC_ISREDEEDABLE__:
		resp->insertBoolean(isRedeedable());
		break;
	case RPC_GETLENGTH__:
		resp->insertSignedInt(getLength());
		break;
	case RPC_SETLENGTH__INT_:
		setLength(inv->getSignedIntParameter());
		break;
	case RPC_GETWIDTH__:
		resp->insertSignedInt(getWidth());
		break;
	case RPC_SETWIDTH__INT_:
		setWidth(inv->getSignedIntParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void StructureObjectAdapter::initializeTransientMembers() {
	((StructureObjectImplementation*) impl)->initializeTransientMembers();
}

void StructureObjectAdapter::finalize() {
	((StructureObjectImplementation*) impl)->finalize();
}

void StructureObjectAdapter::createChildObjects() {
	((StructureObjectImplementation*) impl)->createChildObjects();
}

int StructureObjectAdapter::notifyStructurePlaced(PlayerCreature* player) {
	return ((StructureObjectImplementation*) impl)->notifyStructurePlaced(player);
}

bool StructureObjectAdapter::checkRequisitesForPlacement(PlayerCreature* player) {
	return ((StructureObjectImplementation*) impl)->checkRequisitesForPlacement(player);
}

void StructureObjectAdapter::sendStatusTo(PlayerCreature* player) {
	((StructureObjectImplementation*) impl)->sendStatusTo(player);
}

void StructureObjectAdapter::sendDestroyConfirmTo(PlayerCreature* player) {
	((StructureObjectImplementation*) impl)->sendDestroyConfirmTo(player);
}

void StructureObjectAdapter::sendDestroyCodeTo(PlayerCreature* player) {
	((StructureObjectImplementation*) impl)->sendDestroyCodeTo(player);
}

void StructureObjectAdapter::sendManageMaintenanceTo(PlayerCreature* player) {
	((StructureObjectImplementation*) impl)->sendManageMaintenanceTo(player);
}

void StructureObjectAdapter::sendChangeNamePromptTo(PlayerCreature* player) {
	((StructureObjectImplementation*) impl)->sendChangeNamePromptTo(player);
}

String StructureObjectAdapter::getTimeString(unsigned int timestamp) {
	return ((StructureObjectImplementation*) impl)->getTimeString(timestamp);
}

unsigned int StructureObjectAdapter::generateDestroyCode() {
	return ((StructureObjectImplementation*) impl)->generateDestroyCode();
}

bool StructureObjectAdapter::isValidDestroyCode(unsigned int code) {
	return ((StructureObjectImplementation*) impl)->isValidDestroyCode(code);
}

void StructureObjectAdapter::scheduleMaintenanceExpirationEvent() {
	((StructureObjectImplementation*) impl)->scheduleMaintenanceExpirationEvent();
}

bool StructureObjectAdapter::isOnAdminList(SceneObject* obj) {
	return ((StructureObjectImplementation*) impl)->isOnAdminList(obj);
}

bool StructureObjectAdapter::isOnAdminList(unsigned long long oid) {
	return ((StructureObjectImplementation*) impl)->isOnAdminList(oid);
}

bool StructureObjectAdapter::isOnEntryList(SceneObject* obj) {
	return ((StructureObjectImplementation*) impl)->isOnEntryList(obj);
}

bool StructureObjectAdapter::isOnEntryList(unsigned long long oid) {
	return ((StructureObjectImplementation*) impl)->isOnEntryList(oid);
}

bool StructureObjectAdapter::isOnBanList(SceneObject* obj) {
	return ((StructureObjectImplementation*) impl)->isOnBanList(obj);
}

bool StructureObjectAdapter::isOnBanList(unsigned long long oid) {
	return ((StructureObjectImplementation*) impl)->isOnBanList(oid);
}

bool StructureObjectAdapter::isOwnerOf(SceneObject* obj) {
	return ((StructureObjectImplementation*) impl)->isOwnerOf(obj);
}

bool StructureObjectAdapter::isOwnerOf(unsigned long long oid) {
	return ((StructureObjectImplementation*) impl)->isOwnerOf(oid);
}

bool StructureObjectAdapter::isOnAccessList(SceneObject* obj) {
	return ((StructureObjectImplementation*) impl)->isOnAccessList(obj);
}

bool StructureObjectAdapter::isOnAccessList(unsigned long long oid) {
	return ((StructureObjectImplementation*) impl)->isOnAccessList(oid);
}

void StructureObjectAdapter::sendPermissionListTo(PlayerCreature* player, const String& listName) {
	((StructureObjectImplementation*) impl)->sendPermissionListTo(player, listName);
}

bool StructureObjectAdapter::addPermission(PlayerCreature* player, PlayerCreature* targetPlayer, const String& listName) {
	return ((StructureObjectImplementation*) impl)->addPermission(player, targetPlayer, listName);
}

bool StructureObjectAdapter::addPermission(PlayerCreature* player, const String& targetPlayerName, const String& listName) {
	return ((StructureObjectImplementation*) impl)->addPermission(player, targetPlayerName, listName);
}

bool StructureObjectAdapter::removePermission(PlayerCreature* player, PlayerCreature* targetPlayer, const String& listName) {
	return ((StructureObjectImplementation*) impl)->removePermission(player, targetPlayer, listName);
}

bool StructureObjectAdapter::removePermission(PlayerCreature* player, const String& targetPlayerName, const String& listName) {
	return ((StructureObjectImplementation*) impl)->removePermission(player, targetPlayerName, listName);
}

void StructureObjectAdapter::createVendor(PlayerCreature* player) {
	((StructureObjectImplementation*) impl)->createVendor(player);
}

int StructureObjectAdapter::getRedeedCost() {
	return ((StructureObjectImplementation*) impl)->getRedeedCost();
}

unsigned long long StructureObjectAdapter::getOwnerObjectID() {
	return ((StructureObjectImplementation*) impl)->getOwnerObjectID();
}

unsigned long long StructureObjectAdapter::getDeedObjectID() {
	return ((StructureObjectImplementation*) impl)->getDeedObjectID();
}

int StructureObjectAdapter::getLotSize() {
	return ((StructureObjectImplementation*) impl)->getLotSize();
}

unsigned int StructureObjectAdapter::getDestroyCode() {
	return ((StructureObjectImplementation*) impl)->getDestroyCode();
}

int StructureObjectAdapter::getBaseMaintenanceRate() {
	return ((StructureObjectImplementation*) impl)->getBaseMaintenanceRate();
}

int StructureObjectAdapter::getBasePowerRate() {
	return ((StructureObjectImplementation*) impl)->getBasePowerRate();
}

int StructureObjectAdapter::getSurplusMaintenance() {
	return ((StructureObjectImplementation*) impl)->getSurplusMaintenance();
}

int StructureObjectAdapter::getSurplusPower() {
	return ((StructureObjectImplementation*) impl)->getSurplusPower();
}

bool StructureObjectAdapter::isPublicStructure() {
	return ((StructureObjectImplementation*) impl)->isPublicStructure();
}

void StructureObjectAdapter::setOwnerObjectID(unsigned long long objectID) {
	((StructureObjectImplementation*) impl)->setOwnerObjectID(objectID);
}

void StructureObjectAdapter::setDeedObjectID(unsigned long long deedID) {
	((StructureObjectImplementation*) impl)->setDeedObjectID(deedID);
}

void StructureObjectAdapter::setLotSize(int lots) {
	((StructureObjectImplementation*) impl)->setLotSize(lots);
}

void StructureObjectAdapter::setDestroyCode(unsigned int code) {
	((StructureObjectImplementation*) impl)->setDestroyCode(code);
}

void StructureObjectAdapter::setBaseMaintenanceRate(int rate) {
	((StructureObjectImplementation*) impl)->setBaseMaintenanceRate(rate);
}

void StructureObjectAdapter::setBasePowerRate(int rate) {
	((StructureObjectImplementation*) impl)->setBasePowerRate(rate);
}

void StructureObjectAdapter::setSurplusMaintenance(int surplus) {
	((StructureObjectImplementation*) impl)->setSurplusMaintenance(surplus);
}

void StructureObjectAdapter::addMaintenance(int add) {
	((StructureObjectImplementation*) impl)->addMaintenance(add);
}

void StructureObjectAdapter::setSurplusPower(int surplus) {
	((StructureObjectImplementation*) impl)->setSurplusPower(surplus);
}

void StructureObjectAdapter::addPower(int add) {
	((StructureObjectImplementation*) impl)->addPower(add);
}

void StructureObjectAdapter::setPublicStructure(bool privacy) {
	((StructureObjectImplementation*) impl)->setPublicStructure(privacy);
}

bool StructureObjectAdapter::isStructureObject() {
	return ((StructureObjectImplementation*) impl)->isStructureObject();
}

bool StructureObjectAdapter::isRedeedable() {
	return ((StructureObjectImplementation*) impl)->isRedeedable();
}

int StructureObjectAdapter::getLength() {
	return ((StructureObjectImplementation*) impl)->getLength();
}

void StructureObjectAdapter::setLength(int len) {
	((StructureObjectImplementation*) impl)->setLength(len);
}

int StructureObjectAdapter::getWidth() {
	return ((StructureObjectImplementation*) impl)->getWidth();
}

void StructureObjectAdapter::setWidth(int wid) {
	((StructureObjectImplementation*) impl)->setWidth(wid);
}

/*
 *	StructureObjectHelper
 */

StructureObjectHelper* StructureObjectHelper::staticInitializer = StructureObjectHelper::instance();

StructureObjectHelper::StructureObjectHelper() {
	className = "StructureObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void StructureObjectHelper::finalizeHelper() {
	StructureObjectHelper::finalize();
}

DistributedObject* StructureObjectHelper::instantiateObject() {
	return new StructureObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* StructureObjectHelper::instantiateServant() {
	return new StructureObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* StructureObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new StructureObjectAdapter((StructureObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

