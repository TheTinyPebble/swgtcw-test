/*
 *	server/zone/objects/auction/AuctionItem.cpp generated by engine3 IDL compiler 0.55
 */

#include "AuctionItem.h"

#include "AuctionItemImplementation.h"

/*
 *	AuctionItemStub
 */

AuctionItem::AuctionItem(unsigned long long objectid) : ManagedObject(DummyConstructorParameter::instance()) {
	_impl = new AuctionItemImplementation(objectid);
	_impl->_setStub(this);
}

AuctionItem::AuctionItem(unsigned long long objectid, String& name, int itemprice, int time, bool isauction, int type, String& owner) : ManagedObject(DummyConstructorParameter::instance()) {
	_impl = new AuctionItemImplementation(objectid, name, itemprice, time, isauction, type, owner);
	_impl->_setStub(this);
}

AuctionItem::AuctionItem(DummyConstructorParameter* param) : ManagedObject(param) {
}

AuctionItem::~AuctionItem() {
}

void AuctionItem::setLocation(String& planet, String& header, unsigned long long vendorid, int x, int z, bool vendor) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addAsciiParameter(planet);
		method.addAsciiParameter(header);
		method.addUnsignedLongParameter(vendorid);
		method.addSignedIntParameter(x);
		method.addSignedIntParameter(z);
		method.addBooleanParameter(vendor);

		method.executeWithVoidReturn();
	} else
		((AuctionItemImplementation*) _impl)->setLocation(planet, header, vendorid, x, z, vendor);
}

int AuctionItem::getPlanet() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		return method.executeWithSignedIntReturn();
	} else
		return ((AuctionItemImplementation*) _impl)->getPlanet();
}

unsigned long long AuctionItem::getID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((AuctionItemImplementation*) _impl)->getID();
}

unsigned long long AuctionItem::getOwnerID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((AuctionItemImplementation*) _impl)->getOwnerID();
}

String& AuctionItem::getTerminalTitle() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		method.executeWithAsciiReturn(_return_getTerminalTitle);
		return _return_getTerminalTitle;
	} else
		return ((AuctionItemImplementation*) _impl)->getTerminalTitle();
}

String& AuctionItem::getOwnerName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		method.executeWithAsciiReturn(_return_getOwnerName);
		return _return_getOwnerName;
	} else
		return ((AuctionItemImplementation*) _impl)->getOwnerName();
}

unsigned long long AuctionItem::getBuyerID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((AuctionItemImplementation*) _impl)->getBuyerID();
}

String& AuctionItem::getBidderName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		method.executeWithAsciiReturn(_return_getBidderName);
		return _return_getBidderName;
	} else
		return ((AuctionItemImplementation*) _impl)->getBidderName();
}

unsigned int AuctionItem::getItemType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((AuctionItemImplementation*) _impl)->getItemType();
}

bool AuctionItem::isSold() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		return method.executeWithBooleanReturn();
	} else
		return ((AuctionItemImplementation*) _impl)->isSold();
}

bool AuctionItem::isRemovedByOwner() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		return method.executeWithBooleanReturn();
	} else
		return ((AuctionItemImplementation*) _impl)->isRemovedByOwner();
}

unsigned long long AuctionItem::getVendorID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((AuctionItemImplementation*) _impl)->getVendorID();
}

bool AuctionItem::getAuction() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		return method.executeWithBooleanReturn();
	} else
		return ((AuctionItemImplementation*) _impl)->getAuction();
}

String& AuctionItem::getLocation() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);

		method.executeWithAsciiReturn(_return_getLocation);
		return _return_getLocation;
	} else
		return ((AuctionItemImplementation*) _impl)->getLocation();
}

int AuctionItem::getPrice() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);

		return method.executeWithSignedIntReturn();
	} else
		return ((AuctionItemImplementation*) _impl)->getPrice();
}

int AuctionItem::getLocationPointer() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);

		return method.executeWithSignedIntReturn();
	} else
		return ((AuctionItemImplementation*) _impl)->getLocationPointer();
}

int AuctionItem::getOwnerPointer() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);

		return method.executeWithSignedIntReturn();
	} else
		return ((AuctionItemImplementation*) _impl)->getOwnerPointer();
}

String& AuctionItem::getItemDescription() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);

		method.executeWithAsciiReturn(_return_getItemDescription);
		return _return_getItemDescription;
	} else
		return ((AuctionItemImplementation*) _impl)->getItemDescription();
}

String& AuctionItem::getItemName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);

		method.executeWithAsciiReturn(_return_getItemName);
		return _return_getItemName;
	} else
		return ((AuctionItemImplementation*) _impl)->getItemName();
}

unsigned int AuctionItem::getExpireTime() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((AuctionItemImplementation*) _impl)->getExpireTime();
}

void AuctionItem::setOwnerID(unsigned long long ownerid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);
		method.addUnsignedLongParameter(ownerid);

		method.executeWithVoidReturn();
	} else
		((AuctionItemImplementation*) _impl)->setOwnerID(ownerid);
}

void AuctionItem::setOwnerName(const String& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		((AuctionItemImplementation*) _impl)->setOwnerName(name);
}

void AuctionItem::setVendorID(unsigned long long vid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);
		method.addUnsignedLongParameter(vid);

		method.executeWithVoidReturn();
	} else
		((AuctionItemImplementation*) _impl)->setVendorID(vid);
}

void AuctionItem::setPlanet(int planet) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);
		method.addSignedIntParameter(planet);

		method.executeWithVoidReturn();
	} else
		((AuctionItemImplementation*) _impl)->setPlanet(planet);
}

void AuctionItem::setBidderName(const String& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		((AuctionItemImplementation*) _impl)->setBidderName(name);
}

void AuctionItem::setSold(bool sld) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);
		method.addBooleanParameter(sld);

		method.executeWithVoidReturn();
	} else
		((AuctionItemImplementation*) _impl)->setSold(sld);
}

void AuctionItem::setRemovedByOwner(bool rmv) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);
		method.addBooleanParameter(rmv);

		method.executeWithVoidReturn();
	} else
		((AuctionItemImplementation*) _impl)->setRemovedByOwner(rmv);
}

void AuctionItem::setLocationPointer(int locpt) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);
		method.addSignedIntParameter(locpt);

		method.executeWithVoidReturn();
	} else
		((AuctionItemImplementation*) _impl)->setLocationPointer(locpt);
}

void AuctionItem::setItemType(int type) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);
		method.addSignedIntParameter(type);

		method.executeWithVoidReturn();
	} else
		((AuctionItemImplementation*) _impl)->setItemType(type);
}

void AuctionItem::setItemName(const String& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		((AuctionItemImplementation*) _impl)->setItemName(name);
}

void AuctionItem::setItemDescription(const String& description) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 36);
		method.addAsciiParameter(description);

		method.executeWithVoidReturn();
	} else
		((AuctionItemImplementation*) _impl)->setItemDescription(description);
}

void AuctionItem::setPrice(int prc) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 37);
		method.addSignedIntParameter(prc);

		method.executeWithVoidReturn();
	} else
		((AuctionItemImplementation*) _impl)->setPrice(prc);
}

void AuctionItem::setAuction(bool val) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 38);
		method.addBooleanParameter(val);

		method.executeWithVoidReturn();
	} else
		((AuctionItemImplementation*) _impl)->setAuction(val);
}

void AuctionItem::setBuyerID(unsigned long long bid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 39);
		method.addUnsignedLongParameter(bid);

		method.executeWithVoidReturn();
	} else
		((AuctionItemImplementation*) _impl)->setBuyerID(bid);
}

void AuctionItem::setExpireTime(unsigned int expiretime) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 40);
		method.addUnsignedIntParameter(expiretime);

		method.executeWithVoidReturn();
	} else
		((AuctionItemImplementation*) _impl)->setExpireTime(expiretime);
}

void AuctionItem::setOwnerPointer(int ownpt) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 41);
		method.addSignedIntParameter(ownpt);

		method.executeWithVoidReturn();
	} else
		((AuctionItemImplementation*) _impl)->setOwnerPointer(ownpt);
}

/*
 *	AuctionItemAdapter
 */

AuctionItemAdapter::AuctionItemAdapter(AuctionItemImplementation* obj) : ManagedObjectAdapter(obj) {
}

Packet* AuctionItemAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		setLocation(inv->getAsciiParameter(_param0_setLocation__String_String_long_int_int_bool_), inv->getAsciiParameter(_param1_setLocation__String_String_long_int_int_bool_), inv->getUnsignedLongParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 7:
		resp->insertSignedInt(getPlanet());
		break;
	case 8:
		resp->insertLong(getID());
		break;
	case 9:
		resp->insertLong(getOwnerID());
		break;
	case 10:
		resp->insertAscii(getTerminalTitle());
		break;
	case 11:
		resp->insertAscii(getOwnerName());
		break;
	case 12:
		resp->insertLong(getBuyerID());
		break;
	case 13:
		resp->insertAscii(getBidderName());
		break;
	case 14:
		resp->insertInt(getItemType());
		break;
	case 15:
		resp->insertBoolean(isSold());
		break;
	case 16:
		resp->insertBoolean(isRemovedByOwner());
		break;
	case 17:
		resp->insertLong(getVendorID());
		break;
	case 18:
		resp->insertBoolean(getAuction());
		break;
	case 19:
		resp->insertAscii(getLocation());
		break;
	case 20:
		resp->insertSignedInt(getPrice());
		break;
	case 21:
		resp->insertSignedInt(getLocationPointer());
		break;
	case 22:
		resp->insertSignedInt(getOwnerPointer());
		break;
	case 23:
		resp->insertAscii(getItemDescription());
		break;
	case 24:
		resp->insertAscii(getItemName());
		break;
	case 25:
		resp->insertInt(getExpireTime());
		break;
	case 26:
		setOwnerID(inv->getUnsignedLongParameter());
		break;
	case 27:
		setOwnerName(inv->getAsciiParameter(_param0_setOwnerName__String_));
		break;
	case 28:
		setVendorID(inv->getUnsignedLongParameter());
		break;
	case 29:
		setPlanet(inv->getSignedIntParameter());
		break;
	case 30:
		setBidderName(inv->getAsciiParameter(_param0_setBidderName__String_));
		break;
	case 31:
		setSold(inv->getBooleanParameter());
		break;
	case 32:
		setRemovedByOwner(inv->getBooleanParameter());
		break;
	case 33:
		setLocationPointer(inv->getSignedIntParameter());
		break;
	case 34:
		setItemType(inv->getSignedIntParameter());
		break;
	case 35:
		setItemName(inv->getAsciiParameter(_param0_setItemName__String_));
		break;
	case 36:
		setItemDescription(inv->getAsciiParameter(_param0_setItemDescription__String_));
		break;
	case 37:
		setPrice(inv->getSignedIntParameter());
		break;
	case 38:
		setAuction(inv->getBooleanParameter());
		break;
	case 39:
		setBuyerID(inv->getUnsignedLongParameter());
		break;
	case 40:
		setExpireTime(inv->getUnsignedIntParameter());
		break;
	case 41:
		setOwnerPointer(inv->getSignedIntParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void AuctionItemAdapter::setLocation(String& planet, String& header, unsigned long long vendorid, int x, int z, bool vendor) {
	return ((AuctionItemImplementation*) impl)->setLocation(planet, header, vendorid, x, z, vendor);
}

int AuctionItemAdapter::getPlanet() {
	return ((AuctionItemImplementation*) impl)->getPlanet();
}

unsigned long long AuctionItemAdapter::getID() {
	return ((AuctionItemImplementation*) impl)->getID();
}

unsigned long long AuctionItemAdapter::getOwnerID() {
	return ((AuctionItemImplementation*) impl)->getOwnerID();
}

String& AuctionItemAdapter::getTerminalTitle() {
	return ((AuctionItemImplementation*) impl)->getTerminalTitle();
}

String& AuctionItemAdapter::getOwnerName() {
	return ((AuctionItemImplementation*) impl)->getOwnerName();
}

unsigned long long AuctionItemAdapter::getBuyerID() {
	return ((AuctionItemImplementation*) impl)->getBuyerID();
}

String& AuctionItemAdapter::getBidderName() {
	return ((AuctionItemImplementation*) impl)->getBidderName();
}

unsigned int AuctionItemAdapter::getItemType() {
	return ((AuctionItemImplementation*) impl)->getItemType();
}

bool AuctionItemAdapter::isSold() {
	return ((AuctionItemImplementation*) impl)->isSold();
}

bool AuctionItemAdapter::isRemovedByOwner() {
	return ((AuctionItemImplementation*) impl)->isRemovedByOwner();
}

unsigned long long AuctionItemAdapter::getVendorID() {
	return ((AuctionItemImplementation*) impl)->getVendorID();
}

bool AuctionItemAdapter::getAuction() {
	return ((AuctionItemImplementation*) impl)->getAuction();
}

String& AuctionItemAdapter::getLocation() {
	return ((AuctionItemImplementation*) impl)->getLocation();
}

int AuctionItemAdapter::getPrice() {
	return ((AuctionItemImplementation*) impl)->getPrice();
}

int AuctionItemAdapter::getLocationPointer() {
	return ((AuctionItemImplementation*) impl)->getLocationPointer();
}

int AuctionItemAdapter::getOwnerPointer() {
	return ((AuctionItemImplementation*) impl)->getOwnerPointer();
}

String& AuctionItemAdapter::getItemDescription() {
	return ((AuctionItemImplementation*) impl)->getItemDescription();
}

String& AuctionItemAdapter::getItemName() {
	return ((AuctionItemImplementation*) impl)->getItemName();
}

unsigned int AuctionItemAdapter::getExpireTime() {
	return ((AuctionItemImplementation*) impl)->getExpireTime();
}

void AuctionItemAdapter::setOwnerID(unsigned long long ownerid) {
	return ((AuctionItemImplementation*) impl)->setOwnerID(ownerid);
}

void AuctionItemAdapter::setOwnerName(const String& name) {
	return ((AuctionItemImplementation*) impl)->setOwnerName(name);
}

void AuctionItemAdapter::setVendorID(unsigned long long vid) {
	return ((AuctionItemImplementation*) impl)->setVendorID(vid);
}

void AuctionItemAdapter::setPlanet(int planet) {
	return ((AuctionItemImplementation*) impl)->setPlanet(planet);
}

void AuctionItemAdapter::setBidderName(const String& name) {
	return ((AuctionItemImplementation*) impl)->setBidderName(name);
}

void AuctionItemAdapter::setSold(bool sld) {
	return ((AuctionItemImplementation*) impl)->setSold(sld);
}

void AuctionItemAdapter::setRemovedByOwner(bool rmv) {
	return ((AuctionItemImplementation*) impl)->setRemovedByOwner(rmv);
}

void AuctionItemAdapter::setLocationPointer(int locpt) {
	return ((AuctionItemImplementation*) impl)->setLocationPointer(locpt);
}

void AuctionItemAdapter::setItemType(int type) {
	return ((AuctionItemImplementation*) impl)->setItemType(type);
}

void AuctionItemAdapter::setItemName(const String& name) {
	return ((AuctionItemImplementation*) impl)->setItemName(name);
}

void AuctionItemAdapter::setItemDescription(const String& description) {
	return ((AuctionItemImplementation*) impl)->setItemDescription(description);
}

void AuctionItemAdapter::setPrice(int prc) {
	return ((AuctionItemImplementation*) impl)->setPrice(prc);
}

void AuctionItemAdapter::setAuction(bool val) {
	return ((AuctionItemImplementation*) impl)->setAuction(val);
}

void AuctionItemAdapter::setBuyerID(unsigned long long bid) {
	return ((AuctionItemImplementation*) impl)->setBuyerID(bid);
}

void AuctionItemAdapter::setExpireTime(unsigned int expiretime) {
	return ((AuctionItemImplementation*) impl)->setExpireTime(expiretime);
}

void AuctionItemAdapter::setOwnerPointer(int ownpt) {
	return ((AuctionItemImplementation*) impl)->setOwnerPointer(ownpt);
}

/*
 *	AuctionItemHelper
 */

AuctionItemHelper* AuctionItemHelper::staticInitializer = AuctionItemHelper::instance();

AuctionItemHelper::AuctionItemHelper() {
	className = "AuctionItem";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void AuctionItemHelper::finalizeHelper() {
	AuctionItemHelper::finalize();
}

DistributedObject* AuctionItemHelper::instantiateObject() {
	return new AuctionItem(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* AuctionItemHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new AuctionItemAdapter((AuctionItemImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	AuctionItemServant
 */

AuctionItemServant::AuctionItemServant() : ManagedObjectImplementation() {
	_classHelper = AuctionItemHelper::instance();
}

AuctionItemServant::~AuctionItemServant() {
}

void AuctionItemServant::_setStub(DistributedObjectStub* stub) {
	_this = (AuctionItem*) stub;
	ManagedObjectServant::_setStub(stub);
}

DistributedObjectStub* AuctionItemServant::_getStub() {
	return _this;
}

