/*
 *	server/zone/objects/auction/AuctionItem.cpp generated by engine3 IDL compiler 0.60
 */

#include "AuctionItem.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/scene/SceneObject.h"

/*
 *	AuctionItemStub
 */

enum {RPC_COMPARETO__AUCTIONITEM_ = 6,RPC_NOTIFYLOADFROMDATABASE__,RPC_SETVENDORID__LONG_,RPC_SETITEMNAME__STRING_,RPC_SETITEMDESCRIPTION__STRING_,RPC_SETPRICE__INT_,RPC_SETAUCTIONEDITEMOBJECTID__LONG_,RPC_SETITEMTYPE__INT_,RPC_SETOWNERID__LONG_,RPC_SETOFFERTOID__LONG_,RPC_SETBIDDERNAME__STRING_,RPC_SETOWNERNAME__STRING_,RPC_SETAUCTION__BOOL_,RPC_SETAUCTIONPREMIUM__,RPC_CLEARAUCTIONWITHDRAW__,RPC_SETONBAZAAR__BOOL_,RPC_SETEXPIRETIME__INT_,RPC_SETBUYERID__LONG_,RPC_SETSTATUS__INT_,RPC_ISONBAZAAR__,RPC_ISAUCTION__,RPC_GETSTATUS__,RPC_GETVENDORID__,RPC_GETAUCTIONEDITEMOBJECTID__,RPC_GETOWNERID__,RPC_GETOFFERTOID__,RPC_SETSEARCHABLE__BOOL_,RPC_SETVENDORUID__STRING_,RPC_GETVENDORUID__,RPC_GETOWNERNAME__,RPC_GETITEMNAME__,RPC_GETEXPIRETIME__,RPC_GETPRICE__,RPC_GETITEMTYPE__,RPC_GETBUYERID__,RPC_GETBIDDERNAME__,RPC_GETITEMDESCRIPTION__,RPC_GETAUCTIONOPTIONS__,RPC_ISPREMIUMAUCTION__,RPC_ISOWNER__CREATUREOBJECT_,RPC_ISAUCTIONOBJECT__,RPC_ISSEARCHABLE__};

AuctionItem::AuctionItem(unsigned long long objectid) : ManagedObject(DummyConstructorParameter::instance()) {
	AuctionItemImplementation* _implementation = new AuctionItemImplementation(objectid);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("AuctionItem");
}

AuctionItem::AuctionItem(DummyConstructorParameter* param) : ManagedObject(param) {
	_setClassName("AuctionItem");
}

AuctionItem::~AuctionItem() {
}



int AuctionItem::compareTo(AuctionItem* obj) {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_COMPARETO__AUCTIONITEM_);
		method.addObjectParameter(obj);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->compareTo(obj);
}

void AuctionItem::notifyLoadFromDatabase() {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYLOADFROMDATABASE__);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyLoadFromDatabase();
}

void AuctionItem::setVendorID(unsigned long long val) {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETVENDORID__LONG_);
		method.addUnsignedLongParameter(val);

		method.executeWithVoidReturn();
	} else
		_implementation->setVendorID(val);
}

void AuctionItem::setItemName(const String& name) {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETITEMNAME__STRING_);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		_implementation->setItemName(name);
}

void AuctionItem::setItemDescription(const String& descr) {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETITEMDESCRIPTION__STRING_);
		method.addAsciiParameter(descr);

		method.executeWithVoidReturn();
	} else
		_implementation->setItemDescription(descr);
}

void AuctionItem::setPrice(int newPrice) {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPRICE__INT_);
		method.addSignedIntParameter(newPrice);

		method.executeWithVoidReturn();
	} else
		_implementation->setPrice(newPrice);
}

void AuctionItem::setAuctionedItemObjectID(unsigned long long objectID) {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETAUCTIONEDITEMOBJECTID__LONG_);
		method.addUnsignedLongParameter(objectID);

		method.executeWithVoidReturn();
	} else
		_implementation->setAuctionedItemObjectID(objectID);
}

void AuctionItem::setItemType(int type) {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETITEMTYPE__INT_);
		method.addSignedIntParameter(type);

		method.executeWithVoidReturn();
	} else
		_implementation->setItemType(type);
}

void AuctionItem::setOwnerID(unsigned long long ownerObjectID) {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETOWNERID__LONG_);
		method.addUnsignedLongParameter(ownerObjectID);

		method.executeWithVoidReturn();
	} else
		_implementation->setOwnerID(ownerObjectID);
}

void AuctionItem::setOfferToID(unsigned long long vendorOwnerID) {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETOFFERTOID__LONG_);
		method.addUnsignedLongParameter(vendorOwnerID);

		method.executeWithVoidReturn();
	} else
		_implementation->setOfferToID(vendorOwnerID);
}

void AuctionItem::setBidderName(const String& name) {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETBIDDERNAME__STRING_);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		_implementation->setBidderName(name);
}

void AuctionItem::setOwnerName(const String& name) {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETOWNERNAME__STRING_);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		_implementation->setOwnerName(name);
}

void AuctionItem::setAuction(bool isAuction) {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETAUCTION__BOOL_);
		method.addBooleanParameter(isAuction);

		method.executeWithVoidReturn();
	} else
		_implementation->setAuction(isAuction);
}

void AuctionItem::setAuctionPremium() {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETAUCTIONPREMIUM__);

		method.executeWithVoidReturn();
	} else
		_implementation->setAuctionPremium();
}

void AuctionItem::clearAuctionWithdraw() {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLEARAUCTIONWITHDRAW__);

		method.executeWithVoidReturn();
	} else
		_implementation->clearAuctionWithdraw();
}

void AuctionItem::setOnBazaar(bool val) {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETONBAZAAR__BOOL_);
		method.addBooleanParameter(val);

		method.executeWithVoidReturn();
	} else
		_implementation->setOnBazaar(val);
}

void AuctionItem::setExpireTime(int time) {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETEXPIRETIME__INT_);
		method.addSignedIntParameter(time);

		method.executeWithVoidReturn();
	} else
		_implementation->setExpireTime(time);
}

void AuctionItem::setBuyerID(unsigned long long id) {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETBUYERID__LONG_);
		method.addUnsignedLongParameter(id);

		method.executeWithVoidReturn();
	} else
		_implementation->setBuyerID(id);
}

void AuctionItem::setStatus(int value) {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSTATUS__INT_);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setStatus(value);
}

bool AuctionItem::isOnBazaar() {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISONBAZAAR__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isOnBazaar();
}

bool AuctionItem::isAuction() {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISAUCTION__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isAuction();
}

int AuctionItem::getStatus() {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSTATUS__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getStatus();
}

unsigned long long AuctionItem::getVendorID() {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETVENDORID__);

		return method.executeWithUnsignedLongReturn();
	} else
		return _implementation->getVendorID();
}

unsigned long long AuctionItem::getAuctionedItemObjectID() {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETAUCTIONEDITEMOBJECTID__);

		return method.executeWithUnsignedLongReturn();
	} else
		return _implementation->getAuctionedItemObjectID();
}

unsigned long long AuctionItem::getOwnerID() {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETOWNERID__);

		return method.executeWithUnsignedLongReturn();
	} else
		return _implementation->getOwnerID();
}

unsigned long long AuctionItem::getOfferToID() {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETOFFERTOID__);

		return method.executeWithUnsignedLongReturn();
	} else
		return _implementation->getOfferToID();
}

void AuctionItem::setSearchable(bool enabled) {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSEARCHABLE__BOOL_);
		method.addBooleanParameter(enabled);

		method.executeWithVoidReturn();
	} else
		_implementation->setSearchable(enabled);
}

void AuctionItem::setVendorUID(const String& uid) {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETVENDORUID__STRING_);
		method.addAsciiParameter(uid);

		method.executeWithVoidReturn();
	} else
		_implementation->setVendorUID(uid);
}

const String AuctionItem::getVendorUID() {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETVENDORUID__);

		String _return_getVendorUID;
		method.executeWithAsciiReturn(_return_getVendorUID);
		return _return_getVendorUID;
	} else
		return _implementation->getVendorUID();
}

String AuctionItem::getOwnerName() {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETOWNERNAME__);

		String _return_getOwnerName;
		method.executeWithAsciiReturn(_return_getOwnerName);
		return _return_getOwnerName;
	} else
		return _implementation->getOwnerName();
}

String AuctionItem::getItemName() {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETITEMNAME__);

		String _return_getItemName;
		method.executeWithAsciiReturn(_return_getItemName);
		return _return_getItemName;
	} else
		return _implementation->getItemName();
}

int AuctionItem::getExpireTime() {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETEXPIRETIME__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getExpireTime();
}

int AuctionItem::getPrice() {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPRICE__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getPrice();
}

int AuctionItem::getItemType() {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETITEMTYPE__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getItemType();
}

unsigned long long AuctionItem::getBuyerID() {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETBUYERID__);

		return method.executeWithUnsignedLongReturn();
	} else
		return _implementation->getBuyerID();
}

String AuctionItem::getBidderName() {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETBIDDERNAME__);

		String _return_getBidderName;
		method.executeWithAsciiReturn(_return_getBidderName);
		return _return_getBidderName;
	} else
		return _implementation->getBidderName();
}

String AuctionItem::getItemDescription() {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETITEMDESCRIPTION__);

		String _return_getItemDescription;
		method.executeWithAsciiReturn(_return_getItemDescription);
		return _return_getItemDescription;
	} else
		return _implementation->getItemDescription();
}

int AuctionItem::getAuctionOptions() {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETAUCTIONOPTIONS__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getAuctionOptions();
}

bool AuctionItem::isPremiumAuction() {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISPREMIUMAUCTION__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isPremiumAuction();
}

bool AuctionItem::isOwner(CreatureObject* player) {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISOWNER__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isOwner(player);
}

bool AuctionItem::isAuctionObject() {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISAUCTIONOBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isAuctionObject();
}

bool AuctionItem::isSearchable() {
	AuctionItemImplementation* _implementation = static_cast<AuctionItemImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSEARCHABLE__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isSearchable();
}

DistributedObjectServant* AuctionItem::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

void AuctionItem::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	AuctionItemImplementation
 */

AuctionItemImplementation::AuctionItemImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}


AuctionItemImplementation::~AuctionItemImplementation() {
}


void AuctionItemImplementation::finalize() {
}

void AuctionItemImplementation::_initializeImplementation() {
	_setClassHelper(AuctionItemHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void AuctionItemImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<AuctionItem*>(stub);
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* AuctionItemImplementation::_getStub() {
	return _this.get();
}

AuctionItemImplementation::operator const AuctionItem*() {
	return _this.get();
}

void AuctionItemImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void AuctionItemImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void AuctionItemImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void AuctionItemImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void AuctionItemImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void AuctionItemImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void AuctionItemImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void AuctionItemImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("AuctionItem");

}

void AuctionItemImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(AuctionItemImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool AuctionItemImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ManagedObjectImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "AuctionItem.vendorID") {
		TypeInfo<unsigned long long >::parseFromBinaryStream(&vendorID, stream);
		return true;
	}

	if (_name == "AuctionItem.auctionedItemObjectID") {
		TypeInfo<unsigned long long >::parseFromBinaryStream(&auctionedItemObjectID, stream);
		return true;
	}

	if (_name == "AuctionItem.itemType") {
		TypeInfo<int >::parseFromBinaryStream(&itemType, stream);
		return true;
	}

	if (_name == "AuctionItem.ownerID") {
		TypeInfo<unsigned long long >::parseFromBinaryStream(&ownerID, stream);
		return true;
	}

	if (_name == "AuctionItem.ownerName") {
		TypeInfo<String >::parseFromBinaryStream(&ownerName, stream);
		return true;
	}

	if (_name == "AuctionItem.bidderName") {
		TypeInfo<String >::parseFromBinaryStream(&bidderName, stream);
		return true;
	}

	if (_name == "AuctionItem.offerToID") {
		TypeInfo<unsigned long long >::parseFromBinaryStream(&offerToID, stream);
		return true;
	}

	if (_name == "AuctionItem.vuid") {
		TypeInfo<String >::parseFromBinaryStream(&vuid, stream);
		return true;
	}

	if (_name == "AuctionItem.itemName") {
		TypeInfo<String >::parseFromBinaryStream(&itemName, stream);
		return true;
	}

	if (_name == "AuctionItem.itemDescription") {
		TypeInfo<String >::parseFromBinaryStream(&itemDescription, stream);
		return true;
	}

	if (_name == "AuctionItem.price") {
		TypeInfo<int >::parseFromBinaryStream(&price, stream);
		return true;
	}

	if (_name == "AuctionItem.auction") {
		TypeInfo<bool >::parseFromBinaryStream(&auction, stream);
		return true;
	}

	if (_name == "AuctionItem.status") {
		TypeInfo<int >::parseFromBinaryStream(&status, stream);
		return true;
	}

	if (_name == "AuctionItem.onBazaar") {
		TypeInfo<bool >::parseFromBinaryStream(&onBazaar, stream);
		return true;
	}

	if (_name == "AuctionItem.searchable") {
		TypeInfo<bool >::parseFromBinaryStream(&searchable, stream);
		return true;
	}

	if (_name == "AuctionItem.buyerID") {
		TypeInfo<unsigned long long >::parseFromBinaryStream(&buyerID, stream);
		return true;
	}

	if (_name == "AuctionItem.expireTime") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&expireTime, stream);
		return true;
	}

	if (_name == "AuctionItem.updated") {
		TypeInfo<bool >::parseFromBinaryStream(&updated, stream);
		return true;
	}

	if (_name == "AuctionItem.auctionOptions") {
		TypeInfo<int >::parseFromBinaryStream(&auctionOptions, stream);
		return true;
	}


	return false;
}

void AuctionItemImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = AuctionItemImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int AuctionItemImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedObjectImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;
	_name = "AuctionItem.vendorID";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&vendorID, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "AuctionItem.auctionedItemObjectID";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&auctionedItemObjectID, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "AuctionItem.itemType";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&itemType, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "AuctionItem.ownerID";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&ownerID, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "AuctionItem.ownerName";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&ownerName, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "AuctionItem.bidderName";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&bidderName, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "AuctionItem.offerToID";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&offerToID, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "AuctionItem.vuid";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&vuid, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "AuctionItem.itemName";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&itemName, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "AuctionItem.itemDescription";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&itemDescription, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "AuctionItem.price";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&price, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "AuctionItem.auction";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&auction, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "AuctionItem.status";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&status, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "AuctionItem.onBazaar";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&onBazaar, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "AuctionItem.searchable";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&searchable, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "AuctionItem.buyerID";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&buyerID, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "AuctionItem.expireTime";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&expireTime, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "AuctionItem.updated";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&updated, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "AuctionItem.auctionOptions";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&auctionOptions, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 19;
}

AuctionItemImplementation::AuctionItemImplementation(unsigned long long objectid) {
	_initializeImplementation();
	// server/zone/objects/auction/AuctionItem.idl():  		auctionedItemObjectID = objectid;
	auctionedItemObjectID = objectid;
	// server/zone/objects/auction/AuctionItem.idl():  		itemType = 0;
	itemType = 0;
	// server/zone/objects/auction/AuctionItem.idl():  		ownerID = 0;
	ownerID = 0;
	// server/zone/objects/auction/AuctionItem.idl():  		offerToID = 0;
	offerToID = 0;
	// server/zone/objects/auction/AuctionItem.idl():  		price = 0;
	price = 0;
	// server/zone/objects/auction/AuctionItem.idl():  		status = FORSALE;
	status = FORSALE;
	// server/zone/objects/auction/AuctionItem.idl():  		auction = true;
	auction = true;
	// server/zone/objects/auction/AuctionItem.idl():  		onBazaar = false;
	onBazaar = false;
	// server/zone/objects/auction/AuctionItem.idl():  		searchable = false;
	searchable = false;
	// server/zone/objects/auction/AuctionItem.idl():  		buyerID = 0;
	buyerID = 0;
	// server/zone/objects/auction/AuctionItem.idl():  		expireTime = 0;
	expireTime = 0;
	// server/zone/objects/auction/AuctionItem.idl():  		updated = false;
	updated = false;
	// server/zone/objects/auction/AuctionItem.idl():  		auctionOptions = 0;
	auctionOptions = 0;
}

int AuctionItemImplementation::compareTo(AuctionItem* obj) {
	// server/zone/objects/auction/AuctionItem.idl():  			return 0;
	if (getAuctionedItemObjectID() < obj->getAuctionedItemObjectID())	// server/zone/objects/auction/AuctionItem.idl():  			return 1;
	return 1;

	else 	// server/zone/objects/auction/AuctionItem.idl():  			return 0;
	if (getAuctionedItemObjectID() > obj->getAuctionedItemObjectID())	// server/zone/objects/auction/AuctionItem.idl():  			return -1;
	return -1;

	else 	// server/zone/objects/auction/AuctionItem.idl():  			return 0;
	return 0;
}

void AuctionItemImplementation::setVendorID(unsigned long long val) {
	// server/zone/objects/auction/AuctionItem.idl():  		vendorID = val;
	vendorID = val;
}

void AuctionItemImplementation::setItemName(const String& name) {
	// server/zone/objects/auction/AuctionItem.idl():  		itemName = name;
	itemName = name;
}

void AuctionItemImplementation::setItemDescription(const String& descr) {
	// server/zone/objects/auction/AuctionItem.idl():  		itemDescription = descr;
	itemDescription = descr;
}

void AuctionItemImplementation::setPrice(int newPrice) {
	// server/zone/objects/auction/AuctionItem.idl():  		price = newPrice;
	price = newPrice;
}

void AuctionItemImplementation::setAuctionedItemObjectID(unsigned long long objectID) {
	// server/zone/objects/auction/AuctionItem.idl():  		auctionedItemObjectID = objectID;
	auctionedItemObjectID = objectID;
}

void AuctionItemImplementation::setItemType(int type) {
	// server/zone/objects/auction/AuctionItem.idl():  		itemType = type;
	itemType = type;
}

void AuctionItemImplementation::setOwnerID(unsigned long long ownerObjectID) {
	// server/zone/objects/auction/AuctionItem.idl():  		ownerID = ownerObjectID;
	ownerID = ownerObjectID;
}

void AuctionItemImplementation::setOfferToID(unsigned long long vendorOwnerID) {
	// server/zone/objects/auction/AuctionItem.idl():  		offerToID = vendorOwnerID;
	offerToID = vendorOwnerID;
}

void AuctionItemImplementation::setBidderName(const String& name) {
	// server/zone/objects/auction/AuctionItem.idl():  		bidderName = name;
	bidderName = name;
}

void AuctionItemImplementation::setOwnerName(const String& name) {
	// server/zone/objects/auction/AuctionItem.idl():  		ownerName = name;
	ownerName = name;
}

void AuctionItemImplementation::setAuction(bool isAuction) {
	// server/zone/objects/auction/AuctionItem.idl():  		auction = isAuction;
	auction = isAuction;
}

void AuctionItemImplementation::setAuctionPremium() {
	// server/zone/objects/auction/AuctionItem.idl():  		auctionOptions = auctionOptions | OPTION_PREMIUM;
	auctionOptions = auctionOptions | OPTION_PREMIUM;
}

void AuctionItemImplementation::setOnBazaar(bool val) {
	// server/zone/objects/auction/AuctionItem.idl():  		onBazaar = val;
	onBazaar = val;
}

void AuctionItemImplementation::setExpireTime(int time) {
	// server/zone/objects/auction/AuctionItem.idl():  		expireTime = time;
	expireTime = time;
}

void AuctionItemImplementation::setBuyerID(unsigned long long id) {
	// server/zone/objects/auction/AuctionItem.idl():  		buyerID = id;
	buyerID = id;
}

void AuctionItemImplementation::setStatus(int value) {
	// server/zone/objects/auction/AuctionItem.idl():  		status = value;
	status = value;
}

bool AuctionItemImplementation::isOnBazaar() {
	// server/zone/objects/auction/AuctionItem.idl():  		return onBazaar;
	return onBazaar;
}

bool AuctionItemImplementation::isAuction() {
	// server/zone/objects/auction/AuctionItem.idl():  		return auction;
	return auction;
}

int AuctionItemImplementation::getStatus() {
	// server/zone/objects/auction/AuctionItem.idl():  		return status;
	return status;
}

unsigned long long AuctionItemImplementation::getVendorID() {
	// server/zone/objects/auction/AuctionItem.idl():  		return vendorID;
	return vendorID;
}

unsigned long long AuctionItemImplementation::getAuctionedItemObjectID() {
	// server/zone/objects/auction/AuctionItem.idl():  		return auctionedItemObjectID;
	return auctionedItemObjectID;
}

unsigned long long AuctionItemImplementation::getOwnerID() {
	// server/zone/objects/auction/AuctionItem.idl():  		return ownerID;
	return ownerID;
}

unsigned long long AuctionItemImplementation::getOfferToID() {
	// server/zone/objects/auction/AuctionItem.idl():  		return offerToID;
	return offerToID;
}

void AuctionItemImplementation::setSearchable(bool enabled) {
	// server/zone/objects/auction/AuctionItem.idl():  		searchable = enabled;
	searchable = enabled;
}

void AuctionItemImplementation::setVendorUID(const String& uid) {
	// server/zone/objects/auction/AuctionItem.idl():  		vuid = uid;
	vuid = uid;
}

const String AuctionItemImplementation::getVendorUID() {
	// server/zone/objects/auction/AuctionItem.idl():  		return vuid;
	return vuid;
}

String AuctionItemImplementation::getOwnerName() {
	// server/zone/objects/auction/AuctionItem.idl():  		return ownerName;
	return ownerName;
}

String AuctionItemImplementation::getItemName() {
	// server/zone/objects/auction/AuctionItem.idl():  		return itemName;
	return itemName;
}

int AuctionItemImplementation::getExpireTime() {
	// server/zone/objects/auction/AuctionItem.idl():  		return expireTime;
	return expireTime;
}

int AuctionItemImplementation::getPrice() {
	// server/zone/objects/auction/AuctionItem.idl():  		return price;
	return price;
}

int AuctionItemImplementation::getItemType() {
	// server/zone/objects/auction/AuctionItem.idl():  		return itemType;
	return itemType;
}

unsigned long long AuctionItemImplementation::getBuyerID() {
	// server/zone/objects/auction/AuctionItem.idl():  		return buyerID;
	return buyerID;
}

String AuctionItemImplementation::getBidderName() {
	// server/zone/objects/auction/AuctionItem.idl():  		return bidderName;
	return bidderName;
}

String AuctionItemImplementation::getItemDescription() {
	// server/zone/objects/auction/AuctionItem.idl():  		return itemDescription;
	return itemDescription;
}

int AuctionItemImplementation::getAuctionOptions() {
	// server/zone/objects/auction/AuctionItem.idl():  		return auctionOptions;
	return auctionOptions;
}

bool AuctionItemImplementation::isPremiumAuction() {
	// server/zone/objects/auction/AuctionItem.idl():  		return auctionOptions & OPTION_PREMIUM;
	return auctionOptions & OPTION_PREMIUM;
}

bool AuctionItemImplementation::isOwner(CreatureObject* player) {
	// server/zone/objects/auction/AuctionItem.idl():  		return player.getObjectID() == getOwnerID();
	return player->getObjectID() == getOwnerID();
}

bool AuctionItemImplementation::isAuctionObject() {
	// server/zone/objects/auction/AuctionItem.idl():  		return true;
	return true;
}

bool AuctionItemImplementation::isSearchable() {
	// server/zone/objects/auction/AuctionItem.idl():  		return searchable == true;
	return searchable == true;
}

/*
 *	AuctionItemAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


AuctionItemAdapter::AuctionItemAdapter(AuctionItem* obj) : ManagedObjectAdapter(obj) {
}

void AuctionItemAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_COMPARETO__AUCTIONITEM_:
		{
			resp->insertSignedInt(compareTo(static_cast<AuctionItem*>(inv->getObjectParameter())));
		}
		break;
	case RPC_NOTIFYLOADFROMDATABASE__:
		{
			notifyLoadFromDatabase();
		}
		break;
	case RPC_SETVENDORID__LONG_:
		{
			setVendorID(inv->getUnsignedLongParameter());
		}
		break;
	case RPC_SETITEMNAME__STRING_:
		{
			String name; 
			setItemName(inv->getAsciiParameter(name));
		}
		break;
	case RPC_SETITEMDESCRIPTION__STRING_:
		{
			String descr; 
			setItemDescription(inv->getAsciiParameter(descr));
		}
		break;
	case RPC_SETPRICE__INT_:
		{
			setPrice(inv->getSignedIntParameter());
		}
		break;
	case RPC_SETAUCTIONEDITEMOBJECTID__LONG_:
		{
			setAuctionedItemObjectID(inv->getUnsignedLongParameter());
		}
		break;
	case RPC_SETITEMTYPE__INT_:
		{
			setItemType(inv->getSignedIntParameter());
		}
		break;
	case RPC_SETOWNERID__LONG_:
		{
			setOwnerID(inv->getUnsignedLongParameter());
		}
		break;
	case RPC_SETOFFERTOID__LONG_:
		{
			setOfferToID(inv->getUnsignedLongParameter());
		}
		break;
	case RPC_SETBIDDERNAME__STRING_:
		{
			String name; 
			setBidderName(inv->getAsciiParameter(name));
		}
		break;
	case RPC_SETOWNERNAME__STRING_:
		{
			String name; 
			setOwnerName(inv->getAsciiParameter(name));
		}
		break;
	case RPC_SETAUCTION__BOOL_:
		{
			setAuction(inv->getBooleanParameter());
		}
		break;
	case RPC_SETAUCTIONPREMIUM__:
		{
			setAuctionPremium();
		}
		break;
	case RPC_CLEARAUCTIONWITHDRAW__:
		{
			clearAuctionWithdraw();
		}
		break;
	case RPC_SETONBAZAAR__BOOL_:
		{
			setOnBazaar(inv->getBooleanParameter());
		}
		break;
	case RPC_SETEXPIRETIME__INT_:
		{
			setExpireTime(inv->getSignedIntParameter());
		}
		break;
	case RPC_SETBUYERID__LONG_:
		{
			setBuyerID(inv->getUnsignedLongParameter());
		}
		break;
	case RPC_SETSTATUS__INT_:
		{
			setStatus(inv->getSignedIntParameter());
		}
		break;
	case RPC_ISONBAZAAR__:
		{
			resp->insertBoolean(isOnBazaar());
		}
		break;
	case RPC_ISAUCTION__:
		{
			resp->insertBoolean(isAuction());
		}
		break;
	case RPC_GETSTATUS__:
		{
			resp->insertSignedInt(getStatus());
		}
		break;
	case RPC_GETVENDORID__:
		{
			resp->insertLong(getVendorID());
		}
		break;
	case RPC_GETAUCTIONEDITEMOBJECTID__:
		{
			resp->insertLong(getAuctionedItemObjectID());
		}
		break;
	case RPC_GETOWNERID__:
		{
			resp->insertLong(getOwnerID());
		}
		break;
	case RPC_GETOFFERTOID__:
		{
			resp->insertLong(getOfferToID());
		}
		break;
	case RPC_SETSEARCHABLE__BOOL_:
		{
			setSearchable(inv->getBooleanParameter());
		}
		break;
	case RPC_SETVENDORUID__STRING_:
		{
			String uid; 
			setVendorUID(inv->getAsciiParameter(uid));
		}
		break;
	case RPC_GETVENDORUID__:
		{
			resp->insertAscii(getVendorUID());
		}
		break;
	case RPC_GETOWNERNAME__:
		{
			resp->insertAscii(getOwnerName());
		}
		break;
	case RPC_GETITEMNAME__:
		{
			resp->insertAscii(getItemName());
		}
		break;
	case RPC_GETEXPIRETIME__:
		{
			resp->insertSignedInt(getExpireTime());
		}
		break;
	case RPC_GETPRICE__:
		{
			resp->insertSignedInt(getPrice());
		}
		break;
	case RPC_GETITEMTYPE__:
		{
			resp->insertSignedInt(getItemType());
		}
		break;
	case RPC_GETBUYERID__:
		{
			resp->insertLong(getBuyerID());
		}
		break;
	case RPC_GETBIDDERNAME__:
		{
			resp->insertAscii(getBidderName());
		}
		break;
	case RPC_GETITEMDESCRIPTION__:
		{
			resp->insertAscii(getItemDescription());
		}
		break;
	case RPC_GETAUCTIONOPTIONS__:
		{
			resp->insertSignedInt(getAuctionOptions());
		}
		break;
	case RPC_ISPREMIUMAUCTION__:
		{
			resp->insertBoolean(isPremiumAuction());
		}
		break;
	case RPC_ISOWNER__CREATUREOBJECT_:
		{
			resp->insertBoolean(isOwner(static_cast<CreatureObject*>(inv->getObjectParameter())));
		}
		break;
	case RPC_ISAUCTIONOBJECT__:
		{
			resp->insertBoolean(isAuctionObject());
		}
		break;
	case RPC_ISSEARCHABLE__:
		{
			resp->insertBoolean(isSearchable());
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

int AuctionItemAdapter::compareTo(AuctionItem* obj) {
	return (static_cast<AuctionItem*>(stub))->compareTo(obj);
}

void AuctionItemAdapter::notifyLoadFromDatabase() {
	(static_cast<AuctionItem*>(stub))->notifyLoadFromDatabase();
}

void AuctionItemAdapter::setVendorID(unsigned long long val) {
	(static_cast<AuctionItem*>(stub))->setVendorID(val);
}

void AuctionItemAdapter::setItemName(const String& name) {
	(static_cast<AuctionItem*>(stub))->setItemName(name);
}

void AuctionItemAdapter::setItemDescription(const String& descr) {
	(static_cast<AuctionItem*>(stub))->setItemDescription(descr);
}

void AuctionItemAdapter::setPrice(int newPrice) {
	(static_cast<AuctionItem*>(stub))->setPrice(newPrice);
}

void AuctionItemAdapter::setAuctionedItemObjectID(unsigned long long objectID) {
	(static_cast<AuctionItem*>(stub))->setAuctionedItemObjectID(objectID);
}

void AuctionItemAdapter::setItemType(int type) {
	(static_cast<AuctionItem*>(stub))->setItemType(type);
}

void AuctionItemAdapter::setOwnerID(unsigned long long ownerObjectID) {
	(static_cast<AuctionItem*>(stub))->setOwnerID(ownerObjectID);
}

void AuctionItemAdapter::setOfferToID(unsigned long long vendorOwnerID) {
	(static_cast<AuctionItem*>(stub))->setOfferToID(vendorOwnerID);
}

void AuctionItemAdapter::setBidderName(const String& name) {
	(static_cast<AuctionItem*>(stub))->setBidderName(name);
}

void AuctionItemAdapter::setOwnerName(const String& name) {
	(static_cast<AuctionItem*>(stub))->setOwnerName(name);
}

void AuctionItemAdapter::setAuction(bool isAuction) {
	(static_cast<AuctionItem*>(stub))->setAuction(isAuction);
}

void AuctionItemAdapter::setAuctionPremium() {
	(static_cast<AuctionItem*>(stub))->setAuctionPremium();
}

void AuctionItemAdapter::clearAuctionWithdraw() {
	(static_cast<AuctionItem*>(stub))->clearAuctionWithdraw();
}

void AuctionItemAdapter::setOnBazaar(bool val) {
	(static_cast<AuctionItem*>(stub))->setOnBazaar(val);
}

void AuctionItemAdapter::setExpireTime(int time) {
	(static_cast<AuctionItem*>(stub))->setExpireTime(time);
}

void AuctionItemAdapter::setBuyerID(unsigned long long id) {
	(static_cast<AuctionItem*>(stub))->setBuyerID(id);
}

void AuctionItemAdapter::setStatus(int value) {
	(static_cast<AuctionItem*>(stub))->setStatus(value);
}

bool AuctionItemAdapter::isOnBazaar() {
	return (static_cast<AuctionItem*>(stub))->isOnBazaar();
}

bool AuctionItemAdapter::isAuction() {
	return (static_cast<AuctionItem*>(stub))->isAuction();
}

int AuctionItemAdapter::getStatus() {
	return (static_cast<AuctionItem*>(stub))->getStatus();
}

unsigned long long AuctionItemAdapter::getVendorID() {
	return (static_cast<AuctionItem*>(stub))->getVendorID();
}

unsigned long long AuctionItemAdapter::getAuctionedItemObjectID() {
	return (static_cast<AuctionItem*>(stub))->getAuctionedItemObjectID();
}

unsigned long long AuctionItemAdapter::getOwnerID() {
	return (static_cast<AuctionItem*>(stub))->getOwnerID();
}

unsigned long long AuctionItemAdapter::getOfferToID() {
	return (static_cast<AuctionItem*>(stub))->getOfferToID();
}

void AuctionItemAdapter::setSearchable(bool enabled) {
	(static_cast<AuctionItem*>(stub))->setSearchable(enabled);
}

void AuctionItemAdapter::setVendorUID(const String& uid) {
	(static_cast<AuctionItem*>(stub))->setVendorUID(uid);
}

const String AuctionItemAdapter::getVendorUID() {
	return (static_cast<AuctionItem*>(stub))->getVendorUID();
}

String AuctionItemAdapter::getOwnerName() {
	return (static_cast<AuctionItem*>(stub))->getOwnerName();
}

String AuctionItemAdapter::getItemName() {
	return (static_cast<AuctionItem*>(stub))->getItemName();
}

int AuctionItemAdapter::getExpireTime() {
	return (static_cast<AuctionItem*>(stub))->getExpireTime();
}

int AuctionItemAdapter::getPrice() {
	return (static_cast<AuctionItem*>(stub))->getPrice();
}

int AuctionItemAdapter::getItemType() {
	return (static_cast<AuctionItem*>(stub))->getItemType();
}

unsigned long long AuctionItemAdapter::getBuyerID() {
	return (static_cast<AuctionItem*>(stub))->getBuyerID();
}

String AuctionItemAdapter::getBidderName() {
	return (static_cast<AuctionItem*>(stub))->getBidderName();
}

String AuctionItemAdapter::getItemDescription() {
	return (static_cast<AuctionItem*>(stub))->getItemDescription();
}

int AuctionItemAdapter::getAuctionOptions() {
	return (static_cast<AuctionItem*>(stub))->getAuctionOptions();
}

bool AuctionItemAdapter::isPremiumAuction() {
	return (static_cast<AuctionItem*>(stub))->isPremiumAuction();
}

bool AuctionItemAdapter::isOwner(CreatureObject* player) {
	return (static_cast<AuctionItem*>(stub))->isOwner(player);
}

bool AuctionItemAdapter::isAuctionObject() {
	return (static_cast<AuctionItem*>(stub))->isAuctionObject();
}

bool AuctionItemAdapter::isSearchable() {
	return (static_cast<AuctionItem*>(stub))->isSearchable();
}

/*
 *	AuctionItemHelper
 */

AuctionItemHelper* AuctionItemHelper::staticInitializer = AuctionItemHelper::instance();

AuctionItemHelper::AuctionItemHelper() {
	className = "AuctionItem";

	Core::getObjectBroker()->registerClass(className, this);
}

void AuctionItemHelper::finalizeHelper() {
	AuctionItemHelper::finalize();
}

DistributedObject* AuctionItemHelper::instantiateObject() {
	return new AuctionItem(DummyConstructorParameter::instance());
}

DistributedObjectServant* AuctionItemHelper::instantiateServant() {
	return new AuctionItemImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* AuctionItemHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new AuctionItemAdapter(static_cast<AuctionItem*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

