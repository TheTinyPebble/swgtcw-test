/*
 *	server/zone/objects/guild/GuildObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "GuildObject.h"

#include "server/chat/room/ChatRoom.h"

#include "server/zone/objects/tangible/terminal/guild/GuildTerminal.h"

#include "server/zone/objects/player/PlayerCreature.h"

/*
 *	GuildObjectStub
 */

GuildObject::GuildObject() : SceneObject(DummyConstructorParameter::instance()) {
	GuildObjectImplementation* _implementation = new GuildObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

GuildObject::GuildObject(DummyConstructorParameter* param) : SceneObject(param) {
}

GuildObject::~GuildObject() {
}


void GuildObject::sendBaselinesTo(SceneObject* player) {
	GuildObjectImplementation* _implementation = (GuildObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendBaselinesTo(player);
}

void GuildObject::broadcastMessage(BaseMessage* msg) {
	GuildObjectImplementation* _implementation = (GuildObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(msg);

		method.executeWithVoidReturn();
	} else
		_implementation->broadcastMessage(msg);
}

void GuildObject::broadcastMessage(PlayerCreature* player, BaseMessage* msg, bool sendSelf) {
	GuildObjectImplementation* _implementation = (GuildObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(player);
		method.addObjectParameter(msg);
		method.addBooleanParameter(sendSelf);

		method.executeWithVoidReturn();
	} else
		_implementation->broadcastMessage(player, msg, sendSelf);
}

void GuildObject::addMember(SceneObject* player) {
	GuildObjectImplementation* _implementation = (GuildObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->addMember(player);
}

void GuildObject::removeMember(SceneObject* player) {
	GuildObjectImplementation* _implementation = (GuildObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->removeMember(player);
}

bool GuildObject::hasMember(SceneObject* player) {
	GuildObjectImplementation* _implementation = (GuildObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasMember(player);
}

void GuildObject::startChatRoom() {
	GuildObjectImplementation* _implementation = (GuildObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		method.executeWithVoidReturn();
	} else
		_implementation->startChatRoom();
}

void GuildObject::destroyChatRoom() {
	GuildObjectImplementation* _implementation = (GuildObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		method.executeWithVoidReturn();
	} else
		_implementation->destroyChatRoom();
}

ChatRoom* GuildObject::getChatRoom() {
	GuildObjectImplementation* _implementation = (GuildObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		return (ChatRoom*) method.executeWithObjectReturn();
	} else
		return _implementation->getChatRoom();
}

int GuildObject::getTotalMembers() {
	GuildObjectImplementation* _implementation = (GuildObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getTotalMembers();
}

unsigned long long GuildObject::getGuildLeaderID() {
	GuildObjectImplementation* _implementation = (GuildObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		return method.executeWithUnsignedLongReturn();
	} else
		return _implementation->getGuildLeaderID();
}

GuildMemberList* GuildObject::getGuildMemberList() {
	GuildObjectImplementation* _implementation = (GuildObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getGuildMemberList();
}

String GuildObject::getGuildAbbrev() {
	GuildObjectImplementation* _implementation = (GuildObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);

		method.executeWithAsciiReturn(_return_getGuildAbbrev);
		return _return_getGuildAbbrev;
	} else
		return _implementation->getGuildAbbrev();
}

void GuildObject::setGuildAbbrev(const String& abbrev) {
	GuildObjectImplementation* _implementation = (GuildObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addAsciiParameter(abbrev);

		method.executeWithVoidReturn();
	} else
		_implementation->setGuildAbbrev(abbrev);
}

void GuildObject::setGuildLeaderID(unsigned long long leaderID) {
	GuildObjectImplementation* _implementation = (GuildObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addUnsignedLongParameter(leaderID);

		method.executeWithVoidReturn();
	} else
		_implementation->setGuildLeaderID(leaderID);
}

void GuildObject::setGuildID(unsigned int id) {
	GuildObjectImplementation* _implementation = (GuildObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addUnsignedIntParameter(id);

		method.executeWithVoidReturn();
	} else
		_implementation->setGuildID(id);
}

unsigned int GuildObject::getGuildID() {
	GuildObjectImplementation* _implementation = (GuildObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getGuildID();
}

void GuildObject::setGuildName(const String& gname) {
	GuildObjectImplementation* _implementation = (GuildObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);
		method.addAsciiParameter(gname);

		method.executeWithVoidReturn();
	} else
		_implementation->setGuildName(gname);
}

String GuildObject::getGuildName() {
	GuildObjectImplementation* _implementation = (GuildObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);

		method.executeWithAsciiReturn(_return_getGuildName);
		return _return_getGuildName;
	} else
		return _implementation->getGuildName();
}

String GuildObject::getGuildKey() {
	GuildObjectImplementation* _implementation = (GuildObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);

		method.executeWithAsciiReturn(_return_getGuildKey);
		return _return_getGuildKey;
	} else
		return _implementation->getGuildKey();
}

bool GuildObject::isGuildObject() {
	GuildObjectImplementation* _implementation = (GuildObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isGuildObject();
}

DistributedObjectServant* GuildObject::_getImplementation() {

	_updated = true;
	return _impl;
}

void GuildObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;}

/*
 *	GuildObjectImplementation
 */

GuildObjectImplementation::GuildObjectImplementation(DummyConstructorParameter* param) : SceneObjectImplementation(param) {
	_initializeImplementation();
}


GuildObjectImplementation::~GuildObjectImplementation() {
}


void GuildObjectImplementation::finalize() {
}

void GuildObjectImplementation::_initializeImplementation() {
	_setClassHelper(GuildObjectHelper::instance());

	_serializationHelperMethod();
}

void GuildObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (GuildObject*) stub;
	SceneObjectImplementation::_setStub(stub);
}

DistributedObjectStub* GuildObjectImplementation::_getStub() {
	return _this;
}

GuildObjectImplementation::operator const GuildObject*() {
	return _this;
}

void GuildObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void GuildObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void GuildObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void GuildObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void GuildObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void GuildObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void GuildObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void GuildObjectImplementation::_serializationHelperMethod() {
	SceneObjectImplementation::_serializationHelperMethod();

	_setClassName("GuildObject");

	addSerializableVariable("chatRoom", &chatRoom);
	addSerializableVariable("guildMembers", &guildMembers);
	addSerializableVariable("guildTerminal", &guildTerminal);
	addSerializableVariable("guildID", &guildID);
	addSerializableVariable("guildName", &guildName);
	addSerializableVariable("guildAbbrev", &guildAbbrev);
	addSerializableVariable("guildLeaderID", &guildLeaderID);
}

GuildObjectImplementation::GuildObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/guild/GuildObject.idl(81):  		Logger.setLoggingName("GuildObject");
	Logger::setLoggingName("GuildObject");
	// server/zone/objects/guild/GuildObject.idl(83):  		guildLeaderID = 0;
	guildLeaderID = 0;
	// server/zone/objects/guild/GuildObject.idl(84):  		guildID = 0;
	guildID = 0;
	// server/zone/objects/guild/GuildObject.idl(85):  		chatRoom = null;
	chatRoom = NULL;
	// server/zone/objects/guild/GuildObject.idl(86):  		guildTerminal = null;
	guildTerminal = NULL;
}

ChatRoom* GuildObjectImplementation::getChatRoom() {
	// server/zone/objects/guild/GuildObject.idl(101):  		return chatRoom;
	return chatRoom;
}

int GuildObjectImplementation::getTotalMembers() {
	// server/zone/objects/guild/GuildObject.idl(105):  		return guildMembers.size();
	return (&guildMembers)->size();
}

unsigned long long GuildObjectImplementation::getGuildLeaderID() {
	// server/zone/objects/guild/GuildObject.idl(109):  		return guildLeaderID;
	return guildLeaderID;
}

GuildMemberList* GuildObjectImplementation::getGuildMemberList() {
	// server/zone/objects/guild/GuildObject.idl(114):  		return guildMembers;
	return (&guildMembers);
}

String GuildObjectImplementation::getGuildAbbrev() {
	// server/zone/objects/guild/GuildObject.idl(118):  		return guildAbbrev;
	return guildAbbrev;
}

void GuildObjectImplementation::setGuildAbbrev(const String& abbrev) {
	// server/zone/objects/guild/GuildObject.idl(122):  		guildAbbrev = abbrev;
	guildAbbrev = abbrev;
}

void GuildObjectImplementation::setGuildLeaderID(unsigned long long leaderID) {
	// server/zone/objects/guild/GuildObject.idl(126):  		guildLeaderID = leaderID;
	guildLeaderID = leaderID;
}

void GuildObjectImplementation::setGuildID(unsigned int id) {
	// server/zone/objects/guild/GuildObject.idl(130):  		guildID = id;
	guildID = id;
}

unsigned int GuildObjectImplementation::getGuildID() {
	// server/zone/objects/guild/GuildObject.idl(134):  		return guildID;
	return guildID;
}

void GuildObjectImplementation::setGuildName(const String& gname) {
	// server/zone/objects/guild/GuildObject.idl(138):  		guildName = gname;
	guildName = gname;
}

String GuildObjectImplementation::getGuildName() {
	// server/zone/objects/guild/GuildObject.idl(142):  		return guildName;
	return guildName;
}

String GuildObjectImplementation::getGuildKey() {
	// server/zone/objects/guild/GuildObject.idl(146):  		string guildKey = String.valueOf(guildID) + ":" + guildAbbrev;
	String guildKey = String::valueOf(guildID) + ":" + guildAbbrev;
	// server/zone/objects/guild/GuildObject.idl(147):  		return guildKey;
	return guildKey;
}

bool GuildObjectImplementation::isGuildObject() {
	// server/zone/objects/guild/GuildObject.idl(151):  		return true;
	return true;
}

/*
 *	GuildObjectAdapter
 */

GuildObjectAdapter::GuildObjectAdapter(GuildObjectImplementation* obj) : SceneObjectAdapter(obj) {
}

Packet* GuildObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		sendBaselinesTo((SceneObject*) inv->getObjectParameter());
		break;
	case 7:
		broadcastMessage((BaseMessage*) inv->getObjectParameter());
		break;
	case 8:
		broadcastMessage((PlayerCreature*) inv->getObjectParameter(), (BaseMessage*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 9:
		addMember((SceneObject*) inv->getObjectParameter());
		break;
	case 10:
		removeMember((SceneObject*) inv->getObjectParameter());
		break;
	case 11:
		resp->insertBoolean(hasMember((SceneObject*) inv->getObjectParameter()));
		break;
	case 12:
		startChatRoom();
		break;
	case 13:
		destroyChatRoom();
		break;
	case 14:
		resp->insertLong(getChatRoom()->_getObjectID());
		break;
	case 15:
		resp->insertSignedInt(getTotalMembers());
		break;
	case 16:
		resp->insertLong(getGuildLeaderID());
		break;
	case 17:
		resp->insertAscii(getGuildAbbrev());
		break;
	case 18:
		setGuildAbbrev(inv->getAsciiParameter(_param0_setGuildAbbrev__String_));
		break;
	case 19:
		setGuildLeaderID(inv->getUnsignedLongParameter());
		break;
	case 20:
		setGuildID(inv->getUnsignedIntParameter());
		break;
	case 21:
		resp->insertInt(getGuildID());
		break;
	case 22:
		setGuildName(inv->getAsciiParameter(_param0_setGuildName__String_));
		break;
	case 23:
		resp->insertAscii(getGuildName());
		break;
	case 24:
		resp->insertAscii(getGuildKey());
		break;
	case 25:
		resp->insertBoolean(isGuildObject());
		break;
	default:
		return NULL;
	}

	return resp;
}

void GuildObjectAdapter::sendBaselinesTo(SceneObject* player) {
	((GuildObjectImplementation*) impl)->sendBaselinesTo(player);
}

void GuildObjectAdapter::broadcastMessage(BaseMessage* msg) {
	((GuildObjectImplementation*) impl)->broadcastMessage(msg);
}

void GuildObjectAdapter::broadcastMessage(PlayerCreature* player, BaseMessage* msg, bool sendSelf) {
	((GuildObjectImplementation*) impl)->broadcastMessage(player, msg, sendSelf);
}

void GuildObjectAdapter::addMember(SceneObject* player) {
	((GuildObjectImplementation*) impl)->addMember(player);
}

void GuildObjectAdapter::removeMember(SceneObject* player) {
	((GuildObjectImplementation*) impl)->removeMember(player);
}

bool GuildObjectAdapter::hasMember(SceneObject* player) {
	return ((GuildObjectImplementation*) impl)->hasMember(player);
}

void GuildObjectAdapter::startChatRoom() {
	((GuildObjectImplementation*) impl)->startChatRoom();
}

void GuildObjectAdapter::destroyChatRoom() {
	((GuildObjectImplementation*) impl)->destroyChatRoom();
}

ChatRoom* GuildObjectAdapter::getChatRoom() {
	return ((GuildObjectImplementation*) impl)->getChatRoom();
}

int GuildObjectAdapter::getTotalMembers() {
	return ((GuildObjectImplementation*) impl)->getTotalMembers();
}

unsigned long long GuildObjectAdapter::getGuildLeaderID() {
	return ((GuildObjectImplementation*) impl)->getGuildLeaderID();
}

String GuildObjectAdapter::getGuildAbbrev() {
	return ((GuildObjectImplementation*) impl)->getGuildAbbrev();
}

void GuildObjectAdapter::setGuildAbbrev(const String& abbrev) {
	((GuildObjectImplementation*) impl)->setGuildAbbrev(abbrev);
}

void GuildObjectAdapter::setGuildLeaderID(unsigned long long leaderID) {
	((GuildObjectImplementation*) impl)->setGuildLeaderID(leaderID);
}

void GuildObjectAdapter::setGuildID(unsigned int id) {
	((GuildObjectImplementation*) impl)->setGuildID(id);
}

unsigned int GuildObjectAdapter::getGuildID() {
	return ((GuildObjectImplementation*) impl)->getGuildID();
}

void GuildObjectAdapter::setGuildName(const String& gname) {
	((GuildObjectImplementation*) impl)->setGuildName(gname);
}

String GuildObjectAdapter::getGuildName() {
	return ((GuildObjectImplementation*) impl)->getGuildName();
}

String GuildObjectAdapter::getGuildKey() {
	return ((GuildObjectImplementation*) impl)->getGuildKey();
}

bool GuildObjectAdapter::isGuildObject() {
	return ((GuildObjectImplementation*) impl)->isGuildObject();
}

/*
 *	GuildObjectHelper
 */

GuildObjectHelper* GuildObjectHelper::staticInitializer = GuildObjectHelper::instance();

GuildObjectHelper::GuildObjectHelper() {
	className = "GuildObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void GuildObjectHelper::finalizeHelper() {
	GuildObjectHelper::finalize();
}

DistributedObject* GuildObjectHelper::instantiateObject() {
	return new GuildObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* GuildObjectHelper::instantiateServant() {
	return new GuildObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* GuildObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new GuildObjectAdapter((GuildObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

