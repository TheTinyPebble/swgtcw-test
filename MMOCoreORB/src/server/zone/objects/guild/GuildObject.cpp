/*
 *	server/zone/objects/guild/GuildObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "GuildObject.h"

#include "server/chat/room/ChatRoom.h"

#include "server/zone/objects/tangible/terminal/guild/GuildTerminal.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	GuildObjectStub
 */

enum {RPC_SENDBASELINESTO__SCENEOBJECT_ = 6,RPC_BROADCASTMESSAGE__BASEMESSAGE_,RPC_BROADCASTMESSAGE__CREATUREOBJECT_BASEMESSAGE_BOOL_,RPC_ADDMEMBER__LONG_,RPC_REMOVEMEMBER__LONG_,RPC_HASMEMBER__LONG_,RPC_GETMEMBER__INT_,RPC_ADDSPONSOREDPLAYER__LONG_,RPC_REMOVESPONSOREDPLAYER__LONG_,RPC_HASSPONSOREDPLAYER__LONG_,RPC_GETSPONSOREDPLAYER__INT_,RPC_GETSPONSOREDPLAYERCOUNT__,RPC_SETCHATROOM__CHATROOM_,RPC_GETCHATROOM__,RPC_GETTOTALMEMBERS__,RPC_GETGUILDLEADERID__,RPC_GETGUILDABBREV__,RPC_SETGUILDABBREV__STRING_,RPC_SETGUILDLEADERID__LONG_,RPC_SETGUILDID__INT_,RPC_GETGUILDID__,RPC_SETGUILDNAME__STRING_,RPC_GETGUILDNAME__,RPC_GETGUILDKEY__,RPC_ISGUILDOBJECT__,RPC_ISGUILDLEADER__CREATUREOBJECT_,RPC_HASMAILPERMISSION__LONG_,RPC_HASSPONSORPERMISSION__LONG_,RPC_HASACCEPTPERMISSION__LONG_,RPC_HASDISBANDPERMISSION__LONG_,RPC_HASKICKPERMISSION__LONG_,RPC_HASNAMEPERMISSION__LONG_,RPC_HASTITLEPERMISSION__LONG_};

GuildObject::GuildObject() : SceneObject(DummyConstructorParameter::instance()) {
	GuildObjectImplementation* _implementation = new GuildObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("GuildObject");
}

GuildObject::GuildObject(DummyConstructorParameter* param) : SceneObject(param) {
	_setClassName("GuildObject");
}

GuildObject::~GuildObject() {
}



void GuildObject::sendBaselinesTo(SceneObject* player) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDBASELINESTO__SCENEOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendBaselinesTo(player);
}

void GuildObject::broadcastMessage(BaseMessage* msg) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_BROADCASTMESSAGE__BASEMESSAGE_);
		method.addObjectParameter(msg);

		method.executeWithVoidReturn();
	} else
		_implementation->broadcastMessage(msg);
}

void GuildObject::broadcastMessage(CreatureObject* player, BaseMessage* msg, bool sendSelf) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_BROADCASTMESSAGE__CREATUREOBJECT_BASEMESSAGE_BOOL_);
		method.addObjectParameter(player);
		method.addObjectParameter(msg);
		method.addBooleanParameter(sendSelf);

		method.executeWithVoidReturn();
	} else
		_implementation->broadcastMessage(player, msg, sendSelf);
}

void GuildObject::addMember(unsigned long long playerID) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDMEMBER__LONG_);
		method.addUnsignedLongParameter(playerID);

		method.executeWithVoidReturn();
	} else
		_implementation->addMember(playerID);
}

void GuildObject::removeMember(unsigned long long playerID) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEMEMBER__LONG_);
		method.addUnsignedLongParameter(playerID);

		method.executeWithVoidReturn();
	} else
		_implementation->removeMember(playerID);
}

bool GuildObject::hasMember(unsigned long long playerID) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASMEMBER__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasMember(playerID);
}

GuildMemberInfo* GuildObject::getMember(unsigned long long playerID) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getMember(playerID);
}

unsigned long long GuildObject::getMember(int index) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMEMBER__INT_);
		method.addSignedIntParameter(index);

		return method.executeWithUnsignedLongReturn();
	} else
		return _implementation->getMember(index);
}

void GuildObject::addSponsoredPlayer(unsigned long long playerID) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDSPONSOREDPLAYER__LONG_);
		method.addUnsignedLongParameter(playerID);

		method.executeWithVoidReturn();
	} else
		_implementation->addSponsoredPlayer(playerID);
}

void GuildObject::removeSponsoredPlayer(unsigned long long playerID) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVESPONSOREDPLAYER__LONG_);
		method.addUnsignedLongParameter(playerID);

		method.executeWithVoidReturn();
	} else
		_implementation->removeSponsoredPlayer(playerID);
}

bool GuildObject::hasSponsoredPlayer(unsigned long long playerID) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASSPONSOREDPLAYER__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasSponsoredPlayer(playerID);
}

unsigned long long GuildObject::getSponsoredPlayer(int idx) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSPONSOREDPLAYER__INT_);
		method.addSignedIntParameter(idx);

		return method.executeWithUnsignedLongReturn();
	} else
		return _implementation->getSponsoredPlayer(idx);
}

int GuildObject::getSponsoredPlayerCount() {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSPONSOREDPLAYERCOUNT__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getSponsoredPlayerCount();
}

void GuildObject::setChatRoom(ChatRoom* room) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCHATROOM__CHATROOM_);
		method.addObjectParameter(room);

		method.executeWithVoidReturn();
	} else
		_implementation->setChatRoom(room);
}

ChatRoom* GuildObject::getChatRoom() {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCHATROOM__);

		return static_cast<ChatRoom*>(method.executeWithObjectReturn());
	} else
		return _implementation->getChatRoom();
}

int GuildObject::getTotalMembers() {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTOTALMEMBERS__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getTotalMembers();
}

unsigned long long GuildObject::getGuildLeaderID() {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGUILDLEADERID__);

		return method.executeWithUnsignedLongReturn();
	} else
		return _implementation->getGuildLeaderID();
}

GuildMemberList* GuildObject::getGuildMemberList() {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getGuildMemberList();
}

String GuildObject::getGuildAbbrev() {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGUILDABBREV__);

		String _return_getGuildAbbrev;
		method.executeWithAsciiReturn(_return_getGuildAbbrev);
		return _return_getGuildAbbrev;
	} else
		return _implementation->getGuildAbbrev();
}

void GuildObject::setGuildAbbrev(const String& abbrev) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETGUILDABBREV__STRING_);
		method.addAsciiParameter(abbrev);

		method.executeWithVoidReturn();
	} else
		_implementation->setGuildAbbrev(abbrev);
}

void GuildObject::setGuildLeaderID(unsigned long long leaderID) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETGUILDLEADERID__LONG_);
		method.addUnsignedLongParameter(leaderID);

		method.executeWithVoidReturn();
	} else
		_implementation->setGuildLeaderID(leaderID);
}

void GuildObject::setGuildID(unsigned int id) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETGUILDID__INT_);
		method.addUnsignedIntParameter(id);

		method.executeWithVoidReturn();
	} else
		_implementation->setGuildID(id);
}

unsigned int GuildObject::getGuildID() {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGUILDID__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getGuildID();
}

void GuildObject::setGuildName(const String& gname) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETGUILDNAME__STRING_);
		method.addAsciiParameter(gname);

		method.executeWithVoidReturn();
	} else
		_implementation->setGuildName(gname);
}

String GuildObject::getGuildName() {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGUILDNAME__);

		String _return_getGuildName;
		method.executeWithAsciiReturn(_return_getGuildName);
		return _return_getGuildName;
	} else
		return _implementation->getGuildName();
}

String GuildObject::getGuildKey() {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGUILDKEY__);

		String _return_getGuildKey;
		method.executeWithAsciiReturn(_return_getGuildKey);
		return _return_getGuildKey;
	} else
		return _implementation->getGuildKey();
}

bool GuildObject::isGuildObject() {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISGUILDOBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isGuildObject();
}

bool GuildObject::isGuildLeader(CreatureObject* player) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISGUILDLEADER__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isGuildLeader(player);
}

bool GuildObject::hasMailPermission(unsigned long long playerID) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASMAILPERMISSION__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasMailPermission(playerID);
}

bool GuildObject::hasSponsorPermission(unsigned long long playerID) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASSPONSORPERMISSION__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasSponsorPermission(playerID);
}

bool GuildObject::hasAcceptPermission(unsigned long long playerID) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASACCEPTPERMISSION__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasAcceptPermission(playerID);
}

bool GuildObject::hasDisbandPermission(unsigned long long playerID) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASDISBANDPERMISSION__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasDisbandPermission(playerID);
}

bool GuildObject::hasKickPermission(unsigned long long playerID) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASKICKPERMISSION__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasKickPermission(playerID);
}

bool GuildObject::hasNamePermission(unsigned long long playerID) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASNAMEPERMISSION__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasNamePermission(playerID);
}

bool GuildObject::hasTitlePermission(unsigned long long playerID) {
	GuildObjectImplementation* _implementation = static_cast<GuildObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASTITLEPERMISSION__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasTitlePermission(playerID);
}

DistributedObjectServant* GuildObject::_getImplementation() {

	_updated = true;
	return _impl;
}

void GuildObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	GuildObjectImplementation
 */

GuildObjectImplementation::GuildObjectImplementation(DummyConstructorParameter* param) : SceneObjectImplementation(param) {
	_initializeImplementation();
}


GuildObjectImplementation::~GuildObjectImplementation() {
}


void GuildObjectImplementation::finalize() {
}

void GuildObjectImplementation::_initializeImplementation() {
	_setClassHelper(GuildObjectHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void GuildObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<GuildObject*>(stub);
	SceneObjectImplementation::_setStub(stub);
}

DistributedObjectStub* GuildObjectImplementation::_getStub() {
	return _this.get();
}

GuildObjectImplementation::operator const GuildObject*() {
	return _this.get();
}

void GuildObjectImplementation::lock(bool doLock) {
	_this.get()->lock(doLock);
}

void GuildObjectImplementation::lock(ManagedObject* obj) {
	_this.get()->lock(obj);
}

void GuildObjectImplementation::rlock(bool doLock) {
	_this.get()->rlock(doLock);
}

void GuildObjectImplementation::wlock(bool doLock) {
	_this.get()->wlock(doLock);
}

void GuildObjectImplementation::wlock(ManagedObject* obj) {
	_this.get()->wlock(obj);
}

void GuildObjectImplementation::unlock(bool doLock) {
	_this.get()->unlock(doLock);
}

void GuildObjectImplementation::runlock(bool doLock) {
	_this.get()->runlock(doLock);
}

void GuildObjectImplementation::_serializationHelperMethod() {
	SceneObjectImplementation::_serializationHelperMethod();

	_setClassName("GuildObject");

}

void GuildObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(GuildObjectImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool GuildObjectImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (SceneObjectImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "GuildObject.chatRoom") {
		TypeInfo<ManagedReference<ChatRoom* > >::parseFromBinaryStream(&chatRoom, stream);
		return true;
	}

	if (_name == "GuildObject.guildMembers") {
		TypeInfo<GuildMemberList >::parseFromBinaryStream(&guildMembers, stream);
		return true;
	}

	if (_name == "GuildObject.sponsoredPlayers") {
		TypeInfo<SortedVector<unsigned long long> >::parseFromBinaryStream(&sponsoredPlayers, stream);
		return true;
	}

	if (_name == "GuildObject.guildID") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&guildID, stream);
		return true;
	}

	if (_name == "GuildObject.guildName") {
		TypeInfo<String >::parseFromBinaryStream(&guildName, stream);
		return true;
	}

	if (_name == "GuildObject.guildAbbrev") {
		TypeInfo<String >::parseFromBinaryStream(&guildAbbrev, stream);
		return true;
	}

	if (_name == "GuildObject.guildLeaderID") {
		TypeInfo<unsigned long long >::parseFromBinaryStream(&guildLeaderID, stream);
		return true;
	}


	return false;
}

void GuildObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = GuildObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int GuildObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = SceneObjectImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;
	_name = "GuildObject.chatRoom";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<ChatRoom* > >::toBinaryStream(&chatRoom, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "GuildObject.guildMembers";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<GuildMemberList >::toBinaryStream(&guildMembers, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "GuildObject.sponsoredPlayers";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<SortedVector<unsigned long long> >::toBinaryStream(&sponsoredPlayers, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "GuildObject.guildID";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&guildID, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "GuildObject.guildName";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&guildName, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "GuildObject.guildAbbrev";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&guildAbbrev, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "GuildObject.guildLeaderID";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&guildLeaderID, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 7;
}

GuildObjectImplementation::GuildObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/guild/GuildObject.idl():  		Logger.setLoggingName("GuildObject");
	Logger::setLoggingName("GuildObject");
	// server/zone/objects/guild/GuildObject.idl():  		guildLeaderID = 0;
	guildLeaderID = 0;
	// server/zone/objects/guild/GuildObject.idl():  		guildID = 0;
	guildID = 0;
	// server/zone/objects/guild/GuildObject.idl():  		chatRoom = null;
	chatRoom = NULL;
	// server/zone/objects/guild/GuildObject.idl():  		sponsoredPlayers.setNoDuplicateInsertPlan();
	(&sponsoredPlayers)->setNoDuplicateInsertPlan();
	// server/zone/objects/guild/GuildObject.idl():  		guildMembers.setNoDuplicateInsertPlan();
	(&guildMembers)->setNoDuplicateInsertPlan();
}

void GuildObjectImplementation::addSponsoredPlayer(unsigned long long playerID) {
	Locker _locker(_this.get());
	// server/zone/objects/guild/GuildObject.idl():  		sponsoredPlayers.put(playerID);
	(&sponsoredPlayers)->put(playerID);
}

void GuildObjectImplementation::removeSponsoredPlayer(unsigned long long playerID) {
	Locker _locker(_this.get());
	// server/zone/objects/guild/GuildObject.idl():  		sponsoredPlayers.drop(playerID);
	(&sponsoredPlayers)->drop(playerID);
}

bool GuildObjectImplementation::hasSponsoredPlayer(unsigned long long playerID) {
	Locker _locker(_this.get());
	// server/zone/objects/guild/GuildObject.idl():  		return sponsoredPlayers.contains(playerID);
	return (&sponsoredPlayers)->contains(playerID);
}

unsigned long long GuildObjectImplementation::getSponsoredPlayer(int idx) {
	Locker _locker(_this.get());
	// server/zone/objects/guild/GuildObject.idl():  		return sponsoredPlayers.get(idx);
	return (&sponsoredPlayers)->get(idx);
}

int GuildObjectImplementation::getSponsoredPlayerCount() {
	// server/zone/objects/guild/GuildObject.idl():  		return sponsoredPlayers.size();
	return (&sponsoredPlayers)->size();
}

void GuildObjectImplementation::setChatRoom(ChatRoom* room) {
	// server/zone/objects/guild/GuildObject.idl():  		chatRoom = room;
	chatRoom = room;
}

ChatRoom* GuildObjectImplementation::getChatRoom() {
	// server/zone/objects/guild/GuildObject.idl():  		return chatRoom;
	return chatRoom;
}

int GuildObjectImplementation::getTotalMembers() {
	// server/zone/objects/guild/GuildObject.idl():  		return guildMembers.size();
	return (&guildMembers)->size();
}

unsigned long long GuildObjectImplementation::getGuildLeaderID() {
	// server/zone/objects/guild/GuildObject.idl():  		return guildLeaderID;
	return guildLeaderID;
}

GuildMemberList* GuildObjectImplementation::getGuildMemberList() {
	// server/zone/objects/guild/GuildObject.idl():  		return guildMembers;
	return (&guildMembers);
}

String GuildObjectImplementation::getGuildAbbrev() {
	// server/zone/objects/guild/GuildObject.idl():  		return guildAbbrev;
	return guildAbbrev;
}

void GuildObjectImplementation::setGuildAbbrev(const String& abbrev) {
	// server/zone/objects/guild/GuildObject.idl():  		guildAbbrev = abbrev;
	guildAbbrev = abbrev;
}

void GuildObjectImplementation::setGuildLeaderID(unsigned long long leaderID) {
	// server/zone/objects/guild/GuildObject.idl():  		guildLeaderID = leaderID;
	guildLeaderID = leaderID;
}

void GuildObjectImplementation::setGuildID(unsigned int id) {
	// server/zone/objects/guild/GuildObject.idl():  		guildID = id;
	guildID = id;
}

unsigned int GuildObjectImplementation::getGuildID() {
	// server/zone/objects/guild/GuildObject.idl():  		return guildID;
	return guildID;
}

void GuildObjectImplementation::setGuildName(const String& gname) {
	// server/zone/objects/guild/GuildObject.idl():  		guildName = gname;
	guildName = gname;
}

String GuildObjectImplementation::getGuildName() {
	// server/zone/objects/guild/GuildObject.idl():  		return guildName;
	return guildName;
}

String GuildObjectImplementation::getGuildKey() {
	// server/zone/objects/guild/GuildObject.idl():  		string guildKey = String.valueOf(guildID) + ":" + guildAbbrev;
	String guildKey = String::valueOf(guildID) + ":" + guildAbbrev;
	// server/zone/objects/guild/GuildObject.idl():  		return guildKey;
	return guildKey;
}

bool GuildObjectImplementation::isGuildObject() {
	// server/zone/objects/guild/GuildObject.idl():  		return true;
	return true;
}

bool GuildObjectImplementation::isGuildLeader(CreatureObject* player) {
	// server/zone/objects/guild/GuildObject.idl():  		return (guildLeaderID == player.getObjectID());
	return (guildLeaderID == player->getObjectID());
}

/*
 *	GuildObjectAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


GuildObjectAdapter::GuildObjectAdapter(GuildObject* obj) : SceneObjectAdapter(obj) {
}

void GuildObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_SENDBASELINESTO__SCENEOBJECT_:
		{
			sendBaselinesTo(static_cast<SceneObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_BROADCASTMESSAGE__BASEMESSAGE_:
		{
			broadcastMessage(static_cast<BaseMessage*>(inv->getObjectParameter()));
		}
		break;
	case RPC_BROADCASTMESSAGE__CREATUREOBJECT_BASEMESSAGE_BOOL_:
		{
			broadcastMessage(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<BaseMessage*>(inv->getObjectParameter()), inv->getBooleanParameter());
		}
		break;
	case RPC_ADDMEMBER__LONG_:
		{
			addMember(inv->getUnsignedLongParameter());
		}
		break;
	case RPC_REMOVEMEMBER__LONG_:
		{
			removeMember(inv->getUnsignedLongParameter());
		}
		break;
	case RPC_HASMEMBER__LONG_:
		{
			resp->insertBoolean(hasMember(inv->getUnsignedLongParameter()));
		}
		break;
	case RPC_GETMEMBER__INT_:
		{
			resp->insertLong(getMember(inv->getSignedIntParameter()));
		}
		break;
	case RPC_ADDSPONSOREDPLAYER__LONG_:
		{
			addSponsoredPlayer(inv->getUnsignedLongParameter());
		}
		break;
	case RPC_REMOVESPONSOREDPLAYER__LONG_:
		{
			removeSponsoredPlayer(inv->getUnsignedLongParameter());
		}
		break;
	case RPC_HASSPONSOREDPLAYER__LONG_:
		{
			resp->insertBoolean(hasSponsoredPlayer(inv->getUnsignedLongParameter()));
		}
		break;
	case RPC_GETSPONSOREDPLAYER__INT_:
		{
			resp->insertLong(getSponsoredPlayer(inv->getSignedIntParameter()));
		}
		break;
	case RPC_GETSPONSOREDPLAYERCOUNT__:
		{
			resp->insertSignedInt(getSponsoredPlayerCount());
		}
		break;
	case RPC_SETCHATROOM__CHATROOM_:
		{
			setChatRoom(static_cast<ChatRoom*>(inv->getObjectParameter()));
		}
		break;
	case RPC_GETCHATROOM__:
		{
			resp->insertLong(getChatRoom()->_getObjectID());
		}
		break;
	case RPC_GETTOTALMEMBERS__:
		{
			resp->insertSignedInt(getTotalMembers());
		}
		break;
	case RPC_GETGUILDLEADERID__:
		{
			resp->insertLong(getGuildLeaderID());
		}
		break;
	case RPC_GETGUILDABBREV__:
		{
			resp->insertAscii(getGuildAbbrev());
		}
		break;
	case RPC_SETGUILDABBREV__STRING_:
		{
			String abbrev; 
			setGuildAbbrev(inv->getAsciiParameter(abbrev));
		}
		break;
	case RPC_SETGUILDLEADERID__LONG_:
		{
			setGuildLeaderID(inv->getUnsignedLongParameter());
		}
		break;
	case RPC_SETGUILDID__INT_:
		{
			setGuildID(inv->getUnsignedIntParameter());
		}
		break;
	case RPC_GETGUILDID__:
		{
			resp->insertInt(getGuildID());
		}
		break;
	case RPC_SETGUILDNAME__STRING_:
		{
			String gname; 
			setGuildName(inv->getAsciiParameter(gname));
		}
		break;
	case RPC_GETGUILDNAME__:
		{
			resp->insertAscii(getGuildName());
		}
		break;
	case RPC_GETGUILDKEY__:
		{
			resp->insertAscii(getGuildKey());
		}
		break;
	case RPC_ISGUILDOBJECT__:
		{
			resp->insertBoolean(isGuildObject());
		}
		break;
	case RPC_ISGUILDLEADER__CREATUREOBJECT_:
		{
			resp->insertBoolean(isGuildLeader(static_cast<CreatureObject*>(inv->getObjectParameter())));
		}
		break;
	case RPC_HASMAILPERMISSION__LONG_:
		{
			resp->insertBoolean(hasMailPermission(inv->getUnsignedLongParameter()));
		}
		break;
	case RPC_HASSPONSORPERMISSION__LONG_:
		{
			resp->insertBoolean(hasSponsorPermission(inv->getUnsignedLongParameter()));
		}
		break;
	case RPC_HASACCEPTPERMISSION__LONG_:
		{
			resp->insertBoolean(hasAcceptPermission(inv->getUnsignedLongParameter()));
		}
		break;
	case RPC_HASDISBANDPERMISSION__LONG_:
		{
			resp->insertBoolean(hasDisbandPermission(inv->getUnsignedLongParameter()));
		}
		break;
	case RPC_HASKICKPERMISSION__LONG_:
		{
			resp->insertBoolean(hasKickPermission(inv->getUnsignedLongParameter()));
		}
		break;
	case RPC_HASNAMEPERMISSION__LONG_:
		{
			resp->insertBoolean(hasNamePermission(inv->getUnsignedLongParameter()));
		}
		break;
	case RPC_HASTITLEPERMISSION__LONG_:
		{
			resp->insertBoolean(hasTitlePermission(inv->getUnsignedLongParameter()));
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void GuildObjectAdapter::sendBaselinesTo(SceneObject* player) {
	(static_cast<GuildObject*>(stub))->sendBaselinesTo(player);
}

void GuildObjectAdapter::broadcastMessage(BaseMessage* msg) {
	(static_cast<GuildObject*>(stub))->broadcastMessage(msg);
}

void GuildObjectAdapter::broadcastMessage(CreatureObject* player, BaseMessage* msg, bool sendSelf) {
	(static_cast<GuildObject*>(stub))->broadcastMessage(player, msg, sendSelf);
}

void GuildObjectAdapter::addMember(unsigned long long playerID) {
	(static_cast<GuildObject*>(stub))->addMember(playerID);
}

void GuildObjectAdapter::removeMember(unsigned long long playerID) {
	(static_cast<GuildObject*>(stub))->removeMember(playerID);
}

bool GuildObjectAdapter::hasMember(unsigned long long playerID) {
	return (static_cast<GuildObject*>(stub))->hasMember(playerID);
}

unsigned long long GuildObjectAdapter::getMember(int index) {
	return (static_cast<GuildObject*>(stub))->getMember(index);
}

void GuildObjectAdapter::addSponsoredPlayer(unsigned long long playerID) {
	(static_cast<GuildObject*>(stub))->addSponsoredPlayer(playerID);
}

void GuildObjectAdapter::removeSponsoredPlayer(unsigned long long playerID) {
	(static_cast<GuildObject*>(stub))->removeSponsoredPlayer(playerID);
}

bool GuildObjectAdapter::hasSponsoredPlayer(unsigned long long playerID) {
	return (static_cast<GuildObject*>(stub))->hasSponsoredPlayer(playerID);
}

unsigned long long GuildObjectAdapter::getSponsoredPlayer(int idx) {
	return (static_cast<GuildObject*>(stub))->getSponsoredPlayer(idx);
}

int GuildObjectAdapter::getSponsoredPlayerCount() {
	return (static_cast<GuildObject*>(stub))->getSponsoredPlayerCount();
}

void GuildObjectAdapter::setChatRoom(ChatRoom* room) {
	(static_cast<GuildObject*>(stub))->setChatRoom(room);
}

ChatRoom* GuildObjectAdapter::getChatRoom() {
	return (static_cast<GuildObject*>(stub))->getChatRoom();
}

int GuildObjectAdapter::getTotalMembers() {
	return (static_cast<GuildObject*>(stub))->getTotalMembers();
}

unsigned long long GuildObjectAdapter::getGuildLeaderID() {
	return (static_cast<GuildObject*>(stub))->getGuildLeaderID();
}

String GuildObjectAdapter::getGuildAbbrev() {
	return (static_cast<GuildObject*>(stub))->getGuildAbbrev();
}

void GuildObjectAdapter::setGuildAbbrev(const String& abbrev) {
	(static_cast<GuildObject*>(stub))->setGuildAbbrev(abbrev);
}

void GuildObjectAdapter::setGuildLeaderID(unsigned long long leaderID) {
	(static_cast<GuildObject*>(stub))->setGuildLeaderID(leaderID);
}

void GuildObjectAdapter::setGuildID(unsigned int id) {
	(static_cast<GuildObject*>(stub))->setGuildID(id);
}

unsigned int GuildObjectAdapter::getGuildID() {
	return (static_cast<GuildObject*>(stub))->getGuildID();
}

void GuildObjectAdapter::setGuildName(const String& gname) {
	(static_cast<GuildObject*>(stub))->setGuildName(gname);
}

String GuildObjectAdapter::getGuildName() {
	return (static_cast<GuildObject*>(stub))->getGuildName();
}

String GuildObjectAdapter::getGuildKey() {
	return (static_cast<GuildObject*>(stub))->getGuildKey();
}

bool GuildObjectAdapter::isGuildObject() {
	return (static_cast<GuildObject*>(stub))->isGuildObject();
}

bool GuildObjectAdapter::isGuildLeader(CreatureObject* player) {
	return (static_cast<GuildObject*>(stub))->isGuildLeader(player);
}

bool GuildObjectAdapter::hasMailPermission(unsigned long long playerID) {
	return (static_cast<GuildObject*>(stub))->hasMailPermission(playerID);
}

bool GuildObjectAdapter::hasSponsorPermission(unsigned long long playerID) {
	return (static_cast<GuildObject*>(stub))->hasSponsorPermission(playerID);
}

bool GuildObjectAdapter::hasAcceptPermission(unsigned long long playerID) {
	return (static_cast<GuildObject*>(stub))->hasAcceptPermission(playerID);
}

bool GuildObjectAdapter::hasDisbandPermission(unsigned long long playerID) {
	return (static_cast<GuildObject*>(stub))->hasDisbandPermission(playerID);
}

bool GuildObjectAdapter::hasKickPermission(unsigned long long playerID) {
	return (static_cast<GuildObject*>(stub))->hasKickPermission(playerID);
}

bool GuildObjectAdapter::hasNamePermission(unsigned long long playerID) {
	return (static_cast<GuildObject*>(stub))->hasNamePermission(playerID);
}

bool GuildObjectAdapter::hasTitlePermission(unsigned long long playerID) {
	return (static_cast<GuildObject*>(stub))->hasTitlePermission(playerID);
}

/*
 *	GuildObjectHelper
 */

GuildObjectHelper* GuildObjectHelper::staticInitializer = GuildObjectHelper::instance();

GuildObjectHelper::GuildObjectHelper() {
	className = "GuildObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void GuildObjectHelper::finalizeHelper() {
	GuildObjectHelper::finalize();
}

DistributedObject* GuildObjectHelper::instantiateObject() {
	return new GuildObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* GuildObjectHelper::instantiateServant() {
	return new GuildObjectImplementation();
}

DistributedObjectAdapter* GuildObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new GuildObjectAdapter(static_cast<GuildObject*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

