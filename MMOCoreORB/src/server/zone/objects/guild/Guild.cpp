/*
 *	server/zone/objects/guild/Guild.cpp generated by engine3 IDL compiler 0.55
 */

#include "Guild.h"

#include "GuildImplementation.h"

#include "../player/Player.h"

#include "../../managers/guild/GuildManager.h"

#include "../../ZoneServer.h"

#include "../../../chat/room/ChatRoom.h"

#include "../../managers/player/PlayerMap.h"

/*
 *	GuildStub
 */

Guild::Guild(unsigned int gid, const String& name, const String& tag) {
	_impl = new GuildImplementation(gid, name, tag);
	_impl->_setStub(this);
}

Guild::Guild(DummyConstructorParameter* param) {
	_impl = NULL;
}

Guild::~Guild() {
}

void Guild::sendGuildListTo(Player* player, bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		((GuildImplementation*) _impl)->sendGuildListTo(player, doLock);
}

void Guild::updateGuildFor(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((GuildImplementation*) _impl)->updateGuildFor(player);
}

void Guild::deleteGuildFor(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((GuildImplementation*) _impl)->deleteGuildFor(player);
}

void Guild::setGuildManager(GuildManager* gmanager) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(gmanager);

		method.executeWithVoidReturn();
	} else
		((GuildImplementation*) _impl)->setGuildManager(gmanager);
}

unsigned int Guild::getGuildID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((GuildImplementation*) _impl)->getGuildID();
}

ChatRoom* Guild::getGuildChat() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		return (ChatRoom*) method.executeWithObjectReturn();
	} else
		return ((GuildImplementation*) _impl)->getGuildChat();
}

void Guild::setGuildChat(ChatRoom* guildchat) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addObjectParameter(guildchat);

		method.executeWithVoidReturn();
	} else
		((GuildImplementation*) _impl)->setGuildChat(guildchat);
}

String& Guild::getGuildName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		method.executeWithAsciiReturn(_return_getGuildName);
		return _return_getGuildName;
	} else
		return ((GuildImplementation*) _impl)->getGuildName();
}

void Guild::setGuildLeader(unsigned int guleader) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addUnsignedIntParameter(guleader);

		method.executeWithVoidReturn();
	} else
		((GuildImplementation*) _impl)->setGuildLeader(guleader);
}

unsigned int Guild::getGuildLeader() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((GuildImplementation*) _impl)->getGuildLeader();
}

String& Guild::getGuildTag() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		method.executeWithAsciiReturn(_return_getGuildTag);
		return _return_getGuildTag;
	} else
		return ((GuildImplementation*) _impl)->getGuildTag();
}

void Guild::setGuildName(const String& nom) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addAsciiParameter(nom);

		method.executeWithVoidReturn();
	} else
		((GuildImplementation*) _impl)->setGuildName(nom);
}

void Guild::setGuildTag(const String& nom) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addAsciiParameter(nom);

		method.executeWithVoidReturn();
	} else
		((GuildImplementation*) _impl)->setGuildTag(nom);
}

void Guild::putSponsoredMap(const String& nom) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addAsciiParameter(nom);

		method.executeWithVoidReturn();
	} else
		((GuildImplementation*) _impl)->putSponsoredMap(nom);
}

unsigned int Guild::getSponsoredMapSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((GuildImplementation*) _impl)->getSponsoredMapSize();
}

String& Guild::getSponsoredMap(int i) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addSignedIntParameter(i);

		method.executeWithAsciiReturn(_return_getSponsoredMap);
		return _return_getSponsoredMap;
	} else
		return ((GuildImplementation*) _impl)->getSponsoredMap(i);
}

void Guild::clearSponsoredMap() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);

		method.executeWithVoidReturn();
	} else
		((GuildImplementation*) _impl)->clearSponsoredMap();
}

/*
 *	GuildAdapter
 */

GuildAdapter::GuildAdapter(GuildImplementation* obj) : DistributedObjectAdapter((DistributedObjectServant*) obj) {
}

Packet* GuildAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		sendGuildListTo((Player*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 7:
		updateGuildFor((Player*) inv->getObjectParameter());
		break;
	case 8:
		deleteGuildFor((Player*) inv->getObjectParameter());
		break;
	case 9:
		setGuildManager((GuildManager*) inv->getObjectParameter());
		break;
	case 10:
		resp->insertInt(getGuildID());
		break;
	case 11:
		resp->insertLong(getGuildChat()->_getObjectID());
		break;
	case 12:
		setGuildChat((ChatRoom*) inv->getObjectParameter());
		break;
	case 13:
		resp->insertAscii(getGuildName());
		break;
	case 14:
		setGuildLeader(inv->getUnsignedIntParameter());
		break;
	case 15:
		resp->insertInt(getGuildLeader());
		break;
	case 16:
		resp->insertAscii(getGuildTag());
		break;
	case 17:
		setGuildName(inv->getAsciiParameter(_param0_setGuildName__String_));
		break;
	case 18:
		setGuildTag(inv->getAsciiParameter(_param0_setGuildTag__String_));
		break;
	case 19:
		putSponsoredMap(inv->getAsciiParameter(_param0_putSponsoredMap__String_));
		break;
	case 20:
		resp->insertInt(getSponsoredMapSize());
		break;
	case 21:
		resp->insertAscii(getSponsoredMap(inv->getSignedIntParameter()));
		break;
	case 22:
		clearSponsoredMap();
		break;
	default:
		return NULL;
	}

	return resp;
}

void GuildAdapter::sendGuildListTo(Player* player, bool doLock) {
	return ((GuildImplementation*) impl)->sendGuildListTo(player, doLock);
}

void GuildAdapter::updateGuildFor(Player* player) {
	return ((GuildImplementation*) impl)->updateGuildFor(player);
}

void GuildAdapter::deleteGuildFor(Player* player) {
	return ((GuildImplementation*) impl)->deleteGuildFor(player);
}

void GuildAdapter::setGuildManager(GuildManager* gmanager) {
	return ((GuildImplementation*) impl)->setGuildManager(gmanager);
}

unsigned int GuildAdapter::getGuildID() {
	return ((GuildImplementation*) impl)->getGuildID();
}

ChatRoom* GuildAdapter::getGuildChat() {
	return ((GuildImplementation*) impl)->getGuildChat();
}

void GuildAdapter::setGuildChat(ChatRoom* guildchat) {
	return ((GuildImplementation*) impl)->setGuildChat(guildchat);
}

String& GuildAdapter::getGuildName() {
	return ((GuildImplementation*) impl)->getGuildName();
}

void GuildAdapter::setGuildLeader(unsigned int guleader) {
	return ((GuildImplementation*) impl)->setGuildLeader(guleader);
}

unsigned int GuildAdapter::getGuildLeader() {
	return ((GuildImplementation*) impl)->getGuildLeader();
}

String& GuildAdapter::getGuildTag() {
	return ((GuildImplementation*) impl)->getGuildTag();
}

void GuildAdapter::setGuildName(const String& nom) {
	return ((GuildImplementation*) impl)->setGuildName(nom);
}

void GuildAdapter::setGuildTag(const String& nom) {
	return ((GuildImplementation*) impl)->setGuildTag(nom);
}

void GuildAdapter::putSponsoredMap(const String& nom) {
	return ((GuildImplementation*) impl)->putSponsoredMap(nom);
}

unsigned int GuildAdapter::getSponsoredMapSize() {
	return ((GuildImplementation*) impl)->getSponsoredMapSize();
}

String& GuildAdapter::getSponsoredMap(int i) {
	return ((GuildImplementation*) impl)->getSponsoredMap(i);
}

void GuildAdapter::clearSponsoredMap() {
	return ((GuildImplementation*) impl)->clearSponsoredMap();
}

/*
 *	GuildHelper
 */

GuildHelper* GuildHelper::staticInitializer = GuildHelper::instance();

GuildHelper::GuildHelper() {
	className = "Guild";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void GuildHelper::finalizeHelper() {
	GuildHelper::finalize();
}

DistributedObject* GuildHelper::instantiateObject() {
	return new Guild(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* GuildHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new GuildAdapter((GuildImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	GuildServant
 */

GuildServant::GuildServant() {
	_classHelper = GuildHelper::instance();
}

GuildServant::~GuildServant() {
}

void GuildServant::_setStub(DistributedObjectStub* stub) {
	_this = (Guild*) stub;
}

DistributedObjectStub* GuildServant::_getStub() {
	return _this;
}

