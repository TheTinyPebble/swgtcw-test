/*
Copyright (C) 2007 <SWGEmu>

This File is part of Core3.

This program is free software; you can redistribute
it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software
Foundation; either version 2 of the License,
or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for
more details.

You should have received a copy of the GNU Lesser General
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Linking Engine3 statically or dynamically with other modules
is making a combined work based on Engine3.
Thus, the terms and conditions of the GNU Lesser General Public License
cover the whole combination.

In addition, as a special exception, the copyright holders of Engine3
give you permission to combine Engine3 program with free software
programs or libraries that are released under the GNU LGPL and with
code included in the standard release of Core3 under the GNU LGPL
license (or modified versions of such code, with unchanged license).
You may copy and distribute such a system following the terms of the
GNU LGPL for Engine3 and the licenses of the other code concerned,
provided that you include the source code of that other code when
and as the GNU LGPL requires distribution of source code.

Note that people who make modified versions of Engine3 are not obligated
to grant this special exception for their modified versions;
it is their choice whether to do so. The GNU Lesser General Public License
gives permission to release a modified version without this exception;
this exception also makes it possible to release a modified version
which carries forward this exception.
*/

package server.zone.objects.guild;

import engine.service.proto.BaseMessage;
import server.chat.room.ChatRoom;
import server.zone.objects.tangible.terminal.guild.GuildTerminal;
include server.zone.objects.guild.GuildMemberList;
include server.zone.objects.guild.GuildMemberInfo;
import server.zone.objects.player.PlayerCreature;
import server.zone.objects.scene.SceneObject;
import system.lang.String;

class GuildObject extends SceneObject {
	protected ChatRoom chatRoom;
	
	@dereferenced
	protected GuildMemberList guildMembers;
	
	@dereferenced
	protected SortedVector<unsigned long> sponsoredPlayers;
	
	protected unsigned int guildID;
	protected string guildName;
	protected string guildAbbrev;
	
	protected unsigned long guildLeaderID;
	
	public static final byte PERMISSION_NONE = 0x00;
	public static final byte PERMISSION_MAIL = 0x01;
	public static final byte PERMISSION_SPONSOR = 0x02;
	public static final byte PERMISSION_TITLE = 0x04;
	public static final byte PERMISSION_ACCEPT = 0x08;
	public static final byte PERMISSION_KICK = 0x10;
	public static final byte PERMISSION_WAR = 0x20;
	public static final byte PERMISSION_NAME = 0x40;
	public static final byte PERMISSION_DISBAND = 0x80;
	public static final byte PERMISSION_ALL = 0xFF;
	
	public GuildObject() {		
		Logger.setLoggingName("GuildObject");
		
		guildLeaderID = 0;
		guildID = 0;
		chatRoom = null;
		
		sponsoredPlayers.setNoDuplicateInsertPlan();
	}
	
	public native void sendBaselinesTo(SceneObject player);
	public native void broadcastMessage(BaseMessage msg);
	public native void broadcastMessage(PlayerCreature player, BaseMessage msg, boolean sendSelf = false);

	/**
	 * Adds the Player to the GuildMemberList. Doesn't do anything else!
	 * Use the GuildManager for adding and removing of players that sends messages etc.
	 * @param player The player's objectid to add
	 */
	public native void addMember(unsigned long playerID);
	public native void removeMember(unsigned long playerID);
	public native boolean hasMember(unsigned long playerID);
	
	@local
	public native GuildMemberInfo getMember(unsigned long playerID);
	
	public synchronized void addSponsoredPlayer(unsigned long playerID) {
		sponsoredPlayers.put(playerID);
	}
	
	public synchronized void removeSponsoredPlayer(unsigned long playerID) {
		sponsoredPlayers.drop(playerID);
	}
	
	public synchronized boolean hasSponsoredPlayer(unsigned long playerID) {
		return sponsoredPlayers.contains(playerID);
	}
	
	public synchronized unsigned long getSponsoredPlayer(int idx) {
		return sponsoredPlayers.get(idx);
	}
	
	public int getSponsoredPlayerCount() {
		return sponsoredPlayers.size();
	}

	public native void startChatRoom();
	public native void destroyChatRoom();

	public ChatRoom getChatRoom() {
		return chatRoom;
	}

	public int getTotalMembers() {
		return guildMembers.size();
	}

	public unsigned long getGuildLeaderID() {
		return guildLeaderID;
	}
	
	@local
	public GuildMemberList getGuildMemberList() {
		return guildMembers;
	}

	public string getGuildAbbrev() {
		return guildAbbrev;
	}
	
	public void setGuildAbbrev(final string abbrev) {
		guildAbbrev = abbrev;
	}
	
	public void setGuildLeaderID(unsigned long leaderID) {
		guildLeaderID = leaderID;
	}
	
	public void setGuildID(unsigned int id) {
		guildID = id;
	}
	
	public unsigned int getGuildID() {
		return guildID;
	}
	
	public void setGuildName(final string gname) {
		guildName = gname;
	}
	
	public string getGuildName() {
		return guildName;
	}
	
	public string getGuildKey() {
		string guildKey = String.valueOf(guildID) + ":" + guildAbbrev;
		return guildKey;
	}
	
	public boolean isGuildObject() {
		return true;
	}
	
	public native boolean hasMailPermission(unsigned long playerID);
	public native boolean hasSponsorPermission(unsigned long playerID);
	public native boolean hasAcceptPermission(unsigned long playerID);
	public native boolean hasDisbandPermission(unsigned long playerID);
	public native boolean hasKickPermission(unsigned long playerID);
}
