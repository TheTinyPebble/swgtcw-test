/*
 *	server/zone/objects/manufacture/ManufactureSchematic.cpp generated by engine3 IDL compiler 0.55
 */

#include "ManufactureSchematic.h"

#include "ManufactureSchematicImplementation.h"

#include "../scene/SceneObject.h"

#include "../draftschematic/DraftSchematic.h"

#include "../tangible/TangibleObject.h"

#include "../tangible/crafting/CraftingTool.h"

#include "../player/Player.h"

/*
 *	ManufactureSchematicStub
 */

ManufactureSchematic::ManufactureSchematic(unsigned long long oid, String& n, String& stfFile, String& stfName, unsigned int crc) : SceneObject(DummyConstructorParameter::instance()) {
	_impl = new ManufactureSchematicImplementation(oid, n, stfFile, stfName, crc);
	_impl->_setStub(this);
}

ManufactureSchematic::ManufactureSchematic(unsigned long long oid, DraftSchematic* draftSchematic, CraftingTool* craftingTool) : SceneObject(DummyConstructorParameter::instance()) {
	_impl = new ManufactureSchematicImplementation(oid, draftSchematic, craftingTool);
	_impl->_setStub(this);
}

ManufactureSchematic::ManufactureSchematic(DummyConstructorParameter* param) : SceneObject(param) {
}

ManufactureSchematic::~ManufactureSchematic() {
}

void ManufactureSchematic::parseItemAttributes() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _impl)->parseItemAttributes();
}

void ManufactureSchematic::generateAttributes(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _impl)->generateAttributes(player);
}

void ManufactureSchematic::addAttributes(AttributeListMessage* alm) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(alm);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _impl)->addAttributes(alm);
}

int ManufactureSchematic::getComplexity() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return method.executeWithSignedIntReturn();
	} else
		return ((ManufactureSchematicImplementation*) _impl)->getComplexity();
}

int ManufactureSchematic::getManufacturingLimit() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		return method.executeWithSignedIntReturn();
	} else
		return ((ManufactureSchematicImplementation*) _impl)->getManufacturingLimit();
}

int ManufactureSchematic::getDataSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		return method.executeWithSignedIntReturn();
	} else
		return ((ManufactureSchematicImplementation*) _impl)->getDataSize();
}

TangibleObject* ManufactureSchematic::getTangibleObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		return (TangibleObject*) method.executeWithObjectReturn();
	} else
		return ((ManufactureSchematicImplementation*) _impl)->getTangibleObject();
}

void ManufactureSchematic::setComplexity(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _impl)->setComplexity(value);
}

void ManufactureSchematic::setManufacturingLimit(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _impl)->setManufacturingLimit(value);
}

int ManufactureSchematic::getIngredientSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		return method.executeWithSignedIntReturn();
	} else
		return ((ManufactureSchematicImplementation*) _impl)->getIngredientSize();
}

String& ManufactureSchematic::getIngredientName(int i) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addSignedIntParameter(i);

		method.executeWithAsciiReturn(_return_getIngredientName);
		return _return_getIngredientName;
	} else
		return ((ManufactureSchematicImplementation*) _impl)->getIngredientName(i);
}

int ManufactureSchematic::getIngredientValue(int i) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addSignedIntParameter(i);

		return method.executeWithSignedIntReturn();
	} else
		return ((ManufactureSchematicImplementation*) _impl)->getIngredientValue(i);
}

void ManufactureSchematic::setTangibleObject(TangibleObject* tano) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addObjectParameter(tano);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _impl)->setTangibleObject(tano);
}

void ManufactureSchematic::setDataSize(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _impl)->setDataSize(value);
}

/*
 *	ManufactureSchematicAdapter
 */

ManufactureSchematicAdapter::ManufactureSchematicAdapter(ManufactureSchematicImplementation* obj) : SceneObjectAdapter(obj) {
}

Packet* ManufactureSchematicAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		parseItemAttributes();
		break;
	case 7:
		generateAttributes((Player*) inv->getObjectParameter());
		break;
	case 8:
		addAttributes((AttributeListMessage*) inv->getObjectParameter());
		break;
	case 9:
		resp->insertSignedInt(getComplexity());
		break;
	case 10:
		resp->insertSignedInt(getManufacturingLimit());
		break;
	case 11:
		resp->insertSignedInt(getDataSize());
		break;
	case 12:
		resp->insertLong(getTangibleObject()->_getObjectID());
		break;
	case 13:
		setComplexity(inv->getSignedIntParameter());
		break;
	case 14:
		setManufacturingLimit(inv->getSignedIntParameter());
		break;
	case 15:
		resp->insertSignedInt(getIngredientSize());
		break;
	case 16:
		resp->insertAscii(getIngredientName(inv->getSignedIntParameter()));
		break;
	case 17:
		resp->insertSignedInt(getIngredientValue(inv->getSignedIntParameter()));
		break;
	case 18:
		setTangibleObject((TangibleObject*) inv->getObjectParameter());
		break;
	case 19:
		setDataSize(inv->getSignedIntParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void ManufactureSchematicAdapter::parseItemAttributes() {
	return ((ManufactureSchematicImplementation*) impl)->parseItemAttributes();
}

void ManufactureSchematicAdapter::generateAttributes(Player* player) {
	return ((ManufactureSchematicImplementation*) impl)->generateAttributes(player);
}

void ManufactureSchematicAdapter::addAttributes(AttributeListMessage* alm) {
	return ((ManufactureSchematicImplementation*) impl)->addAttributes(alm);
}

int ManufactureSchematicAdapter::getComplexity() {
	return ((ManufactureSchematicImplementation*) impl)->getComplexity();
}

int ManufactureSchematicAdapter::getManufacturingLimit() {
	return ((ManufactureSchematicImplementation*) impl)->getManufacturingLimit();
}

int ManufactureSchematicAdapter::getDataSize() {
	return ((ManufactureSchematicImplementation*) impl)->getDataSize();
}

TangibleObject* ManufactureSchematicAdapter::getTangibleObject() {
	return ((ManufactureSchematicImplementation*) impl)->getTangibleObject();
}

void ManufactureSchematicAdapter::setComplexity(int value) {
	return ((ManufactureSchematicImplementation*) impl)->setComplexity(value);
}

void ManufactureSchematicAdapter::setManufacturingLimit(int value) {
	return ((ManufactureSchematicImplementation*) impl)->setManufacturingLimit(value);
}

int ManufactureSchematicAdapter::getIngredientSize() {
	return ((ManufactureSchematicImplementation*) impl)->getIngredientSize();
}

String& ManufactureSchematicAdapter::getIngredientName(int i) {
	return ((ManufactureSchematicImplementation*) impl)->getIngredientName(i);
}

int ManufactureSchematicAdapter::getIngredientValue(int i) {
	return ((ManufactureSchematicImplementation*) impl)->getIngredientValue(i);
}

void ManufactureSchematicAdapter::setTangibleObject(TangibleObject* tano) {
	return ((ManufactureSchematicImplementation*) impl)->setTangibleObject(tano);
}

void ManufactureSchematicAdapter::setDataSize(int value) {
	return ((ManufactureSchematicImplementation*) impl)->setDataSize(value);
}

/*
 *	ManufactureSchematicHelper
 */

ManufactureSchematicHelper* ManufactureSchematicHelper::staticInitializer = ManufactureSchematicHelper::instance();

ManufactureSchematicHelper::ManufactureSchematicHelper() {
	className = "ManufactureSchematic";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void ManufactureSchematicHelper::finalizeHelper() {
	ManufactureSchematicHelper::finalize();
}

DistributedObject* ManufactureSchematicHelper::instantiateObject() {
	return new ManufactureSchematic(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ManufactureSchematicHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ManufactureSchematicAdapter((ManufactureSchematicImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	ManufactureSchematicServant
 */

ManufactureSchematicServant::ManufactureSchematicServant(unsigned long long oid, int tp) : SceneObjectImplementation(oid, tp) {
	_classHelper = ManufactureSchematicHelper::instance();
}

ManufactureSchematicServant::~ManufactureSchematicServant() {
}

void ManufactureSchematicServant::_setStub(DistributedObjectStub* stub) {
	_this = (ManufactureSchematic*) stub;
	SceneObjectServant::_setStub(stub);
}

DistributedObjectStub* ManufactureSchematicServant::_getStub() {
	return _this;
}

