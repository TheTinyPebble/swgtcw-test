/*
 *	server/zone/objects/mission/HuntingMissionObjective.cpp generated by engine3 IDL compiler 0.60
 */

#include "HuntingMissionObjective.h"

#include "server/zone/objects/scene/Observer.h"

#include "server/zone/objects/scene/Observable.h"

#include "server/zone/objects/mission/MissionObject.h"

#include "server/zone/objects/mission/MissionObserver.h"

#include "server/zone/objects/area/MissionSpawnActiveArea.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/templates/SharedObjectTemplate.h"


// Imported class dependencies

#include "server/zone/objects/mission/DestroyMissionObjective.h"

#include "engine/util/Quaternion.h"

#include "server/zone/templates/TemplateReference.h"

#include "system/util/VectorMap.h"

#include "server/zone/objects/scene/ObserverEventMap.h"

#include "server/zone/objects/mission/MissionObject.h"

#include "system/util/Vector.h"

#include "server/zone/ZoneProcessServerImplementation.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/mission/MissionObjective.h"

#include "server/zone/objects/waypoint/WaypointObject.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "system/util/SortedVector.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

#include "server/zone/objects/scene/variables/StringId.h"

/*
 *	HuntingMissionObjectiveStub
 */

HuntingMissionObjective::HuntingMissionObjective(MissionObject* mission) : MissionObjective(DummyConstructorParameter::instance()) {
	HuntingMissionObjectiveImplementation* _implementation = new HuntingMissionObjectiveImplementation(mission);
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

HuntingMissionObjective::HuntingMissionObjective(DummyConstructorParameter* param) : MissionObjective(param) {
}

HuntingMissionObjective::~HuntingMissionObjective() {
}


void HuntingMissionObjective::initializeTransientMembers() {
	HuntingMissionObjectiveImplementation* _implementation = (HuntingMissionObjectiveImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void HuntingMissionObjective::activate() {
	HuntingMissionObjectiveImplementation* _implementation = (HuntingMissionObjectiveImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		_implementation->activate();
}

void HuntingMissionObjective::abort() {
	HuntingMissionObjectiveImplementation* _implementation = (HuntingMissionObjectiveImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		method.executeWithVoidReturn();
	} else
		_implementation->abort();
}

void HuntingMissionObjective::complete() {
	HuntingMissionObjectiveImplementation* _implementation = (HuntingMissionObjectiveImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		method.executeWithVoidReturn();
	} else
		_implementation->complete();
}

int HuntingMissionObjective::notifyObserverEvent(MissionObserver* observer, unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	HuntingMissionObjectiveImplementation* _implementation = (HuntingMissionObjectiveImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(observer);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(observable);
		method.addObjectParameter(arg1);
		method.addSignedLongParameter(arg2);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyObserverEvent(observer, eventType, observable, arg1, arg2);
}

DistributedObjectServant* HuntingMissionObjective::_getImplementation() {
	return getForUpdate();}

void HuntingMissionObjective::_setImplementation(DistributedObjectServant* servant) {
	setObject((ManagedObjectImplementation*) servant);}

/*
 *	HuntingMissionObjectiveImplementation
 */

HuntingMissionObjectiveImplementation::HuntingMissionObjectiveImplementation(DummyConstructorParameter* param) : MissionObjectiveImplementation(param) {
	_initializeImplementation();
}


HuntingMissionObjectiveImplementation::~HuntingMissionObjectiveImplementation() {
	HuntingMissionObjectiveImplementation::finalize();
}


void HuntingMissionObjectiveImplementation::_initializeImplementation() {
	_setClassHelper(HuntingMissionObjectiveHelper::instance());

	_serializationHelperMethod();
}

void HuntingMissionObjectiveImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (HuntingMissionObjective*) stub;
	MissionObjectiveImplementation::_setStub(stub);
}

DistributedObjectStub* HuntingMissionObjectiveImplementation::_getStub() {
	return _this;
}

HuntingMissionObjectiveImplementation::operator const HuntingMissionObjective*() {
	return _this;
}

TransactionalObject* HuntingMissionObjectiveImplementation::clone() {
	return (TransactionalObject*) new HuntingMissionObjectiveImplementation(*this);
}


void HuntingMissionObjectiveImplementation::lock(bool doLock) {
}

void HuntingMissionObjectiveImplementation::lock(ManagedObject* obj) {
}

void HuntingMissionObjectiveImplementation::rlock(bool doLock) {
}

void HuntingMissionObjectiveImplementation::wlock(bool doLock) {
}

void HuntingMissionObjectiveImplementation::wlock(ManagedObject* obj) {
}

void HuntingMissionObjectiveImplementation::unlock(bool doLock) {
}

void HuntingMissionObjectiveImplementation::runlock(bool doLock) {
}

void HuntingMissionObjectiveImplementation::_serializationHelperMethod() {
	MissionObjectiveImplementation::_serializationHelperMethod();

	_setClassName("HuntingMissionObjective");

	addSerializableVariable("targetsKilled", &targetsKilled);
}

HuntingMissionObjectiveImplementation::HuntingMissionObjectiveImplementation(MissionObject* mission) : MissionObjectiveImplementation(mission) {
	_initializeImplementation();
	// server/zone/objects/mission/HuntingMissionObjective.idl(63):  		Logger.setLoggingName("HuntingMissionObjective");
	Logger::setLoggingName("HuntingMissionObjective");
}

void HuntingMissionObjectiveImplementation::finalize() {
	// server/zone/objects/mission/HuntingMissionObjective.idl(67):  		Logger.info("deleting from memory", true);
	Logger::info("deleting from memory", true);
}

void HuntingMissionObjectiveImplementation::initializeTransientMembers() {
	// server/zone/objects/mission/HuntingMissionObjective.idl(71):  		super.initializeTransientMembers();
	MissionObjectiveImplementation::initializeTransientMembers();
	// server/zone/objects/mission/HuntingMissionObjective.idl(73):  		Logger.setLoggingName("MissionObject");
	Logger::setLoggingName("MissionObject");
	// server/zone/objects/mission/HuntingMissionObjective.idl(75):  		activate();
	activate();
}

/*
 *	HuntingMissionObjectiveAdapter
 */

HuntingMissionObjectiveAdapter::HuntingMissionObjectiveAdapter(HuntingMissionObjectiveImplementation* obj) : MissionObjectiveAdapter(obj) {
}

Packet* HuntingMissionObjectiveAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		finalize();
		break;
	case 7:
		initializeTransientMembers();
		break;
	case 8:
		activate();
		break;
	case 9:
		abort();
		break;
	case 10:
		complete();
		break;
	case 11:
		resp->insertSignedInt(notifyObserverEvent((MissionObserver*) inv->getObjectParameter(), inv->getUnsignedIntParameter(), (Observable*) inv->getObjectParameter(), (ManagedObject*) inv->getObjectParameter(), inv->getSignedLongParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

void HuntingMissionObjectiveAdapter::finalize() {
	((HuntingMissionObjectiveImplementation*) impl)->finalize();
}

void HuntingMissionObjectiveAdapter::initializeTransientMembers() {
	((HuntingMissionObjectiveImplementation*) impl)->initializeTransientMembers();
}

void HuntingMissionObjectiveAdapter::activate() {
	((HuntingMissionObjectiveImplementation*) impl)->activate();
}

void HuntingMissionObjectiveAdapter::abort() {
	((HuntingMissionObjectiveImplementation*) impl)->abort();
}

void HuntingMissionObjectiveAdapter::complete() {
	((HuntingMissionObjectiveImplementation*) impl)->complete();
}

int HuntingMissionObjectiveAdapter::notifyObserverEvent(MissionObserver* observer, unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	return ((HuntingMissionObjectiveImplementation*) impl)->notifyObserverEvent(observer, eventType, observable, arg1, arg2);
}

/*
 *	HuntingMissionObjectiveHelper
 */

HuntingMissionObjectiveHelper* HuntingMissionObjectiveHelper::staticInitializer = HuntingMissionObjectiveHelper::instance();

HuntingMissionObjectiveHelper::HuntingMissionObjectiveHelper() {
	className = "HuntingMissionObjective";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void HuntingMissionObjectiveHelper::finalizeHelper() {
	HuntingMissionObjectiveHelper::finalize();
}

DistributedObject* HuntingMissionObjectiveHelper::instantiateObject() {
	return new HuntingMissionObjective(DummyConstructorParameter::instance());
}

DistributedObjectServant* HuntingMissionObjectiveHelper::instantiateServant() {
	return new HuntingMissionObjectiveImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* HuntingMissionObjectiveHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new HuntingMissionObjectiveAdapter((HuntingMissionObjectiveImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

