/*
 *	server/zone/objects/mission/MissionObjective.h generated by engine3 IDL compiler 0.55
 */

#ifndef MISSIONOBJECTIVE_H_
#define MISSIONOBJECTIVE_H_

#include "engine/orb/DistributedObjectBroker.h"

class MissionManagerImplementation;

class SceneObject;

class TangibleObject;

class Player;

class Creature;

class MissionObject;

class MissionObjective : public DistributedObjectStub {
public:
	MissionObjective(String& serialized);

	void init();

	void setObjectiveType(int ot);

	int getObjectiveType();

	bool hasFailed();

	bool hasCompleted();

	void setTargetCrc(int oc);

	unsigned int getTargetCrc();

	void setIsFailure(bool isf);

	void incrementVar(int increment);

	int getVar();

	void setLimit(int lm);

	int getLimit();

	void setStrVar(const String& str);

	String& getStrVar();

	void checkObjectiveStatus();

	String& serializeObjective();

	bool deserializeObjective(String& localTemp, bool setThis);

protected:
	MissionObjective(DummyConstructorParameter* param);

	virtual ~MissionObjective();

	String _return_getStrVar;
	String _return_serializeObjective;

	friend class MissionObjectiveHelper;
};

class MissionObjectiveImplementation;

class MissionObjectiveAdapter : public DistributedObjectAdapter {
public:
	MissionObjectiveAdapter(MissionObjectiveImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void init();

	void setObjectiveType(int ot);

	int getObjectiveType();

	bool hasFailed();

	bool hasCompleted();

	void setTargetCrc(int oc);

	unsigned int getTargetCrc();

	void setIsFailure(bool isf);

	void incrementVar(int increment);

	int getVar();

	void setLimit(int lm);

	int getLimit();

	void setStrVar(const String& str);

	String& getStrVar();

	void checkObjectiveStatus();

	String& serializeObjective();

	bool deserializeObjective(String& localTemp, bool setThis);

protected:
	String _param0_setStrVar__String_;
	String _param0_deserializeObjective__String_bool_;
};

class MissionObjectiveHelper : public DistributedObjectClassHelper, public Singleton<MissionObjectiveHelper> {
	static MissionObjectiveHelper* staticInitializer;

public:
	MissionObjectiveHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<MissionObjectiveHelper>;
};

class MissionObjectiveServant : public DistributedObjectServant {
public:
	MissionObjective* _this;

public:
	MissionObjectiveServant();
	virtual ~MissionObjectiveServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*MISSIONOBJECTIVE_H_*/
