/*
 *	server/zone/objects/mission/MissionObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "MissionObject.h"

#include "server/zone/objects/waypoint/WaypointObject.h"

#include "server/zone/Zone.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/objects/mission/MissionObserver.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/mission/MissionObjective.h"

#include "server/zone/managers/mission/spawnmaps/NpcSpawnPoint.h"

/*
 *	MissionObjectStub
 */

enum {RPC_CREATEWAYPOINT__ = 6,RPC_DESTROYOBJECTFROMDATABASE__BOOL_,RPC_UPDATETODATABASEALLOBJECTS__BOOL_,RPC_SETREFRESHCOUNTER__INT_BOOL_,RPC_SETTYPECRC__INT_BOOL_,RPC_INITIALIZETRANSIENTMEMBERS__,RPC_SENDBASELINESTO__SCENEOBJECT_,RPC_SETMISSIONDESCRIPTION__STRING_STRING_BOOL_,RPC_SETMISSIONTITLE__STRING_STRING_BOOL_,RPC_SETMISSIONTARGETNAME__STRING_BOOL_,RPC_SETMISSIONDIFFICULTY__INT_BOOL_,RPC_SETREWARDCREDITS__INT_BOOL_,RPC_SETSTARTPOSITION__FLOAT_FLOAT_STRING_BOOL_,RPC_SETENDPOSITION__FLOAT_FLOAT_STRING_BOOL_,RPC_SETCREATORNAME__STRING_BOOL_,RPC_GETSTARTPLANETCRC__,RPC_UPDATEMISSIONLOCATION__,RPC_ABORT__,RPC_SETFACTION__INT_,RPC_SETMISSIONOBJECTIVE__MISSIONOBJECTIVE_,RPC_SETSTARTPLANET__STRING_,RPC_SETREWARDFACTIONPOINTSREBEL__INT_,RPC_SETREWARDFACTIONPOINTSIMPERIAL__INT_,RPC_SETENDPLANET__STRING_,RPC_SETMISSIONTARGET__NPCSPAWNPOINT_,RPC_SETMISSIONTARGETDEST__NPCSPAWNPOINT_,RPC_SETMISSIONNUMBER__INT_,RPC_SETTARGETOPTIONALTEMPLATE__STRING_,RPC_SETTEMPLATESTRINGS__STRING_STRING_,RPC_GETMISSIONOBJECTIVE__,RPC_GETFACTION__,RPC_GETREWARDFACTIONPOINTSREBEL__,RPC_GETREWARDFACTIONPOINTSIMPERIAL__,RPC_GETSTARTPOSITIONX__,RPC_GETSTARTPOSITIONY__,RPC_GETTARGETOPTIONALTEMPLATE__,RPC_GETSTARTPLANET__,RPC_GETENDPOSITIONX__,RPC_GETENDPOSITIONY__,RPC_GETENDPLANET__,RPC_GETWAYPOINTTOMISSION__,RPC_GETMISSIONTARGET__,RPC_GETMISSIONTARGETDEST__,RPC_GETTYPECRC__,RPC_GETREWARDCREDITS__,RPC_GETCREATORNAME__,RPC_GETDIFFICULTYLEVEL__,RPC_GETTARGETNAME__,RPC_GETREFRESHCOUNTER__,RPC_GETMISSIONNUMBER__,RPC_ISSURVEYMISSION__,RPC_ISMISSIONOBJECT__,RPC_GETTEMPLATESTRING1__,RPC_GETTEMPLATESTRING2__};

MissionObject::MissionObject() : IntangibleObject(DummyConstructorParameter::instance()) {
	MissionObjectImplementation* _implementation = new MissionObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

MissionObject::MissionObject(DummyConstructorParameter* param) : IntangibleObject(param) {
}

MissionObject::~MissionObject() {
}



WaypointObject* MissionObject::createWaypoint() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATEWAYPOINT__);

		return static_cast<WaypointObject*>(method.executeWithObjectReturn());
	} else
		return _implementation->createWaypoint();
}

void MissionObject::destroyObjectFromDatabase(bool destroyContainedObjects) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DESTROYOBJECTFROMDATABASE__BOOL_);
		method.addBooleanParameter(destroyContainedObjects);

		method.executeWithVoidReturn();
	} else
		_implementation->destroyObjectFromDatabase(destroyContainedObjects);
}

void MissionObject::updateToDatabaseAllObjects(bool startTask) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATETODATABASEALLOBJECTS__BOOL_);
		method.addBooleanParameter(startTask);

		method.executeWithVoidReturn();
	} else
		_implementation->updateToDatabaseAllObjects(startTask);
}

void MissionObject::setRefreshCounter(int ctr, bool notifyClient) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETREFRESHCOUNTER__INT_BOOL_);
		method.addSignedIntParameter(ctr);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setRefreshCounter(ctr, notifyClient);
}

void MissionObject::setTypeCRC(unsigned int crc, bool notifyClient) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETTYPECRC__INT_BOOL_);
		method.addUnsignedIntParameter(crc);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setTypeCRC(crc, notifyClient);
}

void MissionObject::initializeTransientMembers() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void MissionObject::sendBaselinesTo(SceneObject* player) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDBASELINESTO__SCENEOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendBaselinesTo(player);
}

void MissionObject::setMissionDescription(const String& file, const String& id, bool notifyClient) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMISSIONDESCRIPTION__STRING_STRING_BOOL_);
		method.addAsciiParameter(file);
		method.addAsciiParameter(id);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setMissionDescription(file, id, notifyClient);
}

void MissionObject::setMissionTitle(const String& file, const String& id, bool notifyClient) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMISSIONTITLE__STRING_STRING_BOOL_);
		method.addAsciiParameter(file);
		method.addAsciiParameter(id);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setMissionTitle(file, id, notifyClient);
}

void MissionObject::setMissionTargetName(const String& target, bool notifyClient) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMISSIONTARGETNAME__STRING_BOOL_);
		method.addAsciiParameter(target);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setMissionTargetName(target, notifyClient);
}

void MissionObject::setMissionDifficulty(int difficulty, bool notifyClient) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMISSIONDIFFICULTY__INT_BOOL_);
		method.addSignedIntParameter(difficulty);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setMissionDifficulty(difficulty, notifyClient);
}

void MissionObject::setRewardCredits(int creds, bool notifyClient) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETREWARDCREDITS__INT_BOOL_);
		method.addSignedIntParameter(creds);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setRewardCredits(creds, notifyClient);
}

void MissionObject::setTargetTemplate(SharedObjectTemplate* templ, bool notifyClient) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->setTargetTemplate(templ, notifyClient);
}

void MissionObject::setStartPosition(float posX, float posY, const String& planet, bool notifyClient) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSTARTPOSITION__FLOAT_FLOAT_STRING_BOOL_);
		method.addFloatParameter(posX);
		method.addFloatParameter(posY);
		method.addAsciiParameter(planet);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setStartPosition(posX, posY, planet, notifyClient);
}

void MissionObject::setEndPosition(float posX, float posY, String& planetName, bool notifyClient) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETENDPOSITION__FLOAT_FLOAT_STRING_BOOL_);
		method.addFloatParameter(posX);
		method.addFloatParameter(posY);
		method.addAsciiParameter(planetName);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setEndPosition(posX, posY, planetName, notifyClient);
}

void MissionObject::setCreatorName(const String& name, bool notifyClient) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCREATORNAME__STRING_BOOL_);
		method.addAsciiParameter(name);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setCreatorName(name, notifyClient);
}

unsigned int MissionObject::getStartPlanetCRC() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSTARTPLANETCRC__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getStartPlanetCRC();
}

void MissionObject::updateMissionLocation() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATEMISSIONLOCATION__);

		method.executeWithVoidReturn();
	} else
		_implementation->updateMissionLocation();
}

void MissionObject::abort() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ABORT__);

		method.executeWithVoidReturn();
	} else
		_implementation->abort();
}

void MissionObject::setFaction(const int missionFaction) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETFACTION__INT_);
		method.addSignedIntParameter(missionFaction);

		method.executeWithVoidReturn();
	} else
		_implementation->setFaction(missionFaction);
}

void MissionObject::setMissionObjective(MissionObjective* obj) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMISSIONOBJECTIVE__MISSIONOBJECTIVE_);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		_implementation->setMissionObjective(obj);
}

void MissionObject::setStartPlanet(const String& planet) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSTARTPLANET__STRING_);
		method.addAsciiParameter(planet);

		method.executeWithVoidReturn();
	} else
		_implementation->setStartPlanet(planet);
}

void MissionObject::setRewardFactionPointsRebel(int points) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETREWARDFACTIONPOINTSREBEL__INT_);
		method.addSignedIntParameter(points);

		method.executeWithVoidReturn();
	} else
		_implementation->setRewardFactionPointsRebel(points);
}

void MissionObject::setRewardFactionPointsImperial(int points) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETREWARDFACTIONPOINTSIMPERIAL__INT_);
		method.addSignedIntParameter(points);

		method.executeWithVoidReturn();
	} else
		_implementation->setRewardFactionPointsImperial(points);
}

void MissionObject::setEndPlanet(String& planetName) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETENDPLANET__STRING_);
		method.addAsciiParameter(planetName);

		method.executeWithVoidReturn();
	} else
		_implementation->setEndPlanet(planetName);
}

void MissionObject::setMissionTarget(NpcSpawnPoint* target) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMISSIONTARGET__NPCSPAWNPOINT_);
		method.addObjectParameter(target);

		method.executeWithVoidReturn();
	} else
		_implementation->setMissionTarget(target);
}

void MissionObject::setMissionTargetDest(NpcSpawnPoint* target) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMISSIONTARGETDEST__NPCSPAWNPOINT_);
		method.addObjectParameter(target);

		method.executeWithVoidReturn();
	} else
		_implementation->setMissionTargetDest(target);
}

void MissionObject::setMissionNumber(int num) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMISSIONNUMBER__INT_);
		method.addSignedIntParameter(num);

		method.executeWithVoidReturn();
	} else
		_implementation->setMissionNumber(num);
}

void MissionObject::setTargetOptionalTemplate(const String& tml) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETTARGETOPTIONALTEMPLATE__STRING_);
		method.addAsciiParameter(tml);

		method.executeWithVoidReturn();
	} else
		_implementation->setTargetOptionalTemplate(tml);
}

void MissionObject::setTemplateStrings(const String& temp1, const String& temp2) {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETTEMPLATESTRINGS__STRING_STRING_);
		method.addAsciiParameter(temp1);
		method.addAsciiParameter(temp2);

		method.executeWithVoidReturn();
	} else
		_implementation->setTemplateStrings(temp1, temp2);
}

MissionObjective* MissionObject::getMissionObjective() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMISSIONOBJECTIVE__);

		return static_cast<MissionObjective*>(method.executeWithObjectReturn());
	} else
		return _implementation->getMissionObjective();
}

int MissionObject::getFaction() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFACTION__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getFaction();
}

int MissionObject::getRewardFactionPointsRebel() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETREWARDFACTIONPOINTSREBEL__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getRewardFactionPointsRebel();
}

int MissionObject::getRewardFactionPointsImperial() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETREWARDFACTIONPOINTSIMPERIAL__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getRewardFactionPointsImperial();
}

float MissionObject::getStartPositionX() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSTARTPOSITIONX__);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getStartPositionX();
}

float MissionObject::getStartPositionY() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSTARTPOSITIONY__);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getStartPositionY();
}

String MissionObject::getTargetOptionalTemplate() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTARGETOPTIONALTEMPLATE__);

		method.executeWithAsciiReturn(_return_getTargetOptionalTemplate);
		return _return_getTargetOptionalTemplate;
	} else
		return _implementation->getTargetOptionalTemplate();
}

String MissionObject::getStartPlanet() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSTARTPLANET__);

		method.executeWithAsciiReturn(_return_getStartPlanet);
		return _return_getStartPlanet;
	} else
		return _implementation->getStartPlanet();
}

float MissionObject::getEndPositionX() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETENDPOSITIONX__);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getEndPositionX();
}

float MissionObject::getEndPositionY() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETENDPOSITIONY__);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getEndPositionY();
}

String MissionObject::getEndPlanet() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETENDPLANET__);

		method.executeWithAsciiReturn(_return_getEndPlanet);
		return _return_getEndPlanet;
	} else
		return _implementation->getEndPlanet();
}

WaypointObject* MissionObject::getWaypointToMission() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETWAYPOINTTOMISSION__);

		return static_cast<WaypointObject*>(method.executeWithObjectReturn());
	} else
		return _implementation->getWaypointToMission();
}

NpcSpawnPoint* MissionObject::getMissionTarget() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMISSIONTARGET__);

		return static_cast<NpcSpawnPoint*>(method.executeWithObjectReturn());
	} else
		return _implementation->getMissionTarget();
}

NpcSpawnPoint* MissionObject::getMissionTargetDest() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMISSIONTARGETDEST__);

		return static_cast<NpcSpawnPoint*>(method.executeWithObjectReturn());
	} else
		return _implementation->getMissionTargetDest();
}

unsigned int MissionObject::getTypeCRC() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTYPECRC__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getTypeCRC();
}

int MissionObject::getRewardCredits() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETREWARDCREDITS__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getRewardCredits();
}

UnicodeString MissionObject::getCreatorName() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCREATORNAME__);

		method.executeWithUnicodeReturn(_return_getCreatorName);
		return _return_getCreatorName;
	} else
		return _implementation->getCreatorName();
}

int MissionObject::getDifficultyLevel() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDIFFICULTYLEVEL__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getDifficultyLevel();
}

StringId* MissionObject::getMissionDescription() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getMissionDescription();
}

StringId* MissionObject::getMissionTitle() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getMissionTitle();
}

String MissionObject::getTargetName() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTARGETNAME__);

		method.executeWithAsciiReturn(_return_getTargetName);
		return _return_getTargetName;
	} else
		return _implementation->getTargetName();
}

int MissionObject::getRefreshCounter() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETREFRESHCOUNTER__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getRefreshCounter();
}

int MissionObject::getMissionNumber() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMISSIONNUMBER__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getMissionNumber();
}

SharedObjectTemplate* MissionObject::getTargetTemplate() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getTargetTemplate();
}

bool MissionObject::isSurveyMission() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSURVEYMISSION__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isSurveyMission();
}

bool MissionObject::isMissionObject() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISMISSIONOBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isMissionObject();
}

String MissionObject::getTemplateString1() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTEMPLATESTRING1__);

		method.executeWithAsciiReturn(_return_getTemplateString1);
		return _return_getTemplateString1;
	} else
		return _implementation->getTemplateString1();
}

String MissionObject::getTemplateString2() {
	MissionObjectImplementation* _implementation = static_cast<MissionObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTEMPLATESTRING2__);

		method.executeWithAsciiReturn(_return_getTemplateString2);
		return _return_getTemplateString2;
	} else
		return _implementation->getTemplateString2();
}

DistributedObjectServant* MissionObject::_getImplementation() {

	_updated = true;
	return _impl;
}

void MissionObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	MissionObjectImplementation
 */

MissionObjectImplementation::MissionObjectImplementation(DummyConstructorParameter* param) : IntangibleObjectImplementation(param) {
	_initializeImplementation();
}


MissionObjectImplementation::~MissionObjectImplementation() {
}


void MissionObjectImplementation::finalize() {
}

void MissionObjectImplementation::_initializeImplementation() {
	_setClassHelper(MissionObjectHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void MissionObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<MissionObject*>(stub);
	IntangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* MissionObjectImplementation::_getStub() {
	return _this;
}

MissionObjectImplementation::operator const MissionObject*() {
	return _this;
}

void MissionObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void MissionObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void MissionObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void MissionObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void MissionObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void MissionObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void MissionObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void MissionObjectImplementation::_serializationHelperMethod() {
	IntangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("MissionObject");

}

void MissionObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(MissionObjectImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool MissionObjectImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (IntangibleObjectImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "waypointToMission") {
		TypeInfo<ManagedReference<WaypointObject* > >::parseFromBinaryStream(&waypointToMission, stream);
		return true;
	}

	if (_name == "missionObjective") {
		TypeInfo<ManagedReference<MissionObjective* > >::parseFromBinaryStream(&missionObjective, stream);
		return true;
	}

	if (_name == "typeCRC") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&typeCRC, stream);
		return true;
	}

	if (_name == "difficultyLevel") {
		TypeInfo<int >::parseFromBinaryStream(&difficultyLevel, stream);
		return true;
	}

	if (_name == "creatorName") {
		TypeInfo<UnicodeString >::parseFromBinaryStream(&creatorName, stream);
		return true;
	}

	if (_name == "rewardCredits") {
		TypeInfo<int >::parseFromBinaryStream(&rewardCredits, stream);
		return true;
	}

	if (_name == "rewardFactionPointsRebel") {
		TypeInfo<int >::parseFromBinaryStream(&rewardFactionPointsRebel, stream);
		return true;
	}

	if (_name == "rewardFactionPointsImperial") {
		TypeInfo<int >::parseFromBinaryStream(&rewardFactionPointsImperial, stream);
		return true;
	}

	if (_name == "missionNumber") {
		TypeInfo<int >::parseFromBinaryStream(&missionNumber, stream);
		return true;
	}

	if (_name == "faction") {
		TypeInfo<int >::parseFromBinaryStream(&faction, stream);
		return true;
	}

	if (_name == "startPositionX") {
		TypeInfo<float >::parseFromBinaryStream(&startPositionX, stream);
		return true;
	}

	if (_name == "startPositionY") {
		TypeInfo<float >::parseFromBinaryStream(&startPositionY, stream);
		return true;
	}

	if (_name == "startPlanet") {
		TypeInfo<String >::parseFromBinaryStream(&startPlanet, stream);
		return true;
	}

	if (_name == "endPositionX") {
		TypeInfo<float >::parseFromBinaryStream(&endPositionX, stream);
		return true;
	}

	if (_name == "endPositionY") {
		TypeInfo<float >::parseFromBinaryStream(&endPositionY, stream);
		return true;
	}

	if (_name == "endPlanet") {
		TypeInfo<String >::parseFromBinaryStream(&endPlanet, stream);
		return true;
	}

	if (_name == "missionDescription") {
		TypeInfo<StringId >::parseFromBinaryStream(&missionDescription, stream);
		return true;
	}

	if (_name == "missionTitle") {
		TypeInfo<StringId >::parseFromBinaryStream(&missionTitle, stream);
		return true;
	}

	if (_name == "refreshCounter") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&refreshCounter, stream);
		return true;
	}

	if (_name == "targetName") {
		TypeInfo<String >::parseFromBinaryStream(&targetName, stream);
		return true;
	}

	if (_name == "missionTarget") {
		TypeInfo<Reference<NpcSpawnPoint* > >::parseFromBinaryStream(&missionTarget, stream);
		return true;
	}

	if (_name == "missionTargetDest") {
		TypeInfo<Reference<NpcSpawnPoint* > >::parseFromBinaryStream(&missionTargetDest, stream);
		return true;
	}

	if (_name == "templateString1") {
		TypeInfo<String >::parseFromBinaryStream(&templateString1, stream);
		return true;
	}

	if (_name == "templateString2") {
		TypeInfo<String >::parseFromBinaryStream(&templateString2, stream);
		return true;
	}

	if (_name == "targetTemplate") {
		TypeInfo<TemplateReference<SharedObjectTemplate*> >::parseFromBinaryStream(&targetTemplate, stream);
		return true;
	}

	if (_name == "targetOptionalTemplate") {
		TypeInfo<String >::parseFromBinaryStream(&targetOptionalTemplate, stream);
		return true;
	}


	return false;
}

void MissionObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = MissionObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int MissionObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "waypointToMission";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<WaypointObject* > >::toBinaryStream(&waypointToMission, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "missionObjective";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<MissionObjective* > >::toBinaryStream(&missionObjective, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "typeCRC";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned int >::toBinaryStream(&typeCRC, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "difficultyLevel";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&difficultyLevel, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "creatorName";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<UnicodeString >::toBinaryStream(&creatorName, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "rewardCredits";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&rewardCredits, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "rewardFactionPointsRebel";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&rewardFactionPointsRebel, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "rewardFactionPointsImperial";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&rewardFactionPointsImperial, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "missionNumber";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&missionNumber, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "faction";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&faction, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "startPositionX";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<float >::toBinaryStream(&startPositionX, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "startPositionY";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<float >::toBinaryStream(&startPositionY, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "startPlanet";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<String >::toBinaryStream(&startPlanet, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "endPositionX";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<float >::toBinaryStream(&endPositionX, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "endPositionY";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<float >::toBinaryStream(&endPositionY, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "endPlanet";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<String >::toBinaryStream(&endPlanet, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "missionDescription";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<StringId >::toBinaryStream(&missionDescription, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "missionTitle";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<StringId >::toBinaryStream(&missionTitle, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "refreshCounter";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned int >::toBinaryStream(&refreshCounter, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "targetName";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<String >::toBinaryStream(&targetName, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "missionTarget";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<Reference<NpcSpawnPoint* > >::toBinaryStream(&missionTarget, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "missionTargetDest";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<Reference<NpcSpawnPoint* > >::toBinaryStream(&missionTargetDest, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "templateString1";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<String >::toBinaryStream(&templateString1, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "templateString2";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<String >::toBinaryStream(&templateString2, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "targetTemplate";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<TemplateReference<SharedObjectTemplate*> >::toBinaryStream(&targetTemplate, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "targetOptionalTemplate";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<String >::toBinaryStream(&targetOptionalTemplate, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 26 + IntangibleObjectImplementation::writeObjectMembers(stream);
}

MissionObjectImplementation::MissionObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/mission/MissionObject.idl():  		typeCRC = SURVEY;
	typeCRC = SURVEY;
	// server/zone/objects/mission/MissionObject.idl():  		refreshCounter = 0;
	refreshCounter = 0;
	// server/zone/objects/mission/MissionObject.idl():  		missionDescription.setStringId("mission/mission_npc_survey_neutral_easy", "m1o");
	(&missionDescription)->setStringId("mission/mission_npc_survey_neutral_easy", "m1o");
	// server/zone/objects/mission/MissionObject.idl():  		missionTitle.setStringId("mission/mission_npc_survey_neutral_easy", "m1t");
	(&missionTitle)->setStringId("mission/mission_npc_survey_neutral_easy", "m1t");
	// server/zone/objects/mission/MissionObject.idl():  		targetName = "Testing target name";
	targetName = "Testing target name";
	// server/zone/objects/mission/MissionObject.idl():  		difficultyLevel = 50;
	difficultyLevel = 50;
	// server/zone/objects/mission/MissionObject.idl():  		rewardCredits = 100;
	rewardCredits = 100;
	// server/zone/objects/mission/MissionObject.idl():  		rewardFactionPointsRebel = 0;
	rewardFactionPointsRebel = 0;
	// server/zone/objects/mission/MissionObject.idl():  		rewardFactionPointsImperial = 0;
	rewardFactionPointsImperial = 0;
	// server/zone/objects/mission/MissionObject.idl():  		startPositionX = 0;
	startPositionX = 0;
	// server/zone/objects/mission/MissionObject.idl():  		startPositionY = 0;
	startPositionY = 0;
	// server/zone/objects/mission/MissionObject.idl():  		missionTarget = null;
	missionTarget = NULL;
	// server/zone/objects/mission/MissionObject.idl():  		missionTargetDest = null;
	missionTargetDest = NULL;
	// server/zone/objects/mission/MissionObject.idl():  		faction = FACTIONNEUTRAL;
	faction = FACTIONNEUTRAL;
	// server/zone/objects/mission/MissionObject.idl():  		Logger.setLoggingName("MissionObject");
	Logger::setLoggingName("MissionObject");
}

void MissionObjectImplementation::abort() {
	// server/zone/objects/mission/MissionObject.idl():  	}
	if (missionObjective != NULL)	// server/zone/objects/mission/MissionObject.idl():  			missionObjective.abort();
	missionObjective->abort();
}

void MissionObjectImplementation::setFaction(const int missionFaction) {
	// server/zone/objects/mission/MissionObject.idl():  		faction = missionFaction;
	faction = missionFaction;
}

void MissionObjectImplementation::setMissionObjective(MissionObjective* obj) {
	// server/zone/objects/mission/MissionObject.idl():  		missionObjective = obj;
	missionObjective = obj;
}

void MissionObjectImplementation::setStartPlanet(const String& planet) {
	// server/zone/objects/mission/MissionObject.idl():  		startPlanet = planet;
	startPlanet = planet;
}

void MissionObjectImplementation::setRewardFactionPointsRebel(int points) {
	// server/zone/objects/mission/MissionObject.idl():  		rewardFactionPointsRebel = points;
	rewardFactionPointsRebel = points;
}

void MissionObjectImplementation::setRewardFactionPointsImperial(int points) {
	// server/zone/objects/mission/MissionObject.idl():  		rewardFactionPointsImperial = points;
	rewardFactionPointsImperial = points;
}

void MissionObjectImplementation::setEndPlanet(String& planetName) {
	// server/zone/objects/mission/MissionObject.idl():  		endPlanet = planetName;
	endPlanet = planetName;
}

void MissionObjectImplementation::setMissionTarget(NpcSpawnPoint* target) {
	// server/zone/objects/mission/MissionObject.idl():  		missionTarget = target;
	missionTarget = target;
}

void MissionObjectImplementation::setMissionTargetDest(NpcSpawnPoint* target) {
	// server/zone/objects/mission/MissionObject.idl():  		missionTargetDest = target;
	missionTargetDest = target;
}

void MissionObjectImplementation::setMissionNumber(int num) {
	// server/zone/objects/mission/MissionObject.idl():  		missionNumber = num;
	missionNumber = num;
}

void MissionObjectImplementation::setTargetOptionalTemplate(const String& tml) {
	// server/zone/objects/mission/MissionObject.idl():  		targetOptionalTemplate = tml;
	targetOptionalTemplate = tml;
}

void MissionObjectImplementation::setTemplateStrings(const String& temp1, const String& temp2) {
	// server/zone/objects/mission/MissionObject.idl():  		templateString1 = temp1;
	templateString1 = temp1;
	// server/zone/objects/mission/MissionObject.idl():  		templateString2 = temp2;
	templateString2 = temp2;
}

MissionObjective* MissionObjectImplementation::getMissionObjective() {
	// server/zone/objects/mission/MissionObject.idl():  		return missionObjective;
	return missionObjective;
}

int MissionObjectImplementation::getFaction() {
	// server/zone/objects/mission/MissionObject.idl():  		return faction;
	return faction;
}

int MissionObjectImplementation::getRewardFactionPointsRebel() {
	// server/zone/objects/mission/MissionObject.idl():  		return rewardFactionPointsRebel;
	return rewardFactionPointsRebel;
}

int MissionObjectImplementation::getRewardFactionPointsImperial() {
	// server/zone/objects/mission/MissionObject.idl():  		return rewardFactionPointsImperial;
	return rewardFactionPointsImperial;
}

float MissionObjectImplementation::getStartPositionX() {
	// server/zone/objects/mission/MissionObject.idl():  		return startPositionX;
	return startPositionX;
}

float MissionObjectImplementation::getStartPositionY() {
	// server/zone/objects/mission/MissionObject.idl():  		return startPositionY;
	return startPositionY;
}

String MissionObjectImplementation::getTargetOptionalTemplate() {
	// server/zone/objects/mission/MissionObject.idl():  		return targetOptionalTemplate;
	return targetOptionalTemplate;
}

String MissionObjectImplementation::getStartPlanet() {
	// server/zone/objects/mission/MissionObject.idl():  		return startPlanet;
	return startPlanet;
}

float MissionObjectImplementation::getEndPositionX() {
	// server/zone/objects/mission/MissionObject.idl():  		return endPositionX;
	return endPositionX;
}

float MissionObjectImplementation::getEndPositionY() {
	// server/zone/objects/mission/MissionObject.idl():  		return endPositionY;
	return endPositionY;
}

String MissionObjectImplementation::getEndPlanet() {
	// server/zone/objects/mission/MissionObject.idl():  		return endPlanet;
	return endPlanet;
}

WaypointObject* MissionObjectImplementation::getWaypointToMission() {
	// server/zone/objects/mission/MissionObject.idl():  		return waypointToMission;
	return waypointToMission;
}

NpcSpawnPoint* MissionObjectImplementation::getMissionTarget() {
	// server/zone/objects/mission/MissionObject.idl():  		return missionTarget;
	return missionTarget;
}

NpcSpawnPoint* MissionObjectImplementation::getMissionTargetDest() {
	// server/zone/objects/mission/MissionObject.idl():  		return missionTargetDest;
	return missionTargetDest;
}

unsigned int MissionObjectImplementation::getTypeCRC() {
	// server/zone/objects/mission/MissionObject.idl():  		return typeCRC;
	return typeCRC;
}

int MissionObjectImplementation::getRewardCredits() {
	// server/zone/objects/mission/MissionObject.idl():  		return rewardCredits;
	return rewardCredits;
}

UnicodeString MissionObjectImplementation::getCreatorName() {
	// server/zone/objects/mission/MissionObject.idl():  		return creatorName;
	return creatorName;
}

int MissionObjectImplementation::getDifficultyLevel() {
	// server/zone/objects/mission/MissionObject.idl():  		return difficultyLevel;
	return difficultyLevel;
}

StringId* MissionObjectImplementation::getMissionDescription() {
	// server/zone/objects/mission/MissionObject.idl():  		return missionDescription;
	return (&missionDescription);
}

StringId* MissionObjectImplementation::getMissionTitle() {
	// server/zone/objects/mission/MissionObject.idl():  		return missionTitle;
	return (&missionTitle);
}

String MissionObjectImplementation::getTargetName() {
	// server/zone/objects/mission/MissionObject.idl():  		return targetName;
	return targetName;
}

int MissionObjectImplementation::getRefreshCounter() {
	// server/zone/objects/mission/MissionObject.idl():  		return refreshCounter;
	return refreshCounter;
}

int MissionObjectImplementation::getMissionNumber() {
	// server/zone/objects/mission/MissionObject.idl():  		return missionNumber;
	return missionNumber;
}

bool MissionObjectImplementation::isSurveyMission() {
	// server/zone/objects/mission/MissionObject.idl():  		return typeCRC == SURVEY;
	return typeCRC == SURVEY;
}

bool MissionObjectImplementation::isMissionObject() {
	// server/zone/objects/mission/MissionObject.idl():  		return true;
	return true;
}

String MissionObjectImplementation::getTemplateString1() {
	// server/zone/objects/mission/MissionObject.idl():  		return templateString1;
	return templateString1;
}

String MissionObjectImplementation::getTemplateString2() {
	// server/zone/objects/mission/MissionObject.idl():  		return templateString2;
	return templateString2;
}

/*
 *	MissionObjectAdapter
 */

MissionObjectAdapter::MissionObjectAdapter(MissionObject* obj) : IntangibleObjectAdapter(obj) {
}

Packet* MissionObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_CREATEWAYPOINT__:
		resp->insertLong(createWaypoint()->_getObjectID());
		break;
	case RPC_DESTROYOBJECTFROMDATABASE__BOOL_:
		destroyObjectFromDatabase(inv->getBooleanParameter());
		break;
	case RPC_UPDATETODATABASEALLOBJECTS__BOOL_:
		updateToDatabaseAllObjects(inv->getBooleanParameter());
		break;
	case RPC_SETREFRESHCOUNTER__INT_BOOL_:
		setRefreshCounter(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case RPC_SETTYPECRC__INT_BOOL_:
		setTypeCRC(inv->getUnsignedIntParameter(), inv->getBooleanParameter());
		break;
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		initializeTransientMembers();
		break;
	case RPC_SENDBASELINESTO__SCENEOBJECT_:
		sendBaselinesTo(static_cast<SceneObject*>(inv->getObjectParameter()));
		break;
	case RPC_SETMISSIONDESCRIPTION__STRING_STRING_BOOL_:
		setMissionDescription(inv->getAsciiParameter(_param0_setMissionDescription__String_String_bool_), inv->getAsciiParameter(_param1_setMissionDescription__String_String_bool_), inv->getBooleanParameter());
		break;
	case RPC_SETMISSIONTITLE__STRING_STRING_BOOL_:
		setMissionTitle(inv->getAsciiParameter(_param0_setMissionTitle__String_String_bool_), inv->getAsciiParameter(_param1_setMissionTitle__String_String_bool_), inv->getBooleanParameter());
		break;
	case RPC_SETMISSIONTARGETNAME__STRING_BOOL_:
		setMissionTargetName(inv->getAsciiParameter(_param0_setMissionTargetName__String_bool_), inv->getBooleanParameter());
		break;
	case RPC_SETMISSIONDIFFICULTY__INT_BOOL_:
		setMissionDifficulty(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case RPC_SETREWARDCREDITS__INT_BOOL_:
		setRewardCredits(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case RPC_SETSTARTPOSITION__FLOAT_FLOAT_STRING_BOOL_:
		setStartPosition(inv->getFloatParameter(), inv->getFloatParameter(), inv->getAsciiParameter(_param2_setStartPosition__float_float_String_bool_), inv->getBooleanParameter());
		break;
	case RPC_SETENDPOSITION__FLOAT_FLOAT_STRING_BOOL_:
		setEndPosition(inv->getFloatParameter(), inv->getFloatParameter(), inv->getAsciiParameter(_param2_setEndPosition__float_float_String_bool_), inv->getBooleanParameter());
		break;
	case RPC_SETCREATORNAME__STRING_BOOL_:
		setCreatorName(inv->getAsciiParameter(_param0_setCreatorName__String_bool_), inv->getBooleanParameter());
		break;
	case RPC_GETSTARTPLANETCRC__:
		resp->insertInt(getStartPlanetCRC());
		break;
	case RPC_UPDATEMISSIONLOCATION__:
		updateMissionLocation();
		break;
	case RPC_ABORT__:
		abort();
		break;
	case RPC_SETFACTION__INT_:
		setFaction(inv->getSignedIntParameter());
		break;
	case RPC_SETMISSIONOBJECTIVE__MISSIONOBJECTIVE_:
		setMissionObjective(static_cast<MissionObjective*>(inv->getObjectParameter()));
		break;
	case RPC_SETSTARTPLANET__STRING_:
		setStartPlanet(inv->getAsciiParameter(_param0_setStartPlanet__String_));
		break;
	case RPC_SETREWARDFACTIONPOINTSREBEL__INT_:
		setRewardFactionPointsRebel(inv->getSignedIntParameter());
		break;
	case RPC_SETREWARDFACTIONPOINTSIMPERIAL__INT_:
		setRewardFactionPointsImperial(inv->getSignedIntParameter());
		break;
	case RPC_SETENDPLANET__STRING_:
		setEndPlanet(inv->getAsciiParameter(_param0_setEndPlanet__String_));
		break;
	case RPC_SETMISSIONTARGET__NPCSPAWNPOINT_:
		setMissionTarget(static_cast<NpcSpawnPoint*>(inv->getObjectParameter()));
		break;
	case RPC_SETMISSIONTARGETDEST__NPCSPAWNPOINT_:
		setMissionTargetDest(static_cast<NpcSpawnPoint*>(inv->getObjectParameter()));
		break;
	case RPC_SETMISSIONNUMBER__INT_:
		setMissionNumber(inv->getSignedIntParameter());
		break;
	case RPC_SETTARGETOPTIONALTEMPLATE__STRING_:
		setTargetOptionalTemplate(inv->getAsciiParameter(_param0_setTargetOptionalTemplate__String_));
		break;
	case RPC_SETTEMPLATESTRINGS__STRING_STRING_:
		setTemplateStrings(inv->getAsciiParameter(_param0_setTemplateStrings__String_String_), inv->getAsciiParameter(_param1_setTemplateStrings__String_String_));
		break;
	case RPC_GETMISSIONOBJECTIVE__:
		resp->insertLong(getMissionObjective()->_getObjectID());
		break;
	case RPC_GETFACTION__:
		resp->insertSignedInt(getFaction());
		break;
	case RPC_GETREWARDFACTIONPOINTSREBEL__:
		resp->insertSignedInt(getRewardFactionPointsRebel());
		break;
	case RPC_GETREWARDFACTIONPOINTSIMPERIAL__:
		resp->insertSignedInt(getRewardFactionPointsImperial());
		break;
	case RPC_GETSTARTPOSITIONX__:
		resp->insertFloat(getStartPositionX());
		break;
	case RPC_GETSTARTPOSITIONY__:
		resp->insertFloat(getStartPositionY());
		break;
	case RPC_GETTARGETOPTIONALTEMPLATE__:
		resp->insertAscii(getTargetOptionalTemplate());
		break;
	case RPC_GETSTARTPLANET__:
		resp->insertAscii(getStartPlanet());
		break;
	case RPC_GETENDPOSITIONX__:
		resp->insertFloat(getEndPositionX());
		break;
	case RPC_GETENDPOSITIONY__:
		resp->insertFloat(getEndPositionY());
		break;
	case RPC_GETENDPLANET__:
		resp->insertAscii(getEndPlanet());
		break;
	case RPC_GETWAYPOINTTOMISSION__:
		resp->insertLong(getWaypointToMission()->_getObjectID());
		break;
	case RPC_GETMISSIONTARGET__:
		resp->insertLong(getMissionTarget()->_getObjectID());
		break;
	case RPC_GETMISSIONTARGETDEST__:
		resp->insertLong(getMissionTargetDest()->_getObjectID());
		break;
	case RPC_GETTYPECRC__:
		resp->insertInt(getTypeCRC());
		break;
	case RPC_GETREWARDCREDITS__:
		resp->insertSignedInt(getRewardCredits());
		break;
	case RPC_GETCREATORNAME__:
		resp->insertUnicode(getCreatorName());
		break;
	case RPC_GETDIFFICULTYLEVEL__:
		resp->insertSignedInt(getDifficultyLevel());
		break;
	case RPC_GETTARGETNAME__:
		resp->insertAscii(getTargetName());
		break;
	case RPC_GETREFRESHCOUNTER__:
		resp->insertSignedInt(getRefreshCounter());
		break;
	case RPC_GETMISSIONNUMBER__:
		resp->insertSignedInt(getMissionNumber());
		break;
	case RPC_ISSURVEYMISSION__:
		resp->insertBoolean(isSurveyMission());
		break;
	case RPC_ISMISSIONOBJECT__:
		resp->insertBoolean(isMissionObject());
		break;
	case RPC_GETTEMPLATESTRING1__:
		resp->insertAscii(getTemplateString1());
		break;
	case RPC_GETTEMPLATESTRING2__:
		resp->insertAscii(getTemplateString2());
		break;
	default:
		return NULL;
	}

	return resp;
}

WaypointObject* MissionObjectAdapter::createWaypoint() {
	return (static_cast<MissionObject*>(stub))->createWaypoint();
}

void MissionObjectAdapter::destroyObjectFromDatabase(bool destroyContainedObjects) {
	(static_cast<MissionObject*>(stub))->destroyObjectFromDatabase(destroyContainedObjects);
}

void MissionObjectAdapter::updateToDatabaseAllObjects(bool startTask) {
	(static_cast<MissionObject*>(stub))->updateToDatabaseAllObjects(startTask);
}

void MissionObjectAdapter::setRefreshCounter(int ctr, bool notifyClient) {
	(static_cast<MissionObject*>(stub))->setRefreshCounter(ctr, notifyClient);
}

void MissionObjectAdapter::setTypeCRC(unsigned int crc, bool notifyClient) {
	(static_cast<MissionObject*>(stub))->setTypeCRC(crc, notifyClient);
}

void MissionObjectAdapter::initializeTransientMembers() {
	(static_cast<MissionObject*>(stub))->initializeTransientMembers();
}

void MissionObjectAdapter::sendBaselinesTo(SceneObject* player) {
	(static_cast<MissionObject*>(stub))->sendBaselinesTo(player);
}

void MissionObjectAdapter::setMissionDescription(const String& file, const String& id, bool notifyClient) {
	(static_cast<MissionObject*>(stub))->setMissionDescription(file, id, notifyClient);
}

void MissionObjectAdapter::setMissionTitle(const String& file, const String& id, bool notifyClient) {
	(static_cast<MissionObject*>(stub))->setMissionTitle(file, id, notifyClient);
}

void MissionObjectAdapter::setMissionTargetName(const String& target, bool notifyClient) {
	(static_cast<MissionObject*>(stub))->setMissionTargetName(target, notifyClient);
}

void MissionObjectAdapter::setMissionDifficulty(int difficulty, bool notifyClient) {
	(static_cast<MissionObject*>(stub))->setMissionDifficulty(difficulty, notifyClient);
}

void MissionObjectAdapter::setRewardCredits(int creds, bool notifyClient) {
	(static_cast<MissionObject*>(stub))->setRewardCredits(creds, notifyClient);
}

void MissionObjectAdapter::setStartPosition(float posX, float posY, const String& planet, bool notifyClient) {
	(static_cast<MissionObject*>(stub))->setStartPosition(posX, posY, planet, notifyClient);
}

void MissionObjectAdapter::setEndPosition(float posX, float posY, String& planetName, bool notifyClient) {
	(static_cast<MissionObject*>(stub))->setEndPosition(posX, posY, planetName, notifyClient);
}

void MissionObjectAdapter::setCreatorName(const String& name, bool notifyClient) {
	(static_cast<MissionObject*>(stub))->setCreatorName(name, notifyClient);
}

unsigned int MissionObjectAdapter::getStartPlanetCRC() {
	return (static_cast<MissionObject*>(stub))->getStartPlanetCRC();
}

void MissionObjectAdapter::updateMissionLocation() {
	(static_cast<MissionObject*>(stub))->updateMissionLocation();
}

void MissionObjectAdapter::abort() {
	(static_cast<MissionObject*>(stub))->abort();
}

void MissionObjectAdapter::setFaction(const int missionFaction) {
	(static_cast<MissionObject*>(stub))->setFaction(missionFaction);
}

void MissionObjectAdapter::setMissionObjective(MissionObjective* obj) {
	(static_cast<MissionObject*>(stub))->setMissionObjective(obj);
}

void MissionObjectAdapter::setStartPlanet(const String& planet) {
	(static_cast<MissionObject*>(stub))->setStartPlanet(planet);
}

void MissionObjectAdapter::setRewardFactionPointsRebel(int points) {
	(static_cast<MissionObject*>(stub))->setRewardFactionPointsRebel(points);
}

void MissionObjectAdapter::setRewardFactionPointsImperial(int points) {
	(static_cast<MissionObject*>(stub))->setRewardFactionPointsImperial(points);
}

void MissionObjectAdapter::setEndPlanet(String& planetName) {
	(static_cast<MissionObject*>(stub))->setEndPlanet(planetName);
}

void MissionObjectAdapter::setMissionTarget(NpcSpawnPoint* target) {
	(static_cast<MissionObject*>(stub))->setMissionTarget(target);
}

void MissionObjectAdapter::setMissionTargetDest(NpcSpawnPoint* target) {
	(static_cast<MissionObject*>(stub))->setMissionTargetDest(target);
}

void MissionObjectAdapter::setMissionNumber(int num) {
	(static_cast<MissionObject*>(stub))->setMissionNumber(num);
}

void MissionObjectAdapter::setTargetOptionalTemplate(const String& tml) {
	(static_cast<MissionObject*>(stub))->setTargetOptionalTemplate(tml);
}

void MissionObjectAdapter::setTemplateStrings(const String& temp1, const String& temp2) {
	(static_cast<MissionObject*>(stub))->setTemplateStrings(temp1, temp2);
}

MissionObjective* MissionObjectAdapter::getMissionObjective() {
	return (static_cast<MissionObject*>(stub))->getMissionObjective();
}

int MissionObjectAdapter::getFaction() {
	return (static_cast<MissionObject*>(stub))->getFaction();
}

int MissionObjectAdapter::getRewardFactionPointsRebel() {
	return (static_cast<MissionObject*>(stub))->getRewardFactionPointsRebel();
}

int MissionObjectAdapter::getRewardFactionPointsImperial() {
	return (static_cast<MissionObject*>(stub))->getRewardFactionPointsImperial();
}

float MissionObjectAdapter::getStartPositionX() {
	return (static_cast<MissionObject*>(stub))->getStartPositionX();
}

float MissionObjectAdapter::getStartPositionY() {
	return (static_cast<MissionObject*>(stub))->getStartPositionY();
}

String MissionObjectAdapter::getTargetOptionalTemplate() {
	return (static_cast<MissionObject*>(stub))->getTargetOptionalTemplate();
}

String MissionObjectAdapter::getStartPlanet() {
	return (static_cast<MissionObject*>(stub))->getStartPlanet();
}

float MissionObjectAdapter::getEndPositionX() {
	return (static_cast<MissionObject*>(stub))->getEndPositionX();
}

float MissionObjectAdapter::getEndPositionY() {
	return (static_cast<MissionObject*>(stub))->getEndPositionY();
}

String MissionObjectAdapter::getEndPlanet() {
	return (static_cast<MissionObject*>(stub))->getEndPlanet();
}

WaypointObject* MissionObjectAdapter::getWaypointToMission() {
	return (static_cast<MissionObject*>(stub))->getWaypointToMission();
}

NpcSpawnPoint* MissionObjectAdapter::getMissionTarget() {
	return (static_cast<MissionObject*>(stub))->getMissionTarget();
}

NpcSpawnPoint* MissionObjectAdapter::getMissionTargetDest() {
	return (static_cast<MissionObject*>(stub))->getMissionTargetDest();
}

unsigned int MissionObjectAdapter::getTypeCRC() {
	return (static_cast<MissionObject*>(stub))->getTypeCRC();
}

int MissionObjectAdapter::getRewardCredits() {
	return (static_cast<MissionObject*>(stub))->getRewardCredits();
}

UnicodeString MissionObjectAdapter::getCreatorName() {
	return (static_cast<MissionObject*>(stub))->getCreatorName();
}

int MissionObjectAdapter::getDifficultyLevel() {
	return (static_cast<MissionObject*>(stub))->getDifficultyLevel();
}

String MissionObjectAdapter::getTargetName() {
	return (static_cast<MissionObject*>(stub))->getTargetName();
}

int MissionObjectAdapter::getRefreshCounter() {
	return (static_cast<MissionObject*>(stub))->getRefreshCounter();
}

int MissionObjectAdapter::getMissionNumber() {
	return (static_cast<MissionObject*>(stub))->getMissionNumber();
}

bool MissionObjectAdapter::isSurveyMission() {
	return (static_cast<MissionObject*>(stub))->isSurveyMission();
}

bool MissionObjectAdapter::isMissionObject() {
	return (static_cast<MissionObject*>(stub))->isMissionObject();
}

String MissionObjectAdapter::getTemplateString1() {
	return (static_cast<MissionObject*>(stub))->getTemplateString1();
}

String MissionObjectAdapter::getTemplateString2() {
	return (static_cast<MissionObject*>(stub))->getTemplateString2();
}

/*
 *	MissionObjectHelper
 */

MissionObjectHelper* MissionObjectHelper::staticInitializer = MissionObjectHelper::instance();

MissionObjectHelper::MissionObjectHelper() {
	className = "MissionObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void MissionObjectHelper::finalizeHelper() {
	MissionObjectHelper::finalize();
}

DistributedObject* MissionObjectHelper::instantiateObject() {
	return new MissionObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* MissionObjectHelper::instantiateServant() {
	return new MissionObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* MissionObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new MissionObjectAdapter(static_cast<MissionObject*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

