/*
 *	server/zone/objects/mission/MissionObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "MissionObject.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/waypoint/WaypointObject.h"

#include "server/zone/Zone.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/objects/mission/MissionObserver.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/mission/MissionObjective.h"

/*
 *	MissionObjectStub
 */

MissionObject::MissionObject() : IntangibleObject(DummyConstructorParameter::instance()) {
	MissionObjectImplementation* _implementation = new MissionObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

MissionObject::MissionObject(DummyConstructorParameter* param) : IntangibleObject(param) {
}

MissionObject::~MissionObject() {
}


WaypointObject* MissionObject::createWaypoint() {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		return (WaypointObject*) method.executeWithObjectReturn();
	} else
		return _implementation->createWaypoint();
}

void MissionObject::destroyObjectFromDatabase(bool destroyContainedObjects) {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addBooleanParameter(destroyContainedObjects);

		method.executeWithVoidReturn();
	} else
		_implementation->destroyObjectFromDatabase(destroyContainedObjects);
}

void MissionObject::updateToDatabaseAllObjects(bool startTask) {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addBooleanParameter(startTask);

		method.executeWithVoidReturn();
	} else
		_implementation->updateToDatabaseAllObjects(startTask);
}

void MissionObject::setRefreshCounter(int ctr, bool notifyClient) {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addSignedIntParameter(ctr);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setRefreshCounter(ctr, notifyClient);
}

void MissionObject::setTypeCRC(unsigned int crc, bool notifyClient) {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addUnsignedIntParameter(crc);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setTypeCRC(crc, notifyClient);
}

void MissionObject::initializeTransientMembers() {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void MissionObject::sendBaselinesTo(SceneObject* player) {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendBaselinesTo(player);
}

void MissionObject::setMissionDescription(const String& file, const String& id, bool notifyClient) {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addAsciiParameter(file);
		method.addAsciiParameter(id);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setMissionDescription(file, id, notifyClient);
}

void MissionObject::setMissionTitle(const String& file, const String& id, bool notifyClient) {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addAsciiParameter(file);
		method.addAsciiParameter(id);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setMissionTitle(file, id, notifyClient);
}

void MissionObject::setMissionTargetName(const String& target, bool notifyClient) {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addAsciiParameter(target);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setMissionTargetName(target, notifyClient);
}

void MissionObject::setMissionDifficulty(int difficulty, bool notifyClient) {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addSignedIntParameter(difficulty);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setMissionDifficulty(difficulty, notifyClient);
}

void MissionObject::setRewardCredits(int creds, bool notifyClient) {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addSignedIntParameter(creds);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setRewardCredits(creds, notifyClient);
}

void MissionObject::setTargetTemplate(SharedObjectTemplate* templ, bool notifyClient) {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->setTargetTemplate(templ, notifyClient);
}

void MissionObject::setStartPosition(float posX, float posY, unsigned int planetCRC, bool notifyClient) {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addFloatParameter(posX);
		method.addFloatParameter(posY);
		method.addUnsignedIntParameter(planetCRC);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setStartPosition(posX, posY, planetCRC, notifyClient);
}

void MissionObject::setEndPosition(float posX, float posY, unsigned int planetCRC, bool notifyClient) {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addFloatParameter(posX);
		method.addFloatParameter(posY);
		method.addUnsignedIntParameter(planetCRC);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setEndPosition(posX, posY, planetCRC, notifyClient);
}

void MissionObject::setCreatorName(const String& name, bool notifyClient) {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addAsciiParameter(name);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setCreatorName(name, notifyClient);
}

void MissionObject::updateMissionLocation() {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);

		method.executeWithVoidReturn();
	} else
		_implementation->updateMissionLocation();
}

void MissionObject::abort() {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);

		method.executeWithVoidReturn();
	} else
		_implementation->abort();
}

void MissionObject::setMissionObjective(MissionObjective* obj) {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		_implementation->setMissionObjective(obj);
}

void MissionObject::setStartPlanetCRC(unsigned int crc) {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);
		method.addUnsignedIntParameter(crc);

		method.executeWithVoidReturn();
	} else
		_implementation->setStartPlanetCRC(crc);
}

void MissionObject::setEndPlanetCRC(unsigned int crc) {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);
		method.addUnsignedIntParameter(crc);

		method.executeWithVoidReturn();
	} else
		_implementation->setEndPlanetCRC(crc);
}

void MissionObject::setMissionTarget(SceneObject* target) {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);
		method.addObjectParameter(target);

		method.executeWithVoidReturn();
	} else
		_implementation->setMissionTarget(target);
}

void MissionObject::setMissionTargetDest(SceneObject* target) {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);
		method.addObjectParameter(target);

		method.executeWithVoidReturn();
	} else
		_implementation->setMissionTargetDest(target);
}

void MissionObject::setMissionNumber(int num) {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);
		method.addSignedIntParameter(num);

		method.executeWithVoidReturn();
	} else
		_implementation->setMissionNumber(num);
}

void MissionObject::setTemplateStrings(const String& temp1, const String& temp2) {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);
		method.addAsciiParameter(temp1);
		method.addAsciiParameter(temp2);

		method.executeWithVoidReturn();
	} else
		_implementation->setTemplateStrings(temp1, temp2);
}

float MissionObject::getStartPositionX() {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getStartPositionX();
}

float MissionObject::getStartPositionY() {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getStartPositionY();
}

unsigned int MissionObject::getStartPlanetCRC() {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getStartPlanetCRC();
}

float MissionObject::getEndPositionX() {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getEndPositionX();
}

float MissionObject::getEndPositionY() {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getEndPositionY();
}

unsigned int MissionObject::getEndPlanetCRC() {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getEndPlanetCRC();
}

WaypointObject* MissionObject::getWaypointToMission() {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 36);

		return (WaypointObject*) method.executeWithObjectReturn();
	} else
		return _implementation->getWaypointToMission();
}

SceneObject* MissionObject::getMissionTarget() {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 37);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return _implementation->getMissionTarget();
}

SceneObject* MissionObject::getMissionTargetDest() {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 38);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return _implementation->getMissionTargetDest();
}

unsigned int MissionObject::getTypeCRC() {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 39);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getTypeCRC();
}

int MissionObject::getRewardCredits() {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 40);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getRewardCredits();
}

UnicodeString MissionObject::getCreatorName() {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 41);

		method.executeWithUnicodeReturn(_return_getCreatorName);
		return _return_getCreatorName;
	} else
		return _implementation->getCreatorName();
}

int MissionObject::getDifficultyLevel() {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 42);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getDifficultyLevel();
}

StringId* MissionObject::getMissionDescription() {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getMissionDescription();
}

StringId* MissionObject::getMissionTitle() {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getMissionTitle();
}

String MissionObject::getTargetName() {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 43);

		method.executeWithAsciiReturn(_return_getTargetName);
		return _return_getTargetName;
	} else
		return _implementation->getTargetName();
}

int MissionObject::getRefreshCounter() {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 44);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getRefreshCounter();
}

int MissionObject::getMissionNumber() {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 45);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getMissionNumber();
}

SharedObjectTemplate* MissionObject::getTargetTemplate() {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getTargetTemplate();
}

bool MissionObject::isSurveyMission() {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 46);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isSurveyMission();
}

bool MissionObject::isMissionObject() {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 47);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isMissionObject();
}

String MissionObject::getTemplateString1() {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 48);

		method.executeWithAsciiReturn(_return_getTemplateString1);
		return _return_getTemplateString1;
	} else
		return _implementation->getTemplateString1();
}

String MissionObject::getTemplateString2() {
	MissionObjectImplementation* _implementation = (MissionObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 49);

		method.executeWithAsciiReturn(_return_getTemplateString2);
		return _return_getTemplateString2;
	} else
		return _implementation->getTemplateString2();
}

DistributedObjectServant* MissionObject::_getImplementation() {

	_updated = true;
	return _impl;
}

void MissionObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	MissionObjectImplementation
 */

MissionObjectImplementation::MissionObjectImplementation(DummyConstructorParameter* param) : IntangibleObjectImplementation(param) {
	_initializeImplementation();
}


MissionObjectImplementation::~MissionObjectImplementation() {
}


void MissionObjectImplementation::finalize() {
}

void MissionObjectImplementation::_initializeImplementation() {
	_setClassHelper(MissionObjectHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void MissionObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (MissionObject*) stub;
	IntangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* MissionObjectImplementation::_getStub() {
	return _this;
}

MissionObjectImplementation::operator const MissionObject*() {
	return _this;
}

void MissionObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void MissionObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void MissionObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void MissionObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void MissionObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void MissionObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void MissionObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void MissionObjectImplementation::_serializationHelperMethod() {
	IntangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("MissionObject");

}

void MissionObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(MissionObjectImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool MissionObjectImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (IntangibleObjectImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "waypointToMission") {
		TypeInfo<ManagedReference<WaypointObject* > >::parseFromBinaryStream(&waypointToMission, stream);
		return true;
	}

	if (_name == "missionObjective") {
		TypeInfo<ManagedReference<MissionObjective* > >::parseFromBinaryStream(&missionObjective, stream);
		return true;
	}

	if (_name == "typeCRC") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&typeCRC, stream);
		return true;
	}

	if (_name == "difficultyLevel") {
		TypeInfo<int >::parseFromBinaryStream(&difficultyLevel, stream);
		return true;
	}

	if (_name == "creatorName") {
		TypeInfo<UnicodeString >::parseFromBinaryStream(&creatorName, stream);
		return true;
	}

	if (_name == "rewardCredits") {
		TypeInfo<int >::parseFromBinaryStream(&rewardCredits, stream);
		return true;
	}

	if (_name == "missionNumber") {
		TypeInfo<int >::parseFromBinaryStream(&missionNumber, stream);
		return true;
	}

	if (_name == "startPositionX") {
		TypeInfo<float >::parseFromBinaryStream(&startPositionX, stream);
		return true;
	}

	if (_name == "startPositionY") {
		TypeInfo<float >::parseFromBinaryStream(&startPositionY, stream);
		return true;
	}

	if (_name == "startPlanetCRC") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&startPlanetCRC, stream);
		return true;
	}

	if (_name == "endPositionX") {
		TypeInfo<float >::parseFromBinaryStream(&endPositionX, stream);
		return true;
	}

	if (_name == "endPositionY") {
		TypeInfo<float >::parseFromBinaryStream(&endPositionY, stream);
		return true;
	}

	if (_name == "endPlanetCRC") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&endPlanetCRC, stream);
		return true;
	}

	if (_name == "missionDescription") {
		TypeInfo<StringId >::parseFromBinaryStream(&missionDescription, stream);
		return true;
	}

	if (_name == "missionTitle") {
		TypeInfo<StringId >::parseFromBinaryStream(&missionTitle, stream);
		return true;
	}

	if (_name == "refreshCounter") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&refreshCounter, stream);
		return true;
	}

	if (_name == "targetName") {
		TypeInfo<String >::parseFromBinaryStream(&targetName, stream);
		return true;
	}

	if (_name == "missionTarget") {
		TypeInfo<ManagedReference<SceneObject* > >::parseFromBinaryStream(&missionTarget, stream);
		return true;
	}

	if (_name == "missionTargetDest") {
		TypeInfo<ManagedReference<SceneObject* > >::parseFromBinaryStream(&missionTargetDest, stream);
		return true;
	}

	if (_name == "templateString1") {
		TypeInfo<String >::parseFromBinaryStream(&templateString1, stream);
		return true;
	}

	if (_name == "templateString2") {
		TypeInfo<String >::parseFromBinaryStream(&templateString2, stream);
		return true;
	}

	if (_name == "targetTemplate") {
		TypeInfo<TemplateReference<SharedObjectTemplate*> >::parseFromBinaryStream(&targetTemplate, stream);
		return true;
	}


	return false;
}

void MissionObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = MissionObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int MissionObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "waypointToMission";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<WaypointObject* > >::toBinaryStream(&waypointToMission, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "missionObjective";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<MissionObjective* > >::toBinaryStream(&missionObjective, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "typeCRC";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned int >::toBinaryStream(&typeCRC, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "difficultyLevel";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&difficultyLevel, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "creatorName";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<UnicodeString >::toBinaryStream(&creatorName, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "rewardCredits";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&rewardCredits, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "missionNumber";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&missionNumber, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "startPositionX";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<float >::toBinaryStream(&startPositionX, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "startPositionY";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<float >::toBinaryStream(&startPositionY, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "startPlanetCRC";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned int >::toBinaryStream(&startPlanetCRC, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "endPositionX";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<float >::toBinaryStream(&endPositionX, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "endPositionY";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<float >::toBinaryStream(&endPositionY, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "endPlanetCRC";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned int >::toBinaryStream(&endPlanetCRC, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "missionDescription";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<StringId >::toBinaryStream(&missionDescription, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "missionTitle";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<StringId >::toBinaryStream(&missionTitle, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "refreshCounter";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned int >::toBinaryStream(&refreshCounter, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "targetName";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<String >::toBinaryStream(&targetName, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "missionTarget";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<SceneObject* > >::toBinaryStream(&missionTarget, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "missionTargetDest";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<SceneObject* > >::toBinaryStream(&missionTargetDest, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "templateString1";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<String >::toBinaryStream(&templateString1, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "templateString2";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<String >::toBinaryStream(&templateString2, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "targetTemplate";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<TemplateReference<SharedObjectTemplate*> >::toBinaryStream(&targetTemplate, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 22 + IntangibleObjectImplementation::writeObjectMembers(stream);
}

MissionObjectImplementation::MissionObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/mission/MissionObject.idl():  		typeCRC = SURVEY;
	typeCRC = SURVEY;
	// server/zone/objects/mission/MissionObject.idl():  		refreshCounter = 0;
	refreshCounter = 0;
	// server/zone/objects/mission/MissionObject.idl():  		missionDescription.setStringId("mission/mission_npc_survey_neutral_easy", "m1o");
	(&missionDescription)->setStringId("mission/mission_npc_survey_neutral_easy", "m1o");
	// server/zone/objects/mission/MissionObject.idl():  		missionTitle.setStringId("mission/mission_npc_survey_neutral_easy", "m1t");
	(&missionTitle)->setStringId("mission/mission_npc_survey_neutral_easy", "m1t");
	// server/zone/objects/mission/MissionObject.idl():  		targetName = "Testing target name";
	targetName = "Testing target name";
	// server/zone/objects/mission/MissionObject.idl():  		difficultyLevel = 50;
	difficultyLevel = 50;
	// server/zone/objects/mission/MissionObject.idl():  		rewardCredits = 100;
	rewardCredits = 100;
	// server/zone/objects/mission/MissionObject.idl():  		startPositionX = 0;
	startPositionX = 0;
	// server/zone/objects/mission/MissionObject.idl():  		startPositionY = 0;
	startPositionY = 0;
	// server/zone/objects/mission/MissionObject.idl():  		startPlanetCRC = 0;
	startPlanetCRC = 0;
	// server/zone/objects/mission/MissionObject.idl():  		Logger.setLoggingName("MissionObject");
	Logger::setLoggingName("MissionObject");
}

void MissionObjectImplementation::abort() {
	// server/zone/objects/mission/MissionObject.idl():  	}
	if (missionObjective != NULL)	// server/zone/objects/mission/MissionObject.idl():  			missionObjective.abort();
	missionObjective->abort();
}

void MissionObjectImplementation::setMissionObjective(MissionObjective* obj) {
	// server/zone/objects/mission/MissionObject.idl():  		missionObjective = obj;
	missionObjective = obj;
}

void MissionObjectImplementation::setStartPlanetCRC(unsigned int crc) {
	// server/zone/objects/mission/MissionObject.idl():  		startPlanetCRC = crc;
	startPlanetCRC = crc;
}

void MissionObjectImplementation::setEndPlanetCRC(unsigned int crc) {
	// server/zone/objects/mission/MissionObject.idl():  		endPlanetCRC = crc;
	endPlanetCRC = crc;
}

void MissionObjectImplementation::setMissionTarget(SceneObject* target) {
	// server/zone/objects/mission/MissionObject.idl():  		missionTarget = target;
	missionTarget = target;
}

void MissionObjectImplementation::setMissionTargetDest(SceneObject* target) {
	// server/zone/objects/mission/MissionObject.idl():  		missionTargetDest = target;
	missionTargetDest = target;
}

void MissionObjectImplementation::setMissionNumber(int num) {
	// server/zone/objects/mission/MissionObject.idl():  		missionNumber = num;
	missionNumber = num;
}

void MissionObjectImplementation::setTemplateStrings(const String& temp1, const String& temp2) {
	// server/zone/objects/mission/MissionObject.idl():  		templateString1 = temp1;
	templateString1 = temp1;
	// server/zone/objects/mission/MissionObject.idl():  		templateString2 = temp2;
	templateString2 = temp2;
}

float MissionObjectImplementation::getStartPositionX() {
	// server/zone/objects/mission/MissionObject.idl():  		return startPositionX;
	return startPositionX;
}

float MissionObjectImplementation::getStartPositionY() {
	// server/zone/objects/mission/MissionObject.idl():  		return startPositionY;
	return startPositionY;
}

unsigned int MissionObjectImplementation::getStartPlanetCRC() {
	// server/zone/objects/mission/MissionObject.idl():  		return startPlanetCRC;
	return startPlanetCRC;
}

float MissionObjectImplementation::getEndPositionX() {
	// server/zone/objects/mission/MissionObject.idl():  		return endPositionX;
	return endPositionX;
}

float MissionObjectImplementation::getEndPositionY() {
	// server/zone/objects/mission/MissionObject.idl():  		return endPositionY;
	return endPositionY;
}

unsigned int MissionObjectImplementation::getEndPlanetCRC() {
	// server/zone/objects/mission/MissionObject.idl():  		return endPlanetCRC;
	return endPlanetCRC;
}

WaypointObject* MissionObjectImplementation::getWaypointToMission() {
	// server/zone/objects/mission/MissionObject.idl():  		return waypointToMission;
	return waypointToMission;
}

SceneObject* MissionObjectImplementation::getMissionTarget() {
	// server/zone/objects/mission/MissionObject.idl():  		return missionTarget;
	return missionTarget;
}

SceneObject* MissionObjectImplementation::getMissionTargetDest() {
	// server/zone/objects/mission/MissionObject.idl():  		return missionTargetDest;
	return missionTargetDest;
}

unsigned int MissionObjectImplementation::getTypeCRC() {
	// server/zone/objects/mission/MissionObject.idl():  		return typeCRC;
	return typeCRC;
}

int MissionObjectImplementation::getRewardCredits() {
	// server/zone/objects/mission/MissionObject.idl():  		return rewardCredits;
	return rewardCredits;
}

UnicodeString MissionObjectImplementation::getCreatorName() {
	// server/zone/objects/mission/MissionObject.idl():  		return creatorName;
	return creatorName;
}

int MissionObjectImplementation::getDifficultyLevel() {
	// server/zone/objects/mission/MissionObject.idl():  		return difficultyLevel;
	return difficultyLevel;
}

StringId* MissionObjectImplementation::getMissionDescription() {
	// server/zone/objects/mission/MissionObject.idl():  		return missionDescription;
	return (&missionDescription);
}

StringId* MissionObjectImplementation::getMissionTitle() {
	// server/zone/objects/mission/MissionObject.idl():  		return missionTitle;
	return (&missionTitle);
}

String MissionObjectImplementation::getTargetName() {
	// server/zone/objects/mission/MissionObject.idl():  		return targetName;
	return targetName;
}

int MissionObjectImplementation::getRefreshCounter() {
	// server/zone/objects/mission/MissionObject.idl():  		return refreshCounter;
	return refreshCounter;
}

int MissionObjectImplementation::getMissionNumber() {
	// server/zone/objects/mission/MissionObject.idl():  		return missionNumber;
	return missionNumber;
}

bool MissionObjectImplementation::isSurveyMission() {
	// server/zone/objects/mission/MissionObject.idl():  		return typeCRC == this.SURVEY;
	return typeCRC == _this->SURVEY;
}

bool MissionObjectImplementation::isMissionObject() {
	// server/zone/objects/mission/MissionObject.idl():  		return true;
	return true;
}

String MissionObjectImplementation::getTemplateString1() {
	// server/zone/objects/mission/MissionObject.idl():  		return templateString1;
	return templateString1;
}

String MissionObjectImplementation::getTemplateString2() {
	// server/zone/objects/mission/MissionObject.idl():  		return templateString2;
	return templateString2;
}

/*
 *	MissionObjectAdapter
 */

MissionObjectAdapter::MissionObjectAdapter(MissionObjectImplementation* obj) : IntangibleObjectAdapter(obj) {
}

enum {RPC_CREATEWAYPOINT__ = 6,RPC_DESTROYOBJECTFROMDATABASE__BOOL_,RPC_UPDATETODATABASEALLOBJECTS__BOOL_,RPC_SETREFRESHCOUNTER__INT_BOOL_,RPC_SETTYPECRC__INT_BOOL_,RPC_INITIALIZETRANSIENTMEMBERS__,RPC_SENDBASELINESTO__SCENEOBJECT_,RPC_SETMISSIONDESCRIPTION__STRING_STRING_BOOL_,RPC_SETMISSIONTITLE__STRING_STRING_BOOL_,RPC_SETMISSIONTARGETNAME__STRING_BOOL_,RPC_SETMISSIONDIFFICULTY__INT_BOOL_,RPC_SETREWARDCREDITS__INT_BOOL_,RPC_SETSTARTPOSITION__FLOAT_FLOAT_INT_BOOL_,RPC_SETENDPOSITION__FLOAT_FLOAT_INT_BOOL_,RPC_SETCREATORNAME__STRING_BOOL_,RPC_UPDATEMISSIONLOCATION__,RPC_ABORT__,RPC_SETMISSIONOBJECTIVE__MISSIONOBJECTIVE_,RPC_SETSTARTPLANETCRC__INT_,RPC_SETENDPLANETCRC__INT_,RPC_SETMISSIONTARGET__SCENEOBJECT_,RPC_SETMISSIONTARGETDEST__SCENEOBJECT_,RPC_SETMISSIONNUMBER__INT_,RPC_SETTEMPLATESTRINGS__STRING_STRING_,RPC_GETSTARTPOSITIONX__,RPC_GETSTARTPOSITIONY__,RPC_GETSTARTPLANETCRC__,RPC_GETENDPOSITIONX__,RPC_GETENDPOSITIONY__,RPC_GETENDPLANETCRC__,RPC_GETWAYPOINTTOMISSION__,RPC_GETMISSIONTARGET__,RPC_GETMISSIONTARGETDEST__,RPC_GETTYPECRC__,RPC_GETREWARDCREDITS__,RPC_GETCREATORNAME__,RPC_GETDIFFICULTYLEVEL__,RPC_GETTARGETNAME__,RPC_GETREFRESHCOUNTER__,RPC_GETMISSIONNUMBER__,RPC_ISSURVEYMISSION__,RPC_ISMISSIONOBJECT__,RPC_GETTEMPLATESTRING1__,RPC_GETTEMPLATESTRING2__};

Packet* MissionObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_CREATEWAYPOINT__:
		resp->insertLong(createWaypoint()->_getObjectID());
		break;
	case RPC_DESTROYOBJECTFROMDATABASE__BOOL_:
		destroyObjectFromDatabase(inv->getBooleanParameter());
		break;
	case RPC_UPDATETODATABASEALLOBJECTS__BOOL_:
		updateToDatabaseAllObjects(inv->getBooleanParameter());
		break;
	case RPC_SETREFRESHCOUNTER__INT_BOOL_:
		setRefreshCounter(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case RPC_SETTYPECRC__INT_BOOL_:
		setTypeCRC(inv->getUnsignedIntParameter(), inv->getBooleanParameter());
		break;
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		initializeTransientMembers();
		break;
	case RPC_SENDBASELINESTO__SCENEOBJECT_:
		sendBaselinesTo((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_SETMISSIONDESCRIPTION__STRING_STRING_BOOL_:
		setMissionDescription(inv->getAsciiParameter(_param0_setMissionDescription__String_String_bool_), inv->getAsciiParameter(_param1_setMissionDescription__String_String_bool_), inv->getBooleanParameter());
		break;
	case RPC_SETMISSIONTITLE__STRING_STRING_BOOL_:
		setMissionTitle(inv->getAsciiParameter(_param0_setMissionTitle__String_String_bool_), inv->getAsciiParameter(_param1_setMissionTitle__String_String_bool_), inv->getBooleanParameter());
		break;
	case RPC_SETMISSIONTARGETNAME__STRING_BOOL_:
		setMissionTargetName(inv->getAsciiParameter(_param0_setMissionTargetName__String_bool_), inv->getBooleanParameter());
		break;
	case RPC_SETMISSIONDIFFICULTY__INT_BOOL_:
		setMissionDifficulty(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case RPC_SETREWARDCREDITS__INT_BOOL_:
		setRewardCredits(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case RPC_SETSTARTPOSITION__FLOAT_FLOAT_INT_BOOL_:
		setStartPosition(inv->getFloatParameter(), inv->getFloatParameter(), inv->getUnsignedIntParameter(), inv->getBooleanParameter());
		break;
	case RPC_SETENDPOSITION__FLOAT_FLOAT_INT_BOOL_:
		setEndPosition(inv->getFloatParameter(), inv->getFloatParameter(), inv->getUnsignedIntParameter(), inv->getBooleanParameter());
		break;
	case RPC_SETCREATORNAME__STRING_BOOL_:
		setCreatorName(inv->getAsciiParameter(_param0_setCreatorName__String_bool_), inv->getBooleanParameter());
		break;
	case RPC_UPDATEMISSIONLOCATION__:
		updateMissionLocation();
		break;
	case RPC_ABORT__:
		abort();
		break;
	case RPC_SETMISSIONOBJECTIVE__MISSIONOBJECTIVE_:
		setMissionObjective((MissionObjective*) inv->getObjectParameter());
		break;
	case RPC_SETSTARTPLANETCRC__INT_:
		setStartPlanetCRC(inv->getUnsignedIntParameter());
		break;
	case RPC_SETENDPLANETCRC__INT_:
		setEndPlanetCRC(inv->getUnsignedIntParameter());
		break;
	case RPC_SETMISSIONTARGET__SCENEOBJECT_:
		setMissionTarget((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_SETMISSIONTARGETDEST__SCENEOBJECT_:
		setMissionTargetDest((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_SETMISSIONNUMBER__INT_:
		setMissionNumber(inv->getSignedIntParameter());
		break;
	case RPC_SETTEMPLATESTRINGS__STRING_STRING_:
		setTemplateStrings(inv->getAsciiParameter(_param0_setTemplateStrings__String_String_), inv->getAsciiParameter(_param1_setTemplateStrings__String_String_));
		break;
	case RPC_GETSTARTPOSITIONX__:
		resp->insertFloat(getStartPositionX());
		break;
	case RPC_GETSTARTPOSITIONY__:
		resp->insertFloat(getStartPositionY());
		break;
	case RPC_GETSTARTPLANETCRC__:
		resp->insertInt(getStartPlanetCRC());
		break;
	case RPC_GETENDPOSITIONX__:
		resp->insertFloat(getEndPositionX());
		break;
	case RPC_GETENDPOSITIONY__:
		resp->insertFloat(getEndPositionY());
		break;
	case RPC_GETENDPLANETCRC__:
		resp->insertInt(getEndPlanetCRC());
		break;
	case RPC_GETWAYPOINTTOMISSION__:
		resp->insertLong(getWaypointToMission()->_getObjectID());
		break;
	case RPC_GETMISSIONTARGET__:
		resp->insertLong(getMissionTarget()->_getObjectID());
		break;
	case RPC_GETMISSIONTARGETDEST__:
		resp->insertLong(getMissionTargetDest()->_getObjectID());
		break;
	case RPC_GETTYPECRC__:
		resp->insertInt(getTypeCRC());
		break;
	case RPC_GETREWARDCREDITS__:
		resp->insertSignedInt(getRewardCredits());
		break;
	case RPC_GETCREATORNAME__:
		resp->insertUnicode(getCreatorName());
		break;
	case RPC_GETDIFFICULTYLEVEL__:
		resp->insertSignedInt(getDifficultyLevel());
		break;
	case RPC_GETTARGETNAME__:
		resp->insertAscii(getTargetName());
		break;
	case RPC_GETREFRESHCOUNTER__:
		resp->insertSignedInt(getRefreshCounter());
		break;
	case RPC_GETMISSIONNUMBER__:
		resp->insertSignedInt(getMissionNumber());
		break;
	case RPC_ISSURVEYMISSION__:
		resp->insertBoolean(isSurveyMission());
		break;
	case RPC_ISMISSIONOBJECT__:
		resp->insertBoolean(isMissionObject());
		break;
	case RPC_GETTEMPLATESTRING1__:
		resp->insertAscii(getTemplateString1());
		break;
	case RPC_GETTEMPLATESTRING2__:
		resp->insertAscii(getTemplateString2());
		break;
	default:
		return NULL;
	}

	return resp;
}

WaypointObject* MissionObjectAdapter::createWaypoint() {
	return ((MissionObjectImplementation*) impl)->createWaypoint();
}

void MissionObjectAdapter::destroyObjectFromDatabase(bool destroyContainedObjects) {
	((MissionObjectImplementation*) impl)->destroyObjectFromDatabase(destroyContainedObjects);
}

void MissionObjectAdapter::updateToDatabaseAllObjects(bool startTask) {
	((MissionObjectImplementation*) impl)->updateToDatabaseAllObjects(startTask);
}

void MissionObjectAdapter::setRefreshCounter(int ctr, bool notifyClient) {
	((MissionObjectImplementation*) impl)->setRefreshCounter(ctr, notifyClient);
}

void MissionObjectAdapter::setTypeCRC(unsigned int crc, bool notifyClient) {
	((MissionObjectImplementation*) impl)->setTypeCRC(crc, notifyClient);
}

void MissionObjectAdapter::initializeTransientMembers() {
	((MissionObjectImplementation*) impl)->initializeTransientMembers();
}

void MissionObjectAdapter::sendBaselinesTo(SceneObject* player) {
	((MissionObjectImplementation*) impl)->sendBaselinesTo(player);
}

void MissionObjectAdapter::setMissionDescription(const String& file, const String& id, bool notifyClient) {
	((MissionObjectImplementation*) impl)->setMissionDescription(file, id, notifyClient);
}

void MissionObjectAdapter::setMissionTitle(const String& file, const String& id, bool notifyClient) {
	((MissionObjectImplementation*) impl)->setMissionTitle(file, id, notifyClient);
}

void MissionObjectAdapter::setMissionTargetName(const String& target, bool notifyClient) {
	((MissionObjectImplementation*) impl)->setMissionTargetName(target, notifyClient);
}

void MissionObjectAdapter::setMissionDifficulty(int difficulty, bool notifyClient) {
	((MissionObjectImplementation*) impl)->setMissionDifficulty(difficulty, notifyClient);
}

void MissionObjectAdapter::setRewardCredits(int creds, bool notifyClient) {
	((MissionObjectImplementation*) impl)->setRewardCredits(creds, notifyClient);
}

void MissionObjectAdapter::setStartPosition(float posX, float posY, unsigned int planetCRC, bool notifyClient) {
	((MissionObjectImplementation*) impl)->setStartPosition(posX, posY, planetCRC, notifyClient);
}

void MissionObjectAdapter::setEndPosition(float posX, float posY, unsigned int planetCRC, bool notifyClient) {
	((MissionObjectImplementation*) impl)->setEndPosition(posX, posY, planetCRC, notifyClient);
}

void MissionObjectAdapter::setCreatorName(const String& name, bool notifyClient) {
	((MissionObjectImplementation*) impl)->setCreatorName(name, notifyClient);
}

void MissionObjectAdapter::updateMissionLocation() {
	((MissionObjectImplementation*) impl)->updateMissionLocation();
}

void MissionObjectAdapter::abort() {
	((MissionObjectImplementation*) impl)->abort();
}

void MissionObjectAdapter::setMissionObjective(MissionObjective* obj) {
	((MissionObjectImplementation*) impl)->setMissionObjective(obj);
}

void MissionObjectAdapter::setStartPlanetCRC(unsigned int crc) {
	((MissionObjectImplementation*) impl)->setStartPlanetCRC(crc);
}

void MissionObjectAdapter::setEndPlanetCRC(unsigned int crc) {
	((MissionObjectImplementation*) impl)->setEndPlanetCRC(crc);
}

void MissionObjectAdapter::setMissionTarget(SceneObject* target) {
	((MissionObjectImplementation*) impl)->setMissionTarget(target);
}

void MissionObjectAdapter::setMissionTargetDest(SceneObject* target) {
	((MissionObjectImplementation*) impl)->setMissionTargetDest(target);
}

void MissionObjectAdapter::setMissionNumber(int num) {
	((MissionObjectImplementation*) impl)->setMissionNumber(num);
}

void MissionObjectAdapter::setTemplateStrings(const String& temp1, const String& temp2) {
	((MissionObjectImplementation*) impl)->setTemplateStrings(temp1, temp2);
}

float MissionObjectAdapter::getStartPositionX() {
	return ((MissionObjectImplementation*) impl)->getStartPositionX();
}

float MissionObjectAdapter::getStartPositionY() {
	return ((MissionObjectImplementation*) impl)->getStartPositionY();
}

unsigned int MissionObjectAdapter::getStartPlanetCRC() {
	return ((MissionObjectImplementation*) impl)->getStartPlanetCRC();
}

float MissionObjectAdapter::getEndPositionX() {
	return ((MissionObjectImplementation*) impl)->getEndPositionX();
}

float MissionObjectAdapter::getEndPositionY() {
	return ((MissionObjectImplementation*) impl)->getEndPositionY();
}

unsigned int MissionObjectAdapter::getEndPlanetCRC() {
	return ((MissionObjectImplementation*) impl)->getEndPlanetCRC();
}

WaypointObject* MissionObjectAdapter::getWaypointToMission() {
	return ((MissionObjectImplementation*) impl)->getWaypointToMission();
}

SceneObject* MissionObjectAdapter::getMissionTarget() {
	return ((MissionObjectImplementation*) impl)->getMissionTarget();
}

SceneObject* MissionObjectAdapter::getMissionTargetDest() {
	return ((MissionObjectImplementation*) impl)->getMissionTargetDest();
}

unsigned int MissionObjectAdapter::getTypeCRC() {
	return ((MissionObjectImplementation*) impl)->getTypeCRC();
}

int MissionObjectAdapter::getRewardCredits() {
	return ((MissionObjectImplementation*) impl)->getRewardCredits();
}

UnicodeString MissionObjectAdapter::getCreatorName() {
	return ((MissionObjectImplementation*) impl)->getCreatorName();
}

int MissionObjectAdapter::getDifficultyLevel() {
	return ((MissionObjectImplementation*) impl)->getDifficultyLevel();
}

String MissionObjectAdapter::getTargetName() {
	return ((MissionObjectImplementation*) impl)->getTargetName();
}

int MissionObjectAdapter::getRefreshCounter() {
	return ((MissionObjectImplementation*) impl)->getRefreshCounter();
}

int MissionObjectAdapter::getMissionNumber() {
	return ((MissionObjectImplementation*) impl)->getMissionNumber();
}

bool MissionObjectAdapter::isSurveyMission() {
	return ((MissionObjectImplementation*) impl)->isSurveyMission();
}

bool MissionObjectAdapter::isMissionObject() {
	return ((MissionObjectImplementation*) impl)->isMissionObject();
}

String MissionObjectAdapter::getTemplateString1() {
	return ((MissionObjectImplementation*) impl)->getTemplateString1();
}

String MissionObjectAdapter::getTemplateString2() {
	return ((MissionObjectImplementation*) impl)->getTemplateString2();
}

/*
 *	MissionObjectHelper
 */

MissionObjectHelper* MissionObjectHelper::staticInitializer = MissionObjectHelper::instance();

MissionObjectHelper::MissionObjectHelper() {
	className = "MissionObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void MissionObjectHelper::finalizeHelper() {
	MissionObjectHelper::finalize();
}

DistributedObject* MissionObjectHelper::instantiateObject() {
	return new MissionObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* MissionObjectHelper::instantiateServant() {
	return new MissionObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* MissionObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new MissionObjectAdapter((MissionObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

