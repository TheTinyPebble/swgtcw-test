/*
Copyright (C) 2007 <SWGEmu>
 
This File is part of Core3.
 
This program is free software; you can redistribute 
it and/or modify it under the terms of the GNU Lesser 
General Public License as published by the Free Software
Foundation; either version 2 of the License, 
or (at your option) any later version.
 
This program is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
See the GNU Lesser General Public License for
more details.
 
You should have received a copy of the GNU Lesser General 
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 
Linking Engine3 statically or dynamically with other modules 
is making a combined work based on Engine3. 
Thus, the terms and conditions of the GNU Lesser General Public License 
cover the whole combination.
 
In addition, as a special exception, the copyright holders of Engine3 
give you permission to combine Engine3 program with free software 
programs or libraries that are released under the GNU LGPL and with 
code included in the standard release of Core3 under the GNU LGPL 
license (or modified versions of such code, with unchanged license). 
You may copy and distribute such a system following the terms of the 
GNU LGPL for Engine3 and the licenses of the other code concerned, 
provided that you include the source code of that other code when 
and as the GNU LGPL requires distribution of source code.
 
Note that people who make modified versions of Engine3 are not obligated 
to grant this special exception for their modified versions; 
it is their choice whether to do so. The GNU Lesser General Public License 
gives permission to release a modified version without this exception; 
this exception also makes it possible to release a modified version 
which carries forward this exception.
*/

import "../scene/SceneObject";

import "../player/Player";

import "../tangible/TangibleObject";

import "MissionObjective";

interface MissionObject implements SceneObject {
	MissionObject(unsigned long oid, Player owner = NULL) {
		super(oid, int type);
	}
	
	void init();
	
	void assetSetup();
	void assetPart(boolean award);
	
	/////
	//Network Sends:
	/////
	void sendTo(Player player, boolean doClose = true);
	void sendDeltaTo(Player player);
	void doLinkToPlayer(Player player);
	void sendDestroyTo(Player player);
	
	/////

	void setOwner(Player player);
	Player getOwner();
	
	/////
	//Internal Tracking Methods:
	/////
	
	void setDBKey(const String tdbk);
	String getDBKey();
	
	void applyTerminalMask(int tam);
	int getTerminalMask();
	
	String getStatusStr();
	
	//Container: For giving to player to complete a delivery
	void addDeliverItem(TangibleObject item);
	TangibleObject getDeliverItem(unsigned long oid);
	void removeDeliverItem(SceneObject item);

	//Container: Items to award player on mission completion
	void addAwardItem(TangibleObject item);
	TangibleObject getAwardItem(unsigned long oid);
	void removeAwardItem(SceneObject item);

	/////
	//Objectives
	/////
	
	void setObjectiveDefaults(const String od);
	String getObjectiveDefaults();
	boolean isInstantComplete();
	void setInstantComplete(boolean temp);
	boolean isComplete();
	boolean isFailure();

	void addObjective(MissionObjective mo);
	void spawnObjectives(const String objectives);
	void serializeObjectives(String ret);
	int updateStatus(int type, unsigned int objCrc, const String str, String updateStr, int increment);
	void checkComplete();



	/////
	//Generic Mission Information Variables:
	//All are used in the MissionObject3 packet
	/////
	
	void setTypeStr(const String tstr);
	String getTypeStr();
	
	void setDescKey(int tdk);
	unsigned int getDescKey();
	
	void setTitleKey(int ttk);
	unsigned int getTitleKey();
	
	void setDifficultyLevel(unsigned int tdlv);
	unsigned int getDifficultyLevel();
	
	void setDestX(float tdx);
	float getDestX();
	void setDestY(float tdy);
	float getDestY();
	void setDestPlanetCrc(unsigned int tpc);
	unsigned int getDestPlanetCrc();
	
	void setCreatorName(const UnicodeString tcn);
	UnicodeString getCreatorName();
	
	void setReward(unsigned int tr);
	unsigned int getReward();
	
	void setTargetX(float ttx);
	float getTargetX();
	void setTargetY(float tty);
	float getTargetY();
	void setTargetPlanetCrc(unsigned int tpc);
	unsigned int getTargetPlanetCrc();
	void setTargetName(const String tds);
	String getTargetName();
	
	void setDepictedObjCrc(unsigned int tsdc);
	unsigned int getDepictedObjCrc();
	
	void setDescriptionStf(const String tds);
	String getDescriptionStf();
	void setDescription(const String tds);
	String getDescription();
	
	void setTitleStf(const String tts);
	String getTitleStf();
	void setTitle(const String tts);
	String getTitle();
	
	void setRefreshCount(unsigned int trc);
	unsigned int getRefreshCount();
	
	void setTypeCrc(unsigned int ttc);
	unsigned int getTypeCrc();
	
}
