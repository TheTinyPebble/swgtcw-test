/*
 *	server/zone/objects/mission/DestroyMissionObjective.cpp generated by engine3 IDL compiler 0.60
 */

#include "DestroyMissionObjective.h"

#include "server/zone/objects/mission/MissionObject.h"

#include "server/zone/objects/mission/MissionObserver.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/objects/area/MissionSpawnActiveArea.h"

#include "server/zone/templates/mobile/LairTemplate.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/Zone.h"

/*
 *	DestroyMissionObjectiveStub
 */

enum {RPC_FINALIZE__ = 6,RPC_INITIALIZETRANSIENTMEMBERS__,RPC_ACTIVATE__,RPC_ABORT__,RPC_COMPLETE__,RPC_SPAWNLAIR__,RPC_DESTROYOBJECTFROMDATABASE__,RPC_NOTIFYOBSERVEREVENT__MISSIONOBSERVER_INT_OBSERVABLE_MANAGEDOBJECT_LONG_,RPC_SETDIFFICULTY__INT_INT_,};

DestroyMissionObjective::DestroyMissionObjective(MissionObject* mission) : MissionObjective(DummyConstructorParameter::instance()) {
	DestroyMissionObjectiveImplementation* _implementation = new DestroyMissionObjectiveImplementation(mission);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("DestroyMissionObjective");
}

DestroyMissionObjective::DestroyMissionObjective(DummyConstructorParameter* param) : MissionObjective(param) {
	_setClassName("DestroyMissionObjective");
}

DestroyMissionObjective::~DestroyMissionObjective() {
}



void DestroyMissionObjective::initializeTransientMembers() {
	DestroyMissionObjectiveImplementation* _implementation = static_cast<DestroyMissionObjectiveImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void DestroyMissionObjective::activate() {
	DestroyMissionObjectiveImplementation* _implementation = static_cast<DestroyMissionObjectiveImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ACTIVATE__);

		method.executeWithVoidReturn();
	} else
		_implementation->activate();
}

void DestroyMissionObjective::abort() {
	DestroyMissionObjectiveImplementation* _implementation = static_cast<DestroyMissionObjectiveImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ABORT__);

		method.executeWithVoidReturn();
	} else
		_implementation->abort();
}

void DestroyMissionObjective::complete() {
	DestroyMissionObjectiveImplementation* _implementation = static_cast<DestroyMissionObjectiveImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_COMPLETE__);

		method.executeWithVoidReturn();
	} else
		_implementation->complete();
}

void DestroyMissionObjective::spawnLair() {
	DestroyMissionObjectiveImplementation* _implementation = static_cast<DestroyMissionObjectiveImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SPAWNLAIR__);

		method.executeWithVoidReturn();
	} else
		_implementation->spawnLair();
}

void DestroyMissionObjective::destroyObjectFromDatabase() {
	DestroyMissionObjectiveImplementation* _implementation = static_cast<DestroyMissionObjectiveImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DESTROYOBJECTFROMDATABASE__);

		method.executeWithVoidReturn();
	} else
		_implementation->destroyObjectFromDatabase();
}

Vector3 DestroyMissionObjective::findValidSpawnPosition(Zone* zone) {
	DestroyMissionObjectiveImplementation* _implementation = static_cast<DestroyMissionObjectiveImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->findValidSpawnPosition(zone);
}

int DestroyMissionObjective::notifyObserverEvent(MissionObserver* observer, unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	DestroyMissionObjectiveImplementation* _implementation = static_cast<DestroyMissionObjectiveImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBSERVEREVENT__MISSIONOBSERVER_INT_OBSERVABLE_MANAGEDOBJECT_LONG_);
		method.addObjectParameter(observer);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(observable);
		method.addObjectParameter(arg1);
		method.addSignedLongParameter(arg2);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyObserverEvent(observer, eventType, observable, arg1, arg2);
}

void DestroyMissionObjective::setLairTemplateToSpawn(const String& sp) {
	DestroyMissionObjectiveImplementation* _implementation = static_cast<DestroyMissionObjectiveImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->setLairTemplateToSpawn(sp);
}

void DestroyMissionObjective::setDifficulty(int min, int max) {
	DestroyMissionObjectiveImplementation* _implementation = static_cast<DestroyMissionObjectiveImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETDIFFICULTY__INT_INT_);
		method.addSignedIntParameter(min);
		method.addSignedIntParameter(max);

		method.executeWithVoidReturn();
	} else
		_implementation->setDifficulty(min, max);
}

Vector3 DestroyMissionObjective::getEndPosition() {
	DestroyMissionObjectiveImplementation* _implementation = static_cast<DestroyMissionObjectiveImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getEndPosition();
}

DistributedObjectServant* DestroyMissionObjective::_getImplementation() {

	_updated = true;
	return _impl;
}

void DestroyMissionObjective::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	DestroyMissionObjectiveImplementation
 */

DestroyMissionObjectiveImplementation::DestroyMissionObjectiveImplementation(DummyConstructorParameter* param) : MissionObjectiveImplementation(param) {
	_initializeImplementation();
}


DestroyMissionObjectiveImplementation::~DestroyMissionObjectiveImplementation() {
	DestroyMissionObjectiveImplementation::finalize();
}


void DestroyMissionObjectiveImplementation::_initializeImplementation() {
	_setClassHelper(DestroyMissionObjectiveHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void DestroyMissionObjectiveImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<DestroyMissionObjective*>(stub);
	MissionObjectiveImplementation::_setStub(stub);
}

DistributedObjectStub* DestroyMissionObjectiveImplementation::_getStub() {
	return _this;
}

DestroyMissionObjectiveImplementation::operator const DestroyMissionObjective*() {
	return _this;
}

void DestroyMissionObjectiveImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void DestroyMissionObjectiveImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void DestroyMissionObjectiveImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void DestroyMissionObjectiveImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void DestroyMissionObjectiveImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void DestroyMissionObjectiveImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void DestroyMissionObjectiveImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void DestroyMissionObjectiveImplementation::_serializationHelperMethod() {
	MissionObjectiveImplementation::_serializationHelperMethod();

	_setClassName("DestroyMissionObjective");

}

void DestroyMissionObjectiveImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(DestroyMissionObjectiveImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool DestroyMissionObjectiveImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (MissionObjectiveImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "DestroyMissionObjective.lairTemplate") {
		TypeInfo<String >::parseFromBinaryStream(&lairTemplate, stream);
		return true;
	}

	if (_name == "DestroyMissionObjective.spawnActiveArea") {
		TypeInfo<ManagedReference<MissionSpawnActiveArea* > >::parseFromBinaryStream(&spawnActiveArea, stream);
		return true;
	}

	if (_name == "DestroyMissionObjective.lairObject") {
		TypeInfo<ManagedReference<TangibleObject* > >::parseFromBinaryStream(&lairObject, stream);
		return true;
	}

	if (_name == "DestroyMissionObjective.minDifficulty") {
		TypeInfo<int >::parseFromBinaryStream(&minDifficulty, stream);
		return true;
	}

	if (_name == "DestroyMissionObjective.maxDifficulty") {
		TypeInfo<int >::parseFromBinaryStream(&maxDifficulty, stream);
		return true;
	}


	return false;
}

void DestroyMissionObjectiveImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = DestroyMissionObjectiveImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int DestroyMissionObjectiveImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = MissionObjectiveImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;
	_name = "DestroyMissionObjective.lairTemplate";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&lairTemplate, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "DestroyMissionObjective.spawnActiveArea";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<MissionSpawnActiveArea* > >::toBinaryStream(&spawnActiveArea, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "DestroyMissionObjective.lairObject";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<TangibleObject* > >::toBinaryStream(&lairObject, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "DestroyMissionObjective.minDifficulty";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&minDifficulty, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "DestroyMissionObjective.maxDifficulty";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&maxDifficulty, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 5;
}

DestroyMissionObjectiveImplementation::DestroyMissionObjectiveImplementation(MissionObject* mission) : MissionObjectiveImplementation(mission) {
	_initializeImplementation();
	// server/zone/objects/mission/DestroyMissionObjective.idl():  		minDifficulty = 0;
	minDifficulty = 0;
	// server/zone/objects/mission/DestroyMissionObjective.idl():  		maxDifficulty = 0;
	maxDifficulty = 0;
	// server/zone/objects/mission/DestroyMissionObjective.idl():  		Logger.setLoggingName("DestroyMissionObjective");
	Logger::setLoggingName("DestroyMissionObjective");
}

void DestroyMissionObjectiveImplementation::finalize() {
}

void DestroyMissionObjectiveImplementation::initializeTransientMembers() {
	// server/zone/objects/mission/DestroyMissionObjective.idl():  		super.initializeTransientMembers();
	MissionObjectiveImplementation::initializeTransientMembers();
	// server/zone/objects/mission/DestroyMissionObjective.idl():  		Logger.setLoggingName("MissionObject");
	Logger::setLoggingName("MissionObject");
}

void DestroyMissionObjectiveImplementation::setDifficulty(int min, int max) {
	// server/zone/objects/mission/DestroyMissionObjective.idl():  		minDifficulty = min;
	minDifficulty = min;
	// server/zone/objects/mission/DestroyMissionObjective.idl():  		maxDifficulty = max;
	maxDifficulty = max;
}

/*
 *	DestroyMissionObjectiveAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


DestroyMissionObjectiveAdapter::DestroyMissionObjectiveAdapter(DestroyMissionObjective* obj) : MissionObjectiveAdapter(obj) {
}

void DestroyMissionObjectiveAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_FINALIZE__:
		{
			finalize();
		}
		break;
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			initializeTransientMembers();
		}
		break;
	case RPC_ACTIVATE__:
		{
			activate();
		}
		break;
	case RPC_ABORT__:
		{
			abort();
		}
		break;
	case RPC_COMPLETE__:
		{
			complete();
		}
		break;
	case RPC_SPAWNLAIR__:
		{
			spawnLair();
		}
		break;
	case RPC_DESTROYOBJECTFROMDATABASE__:
		{
			destroyObjectFromDatabase();
		}
		break;
	case RPC_NOTIFYOBSERVEREVENT__MISSIONOBSERVER_INT_OBSERVABLE_MANAGEDOBJECT_LONG_:
		{
			resp->insertSignedInt(notifyObserverEvent(static_cast<MissionObserver*>(inv->getObjectParameter()), inv->getUnsignedIntParameter(), static_cast<Observable*>(inv->getObjectParameter()), static_cast<ManagedObject*>(inv->getObjectParameter()), inv->getSignedLongParameter()));
		}
		break;
	case RPC_SETDIFFICULTY__INT_INT_:
		{
			setDifficulty(inv->getSignedIntParameter(), inv->getSignedIntParameter());
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void DestroyMissionObjectiveAdapter::finalize() {
	(static_cast<DestroyMissionObjective*>(stub))->finalize();
}

void DestroyMissionObjectiveAdapter::initializeTransientMembers() {
	(static_cast<DestroyMissionObjective*>(stub))->initializeTransientMembers();
}

void DestroyMissionObjectiveAdapter::activate() {
	(static_cast<DestroyMissionObjective*>(stub))->activate();
}

void DestroyMissionObjectiveAdapter::abort() {
	(static_cast<DestroyMissionObjective*>(stub))->abort();
}

void DestroyMissionObjectiveAdapter::complete() {
	(static_cast<DestroyMissionObjective*>(stub))->complete();
}

void DestroyMissionObjectiveAdapter::spawnLair() {
	(static_cast<DestroyMissionObjective*>(stub))->spawnLair();
}

void DestroyMissionObjectiveAdapter::destroyObjectFromDatabase() {
	(static_cast<DestroyMissionObjective*>(stub))->destroyObjectFromDatabase();
}

int DestroyMissionObjectiveAdapter::notifyObserverEvent(MissionObserver* observer, unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	return (static_cast<DestroyMissionObjective*>(stub))->notifyObserverEvent(observer, eventType, observable, arg1, arg2);
}

void DestroyMissionObjectiveAdapter::setDifficulty(int min, int max) {
	(static_cast<DestroyMissionObjective*>(stub))->setDifficulty(min, max);
}

/*
 *	DestroyMissionObjectiveHelper
 */

DestroyMissionObjectiveHelper* DestroyMissionObjectiveHelper::staticInitializer = DestroyMissionObjectiveHelper::instance();

DestroyMissionObjectiveHelper::DestroyMissionObjectiveHelper() {
	className = "DestroyMissionObjective";

	Core::getObjectBroker()->registerClass(className, this);
}

void DestroyMissionObjectiveHelper::finalizeHelper() {
	DestroyMissionObjectiveHelper::finalize();
}

DistributedObject* DestroyMissionObjectiveHelper::instantiateObject() {
	return new DestroyMissionObjective(DummyConstructorParameter::instance());
}

DistributedObjectServant* DestroyMissionObjectiveHelper::instantiateServant() {
	return new DestroyMissionObjectiveImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* DestroyMissionObjectiveHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new DestroyMissionObjectiveAdapter(static_cast<DestroyMissionObjective*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

