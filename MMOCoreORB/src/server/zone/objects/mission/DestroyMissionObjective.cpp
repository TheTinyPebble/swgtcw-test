/*
 *	server/zone/objects/mission/DestroyMissionObjective.cpp generated by engine3 IDL compiler 0.60
 */

#include "DestroyMissionObjective.h"

#include "server/zone/objects/scene/Observer.h"

#include "server/zone/objects/scene/Observable.h"

#include "server/zone/objects/mission/MissionObject.h"

#include "server/zone/objects/mission/MissionObserver.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/objects/area/MissionSpawnActiveArea.h"

#include "server/zone/objects/tangible/lair/LairObject.h"


// Imported class dependencies

#include "server/zone/objects/mission/DestroyMissionObjective.h"

#include "engine/util/Quaternion.h"

#include "server/zone/templates/TemplateReference.h"

#include "system/util/VectorMap.h"

#include "server/zone/objects/scene/ObserverEventMap.h"

#include "server/zone/objects/mission/MissionObject.h"

#include "system/util/Vector.h"

#include "server/zone/objects/tangible/DamageMap.h"

#include "server/zone/ZoneProcessServerImplementation.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/mission/MissionObjective.h"

#include "server/zone/objects/waypoint/WaypointObject.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/templates/tangible/LairObjectTemplate.h"

#include "server/zone/objects/tangible/lair/HealLairEvent.h"

#include "system/util/SortedVector.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

#include "server/zone/objects/scene/variables/StringId.h"

/*
 *	DestroyMissionObjectiveStub
 */

DestroyMissionObjective::DestroyMissionObjective(MissionObject* mission) : MissionObjective(DummyConstructorParameter::instance()) {
	DestroyMissionObjectiveImplementation* _implementation = new DestroyMissionObjectiveImplementation(mission);
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

DestroyMissionObjective::DestroyMissionObjective(DummyConstructorParameter* param) : MissionObjective(param) {
}

DestroyMissionObjective::~DestroyMissionObjective() {
}


void DestroyMissionObjective::initializeTransientMembers() {
	DestroyMissionObjectiveImplementation* _implementation = (DestroyMissionObjectiveImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void DestroyMissionObjective::activate() {
	DestroyMissionObjectiveImplementation* _implementation = (DestroyMissionObjectiveImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		_implementation->activate();
}

void DestroyMissionObjective::abort() {
	DestroyMissionObjectiveImplementation* _implementation = (DestroyMissionObjectiveImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		method.executeWithVoidReturn();
	} else
		_implementation->abort();
}

void DestroyMissionObjective::complete() {
	DestroyMissionObjectiveImplementation* _implementation = (DestroyMissionObjectiveImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		method.executeWithVoidReturn();
	} else
		_implementation->complete();
}

void DestroyMissionObjective::spawnLair() {
	DestroyMissionObjectiveImplementation* _implementation = (DestroyMissionObjectiveImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		method.executeWithVoidReturn();
	} else
		_implementation->spawnLair();
}

void DestroyMissionObjective::destroyObjectFromDatabase() {
	DestroyMissionObjectiveImplementation* _implementation = (DestroyMissionObjectiveImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		method.executeWithVoidReturn();
	} else
		_implementation->destroyObjectFromDatabase();
}

int DestroyMissionObjective::notifyObserverEvent(MissionObserver* observer, unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	DestroyMissionObjectiveImplementation* _implementation = (DestroyMissionObjectiveImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addObjectParameter(observer);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(observable);
		method.addObjectParameter(arg1);
		method.addSignedLongParameter(arg2);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyObserverEvent(observer, eventType, observable, arg1, arg2);
}

void DestroyMissionObjective::setLairTemplateToSpawn(SharedObjectTemplate* sp) {
	DestroyMissionObjectiveImplementation* _implementation = (DestroyMissionObjectiveImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->setLairTemplateToSpawn(sp);
}

DistributedObjectServant* DestroyMissionObjective::_getImplementation() {
	return getForUpdate();}

void DestroyMissionObjective::_setImplementation(DistributedObjectServant* servant) {
	setObject((ManagedObjectImplementation*) servant);}

/*
 *	DestroyMissionObjectiveImplementation
 */

DestroyMissionObjectiveImplementation::DestroyMissionObjectiveImplementation(DummyConstructorParameter* param) : MissionObjectiveImplementation(param) {
	_initializeImplementation();
}


DestroyMissionObjectiveImplementation::~DestroyMissionObjectiveImplementation() {
	DestroyMissionObjectiveImplementation::finalize();
}


void DestroyMissionObjectiveImplementation::_initializeImplementation() {
	_setClassHelper(DestroyMissionObjectiveHelper::instance());

	_serializationHelperMethod();
}

void DestroyMissionObjectiveImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (DestroyMissionObjective*) stub;
	MissionObjectiveImplementation::_setStub(stub);
}

DistributedObjectStub* DestroyMissionObjectiveImplementation::_getStub() {
	return _this;
}

DestroyMissionObjectiveImplementation::operator const DestroyMissionObjective*() {
	return _this;
}

TransactionalObject* DestroyMissionObjectiveImplementation::clone() {
	return (TransactionalObject*) new DestroyMissionObjectiveImplementation(*this);
}


void DestroyMissionObjectiveImplementation::lock(bool doLock) {
}

void DestroyMissionObjectiveImplementation::lock(ManagedObject* obj) {
}

void DestroyMissionObjectiveImplementation::rlock(bool doLock) {
}

void DestroyMissionObjectiveImplementation::wlock(bool doLock) {
}

void DestroyMissionObjectiveImplementation::wlock(ManagedObject* obj) {
}

void DestroyMissionObjectiveImplementation::unlock(bool doLock) {
}

void DestroyMissionObjectiveImplementation::runlock(bool doLock) {
}

void DestroyMissionObjectiveImplementation::_serializationHelperMethod() {
	MissionObjectiveImplementation::_serializationHelperMethod();

	_setClassName("DestroyMissionObjective");

	addSerializableVariable("lairTemplateToSpawn", &lairTemplateToSpawn);
	addSerializableVariable("spawnActiveArea", &spawnActiveArea);
	addSerializableVariable("lairObject", &lairObject);
}

DestroyMissionObjectiveImplementation::DestroyMissionObjectiveImplementation(MissionObject* mission) : MissionObjectiveImplementation(mission) {
	_initializeImplementation();
	// server/zone/objects/mission/DestroyMissionObjective.idl(69):  		Logger.setLoggingName("DestroyMissionObjective");
	Logger::setLoggingName("DestroyMissionObjective");
}

void DestroyMissionObjectiveImplementation::finalize() {
	// server/zone/objects/mission/DestroyMissionObjective.idl(73):  		Logger.info("deleting from memory", true);
	Logger::info("deleting from memory", true);
}

void DestroyMissionObjectiveImplementation::initializeTransientMembers() {
	// server/zone/objects/mission/DestroyMissionObjective.idl(77):  		super.initializeTransientMembers();
	MissionObjectiveImplementation::initializeTransientMembers();
	// server/zone/objects/mission/DestroyMissionObjective.idl(79):  		Logger.setLoggingName("MissionObject");
	Logger::setLoggingName("MissionObject");
	// server/zone/objects/mission/DestroyMissionObjective.idl(81):  		activate();
	activate();
}

/*
 *	DestroyMissionObjectiveAdapter
 */

DestroyMissionObjectiveAdapter::DestroyMissionObjectiveAdapter(DestroyMissionObjectiveImplementation* obj) : MissionObjectiveAdapter(obj) {
}

Packet* DestroyMissionObjectiveAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		finalize();
		break;
	case 7:
		initializeTransientMembers();
		break;
	case 8:
		activate();
		break;
	case 9:
		abort();
		break;
	case 10:
		complete();
		break;
	case 11:
		spawnLair();
		break;
	case 12:
		destroyObjectFromDatabase();
		break;
	case 13:
		resp->insertSignedInt(notifyObserverEvent((MissionObserver*) inv->getObjectParameter(), inv->getUnsignedIntParameter(), (Observable*) inv->getObjectParameter(), (ManagedObject*) inv->getObjectParameter(), inv->getSignedLongParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

void DestroyMissionObjectiveAdapter::finalize() {
	((DestroyMissionObjectiveImplementation*) impl)->finalize();
}

void DestroyMissionObjectiveAdapter::initializeTransientMembers() {
	((DestroyMissionObjectiveImplementation*) impl)->initializeTransientMembers();
}

void DestroyMissionObjectiveAdapter::activate() {
	((DestroyMissionObjectiveImplementation*) impl)->activate();
}

void DestroyMissionObjectiveAdapter::abort() {
	((DestroyMissionObjectiveImplementation*) impl)->abort();
}

void DestroyMissionObjectiveAdapter::complete() {
	((DestroyMissionObjectiveImplementation*) impl)->complete();
}

void DestroyMissionObjectiveAdapter::spawnLair() {
	((DestroyMissionObjectiveImplementation*) impl)->spawnLair();
}

void DestroyMissionObjectiveAdapter::destroyObjectFromDatabase() {
	((DestroyMissionObjectiveImplementation*) impl)->destroyObjectFromDatabase();
}

int DestroyMissionObjectiveAdapter::notifyObserverEvent(MissionObserver* observer, unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	return ((DestroyMissionObjectiveImplementation*) impl)->notifyObserverEvent(observer, eventType, observable, arg1, arg2);
}

/*
 *	DestroyMissionObjectiveHelper
 */

DestroyMissionObjectiveHelper* DestroyMissionObjectiveHelper::staticInitializer = DestroyMissionObjectiveHelper::instance();

DestroyMissionObjectiveHelper::DestroyMissionObjectiveHelper() {
	className = "DestroyMissionObjective";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void DestroyMissionObjectiveHelper::finalizeHelper() {
	DestroyMissionObjectiveHelper::finalize();
}

DistributedObject* DestroyMissionObjectiveHelper::instantiateObject() {
	return new DestroyMissionObjective(DummyConstructorParameter::instance());
}

DistributedObjectServant* DestroyMissionObjectiveHelper::instantiateServant() {
	return new DestroyMissionObjectiveImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* DestroyMissionObjectiveHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new DestroyMissionObjectiveAdapter((DestroyMissionObjectiveImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

