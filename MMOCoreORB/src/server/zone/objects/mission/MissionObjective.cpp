/*
 *	server/zone/objects/mission/MissionObjective.cpp generated by engine3 IDL compiler 0.55
 */

#include "MissionObjective.h"

#include "MissionObjectiveImplementation.h"

#include "../../managers/mission/MissionManagerImplementation.h"

#include "../scene/SceneObject.h"

#include "../tangible/TangibleObject.h"

#include "../player/Player.h"

#include "../creature/Creature.h"

#include "MissionObject.h"

/*
 *	MissionObjectiveStub
 */

MissionObjective::MissionObjective(String& serialized) {
	_impl = new MissionObjectiveImplementation(serialized);
	_impl->_setStub(this);
}

MissionObjective::MissionObjective(DummyConstructorParameter* param) {
	_impl = NULL;
}

MissionObjective::~MissionObjective() {
}

void MissionObjective::init() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((MissionObjectiveImplementation*) _impl)->init();
}

void MissionObjective::setObjectiveType(int ot) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addSignedIntParameter(ot);

		method.executeWithVoidReturn();
	} else
		((MissionObjectiveImplementation*) _impl)->setObjectiveType(ot);
}

int MissionObjective::getObjectiveType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		return method.executeWithSignedIntReturn();
	} else
		return ((MissionObjectiveImplementation*) _impl)->getObjectiveType();
}

bool MissionObjective::hasFailed() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return method.executeWithBooleanReturn();
	} else
		return ((MissionObjectiveImplementation*) _impl)->hasFailed();
}

bool MissionObjective::hasCompleted() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		return method.executeWithBooleanReturn();
	} else
		return ((MissionObjectiveImplementation*) _impl)->hasCompleted();
}

void MissionObjective::setTargetCrc(int oc) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addSignedIntParameter(oc);

		method.executeWithVoidReturn();
	} else
		((MissionObjectiveImplementation*) _impl)->setTargetCrc(oc);
}

unsigned int MissionObjective::getTargetCrc() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((MissionObjectiveImplementation*) _impl)->getTargetCrc();
}

void MissionObjective::setIsFailure(bool isf) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addBooleanParameter(isf);

		method.executeWithVoidReturn();
	} else
		((MissionObjectiveImplementation*) _impl)->setIsFailure(isf);
}

void MissionObjective::incrementVar(int increment) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addSignedIntParameter(increment);

		method.executeWithVoidReturn();
	} else
		((MissionObjectiveImplementation*) _impl)->incrementVar(increment);
}

int MissionObjective::getVar() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		return method.executeWithSignedIntReturn();
	} else
		return ((MissionObjectiveImplementation*) _impl)->getVar();
}

void MissionObjective::setLimit(int lm) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addSignedIntParameter(lm);

		method.executeWithVoidReturn();
	} else
		((MissionObjectiveImplementation*) _impl)->setLimit(lm);
}

int MissionObjective::getLimit() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);

		return method.executeWithSignedIntReturn();
	} else
		return ((MissionObjectiveImplementation*) _impl)->getLimit();
}

void MissionObjective::setStrVar(const String& str) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addAsciiParameter(str);

		method.executeWithVoidReturn();
	} else
		((MissionObjectiveImplementation*) _impl)->setStrVar(str);
}

String& MissionObjective::getStrVar() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);

		method.executeWithAsciiReturn(_return_getStrVar);
		return _return_getStrVar;
	} else
		return ((MissionObjectiveImplementation*) _impl)->getStrVar();
}

void MissionObjective::checkObjectiveStatus() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);

		method.executeWithVoidReturn();
	} else
		((MissionObjectiveImplementation*) _impl)->checkObjectiveStatus();
}

String& MissionObjective::serializeObjective() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);

		method.executeWithAsciiReturn(_return_serializeObjective);
		return _return_serializeObjective;
	} else
		return ((MissionObjectiveImplementation*) _impl)->serializeObjective();
}

bool MissionObjective::deserializeObjective(String& localTemp, bool setThis) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);
		method.addAsciiParameter(localTemp);
		method.addBooleanParameter(setThis);

		return method.executeWithBooleanReturn();
	} else
		return ((MissionObjectiveImplementation*) _impl)->deserializeObjective(localTemp, setThis);
}

/*
 *	MissionObjectiveAdapter
 */

MissionObjectiveAdapter::MissionObjectiveAdapter(MissionObjectiveImplementation* obj) : DistributedObjectAdapter((DistributedObjectServant*) obj) {
}

Packet* MissionObjectiveAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		init();
		break;
	case 7:
		setObjectiveType(inv->getSignedIntParameter());
		break;
	case 8:
		resp->insertSignedInt(getObjectiveType());
		break;
	case 9:
		resp->insertBoolean(hasFailed());
		break;
	case 10:
		resp->insertBoolean(hasCompleted());
		break;
	case 11:
		setTargetCrc(inv->getSignedIntParameter());
		break;
	case 12:
		resp->insertInt(getTargetCrc());
		break;
	case 13:
		setIsFailure(inv->getBooleanParameter());
		break;
	case 14:
		incrementVar(inv->getSignedIntParameter());
		break;
	case 15:
		resp->insertSignedInt(getVar());
		break;
	case 16:
		setLimit(inv->getSignedIntParameter());
		break;
	case 17:
		resp->insertSignedInt(getLimit());
		break;
	case 18:
		setStrVar(inv->getAsciiParameter(_param0_setStrVar__String_));
		break;
	case 19:
		resp->insertAscii(getStrVar());
		break;
	case 20:
		checkObjectiveStatus();
		break;
	case 21:
		resp->insertAscii(serializeObjective());
		break;
	case 22:
		resp->insertBoolean(deserializeObjective(inv->getAsciiParameter(_param0_deserializeObjective__String_bool_), inv->getBooleanParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

void MissionObjectiveAdapter::init() {
	return ((MissionObjectiveImplementation*) impl)->init();
}

void MissionObjectiveAdapter::setObjectiveType(int ot) {
	return ((MissionObjectiveImplementation*) impl)->setObjectiveType(ot);
}

int MissionObjectiveAdapter::getObjectiveType() {
	return ((MissionObjectiveImplementation*) impl)->getObjectiveType();
}

bool MissionObjectiveAdapter::hasFailed() {
	return ((MissionObjectiveImplementation*) impl)->hasFailed();
}

bool MissionObjectiveAdapter::hasCompleted() {
	return ((MissionObjectiveImplementation*) impl)->hasCompleted();
}

void MissionObjectiveAdapter::setTargetCrc(int oc) {
	return ((MissionObjectiveImplementation*) impl)->setTargetCrc(oc);
}

unsigned int MissionObjectiveAdapter::getTargetCrc() {
	return ((MissionObjectiveImplementation*) impl)->getTargetCrc();
}

void MissionObjectiveAdapter::setIsFailure(bool isf) {
	return ((MissionObjectiveImplementation*) impl)->setIsFailure(isf);
}

void MissionObjectiveAdapter::incrementVar(int increment) {
	return ((MissionObjectiveImplementation*) impl)->incrementVar(increment);
}

int MissionObjectiveAdapter::getVar() {
	return ((MissionObjectiveImplementation*) impl)->getVar();
}

void MissionObjectiveAdapter::setLimit(int lm) {
	return ((MissionObjectiveImplementation*) impl)->setLimit(lm);
}

int MissionObjectiveAdapter::getLimit() {
	return ((MissionObjectiveImplementation*) impl)->getLimit();
}

void MissionObjectiveAdapter::setStrVar(const String& str) {
	return ((MissionObjectiveImplementation*) impl)->setStrVar(str);
}

String& MissionObjectiveAdapter::getStrVar() {
	return ((MissionObjectiveImplementation*) impl)->getStrVar();
}

void MissionObjectiveAdapter::checkObjectiveStatus() {
	return ((MissionObjectiveImplementation*) impl)->checkObjectiveStatus();
}

String& MissionObjectiveAdapter::serializeObjective() {
	return ((MissionObjectiveImplementation*) impl)->serializeObjective();
}

bool MissionObjectiveAdapter::deserializeObjective(String& localTemp, bool setThis) {
	return ((MissionObjectiveImplementation*) impl)->deserializeObjective(localTemp, setThis);
}

/*
 *	MissionObjectiveHelper
 */

MissionObjectiveHelper* MissionObjectiveHelper::staticInitializer = MissionObjectiveHelper::instance();

MissionObjectiveHelper::MissionObjectiveHelper() {
	className = "MissionObjective";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void MissionObjectiveHelper::finalizeHelper() {
	MissionObjectiveHelper::finalize();
}

DistributedObject* MissionObjectiveHelper::instantiateObject() {
	return new MissionObjective(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* MissionObjectiveHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new MissionObjectiveAdapter((MissionObjectiveImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	MissionObjectiveServant
 */

MissionObjectiveServant::MissionObjectiveServant() {
	_classHelper = MissionObjectiveHelper::instance();
}

MissionObjectiveServant::~MissionObjectiveServant() {
}

void MissionObjectiveServant::_setStub(DistributedObjectStub* stub) {
	_this = (MissionObjective*) stub;
}

DistributedObjectStub* MissionObjectiveServant::_getStub() {
	return _this;
}

