/*
Copyright (C) 2007 <SWGEmu>
 
This File is part of Core3.
 
This program is free software; you can redistribute 
it and/or modify it under the terms of the GNU Lesser 
General Public License as published by the Free Software
Foundation; either version 2 of the License, 
or (at your option) any later version.
 
This program is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
See the GNU Lesser General Public License for
more details.
 
You should have received a copy of the GNU Lesser General 
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 
Linking Engine3 statically or dynamically with other modules 
is making a combined work based on Engine3. 
Thus, the terms and conditions of the GNU Lesser General Public License 
cover the whole combination.
 
In addition, as a special exception, the copyright holders of Engine3 
give you permission to combine Engine3 program with free software 
programs or libraries that are released under the GNU LGPL and with 
code included in the standard release of Core3 under the GNU LGPL 
license (or modified versions of such code, with unchanged license). 
You may copy and distribute such a system following the terms of the 
GNU LGPL for Engine3 and the licenses of the other code concerned, 
provided that you include the source code of that other code when 
and as the GNU LGPL requires distribution of source code.
 
Note that people who make modified versions of Engine3 are not obligated 
to grant this special exception for their modified versions; 
it is their choice whether to do so. The GNU Lesser General Public License 
gives permission to release a modified version without this exception; 
this exception also makes it possible to release a modified version 
which carries forward this exception.
*/

package server.zone.objects.mission;

import engine.util.Observer;
import engine.util.Observable;
import engine.core.Task;
import server.zone.objects.mission.MissionObject;
import server.zone.objects.mission.MissionObjective;
import server.zone.objects.mission.MissionObserver;
import server.zone.objects.scene.SceneObject;
import server.zone.objects.creature.AiAgent;
include server.zone.templates.TemplateReference;
import server.zone.templates.SharedObjectTemplate;
import server.zone.objects.mission.bountyhunter.BountyHunterDroid;
import server.zone.objects.mission.bountyhunter.events.BountyHunterTargetTask;
include server.zone.objects.mission.bountyhunter.events.FindTargetTaskList;
import system.thread.Mutex;

class BountyMissionObjective extends MissionObjective {
	@dereferenced
	protected TemplateReference<SharedObjectTemplate> npcTemplateToSpawn;
	
	protected AiAgent npcTarget;
	
	protected int objectiveStatus;
	
	protected SceneObject activeDroid;
	
	protected BountyHunterDroid droid;
	
	@dereferenced
	protected FindTargetTaskList droidTasks;
	
	protected BountyHunterTargetTask targetTask;
	
	@dereferenced
	protected transient Mutex syncMutex;
	
	public static final int INITSTATUS = 0;
	public static final int HASBIOSIGNATURESTATUS = 1;
	public static final int HASTALKED = 2;
	public static final int TARGETELIMINATEDSTATUS = 3;
	
	public BountyMissionObjective(MissionObject mission) {
		super(mission);
		
		objectiveStatus = INITSTATUS;
		
		activeDroid = null;
		droid = null;
		
		Logger.setLoggingName("BountyMissionObjective");
	}
	
	public native void finalize() {
		cancelAllTasks();
	}
	
	public void initializeTransientMembers() {
		super.initializeTransientMembers();
		
		Logger.setLoggingName("BountyMissionObjective");
	}
	
	public native void activate();
	public native void deactivate();
	public native void abort();
	public native void complete();
	
	public native void spawnTarget(final string zoneName);
	
	public native int notifyObserverEvent(MissionObserver observer, unsigned int eventType, Observable observable, ManagedObject arg1, long arg2);
	
	@local
	public native void setNpcTemplateToSpawn(SharedObjectTemplate sp);
	
	public native void updateMissionStatus(int informantLevel);
	
	public int getObjectiveStatus() {
		return objectiveStatus;
	}
	
	public SceneObject getArakydDroid() {
		return activeDroid;
	}
	
	public void setArakydDroid(SceneObject droid) {
		activeDroid = droid;
	}
	
	public native void performDroidAction(int action, SceneObject sceneObject, CreatureObject player);

	public native boolean hasArakydFindTask();

	public native boolean playerHasMissionOfCorrectLevel(int action);
	
	public native void updateWaypoint();
	
	@dereferenced
	@local
	public native Vector3 getTargetPosition();
	
	public native void cancelAllTasks();
	
	public native string getTargetZoneName();
	
	private native void addToBountyLock();
	private native void removeFromBountyLock(boolean immediately);

	private native void removePlayerTargetObservers();
	private native void removeNpcTargetObservers();
	private native void removeObserver(int observerNumber, unsigned int observerType, CreatureObject creature);
	private native void addObserverToCreature(unsigned int observerType, CreatureObject creature);
	
	private native boolean addPlayerTargetObservers();
	private native void startNpcTargetTask();
	
	private native boolean isPlayerTarget();
	
	private native void handleNpcTargetKilled(ManagedObject arg1);
	private native int handleNpcTargetReceivesDamage(ManagedObject arg1);
	private native void handlePlayerKilled(ManagedObject arg1);
	private native void handleDefenderAdded(ManagedObject arg1);
	private native void handleDefenderDropped(ManagedObject arg1);
	
	@dereferenced
	@local
	public Vector3 getEndPosition() {
		return getTargetPosition();
	}
}
