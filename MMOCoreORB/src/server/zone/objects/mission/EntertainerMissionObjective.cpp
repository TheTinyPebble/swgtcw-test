/*
 *	server/zone/objects/mission/EntertainerMissionObjective.cpp generated by engine3 IDL compiler 0.60
 */

#include "EntertainerMissionObjective.h"

#include "server/zone/objects/scene/Observer.h"

#include "server/zone/objects/scene/Observable.h"

#include "server/zone/objects/mission/MissionObject.h"

#include "server/zone/objects/mission/MissionObserver.h"

#include "server/zone/objects/area/MissionSpawnActiveArea.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/templates/SharedObjectTemplate.h"

/*
 *	EntertainerMissionObjectiveStub
 */

EntertainerMissionObjective::EntertainerMissionObjective(MissionObject* mission) : MissionObjective(DummyConstructorParameter::instance()) {
	EntertainerMissionObjectiveImplementation* _implementation = new EntertainerMissionObjectiveImplementation(mission);
	_impl = _implementation;
	_impl->_setStub(this);
}

EntertainerMissionObjective::EntertainerMissionObjective(DummyConstructorParameter* param) : MissionObjective(param) {
}

EntertainerMissionObjective::~EntertainerMissionObjective() {
}


void EntertainerMissionObjective::initializeTransientMembers() {
	EntertainerMissionObjectiveImplementation* _implementation = (EntertainerMissionObjectiveImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void EntertainerMissionObjective::activate() {
	EntertainerMissionObjectiveImplementation* _implementation = (EntertainerMissionObjectiveImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		_implementation->activate();
}

void EntertainerMissionObjective::abort() {
	EntertainerMissionObjectiveImplementation* _implementation = (EntertainerMissionObjectiveImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		method.executeWithVoidReturn();
	} else
		_implementation->abort();
}

void EntertainerMissionObjective::complete() {
	EntertainerMissionObjectiveImplementation* _implementation = (EntertainerMissionObjectiveImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		method.executeWithVoidReturn();
	} else
		_implementation->complete();
}

int EntertainerMissionObjective::notifyObserverEvent(MissionObserver* observer, unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	EntertainerMissionObjectiveImplementation* _implementation = (EntertainerMissionObjectiveImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(observer);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(observable);
		method.addObjectParameter(arg1);
		method.addSignedLongParameter(arg2);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyObserverEvent(observer, eventType, observable, arg1, arg2);
}

DistributedObjectServant* EntertainerMissionObjective::_getImplementation() {
	return _impl;}

void EntertainerMissionObjective::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;}

/*
 *	EntertainerMissionObjectiveImplementation
 */

EntertainerMissionObjectiveImplementation::EntertainerMissionObjectiveImplementation(DummyConstructorParameter* param) : MissionObjectiveImplementation(param) {
	_initializeImplementation();
}


EntertainerMissionObjectiveImplementation::~EntertainerMissionObjectiveImplementation() {
	EntertainerMissionObjectiveImplementation::finalize();
}


void EntertainerMissionObjectiveImplementation::_initializeImplementation() {
	_setClassHelper(EntertainerMissionObjectiveHelper::instance());

	_serializationHelperMethod();
}

void EntertainerMissionObjectiveImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (EntertainerMissionObjective*) stub;
	MissionObjectiveImplementation::_setStub(stub);
}

DistributedObjectStub* EntertainerMissionObjectiveImplementation::_getStub() {
	return _this;
}

EntertainerMissionObjectiveImplementation::operator const EntertainerMissionObjective*() {
	return _this;
}

void EntertainerMissionObjectiveImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void EntertainerMissionObjectiveImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void EntertainerMissionObjectiveImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void EntertainerMissionObjectiveImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void EntertainerMissionObjectiveImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void EntertainerMissionObjectiveImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void EntertainerMissionObjectiveImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void EntertainerMissionObjectiveImplementation::_serializationHelperMethod() {
	MissionObjectiveImplementation::_serializationHelperMethod();

	_setClassName("EntertainerMissionObjective");

}

EntertainerMissionObjectiveImplementation::EntertainerMissionObjectiveImplementation(MissionObject* mission) : MissionObjectiveImplementation(mission) {
	_initializeImplementation();
	// server/zone/objects/mission/EntertainerMissionObjective.idl(61):  		Logger.setLoggingName("EntertainerMissionObjective");
	Logger::setLoggingName("EntertainerMissionObjective");
}

void EntertainerMissionObjectiveImplementation::finalize() {
	// server/zone/objects/mission/EntertainerMissionObjective.idl(65):  		Logger.info("deleting from memory", true);
	Logger::info("deleting from memory", true);
}

void EntertainerMissionObjectiveImplementation::initializeTransientMembers() {
	// server/zone/objects/mission/EntertainerMissionObjective.idl(69):  		super.initializeTransientMembers();
	MissionObjectiveImplementation::initializeTransientMembers();
	// server/zone/objects/mission/EntertainerMissionObjective.idl(71):  		Logger.setLoggingName("MissionObject");
	Logger::setLoggingName("MissionObject");
	// server/zone/objects/mission/EntertainerMissionObjective.idl(73):  		activate();
	activate();
}

/*
 *	EntertainerMissionObjectiveAdapter
 */

EntertainerMissionObjectiveAdapter::EntertainerMissionObjectiveAdapter(EntertainerMissionObjectiveImplementation* obj) : MissionObjectiveAdapter(obj) {
}

Packet* EntertainerMissionObjectiveAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		finalize();
		break;
	case 7:
		initializeTransientMembers();
		break;
	case 8:
		activate();
		break;
	case 9:
		abort();
		break;
	case 10:
		complete();
		break;
	case 11:
		resp->insertSignedInt(notifyObserverEvent((MissionObserver*) inv->getObjectParameter(), inv->getUnsignedIntParameter(), (Observable*) inv->getObjectParameter(), (ManagedObject*) inv->getObjectParameter(), inv->getSignedLongParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

void EntertainerMissionObjectiveAdapter::finalize() {
	((EntertainerMissionObjectiveImplementation*) impl)->finalize();
}

void EntertainerMissionObjectiveAdapter::initializeTransientMembers() {
	((EntertainerMissionObjectiveImplementation*) impl)->initializeTransientMembers();
}

void EntertainerMissionObjectiveAdapter::activate() {
	((EntertainerMissionObjectiveImplementation*) impl)->activate();
}

void EntertainerMissionObjectiveAdapter::abort() {
	((EntertainerMissionObjectiveImplementation*) impl)->abort();
}

void EntertainerMissionObjectiveAdapter::complete() {
	((EntertainerMissionObjectiveImplementation*) impl)->complete();
}

int EntertainerMissionObjectiveAdapter::notifyObserverEvent(MissionObserver* observer, unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	return ((EntertainerMissionObjectiveImplementation*) impl)->notifyObserverEvent(observer, eventType, observable, arg1, arg2);
}

/*
 *	EntertainerMissionObjectiveHelper
 */

EntertainerMissionObjectiveHelper* EntertainerMissionObjectiveHelper::staticInitializer = EntertainerMissionObjectiveHelper::instance();

EntertainerMissionObjectiveHelper::EntertainerMissionObjectiveHelper() {
	className = "EntertainerMissionObjective";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void EntertainerMissionObjectiveHelper::finalizeHelper() {
	EntertainerMissionObjectiveHelper::finalize();
}

DistributedObject* EntertainerMissionObjectiveHelper::instantiateObject() {
	return new EntertainerMissionObjective(DummyConstructorParameter::instance());
}

DistributedObjectServant* EntertainerMissionObjectiveHelper::instantiateServant() {
	return new EntertainerMissionObjectiveImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* EntertainerMissionObjectiveHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new EntertainerMissionObjectiveAdapter((EntertainerMissionObjectiveImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

