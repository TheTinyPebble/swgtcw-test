/*
 *	server/zone/objects/resource/ResourceSpawn.cpp generated by engine3 IDL compiler 0.60
 */

#include "ResourceSpawn.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/player/sui/listbox/SuiListBox.h"

#include "server/zone/objects/area/ActiveArea.h"

#include "server/zone/objects/resource/ResourceContainer.h"

/*
 *	ResourceSpawnStub
 */

enum {RPC_FINALIZE__ = 6,RPC_INITIALIZETRANSIENTMEMBERS__,RPC_DECREASECONTAINERREFERENCECOUNT__,RPC_SETNAME__STRING_,RPC_SETTYPE__STRING_,RPC_SETSPAWNPOOL__INT_,RPC_SETZONERESTRICTION__STRING_,RPC_ADDCLASS__STRING_,RPC_ADDSTFCLASS__STRING_,RPC_ADDATTRIBUTE__STRING_INT_,RPC_ISTYPE__STRING_,RPC_SETSURVEYTOOLTYPE__INT_,RPC_SETISENERGY__BOOL_,RPC_GETNAME__,RPC_GETTYPE__,RPC_GETCLASS__INT_,RPC_GETFINALCLASS__,RPC_GETFAMILYNAME__,RPC_SETSPAWNED__LONG_,RPC_SETDESPAWNED__LONG_,RPC_GETDESPAWNED__,RPC_SETCONTAINERCRC__INT_,RPC_GETCONTAINERCRC__,RPC_GETSPAWNPOOL__,RPC_ISENERGY__,RPC_GETZONERESTRICTION__,RPC_GETSURVEYTOOLTYPE__,RPC_GETSPAWNMAPSIZE__,RPC_EXTRACTRESOURCE__STRING_INT_,RPC_CREATERESOURCE__INT_,RPC_GETPLANETCRC__,RPC_GETATTRIBUTEVALUE__INT_,RPC_GETVALUEOF__INT_,RPC_ADDSTATSTODEEDLISTBOX__SUILISTBOX_,};

ResourceSpawn::ResourceSpawn() : SceneObject(DummyConstructorParameter::instance()) {
	ResourceSpawnImplementation* _implementation = new ResourceSpawnImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

ResourceSpawn::ResourceSpawn(DummyConstructorParameter* param) : SceneObject(param) {
}

ResourceSpawn::~ResourceSpawn() {
}


void ResourceSpawn::initializeTransientMembers() {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void ResourceSpawn::fillAttributeList(AttributeListMessage* msg, PlayerCreature* object) {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->fillAttributeList(msg, object);
}

void ResourceSpawn::decreaseContainerReferenceCount() {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DECREASECONTAINERREFERENCECOUNT__);

		method.executeWithVoidReturn();
	} else
		_implementation->decreaseContainerReferenceCount();
}

void ResourceSpawn::setName(const String& name) {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETNAME__STRING_);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		_implementation->setName(name);
}

void ResourceSpawn::setType(const String& type) {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETTYPE__STRING_);
		method.addAsciiParameter(type);

		method.executeWithVoidReturn();
	} else
		_implementation->setType(type);
}

void ResourceSpawn::setSpawnPool(int pool) {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSPAWNPOOL__INT_);
		method.addSignedIntParameter(pool);

		method.executeWithVoidReturn();
	} else
		_implementation->setSpawnPool(pool);
}

void ResourceSpawn::setZoneRestriction(const String& zoneName) {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETZONERESTRICTION__STRING_);
		method.addAsciiParameter(zoneName);

		method.executeWithVoidReturn();
	} else
		_implementation->setZoneRestriction(zoneName);
}

void ResourceSpawn::addClass(const String& newclass) {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDCLASS__STRING_);
		method.addAsciiParameter(newclass);

		method.executeWithVoidReturn();
	} else
		_implementation->addClass(newclass);
}

void ResourceSpawn::addStfClass(const String& newclass) {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDSTFCLASS__STRING_);
		method.addAsciiParameter(newclass);

		method.executeWithVoidReturn();
	} else
		_implementation->addStfClass(newclass);
}

void ResourceSpawn::addAttribute(const String& attribute, int value) {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDATTRIBUTE__STRING_INT_);
		method.addAsciiParameter(attribute);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->addAttribute(attribute, value);
}

bool ResourceSpawn::isType(const String& type) {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISTYPE__STRING_);
		method.addAsciiParameter(type);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isType(type);
}

void ResourceSpawn::setSurveyToolType(int type) {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSURVEYTOOLTYPE__INT_);
		method.addSignedIntParameter(type);

		method.executeWithVoidReturn();
	} else
		_implementation->setSurveyToolType(type);
}

void ResourceSpawn::setIsEnergy(bool val) {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETISENERGY__BOOL_);
		method.addBooleanParameter(val);

		method.executeWithVoidReturn();
	} else
		_implementation->setIsEnergy(val);
}

String ResourceSpawn::getName() {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETNAME__);

		method.executeWithAsciiReturn(_return_getName);
		return _return_getName;
	} else
		return _implementation->getName();
}

String ResourceSpawn::getType() {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTYPE__);

		method.executeWithAsciiReturn(_return_getType);
		return _return_getType;
	} else
		return _implementation->getType();
}

String ResourceSpawn::getClass(int index) {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCLASS__INT_);
		method.addSignedIntParameter(index);

		method.executeWithAsciiReturn(_return_getClass);
		return _return_getClass;
	} else
		return _implementation->getClass(index);
}

String ResourceSpawn::getFinalClass() {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFINALCLASS__);

		method.executeWithAsciiReturn(_return_getFinalClass);
		return _return_getFinalClass;
	} else
		return _implementation->getFinalClass();
}

String ResourceSpawn::getFamilyName() {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFAMILYNAME__);

		method.executeWithAsciiReturn(_return_getFamilyName);
		return _return_getFamilyName;
	} else
		return _implementation->getFamilyName();
}

void ResourceSpawn::setSpawned(unsigned long long t) {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSPAWNED__LONG_);
		method.addUnsignedLongParameter(t);

		method.executeWithVoidReturn();
	} else
		_implementation->setSpawned(t);
}

void ResourceSpawn::setDespawned(unsigned long long t) {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETDESPAWNED__LONG_);
		method.addUnsignedLongParameter(t);

		method.executeWithVoidReturn();
	} else
		_implementation->setDespawned(t);
}

unsigned long long ResourceSpawn::getDespawned() {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDESPAWNED__);

		return method.executeWithUnsignedLongReturn();
	} else
		return _implementation->getDespawned();
}

void ResourceSpawn::setContainerCRC(unsigned int crc) {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCONTAINERCRC__INT_);
		method.addUnsignedIntParameter(crc);

		method.executeWithVoidReturn();
	} else
		_implementation->setContainerCRC(crc);
}

unsigned int ResourceSpawn::getContainerCRC() {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCONTAINERCRC__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getContainerCRC();
}

int ResourceSpawn::getSpawnPool() {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSPAWNPOOL__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getSpawnPool();
}

bool ResourceSpawn::isEnergy() {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISENERGY__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isEnergy();
}

String ResourceSpawn::getZoneRestriction() {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETZONERESTRICTION__);

		method.executeWithAsciiReturn(_return_getZoneRestriction);
		return _return_getZoneRestriction;
	} else
		return _implementation->getZoneRestriction();
}

int ResourceSpawn::getSurveyToolType() {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSURVEYTOOLTYPE__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getSurveyToolType();
}

int ResourceSpawn::getSpawnMapSize() {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSPAWNMAPSIZE__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getSpawnMapSize();
}

void ResourceSpawn::extractResource(const String& zoneName, int units) {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_EXTRACTRESOURCE__STRING_INT_);
		method.addAsciiParameter(zoneName);
		method.addSignedIntParameter(units);

		method.executeWithVoidReturn();
	} else
		_implementation->extractResource(zoneName, units);
}

ResourceContainer* ResourceSpawn::createResource(int units) {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATERESOURCE__INT_);
		method.addSignedIntParameter(units);

		return (ResourceContainer*) method.executeWithObjectReturn();
	} else
		return _implementation->createResource(units);
}

String ResourceSpawn::getSpawnMapZone(int i) {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getSpawnMapZone(i);
}

bool ResourceSpawn::isUnknownType() {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->isUnknownType();
}

void ResourceSpawn::createSpawnMaps(bool jtl, int minpool, int maxpool, const String& zonerestriction, Vector<String>& activeZones) {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->createSpawnMaps(jtl, minpool, maxpool, zonerestriction, activeZones);
}

unsigned int ResourceSpawn::getPlanetCRC() {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPLANETCRC__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getPlanetCRC();
}

float ResourceSpawn::getDensityAt(const String& zoneName, float x, float y) {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getDensityAt(zoneName, x, y);
}

bool ResourceSpawn::inShift() {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->inShift();
}

int ResourceSpawn::getAttributeAndValue(String& attribute, int index) {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getAttributeAndValue(attribute, index);
}

int ResourceSpawn::getAttributeValue(int index) {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETATTRIBUTEVALUE__INT_);
		method.addSignedIntParameter(index);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getAttributeValue(index);
}

int ResourceSpawn::getValueOf(int index) {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETVALUEOF__INT_);
		method.addSignedIntParameter(index);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getValueOf(index);
}

void ResourceSpawn::addStatsToDeedListBox(SuiListBox* suil) {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDSTATSTODEEDLISTBOX__SUILISTBOX_);
		method.addObjectParameter(suil);

		method.executeWithVoidReturn();
	} else
		_implementation->addStatsToDeedListBox(suil);
}

void ResourceSpawn::print() {
	ResourceSpawnImplementation* _implementation = (ResourceSpawnImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->print();
}

DistributedObjectServant* ResourceSpawn::_getImplementation() {

	_updated = true;
	return _impl;
}

void ResourceSpawn::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	ResourceSpawnImplementation
 */

ResourceSpawnImplementation::ResourceSpawnImplementation(DummyConstructorParameter* param) : SceneObjectImplementation(param) {
	_initializeImplementation();
}


ResourceSpawnImplementation::~ResourceSpawnImplementation() {
	ResourceSpawnImplementation::finalize();
}


void ResourceSpawnImplementation::_initializeImplementation() {
	_setClassHelper(ResourceSpawnHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void ResourceSpawnImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (ResourceSpawn*) stub;
	SceneObjectImplementation::_setStub(stub);
}

DistributedObjectStub* ResourceSpawnImplementation::_getStub() {
	return _this;
}

ResourceSpawnImplementation::operator const ResourceSpawn*() {
	return _this;
}

void ResourceSpawnImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void ResourceSpawnImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void ResourceSpawnImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void ResourceSpawnImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void ResourceSpawnImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void ResourceSpawnImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void ResourceSpawnImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void ResourceSpawnImplementation::_serializationHelperMethod() {
	SceneObjectImplementation::_serializationHelperMethod();

	_setClassName("ResourceSpawn");

}

void ResourceSpawnImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(ResourceSpawnImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ResourceSpawnImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (SceneObjectImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "spawnType") {
		TypeInfo<String >::parseFromBinaryStream(&spawnType, stream);
		return true;
	}

	if (_name == "spawnName") {
		TypeInfo<String >::parseFromBinaryStream(&spawnName, stream);
		return true;
	}

	if (_name == "spawnClasses") {
		TypeInfo<Vector<String> >::parseFromBinaryStream(&spawnClasses, stream);
		return true;
	}

	if (_name == "stfSpawnClasses") {
		TypeInfo<Vector<String> >::parseFromBinaryStream(&stfSpawnClasses, stream);
		return true;
	}

	if (_name == "spawnAttributes") {
		TypeInfo<VectorMap<String, int> >::parseFromBinaryStream(&spawnAttributes, stream);
		return true;
	}

	if (_name == "spawnPool") {
		TypeInfo<int >::parseFromBinaryStream(&spawnPool, stream);
		return true;
	}

	if (_name == "zoneRestriction") {
		TypeInfo<String >::parseFromBinaryStream(&zoneRestriction, stream);
		return true;
	}

	if (_name == "surveyToolType") {
		TypeInfo<int >::parseFromBinaryStream(&surveyToolType, stream);
		return true;
	}

	if (_name == "containerCRC") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&containerCRC, stream);
		return true;
	}

	if (_name == "spawned") {
		TypeInfo<unsigned long long >::parseFromBinaryStream(&spawned, stream);
		return true;
	}

	if (_name == "despawned") {
		TypeInfo<unsigned long long >::parseFromBinaryStream(&despawned, stream);
		return true;
	}

	if (_name == "spawnMaps") {
		TypeInfo<SpawnMap >::parseFromBinaryStream(&spawnMaps, stream);
		return true;
	}

	if (_name == "maxUnitsSpawned") {
		TypeInfo<unsigned long long >::parseFromBinaryStream(&maxUnitsSpawned, stream);
		return true;
	}

	if (_name == "unitsInCirculation") {
		TypeInfo<unsigned long long >::parseFromBinaryStream(&unitsInCirculation, stream);
		return true;
	}

	if (_name == "containerReferenceCount") {
		TypeInfo<int >::parseFromBinaryStream(&containerReferenceCount, stream);
		return true;
	}

	if (_name == "dbDestroyed") {
		TypeInfo<bool >::parseFromBinaryStream(&dbDestroyed, stream);
		return true;
	}

	if (_name == "energy") {
		TypeInfo<bool >::parseFromBinaryStream(&energy, stream);
		return true;
	}


	return false;
}

void ResourceSpawnImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ResourceSpawnImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ResourceSpawnImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "spawnType";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<String >::toBinaryStream(&spawnType, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "spawnName";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<String >::toBinaryStream(&spawnName, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "spawnClasses";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<Vector<String> >::toBinaryStream(&spawnClasses, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "stfSpawnClasses";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<Vector<String> >::toBinaryStream(&stfSpawnClasses, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "spawnAttributes";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<VectorMap<String, int> >::toBinaryStream(&spawnAttributes, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "spawnPool";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&spawnPool, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "zoneRestriction";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<String >::toBinaryStream(&zoneRestriction, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "surveyToolType";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&surveyToolType, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "containerCRC";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned int >::toBinaryStream(&containerCRC, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "spawned";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned long long >::toBinaryStream(&spawned, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "despawned";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned long long >::toBinaryStream(&despawned, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "spawnMaps";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<SpawnMap >::toBinaryStream(&spawnMaps, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "maxUnitsSpawned";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned long long >::toBinaryStream(&maxUnitsSpawned, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "unitsInCirculation";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned long long >::toBinaryStream(&unitsInCirculation, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "containerReferenceCount";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&containerReferenceCount, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "dbDestroyed";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<bool >::toBinaryStream(&dbDestroyed, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "energy";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<bool >::toBinaryStream(&energy, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 17 + SceneObjectImplementation::writeObjectMembers(stream);
}

ResourceSpawnImplementation::ResourceSpawnImplementation() {
	_initializeImplementation();
	// server/zone/objects/resource/ResourceSpawn.idl():   	spawnType = "";
	spawnType = "";
	// server/zone/objects/resource/ResourceSpawn.idl():   	spawnPool = 0;
	spawnPool = 0;
	// server/zone/objects/resource/ResourceSpawn.idl():   	spawnAttributes.setNoDuplicateInsertPlan();
	(&spawnAttributes)->setNoDuplicateInsertPlan();
	// server/zone/objects/resource/ResourceSpawn.idl():   	containerReferenceCount = 0;
	containerReferenceCount = 0;
	// server/zone/objects/resource/ResourceSpawn.idl():   	unitsInCirculation = 0;
	unitsInCirculation = 0;
	// server/zone/objects/resource/ResourceSpawn.idl():   	maxUnitsSpawned = 0;
	maxUnitsSpawned = 0;
	// server/zone/objects/resource/ResourceSpawn.idl():   	containerCRC = 0;
	containerCRC = 0;
	// server/zone/objects/resource/ResourceSpawn.idl():   	spawned = 0;
	spawned = 0;
	// server/zone/objects/resource/ResourceSpawn.idl():   	despawned = 0;
	despawned = 0;
	// server/zone/objects/resource/ResourceSpawn.idl():   	surveyToolType = 0;
	surveyToolType = 0;
	// server/zone/objects/resource/ResourceSpawn.idl():   	zoneRestriction = "";
	zoneRestriction = "";
	// server/zone/objects/resource/ResourceSpawn.idl():   	spawnPool = 0;
	spawnPool = 0;
	// server/zone/objects/resource/ResourceSpawn.idl():   	dbDestroyed = false;
	dbDestroyed = false;
	// server/zone/objects/resource/ResourceSpawn.idl():   	energy = false;
	energy = false;
	// server/zone/objects/resource/ResourceSpawn.idl():   	setLoggingName("ResourceSpawn");
	setLoggingName("ResourceSpawn");
}

void ResourceSpawnImplementation::finalize() {
	// server/zone/objects/resource/ResourceSpawn.idl():   	Logger.info("trying to delete ResourceSpawn: " + spawnName);
	Logger::info("trying to delete ResourceSpawn: " + spawnName);
}

void ResourceSpawnImplementation::setName(const String& name) {
	// server/zone/objects/resource/ResourceSpawn.idl():   	spawnName = name;
	spawnName = name;
}

void ResourceSpawnImplementation::setType(const String& type) {
	// server/zone/objects/resource/ResourceSpawn.idl():   	spawnType = type;
	spawnType = type;
}

void ResourceSpawnImplementation::setSpawnPool(int pool) {
	// server/zone/objects/resource/ResourceSpawn.idl():   	spawnPool = pool;
	spawnPool = pool;
	// server/zone/objects/resource/ResourceSpawn.idl():   }
	if (spawnPool == 0){
	// server/zone/objects/resource/ResourceSpawn.idl():   		spawnMaps.removeAll();
	(&spawnMaps)->removeAll();
}
}

void ResourceSpawnImplementation::setZoneRestriction(const String& zoneName) {
	// server/zone/objects/resource/ResourceSpawn.idl():   	zoneRestriction = zoneName;
	zoneRestriction = zoneName;
}

void ResourceSpawnImplementation::addClass(const String& newclass) {
	// server/zone/objects/resource/ResourceSpawn.idl():   	spawnClasses.add(newclass);
	(&spawnClasses)->add(newclass);
}

void ResourceSpawnImplementation::addStfClass(const String& newclass) {
	// server/zone/objects/resource/ResourceSpawn.idl():   	stfSpawnClasses.add(newclass);
	(&stfSpawnClasses)->add(newclass);
}

bool ResourceSpawnImplementation::isType(const String& type) {
	// server/zone/objects/resource/ResourceSpawn.idl():  		}
	for (	// server/zone/objects/resource/ResourceSpawn.idl():  		for(int i = 0;
	int i = 0;
	i < (&stfSpawnClasses)->size();
 ++i) {
	// server/zone/objects/resource/ResourceSpawn.idl():  		}
	if ((&stfSpawnClasses)->get(i) == type)	// server/zone/objects/resource/ResourceSpawn.idl():  				return true;
	return true;
}
	// server/zone/objects/resource/ResourceSpawn.idl():  		}
	for (	// server/zone/objects/resource/ResourceSpawn.idl():  		for(int i = 0;
	int i = 0;
	i < (&spawnClasses)->size();
 ++i) {
	// server/zone/objects/resource/ResourceSpawn.idl():  		}
	if ((&spawnClasses)->get(i) == type)	// server/zone/objects/resource/ResourceSpawn.idl():  				return true;
	return true;
}
	// server/zone/objects/resource/ResourceSpawn.idl():  		return false;
	return false;
}

void ResourceSpawnImplementation::setSurveyToolType(int type) {
	// server/zone/objects/resource/ResourceSpawn.idl():  		surveyToolType = type;
	surveyToolType = type;
}

void ResourceSpawnImplementation::setIsEnergy(bool val) {
	// server/zone/objects/resource/ResourceSpawn.idl():  		energy = val;
	energy = val;
}

String ResourceSpawnImplementation::getName() {
	// server/zone/objects/resource/ResourceSpawn.idl():  		return spawnName;
	return spawnName;
}

String ResourceSpawnImplementation::getType() {
	// server/zone/objects/resource/ResourceSpawn.idl():   	return spawnType;
	return spawnType;
}

String ResourceSpawnImplementation::getClass(int index) {
	// server/zone/objects/resource/ResourceSpawn.idl():   	}
	if (index < (&spawnClasses)->size()){
	// server/zone/objects/resource/ResourceSpawn.idl():   		return spawnClasses.get(index);
	return (&spawnClasses)->get(index);
}

	else {
	// server/zone/objects/resource/ResourceSpawn.idl():   		return "";
	return "";
}
}

String ResourceSpawnImplementation::getFinalClass() {
	// server/zone/objects/resource/ResourceSpawn.idl():   		return "";
	if ((&spawnClasses)->size() > 1)	// server/zone/objects/resource/ResourceSpawn.idl():   		return spawnClasses.get(spawnClasses.size() - 1);
	return (&spawnClasses)->get((&spawnClasses)->size() - 1);

	else 	// server/zone/objects/resource/ResourceSpawn.idl():   		return "";
	return "";
}

void ResourceSpawnImplementation::setSpawned(unsigned long long t) {
	// server/zone/objects/resource/ResourceSpawn.idl():   	spawned = t;
	spawned = t;
}

void ResourceSpawnImplementation::setDespawned(unsigned long long t) {
	// server/zone/objects/resource/ResourceSpawn.idl():   	despawned = t;
	despawned = t;
}

unsigned long long ResourceSpawnImplementation::getDespawned() {
	// server/zone/objects/resource/ResourceSpawn.idl():   	return despawned;
	return despawned;
}

void ResourceSpawnImplementation::setContainerCRC(unsigned int crc) {
	// server/zone/objects/resource/ResourceSpawn.idl():   	containerCRC = crc;
	containerCRC = crc;
}

unsigned int ResourceSpawnImplementation::getContainerCRC() {
	// server/zone/objects/resource/ResourceSpawn.idl():   	return containerCRC;
	return containerCRC;
}

int ResourceSpawnImplementation::getSpawnPool() {
	// server/zone/objects/resource/ResourceSpawn.idl():   	return spawnPool;
	return spawnPool;
}

bool ResourceSpawnImplementation::isEnergy() {
	// server/zone/objects/resource/ResourceSpawn.idl():   	return energy;
	return energy;
}

String ResourceSpawnImplementation::getZoneRestriction() {
	// server/zone/objects/resource/ResourceSpawn.idl():   	return zoneRestriction;
	return zoneRestriction;
}

int ResourceSpawnImplementation::getSurveyToolType() {
	// server/zone/objects/resource/ResourceSpawn.idl():   	return surveyToolType;
	return surveyToolType;
}

int ResourceSpawnImplementation::getSpawnMapSize() {
	// server/zone/objects/resource/ResourceSpawn.idl():   	return spawnMaps.size();
	return (&spawnMaps)->size();
}

int ResourceSpawnImplementation::getAttributeValue(int index) {
	// server/zone/objects/resource/ResourceSpawn.idl():   	return spawnAttributes.get(index);
	return (&spawnAttributes)->get(index);
}

/*
 *	ResourceSpawnAdapter
 */

ResourceSpawnAdapter::ResourceSpawnAdapter(ResourceSpawnImplementation* obj) : SceneObjectAdapter(obj) {
}

Packet* ResourceSpawnAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_FINALIZE__:
		finalize();
		break;
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		initializeTransientMembers();
		break;
	case RPC_DECREASECONTAINERREFERENCECOUNT__:
		decreaseContainerReferenceCount();
		break;
	case RPC_SETNAME__STRING_:
		setName(inv->getAsciiParameter(_param0_setName__String_));
		break;
	case RPC_SETTYPE__STRING_:
		setType(inv->getAsciiParameter(_param0_setType__String_));
		break;
	case RPC_SETSPAWNPOOL__INT_:
		setSpawnPool(inv->getSignedIntParameter());
		break;
	case RPC_SETZONERESTRICTION__STRING_:
		setZoneRestriction(inv->getAsciiParameter(_param0_setZoneRestriction__String_));
		break;
	case RPC_ADDCLASS__STRING_:
		addClass(inv->getAsciiParameter(_param0_addClass__String_));
		break;
	case RPC_ADDSTFCLASS__STRING_:
		addStfClass(inv->getAsciiParameter(_param0_addStfClass__String_));
		break;
	case RPC_ADDATTRIBUTE__STRING_INT_:
		addAttribute(inv->getAsciiParameter(_param0_addAttribute__String_int_), inv->getSignedIntParameter());
		break;
	case RPC_ISTYPE__STRING_:
		resp->insertBoolean(isType(inv->getAsciiParameter(_param0_isType__String_)));
		break;
	case RPC_SETSURVEYTOOLTYPE__INT_:
		setSurveyToolType(inv->getSignedIntParameter());
		break;
	case RPC_SETISENERGY__BOOL_:
		setIsEnergy(inv->getBooleanParameter());
		break;
	case RPC_GETNAME__:
		resp->insertAscii(getName());
		break;
	case RPC_GETTYPE__:
		resp->insertAscii(getType());
		break;
	case RPC_GETCLASS__INT_:
		resp->insertAscii(getClass(inv->getSignedIntParameter()));
		break;
	case RPC_GETFINALCLASS__:
		resp->insertAscii(getFinalClass());
		break;
	case RPC_GETFAMILYNAME__:
		resp->insertAscii(getFamilyName());
		break;
	case RPC_SETSPAWNED__LONG_:
		setSpawned(inv->getUnsignedLongParameter());
		break;
	case RPC_SETDESPAWNED__LONG_:
		setDespawned(inv->getUnsignedLongParameter());
		break;
	case RPC_GETDESPAWNED__:
		resp->insertLong(getDespawned());
		break;
	case RPC_SETCONTAINERCRC__INT_:
		setContainerCRC(inv->getUnsignedIntParameter());
		break;
	case RPC_GETCONTAINERCRC__:
		resp->insertInt(getContainerCRC());
		break;
	case RPC_GETSPAWNPOOL__:
		resp->insertSignedInt(getSpawnPool());
		break;
	case RPC_ISENERGY__:
		resp->insertBoolean(isEnergy());
		break;
	case RPC_GETZONERESTRICTION__:
		resp->insertAscii(getZoneRestriction());
		break;
	case RPC_GETSURVEYTOOLTYPE__:
		resp->insertSignedInt(getSurveyToolType());
		break;
	case RPC_GETSPAWNMAPSIZE__:
		resp->insertSignedInt(getSpawnMapSize());
		break;
	case RPC_EXTRACTRESOURCE__STRING_INT_:
		extractResource(inv->getAsciiParameter(_param0_extractResource__String_int_), inv->getSignedIntParameter());
		break;
	case RPC_CREATERESOURCE__INT_:
		resp->insertLong(createResource(inv->getSignedIntParameter())->_getObjectID());
		break;
	case RPC_GETPLANETCRC__:
		resp->insertInt(getPlanetCRC());
		break;
	case RPC_GETATTRIBUTEVALUE__INT_:
		resp->insertSignedInt(getAttributeValue(inv->getSignedIntParameter()));
		break;
	case RPC_GETVALUEOF__INT_:
		resp->insertSignedInt(getValueOf(inv->getSignedIntParameter()));
		break;
	case RPC_ADDSTATSTODEEDLISTBOX__SUILISTBOX_:
		addStatsToDeedListBox((SuiListBox*) inv->getObjectParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void ResourceSpawnAdapter::finalize() {
	((ResourceSpawnImplementation*) impl)->finalize();
}

void ResourceSpawnAdapter::initializeTransientMembers() {
	((ResourceSpawnImplementation*) impl)->initializeTransientMembers();
}

void ResourceSpawnAdapter::decreaseContainerReferenceCount() {
	((ResourceSpawnImplementation*) impl)->decreaseContainerReferenceCount();
}

void ResourceSpawnAdapter::setName(const String& name) {
	((ResourceSpawnImplementation*) impl)->setName(name);
}

void ResourceSpawnAdapter::setType(const String& type) {
	((ResourceSpawnImplementation*) impl)->setType(type);
}

void ResourceSpawnAdapter::setSpawnPool(int pool) {
	((ResourceSpawnImplementation*) impl)->setSpawnPool(pool);
}

void ResourceSpawnAdapter::setZoneRestriction(const String& zoneName) {
	((ResourceSpawnImplementation*) impl)->setZoneRestriction(zoneName);
}

void ResourceSpawnAdapter::addClass(const String& newclass) {
	((ResourceSpawnImplementation*) impl)->addClass(newclass);
}

void ResourceSpawnAdapter::addStfClass(const String& newclass) {
	((ResourceSpawnImplementation*) impl)->addStfClass(newclass);
}

void ResourceSpawnAdapter::addAttribute(const String& attribute, int value) {
	((ResourceSpawnImplementation*) impl)->addAttribute(attribute, value);
}

bool ResourceSpawnAdapter::isType(const String& type) {
	return ((ResourceSpawnImplementation*) impl)->isType(type);
}

void ResourceSpawnAdapter::setSurveyToolType(int type) {
	((ResourceSpawnImplementation*) impl)->setSurveyToolType(type);
}

void ResourceSpawnAdapter::setIsEnergy(bool val) {
	((ResourceSpawnImplementation*) impl)->setIsEnergy(val);
}

String ResourceSpawnAdapter::getName() {
	return ((ResourceSpawnImplementation*) impl)->getName();
}

String ResourceSpawnAdapter::getType() {
	return ((ResourceSpawnImplementation*) impl)->getType();
}

String ResourceSpawnAdapter::getClass(int index) {
	return ((ResourceSpawnImplementation*) impl)->getClass(index);
}

String ResourceSpawnAdapter::getFinalClass() {
	return ((ResourceSpawnImplementation*) impl)->getFinalClass();
}

String ResourceSpawnAdapter::getFamilyName() {
	return ((ResourceSpawnImplementation*) impl)->getFamilyName();
}

void ResourceSpawnAdapter::setSpawned(unsigned long long t) {
	((ResourceSpawnImplementation*) impl)->setSpawned(t);
}

void ResourceSpawnAdapter::setDespawned(unsigned long long t) {
	((ResourceSpawnImplementation*) impl)->setDespawned(t);
}

unsigned long long ResourceSpawnAdapter::getDespawned() {
	return ((ResourceSpawnImplementation*) impl)->getDespawned();
}

void ResourceSpawnAdapter::setContainerCRC(unsigned int crc) {
	((ResourceSpawnImplementation*) impl)->setContainerCRC(crc);
}

unsigned int ResourceSpawnAdapter::getContainerCRC() {
	return ((ResourceSpawnImplementation*) impl)->getContainerCRC();
}

int ResourceSpawnAdapter::getSpawnPool() {
	return ((ResourceSpawnImplementation*) impl)->getSpawnPool();
}

bool ResourceSpawnAdapter::isEnergy() {
	return ((ResourceSpawnImplementation*) impl)->isEnergy();
}

String ResourceSpawnAdapter::getZoneRestriction() {
	return ((ResourceSpawnImplementation*) impl)->getZoneRestriction();
}

int ResourceSpawnAdapter::getSurveyToolType() {
	return ((ResourceSpawnImplementation*) impl)->getSurveyToolType();
}

int ResourceSpawnAdapter::getSpawnMapSize() {
	return ((ResourceSpawnImplementation*) impl)->getSpawnMapSize();
}

void ResourceSpawnAdapter::extractResource(const String& zoneName, int units) {
	((ResourceSpawnImplementation*) impl)->extractResource(zoneName, units);
}

ResourceContainer* ResourceSpawnAdapter::createResource(int units) {
	return ((ResourceSpawnImplementation*) impl)->createResource(units);
}

unsigned int ResourceSpawnAdapter::getPlanetCRC() {
	return ((ResourceSpawnImplementation*) impl)->getPlanetCRC();
}

int ResourceSpawnAdapter::getAttributeValue(int index) {
	return ((ResourceSpawnImplementation*) impl)->getAttributeValue(index);
}

int ResourceSpawnAdapter::getValueOf(int index) {
	return ((ResourceSpawnImplementation*) impl)->getValueOf(index);
}

void ResourceSpawnAdapter::addStatsToDeedListBox(SuiListBox* suil) {
	((ResourceSpawnImplementation*) impl)->addStatsToDeedListBox(suil);
}

/*
 *	ResourceSpawnHelper
 */

ResourceSpawnHelper* ResourceSpawnHelper::staticInitializer = ResourceSpawnHelper::instance();

ResourceSpawnHelper::ResourceSpawnHelper() {
	className = "ResourceSpawn";

	Core::getObjectBroker()->registerClass(className, this);
}

void ResourceSpawnHelper::finalizeHelper() {
	ResourceSpawnHelper::finalize();
}

DistributedObject* ResourceSpawnHelper::instantiateObject() {
	return new ResourceSpawn(DummyConstructorParameter::instance());
}

DistributedObjectServant* ResourceSpawnHelper::instantiateServant() {
	return new ResourceSpawnImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ResourceSpawnHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ResourceSpawnAdapter((ResourceSpawnImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

