/*
 *	server/zone/objects/resource/ResourceSpawn.cpp generated by engine3 IDL compiler 0.60
 */

#include "ResourceSpawn.h"

/*
 *	ResourceSpawnStub
 */

ResourceSpawn::ResourceSpawn(String& inType) : ManagedObject(DummyConstructorParameter::instance()) {
	_impl = new ResourceSpawnImplementation(inType);
	_impl->_setStub(this);
}

ResourceSpawn::ResourceSpawn(DummyConstructorParameter* param) : ManagedObject(param) {
}

ResourceSpawn::~ResourceSpawn() {
}


void ResourceSpawn::fillAttributeList(AttributeListMessage* msg, PlayerCreature* object) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((ResourceSpawnImplementation*) _impl)->fillAttributeList(msg, object);
}

void ResourceSpawn::setName(String& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		((ResourceSpawnImplementation*) _impl)->setName(name);
}

void ResourceSpawn::addClass(String& newclass) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addAsciiParameter(newclass);

		method.executeWithVoidReturn();
	} else
		((ResourceSpawnImplementation*) _impl)->addClass(newclass);
}

void ResourceSpawn::addAttribute(String& attribute, int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addAsciiParameter(attribute);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((ResourceSpawnImplementation*) _impl)->addAttribute(attribute, value);
}

void ResourceSpawn::setContainerName(String& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		((ResourceSpawnImplementation*) _impl)->setContainerName(name);
}

String ResourceSpawn::getName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		method.executeWithAsciiReturn(_return_getName);
		return _return_getName;
	} else
		return ((ResourceSpawnImplementation*) _impl)->getName();
}

String ResourceSpawn::getType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		method.executeWithAsciiReturn(_return_getType);
		return _return_getType;
	} else
		return ((ResourceSpawnImplementation*) _impl)->getType();
}

String ResourceSpawn::getClass(int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addSignedIntParameter(index);

		method.executeWithAsciiReturn(_return_getClass);
		return _return_getClass;
	} else
		return ((ResourceSpawnImplementation*) _impl)->getClass(index);
}

int ResourceSpawn::getAttributeAndValue(String& attribute, int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addAsciiParameter(attribute);
		method.addSignedIntParameter(index);

		return method.executeWithSignedIntReturn();
	} else
		return ((ResourceSpawnImplementation*) _impl)->getAttributeAndValue(attribute, index);
}

String ResourceSpawn::getContainerName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		method.executeWithAsciiReturn(_return_getContainerName);
		return _return_getContainerName;
	} else
		return ((ResourceSpawnImplementation*) _impl)->getContainerName();
}

void ResourceSpawn::toString() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		method.executeWithVoidReturn();
	} else
		((ResourceSpawnImplementation*) _impl)->toString();
}

/*
 *	ResourceSpawnImplementation
 */

ResourceSpawnImplementation::ResourceSpawnImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}

ResourceSpawnImplementation::~ResourceSpawnImplementation() {
}


void ResourceSpawnImplementation::finalize() {
}

void ResourceSpawnImplementation::_initializeImplementation() {
	_setClassHelper(ResourceSpawnHelper::instance());

	_serializationHelperMethod();
}

void ResourceSpawnImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (ResourceSpawn*) stub;
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* ResourceSpawnImplementation::_getStub() {
	return _this;
}

ResourceSpawnImplementation::operator const ResourceSpawn*() {
	return _this;
}

void ResourceSpawnImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void ResourceSpawnImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void ResourceSpawnImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void ResourceSpawnImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void ResourceSpawnImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void ResourceSpawnImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void ResourceSpawnImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void ResourceSpawnImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("ResourceSpawn");

	addSerializableVariable("spawnType", &spawnType);
	addSerializableVariable("spawnName", &spawnName);
	addSerializableVariable("spawnContainer", &spawnContainer);
	addSerializableVariable("spawnClasses", &spawnClasses);
	addSerializableVariable("spawnAttributes", &spawnAttributes);
}

ResourceSpawnImplementation::ResourceSpawnImplementation(String& inType) {
	_initializeImplementation();
	// server/zone/objects/resource/ResourceSpawn.idl(68):   	spawnType = inType;
	spawnType = inType;
	// server/zone/objects/resource/ResourceSpawn.idl(69):   	Logger.setLoggingName("ResourceSpawnObject");
	Logger::setLoggingName("ResourceSpawnObject");
	// server/zone/objects/resource/ResourceSpawn.idl(71):   	spawnAttributes.setNoDuplicateInsertPlan() ;
	(&spawnAttributes)->setNoDuplicateInsertPlan();
}

void ResourceSpawnImplementation::setName(String& name) {
	// server/zone/objects/resource/ResourceSpawn.idl(91):   	spawnName = name;
	spawnName = name;
}

void ResourceSpawnImplementation::addClass(String& newclass) {
	// server/zone/objects/resource/ResourceSpawn.idl(101):   	spawnClasses.add(newclass);
	(&spawnClasses)->add(newclass);
}

void ResourceSpawnImplementation::addAttribute(String& attribute, int value) {
	// server/zone/objects/resource/ResourceSpawn.idl(105):  		spawnAttributes.put(attribute, value);
	(&spawnAttributes)->put(attribute, value);
}

void ResourceSpawnImplementation::setContainerName(String& name) {
	// server/zone/objects/resource/ResourceSpawn.idl(110):   	spawnContainer = name;
	spawnContainer = name;
}

String ResourceSpawnImplementation::getName() {
	// server/zone/objects/resource/ResourceSpawn.idl(115):  		return spawnName;
	return spawnName;
}

String ResourceSpawnImplementation::getType() {
	// server/zone/objects/resource/ResourceSpawn.idl(119):   	return spawnType;
	return spawnType;
}

String ResourceSpawnImplementation::getClass(int index) {
	// server/zone/objects/resource/ResourceSpawn.idl(123):  
	if (index < (&spawnClasses)->size()){
	// server/zone/objects/resource/ResourceSpawn.idl(124):   		return spawnClasses.get(index);
	return (&spawnClasses)->get(index);
}

	else {
	// server/zone/objects/resource/ResourceSpawn.idl(126):   		return "";
	return "";
}
}

int ResourceSpawnImplementation::getAttributeAndValue(String& attribute, int index) {
	// server/zone/objects/resource/ResourceSpawn.idl(131):  
	if (index < (&spawnAttributes)->size()){
	// server/zone/objects/resource/ResourceSpawn.idl(132):   		return spawnAttributes.get(index);
	return (&spawnAttributes)->get(index);
}

	else {
	// server/zone/objects/resource/ResourceSpawn.idl(134):   		return 0;
	return 0;
}
}

String ResourceSpawnImplementation::getContainerName() {
	// server/zone/objects/resource/ResourceSpawn.idl(139):   	return spawnContainer;
	return spawnContainer;
}

void ResourceSpawnImplementation::toString() {
	// server/zone/objects/resource/ResourceSpawn.idl(143):   System.out << "test\n";
	System::out << "test\n";
}

/*
 *	ResourceSpawnAdapter
 */

ResourceSpawnAdapter::ResourceSpawnAdapter(ResourceSpawnImplementation* obj) : ManagedObjectAdapter(obj) {
}

Packet* ResourceSpawnAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		setName(inv->getAsciiParameter(_param0_setName__String_));
		break;
	case 7:
		addClass(inv->getAsciiParameter(_param0_addClass__String_));
		break;
	case 8:
		addAttribute(inv->getAsciiParameter(_param0_addAttribute__String_int_), inv->getSignedIntParameter());
		break;
	case 9:
		setContainerName(inv->getAsciiParameter(_param0_setContainerName__String_));
		break;
	case 10:
		resp->insertAscii(getName());
		break;
	case 11:
		resp->insertAscii(getType());
		break;
	case 12:
		resp->insertAscii(getClass(inv->getSignedIntParameter()));
		break;
	case 13:
		resp->insertSignedInt(getAttributeAndValue(inv->getAsciiParameter(_param0_getAttributeAndValue__String_int_), inv->getSignedIntParameter()));
		break;
	case 14:
		resp->insertAscii(getContainerName());
		break;
	case 15:
		toString();
		break;
	default:
		return NULL;
	}

	return resp;
}

void ResourceSpawnAdapter::setName(String& name) {
	((ResourceSpawnImplementation*) impl)->setName(name);
}

void ResourceSpawnAdapter::addClass(String& newclass) {
	((ResourceSpawnImplementation*) impl)->addClass(newclass);
}

void ResourceSpawnAdapter::addAttribute(String& attribute, int value) {
	((ResourceSpawnImplementation*) impl)->addAttribute(attribute, value);
}

void ResourceSpawnAdapter::setContainerName(String& name) {
	((ResourceSpawnImplementation*) impl)->setContainerName(name);
}

String ResourceSpawnAdapter::getName() {
	return ((ResourceSpawnImplementation*) impl)->getName();
}

String ResourceSpawnAdapter::getType() {
	return ((ResourceSpawnImplementation*) impl)->getType();
}

String ResourceSpawnAdapter::getClass(int index) {
	return ((ResourceSpawnImplementation*) impl)->getClass(index);
}

int ResourceSpawnAdapter::getAttributeAndValue(String& attribute, int index) {
	return ((ResourceSpawnImplementation*) impl)->getAttributeAndValue(attribute, index);
}

String ResourceSpawnAdapter::getContainerName() {
	return ((ResourceSpawnImplementation*) impl)->getContainerName();
}

void ResourceSpawnAdapter::toString() {
	((ResourceSpawnImplementation*) impl)->toString();
}

/*
 *	ResourceSpawnHelper
 */

ResourceSpawnHelper* ResourceSpawnHelper::staticInitializer = ResourceSpawnHelper::instance();

ResourceSpawnHelper::ResourceSpawnHelper() {
	className = "ResourceSpawn";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void ResourceSpawnHelper::finalizeHelper() {
	ResourceSpawnHelper::finalize();
}

DistributedObject* ResourceSpawnHelper::instantiateObject() {
	return new ResourceSpawn(DummyConstructorParameter::instance());
}

DistributedObjectServant* ResourceSpawnHelper::instantiateServant() {
	return new ResourceSpawnImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ResourceSpawnHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ResourceSpawnAdapter((ResourceSpawnImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

