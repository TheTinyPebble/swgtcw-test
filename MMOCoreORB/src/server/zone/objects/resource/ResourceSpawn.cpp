/*
 *	server/zone/objects/resource/ResourceSpawn.cpp generated by engine3 IDL compiler 0.60
 */

#include "ResourceSpawn.h"

/*
 *	ResourceSpawnStub
 */

ResourceSpawn::ResourceSpawn() : ManagedObject(DummyConstructorParameter::instance()) {
	_impl = new ResourceSpawnImplementation();
	_impl->_setStub(this);
}

ResourceSpawn::ResourceSpawn(DummyConstructorParameter* param) : ManagedObject(param) {
}

ResourceSpawn::~ResourceSpawn() {
}


void ResourceSpawn::fillAttributeList(AttributeListMessage* msg, PlayerCreature* object) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((ResourceSpawnImplementation*) _impl)->fillAttributeList(msg, object);
}

void ResourceSpawn::setName(String& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		((ResourceSpawnImplementation*) _impl)->setName(name);
}

void ResourceSpawn::setType(String& type) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addAsciiParameter(type);

		method.executeWithVoidReturn();
	} else
		((ResourceSpawnImplementation*) _impl)->setType(type);
}

void ResourceSpawn::addClass(String& newclass) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addAsciiParameter(newclass);

		method.executeWithVoidReturn();
	} else
		((ResourceSpawnImplementation*) _impl)->addClass(newclass);
}

void ResourceSpawn::addAttribute(String& attribute, int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addAsciiParameter(attribute);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((ResourceSpawnImplementation*) _impl)->addAttribute(attribute, value);
}

bool ResourceSpawn::isType(String& ore) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addAsciiParameter(ore);

		return method.executeWithBooleanReturn();
	} else
		return ((ResourceSpawnImplementation*) _impl)->isType(ore);
}

String ResourceSpawn::getName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		method.executeWithAsciiReturn(_return_getName);
		return _return_getName;
	} else
		return ((ResourceSpawnImplementation*) _impl)->getName();
}

String ResourceSpawn::getType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		method.executeWithAsciiReturn(_return_getType);
		return _return_getType;
	} else
		return ((ResourceSpawnImplementation*) _impl)->getType();
}

String ResourceSpawn::getClass(int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addSignedIntParameter(index);

		method.executeWithAsciiReturn(_return_getClass);
		return _return_getClass;
	} else
		return ((ResourceSpawnImplementation*) _impl)->getClass(index);
}

String ResourceSpawn::getFinalClass() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		method.executeWithAsciiReturn(_return_getFinalClass);
		return _return_getFinalClass;
	} else
		return ((ResourceSpawnImplementation*) _impl)->getFinalClass();
}

void ResourceSpawn::setSpawned(unsigned long long t) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addUnsignedLongParameter(t);

		method.executeWithVoidReturn();
	} else
		((ResourceSpawnImplementation*) _impl)->setSpawned(t);
}

void ResourceSpawn::setDespawned(unsigned long long t) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addUnsignedLongParameter(t);

		method.executeWithVoidReturn();
	} else
		((ResourceSpawnImplementation*) _impl)->setDespawned(t);
}

bool ResourceSpawn::isUnknownType() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((ResourceSpawnImplementation*) _impl)->isUnknownType();
}

void ResourceSpawn::createSpawnMaps(bool jtl, int zonerestriction, Vector<unsigned int>& activeZones) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((ResourceSpawnImplementation*) _impl)->createSpawnMaps(jtl, zonerestriction, activeZones);
}

int ResourceSpawn::getConcentration(bool jtl) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((ResourceSpawnImplementation*) _impl)->getConcentration(jtl);
}

Vector<unsigned int> ResourceSpawn::getSpawnZones(bool jtl, int zonerestriction, Vector<unsigned int>& activeZones) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((ResourceSpawnImplementation*) _impl)->getSpawnZones(jtl, zonerestriction, activeZones);
}

float ResourceSpawn::getDensityAt(int zoneid, float x, float y) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((ResourceSpawnImplementation*) _impl)->getDensityAt(zoneid, x, y);
}

bool ResourceSpawn::inShift() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((ResourceSpawnImplementation*) _impl)->inShift();
}

int ResourceSpawn::getAttributeAndValue(String& attribute, int index) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((ResourceSpawnImplementation*) _impl)->getAttributeAndValue(attribute, index);
}

void ResourceSpawn::print() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((ResourceSpawnImplementation*) _impl)->print();
}

/*
 *	ResourceSpawnImplementation
 */

ResourceSpawnImplementation::ResourceSpawnImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}

ResourceSpawnImplementation::~ResourceSpawnImplementation() {
}


void ResourceSpawnImplementation::finalize() {
}

void ResourceSpawnImplementation::_initializeImplementation() {
	_setClassHelper(ResourceSpawnHelper::instance());

	_serializationHelperMethod();
}

void ResourceSpawnImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (ResourceSpawn*) stub;
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* ResourceSpawnImplementation::_getStub() {
	return _this;
}

ResourceSpawnImplementation::operator const ResourceSpawn*() {
	return _this;
}

void ResourceSpawnImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void ResourceSpawnImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void ResourceSpawnImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void ResourceSpawnImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void ResourceSpawnImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void ResourceSpawnImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void ResourceSpawnImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void ResourceSpawnImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("ResourceSpawn");

	addSerializableVariable("spawnType", &spawnType);
	addSerializableVariable("spawnName", &spawnName);
	addSerializableVariable("spawnClasses", &spawnClasses);
	addSerializableVariable("spawnAttributes", &spawnAttributes);
	addSerializableVariable("resourcePool", &resourcePool);
	addSerializableVariable("spawned", &spawned);
	addSerializableVariable("despawned", &despawned);
	addSerializableVariable("spawnMaps", &spawnMaps);
	addSerializableVariable("totalUnitsSpawned", &totalUnitsSpawned);
	addSerializableVariable("unitsInCirculation", &unitsInCirculation);
}

ResourceSpawnImplementation::ResourceSpawnImplementation() {
	_initializeImplementation();
	// server/zone/objects/resource/ResourceSpawn.idl(79):   	spawnType = "";
	spawnType = "";
	// server/zone/objects/resource/ResourceSpawn.idl(80):   	spawnAttributes.setNoDuplicateInsertPlan();
	(&spawnAttributes)->setNoDuplicateInsertPlan();
}

void ResourceSpawnImplementation::setName(String& name) {
	// server/zone/objects/resource/ResourceSpawn.idl(100):   	spawnName = name;
	spawnName = name;
}

void ResourceSpawnImplementation::setType(String& type) {
	// server/zone/objects/resource/ResourceSpawn.idl(104):   	spawnType = type;
	spawnType = type;
}

void ResourceSpawnImplementation::addClass(String& newclass) {
	// server/zone/objects/resource/ResourceSpawn.idl(114):   	spawnClasses.add(newclass);
	(&spawnClasses)->add(newclass);
}

void ResourceSpawnImplementation::addAttribute(String& attribute, int value) {
	// server/zone/objects/resource/ResourceSpawn.idl(118):  		spawnAttributes.put(attribute, value);
	(&spawnAttributes)->put(attribute, value);
}

bool ResourceSpawnImplementation::isType(String& ore) {
	// server/zone/objects/resource/ResourceSpawn.idl(122):  
	for (	// server/zone/objects/resource/ResourceSpawn.idl(122):  		for(int i = 0;
	int i = 0;
	i < (&spawnClasses)->size();
 ++i) {
	// server/zone/objects/resource/ResourceSpawn.idl(123):  		}
	if ((&spawnClasses)->get(i) == ore)	// server/zone/objects/resource/ResourceSpawn.idl(124):  				return true;
	return true;
}
	// server/zone/objects/resource/ResourceSpawn.idl(126):  		return false;
	return false;
}

String ResourceSpawnImplementation::getName() {
	// server/zone/objects/resource/ResourceSpawn.idl(131):  		return spawnName;
	return spawnName;
}

String ResourceSpawnImplementation::getType() {
	// server/zone/objects/resource/ResourceSpawn.idl(135):   	return spawnType;
	return spawnType;
}

String ResourceSpawnImplementation::getClass(int index) {
	// server/zone/objects/resource/ResourceSpawn.idl(139):  
	if (index < (&spawnClasses)->size()){
	// server/zone/objects/resource/ResourceSpawn.idl(140):   		return spawnClasses.get(index);
	return (&spawnClasses)->get(index);
}

	else {
	// server/zone/objects/resource/ResourceSpawn.idl(142):   		return "";
	return "";
}
}

String ResourceSpawnImplementation::getFinalClass() {
	// server/zone/objects/resource/ResourceSpawn.idl(147):  
	if ((&spawnClasses)->size() > 0)	// server/zone/objects/resource/ResourceSpawn.idl(148):   		return spawnClasses.get(spawnClasses.size() - 1);
	return (&spawnClasses)->get((&spawnClasses)->size() - 1);

	else 	// server/zone/objects/resource/ResourceSpawn.idl(150):   		return "";
	return "";
}

void ResourceSpawnImplementation::setSpawned(unsigned long long t) {
	// server/zone/objects/resource/ResourceSpawn.idl(154):   	spawned = t;
	spawned = t;
}

void ResourceSpawnImplementation::setDespawned(unsigned long long t) {
	// server/zone/objects/resource/ResourceSpawn.idl(158):   	despawned = t;
	despawned = t;
}

/*
 *	ResourceSpawnAdapter
 */

ResourceSpawnAdapter::ResourceSpawnAdapter(ResourceSpawnImplementation* obj) : ManagedObjectAdapter(obj) {
}

Packet* ResourceSpawnAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		setName(inv->getAsciiParameter(_param0_setName__String_));
		break;
	case 7:
		setType(inv->getAsciiParameter(_param0_setType__String_));
		break;
	case 8:
		addClass(inv->getAsciiParameter(_param0_addClass__String_));
		break;
	case 9:
		addAttribute(inv->getAsciiParameter(_param0_addAttribute__String_int_), inv->getSignedIntParameter());
		break;
	case 10:
		resp->insertBoolean(isType(inv->getAsciiParameter(_param0_isType__String_)));
		break;
	case 11:
		resp->insertAscii(getName());
		break;
	case 12:
		resp->insertAscii(getType());
		break;
	case 13:
		resp->insertAscii(getClass(inv->getSignedIntParameter()));
		break;
	case 14:
		resp->insertAscii(getFinalClass());
		break;
	case 15:
		setSpawned(inv->getUnsignedLongParameter());
		break;
	case 16:
		setDespawned(inv->getUnsignedLongParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void ResourceSpawnAdapter::setName(String& name) {
	((ResourceSpawnImplementation*) impl)->setName(name);
}

void ResourceSpawnAdapter::setType(String& type) {
	((ResourceSpawnImplementation*) impl)->setType(type);
}

void ResourceSpawnAdapter::addClass(String& newclass) {
	((ResourceSpawnImplementation*) impl)->addClass(newclass);
}

void ResourceSpawnAdapter::addAttribute(String& attribute, int value) {
	((ResourceSpawnImplementation*) impl)->addAttribute(attribute, value);
}

bool ResourceSpawnAdapter::isType(String& ore) {
	return ((ResourceSpawnImplementation*) impl)->isType(ore);
}

String ResourceSpawnAdapter::getName() {
	return ((ResourceSpawnImplementation*) impl)->getName();
}

String ResourceSpawnAdapter::getType() {
	return ((ResourceSpawnImplementation*) impl)->getType();
}

String ResourceSpawnAdapter::getClass(int index) {
	return ((ResourceSpawnImplementation*) impl)->getClass(index);
}

String ResourceSpawnAdapter::getFinalClass() {
	return ((ResourceSpawnImplementation*) impl)->getFinalClass();
}

void ResourceSpawnAdapter::setSpawned(unsigned long long t) {
	((ResourceSpawnImplementation*) impl)->setSpawned(t);
}

void ResourceSpawnAdapter::setDespawned(unsigned long long t) {
	((ResourceSpawnImplementation*) impl)->setDespawned(t);
}

/*
 *	ResourceSpawnHelper
 */

ResourceSpawnHelper* ResourceSpawnHelper::staticInitializer = ResourceSpawnHelper::instance();

ResourceSpawnHelper::ResourceSpawnHelper() {
	className = "ResourceSpawn";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void ResourceSpawnHelper::finalizeHelper() {
	ResourceSpawnHelper::finalize();
}

DistributedObject* ResourceSpawnHelper::instantiateObject() {
	return new ResourceSpawn(DummyConstructorParameter::instance());
}

DistributedObjectServant* ResourceSpawnHelper::instantiateServant() {
	return new ResourceSpawnImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ResourceSpawnHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ResourceSpawnAdapter((ResourceSpawnImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

