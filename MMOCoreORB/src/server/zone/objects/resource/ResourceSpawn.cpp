/*
 *	server/zone/objects/resource/ResourceSpawn.cpp generated by engine3 IDL compiler 0.60
 */

#include "ResourceSpawn.h"

/*
 *	ResourceSpawnStub
 */

ResourceSpawn::ResourceSpawn() : SceneObject(DummyConstructorParameter::instance()) {
	_impl = new ResourceSpawnImplementation();
	_impl->_setStub(this);
}

ResourceSpawn::ResourceSpawn(DummyConstructorParameter* param) : SceneObject(param) {
}

ResourceSpawn::~ResourceSpawn() {
}


void ResourceSpawn::fillAttributeList(AttributeListMessage* msg, PlayerCreature* object) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((ResourceSpawnImplementation*) _impl)->fillAttributeList(msg, object);
}

void ResourceSpawn::setName(String& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		((ResourceSpawnImplementation*) _impl)->setName(name);
}

void ResourceSpawn::setType(String& type) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addAsciiParameter(type);

		method.executeWithVoidReturn();
	} else
		((ResourceSpawnImplementation*) _impl)->setType(type);
}

void ResourceSpawn::setSpawnPool(int pool) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addSignedIntParameter(pool);

		method.executeWithVoidReturn();
	} else
		((ResourceSpawnImplementation*) _impl)->setSpawnPool(pool);
}

void ResourceSpawn::setZoneRestriction(int zone) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addSignedIntParameter(zone);

		method.executeWithVoidReturn();
	} else
		((ResourceSpawnImplementation*) _impl)->setZoneRestriction(zone);
}

void ResourceSpawn::addClass(String& newclass) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addAsciiParameter(newclass);

		method.executeWithVoidReturn();
	} else
		((ResourceSpawnImplementation*) _impl)->addClass(newclass);
}

void ResourceSpawn::addStfClass(String& newclass) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addAsciiParameter(newclass);

		method.executeWithVoidReturn();
	} else
		((ResourceSpawnImplementation*) _impl)->addStfClass(newclass);
}

void ResourceSpawn::addAttribute(String& attribute, int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addAsciiParameter(attribute);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((ResourceSpawnImplementation*) _impl)->addAttribute(attribute, value);
}

bool ResourceSpawn::isType(String& type) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addAsciiParameter(type);

		return method.executeWithBooleanReturn();
	} else
		return ((ResourceSpawnImplementation*) _impl)->isType(type);
}

void ResourceSpawn::setSurveyToolType(int type) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addSignedIntParameter(type);

		method.executeWithVoidReturn();
	} else
		((ResourceSpawnImplementation*) _impl)->setSurveyToolType(type);
}

String ResourceSpawn::getName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		method.executeWithAsciiReturn(_return_getName);
		return _return_getName;
	} else
		return ((ResourceSpawnImplementation*) _impl)->getName();
}

String ResourceSpawn::getType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		method.executeWithAsciiReturn(_return_getType);
		return _return_getType;
	} else
		return ((ResourceSpawnImplementation*) _impl)->getType();
}

String ResourceSpawn::getClass(int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addSignedIntParameter(index);

		method.executeWithAsciiReturn(_return_getClass);
		return _return_getClass;
	} else
		return ((ResourceSpawnImplementation*) _impl)->getClass(index);
}

String ResourceSpawn::getFinalClass() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		method.executeWithAsciiReturn(_return_getFinalClass);
		return _return_getFinalClass;
	} else
		return ((ResourceSpawnImplementation*) _impl)->getFinalClass();
}

void ResourceSpawn::setSpawned(unsigned long long t) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addUnsignedLongParameter(t);

		method.executeWithVoidReturn();
	} else
		((ResourceSpawnImplementation*) _impl)->setSpawned(t);
}

void ResourceSpawn::setDespawned(unsigned long long t) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addUnsignedLongParameter(t);

		method.executeWithVoidReturn();
	} else
		((ResourceSpawnImplementation*) _impl)->setDespawned(t);
}

int ResourceSpawn::getSpawnPool() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);

		return method.executeWithSignedIntReturn();
	} else
		return ((ResourceSpawnImplementation*) _impl)->getSpawnPool();
}

int ResourceSpawn::getZoneRestriction() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);

		return method.executeWithSignedIntReturn();
	} else
		return ((ResourceSpawnImplementation*) _impl)->getZoneRestriction();
}

int ResourceSpawn::getSurveyToolType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);

		return method.executeWithSignedIntReturn();
	} else
		return ((ResourceSpawnImplementation*) _impl)->getSurveyToolType();
}

int ResourceSpawn::getSpawnMapSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);

		return method.executeWithSignedIntReturn();
	} else
		return ((ResourceSpawnImplementation*) _impl)->getSpawnMapSize();
}

int ResourceSpawn::getSpawnMapZone(int i) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((ResourceSpawnImplementation*) _impl)->getSpawnMapZone(i);
}

bool ResourceSpawn::isUnknownType() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((ResourceSpawnImplementation*) _impl)->isUnknownType();
}

void ResourceSpawn::createSpawnMaps(bool jtl, int zonerestriction, Vector<unsigned int>& activeZones) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((ResourceSpawnImplementation*) _impl)->createSpawnMaps(jtl, zonerestriction, activeZones);
}

float ResourceSpawn::getDensityAt(int zoneid, float x, float y) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((ResourceSpawnImplementation*) _impl)->getDensityAt(zoneid, x, y);
}

bool ResourceSpawn::inShift() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((ResourceSpawnImplementation*) _impl)->inShift();
}

int ResourceSpawn::getAttributeAndValue(String& attribute, int index) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((ResourceSpawnImplementation*) _impl)->getAttributeAndValue(attribute, index);
}

void ResourceSpawn::print() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((ResourceSpawnImplementation*) _impl)->print();
}

/*
 *	ResourceSpawnImplementation
 */

ResourceSpawnImplementation::ResourceSpawnImplementation(DummyConstructorParameter* param) : SceneObjectImplementation(param) {
	_initializeImplementation();
}

ResourceSpawnImplementation::~ResourceSpawnImplementation() {
}


void ResourceSpawnImplementation::finalize() {
}

void ResourceSpawnImplementation::_initializeImplementation() {
	_setClassHelper(ResourceSpawnHelper::instance());

	_serializationHelperMethod();
}

void ResourceSpawnImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (ResourceSpawn*) stub;
	SceneObjectImplementation::_setStub(stub);
}

DistributedObjectStub* ResourceSpawnImplementation::_getStub() {
	return _this;
}

ResourceSpawnImplementation::operator const ResourceSpawn*() {
	return _this;
}

void ResourceSpawnImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void ResourceSpawnImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void ResourceSpawnImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void ResourceSpawnImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void ResourceSpawnImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void ResourceSpawnImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void ResourceSpawnImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void ResourceSpawnImplementation::_serializationHelperMethod() {
	SceneObjectImplementation::_serializationHelperMethod();

	_setClassName("ResourceSpawn");

	addSerializableVariable("spawnType", &spawnType);
	addSerializableVariable("spawnName", &spawnName);
	addSerializableVariable("spawnClasses", &spawnClasses);
	addSerializableVariable("stfSpawnClasses", &stfSpawnClasses);
	addSerializableVariable("spawnAttributes", &spawnAttributes);
	addSerializableVariable("spawnPool", &spawnPool);
	addSerializableVariable("zoneRestriction", &zoneRestriction);
	addSerializableVariable("surveyToolType", &surveyToolType);
	addSerializableVariable("spawned", &spawned);
	addSerializableVariable("despawned", &despawned);
	addSerializableVariable("spawnMaps", &spawnMaps);
	addSerializableVariable("totalUnitsSpawned", &totalUnitsSpawned);
	addSerializableVariable("unitsInCirculation", &unitsInCirculation);
}

ResourceSpawnImplementation::ResourceSpawnImplementation() {
	_initializeImplementation();
	// server/zone/objects/resource/ResourceSpawn.idl(87):   	spawnType = "";
	spawnType = "";
	// server/zone/objects/resource/ResourceSpawn.idl(88):   	spawnPool = 0;
	spawnPool = 0;
	// server/zone/objects/resource/ResourceSpawn.idl(89):   	spawnAttributes.setNoDuplicateInsertPlan();
	(&spawnAttributes)->setNoDuplicateInsertPlan();
}

void ResourceSpawnImplementation::setName(String& name) {
	// server/zone/objects/resource/ResourceSpawn.idl(109):   	spawnName = name;
	spawnName = name;
}

void ResourceSpawnImplementation::setType(String& type) {
	// server/zone/objects/resource/ResourceSpawn.idl(113):   	spawnType = type;
	spawnType = type;
}

void ResourceSpawnImplementation::setSpawnPool(int pool) {
	// server/zone/objects/resource/ResourceSpawn.idl(117):   	spawnPool = pool;
	spawnPool = pool;
}

void ResourceSpawnImplementation::setZoneRestriction(int zone) {
	// server/zone/objects/resource/ResourceSpawn.idl(121):   	zoneRestriction = zone;
	zoneRestriction = zone;
}

void ResourceSpawnImplementation::addClass(String& newclass) {
	// server/zone/objects/resource/ResourceSpawn.idl(131):   	spawnClasses.add(newclass);
	(&spawnClasses)->add(newclass);
}

void ResourceSpawnImplementation::addStfClass(String& newclass) {
	// server/zone/objects/resource/ResourceSpawn.idl(135):   	stfSpawnClasses.add(newclass);
	(&stfSpawnClasses)->add(newclass);
}

void ResourceSpawnImplementation::addAttribute(String& attribute, int value) {
	// server/zone/objects/resource/ResourceSpawn.idl(139):  		spawnAttributes.put(attribute, value);
	(&spawnAttributes)->put(attribute, value);
}

bool ResourceSpawnImplementation::isType(String& type) {
	// server/zone/objects/resource/ResourceSpawn.idl(143):  
	for (	// server/zone/objects/resource/ResourceSpawn.idl(143):  		for(int i = 0;
	int i = 0;
	i < (&stfSpawnClasses)->size();
 ++i) {
	// server/zone/objects/resource/ResourceSpawn.idl(144):  		}
	if ((&stfSpawnClasses)->get(i) == type)	// server/zone/objects/resource/ResourceSpawn.idl(145):  				return true;
	return true;
}
	// server/zone/objects/resource/ResourceSpawn.idl(147):  
	for (	// server/zone/objects/resource/ResourceSpawn.idl(147):  		for(int i = 0;
	int i = 0;
	i < (&spawnClasses)->size();
 ++i) {
	// server/zone/objects/resource/ResourceSpawn.idl(148):  		}
	if ((&spawnClasses)->get(i) == type)	// server/zone/objects/resource/ResourceSpawn.idl(149):  				return true;
	return true;
}
	// server/zone/objects/resource/ResourceSpawn.idl(151):  		return false;
	return false;
}

void ResourceSpawnImplementation::setSurveyToolType(int type) {
	// server/zone/objects/resource/ResourceSpawn.idl(155):  		surveyToolType = type;
	surveyToolType = type;
}

String ResourceSpawnImplementation::getName() {
	// server/zone/objects/resource/ResourceSpawn.idl(160):  		return spawnName;
	return spawnName;
}

String ResourceSpawnImplementation::getType() {
	// server/zone/objects/resource/ResourceSpawn.idl(164):   	return spawnType;
	return spawnType;
}

String ResourceSpawnImplementation::getClass(int index) {
	// server/zone/objects/resource/ResourceSpawn.idl(168):  
	if (index < (&spawnClasses)->size()){
	// server/zone/objects/resource/ResourceSpawn.idl(169):   		return spawnClasses.get(index);
	return (&spawnClasses)->get(index);
}

	else {
	// server/zone/objects/resource/ResourceSpawn.idl(171):   		return "";
	return "";
}
}

String ResourceSpawnImplementation::getFinalClass() {
	// server/zone/objects/resource/ResourceSpawn.idl(176):  
	if ((&spawnClasses)->size() > 0)	// server/zone/objects/resource/ResourceSpawn.idl(177):   		return spawnClasses.get(spawnClasses.size() - 1);
	return (&spawnClasses)->get((&spawnClasses)->size() - 1);

	else 	// server/zone/objects/resource/ResourceSpawn.idl(179):   		return "";
	return "";
}

void ResourceSpawnImplementation::setSpawned(unsigned long long t) {
	// server/zone/objects/resource/ResourceSpawn.idl(183):   	spawned = t;
	spawned = t;
}

void ResourceSpawnImplementation::setDespawned(unsigned long long t) {
	// server/zone/objects/resource/ResourceSpawn.idl(187):   	despawned = t;
	despawned = t;
}

int ResourceSpawnImplementation::getSpawnPool() {
	// server/zone/objects/resource/ResourceSpawn.idl(191):   	return spawnPool;
	return spawnPool;
}

int ResourceSpawnImplementation::getZoneRestriction() {
	// server/zone/objects/resource/ResourceSpawn.idl(195):   	return zoneRestriction;
	return zoneRestriction;
}

int ResourceSpawnImplementation::getSurveyToolType() {
	// server/zone/objects/resource/ResourceSpawn.idl(199):   	return surveyToolType;
	return surveyToolType;
}

int ResourceSpawnImplementation::getSpawnMapSize() {
	// server/zone/objects/resource/ResourceSpawn.idl(203):   	return spawnMaps.size();
	return (&spawnMaps)->size();
}

/*
 *	ResourceSpawnAdapter
 */

ResourceSpawnAdapter::ResourceSpawnAdapter(ResourceSpawnImplementation* obj) : SceneObjectAdapter(obj) {
}

Packet* ResourceSpawnAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		setName(inv->getAsciiParameter(_param0_setName__String_));
		break;
	case 7:
		setType(inv->getAsciiParameter(_param0_setType__String_));
		break;
	case 8:
		setSpawnPool(inv->getSignedIntParameter());
		break;
	case 9:
		setZoneRestriction(inv->getSignedIntParameter());
		break;
	case 10:
		addClass(inv->getAsciiParameter(_param0_addClass__String_));
		break;
	case 11:
		addStfClass(inv->getAsciiParameter(_param0_addStfClass__String_));
		break;
	case 12:
		addAttribute(inv->getAsciiParameter(_param0_addAttribute__String_int_), inv->getSignedIntParameter());
		break;
	case 13:
		resp->insertBoolean(isType(inv->getAsciiParameter(_param0_isType__String_)));
		break;
	case 14:
		setSurveyToolType(inv->getSignedIntParameter());
		break;
	case 15:
		resp->insertAscii(getName());
		break;
	case 16:
		resp->insertAscii(getType());
		break;
	case 17:
		resp->insertAscii(getClass(inv->getSignedIntParameter()));
		break;
	case 18:
		resp->insertAscii(getFinalClass());
		break;
	case 19:
		setSpawned(inv->getUnsignedLongParameter());
		break;
	case 20:
		setDespawned(inv->getUnsignedLongParameter());
		break;
	case 21:
		resp->insertSignedInt(getSpawnPool());
		break;
	case 22:
		resp->insertSignedInt(getZoneRestriction());
		break;
	case 23:
		resp->insertSignedInt(getSurveyToolType());
		break;
	case 24:
		resp->insertSignedInt(getSpawnMapSize());
		break;
	default:
		return NULL;
	}

	return resp;
}

void ResourceSpawnAdapter::setName(String& name) {
	((ResourceSpawnImplementation*) impl)->setName(name);
}

void ResourceSpawnAdapter::setType(String& type) {
	((ResourceSpawnImplementation*) impl)->setType(type);
}

void ResourceSpawnAdapter::setSpawnPool(int pool) {
	((ResourceSpawnImplementation*) impl)->setSpawnPool(pool);
}

void ResourceSpawnAdapter::setZoneRestriction(int zone) {
	((ResourceSpawnImplementation*) impl)->setZoneRestriction(zone);
}

void ResourceSpawnAdapter::addClass(String& newclass) {
	((ResourceSpawnImplementation*) impl)->addClass(newclass);
}

void ResourceSpawnAdapter::addStfClass(String& newclass) {
	((ResourceSpawnImplementation*) impl)->addStfClass(newclass);
}

void ResourceSpawnAdapter::addAttribute(String& attribute, int value) {
	((ResourceSpawnImplementation*) impl)->addAttribute(attribute, value);
}

bool ResourceSpawnAdapter::isType(String& type) {
	return ((ResourceSpawnImplementation*) impl)->isType(type);
}

void ResourceSpawnAdapter::setSurveyToolType(int type) {
	((ResourceSpawnImplementation*) impl)->setSurveyToolType(type);
}

String ResourceSpawnAdapter::getName() {
	return ((ResourceSpawnImplementation*) impl)->getName();
}

String ResourceSpawnAdapter::getType() {
	return ((ResourceSpawnImplementation*) impl)->getType();
}

String ResourceSpawnAdapter::getClass(int index) {
	return ((ResourceSpawnImplementation*) impl)->getClass(index);
}

String ResourceSpawnAdapter::getFinalClass() {
	return ((ResourceSpawnImplementation*) impl)->getFinalClass();
}

void ResourceSpawnAdapter::setSpawned(unsigned long long t) {
	((ResourceSpawnImplementation*) impl)->setSpawned(t);
}

void ResourceSpawnAdapter::setDespawned(unsigned long long t) {
	((ResourceSpawnImplementation*) impl)->setDespawned(t);
}

int ResourceSpawnAdapter::getSpawnPool() {
	return ((ResourceSpawnImplementation*) impl)->getSpawnPool();
}

int ResourceSpawnAdapter::getZoneRestriction() {
	return ((ResourceSpawnImplementation*) impl)->getZoneRestriction();
}

int ResourceSpawnAdapter::getSurveyToolType() {
	return ((ResourceSpawnImplementation*) impl)->getSurveyToolType();
}

int ResourceSpawnAdapter::getSpawnMapSize() {
	return ((ResourceSpawnImplementation*) impl)->getSpawnMapSize();
}

/*
 *	ResourceSpawnHelper
 */

ResourceSpawnHelper* ResourceSpawnHelper::staticInitializer = ResourceSpawnHelper::instance();

ResourceSpawnHelper::ResourceSpawnHelper() {
	className = "ResourceSpawn";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void ResourceSpawnHelper::finalizeHelper() {
	ResourceSpawnHelper::finalize();
}

DistributedObject* ResourceSpawnHelper::instantiateObject() {
	return new ResourceSpawn(DummyConstructorParameter::instance());
}

DistributedObjectServant* ResourceSpawnHelper::instantiateServant() {
	return new ResourceSpawnImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ResourceSpawnHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ResourceSpawnAdapter((ResourceSpawnImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

