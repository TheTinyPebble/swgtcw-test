/*
 *	server/zone/objects/resource/ResourceSpawn.h generated by engine3 IDL compiler 0.60
 */

#ifndef RESOURCESPAWN_H_
#define RESOURCESPAWN_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "engine/core/ManagedObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "engine/log/Logger.h"

namespace server {
namespace zone {
namespace objects {
namespace resource {

class ResourceSpawn : public ManagedObject {
public:
	ResourceSpawn(String& inType);

	void fillAttributeList(AttributeListMessage* msg, PlayerCreature* object);

protected:
	ResourceSpawn(DummyConstructorParameter* param);

	virtual ~ResourceSpawn();

	friend class ResourceSpawnHelper;
};

} // namespace resource
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::resource;

namespace server {
namespace zone {
namespace objects {
namespace resource {

class ResourceSpawnImplementation : public ManagedObjectImplementation, public Logger {
protected:
	String spawnType;

	String spawnName;

	String spawnClass1;

	String spawnClass2;

	String spawnClass3;

	String spawnClass4;

	String spawnClass5;

	String spawnClass6;

	String spawnClass7;

public:
	ResourceSpawnImplementation(String& inType);

	ResourceSpawnImplementation(DummyConstructorParameter* param);

	void fillAttributeList(AttributeListMessage* msg, PlayerCreature* object);

private:
	void setName(String& name);

	void setClass1(String& class1);

	void setClass2(String& class2);

	void setClass3(String& class3);

	void setClass4(String& class4);

	void setClass5(String& class5);

	void setClass6(String& class6);

	void setClass7(String& class7);

	void setAtt1(String& instring);

	void setAtt2(String& instring);

	void setAtt3(String& instring);

	void setAtt4(String& instring);

	void setAtt5(String& instring);

	void setAtt6(String& instring);

	void setAtt7(String& instring);

	void setAtt8(String& instring);

	void setAtt9(String& instring);

	void setAtt10(String& instring);

	void setAtt11(String& instring);

	void setAtt1Stat(int inInt);

	void setAtt2Stat(int inInt);

	void setAtt3Stat(int inInt);

	void setAtt4Stat(int inInt);

	void setAtt5Stat(int inInt);

	void setAtt6Stat(int inInt);

	void setAtt7Stat(int inInt);

	void setAtt8Stat(int inInt);

	void setAtt9Stat(int inInt);

	void setAtt10Stat(int inInt);

	void setAtt11Stat(int inInt);

	void setContainerName(String& instring);

	String getName();

	String getType();

	String getClass1();

	String getClass2();

	String getClass3();

	String getClass4();

	String getClass5();

	String getClass6();

	String getClass7();

	String getAtt1();

	String getAtt2();

	String getAtt3();

	String getAtt4();

	String getAtt5();

	String getAtt6();

	String getAtt7();

	String getAtt8();

	String getAtt9();

	String getAtt10();

	String getAtt11();

	int getAtt1Stat();

	int getAtt2Stat();

	int getAtt3Stat();

	int getAtt4Stat();

	int getAtt5Stat();

	int getAtt6Stat();

	int getAtt7Stat();

	int getAtt8Stat();

	int getAtt9Stat();

	int getAtt10Stat();

	int getAtt11Stat();

	int getMaxType();

	int getMinType();

	int getMaxPool();

	int getMinPool();

	String getContainerName();

	void toString();

public:
	ResourceSpawn* _this;

	operator const ResourceSpawn*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~ResourceSpawnImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();

	friend class ResourceSpawn;
};

class ResourceSpawnAdapter : public ManagedObjectAdapter {
public:
	ResourceSpawnAdapter(ResourceSpawnImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

};

class ResourceSpawnHelper : public DistributedObjectClassHelper, public Singleton<ResourceSpawnHelper> {
	static ResourceSpawnHelper* staticInitializer;

public:
	ResourceSpawnHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<ResourceSpawnHelper>;
};

} // namespace resource
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::resource;

#endif /*RESOURCESPAWN_H_*/
