/*
 *	server/zone/objects/resource/ResourceSpawn.h generated by engine3 IDL compiler 0.60
 */

#ifndef RESOURCESPAWN_H_
#define RESOURCESPAWN_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "engine/core/ManagedObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "engine/log/Logger.h"

#include "system/util/VectorMap.h"

#include "system/util/Vector.h"

namespace server {
namespace zone {
namespace objects {
namespace resource {

class ResourceSpawn : public ManagedObject {
public:
	ResourceSpawn(String& inType);

	void fillAttributeList(AttributeListMessage* msg, PlayerCreature* object);

	void setName(String& name);

	void addClass(String& newclass);

	void addAttribute(String& attribute, int value);

	void setContainerName(String& name);

	String getName();

	String getType();

	String getClass(int index);

	int getAttributeAndValue(String& attribute, int index);

	String getContainerName();

	void toString();

protected:
	ResourceSpawn(DummyConstructorParameter* param);

	virtual ~ResourceSpawn();

	String _return_getClass;
	String _return_getContainerName;
	String _return_getName;
	String _return_getType;

	friend class ResourceSpawnHelper;
};

} // namespace resource
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::resource;

namespace server {
namespace zone {
namespace objects {
namespace resource {

class ResourceSpawnImplementation : public ManagedObjectImplementation, public Logger {
protected:
	String spawnType;

	String spawnName;

	String spawnContainer;

	Vector<String> spawnClasses;

	VectorMap<String, int> spawnAttributes;

public:
	ResourceSpawnImplementation(String& inType);

	ResourceSpawnImplementation(DummyConstructorParameter* param);

	void fillAttributeList(AttributeListMessage* msg, PlayerCreature* object);

	void setName(String& name);

	void addClass(String& newclass);

	void addAttribute(String& attribute, int value);

	void setContainerName(String& name);

	String getName();

	String getType();

	String getClass(int index);

	int getAttributeAndValue(String& attribute, int index);

	String getContainerName();

	void toString();

	ResourceSpawn* _this;

	operator const ResourceSpawn*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~ResourceSpawnImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();

	friend class ResourceSpawn;
};

class ResourceSpawnAdapter : public ManagedObjectAdapter {
public:
	ResourceSpawnAdapter(ResourceSpawnImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void setName(String& name);

	void addClass(String& newclass);

	void addAttribute(String& attribute, int value);

	void setContainerName(String& name);

	String getName();

	String getType();

	String getClass(int index);

	int getAttributeAndValue(String& attribute, int index);

	String getContainerName();

	void toString();

protected:
	String _param0_setName__String_;
	String _param0_addClass__String_;
	String _param0_addAttribute__String_int_;
	String _param0_setContainerName__String_;
	String _param0_getAttributeAndValue__String_int_;
};

class ResourceSpawnHelper : public DistributedObjectClassHelper, public Singleton<ResourceSpawnHelper> {
	static ResourceSpawnHelper* staticInitializer;

public:
	ResourceSpawnHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<ResourceSpawnHelper>;
};

} // namespace resource
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::resource;

#endif /*RESOURCESPAWN_H_*/
