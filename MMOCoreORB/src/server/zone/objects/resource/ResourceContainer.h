/*
 *	server/zone/objects/resource/ResourceContainer.h generated by engine3 IDL compiler 0.60
 */

#ifndef RESOURCECONTAINER_H_
#define RESOURCECONTAINER_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace area {

class ActiveArea;

} // namespace area
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::area;

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

#include "server/zone/objects/resource/ResourceSpawn.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "engine/log/Logger.h"

#include "system/util/VectorMap.h"

#include "system/util/Vector.h"

#include "server/zone/objects/tangible/TangibleObject.h"

namespace server {
namespace zone {
namespace objects {
namespace resource {

class ResourceContainer : public TangibleObject {
public:
	static const int MAXSIZE = 100000;

	ResourceContainer();

	void initializeTransientMembers();

	/**
	 * Destroys this object from database
	 * @pre { this is locked }
	 * @post { this is locked }
	 * @param destroyContainedObjects if true, will destroy from database all its contained objects
	 */
	void destroyObjectFromDatabase(bool destroyContainedObjects = false);

	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	void fillAttributeList(AttributeListMessage* msg, CreatureObject* object);

	/**
	 * Sends the baseline messages of this object to the specified player, needs to be overriden
	 * @pre { this object is locked }
	 * @post { this object is locked, player received the baseline messages }
	 * @param player SceneObject that will receive the baselines 
	 */
	void sendBaselinesTo(SceneObject* player);

	void setQuantity(unsigned int newQuantity, bool notifyClient = true, bool ignoreMax = false);

	bool isResourceContainer();

	int getQuantity();

	int getUseCount();

	void setUseCount(unsigned int newUseCount, bool notifyClient = true);

	void setSpawnObject(ResourceSpawn* spawn);

	String getSpawnName();

	String getSpawnType();

	unsigned long long getSpawnID();

	ResourceSpawn* getSpawnObject();

	void split(int newStackSize);

	void split(int newStackSize, CreatureObject* player);

	void combine(ResourceContainer* fromContainer);

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	ResourceContainer(DummyConstructorParameter* param);

	virtual ~ResourceContainer();

	friend class ResourceContainerHelper;
};

} // namespace resource
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::resource;

namespace server {
namespace zone {
namespace objects {
namespace resource {

class ResourceContainerImplementation : public TangibleObjectImplementation {
protected:
	ManagedReference<ResourceSpawn* > spawnObject;

	int stackQuantity;

public:
	static const int MAXSIZE = 100000;

	ResourceContainerImplementation();

	ResourceContainerImplementation(DummyConstructorParameter* param);

	void initializeTransientMembers();

	/**
	 * Destroys this object from database
	 * @pre { this is locked }
	 * @post { this is locked }
	 * @param destroyContainedObjects if true, will destroy from database all its contained objects
	 */
	void destroyObjectFromDatabase(bool destroyContainedObjects = false);

	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	void fillAttributeList(AttributeListMessage* msg, CreatureObject* object);

	/**
	 * Sends the baseline messages of this object to the specified player, needs to be overriden
	 * @pre { this object is locked }
	 * @post { this object is locked, player received the baseline messages }
	 * @param player SceneObject that will receive the baselines 
	 */
	void sendBaselinesTo(SceneObject* player);

	void setQuantity(unsigned int newQuantity, bool notifyClient = true, bool ignoreMax = false);

	bool isResourceContainer();

	int getQuantity();

	int getUseCount();

	void setUseCount(unsigned int newUseCount, bool notifyClient = true);

	void setSpawnObject(ResourceSpawn* spawn);

	String getSpawnName();

	String getSpawnType();

	unsigned long long getSpawnID();

	ResourceSpawn* getSpawnObject();

	void split(int newStackSize);

	void split(int newStackSize, CreatureObject* player);

	void combine(ResourceContainer* fromContainer);

	WeakReference<ResourceContainer*> _this;

	operator const ResourceContainer*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~ResourceContainerImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class ResourceContainer;
};

class ResourceContainerAdapter : public TangibleObjectAdapter {
public:
	ResourceContainerAdapter(ResourceContainer* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initializeTransientMembers();

	void destroyObjectFromDatabase(bool destroyContainedObjects);

	void sendBaselinesTo(SceneObject* player);

	void setQuantity(unsigned int newQuantity, bool notifyClient, bool ignoreMax);

	bool isResourceContainer();

	int getQuantity();

	int getUseCount();

	void setUseCount(unsigned int newUseCount, bool notifyClient);

	void setSpawnObject(ResourceSpawn* spawn);

	String getSpawnName();

	String getSpawnType();

	unsigned long long getSpawnID();

	ResourceSpawn* getSpawnObject();

	void split(int newStackSize);

	void split(int newStackSize, CreatureObject* player);

	void combine(ResourceContainer* fromContainer);

};

class ResourceContainerHelper : public DistributedObjectClassHelper, public Singleton<ResourceContainerHelper> {
	static ResourceContainerHelper* staticInitializer;

public:
	ResourceContainerHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<ResourceContainerHelper>;
};

} // namespace resource
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::resource;

#endif /*RESOURCECONTAINER_H_*/
