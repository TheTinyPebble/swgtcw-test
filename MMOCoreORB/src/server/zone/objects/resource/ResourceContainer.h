/*
 *	server/zone/objects/resource/ResourceContainer.h generated by engine3 IDL compiler 0.60
 */

#ifndef RESOURCECONTAINER_H_
#define RESOURCECONTAINER_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace resource {

class ResourceSpawn;

} // namespace resource
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::resource;

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "engine/log/Logger.h"

#include "system/util/VectorMap.h"

#include "system/util/Vector.h"

#include "server/zone/objects/tangible/TangibleObject.h"

namespace server {
namespace zone {
namespace objects {
namespace resource {

class ResourceContainer : public TangibleObject {
public:
	ResourceContainer(ResourceSpawn* spawn);

	void fillAttributeList(AttributeListMessage* msg, PlayerCreature* object);

protected:
	ResourceContainer(DummyConstructorParameter* param);

	virtual ~ResourceContainer();

	friend class ResourceContainerHelper;
};

} // namespace resource
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::resource;

namespace server {
namespace zone {
namespace objects {
namespace resource {

class ResourceContainerImplementation : public TangibleObjectImplementation {
	ManagedReference<ResourceSpawn* > spawnObject;

public:
	ResourceContainerImplementation(ResourceSpawn* spawn);

	ResourceContainerImplementation(DummyConstructorParameter* param);

	void fillAttributeList(AttributeListMessage* msg, PlayerCreature* object);

	ResourceContainer* _this;

	operator const ResourceContainer*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~ResourceContainerImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();

	friend class ResourceContainer;
};

class ResourceContainerAdapter : public TangibleObjectAdapter {
public:
	ResourceContainerAdapter(ResourceContainerImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

};

class ResourceContainerHelper : public DistributedObjectClassHelper, public Singleton<ResourceContainerHelper> {
	static ResourceContainerHelper* staticInitializer;

public:
	ResourceContainerHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<ResourceContainerHelper>;
};

} // namespace resource
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::resource;

#endif /*RESOURCECONTAINER_H_*/
