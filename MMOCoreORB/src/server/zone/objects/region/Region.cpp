/*
 *	server/zone/objects/region/Region.cpp generated by engine3 IDL compiler 0.60
 */

#include "Region.h"

#include "server/zone/objects/tangible/terminal/bazaar/BazaarTerminal.h"

/*
 *	RegionStub
 */

Region::Region(const String& fullName, float posX, float posY, float radi) : ManagedObject(DummyConstructorParameter::instance()) {
	_impl = new RegionImplementation(fullName, posX, posY, radi);
	_impl->_setStub(this);
}

Region::Region(DummyConstructorParameter* param) : ManagedObject(param) {
}

Region::~Region() {
}


bool Region::containsPoint(float px, float py) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addFloatParameter(px);
		method.addFloatParameter(py);

		return method.executeWithBooleanReturn();
	} else
		return ((RegionImplementation*) _impl)->containsPoint(px, py);
}

void Region::addPoint(float px, float py, float radius) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addFloatParameter(px);
		method.addFloatParameter(py);
		method.addFloatParameter(radius);

		method.executeWithVoidReturn();
	} else
		((RegionImplementation*) _impl)->addPoint(px, py, radius);
}

void Region::addBazaar(BazaarTerminal* ter) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(ter);

		method.executeWithVoidReturn();
	} else
		((RegionImplementation*) _impl)->addBazaar(ter);
}

BazaarTerminal* Region::getBazaar(int idx) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addSignedIntParameter(idx);

		return (BazaarTerminal*) method.executeWithObjectReturn();
	} else
		return ((RegionImplementation*) _impl)->getBazaar(idx);
}

int Region::getBazaarCount() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		return method.executeWithSignedIntReturn();
	} else
		return ((RegionImplementation*) _impl)->getBazaarCount();
}

StringId* Region::getName() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((RegionImplementation*) _impl)->getName();
}

String Region::getRegionName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		method.executeWithAsciiReturn(_return_getRegionName);
		return _return_getRegionName;
	} else
		return ((RegionImplementation*) _impl)->getRegionName();
}

/*
 *	RegionImplementation
 */

RegionImplementation::RegionImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}

RegionImplementation::~RegionImplementation() {
}


void RegionImplementation::finalize() {
}

void RegionImplementation::_initializeImplementation() {
	_setClassHelper(RegionHelper::instance());

	_serializationHelperMethod();
}

void RegionImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (Region*) stub;
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* RegionImplementation::_getStub() {
	return _this;
}

RegionImplementation::operator const Region*() {
	return _this;
}

void RegionImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void RegionImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void RegionImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void RegionImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void RegionImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void RegionImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void RegionImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void RegionImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("Region");

	addSerializableVariable("name", &name);
	addSerializableVariable("points", &points);
	addSerializableVariable("bazaars", &bazaars);
}

RegionImplementation::RegionImplementation(const String& fullName, float posX, float posY, float radi) {
	_initializeImplementation();
	// server/zone/objects/region/Region.idl(66):  		name.setStringId(fullName);
	(&name)->setStringId(fullName);
	// server/zone/objects/region/Region.idl(68):  		bazaars.setNoDuplicateInsertPlan();
	(&bazaars)->setNoDuplicateInsertPlan();
	// server/zone/objects/region/Region.idl(69):  		bazaars.setNullValue(null);
	(&bazaars)->setNullValue(NULL);
	// server/zone/objects/region/Region.idl(71):  		points.addRegion(posX, posY, radi);
	(&points)->addRegion(posX, posY, radi);
}

void RegionImplementation::addPoint(float px, float py, float radius) {
	// server/zone/objects/region/Region.idl(78):  		points.addRegion(px, py, radius);
	(&points)->addRegion(px, py, radius);
}

void RegionImplementation::addBazaar(BazaarTerminal* ter) {
	// server/zone/objects/region/Region.idl(82):  		bazaars.put(ter.getObjectID(), ter);
	(&bazaars)->put(ter->getObjectID(), ter);
}

BazaarTerminal* RegionImplementation::getBazaar(int idx) {
	// server/zone/objects/region/Region.idl(86):  		return bazaars.get(idx);
	return (&bazaars)->get(idx);
}

int RegionImplementation::getBazaarCount() {
	// server/zone/objects/region/Region.idl(90):  		return bazaars.size();
	return (&bazaars)->size();
}

StringId* RegionImplementation::getName() {
	// server/zone/objects/region/Region.idl(95):  		return name;
	return (&name);
}

String RegionImplementation::getRegionName() {
	// server/zone/objects/region/Region.idl(99):  		return name.getStringID();
	return (&name)->getStringID();
}

/*
 *	RegionAdapter
 */

RegionAdapter::RegionAdapter(RegionImplementation* obj) : ManagedObjectAdapter(obj) {
}

Packet* RegionAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertBoolean(containsPoint(inv->getFloatParameter(), inv->getFloatParameter()));
		break;
	case 7:
		addPoint(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter());
		break;
	case 8:
		addBazaar((BazaarTerminal*) inv->getObjectParameter());
		break;
	case 9:
		resp->insertLong(getBazaar(inv->getSignedIntParameter())->_getObjectID());
		break;
	case 10:
		resp->insertSignedInt(getBazaarCount());
		break;
	case 11:
		resp->insertAscii(getRegionName());
		break;
	default:
		return NULL;
	}

	return resp;
}

bool RegionAdapter::containsPoint(float px, float py) {
	return ((RegionImplementation*) impl)->containsPoint(px, py);
}

void RegionAdapter::addPoint(float px, float py, float radius) {
	((RegionImplementation*) impl)->addPoint(px, py, radius);
}

void RegionAdapter::addBazaar(BazaarTerminal* ter) {
	((RegionImplementation*) impl)->addBazaar(ter);
}

BazaarTerminal* RegionAdapter::getBazaar(int idx) {
	return ((RegionImplementation*) impl)->getBazaar(idx);
}

int RegionAdapter::getBazaarCount() {
	return ((RegionImplementation*) impl)->getBazaarCount();
}

String RegionAdapter::getRegionName() {
	return ((RegionImplementation*) impl)->getRegionName();
}

/*
 *	RegionHelper
 */

RegionHelper* RegionHelper::staticInitializer = RegionHelper::instance();

RegionHelper::RegionHelper() {
	className = "Region";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void RegionHelper::finalizeHelper() {
	RegionHelper::finalize();
}

DistributedObject* RegionHelper::instantiateObject() {
	return new Region(DummyConstructorParameter::instance());
}

DistributedObjectServant* RegionHelper::instantiateServant() {
	return new RegionImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* RegionHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new RegionAdapter((RegionImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

