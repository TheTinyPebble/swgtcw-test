/*
 *	server/zone/objects/region/Region.cpp generated by engine3 IDL compiler 0.60
 */

#include "Region.h"

#include "server/zone/objects/tangible/terminal/bazaar/BazaarTerminal.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/creature/shuttle/ShuttleCreature.h"

#include "server/zone/objects/building/city/CityHallObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/installation/bank/BankInstallation.h"

#include "server/zone/objects/installation/shuttle/ShuttleInstallation.h"

#include "server/zone/Zone.h"

/*
 *	RegionStub
 */

Region::Region() : ActiveArea(DummyConstructorParameter::instance()) {
	_impl = new RegionImplementation();
	_impl->_setStub(this);
}

Region::Region(DummyConstructorParameter* param) : ActiveArea(param) {
}

Region::~Region() {
}


void Region::notifyEnter(SceneObject* object) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		((RegionImplementation*) _impl)->notifyEnter(object);
}

void Region::sendGreetingMessage(PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((RegionImplementation*) _impl)->sendGreetingMessage(player);
}

void Region::sendDepartingMessage(PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((RegionImplementation*) _impl)->sendDepartingMessage(player);
}

void Region::notifyExit(SceneObject* object) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		((RegionImplementation*) _impl)->notifyExit(object);
}

void Region::insertToZone(Zone* zone) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(zone);

		method.executeWithVoidReturn();
	} else
		((RegionImplementation*) _impl)->insertToZone(zone);
}

void Region::removeFromZone() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		method.executeWithVoidReturn();
	} else
		((RegionImplementation*) _impl)->removeFromZone();
}

void Region::despawnCityObjects() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		method.executeWithVoidReturn();
	} else
		((RegionImplementation*) _impl)->despawnCityObjects();
}

void Region::addBazaar(BazaarTerminal* ter) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addObjectParameter(ter);

		method.executeWithVoidReturn();
	} else
		((RegionImplementation*) _impl)->addBazaar(ter);
}

BazaarTerminal* Region::getBazaar(int idx) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addSignedIntParameter(idx);

		return (BazaarTerminal*) method.executeWithObjectReturn();
	} else
		return ((RegionImplementation*) _impl)->getBazaar(idx);
}

ShuttleInstallation* Region::getShuttle() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		return (ShuttleInstallation*) method.executeWithObjectReturn();
	} else
		return ((RegionImplementation*) _impl)->getShuttle();
}

int Region::getBazaarCount() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		return method.executeWithSignedIntReturn();
	} else
		return ((RegionImplementation*) _impl)->getBazaarCount();
}

bool Region::isRegion() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);

		return method.executeWithBooleanReturn();
	} else
		return ((RegionImplementation*) _impl)->isRegion();
}

CityHallObject* Region::getCityHall() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		return (CityHallObject*) method.executeWithObjectReturn();
	} else
		return ((RegionImplementation*) _impl)->getCityHall();
}

void Region::setCityHall(CityHallObject* hall) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addObjectParameter(hall);

		method.executeWithVoidReturn();
	} else
		((RegionImplementation*) _impl)->setCityHall(hall);
}

/*
 *	RegionImplementation
 */

RegionImplementation::RegionImplementation(DummyConstructorParameter* param) : ActiveAreaImplementation(param) {
	_initializeImplementation();
}


RegionImplementation::~RegionImplementation() {
}


void RegionImplementation::finalize() {
}

void RegionImplementation::_initializeImplementation() {
	_setClassHelper(RegionHelper::instance());

	_serializationHelperMethod();
}

void RegionImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (Region*) stub;
	ActiveAreaImplementation::_setStub(stub);
}

DistributedObjectStub* RegionImplementation::_getStub() {
	return _this;
}

RegionImplementation::operator const Region*() {
	return _this;
}

void RegionImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void RegionImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void RegionImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void RegionImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void RegionImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void RegionImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void RegionImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void RegionImplementation::_serializationHelperMethod() {
	ActiveAreaImplementation::_serializationHelperMethod();

	_setClassName("Region");

	addSerializableVariable("bazaars", &bazaars);
	addSerializableVariable("banks", &banks);
	addSerializableVariable("shuttleInstallation", &shuttleInstallation);
	addSerializableVariable("cityHall", &cityHall);
}

RegionImplementation::RegionImplementation() : ActiveAreaImplementation() {
	_initializeImplementation();
	// server/zone/objects/region/Region.idl(78):  		bazaars.setNoDuplicateInsertPlan();
	(&bazaars)->setNoDuplicateInsertPlan();
	// server/zone/objects/region/Region.idl(79):  		bazaars.setNullValue(null);
	(&bazaars)->setNullValue(NULL);
	// server/zone/objects/region/Region.idl(81):  		banks.setNoDuplicateInsertPlan();
	(&banks)->setNoDuplicateInsertPlan();
}

void RegionImplementation::notifyEnter(SceneObject* object) {
	// server/zone/objects/region/Region.idl(85):  		if 
	if (object->isBazaarTerminal()){
	// server/zone/objects/region/Region.idl(86):  			bazaars.put(object.getObjectID(), (BazaarTerminal)object);
	(&bazaars)->put(object->getObjectID(), (BazaarTerminal*) object);
}
	// server/zone/objects/region/Region.idl(89):  		if 
	if (object->isPlayerCreature()){
	// server/zone/objects/region/Region.idl(90):  			sendGreetingMessage((PlayerCreature) object);
	sendGreetingMessage((PlayerCreature*) object);
}
	// server/zone/objects/region/Region.idl(93):  		if 
	if (object->isBankInstallation()){
	// server/zone/objects/region/Region.idl(94):  			banks.put((BankInstallation)object);
	(&banks)->put((BankInstallation*) object);
}
	// server/zone/objects/region/Region.idl(97):  	}
	if (object->isShuttleInstallation()){
	// server/zone/objects/region/Region.idl(98):  			shuttleInstallation = (ShuttleInstallation) object;
	shuttleInstallation = (ShuttleInstallation*) object;
}
}

void RegionImplementation::notifyExit(SceneObject* object) {
	// server/zone/objects/region/Region.idl(106):  		if 
	if (object->isBazaarTerminal()){
	// server/zone/objects/region/Region.idl(107):  			bazaars.drop(object.getObjectID());
	(&bazaars)->drop(object->getObjectID());
}
	// server/zone/objects/region/Region.idl(110):  		if 
	if (object->isPlayerCreature()){
	// server/zone/objects/region/Region.idl(111):  			sendDepartingMessage((PlayerCreature) object);
	sendDepartingMessage((PlayerCreature*) object);
}
	// server/zone/objects/region/Region.idl(114):  		if 
	if (object->isBankInstallation()){
	// server/zone/objects/region/Region.idl(115):  			banks.drop((BankInstallation)object);
	(&banks)->drop((BankInstallation*) object);
}
	// server/zone/objects/region/Region.idl(118):  	}
	if (object == shuttleInstallation){
	// server/zone/objects/region/Region.idl(119):  			shuttleInstallation = null;
	shuttleInstallation = NULL;
}
}

void RegionImplementation::removeFromZone() {
	// server/zone/objects/region/Region.idl(132):  		despawnCityObjects();
	despawnCityObjects();
	// server/zone/objects/region/Region.idl(134):  		super.removeFromZone();
	ActiveAreaImplementation::removeFromZone();
	// server/zone/objects/region/Region.idl(136):  		updateToDatabaseWithoutChildren();
	updateToDatabaseWithoutChildren();
}

void RegionImplementation::addBazaar(BazaarTerminal* ter) {
	// server/zone/objects/region/Region.idl(142):  		bazaars.put(ter.getObjectID(), ter);
	(&bazaars)->put(ter->getObjectID(), ter);
}

BazaarTerminal* RegionImplementation::getBazaar(int idx) {
	// server/zone/objects/region/Region.idl(146):  		return bazaars.get(idx);
	return (&bazaars)->get(idx);
}

ShuttleInstallation* RegionImplementation::getShuttle() {
	// server/zone/objects/region/Region.idl(150):  		return shuttleInstallation;
	return shuttleInstallation;
}

int RegionImplementation::getBazaarCount() {
	// server/zone/objects/region/Region.idl(154):  		return bazaars.size();
	return (&bazaars)->size();
}

bool RegionImplementation::isRegion() {
	// server/zone/objects/region/Region.idl(158):  		return true;
	return true;
}

CityHallObject* RegionImplementation::getCityHall() {
	// server/zone/objects/region/Region.idl(162):  		return cityHall;
	return cityHall;
}

void RegionImplementation::setCityHall(CityHallObject* hall) {
	// server/zone/objects/region/Region.idl(166):  		cityHall = hall;
	cityHall = hall;
}

/*
 *	RegionAdapter
 */

RegionAdapter::RegionAdapter(RegionImplementation* obj) : ActiveAreaAdapter(obj) {
}

Packet* RegionAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		notifyEnter((SceneObject*) inv->getObjectParameter());
		break;
	case 7:
		sendGreetingMessage((PlayerCreature*) inv->getObjectParameter());
		break;
	case 8:
		sendDepartingMessage((PlayerCreature*) inv->getObjectParameter());
		break;
	case 9:
		notifyExit((SceneObject*) inv->getObjectParameter());
		break;
	case 10:
		insertToZone((Zone*) inv->getObjectParameter());
		break;
	case 11:
		removeFromZone();
		break;
	case 12:
		despawnCityObjects();
		break;
	case 13:
		addBazaar((BazaarTerminal*) inv->getObjectParameter());
		break;
	case 14:
		resp->insertLong(getBazaar(inv->getSignedIntParameter())->_getObjectID());
		break;
	case 15:
		resp->insertLong(getShuttle()->_getObjectID());
		break;
	case 16:
		resp->insertSignedInt(getBazaarCount());
		break;
	case 17:
		resp->insertBoolean(isRegion());
		break;
	case 18:
		resp->insertLong(getCityHall()->_getObjectID());
		break;
	case 19:
		setCityHall((CityHallObject*) inv->getObjectParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void RegionAdapter::notifyEnter(SceneObject* object) {
	((RegionImplementation*) impl)->notifyEnter(object);
}

void RegionAdapter::sendGreetingMessage(PlayerCreature* player) {
	((RegionImplementation*) impl)->sendGreetingMessage(player);
}

void RegionAdapter::sendDepartingMessage(PlayerCreature* player) {
	((RegionImplementation*) impl)->sendDepartingMessage(player);
}

void RegionAdapter::notifyExit(SceneObject* object) {
	((RegionImplementation*) impl)->notifyExit(object);
}

void RegionAdapter::insertToZone(Zone* zone) {
	((RegionImplementation*) impl)->insertToZone(zone);
}

void RegionAdapter::removeFromZone() {
	((RegionImplementation*) impl)->removeFromZone();
}

void RegionAdapter::despawnCityObjects() {
	((RegionImplementation*) impl)->despawnCityObjects();
}

void RegionAdapter::addBazaar(BazaarTerminal* ter) {
	((RegionImplementation*) impl)->addBazaar(ter);
}

BazaarTerminal* RegionAdapter::getBazaar(int idx) {
	return ((RegionImplementation*) impl)->getBazaar(idx);
}

ShuttleInstallation* RegionAdapter::getShuttle() {
	return ((RegionImplementation*) impl)->getShuttle();
}

int RegionAdapter::getBazaarCount() {
	return ((RegionImplementation*) impl)->getBazaarCount();
}

bool RegionAdapter::isRegion() {
	return ((RegionImplementation*) impl)->isRegion();
}

CityHallObject* RegionAdapter::getCityHall() {
	return ((RegionImplementation*) impl)->getCityHall();
}

void RegionAdapter::setCityHall(CityHallObject* hall) {
	((RegionImplementation*) impl)->setCityHall(hall);
}

/*
 *	RegionHelper
 */

RegionHelper* RegionHelper::staticInitializer = RegionHelper::instance();

RegionHelper::RegionHelper() {
	className = "Region";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void RegionHelper::finalizeHelper() {
	RegionHelper::finalize();
}

DistributedObject* RegionHelper::instantiateObject() {
	return new Region(DummyConstructorParameter::instance());
}

DistributedObjectServant* RegionHelper::instantiateServant() {
	return new RegionImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* RegionHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new RegionAdapter((RegionImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

