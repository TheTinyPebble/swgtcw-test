/*
 *	server/zone/objects/region/CityRegion.cpp generated by engine3 IDL compiler 0.60
 */

#include "CityRegion.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/region/Region.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/structure/StructureObject.h"

#include "server/zone/Zone.h"

/*
 *	CityRegionStub
 */

enum {RPC_INITIALIZE__ = 6,RPC_INITIALIZETRANSIENTMEMBERS__,RPC_NOTIFYENTER__SCENEOBJECT_,RPC_NOTIFYEXIT__SCENEOBJECT_,RPC_ADDREGION__FLOAT_FLOAT_FLOAT_,RPC_RESCHEDULEUPDATEEVENT__INT_,RPC_DESTROYACTIVEAREAS__,RPC_ADDMILITIAMEMBER__LONG_,RPC_REMOVEMILITIAMEMBER__LONG_,RPC_ISMILITIAMEMBER__LONG_,RPC_ADDZONINGRIGHTS__LONG_INT_,RPC_REMOVEZONINGRIGHTS__LONG_,RPC_HASZONINGRIGHTS__LONG_,RPC_CONTAINSPOINT__FLOAT_FLOAT_,RPC_ADDCITIZEN__LONG_,RPC_REMOVECITIZEN__LONG_,RPC_ADDBANNEDPLAYER__LONG_,RPC_REMOVEBANNEDPLAYER__LONG_,RPC_ISCITIZEN__LONG_,RPC_GETTIMETOUPDATE__,RPC_GETCITIZENCOUNT__,RPC_GETCITYRANK__,RPC_ISBANNED__LONG_,RPC_ISREGISTERED__,RPC_GETZONE__,RPC_GETREGIONNAME__,RPC_GETMAYORID__,RPC_GETPOSITIONX__,RPC_GETPOSITIONY__,RPC_GETRADIUS__,RPC_GETREGION__INT_,RPC_GETREGIONSCOUNT__,RPC_GETSTRUCTURESCOUNT__,RPC_GETCITYSPECIALIZATION__,RPC_GETCITYTREASURY__,RPC_ISMAYOR__LONG_,RPC_ISZONINGENABLED__,RPC_ISCLIENTREGION__,RPC_GETCITYHALL__,RPC_SETZONE__ZONE_,RPC_SETREGIONNAME__UNICODESTRING_,RPC_SETCITYSPECIALIZATION__STRING_,RPC_SETREGIONNAME__STRING_,RPC_SETCITYTREASURY__INT_,RPC_ADDTOCITYTREASURY__INT_,RPC_SUBTRACTFROMCITYTREASURY__INT_,RPC_GETMAXWITHDRAWAL__,RPC_SETCITYRANK__BYTE_,RPC_SETMAYORID__LONG_,RPC_SETREGISTERED__BOOL_,RPC_SETZONINGENABLED__BOOL_,RPC_SETRADIUS__FLOAT_,RPC_SETCITYHALL__STRUCTUREOBJECT_};

CityRegion::CityRegion() : ManagedObject(DummyConstructorParameter::instance()) {
	CityRegionImplementation* _implementation = new CityRegionImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

CityRegion::CityRegion(DummyConstructorParameter* param) : ManagedObject(param) {
}

CityRegion::~CityRegion() {
}



void CityRegion::initialize() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZE__);

		method.executeWithVoidReturn();
	} else
		_implementation->initialize();
}

void CityRegion::initializeTransientMembers() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void CityRegion::notifyEnter(SceneObject* object) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYENTER__SCENEOBJECT_);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyEnter(object);
}

void CityRegion::notifyExit(SceneObject* object) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYEXIT__SCENEOBJECT_);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyExit(object);
}

Region* CityRegion::addRegion(float x, float y, float radius) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDREGION__FLOAT_FLOAT_FLOAT_);
		method.addFloatParameter(x);
		method.addFloatParameter(y);
		method.addFloatParameter(radius);

		return static_cast<Region*>(method.executeWithObjectReturn());
	} else
		return _implementation->addRegion(x, y, radius);
}

void CityRegion::rescheduleUpdateEvent(unsigned int seconds) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RESCHEDULEUPDATEEVENT__INT_);
		method.addUnsignedIntParameter(seconds);

		method.executeWithVoidReturn();
	} else
		_implementation->rescheduleUpdateEvent(seconds);
}

void CityRegion::destroyActiveAreas() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DESTROYACTIVEAREAS__);

		method.executeWithVoidReturn();
	} else
		_implementation->destroyActiveAreas();
}

void CityRegion::addMilitiaMember(unsigned long long objectid) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDMILITIAMEMBER__LONG_);
		method.addUnsignedLongParameter(objectid);

		method.executeWithVoidReturn();
	} else
		_implementation->addMilitiaMember(objectid);
}

void CityRegion::removeMilitiaMember(unsigned long long objectid) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEMILITIAMEMBER__LONG_);
		method.addUnsignedLongParameter(objectid);

		method.executeWithVoidReturn();
	} else
		_implementation->removeMilitiaMember(objectid);
}

bool CityRegion::isMilitiaMember(unsigned long long objectid) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISMILITIAMEMBER__LONG_);
		method.addUnsignedLongParameter(objectid);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isMilitiaMember(objectid);
}

void CityRegion::addZoningRights(unsigned long long objectid, unsigned int duration) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDZONINGRIGHTS__LONG_INT_);
		method.addUnsignedLongParameter(objectid);
		method.addUnsignedIntParameter(duration);

		method.executeWithVoidReturn();
	} else
		_implementation->addZoningRights(objectid, duration);
}

void CityRegion::removeZoningRights(unsigned long long objectid) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEZONINGRIGHTS__LONG_);
		method.addUnsignedLongParameter(objectid);

		method.executeWithVoidReturn();
	} else
		_implementation->removeZoningRights(objectid);
}

bool CityRegion::hasZoningRights(unsigned long long objectid) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASZONINGRIGHTS__LONG_);
		method.addUnsignedLongParameter(objectid);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasZoningRights(objectid);
}

bool CityRegion::containsPoint(float x, float y) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CONTAINSPOINT__FLOAT_FLOAT_);
		method.addFloatParameter(x);
		method.addFloatParameter(y);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->containsPoint(x, y);
}

void CityRegion::addCitizen(unsigned long long citizenID) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDCITIZEN__LONG_);
		method.addUnsignedLongParameter(citizenID);

		method.executeWithVoidReturn();
	} else
		_implementation->addCitizen(citizenID);
}

void CityRegion::removeCitizen(unsigned long long citizenID) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVECITIZEN__LONG_);
		method.addUnsignedLongParameter(citizenID);

		method.executeWithVoidReturn();
	} else
		_implementation->removeCitizen(citizenID);
}

void CityRegion::addBannedPlayer(unsigned long long playerid) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDBANNEDPLAYER__LONG_);
		method.addUnsignedLongParameter(playerid);

		method.executeWithVoidReturn();
	} else
		_implementation->addBannedPlayer(playerid);
}

void CityRegion::removeBannedPlayer(unsigned long long playerid) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEBANNEDPLAYER__LONG_);
		method.addUnsignedLongParameter(playerid);

		method.executeWithVoidReturn();
	} else
		_implementation->removeBannedPlayer(playerid);
}

bool CityRegion::isCitizen(unsigned long long citizenID) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCITIZEN__LONG_);
		method.addUnsignedLongParameter(citizenID);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isCitizen(citizenID);
}

int CityRegion::getTimeToUpdate() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTIMETOUPDATE__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getTimeToUpdate();
}

int CityRegion::getCitizenCount() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCITIZENCOUNT__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getCitizenCount();
}

byte CityRegion::getCityRank() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCITYRANK__);

		return method.executeWithByteReturn();
	} else
		return _implementation->getCityRank();
}

bool CityRegion::isBanned(unsigned long long playerID) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISBANNED__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isBanned(playerID);
}

CitizenList* CityRegion::getCitizenList() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getCitizenList();
}

CitizenList* CityRegion::getMilitiaMembers() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getMilitiaMembers();
}

CitizenList* CityRegion::getBannedPlayers() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getBannedPlayers();
}

bool CityRegion::isRegistered() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISREGISTERED__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isRegistered();
}

Zone* CityRegion::getZone() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETZONE__);

		return static_cast<Zone*>(method.executeWithObjectReturn());
	} else
		return _implementation->getZone();
}

String CityRegion::getRegionName() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETREGIONNAME__);

		method.executeWithAsciiReturn(_return_getRegionName);
		return _return_getRegionName;
	} else
		return _implementation->getRegionName();
}

unsigned long long CityRegion::getMayorID() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMAYORID__);

		return method.executeWithUnsignedLongReturn();
	} else
		return _implementation->getMayorID();
}

float CityRegion::getPositionX() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPOSITIONX__);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getPositionX();
}

float CityRegion::getPositionY() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPOSITIONY__);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getPositionY();
}

float CityRegion::getRadius() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETRADIUS__);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getRadius();
}

Region* CityRegion::getRegion(int idx) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETREGION__INT_);
		method.addSignedIntParameter(idx);

		return static_cast<Region*>(method.executeWithObjectReturn());
	} else
		return _implementation->getRegion(idx);
}

int CityRegion::getRegionsCount() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETREGIONSCOUNT__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getRegionsCount();
}

int CityRegion::getStructuresCount() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSTRUCTURESCOUNT__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getStructuresCount();
}

String CityRegion::getCitySpecialization() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCITYSPECIALIZATION__);

		method.executeWithAsciiReturn(_return_getCitySpecialization);
		return _return_getCitySpecialization;
	} else
		return _implementation->getCitySpecialization();
}

int CityRegion::getCityTreasury() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCITYTREASURY__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getCityTreasury();
}

bool CityRegion::isMayor(unsigned long long objectid) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISMAYOR__LONG_);
		method.addUnsignedLongParameter(objectid);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isMayor(objectid);
}

bool CityRegion::isZoningEnabled() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISZONINGENABLED__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isZoningEnabled();
}

bool CityRegion::isClientRegion() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCLIENTREGION__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isClientRegion();
}

StructureObject* CityRegion::getCityHall() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCITYHALL__);

		return static_cast<StructureObject*>(method.executeWithObjectReturn());
	} else
		return _implementation->getCityHall();
}

void CityRegion::setZone(Zone* zne) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETZONE__ZONE_);
		method.addObjectParameter(zne);

		method.executeWithVoidReturn();
	} else
		_implementation->setZone(zne);
}

void CityRegion::setRegionName(const UnicodeString& name) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETREGIONNAME__UNICODESTRING_);
		method.addUnicodeParameter(name);

		method.executeWithVoidReturn();
	} else
		_implementation->setRegionName(name);
}

void CityRegion::setCitySpecialization(const String& spec) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCITYSPECIALIZATION__STRING_);
		method.addAsciiParameter(spec);

		method.executeWithVoidReturn();
	} else
		_implementation->setCitySpecialization(spec);
}

void CityRegion::setRegionName(const String& fullPath) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETREGIONNAME__STRING_);
		method.addAsciiParameter(fullPath);

		method.executeWithVoidReturn();
	} else
		_implementation->setRegionName(fullPath);
}

void CityRegion::setCityTreasury(int val) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCITYTREASURY__INT_);
		method.addSignedIntParameter(val);

		method.executeWithVoidReturn();
	} else
		_implementation->setCityTreasury(val);
}

int CityRegion::addToCityTreasury(int val) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDTOCITYTREASURY__INT_);
		method.addSignedIntParameter(val);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->addToCityTreasury(val);
}

int CityRegion::subtractFromCityTreasury(int val) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SUBTRACTFROMCITYTREASURY__INT_);
		method.addSignedIntParameter(val);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->subtractFromCityTreasury(val);
}

int CityRegion::getMaxWithdrawal() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMAXWITHDRAWAL__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getMaxWithdrawal();
}

Vector<ManagedReference<SceneObject* > >* CityRegion::getVendorsInCity() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getVendorsInCity();
}

void CityRegion::setRegionName(const StringId& name) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->setRegionName(name);
}

void CityRegion::setCityRank(byte rank) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCITYRANK__BYTE_);
		method.addByteParameter(rank);

		method.executeWithVoidReturn();
	} else
		_implementation->setCityRank(rank);
}

void CityRegion::setMayorID(unsigned long long id) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMAYORID__LONG_);
		method.addUnsignedLongParameter(id);

		method.executeWithVoidReturn();
	} else
		_implementation->setMayorID(id);
}

void CityRegion::setRegistered(bool val) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETREGISTERED__BOOL_);
		method.addBooleanParameter(val);

		method.executeWithVoidReturn();
	} else
		_implementation->setRegistered(val);
}

void CityRegion::setZoningEnabled(bool val) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETZONINGENABLED__BOOL_);
		method.addBooleanParameter(val);

		method.executeWithVoidReturn();
	} else
		_implementation->setZoningEnabled(val);
}

void CityRegion::setRadius(float rad) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETRADIUS__FLOAT_);
		method.addFloatParameter(rad);

		method.executeWithVoidReturn();
	} else
		_implementation->setRadius(rad);
}

void CityRegion::setCityHall(StructureObject* building) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCITYHALL__STRUCTUREOBJECT_);
		method.addObjectParameter(building);

		method.executeWithVoidReturn();
	} else
		_implementation->setCityHall(building);
}

DistributedObjectServant* CityRegion::_getImplementation() {

	_updated = true;
	return _impl;
}

void CityRegion::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	CityRegionImplementation
 */

CityRegionImplementation::CityRegionImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}


CityRegionImplementation::~CityRegionImplementation() {
}


void CityRegionImplementation::finalize() {
}

void CityRegionImplementation::_initializeImplementation() {
	_setClassHelper(CityRegionHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void CityRegionImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<CityRegion*>(stub);
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* CityRegionImplementation::_getStub() {
	return _this;
}

CityRegionImplementation::operator const CityRegion*() {
	return _this;
}

void CityRegionImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void CityRegionImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void CityRegionImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void CityRegionImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void CityRegionImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void CityRegionImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void CityRegionImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void CityRegionImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("CityRegion");

}

void CityRegionImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(CityRegionImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool CityRegionImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ManagedObjectImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "cityHall") {
		TypeInfo<ManagedReference<StructureObject* > >::parseFromBinaryStream(&cityHall, stream);
		return true;
	}

	if (_name == "regionName") {
		TypeInfo<StringId >::parseFromBinaryStream(&regionName, stream);
		return true;
	}

	if (_name == "zone") {
		TypeInfo<ZoneReference >::parseFromBinaryStream(&zone, stream);
		return true;
	}

	if (_name == "regions") {
		TypeInfo<SortedVector<ManagedReference<Region* > > >::parseFromBinaryStream(&regions, stream);
		return true;
	}

	if (_name == "zoningRights") {
		TypeInfo<VectorMap<unsigned long long, unsigned int> >::parseFromBinaryStream(&zoningRights, stream);
		return true;
	}

	if (_name == "militiaMembers") {
		TypeInfo<CitizenList >::parseFromBinaryStream(&militiaMembers, stream);
		return true;
	}

	if (_name == "citizenList") {
		TypeInfo<CitizenList >::parseFromBinaryStream(&citizenList, stream);
		return true;
	}

	if (_name == "bannedList") {
		TypeInfo<CitizenList >::parseFromBinaryStream(&bannedList, stream);
		return true;
	}

	if (_name == "cityRank") {
		TypeInfo<byte >::parseFromBinaryStream(&cityRank, stream);
		return true;
	}

	if (_name == "cityTreasury") {
		TypeInfo<int >::parseFromBinaryStream(&cityTreasury, stream);
		return true;
	}

	if (_name == "mayorID") {
		TypeInfo<unsigned long long >::parseFromBinaryStream(&mayorID, stream);
		return true;
	}

	if (_name == "zoningEnabled") {
		TypeInfo<bool >::parseFromBinaryStream(&zoningEnabled, stream);
		return true;
	}

	if (_name == "registered") {
		TypeInfo<bool >::parseFromBinaryStream(&registered, stream);
		return true;
	}

	if (_name == "nextUpdateTime") {
		TypeInfo<Time >::parseFromBinaryStream(&nextUpdateTime, stream);
		return true;
	}

	if (_name == "citySpecialization") {
		TypeInfo<String >::parseFromBinaryStream(&citySpecialization, stream);
		return true;
	}


	return false;
}

void CityRegionImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = CityRegionImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int CityRegionImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "cityHall";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<StructureObject* > >::toBinaryStream(&cityHall, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "regionName";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<StringId >::toBinaryStream(&regionName, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "zone";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ZoneReference >::toBinaryStream(&zone, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "regions";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<SortedVector<ManagedReference<Region* > > >::toBinaryStream(&regions, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "zoningRights";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<VectorMap<unsigned long long, unsigned int> >::toBinaryStream(&zoningRights, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "militiaMembers";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<CitizenList >::toBinaryStream(&militiaMembers, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "citizenList";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<CitizenList >::toBinaryStream(&citizenList, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "bannedList";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<CitizenList >::toBinaryStream(&bannedList, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "cityRank";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<byte >::toBinaryStream(&cityRank, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "cityTreasury";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&cityTreasury, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "mayorID";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned long long >::toBinaryStream(&mayorID, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "zoningEnabled";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<bool >::toBinaryStream(&zoningEnabled, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "registered";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<bool >::toBinaryStream(&registered, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "nextUpdateTime";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<Time >::toBinaryStream(&nextUpdateTime, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "citySpecialization";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<String >::toBinaryStream(&citySpecialization, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 15 + ManagedObjectImplementation::writeObjectMembers(stream);
}

CityRegionImplementation::CityRegionImplementation() {
	_initializeImplementation();
	// server/zone/objects/region/CityRegion.idl():  		initialize();
	initialize();
}

void CityRegionImplementation::addMilitiaMember(unsigned long long objectid) {
	// server/zone/objects/region/CityRegion.idl():  		militiaMembers.put(objectid);
	(&militiaMembers)->put(objectid);
}

void CityRegionImplementation::removeMilitiaMember(unsigned long long objectid) {
	// server/zone/objects/region/CityRegion.idl():  		militiaMembers.drop(objectid);
	(&militiaMembers)->drop(objectid);
}

bool CityRegionImplementation::isMilitiaMember(unsigned long long objectid) {
	// server/zone/objects/region/CityRegion.idl():  		return (militiaMembers.contains(objectid) || mayorID == objectid);
	return ((&militiaMembers)->contains(objectid) || mayorID == objectid);
}

void CityRegionImplementation::removeZoningRights(unsigned long long objectid) {
	// server/zone/objects/region/CityRegion.idl():  		zoningRights.drop(objectid);
	(&zoningRights)->drop(objectid);
}

bool CityRegionImplementation::containsPoint(float x, float y) {
	// server/zone/objects/region/CityRegion.idl():  		}
	for (	// server/zone/objects/region/CityRegion.idl():  		for (int i = 0;
	int i = 0;
	i < (&regions)->size();
 ++i) {
	// server/zone/objects/region/CityRegion.idl():  			Region aa = regions.get(i);
	Region* aa = (&regions)->get(i);
	// server/zone/objects/region/CityRegion.idl():  		}
	if (aa->containsPoint(x, y))	// server/zone/objects/region/CityRegion.idl():  				return true;
	return true;
}
	// server/zone/objects/region/CityRegion.idl():  		return false;
	return false;
}

void CityRegionImplementation::addCitizen(unsigned long long citizenID) {
	// server/zone/objects/region/CityRegion.idl():  		citizenList.put(citizenID);
	(&citizenList)->put(citizenID);
}

void CityRegionImplementation::removeCitizen(unsigned long long citizenID) {
	// server/zone/objects/region/CityRegion.idl():  		citizenList.drop(citizenID);
	(&citizenList)->drop(citizenID);
}

void CityRegionImplementation::addBannedPlayer(unsigned long long playerid) {
	// server/zone/objects/region/CityRegion.idl():  		bannedList.put(playerid);
	(&bannedList)->put(playerid);
}

void CityRegionImplementation::removeBannedPlayer(unsigned long long playerid) {
	// server/zone/objects/region/CityRegion.idl():  		bannedList.drop(playerid);
	(&bannedList)->drop(playerid);
}

bool CityRegionImplementation::isCitizen(unsigned long long citizenID) {
	// server/zone/objects/region/CityRegion.idl():  		return citizenList.contains(citizenID);
	return (&citizenList)->contains(citizenID);
}

int CityRegionImplementation::getCitizenCount() {
	// server/zone/objects/region/CityRegion.idl():  		return citizenList.size();
	return (&citizenList)->size();
}

byte CityRegionImplementation::getCityRank() {
	// server/zone/objects/region/CityRegion.idl():  		return cityRank;
	return cityRank;
}

bool CityRegionImplementation::isBanned(unsigned long long playerID) {
	// server/zone/objects/region/CityRegion.idl():  		return bannedList.contains(playerID);
	return (&bannedList)->contains(playerID);
}

CitizenList* CityRegionImplementation::getCitizenList() {
	// server/zone/objects/region/CityRegion.idl():  		return citizenList;
	return (&citizenList);
}

CitizenList* CityRegionImplementation::getMilitiaMembers() {
	// server/zone/objects/region/CityRegion.idl():  		return militiaMembers;
	return (&militiaMembers);
}

CitizenList* CityRegionImplementation::getBannedPlayers() {
	// server/zone/objects/region/CityRegion.idl():  		return bannedList;
	return (&bannedList);
}

bool CityRegionImplementation::isRegistered() {
	// server/zone/objects/region/CityRegion.idl():  		return registered;
	return registered;
}

Zone* CityRegionImplementation::getZone() {
	// server/zone/objects/region/CityRegion.idl():  		return zone.get();
	return (&zone)->get();
}

String CityRegionImplementation::getRegionName() {
	// server/zone/objects/region/CityRegion.idl():  		return regionName.getDisplayedName();
	return (&regionName)->getDisplayedName();
}

unsigned long long CityRegionImplementation::getMayorID() {
	// server/zone/objects/region/CityRegion.idl():  		return mayorID;
	return mayorID;
}

float CityRegionImplementation::getPositionX() {
	// server/zone/objects/region/CityRegion.idl():  		ActiveArea aa = regions.get(0);
	ActiveArea* aa = (&regions)->get(0);
	// server/zone/objects/region/CityRegion.idl():  		return 
	if (aa == NULL)	// server/zone/objects/region/CityRegion.idl():  			return 0.0;
	return 0.0;
	// server/zone/objects/region/CityRegion.idl():  		return aa.getPositionX();
	return aa->getPositionX();
}

float CityRegionImplementation::getPositionY() {
	// server/zone/objects/region/CityRegion.idl():  		ActiveArea aa = regions.get(0);
	ActiveArea* aa = (&regions)->get(0);
	// server/zone/objects/region/CityRegion.idl():  		return 
	if (aa == NULL)	// server/zone/objects/region/CityRegion.idl():  			return 0.0;
	return 0.0;
	// server/zone/objects/region/CityRegion.idl():  		return aa.getPositionY();
	return aa->getPositionY();
}

float CityRegionImplementation::getRadius() {
	// server/zone/objects/region/CityRegion.idl():  		ActiveArea aa = regions.get(0);
	ActiveArea* aa = (&regions)->get(0);
	// server/zone/objects/region/CityRegion.idl():  		return 
	if (aa == NULL)	// server/zone/objects/region/CityRegion.idl():  			return 0.0;
	return 0.0;
	// server/zone/objects/region/CityRegion.idl():  		return aa.getRadius();
	return aa->getRadius();
}

Region* CityRegionImplementation::getRegion(int idx) {
	// server/zone/objects/region/CityRegion.idl():  		return regions.get(idx);
	return (&regions)->get(idx);
}

int CityRegionImplementation::getRegionsCount() {
	// server/zone/objects/region/CityRegion.idl():  		return regions.size();
	return (&regions)->size();
}

int CityRegionImplementation::getStructuresCount() {
	// server/zone/objects/region/CityRegion.idl():  		return 0;
	return 0;
}

String CityRegionImplementation::getCitySpecialization() {
	// server/zone/objects/region/CityRegion.idl():  		return citySpecialization;
	return citySpecialization;
}

int CityRegionImplementation::getCityTreasury() {
	// server/zone/objects/region/CityRegion.idl():  		return cityTreasury;
	return cityTreasury;
}

bool CityRegionImplementation::isMayor(unsigned long long objectid) {
	// server/zone/objects/region/CityRegion.idl():  		return mayorID == objectid;
	return mayorID == objectid;
}

bool CityRegionImplementation::isZoningEnabled() {
	// server/zone/objects/region/CityRegion.idl():  		return zoningEnabled;
	return zoningEnabled;
}

bool CityRegionImplementation::isClientRegion() {
	// server/zone/objects/region/CityRegion.idl():  		return cityRank == RANK_CLIENT;
	return cityRank == RANK_CLIENT;
}

StructureObject* CityRegionImplementation::getCityHall() {
	// server/zone/objects/region/CityRegion.idl():  		return cityHall;
	return cityHall;
}

void CityRegionImplementation::setRegionName(const UnicodeString& name) {
	// server/zone/objects/region/CityRegion.idl():  		regionName.setCustomString(name);
	(&regionName)->setCustomString(name);
}

void CityRegionImplementation::setCitySpecialization(const String& spec) {
	// server/zone/objects/region/CityRegion.idl():  		citySpecialization = spec;
	citySpecialization = spec;
}

void CityRegionImplementation::setRegionName(const String& fullPath) {
	// server/zone/objects/region/CityRegion.idl():  		regionName.setStringId(fullPath);
	(&regionName)->setStringId(fullPath);
}

void CityRegionImplementation::setCityTreasury(int val) {
	// server/zone/objects/region/CityRegion.idl():  		cityTreasury = val;
	cityTreasury = val;
}

int CityRegionImplementation::addToCityTreasury(int val) {
	// server/zone/objects/region/CityRegion.idl():  		cityTreasury = cityTreasury + val;
	cityTreasury = cityTreasury + val;
	// server/zone/objects/region/CityRegion.idl():  		return 
	if (cityTreasury < 0){
	// server/zone/objects/region/CityRegion.idl():  			cityTreasury = 0;
	cityTreasury = 0;
}
	// server/zone/objects/region/CityRegion.idl():  		return cityTreasury;
	return cityTreasury;
}

int CityRegionImplementation::subtractFromCityTreasury(int val) {
	// server/zone/objects/region/CityRegion.idl():  		cityTreasury = cityTreasury - val;
	cityTreasury = cityTreasury - val;
	// server/zone/objects/region/CityRegion.idl():  		return 
	if (cityTreasury < 0){
	// server/zone/objects/region/CityRegion.idl():  			cityTreasury = 0;
	cityTreasury = 0;
}
	// server/zone/objects/region/CityRegion.idl():  		return cityTreasury;
	return cityTreasury;
}

int CityRegionImplementation::getMaxWithdrawal() {
	// server/zone/objects/region/CityRegion.idl():  		return 10000 * cityRank;
	return 10000 * cityRank;
}

void CityRegionImplementation::setCityRank(byte rank) {
	// server/zone/objects/region/CityRegion.idl():  		cityRank = rank;
	cityRank = rank;
}

void CityRegionImplementation::setMayorID(unsigned long long id) {
	// server/zone/objects/region/CityRegion.idl():  		mayorID = id;
	mayorID = id;
}

void CityRegionImplementation::setRegistered(bool val) {
	// server/zone/objects/region/CityRegion.idl():  		registered = val;
	registered = val;
}

void CityRegionImplementation::setZoningEnabled(bool val) {
	// server/zone/objects/region/CityRegion.idl():  		zoningEnabled = val;
	zoningEnabled = val;
}

void CityRegionImplementation::setCityHall(StructureObject* building) {
	// server/zone/objects/region/CityRegion.idl():  		cityHall = building;
	cityHall = building;
}

/*
 *	CityRegionAdapter
 */

CityRegionAdapter::CityRegionAdapter(CityRegion* obj) : ManagedObjectAdapter(obj) {
}

Packet* CityRegionAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_INITIALIZE__:
		initialize();
		break;
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		initializeTransientMembers();
		break;
	case RPC_NOTIFYENTER__SCENEOBJECT_:
		notifyEnter(static_cast<SceneObject*>(inv->getObjectParameter()));
		break;
	case RPC_NOTIFYEXIT__SCENEOBJECT_:
		notifyExit(static_cast<SceneObject*>(inv->getObjectParameter()));
		break;
	case RPC_ADDREGION__FLOAT_FLOAT_FLOAT_:
		resp->insertLong(addRegion(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter())->_getObjectID());
		break;
	case RPC_RESCHEDULEUPDATEEVENT__INT_:
		rescheduleUpdateEvent(inv->getUnsignedIntParameter());
		break;
	case RPC_DESTROYACTIVEAREAS__:
		destroyActiveAreas();
		break;
	case RPC_ADDMILITIAMEMBER__LONG_:
		addMilitiaMember(inv->getUnsignedLongParameter());
		break;
	case RPC_REMOVEMILITIAMEMBER__LONG_:
		removeMilitiaMember(inv->getUnsignedLongParameter());
		break;
	case RPC_ISMILITIAMEMBER__LONG_:
		resp->insertBoolean(isMilitiaMember(inv->getUnsignedLongParameter()));
		break;
	case RPC_ADDZONINGRIGHTS__LONG_INT_:
		addZoningRights(inv->getUnsignedLongParameter(), inv->getUnsignedIntParameter());
		break;
	case RPC_REMOVEZONINGRIGHTS__LONG_:
		removeZoningRights(inv->getUnsignedLongParameter());
		break;
	case RPC_HASZONINGRIGHTS__LONG_:
		resp->insertBoolean(hasZoningRights(inv->getUnsignedLongParameter()));
		break;
	case RPC_CONTAINSPOINT__FLOAT_FLOAT_:
		resp->insertBoolean(containsPoint(inv->getFloatParameter(), inv->getFloatParameter()));
		break;
	case RPC_ADDCITIZEN__LONG_:
		addCitizen(inv->getUnsignedLongParameter());
		break;
	case RPC_REMOVECITIZEN__LONG_:
		removeCitizen(inv->getUnsignedLongParameter());
		break;
	case RPC_ADDBANNEDPLAYER__LONG_:
		addBannedPlayer(inv->getUnsignedLongParameter());
		break;
	case RPC_REMOVEBANNEDPLAYER__LONG_:
		removeBannedPlayer(inv->getUnsignedLongParameter());
		break;
	case RPC_ISCITIZEN__LONG_:
		resp->insertBoolean(isCitizen(inv->getUnsignedLongParameter()));
		break;
	case RPC_GETTIMETOUPDATE__:
		resp->insertSignedInt(getTimeToUpdate());
		break;
	case RPC_GETCITIZENCOUNT__:
		resp->insertSignedInt(getCitizenCount());
		break;
	case RPC_GETCITYRANK__:
		resp->insertByte(getCityRank());
		break;
	case RPC_ISBANNED__LONG_:
		resp->insertBoolean(isBanned(inv->getUnsignedLongParameter()));
		break;
	case RPC_ISREGISTERED__:
		resp->insertBoolean(isRegistered());
		break;
	case RPC_GETZONE__:
		resp->insertLong(getZone()->_getObjectID());
		break;
	case RPC_GETREGIONNAME__:
		resp->insertAscii(getRegionName());
		break;
	case RPC_GETMAYORID__:
		resp->insertLong(getMayorID());
		break;
	case RPC_GETPOSITIONX__:
		resp->insertFloat(getPositionX());
		break;
	case RPC_GETPOSITIONY__:
		resp->insertFloat(getPositionY());
		break;
	case RPC_GETRADIUS__:
		resp->insertFloat(getRadius());
		break;
	case RPC_GETREGION__INT_:
		resp->insertLong(getRegion(inv->getSignedIntParameter())->_getObjectID());
		break;
	case RPC_GETREGIONSCOUNT__:
		resp->insertSignedInt(getRegionsCount());
		break;
	case RPC_GETSTRUCTURESCOUNT__:
		resp->insertSignedInt(getStructuresCount());
		break;
	case RPC_GETCITYSPECIALIZATION__:
		resp->insertAscii(getCitySpecialization());
		break;
	case RPC_GETCITYTREASURY__:
		resp->insertSignedInt(getCityTreasury());
		break;
	case RPC_ISMAYOR__LONG_:
		resp->insertBoolean(isMayor(inv->getUnsignedLongParameter()));
		break;
	case RPC_ISZONINGENABLED__:
		resp->insertBoolean(isZoningEnabled());
		break;
	case RPC_ISCLIENTREGION__:
		resp->insertBoolean(isClientRegion());
		break;
	case RPC_GETCITYHALL__:
		resp->insertLong(getCityHall()->_getObjectID());
		break;
	case RPC_SETZONE__ZONE_:
		setZone(static_cast<Zone*>(inv->getObjectParameter()));
		break;
	case RPC_SETREGIONNAME__UNICODESTRING_:
		setRegionName(inv->getUnicodeParameter(_param0_setRegionName__UnicodeString_));
		break;
	case RPC_SETCITYSPECIALIZATION__STRING_:
		setCitySpecialization(inv->getAsciiParameter(_param0_setCitySpecialization__String_));
		break;
	case RPC_SETREGIONNAME__STRING_:
		setRegionName(inv->getAsciiParameter(_param0_setRegionName__String_));
		break;
	case RPC_SETCITYTREASURY__INT_:
		setCityTreasury(inv->getSignedIntParameter());
		break;
	case RPC_ADDTOCITYTREASURY__INT_:
		resp->insertSignedInt(addToCityTreasury(inv->getSignedIntParameter()));
		break;
	case RPC_SUBTRACTFROMCITYTREASURY__INT_:
		resp->insertSignedInt(subtractFromCityTreasury(inv->getSignedIntParameter()));
		break;
	case RPC_GETMAXWITHDRAWAL__:
		resp->insertSignedInt(getMaxWithdrawal());
		break;
	case RPC_SETCITYRANK__BYTE_:
		setCityRank(inv->getByteParameter());
		break;
	case RPC_SETMAYORID__LONG_:
		setMayorID(inv->getUnsignedLongParameter());
		break;
	case RPC_SETREGISTERED__BOOL_:
		setRegistered(inv->getBooleanParameter());
		break;
	case RPC_SETZONINGENABLED__BOOL_:
		setZoningEnabled(inv->getBooleanParameter());
		break;
	case RPC_SETRADIUS__FLOAT_:
		setRadius(inv->getFloatParameter());
		break;
	case RPC_SETCITYHALL__STRUCTUREOBJECT_:
		setCityHall(static_cast<StructureObject*>(inv->getObjectParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

void CityRegionAdapter::initialize() {
	(static_cast<CityRegion*>(stub))->initialize();
}

void CityRegionAdapter::initializeTransientMembers() {
	(static_cast<CityRegion*>(stub))->initializeTransientMembers();
}

void CityRegionAdapter::notifyEnter(SceneObject* object) {
	(static_cast<CityRegion*>(stub))->notifyEnter(object);
}

void CityRegionAdapter::notifyExit(SceneObject* object) {
	(static_cast<CityRegion*>(stub))->notifyExit(object);
}

Region* CityRegionAdapter::addRegion(float x, float y, float radius) {
	return (static_cast<CityRegion*>(stub))->addRegion(x, y, radius);
}

void CityRegionAdapter::rescheduleUpdateEvent(unsigned int seconds) {
	(static_cast<CityRegion*>(stub))->rescheduleUpdateEvent(seconds);
}

void CityRegionAdapter::destroyActiveAreas() {
	(static_cast<CityRegion*>(stub))->destroyActiveAreas();
}

void CityRegionAdapter::addMilitiaMember(unsigned long long objectid) {
	(static_cast<CityRegion*>(stub))->addMilitiaMember(objectid);
}

void CityRegionAdapter::removeMilitiaMember(unsigned long long objectid) {
	(static_cast<CityRegion*>(stub))->removeMilitiaMember(objectid);
}

bool CityRegionAdapter::isMilitiaMember(unsigned long long objectid) {
	return (static_cast<CityRegion*>(stub))->isMilitiaMember(objectid);
}

void CityRegionAdapter::addZoningRights(unsigned long long objectid, unsigned int duration) {
	(static_cast<CityRegion*>(stub))->addZoningRights(objectid, duration);
}

void CityRegionAdapter::removeZoningRights(unsigned long long objectid) {
	(static_cast<CityRegion*>(stub))->removeZoningRights(objectid);
}

bool CityRegionAdapter::hasZoningRights(unsigned long long objectid) {
	return (static_cast<CityRegion*>(stub))->hasZoningRights(objectid);
}

bool CityRegionAdapter::containsPoint(float x, float y) {
	return (static_cast<CityRegion*>(stub))->containsPoint(x, y);
}

void CityRegionAdapter::addCitizen(unsigned long long citizenID) {
	(static_cast<CityRegion*>(stub))->addCitizen(citizenID);
}

void CityRegionAdapter::removeCitizen(unsigned long long citizenID) {
	(static_cast<CityRegion*>(stub))->removeCitizen(citizenID);
}

void CityRegionAdapter::addBannedPlayer(unsigned long long playerid) {
	(static_cast<CityRegion*>(stub))->addBannedPlayer(playerid);
}

void CityRegionAdapter::removeBannedPlayer(unsigned long long playerid) {
	(static_cast<CityRegion*>(stub))->removeBannedPlayer(playerid);
}

bool CityRegionAdapter::isCitizen(unsigned long long citizenID) {
	return (static_cast<CityRegion*>(stub))->isCitizen(citizenID);
}

int CityRegionAdapter::getTimeToUpdate() {
	return (static_cast<CityRegion*>(stub))->getTimeToUpdate();
}

int CityRegionAdapter::getCitizenCount() {
	return (static_cast<CityRegion*>(stub))->getCitizenCount();
}

byte CityRegionAdapter::getCityRank() {
	return (static_cast<CityRegion*>(stub))->getCityRank();
}

bool CityRegionAdapter::isBanned(unsigned long long playerID) {
	return (static_cast<CityRegion*>(stub))->isBanned(playerID);
}

bool CityRegionAdapter::isRegistered() {
	return (static_cast<CityRegion*>(stub))->isRegistered();
}

Zone* CityRegionAdapter::getZone() {
	return (static_cast<CityRegion*>(stub))->getZone();
}

String CityRegionAdapter::getRegionName() {
	return (static_cast<CityRegion*>(stub))->getRegionName();
}

unsigned long long CityRegionAdapter::getMayorID() {
	return (static_cast<CityRegion*>(stub))->getMayorID();
}

float CityRegionAdapter::getPositionX() {
	return (static_cast<CityRegion*>(stub))->getPositionX();
}

float CityRegionAdapter::getPositionY() {
	return (static_cast<CityRegion*>(stub))->getPositionY();
}

float CityRegionAdapter::getRadius() {
	return (static_cast<CityRegion*>(stub))->getRadius();
}

Region* CityRegionAdapter::getRegion(int idx) {
	return (static_cast<CityRegion*>(stub))->getRegion(idx);
}

int CityRegionAdapter::getRegionsCount() {
	return (static_cast<CityRegion*>(stub))->getRegionsCount();
}

int CityRegionAdapter::getStructuresCount() {
	return (static_cast<CityRegion*>(stub))->getStructuresCount();
}

String CityRegionAdapter::getCitySpecialization() {
	return (static_cast<CityRegion*>(stub))->getCitySpecialization();
}

int CityRegionAdapter::getCityTreasury() {
	return (static_cast<CityRegion*>(stub))->getCityTreasury();
}

bool CityRegionAdapter::isMayor(unsigned long long objectid) {
	return (static_cast<CityRegion*>(stub))->isMayor(objectid);
}

bool CityRegionAdapter::isZoningEnabled() {
	return (static_cast<CityRegion*>(stub))->isZoningEnabled();
}

bool CityRegionAdapter::isClientRegion() {
	return (static_cast<CityRegion*>(stub))->isClientRegion();
}

StructureObject* CityRegionAdapter::getCityHall() {
	return (static_cast<CityRegion*>(stub))->getCityHall();
}

void CityRegionAdapter::setZone(Zone* zne) {
	(static_cast<CityRegion*>(stub))->setZone(zne);
}

void CityRegionAdapter::setRegionName(const UnicodeString& name) {
	(static_cast<CityRegion*>(stub))->setRegionName(name);
}

void CityRegionAdapter::setCitySpecialization(const String& spec) {
	(static_cast<CityRegion*>(stub))->setCitySpecialization(spec);
}

void CityRegionAdapter::setRegionName(const String& fullPath) {
	(static_cast<CityRegion*>(stub))->setRegionName(fullPath);
}

void CityRegionAdapter::setCityTreasury(int val) {
	(static_cast<CityRegion*>(stub))->setCityTreasury(val);
}

int CityRegionAdapter::addToCityTreasury(int val) {
	return (static_cast<CityRegion*>(stub))->addToCityTreasury(val);
}

int CityRegionAdapter::subtractFromCityTreasury(int val) {
	return (static_cast<CityRegion*>(stub))->subtractFromCityTreasury(val);
}

int CityRegionAdapter::getMaxWithdrawal() {
	return (static_cast<CityRegion*>(stub))->getMaxWithdrawal();
}

void CityRegionAdapter::setCityRank(byte rank) {
	(static_cast<CityRegion*>(stub))->setCityRank(rank);
}

void CityRegionAdapter::setMayorID(unsigned long long id) {
	(static_cast<CityRegion*>(stub))->setMayorID(id);
}

void CityRegionAdapter::setRegistered(bool val) {
	(static_cast<CityRegion*>(stub))->setRegistered(val);
}

void CityRegionAdapter::setZoningEnabled(bool val) {
	(static_cast<CityRegion*>(stub))->setZoningEnabled(val);
}

void CityRegionAdapter::setRadius(float rad) {
	(static_cast<CityRegion*>(stub))->setRadius(rad);
}

void CityRegionAdapter::setCityHall(StructureObject* building) {
	(static_cast<CityRegion*>(stub))->setCityHall(building);
}

/*
 *	CityRegionHelper
 */

CityRegionHelper* CityRegionHelper::staticInitializer = CityRegionHelper::instance();

CityRegionHelper::CityRegionHelper() {
	className = "CityRegion";

	Core::getObjectBroker()->registerClass(className, this);
}

void CityRegionHelper::finalizeHelper() {
	CityRegionHelper::finalize();
}

DistributedObject* CityRegionHelper::instantiateObject() {
	return new CityRegion(DummyConstructorParameter::instance());
}

DistributedObjectServant* CityRegionHelper::instantiateServant() {
	return new CityRegionImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* CityRegionHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new CityRegionAdapter(static_cast<CityRegion*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

