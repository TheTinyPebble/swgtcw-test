/*
 *	server/zone/objects/region/CityRegion.cpp generated by engine3 IDL compiler 0.60
 */

#include "CityRegion.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/area/ActiveArea.h"

#include "server/zone/Zone.h"

#include "server/zone/ZoneProcessServer.h"

/*
 *	CityRegionStub
 */

enum {RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_ = 6,RPC_NOTIFYENTER__SCENEOBJECT_,RPC_NOTIFYEXIT__SCENEOBJECT_,RPC_ADDACTIVEAREA__ZONE_FLOAT_FLOAT_FLOAT_,RPC_GETREGIONNAME__};

CityRegion::CityRegion(const String& name) : Observer(DummyConstructorParameter::instance()) {
	CityRegionImplementation* _implementation = new CityRegionImplementation(name);
	_impl = _implementation;
	_impl->_setStub(this);
}

CityRegion::CityRegion(DummyConstructorParameter* param) : Observer(param) {
}

CityRegion::~CityRegion() {
}


int CityRegion::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	CityRegionImplementation* _implementation = (CityRegionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(observable);
		method.addObjectParameter(arg1);
		method.addSignedLongParameter(arg2);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyObserverEvent(eventType, observable, arg1, arg2);
}

void CityRegion::notifyEnter(SceneObject* object) {
	CityRegionImplementation* _implementation = (CityRegionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYENTER__SCENEOBJECT_);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyEnter(object);
}

void CityRegion::notifyExit(SceneObject* object) {
	CityRegionImplementation* _implementation = (CityRegionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYEXIT__SCENEOBJECT_);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyExit(object);
}

void CityRegion::addActiveArea(Zone* zone, float x, float y, float radius) {
	CityRegionImplementation* _implementation = (CityRegionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDACTIVEAREA__ZONE_FLOAT_FLOAT_FLOAT_);
		method.addObjectParameter(zone);
		method.addFloatParameter(x);
		method.addFloatParameter(y);
		method.addFloatParameter(radius);

		method.executeWithVoidReturn();
	} else
		_implementation->addActiveArea(zone, x, y, radius);
}

SortedVector<ManagedReference<SceneObject* > > CityRegion::getRegionObjectsByPlanetMapCategory(const String& catname) {
	CityRegionImplementation* _implementation = (CityRegionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getRegionObjectsByPlanetMapCategory(catname);
}

String CityRegion::getRegionName() {
	CityRegionImplementation* _implementation = (CityRegionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETREGIONNAME__);

		method.executeWithAsciiReturn(_return_getRegionName);
		return _return_getRegionName;
	} else
		return _implementation->getRegionName();
}

DistributedObjectServant* CityRegion::_getImplementation() {

	_updated = true;
	return _impl;
}

void CityRegion::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	CityRegionImplementation
 */

CityRegionImplementation::CityRegionImplementation(DummyConstructorParameter* param) : ObserverImplementation(param) {
	_initializeImplementation();
}


CityRegionImplementation::~CityRegionImplementation() {
}


void CityRegionImplementation::finalize() {
}

void CityRegionImplementation::_initializeImplementation() {
	_setClassHelper(CityRegionHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void CityRegionImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (CityRegion*) stub;
	ObserverImplementation::_setStub(stub);
}

DistributedObjectStub* CityRegionImplementation::_getStub() {
	return _this;
}

CityRegionImplementation::operator const CityRegion*() {
	return _this;
}

void CityRegionImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void CityRegionImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void CityRegionImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void CityRegionImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void CityRegionImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void CityRegionImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void CityRegionImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void CityRegionImplementation::_serializationHelperMethod() {
	ObserverImplementation::_serializationHelperMethod();

	_setClassName("CityRegion");

}

void CityRegionImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(CityRegionImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool CityRegionImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ObserverImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "zone") {
		TypeInfo<ManagedReference<Zone* > >::parseFromBinaryStream(&zone, stream);
		return true;
	}

	if (_name == "activeAreas") {
		TypeInfo<SortedVector<ManagedReference<ActiveArea* > > >::parseFromBinaryStream(&activeAreas, stream);
		return true;
	}

	if (_name == "regionObjects") {
		TypeInfo<VectorMap<unsigned long long, ManagedReference<SceneObject* > > >::parseFromBinaryStream(&regionObjects, stream);
		return true;
	}

	if (_name == "regionName") {
		TypeInfo<String >::parseFromBinaryStream(&regionName, stream);
		return true;
	}


	return false;
}

void CityRegionImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = CityRegionImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int CityRegionImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "zone";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<Zone* > >::toBinaryStream(&zone, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "activeAreas";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<SortedVector<ManagedReference<ActiveArea* > > >::toBinaryStream(&activeAreas, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "regionObjects";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<VectorMap<unsigned long long, ManagedReference<SceneObject* > > >::toBinaryStream(&regionObjects, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "regionName";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<String >::toBinaryStream(&regionName, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 4 + ObserverImplementation::writeObjectMembers(stream);
}

CityRegionImplementation::CityRegionImplementation(const String& name) {
	_initializeImplementation();
	// server/zone/objects/region/CityRegion.idl():  		Logger.setLoggingName("CityRegion " + name);
	Logger::setLoggingName("CityRegion " + name);
	// server/zone/objects/region/CityRegion.idl():  		Logger.setLogging(true);
	Logger::setLogging(true);
	// server/zone/objects/region/CityRegion.idl():  		regionName = name;
	regionName = name;
	// server/zone/objects/region/CityRegion.idl():  		regionObjects.setNoDuplicateInsertPlan();
	(&regionObjects)->setNoDuplicateInsertPlan();
	// server/zone/objects/region/CityRegion.idl():  		regionObjects.setNullValue(null);
	(&regionObjects)->setNullValue(NULL);
}

int CityRegionImplementation::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	// server/zone/objects/region/CityRegion.idl():  		}
	switch (eventType) {
	case ObserverEventType::ENTEREDAREA :
	// server/zone/objects/region/CityRegion.idl():  			notifyEnter((SceneObject) arg1);
	notifyEnter((SceneObject*) arg1);
	break;
}
	// server/zone/objects/region/CityRegion.idl():  		return 0;
	return 0;
}

String CityRegionImplementation::getRegionName() {
	// server/zone/objects/region/CityRegion.idl():  		return regionName;
	return regionName;
}

/*
 *	CityRegionAdapter
 */

CityRegionAdapter::CityRegionAdapter(CityRegionImplementation* obj) : ObserverAdapter(obj) {
}

Packet* CityRegionAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_:
		resp->insertSignedInt(notifyObserverEvent(inv->getUnsignedIntParameter(), (Observable*) inv->getObjectParameter(), (ManagedObject*) inv->getObjectParameter(), inv->getSignedLongParameter()));
		break;
	case RPC_NOTIFYENTER__SCENEOBJECT_:
		notifyEnter((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_NOTIFYEXIT__SCENEOBJECT_:
		notifyExit((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_ADDACTIVEAREA__ZONE_FLOAT_FLOAT_FLOAT_:
		addActiveArea((Zone*) inv->getObjectParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter());
		break;
	case RPC_GETREGIONNAME__:
		resp->insertAscii(getRegionName());
		break;
	default:
		return NULL;
	}

	return resp;
}

int CityRegionAdapter::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	return ((CityRegionImplementation*) impl)->notifyObserverEvent(eventType, observable, arg1, arg2);
}

void CityRegionAdapter::notifyEnter(SceneObject* object) {
	((CityRegionImplementation*) impl)->notifyEnter(object);
}

void CityRegionAdapter::notifyExit(SceneObject* object) {
	((CityRegionImplementation*) impl)->notifyExit(object);
}

void CityRegionAdapter::addActiveArea(Zone* zone, float x, float y, float radius) {
	((CityRegionImplementation*) impl)->addActiveArea(zone, x, y, radius);
}

String CityRegionAdapter::getRegionName() {
	return ((CityRegionImplementation*) impl)->getRegionName();
}

/*
 *	CityRegionHelper
 */

CityRegionHelper* CityRegionHelper::staticInitializer = CityRegionHelper::instance();

CityRegionHelper::CityRegionHelper() {
	className = "CityRegion";

	Core::getObjectBroker()->registerClass(className, this);
}

void CityRegionHelper::finalizeHelper() {
	CityRegionHelper::finalize();
}

DistributedObject* CityRegionHelper::instantiateObject() {
	return new CityRegion(DummyConstructorParameter::instance());
}

DistributedObjectServant* CityRegionHelper::instantiateServant() {
	return new CityRegionImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* CityRegionHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new CityRegionAdapter((CityRegionImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

