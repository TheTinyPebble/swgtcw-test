/*
Copyright (C) 2007 <SWGEmu>
This File is part of Core3.
This program is free software; you can redistribute
it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software
Foundation; either version 2 of the License,
or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for
more details.

You should have received a copy of the GNU Lesser General
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Linking Engine3 statically or dynamically with other modules
is making a combined work based on Engine3.
Thus, the terms and conditions of the GNU Lesser General Public License
cover the whole combination.

In addition, as a special exception, the copyright holders of Engine3
give you permission to combine Engine3 program with free software
programs or libraries that are released under the GNU LGPL and with
code included in the standard release of Core3 under the GNU LGPL
license (or modified versions of such code, with unchanged license).
You may copy and distribute such a system following the terms of the
GNU LGPL for Engine3 and the licenses of the other code concerned,
provided that you include the source code of that other code when
and as the GNU LGPL requires distribution of source code.

Note that people who make modified versions of Engine3 are not obligated
to grant this special exception for their modified versions;
it is their choice whether to do so. The GNU Lesser General Public License
gives permission to release a modified version without this exception;
this exception also makes it possible to release a modified version
which carries forward this exception.

*/

package server.zone.objects.region;

import engine.core.ManagedObject;
import engine.log.Logger;
import engine.util.Observer;
import engine.util.Observable;
import server.zone.objects.creature.CreatureObject;
import server.zone.objects.scene.SceneObject;
import server.zone.objects.area.ActiveArea;
import server.zone.Zone;
import server.zone.ZoneProcessServer;

include server.zone.objects.scene.ObserverEventType;

class CityRegion extends Observer implements Logger {
	protected transient ZoneProcessServer server;
	
	protected Zone zone;
	
	@dereferenced
	protected SortedVector<ActiveArea> activeAreas;
	
	@dereferenced
	protected VectorMap<unsigned long, SceneObject> regionObjects;
	
	protected string regionName;

	public CityRegion(final string name) {
		Logger.setLoggingName("CityRegion " + name);
		Logger.setLogging(true);
		
		regionName = name;
		
		regionObjects.setNoDuplicateInsertPlan();
		regionObjects.setNullValue(null);
	}
	
	public int notifyObserverEvent(unsigned int eventType, Observable observable, ManagedObject arg1, long arg2) {
		switch (eventType) {
		case ObserverEventType.ENTEREDAREA:
			notifyEnter((SceneObject) arg1);
			break;
		case ObserverEventType.EXITEDAREA:
			notifyExit((SceneObject) arg1);
			break;
		}
		
		return 0;
	}
	
	/**
	 * This method is called when one of the region's active areas have been entered.
	 * @param object The object which entered the region's active area.
	 */
	public native void notifyEnter(SceneObject object);
	/**
	 * This method is called when one of the region's active areas have been exited.
	 * @param object The object which exited the region's active area.
	 */
	public native void notifyExit(SceneObject object);
	/**
	 * Adds an active area to this city region that acts as a boundary defining this city's total area.
	 * @param zone The zone which this active area will be inserted.
	 * @param x The x coordinate to which this active area will find its center point.
	 * @param y The y coordinate to which this active area will find its center point.
	 * @param radius The radius which this active area will have.
	 */
	public native void addActiveArea(Zone zone, float x, float y, float radius);
	/**
	 * Returns a vector of objects, based upon PlanetMapCategory type, which have been added to this region.
	 * @param catname The category name to search for.
	 * @return Returns a SortedVector<ManagedReference<SceneObject*> > filled with all objects contained in this region which match the category name argument.
	 */
	@local
	@dereferenced
	public native SortedVector<SceneObject> getRegionObjectsByPlanetMapCategory(final string catname);
	
	/**
	 * Checks to see if any of the active areas belonging to this city region contain the point defined
	 * by x and y.
	 * @param x The x coordinate.
	 * @param y The y coordinate.
	 * @return Returns true if the active areas contain this point.
	 */
	public synchronized boolean containsPoint(float x, float y) {
		for (int i = 0; i < activeAreas.size(); ++i) {
			ActiveArea activeArea = activeAreas.get(i);

			if (activeArea.containsPoint(x, y))
				return true;
		}

		return false;
	}
	
	@local
	public native Vector<SceneObject> getVendorsInCity();
	
	//public native void sendGreetingMessage(CreatureObject player);
	//public native void sendDepartingMessage(CreatureObject player);
	
	
	public string getRegionName() {
		return regionName;
	}
}
