/*
 * CityRegion.h
 *
 *  Created on: Feb 9, 2012
 *      Author: xyborn
 */


package server.zone.objects.region;

import server.zone.objects.creature.CreatureObject;
import server.zone.objects.region.Region;
import server.zone.objects.scene.SceneObject;
import server.zone.Zone;
include system.lang.String;
include server.chat.StringIdChatParameter;
include server.zone.ZoneReference;
include server.zone.objects.scene.variables.StringId;

class CityRegion extends ManagedObject implements Logger {
	@dereferenced
	protected StringId regionName;

	@dereferenced
	protected ZoneReference zone;

	@dereferenced
	protected SortedVector<Region> regions;
	
	@dereferenced
	protected VectorMap<unsigned long, unsigned int> zoningRights;
	
	@dereferenced
	protected SortedVector<unsigned long> militiaMembers;

	protected byte cityRank;
	
	protected unsigned long mayorID;
	
	protected boolean zoningEnabled;

	protected string citySpecialization; //We want to implement this with skill mods.

	public static final byte RANK_CLIENT = 0;
	public static final byte RANK_OUTPOST = 1;
	public static final byte RANK_VILLAGE = 2;
	public static final byte RANK_TOWNSHIP = 3;
	public static final byte RANK_CITY = 4;
	public static final byte RANK_METROPOLIS = 5;

	public native CityRegion(Zone zne, final string name);
	
	public native void notifyEnter(SceneObject object);
	public native void notifyExit(SceneObject object);
	
	public native void addRegion(float x, float y, float radius);
	
	public void addMilitiaMember(unsigned long objectid) {
		militiaMembers.put(objectid);
	}
	
	public void removeMilitiaMember(unsigned long objectid) {
		militiaMembers.drop(objectid);
	}
	
	public boolean isMilitiaMember(unsigned long objectid) {
		return (militiaMembers.contains(objectid) || mayorID == objectid);
	}
	
	public native void addZoningRights(unsigned long objectid, unsigned int duration = 86400);
	
	public void removeZoningRights(unsigned long objectid) {
		zoningRights.drop(objectid);
	}
	
	public native boolean hasZoningRights(unsigned long objectid);
	
	public boolean toggleZoningEnabled() {
		return (zoningEnabled = !zoningEnabled);
	}
	
	public boolean containsPoint(float x, float y) {
		for (int i = 0; i < regions.size(); ++i) {
			Region aa = regions.get(i);

			if (aa.containsPoint(x, y))
				return true;
		}

		return false;
	}

	//Getters
	public byte getCityRank() {
		return cityRank;
	}

	public string getRegionName() {
		return regionName.getDisplayedName();
	}
	
	public unsigned long getMayorID() {
		return mayorID;
	}
	
	public boolean isMayor(unsigned long objectid) {
		return mayorID == objectid;
	}
	
	public boolean isZoningEnabled() {
		return zoningEnabled;
	}
	
	public boolean isClientRegion() {
		return cityRank == RANK_CLIENT;
	}

	//Setters
	public void setRegionName(final unicode name) {
		regionName.setCustomString(name);
	}

	public void setRegionName(final string fullPath) {
		regionName.setStringId(fullPath);
	}
	
	@local
	public native Vector<SceneObject> getVendorsInCity();

	@local
	public native void setRegionName(@dereferenced final StringId name);

	public void setCityRank(byte rank) {
		cityRank = rank;
	}
	
	public void setMayorID(unsigned long id) {
		mayorID = id;
	}
	
	public void setZoningEnabled(boolean val) {
		zoningEnabled = val;
	}
}