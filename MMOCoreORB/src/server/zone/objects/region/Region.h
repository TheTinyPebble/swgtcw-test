/*
 *	server/zone/objects/region/Region.h generated by engine3 IDL compiler 0.60
 */

#ifndef REGION_H_
#define REGION_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace terminal {
namespace bazaar {

class BazaarTerminal;

} // namespace bazaar
} // namespace terminal
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::terminal::bazaar;

#include "server/zone/objects/scene/variables/StringId.h"

#include "server/zone/objects/region/RegionCenterPoint.h"

#include "server/zone/objects/region/RegionCenterPointList.h"

#include "system/util/VectorMap.h"

#include "engine/core/ManagedObject.h"

#include "server/zone/objects/area/ActiveArea.h"

namespace server {
namespace zone {
namespace objects {
namespace region {

class Region : public ActiveArea {
public:
	Region();

	void notifyEnter(SceneObject* object);

	void notifyExit(SceneObject* object);

	void addBazaar(BazaarTerminal* ter);

	BazaarTerminal* getBazaar(int idx);

	int getBazaarCount();

	bool isRegion();

protected:
	Region(DummyConstructorParameter* param);

	virtual ~Region();

	friend class RegionHelper;
};

} // namespace region
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::region;

namespace server {
namespace zone {
namespace objects {
namespace region {

class RegionImplementation : public ActiveAreaImplementation {
protected:
	VectorMap<unsigned long long, ManagedReference<BazaarTerminal* > > bazaars;

public:
	RegionImplementation();

	RegionImplementation(DummyConstructorParameter* param);

	void notifyEnter(SceneObject* object);

	void notifyExit(SceneObject* object);

	void addBazaar(BazaarTerminal* ter);

	BazaarTerminal* getBazaar(int idx);

	int getBazaarCount();

	bool isRegion();

	Region* _this;

	operator const Region*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~RegionImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();

	friend class Region;
};

class RegionAdapter : public ActiveAreaAdapter {
public:
	RegionAdapter(RegionImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void notifyEnter(SceneObject* object);

	void notifyExit(SceneObject* object);

	void addBazaar(BazaarTerminal* ter);

	BazaarTerminal* getBazaar(int idx);

	int getBazaarCount();

	bool isRegion();

};

class RegionHelper : public DistributedObjectClassHelper, public Singleton<RegionHelper> {
	static RegionHelper* staticInitializer;

public:
	RegionHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<RegionHelper>;
};

} // namespace region
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::region;

#endif /*REGION_H_*/
