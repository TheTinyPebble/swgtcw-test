/*
 *	server/zone/objects/region/CityRegion.h generated by engine3 IDL compiler 0.60
 */

#ifndef CITYREGION_H_
#define CITYREGION_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace player {

class PlayerCreature;

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

namespace server {
namespace zone {
namespace objects {
namespace area {

class ActiveArea;

} // namespace area
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::area;

namespace server {
namespace zone {

class Zone;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {

class ZoneProcessServer;

} // namespace zone
} // namespace server

using namespace server::zone;

#include "server/zone/objects/scene/ObserverEventType.h"

#include "engine/core/ManagedObject.h"

#include "engine/log/Logger.h"

#include "engine/util/Observer.h"

#include "engine/util/Observable.h"

namespace server {
namespace zone {
namespace objects {
namespace region {

class CityRegion : public Observer {
public:
	CityRegion(const String& name);

	int notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2);

	void notifyEnter(SceneObject* object);

	void notifyExit(SceneObject* object);

	void addActiveArea(Zone* zone, float x, float y, float radius);

	SortedVector<ManagedReference<SceneObject* > > getRegionObjectsByPlanetMapCategory(const String& catname);

	bool containsPoint(float x, float y);

	String getRegionName();

	DistributedObjectServant* _getImplementation();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	CityRegion(DummyConstructorParameter* param);

	virtual ~CityRegion();

	String _return_getRegionName;

	friend class CityRegionHelper;
};

} // namespace region
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::region;

namespace server {
namespace zone {
namespace objects {
namespace region {

class CityRegionImplementation : public ObserverImplementation, public Logger {
protected:
	ManagedReference<ZoneProcessServer* > server;

	ManagedReference<Zone* > zone;

	SortedVector<ManagedReference<ActiveArea* > > activeAreas;

	VectorMap<unsigned long long, ManagedReference<SceneObject* > > regionObjects;

	String regionName;

public:
	CityRegionImplementation(const String& name);

	CityRegionImplementation(DummyConstructorParameter* param);

	int notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2);

	void notifyEnter(SceneObject* object);

	void notifyExit(SceneObject* object);

	void addActiveArea(Zone* zone, float x, float y, float radius);

	SortedVector<ManagedReference<SceneObject* > > getRegionObjectsByPlanetMapCategory(const String& catname);

	bool containsPoint(float x, float y);

	String getRegionName();

	CityRegion* _this;

	operator const CityRegion*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~CityRegionImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const String& name);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class CityRegion;
};

class CityRegionAdapter : public ObserverAdapter {
public:
	CityRegionAdapter(CityRegionImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	int notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2);

	void notifyEnter(SceneObject* object);

	void notifyExit(SceneObject* object);

	void addActiveArea(Zone* zone, float x, float y, float radius);

	bool containsPoint(float x, float y);

	String getRegionName();

};

class CityRegionHelper : public DistributedObjectClassHelper, public Singleton<CityRegionHelper> {
	static CityRegionHelper* staticInitializer;

public:
	CityRegionHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<CityRegionHelper>;
};

} // namespace region
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::region;

#endif /*CITYREGION_H_*/
