/*
 *	server/zone/objects/group/GroupObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "GroupObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/chat/room/ChatRoom.h"

#include "server/zone/Zone.h"

/*
 *	GroupObjectStub
 */

enum {RPC_SENDBASELINESTO__SCENEOBJECT_ = 6,RPC_BROADCASTMESSAGE__BASEMESSAGE_,RPC_BROADCASTMESSAGE__PLAYERCREATURE_BASEMESSAGE_BOOL_,RPC_ADDMEMBER__SCENEOBJECT_,RPC_REMOVEMEMBER__SCENEOBJECT_,RPC_DISBAND__,RPC_MAKELEADER__SCENEOBJECT_,RPC_HASMEMBER__SCENEOBJECT_,RPC_STARTCHATROOM__,RPC_DESTROYCHATROOM__,RPC_GETGROUPHARVESTMODIFIER__PLAYERCREATURE_,RPC_GETGROUPLEVEL__,RPC_GETGROUPCHANNEL__,RPC_GETGROUPSIZE__,RPC_GETGROUPMEMBER__INT_,RPC_INITIALIZELEADER__SCENEOBJECT_,RPC_GETLEADER__,RPC_ISGROUPOBJECT__,RPC_HASSQUADLEADER__,RPC_ADDGROUPMODIFIERS__,RPC_REMOVEGROUPMODIFIERS__,RPC_ADDGROUPMODIFIERS__PLAYERCREATURE_,RPC_REMOVEGROUPMODIFIERS__PLAYERCREATURE_};

GroupObject::GroupObject() : SceneObject(DummyConstructorParameter::instance()) {
	GroupObjectImplementation* _implementation = new GroupObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

GroupObject::GroupObject(DummyConstructorParameter* param) : SceneObject(param) {
}

GroupObject::~GroupObject() {
}


void GroupObject::sendBaselinesTo(SceneObject* player) {
	GroupObjectImplementation* _implementation = (GroupObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDBASELINESTO__SCENEOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendBaselinesTo(player);
}

void GroupObject::broadcastMessage(BaseMessage* msg) {
	GroupObjectImplementation* _implementation = (GroupObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_BROADCASTMESSAGE__BASEMESSAGE_);
		method.addObjectParameter(msg);

		method.executeWithVoidReturn();
	} else
		_implementation->broadcastMessage(msg);
}

void GroupObject::broadcastMessage(PlayerCreature* player, BaseMessage* msg, bool sendSelf) {
	GroupObjectImplementation* _implementation = (GroupObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_BROADCASTMESSAGE__PLAYERCREATURE_BASEMESSAGE_BOOL_);
		method.addObjectParameter(player);
		method.addObjectParameter(msg);
		method.addBooleanParameter(sendSelf);

		method.executeWithVoidReturn();
	} else
		_implementation->broadcastMessage(player, msg, sendSelf);
}

void GroupObject::addMember(SceneObject* player) {
	GroupObjectImplementation* _implementation = (GroupObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDMEMBER__SCENEOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->addMember(player);
}

void GroupObject::removeMember(SceneObject* player) {
	GroupObjectImplementation* _implementation = (GroupObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEMEMBER__SCENEOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->removeMember(player);
}

void GroupObject::disband() {
	GroupObjectImplementation* _implementation = (GroupObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DISBAND__);

		method.executeWithVoidReturn();
	} else
		_implementation->disband();
}

void GroupObject::makeLeader(SceneObject* player) {
	GroupObjectImplementation* _implementation = (GroupObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_MAKELEADER__SCENEOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->makeLeader(player);
}

bool GroupObject::hasMember(SceneObject* player) {
	GroupObjectImplementation* _implementation = (GroupObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASMEMBER__SCENEOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasMember(player);
}

void GroupObject::startChatRoom() {
	GroupObjectImplementation* _implementation = (GroupObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_STARTCHATROOM__);

		method.executeWithVoidReturn();
	} else
		_implementation->startChatRoom();
}

void GroupObject::destroyChatRoom() {
	GroupObjectImplementation* _implementation = (GroupObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DESTROYCHATROOM__);

		method.executeWithVoidReturn();
	} else
		_implementation->destroyChatRoom();
}

float GroupObject::getGroupHarvestModifier(PlayerCreature* player) {
	GroupObjectImplementation* _implementation = (GroupObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGROUPHARVESTMODIFIER__PLAYERCREATURE_);
		method.addObjectParameter(player);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getGroupHarvestModifier(player);
}

int GroupObject::getGroupLevel() {
	GroupObjectImplementation* _implementation = (GroupObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGROUPLEVEL__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getGroupLevel();
}

ChatRoom* GroupObject::getGroupChannel() {
	GroupObjectImplementation* _implementation = (GroupObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGROUPCHANNEL__);

		return (ChatRoom*) method.executeWithObjectReturn();
	} else
		return _implementation->getGroupChannel();
}

int GroupObject::getGroupSize() {
	GroupObjectImplementation* _implementation = (GroupObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGROUPSIZE__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getGroupSize();
}

SceneObject* GroupObject::getGroupMember(int index) {
	GroupObjectImplementation* _implementation = (GroupObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGROUPMEMBER__INT_);
		method.addSignedIntParameter(index);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return _implementation->getGroupMember(index);
}

void GroupObject::initializeLeader(SceneObject* player) {
	GroupObjectImplementation* _implementation = (GroupObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZELEADER__SCENEOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeLeader(player);
}

SceneObject* GroupObject::getLeader() {
	GroupObjectImplementation* _implementation = (GroupObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETLEADER__);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return _implementation->getLeader();
}

GroupList* GroupObject::getGroupList() {
	GroupObjectImplementation* _implementation = (GroupObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getGroupList();
}

bool GroupObject::isGroupObject() {
	GroupObjectImplementation* _implementation = (GroupObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISGROUPOBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isGroupObject();
}

bool GroupObject::hasSquadLeader() {
	GroupObjectImplementation* _implementation = (GroupObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASSQUADLEADER__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasSquadLeader();
}

void GroupObject::addGroupModifiers() {
	GroupObjectImplementation* _implementation = (GroupObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDGROUPMODIFIERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->addGroupModifiers();
}

void GroupObject::removeGroupModifiers() {
	GroupObjectImplementation* _implementation = (GroupObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEGROUPMODIFIERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->removeGroupModifiers();
}

void GroupObject::addGroupModifiers(PlayerCreature* player) {
	GroupObjectImplementation* _implementation = (GroupObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDGROUPMODIFIERS__PLAYERCREATURE_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->addGroupModifiers(player);
}

void GroupObject::removeGroupModifiers(PlayerCreature* player) {
	GroupObjectImplementation* _implementation = (GroupObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEGROUPMODIFIERS__PLAYERCREATURE_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->removeGroupModifiers(player);
}

DistributedObjectServant* GroupObject::_getImplementation() {

	_updated = true;
	return _impl;
}

void GroupObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	GroupObjectImplementation
 */

GroupObjectImplementation::GroupObjectImplementation(DummyConstructorParameter* param) : SceneObjectImplementation(param) {
	_initializeImplementation();
}


GroupObjectImplementation::~GroupObjectImplementation() {
}


void GroupObjectImplementation::finalize() {
}

void GroupObjectImplementation::_initializeImplementation() {
	_setClassHelper(GroupObjectHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void GroupObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (GroupObject*) stub;
	SceneObjectImplementation::_setStub(stub);
}

DistributedObjectStub* GroupObjectImplementation::_getStub() {
	return _this;
}

GroupObjectImplementation::operator const GroupObject*() {
	return _this;
}

void GroupObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void GroupObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void GroupObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void GroupObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void GroupObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void GroupObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void GroupObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void GroupObjectImplementation::_serializationHelperMethod() {
	SceneObjectImplementation::_serializationHelperMethod();

	_setClassName("GroupObject");

}

void GroupObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(GroupObjectImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool GroupObjectImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (SceneObjectImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "groupMembers") {
		TypeInfo<GroupList >::parseFromBinaryStream(&groupMembers, stream);
		return true;
	}

	if (_name == "chatRoom") {
		TypeInfo<ManagedReference<ChatRoom* > >::parseFromBinaryStream(&chatRoom, stream);
		return true;
	}

	if (_name == "groupLevel") {
		TypeInfo<int >::parseFromBinaryStream(&groupLevel, stream);
		return true;
	}


	return false;
}

void GroupObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = GroupObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int GroupObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "groupMembers";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<GroupList >::toBinaryStream(&groupMembers, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "chatRoom";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<ChatRoom* > >::toBinaryStream(&chatRoom, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "groupLevel";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&groupLevel, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 3 + SceneObjectImplementation::writeObjectMembers(stream);
}

GroupObjectImplementation::GroupObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/group/GroupObject.idl():  		groupLevel = 0;
	groupLevel = 0;
	// server/zone/objects/group/GroupObject.idl():  		Logger.setLoggingName("GroupObject");
	Logger::setLoggingName("GroupObject");
	// server/zone/objects/group/GroupObject.idl():  		chatRoom = null;
	chatRoom = NULL;
}

int GroupObjectImplementation::getGroupLevel() {
	// server/zone/objects/group/GroupObject.idl():  		return groupLevel;
	return groupLevel;
}

ChatRoom* GroupObjectImplementation::getGroupChannel() {
	// server/zone/objects/group/GroupObject.idl():  		return chatRoom;
	return chatRoom;
}

int GroupObjectImplementation::getGroupSize() {
	// server/zone/objects/group/GroupObject.idl():  		return groupMembers.size();
	return (&groupMembers)->size();
}

SceneObject* GroupObjectImplementation::getGroupMember(int index) {
	// server/zone/objects/group/GroupObject.idl():  		return groupMembers.get(index);
	return (&groupMembers)->get(index);
}

void GroupObjectImplementation::initializeLeader(SceneObject* player) {
	// server/zone/objects/group/GroupObject.idl():  		groupMembers.add(player);
	(&groupMembers)->add(player);
}

SceneObject* GroupObjectImplementation::getLeader() {
	// server/zone/objects/group/GroupObject.idl():  		return groupMembers.get(0);
	return (&groupMembers)->get(0);
}

GroupList* GroupObjectImplementation::getGroupList() {
	// server/zone/objects/group/GroupObject.idl():  		return groupMembers;
	return (&groupMembers);
}

bool GroupObjectImplementation::isGroupObject() {
	// server/zone/objects/group/GroupObject.idl():  		return true;
	return true;
}

/*
 *	GroupObjectAdapter
 */

GroupObjectAdapter::GroupObjectAdapter(GroupObjectImplementation* obj) : SceneObjectAdapter(obj) {
}

Packet* GroupObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_SENDBASELINESTO__SCENEOBJECT_:
		sendBaselinesTo((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_BROADCASTMESSAGE__BASEMESSAGE_:
		broadcastMessage((BaseMessage*) inv->getObjectParameter());
		break;
	case RPC_BROADCASTMESSAGE__PLAYERCREATURE_BASEMESSAGE_BOOL_:
		broadcastMessage((PlayerCreature*) inv->getObjectParameter(), (BaseMessage*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case RPC_ADDMEMBER__SCENEOBJECT_:
		addMember((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_REMOVEMEMBER__SCENEOBJECT_:
		removeMember((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_DISBAND__:
		disband();
		break;
	case RPC_MAKELEADER__SCENEOBJECT_:
		makeLeader((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_HASMEMBER__SCENEOBJECT_:
		resp->insertBoolean(hasMember((SceneObject*) inv->getObjectParameter()));
		break;
	case RPC_STARTCHATROOM__:
		startChatRoom();
		break;
	case RPC_DESTROYCHATROOM__:
		destroyChatRoom();
		break;
	case RPC_GETGROUPHARVESTMODIFIER__PLAYERCREATURE_:
		resp->insertFloat(getGroupHarvestModifier((PlayerCreature*) inv->getObjectParameter()));
		break;
	case RPC_GETGROUPLEVEL__:
		resp->insertSignedInt(getGroupLevel());
		break;
	case RPC_GETGROUPCHANNEL__:
		resp->insertLong(getGroupChannel()->_getObjectID());
		break;
	case RPC_GETGROUPSIZE__:
		resp->insertSignedInt(getGroupSize());
		break;
	case RPC_GETGROUPMEMBER__INT_:
		resp->insertLong(getGroupMember(inv->getSignedIntParameter())->_getObjectID());
		break;
	case RPC_INITIALIZELEADER__SCENEOBJECT_:
		initializeLeader((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_GETLEADER__:
		resp->insertLong(getLeader()->_getObjectID());
		break;
	case RPC_ISGROUPOBJECT__:
		resp->insertBoolean(isGroupObject());
		break;
	case RPC_HASSQUADLEADER__:
		resp->insertBoolean(hasSquadLeader());
		break;
	case RPC_ADDGROUPMODIFIERS__:
		addGroupModifiers();
		break;
	case RPC_REMOVEGROUPMODIFIERS__:
		removeGroupModifiers();
		break;
	case RPC_ADDGROUPMODIFIERS__PLAYERCREATURE_:
		addGroupModifiers((PlayerCreature*) inv->getObjectParameter());
		break;
	case RPC_REMOVEGROUPMODIFIERS__PLAYERCREATURE_:
		removeGroupModifiers((PlayerCreature*) inv->getObjectParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void GroupObjectAdapter::sendBaselinesTo(SceneObject* player) {
	((GroupObjectImplementation*) impl)->sendBaselinesTo(player);
}

void GroupObjectAdapter::broadcastMessage(BaseMessage* msg) {
	((GroupObjectImplementation*) impl)->broadcastMessage(msg);
}

void GroupObjectAdapter::broadcastMessage(PlayerCreature* player, BaseMessage* msg, bool sendSelf) {
	((GroupObjectImplementation*) impl)->broadcastMessage(player, msg, sendSelf);
}

void GroupObjectAdapter::addMember(SceneObject* player) {
	((GroupObjectImplementation*) impl)->addMember(player);
}

void GroupObjectAdapter::removeMember(SceneObject* player) {
	((GroupObjectImplementation*) impl)->removeMember(player);
}

void GroupObjectAdapter::disband() {
	((GroupObjectImplementation*) impl)->disband();
}

void GroupObjectAdapter::makeLeader(SceneObject* player) {
	((GroupObjectImplementation*) impl)->makeLeader(player);
}

bool GroupObjectAdapter::hasMember(SceneObject* player) {
	return ((GroupObjectImplementation*) impl)->hasMember(player);
}

void GroupObjectAdapter::startChatRoom() {
	((GroupObjectImplementation*) impl)->startChatRoom();
}

void GroupObjectAdapter::destroyChatRoom() {
	((GroupObjectImplementation*) impl)->destroyChatRoom();
}

float GroupObjectAdapter::getGroupHarvestModifier(PlayerCreature* player) {
	return ((GroupObjectImplementation*) impl)->getGroupHarvestModifier(player);
}

int GroupObjectAdapter::getGroupLevel() {
	return ((GroupObjectImplementation*) impl)->getGroupLevel();
}

ChatRoom* GroupObjectAdapter::getGroupChannel() {
	return ((GroupObjectImplementation*) impl)->getGroupChannel();
}

int GroupObjectAdapter::getGroupSize() {
	return ((GroupObjectImplementation*) impl)->getGroupSize();
}

SceneObject* GroupObjectAdapter::getGroupMember(int index) {
	return ((GroupObjectImplementation*) impl)->getGroupMember(index);
}

void GroupObjectAdapter::initializeLeader(SceneObject* player) {
	((GroupObjectImplementation*) impl)->initializeLeader(player);
}

SceneObject* GroupObjectAdapter::getLeader() {
	return ((GroupObjectImplementation*) impl)->getLeader();
}

bool GroupObjectAdapter::isGroupObject() {
	return ((GroupObjectImplementation*) impl)->isGroupObject();
}

bool GroupObjectAdapter::hasSquadLeader() {
	return ((GroupObjectImplementation*) impl)->hasSquadLeader();
}

void GroupObjectAdapter::addGroupModifiers() {
	((GroupObjectImplementation*) impl)->addGroupModifiers();
}

void GroupObjectAdapter::removeGroupModifiers() {
	((GroupObjectImplementation*) impl)->removeGroupModifiers();
}

void GroupObjectAdapter::addGroupModifiers(PlayerCreature* player) {
	((GroupObjectImplementation*) impl)->addGroupModifiers(player);
}

void GroupObjectAdapter::removeGroupModifiers(PlayerCreature* player) {
	((GroupObjectImplementation*) impl)->removeGroupModifiers(player);
}

/*
 *	GroupObjectHelper
 */

GroupObjectHelper* GroupObjectHelper::staticInitializer = GroupObjectHelper::instance();

GroupObjectHelper::GroupObjectHelper() {
	className = "GroupObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void GroupObjectHelper::finalizeHelper() {
	GroupObjectHelper::finalize();
}

DistributedObject* GroupObjectHelper::instantiateObject() {
	return new GroupObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* GroupObjectHelper::instantiateServant() {
	return new GroupObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* GroupObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new GroupObjectAdapter((GroupObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

