/*
 *	server/zone/objects/group/GroupObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "GroupObject.h"

#include "GroupObjectImplementation.h"

#include "../scene/SceneObject.h"

#include "../player/Player.h"

#include "../../../chat/room/ChatRoom.h"

/*
 *	GroupObjectStub
 */

GroupObject::GroupObject(unsigned long long oid, Player* leader) : SceneObject(DummyConstructorParameter::instance()) {
	_impl = new GroupObjectImplementation(oid, leader);
	_impl->_setStub(this);
}

GroupObject::GroupObject(DummyConstructorParameter* param) : SceneObject(param) {
}

GroupObject::~GroupObject() {
}

void GroupObject::sendTo(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((GroupObjectImplementation*) _impl)->sendTo(player);
}

void GroupObject::broadcastMessage(BaseMessage* msg) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(msg);

		method.executeWithVoidReturn();
	} else
		((GroupObjectImplementation*) _impl)->broadcastMessage(msg);
}

void GroupObject::sendSystemMessage(Player* player, const String& message, bool sendToSelf) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(player);
		method.addAsciiParameter(message);
		method.addBooleanParameter(sendToSelf);

		method.executeWithVoidReturn();
	} else
		((GroupObjectImplementation*) _impl)->sendSystemMessage(player, message, sendToSelf);
}

void GroupObject::sendSystemMessage(Player* player, const String& file, const String& str, unsigned long long targetid, bool sendToSelf) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(player);
		method.addAsciiParameter(file);
		method.addAsciiParameter(str);
		method.addUnsignedLongParameter(targetid);
		method.addBooleanParameter(sendToSelf);

		method.executeWithVoidReturn();
	} else
		((GroupObjectImplementation*) _impl)->sendSystemMessage(player, file, str, targetid, sendToSelf);
}

void GroupObject::sendSystemMessage(Player* player, const String& file, const String& str, StfParameter* param, bool sendToSelf) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(player);
		method.addAsciiParameter(file);
		method.addAsciiParameter(str);
		method.addObjectParameter(param);
		method.addBooleanParameter(sendToSelf);

		method.executeWithVoidReturn();
	} else
		((GroupObjectImplementation*) _impl)->sendSystemMessage(player, file, str, param, sendToSelf);
}

void GroupObject::addPlayer(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((GroupObjectImplementation*) _impl)->addPlayer(player);
}

void GroupObject::removePlayer(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((GroupObjectImplementation*) _impl)->removePlayer(player);
}

void GroupObject::disband() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		method.executeWithVoidReturn();
	} else
		((GroupObjectImplementation*) _impl)->disband();
}

void GroupObject::makeLeader(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((GroupObjectImplementation*) _impl)->makeLeader(player);
}

bool GroupObject::hasMember(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return ((GroupObjectImplementation*) _impl)->hasMember(player);
}

void GroupObject::startChannel() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		method.executeWithVoidReturn();
	} else
		((GroupObjectImplementation*) _impl)->startChannel();
}

ChatRoom* GroupObject::getGroupChannel() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);

		return (ChatRoom*) method.executeWithObjectReturn();
	} else
		return ((GroupObjectImplementation*) _impl)->getGroupChannel();
}

int GroupObject::getListSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		return method.executeWithSignedIntReturn();
	} else
		return ((GroupObjectImplementation*) _impl)->getListSize();
}

int GroupObject::getGroupSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);

		return method.executeWithSignedIntReturn();
	} else
		return ((GroupObjectImplementation*) _impl)->getGroupSize();
}

Player* GroupObject::getGroupMember(int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addSignedIntParameter(index);

		return (Player*) method.executeWithObjectReturn();
	} else
		return ((GroupObjectImplementation*) _impl)->getGroupMember(index);
}

void GroupObject::addMember(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((GroupObjectImplementation*) _impl)->addMember(player);
}

Player* GroupObject::getLeader() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);

		return (Player*) method.executeWithObjectReturn();
	} else
		return ((GroupObjectImplementation*) _impl)->getLeader();
}

unsigned int GroupObject::getListCount() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((GroupObjectImplementation*) _impl)->getListCount();
}

unsigned int GroupObject::getNewListCount(int cnt) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);
		method.addSignedIntParameter(cnt);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((GroupObjectImplementation*) _impl)->getNewListCount(cnt);
}

float GroupObject::getRangerBonusForHarvesting(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);
		method.addObjectParameter(player);

		return method.executeWithFloatReturn();
	} else
		return ((GroupObjectImplementation*) _impl)->getRangerBonusForHarvesting(player);
}

void GroupObject::calcGroupLevel() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);

		method.executeWithVoidReturn();
	} else
		((GroupObjectImplementation*) _impl)->calcGroupLevel();
}

int GroupObject::getGroupLevel() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);

		return method.executeWithSignedIntReturn();
	} else
		return ((GroupObjectImplementation*) _impl)->getGroupLevel();
}

/*
 *	GroupObjectAdapter
 */

GroupObjectAdapter::GroupObjectAdapter(GroupObjectImplementation* obj) : SceneObjectAdapter(obj) {
}

Packet* GroupObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		sendTo((Player*) inv->getObjectParameter());
		break;
	case 7:
		broadcastMessage((BaseMessage*) inv->getObjectParameter());
		break;
	case 8:
		sendSystemMessage((Player*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_sendSystemMessage__Player_String_bool_), inv->getBooleanParameter());
		break;
	case 9:
		sendSystemMessage((Player*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_sendSystemMessage__Player_String_String_long_bool_), inv->getAsciiParameter(_param2_sendSystemMessage__Player_String_String_long_bool_), inv->getUnsignedLongParameter(), inv->getBooleanParameter());
		break;
	case 10:
		sendSystemMessage((Player*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_sendSystemMessage__Player_String_String_StfParameter_bool_), inv->getAsciiParameter(_param2_sendSystemMessage__Player_String_String_StfParameter_bool_), (StfParameter*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 11:
		addPlayer((Player*) inv->getObjectParameter());
		break;
	case 12:
		removePlayer((Player*) inv->getObjectParameter());
		break;
	case 13:
		disband();
		break;
	case 14:
		makeLeader((Player*) inv->getObjectParameter());
		break;
	case 15:
		resp->insertBoolean(hasMember((Player*) inv->getObjectParameter()));
		break;
	case 16:
		startChannel();
		break;
	case 17:
		resp->insertLong(getGroupChannel()->_getObjectID());
		break;
	case 18:
		resp->insertSignedInt(getListSize());
		break;
	case 19:
		resp->insertSignedInt(getGroupSize());
		break;
	case 20:
		resp->insertLong(getGroupMember(inv->getSignedIntParameter())->_getObjectID());
		break;
	case 21:
		addMember((Player*) inv->getObjectParameter());
		break;
	case 22:
		resp->insertLong(getLeader()->_getObjectID());
		break;
	case 23:
		resp->insertInt(getListCount());
		break;
	case 24:
		resp->insertInt(getNewListCount(inv->getSignedIntParameter()));
		break;
	case 25:
		resp->insertFloat(getRangerBonusForHarvesting((Player*) inv->getObjectParameter()));
		break;
	case 26:
		calcGroupLevel();
		break;
	case 27:
		resp->insertSignedInt(getGroupLevel());
		break;
	default:
		return NULL;
	}

	return resp;
}

void GroupObjectAdapter::sendTo(Player* player) {
	return ((GroupObjectImplementation*) impl)->sendTo(player);
}

void GroupObjectAdapter::broadcastMessage(BaseMessage* msg) {
	return ((GroupObjectImplementation*) impl)->broadcastMessage(msg);
}

void GroupObjectAdapter::sendSystemMessage(Player* player, const String& message, bool sendToSelf) {
	return ((GroupObjectImplementation*) impl)->sendSystemMessage(player, message, sendToSelf);
}

void GroupObjectAdapter::sendSystemMessage(Player* player, const String& file, const String& str, unsigned long long targetid, bool sendToSelf) {
	return ((GroupObjectImplementation*) impl)->sendSystemMessage(player, file, str, targetid, sendToSelf);
}

void GroupObjectAdapter::sendSystemMessage(Player* player, const String& file, const String& str, StfParameter* param, bool sendToSelf) {
	return ((GroupObjectImplementation*) impl)->sendSystemMessage(player, file, str, param, sendToSelf);
}

void GroupObjectAdapter::addPlayer(Player* player) {
	return ((GroupObjectImplementation*) impl)->addPlayer(player);
}

void GroupObjectAdapter::removePlayer(Player* player) {
	return ((GroupObjectImplementation*) impl)->removePlayer(player);
}

void GroupObjectAdapter::disband() {
	return ((GroupObjectImplementation*) impl)->disband();
}

void GroupObjectAdapter::makeLeader(Player* player) {
	return ((GroupObjectImplementation*) impl)->makeLeader(player);
}

bool GroupObjectAdapter::hasMember(Player* player) {
	return ((GroupObjectImplementation*) impl)->hasMember(player);
}

void GroupObjectAdapter::startChannel() {
	return ((GroupObjectImplementation*) impl)->startChannel();
}

ChatRoom* GroupObjectAdapter::getGroupChannel() {
	return ((GroupObjectImplementation*) impl)->getGroupChannel();
}

int GroupObjectAdapter::getListSize() {
	return ((GroupObjectImplementation*) impl)->getListSize();
}

int GroupObjectAdapter::getGroupSize() {
	return ((GroupObjectImplementation*) impl)->getGroupSize();
}

Player* GroupObjectAdapter::getGroupMember(int index) {
	return ((GroupObjectImplementation*) impl)->getGroupMember(index);
}

void GroupObjectAdapter::addMember(Player* player) {
	return ((GroupObjectImplementation*) impl)->addMember(player);
}

Player* GroupObjectAdapter::getLeader() {
	return ((GroupObjectImplementation*) impl)->getLeader();
}

unsigned int GroupObjectAdapter::getListCount() {
	return ((GroupObjectImplementation*) impl)->getListCount();
}

unsigned int GroupObjectAdapter::getNewListCount(int cnt) {
	return ((GroupObjectImplementation*) impl)->getNewListCount(cnt);
}

float GroupObjectAdapter::getRangerBonusForHarvesting(Player* player) {
	return ((GroupObjectImplementation*) impl)->getRangerBonusForHarvesting(player);
}

void GroupObjectAdapter::calcGroupLevel() {
	return ((GroupObjectImplementation*) impl)->calcGroupLevel();
}

int GroupObjectAdapter::getGroupLevel() {
	return ((GroupObjectImplementation*) impl)->getGroupLevel();
}

/*
 *	GroupObjectHelper
 */

GroupObjectHelper* GroupObjectHelper::staticInitializer = GroupObjectHelper::instance();

GroupObjectHelper::GroupObjectHelper() {
	className = "GroupObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void GroupObjectHelper::finalizeHelper() {
	GroupObjectHelper::finalize();
}

DistributedObject* GroupObjectHelper::instantiateObject() {
	return new GroupObject(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* GroupObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new GroupObjectAdapter((GroupObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	GroupObjectServant
 */

GroupObjectServant::GroupObjectServant(unsigned long long oid, int type) : SceneObjectImplementation(oid, type) {
	_classHelper = GroupObjectHelper::instance();
}

GroupObjectServant::~GroupObjectServant() {
}

void GroupObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (GroupObject*) stub;
	SceneObjectServant::_setStub(stub);
}

DistributedObjectStub* GroupObjectServant::_getStub() {
	return _this;
}

