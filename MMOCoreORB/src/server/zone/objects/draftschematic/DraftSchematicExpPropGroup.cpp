/*
 *	server/zone/objects/draftschematic/DraftSchematicExpPropGroup.cpp generated by engine3 IDL compiler 0.55
 */

#include "DraftSchematicExpPropGroup.h"

#include "DraftSchematicExpPropGroupImplementation.h"

#include "../../packets/object/ObjectControllerMessage.h"

/*
 *	DraftSchematicExpPropGroupStub
 */

DraftSchematicExpPropGroup::DraftSchematicExpPropGroup(String& Title, String& Subtitle) {
	_impl = new DraftSchematicExpPropGroupImplementation(Title, Subtitle);
	_impl->_setStub(this);
}

DraftSchematicExpPropGroup::DraftSchematicExpPropGroup(DraftSchematicExpPropGroup* group) {
	_impl = new DraftSchematicExpPropGroupImplementation(group);
	_impl->_setStub(this);
}

DraftSchematicExpPropGroup::DraftSchematicExpPropGroup(DummyConstructorParameter* param) {
	_impl = NULL;
}

DraftSchematicExpPropGroup::~DraftSchematicExpPropGroup() {
}

void DraftSchematicExpPropGroup::addExperimentalProperty(const String& experimentalPropertyType, unsigned int weight, float min, float max, int precision) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addAsciiParameter(experimentalPropertyType);
		method.addUnsignedIntParameter(weight);
		method.addFloatParameter(min);
		method.addFloatParameter(max);
		method.addSignedIntParameter(precision);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicExpPropGroupImplementation*) _impl)->addExperimentalProperty(experimentalPropertyType, weight, min, max, precision);
}

void DraftSchematicExpPropGroup::sendBatchToPlayer(ObjectControllerMessage* msg) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(msg);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicExpPropGroupImplementation*) _impl)->sendBatchToPlayer(msg);
}

void DraftSchematicExpPropGroup::sendToPlayer(ObjectControllerMessage* msg) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(msg);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicExpPropGroupImplementation*) _impl)->sendToPlayer(msg);
}

bool DraftSchematicExpPropGroup::containsExpPropType(const String& expPropType) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addAsciiParameter(expPropType);

		return method.executeWithBooleanReturn();
	} else
		return ((DraftSchematicExpPropGroupImplementation*) _impl)->containsExpPropType(expPropType);
}

float DraftSchematicExpPropGroup::getExpPropPercentage(const String& expPropType) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addAsciiParameter(expPropType);

		return method.executeWithFloatReturn();
	} else
		return ((DraftSchematicExpPropGroupImplementation*) _impl)->getExpPropPercentage(expPropType);
}

unsigned int DraftSchematicExpPropGroup::getExpPropPercentageListSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((DraftSchematicExpPropGroupImplementation*) _impl)->getExpPropPercentageListSize();
}

float DraftSchematicExpPropGroup::getExpPropPercentage(unsigned int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addUnsignedIntParameter(index);

		return method.executeWithFloatReturn();
	} else
		return ((DraftSchematicExpPropGroupImplementation*) _impl)->getExpPropPercentage(index);
}

unsigned char DraftSchematicExpPropGroup::getBatchTypeAndWeight(unsigned int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addUnsignedIntParameter(index);

		return method.executeWithUnsignedCharReturn();
	} else
		return ((DraftSchematicExpPropGroupImplementation*) _impl)->getBatchTypeAndWeight(index);
}

unsigned char DraftSchematicExpPropGroup::getTypeAndWeight(unsigned int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addUnsignedIntParameter(index);

		return method.executeWithUnsignedCharReturn();
	} else
		return ((DraftSchematicExpPropGroupImplementation*) _impl)->getTypeAndWeight(index);
}

String& DraftSchematicExpPropGroup::getKey(int i) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addSignedIntParameter(i);

		method.executeWithAsciiReturn(_return_getKey);
		return _return_getKey;
	} else
		return ((DraftSchematicExpPropGroupImplementation*) _impl)->getKey(i);
}

int DraftSchematicExpPropGroup::getKeyCount() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		return method.executeWithSignedIntReturn();
	} else
		return ((DraftSchematicExpPropGroupImplementation*) _impl)->getKeyCount();
}

String& DraftSchematicExpPropGroup::getExpPropTypesKey(int i) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addSignedIntParameter(i);

		method.executeWithAsciiReturn(_return_getExpPropTypesKey);
		return _return_getExpPropTypesKey;
	} else
		return ((DraftSchematicExpPropGroupImplementation*) _impl)->getExpPropTypesKey(i);
}

unsigned char DraftSchematicExpPropGroup::getExpPropTypesValue(int i) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addSignedIntParameter(i);

		return method.executeWithUnsignedCharReturn();
	} else
		return ((DraftSchematicExpPropGroupImplementation*) _impl)->getExpPropTypesValue(i);
}

int DraftSchematicExpPropGroup::getExpPropTypesSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);

		return method.executeWithSignedIntReturn();
	} else
		return ((DraftSchematicExpPropGroupImplementation*) _impl)->getExpPropTypesSize();
}

String& DraftSchematicExpPropGroup::getExpPropWeightsKey(int i) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addSignedIntParameter(i);

		method.executeWithAsciiReturn(_return_getExpPropWeightsKey);
		return _return_getExpPropWeightsKey;
	} else
		return ((DraftSchematicExpPropGroupImplementation*) _impl)->getExpPropWeightsKey(i);
}

unsigned char DraftSchematicExpPropGroup::getExpPropWeightsValue(int i) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addSignedIntParameter(i);

		return method.executeWithUnsignedCharReturn();
	} else
		return ((DraftSchematicExpPropGroupImplementation*) _impl)->getExpPropWeightsValue(i);
}

int DraftSchematicExpPropGroup::getExpPropWeightsSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);

		return method.executeWithSignedIntReturn();
	} else
		return ((DraftSchematicExpPropGroupImplementation*) _impl)->getExpPropWeightsSize();
}

String& DraftSchematicExpPropGroup::getExpPropWeightPercentagesKey(int i) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);
		method.addSignedIntParameter(i);

		method.executeWithAsciiReturn(_return_getExpPropWeightPercentagesKey);
		return _return_getExpPropWeightPercentagesKey;
	} else
		return ((DraftSchematicExpPropGroupImplementation*) _impl)->getExpPropWeightPercentagesKey(i);
}

float DraftSchematicExpPropGroup::getExpPropWeightPercentagesValue(int i) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);
		method.addSignedIntParameter(i);

		return method.executeWithFloatReturn();
	} else
		return ((DraftSchematicExpPropGroupImplementation*) _impl)->getExpPropWeightPercentagesValue(i);
}

int DraftSchematicExpPropGroup::getExpPropWeightPercentagesSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);

		return method.executeWithSignedIntReturn();
	} else
		return ((DraftSchematicExpPropGroupImplementation*) _impl)->getExpPropWeightPercentagesSize();
}

String& DraftSchematicExpPropGroup::getSubtitle() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);

		method.executeWithAsciiReturn(_return_getSubtitle);
		return _return_getSubtitle;
	} else
		return ((DraftSchematicExpPropGroupImplementation*) _impl)->getSubtitle();
}

String& DraftSchematicExpPropGroup::getTitle() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);

		method.executeWithAsciiReturn(_return_getTitle);
		return _return_getTitle;
	} else
		return ((DraftSchematicExpPropGroupImplementation*) _impl)->getTitle();
}

float DraftSchematicExpPropGroup::getMinValue() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);

		return method.executeWithFloatReturn();
	} else
		return ((DraftSchematicExpPropGroupImplementation*) _impl)->getMinValue();
}

float DraftSchematicExpPropGroup::getMaxValue() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);

		return method.executeWithFloatReturn();
	} else
		return ((DraftSchematicExpPropGroupImplementation*) _impl)->getMaxValue();
}

float DraftSchematicExpPropGroup::getRange() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);

		return method.executeWithFloatReturn();
	} else
		return ((DraftSchematicExpPropGroupImplementation*) _impl)->getRange();
}

int DraftSchematicExpPropGroup::getPrecision() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);

		return method.executeWithSignedIntReturn();
	} else
		return ((DraftSchematicExpPropGroupImplementation*) _impl)->getPrecision();
}

bool DraftSchematicExpPropGroup::isFiller() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);

		return method.executeWithBooleanReturn();
	} else
		return ((DraftSchematicExpPropGroupImplementation*) _impl)->isFiller();
}

/*
 *	DraftSchematicExpPropGroupAdapter
 */

DraftSchematicExpPropGroupAdapter::DraftSchematicExpPropGroupAdapter(DraftSchematicExpPropGroupImplementation* obj) : DistributedObjectAdapter((DistributedObjectServant*) obj) {
}

Packet* DraftSchematicExpPropGroupAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		addExperimentalProperty(inv->getAsciiParameter(_param0_addExperimentalProperty__String_int_float_float_int_), inv->getUnsignedIntParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getSignedIntParameter());
		break;
	case 7:
		sendBatchToPlayer((ObjectControllerMessage*) inv->getObjectParameter());
		break;
	case 8:
		sendToPlayer((ObjectControllerMessage*) inv->getObjectParameter());
		break;
	case 9:
		resp->insertBoolean(containsExpPropType(inv->getAsciiParameter(_param0_containsExpPropType__String_)));
		break;
	case 10:
		resp->insertFloat(getExpPropPercentage(inv->getAsciiParameter(_param0_getExpPropPercentage__String_)));
		break;
	case 11:
		resp->insertInt(getExpPropPercentageListSize());
		break;
	case 12:
		resp->insertFloat(getExpPropPercentage(inv->getUnsignedIntParameter()));
		break;
	case 13:
		resp->insertByte(getBatchTypeAndWeight(inv->getUnsignedIntParameter()));
		break;
	case 14:
		resp->insertByte(getTypeAndWeight(inv->getUnsignedIntParameter()));
		break;
	case 15:
		resp->insertAscii(getKey(inv->getSignedIntParameter()));
		break;
	case 16:
		resp->insertSignedInt(getKeyCount());
		break;
	case 17:
		resp->insertAscii(getExpPropTypesKey(inv->getSignedIntParameter()));
		break;
	case 18:
		resp->insertByte(getExpPropTypesValue(inv->getSignedIntParameter()));
		break;
	case 19:
		resp->insertSignedInt(getExpPropTypesSize());
		break;
	case 20:
		resp->insertAscii(getExpPropWeightsKey(inv->getSignedIntParameter()));
		break;
	case 21:
		resp->insertByte(getExpPropWeightsValue(inv->getSignedIntParameter()));
		break;
	case 22:
		resp->insertSignedInt(getExpPropWeightsSize());
		break;
	case 23:
		resp->insertAscii(getExpPropWeightPercentagesKey(inv->getSignedIntParameter()));
		break;
	case 24:
		resp->insertFloat(getExpPropWeightPercentagesValue(inv->getSignedIntParameter()));
		break;
	case 25:
		resp->insertSignedInt(getExpPropWeightPercentagesSize());
		break;
	case 26:
		resp->insertAscii(getSubtitle());
		break;
	case 27:
		resp->insertAscii(getTitle());
		break;
	case 28:
		resp->insertFloat(getMinValue());
		break;
	case 29:
		resp->insertFloat(getMaxValue());
		break;
	case 30:
		resp->insertFloat(getRange());
		break;
	case 31:
		resp->insertSignedInt(getPrecision());
		break;
	case 32:
		resp->insertBoolean(isFiller());
		break;
	default:
		return NULL;
	}

	return resp;
}

void DraftSchematicExpPropGroupAdapter::addExperimentalProperty(const String& experimentalPropertyType, unsigned int weight, float min, float max, int precision) {
	return ((DraftSchematicExpPropGroupImplementation*) impl)->addExperimentalProperty(experimentalPropertyType, weight, min, max, precision);
}

void DraftSchematicExpPropGroupAdapter::sendBatchToPlayer(ObjectControllerMessage* msg) {
	return ((DraftSchematicExpPropGroupImplementation*) impl)->sendBatchToPlayer(msg);
}

void DraftSchematicExpPropGroupAdapter::sendToPlayer(ObjectControllerMessage* msg) {
	return ((DraftSchematicExpPropGroupImplementation*) impl)->sendToPlayer(msg);
}

bool DraftSchematicExpPropGroupAdapter::containsExpPropType(const String& expPropType) {
	return ((DraftSchematicExpPropGroupImplementation*) impl)->containsExpPropType(expPropType);
}

float DraftSchematicExpPropGroupAdapter::getExpPropPercentage(const String& expPropType) {
	return ((DraftSchematicExpPropGroupImplementation*) impl)->getExpPropPercentage(expPropType);
}

unsigned int DraftSchematicExpPropGroupAdapter::getExpPropPercentageListSize() {
	return ((DraftSchematicExpPropGroupImplementation*) impl)->getExpPropPercentageListSize();
}

float DraftSchematicExpPropGroupAdapter::getExpPropPercentage(unsigned int index) {
	return ((DraftSchematicExpPropGroupImplementation*) impl)->getExpPropPercentage(index);
}

unsigned char DraftSchematicExpPropGroupAdapter::getBatchTypeAndWeight(unsigned int index) {
	return ((DraftSchematicExpPropGroupImplementation*) impl)->getBatchTypeAndWeight(index);
}

unsigned char DraftSchematicExpPropGroupAdapter::getTypeAndWeight(unsigned int index) {
	return ((DraftSchematicExpPropGroupImplementation*) impl)->getTypeAndWeight(index);
}

String& DraftSchematicExpPropGroupAdapter::getKey(int i) {
	return ((DraftSchematicExpPropGroupImplementation*) impl)->getKey(i);
}

int DraftSchematicExpPropGroupAdapter::getKeyCount() {
	return ((DraftSchematicExpPropGroupImplementation*) impl)->getKeyCount();
}

String& DraftSchematicExpPropGroupAdapter::getExpPropTypesKey(int i) {
	return ((DraftSchematicExpPropGroupImplementation*) impl)->getExpPropTypesKey(i);
}

unsigned char DraftSchematicExpPropGroupAdapter::getExpPropTypesValue(int i) {
	return ((DraftSchematicExpPropGroupImplementation*) impl)->getExpPropTypesValue(i);
}

int DraftSchematicExpPropGroupAdapter::getExpPropTypesSize() {
	return ((DraftSchematicExpPropGroupImplementation*) impl)->getExpPropTypesSize();
}

String& DraftSchematicExpPropGroupAdapter::getExpPropWeightsKey(int i) {
	return ((DraftSchematicExpPropGroupImplementation*) impl)->getExpPropWeightsKey(i);
}

unsigned char DraftSchematicExpPropGroupAdapter::getExpPropWeightsValue(int i) {
	return ((DraftSchematicExpPropGroupImplementation*) impl)->getExpPropWeightsValue(i);
}

int DraftSchematicExpPropGroupAdapter::getExpPropWeightsSize() {
	return ((DraftSchematicExpPropGroupImplementation*) impl)->getExpPropWeightsSize();
}

String& DraftSchematicExpPropGroupAdapter::getExpPropWeightPercentagesKey(int i) {
	return ((DraftSchematicExpPropGroupImplementation*) impl)->getExpPropWeightPercentagesKey(i);
}

float DraftSchematicExpPropGroupAdapter::getExpPropWeightPercentagesValue(int i) {
	return ((DraftSchematicExpPropGroupImplementation*) impl)->getExpPropWeightPercentagesValue(i);
}

int DraftSchematicExpPropGroupAdapter::getExpPropWeightPercentagesSize() {
	return ((DraftSchematicExpPropGroupImplementation*) impl)->getExpPropWeightPercentagesSize();
}

String& DraftSchematicExpPropGroupAdapter::getSubtitle() {
	return ((DraftSchematicExpPropGroupImplementation*) impl)->getSubtitle();
}

String& DraftSchematicExpPropGroupAdapter::getTitle() {
	return ((DraftSchematicExpPropGroupImplementation*) impl)->getTitle();
}

float DraftSchematicExpPropGroupAdapter::getMinValue() {
	return ((DraftSchematicExpPropGroupImplementation*) impl)->getMinValue();
}

float DraftSchematicExpPropGroupAdapter::getMaxValue() {
	return ((DraftSchematicExpPropGroupImplementation*) impl)->getMaxValue();
}

float DraftSchematicExpPropGroupAdapter::getRange() {
	return ((DraftSchematicExpPropGroupImplementation*) impl)->getRange();
}

int DraftSchematicExpPropGroupAdapter::getPrecision() {
	return ((DraftSchematicExpPropGroupImplementation*) impl)->getPrecision();
}

bool DraftSchematicExpPropGroupAdapter::isFiller() {
	return ((DraftSchematicExpPropGroupImplementation*) impl)->isFiller();
}

/*
 *	DraftSchematicExpPropGroupHelper
 */

DraftSchematicExpPropGroupHelper* DraftSchematicExpPropGroupHelper::staticInitializer = DraftSchematicExpPropGroupHelper::instance();

DraftSchematicExpPropGroupHelper::DraftSchematicExpPropGroupHelper() {
	className = "DraftSchematicExpPropGroup";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void DraftSchematicExpPropGroupHelper::finalizeHelper() {
	DraftSchematicExpPropGroupHelper::finalize();
}

DistributedObject* DraftSchematicExpPropGroupHelper::instantiateObject() {
	return new DraftSchematicExpPropGroup(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* DraftSchematicExpPropGroupHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new DraftSchematicExpPropGroupAdapter((DraftSchematicExpPropGroupImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	DraftSchematicExpPropGroupServant
 */

DraftSchematicExpPropGroupServant::DraftSchematicExpPropGroupServant() {
	_classHelper = DraftSchematicExpPropGroupHelper::instance();
}

DraftSchematicExpPropGroupServant::~DraftSchematicExpPropGroupServant() {
}

void DraftSchematicExpPropGroupServant::_setStub(DistributedObjectStub* stub) {
	_this = (DraftSchematicExpPropGroup*) stub;
}

DistributedObjectStub* DraftSchematicExpPropGroupServant::_getStub() {
	return _this;
}

