/*
 *	server/zone/objects/draftschematic/DraftSchematicIngredient.h generated by engine3 IDL compiler 0.55
 */

#ifndef DRAFTSCHEMATICINGREDIENT_H_
#define DRAFTSCHEMATICINGREDIENT_H_

#include "engine/orb/DistributedObjectBroker.h"

class ObjectControllerMessage;

class DraftSchematicIngredient : public DistributedObjectStub {
public:
	DraftSchematicIngredient(const String& ingredientTemplateName, const String& ingredientTitleName, const int slotoption, const String& resourceType, unsigned int resourceQuantity, unsigned int combineType, float contribution);

	DraftSchematicIngredient(DraftSchematicIngredient* ingredient);

	void helperSendToPlayer(ObjectControllerMessage* msg);

	String& getTemplateName();

	String& getTitleName();

	String& getResourceType();

	unsigned int getResourceQuantity();

	unsigned int getCombineType();

	int getSlotType();

	bool isOptionalSlot();

	bool isIdenticalSlot();

	bool isResourceSlot();

	bool isMixedSlot();

	float getContribution();

protected:
	DraftSchematicIngredient(DummyConstructorParameter* param);

	virtual ~DraftSchematicIngredient();

	String _return_getResourceType;
	String _return_getTemplateName;
	String _return_getTitleName;

	friend class DraftSchematicIngredientHelper;
};

class DraftSchematicIngredientImplementation;

class DraftSchematicIngredientAdapter : public DistributedObjectAdapter {
public:
	DraftSchematicIngredientAdapter(DraftSchematicIngredientImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void helperSendToPlayer(ObjectControllerMessage* msg);

	String& getTemplateName();

	String& getTitleName();

	String& getResourceType();

	unsigned int getResourceQuantity();

	unsigned int getCombineType();

	int getSlotType();

	bool isOptionalSlot();

	bool isIdenticalSlot();

	bool isResourceSlot();

	bool isMixedSlot();

	float getContribution();

};

class DraftSchematicIngredientHelper : public DistributedObjectClassHelper, public Singleton<DraftSchematicIngredientHelper> {
	static DraftSchematicIngredientHelper* staticInitializer;

public:
	DraftSchematicIngredientHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<DraftSchematicIngredientHelper>;
};

class DraftSchematicIngredientServant : public DistributedObjectServant {
public:
	DraftSchematicIngredient* _this;

public:
	DraftSchematicIngredientServant();
	virtual ~DraftSchematicIngredientServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*DRAFTSCHEMATICINGREDIENT_H_*/
