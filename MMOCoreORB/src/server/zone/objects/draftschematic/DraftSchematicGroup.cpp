/*
 *	server/zone/objects/draftschematic/DraftSchematicGroup.cpp generated by engine3 IDL compiler 0.55
 */

#include "DraftSchematicGroup.h"

#include "DraftSchematicGroupImplementation.h"

#include "DraftSchematic.h"

/*
 *	DraftSchematicGroupStub
 */

DraftSchematicGroup::DraftSchematicGroup() {
	_impl = new DraftSchematicGroupImplementation();
	_impl->_setStub(this);
}

DraftSchematicGroup::DraftSchematicGroup(DummyConstructorParameter* param) {
	_impl = NULL;
}

DraftSchematicGroup::~DraftSchematicGroup() {
}

void DraftSchematicGroup::addDraftSchematic(DraftSchematic* schematic) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(schematic);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicGroupImplementation*) _impl)->addDraftSchematic(schematic);
}

int DraftSchematicGroup::getSizeOfDraftSchematicList() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		return method.executeWithSignedIntReturn();
	} else
		return ((DraftSchematicGroupImplementation*) _impl)->getSizeOfDraftSchematicList();
}

DraftSchematic* DraftSchematicGroup::getDraftSchematic(int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addSignedIntParameter(index);

		return (DraftSchematic*) method.executeWithObjectReturn();
	} else
		return ((DraftSchematicGroupImplementation*) _impl)->getDraftSchematic(index);
}

/*
 *	DraftSchematicGroupAdapter
 */

DraftSchematicGroupAdapter::DraftSchematicGroupAdapter(DraftSchematicGroupImplementation* obj) : DistributedObjectAdapter((DistributedObjectServant*) obj) {
}

Packet* DraftSchematicGroupAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		addDraftSchematic((DraftSchematic*) inv->getObjectParameter());
		break;
	case 7:
		resp->insertSignedInt(getSizeOfDraftSchematicList());
		break;
	case 8:
		resp->insertLong(getDraftSchematic(inv->getSignedIntParameter())->_getObjectID());
		break;
	default:
		return NULL;
	}

	return resp;
}

void DraftSchematicGroupAdapter::addDraftSchematic(DraftSchematic* schematic) {
	return ((DraftSchematicGroupImplementation*) impl)->addDraftSchematic(schematic);
}

int DraftSchematicGroupAdapter::getSizeOfDraftSchematicList() {
	return ((DraftSchematicGroupImplementation*) impl)->getSizeOfDraftSchematicList();
}

DraftSchematic* DraftSchematicGroupAdapter::getDraftSchematic(int index) {
	return ((DraftSchematicGroupImplementation*) impl)->getDraftSchematic(index);
}

/*
 *	DraftSchematicGroupHelper
 */

DraftSchematicGroupHelper* DraftSchematicGroupHelper::staticInitializer = DraftSchematicGroupHelper::instance();

DraftSchematicGroupHelper::DraftSchematicGroupHelper() {
	className = "DraftSchematicGroup";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void DraftSchematicGroupHelper::finalizeHelper() {
	DraftSchematicGroupHelper::finalize();
}

DistributedObject* DraftSchematicGroupHelper::instantiateObject() {
	return new DraftSchematicGroup(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* DraftSchematicGroupHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new DraftSchematicGroupAdapter((DraftSchematicGroupImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	DraftSchematicGroupServant
 */

DraftSchematicGroupServant::DraftSchematicGroupServant() {
	_classHelper = DraftSchematicGroupHelper::instance();
}

DraftSchematicGroupServant::~DraftSchematicGroupServant() {
}

void DraftSchematicGroupServant::_setStub(DistributedObjectStub* stub) {
	_this = (DraftSchematicGroup*) stub;
}

DistributedObjectStub* DraftSchematicGroupServant::_getStub() {
	return _this;
}

