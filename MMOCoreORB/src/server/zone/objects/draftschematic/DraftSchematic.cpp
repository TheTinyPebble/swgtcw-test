/*
 *	server/zone/objects/draftschematic/DraftSchematic.cpp generated by engine3 IDL compiler 0.55
 */

#include "DraftSchematic.h"

#include "DraftSchematicImplementation.h"

#include "../scene/SceneObject.h"

#include "../intangible/IntangibleObject.h"

#include "../player/Player.h"

#include "DraftSchematicIngredient.h"

#include "DraftSchematicAttribute.h"

#include "DraftSchematicValues.h"

#include "DraftSchematicExpPropGroup.h"

#include "../../packets/object/ObjectControllerMessage.h"

/*
 *	DraftSchematicStub
 */

DraftSchematic::DraftSchematic(unsigned int oid, const String& objName, const String& StringFile, const String& StringName, unsigned int objCRC, const String& groupName, unsigned int complexity, unsigned int schematicSize, int craftingToolTab) : SceneObject(DummyConstructorParameter::instance()) {
	_impl = new DraftSchematicImplementation(oid, objName, StringFile, StringName, objCRC, groupName, complexity, schematicSize, craftingToolTab);
	_impl->_setStub(this);
}

DraftSchematic::DraftSchematic(DraftSchematic* draftSchematic) : SceneObject(DummyConstructorParameter::instance()) {
	_impl = new DraftSchematicImplementation(draftSchematic);
	_impl->_setStub(this);
}

DraftSchematic::DraftSchematic(DummyConstructorParameter* param) : SceneObject(param) {
}

DraftSchematic::~DraftSchematic() {
}

DraftSchematic* DraftSchematic::dsClone(DraftSchematic* draftSchematic) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(draftSchematic);

		return (DraftSchematic*) method.executeWithObjectReturn();
	} else
		return ((DraftSchematicImplementation*) _impl)->dsClone(draftSchematic);
}

void DraftSchematic::destroy(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->destroy(player);
}

void DraftSchematic::sendTo(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->sendTo(player);
}

void DraftSchematic::addExperimentalProperty(unsigned int groupNumber, const String& experimentalProperty, unsigned int weight, String& title, String& subtitle, float min, float max, int precision) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addUnsignedIntParameter(groupNumber);
		method.addAsciiParameter(experimentalProperty);
		method.addUnsignedIntParameter(weight);
		method.addAsciiParameter(title);
		method.addAsciiParameter(subtitle);
		method.addFloatParameter(min);
		method.addFloatParameter(max);
		method.addSignedIntParameter(precision);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->addExperimentalProperty(groupNumber, experimentalProperty, weight, title, subtitle, min, max, precision);
}

void DraftSchematic::sendExperimentalPropertiesToPlayer(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->sendExperimentalPropertiesToPlayer(player);
}

void DraftSchematic::increaseComplexity() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->increaseComplexity();
}

void DraftSchematic::decreaseComplexity() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->decreaseComplexity();
}

void DraftSchematic::increaseExpCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->increaseExpCounter();
}

void DraftSchematic::sendIngredientsToPlayer(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->sendIngredientsToPlayer(player);
}

void DraftSchematic::helperSendIngredientsToPlayer(ObjectControllerMessage* objMsg) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addObjectParameter(objMsg);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->helperSendIngredientsToPlayer(objMsg);
}

void DraftSchematic::addIngredient(const String& ingredientTemplateName, const String& ingredientTitleName, const int optional, const String& resourceType, unsigned int resourceQuantity, unsigned int combineType, unsigned int contribution) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addAsciiParameter(ingredientTemplateName);
		method.addAsciiParameter(ingredientTitleName);
		method.addSignedIntParameter(optional);
		method.addAsciiParameter(resourceType);
		method.addUnsignedIntParameter(resourceQuantity);
		method.addUnsignedIntParameter(combineType);
		method.addUnsignedIntParameter(contribution);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->addIngredient(ingredientTemplateName, ingredientTitleName, optional, resourceType, resourceQuantity, combineType, contribution);
}

void DraftSchematic::setTanoAttributes(String& attributes) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addAsciiParameter(attributes);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->setTanoAttributes(attributes);
}

void DraftSchematic::setBlueFrogAttributes(String& attributes) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addAsciiParameter(attributes);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->setBlueFrogAttributes(attributes);
}

void DraftSchematic::setBlueFrogEnabled(bool enabled) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addBooleanParameter(enabled);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->setBlueFrogEnabled(enabled);
}

void DraftSchematic::setXpType(String& type) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addAsciiParameter(type);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->setXpType(type);
}

void DraftSchematic::setXp(int x) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addSignedIntParameter(x);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->setXp(x);
}

void DraftSchematic::setExpCounter(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->setExpCounter(value);
}

void DraftSchematic::setExpPoints(int points) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);
		method.addSignedIntParameter(points);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->setExpPoints(points);
}

void DraftSchematic::setExpFailure(float rate) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);
		method.addFloatParameter(rate);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->setExpFailure(rate);
}

void DraftSchematic::setExperimentingSkill(const String& exp) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);
		method.addAsciiParameter(exp);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->setExperimentingSkill(exp);
}

void DraftSchematic::setCustomizationSkill(const String& cust) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);
		method.addAsciiParameter(cust);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->setCustomizationSkill(cust);
}

void DraftSchematic::addCustomizationOption(const String& cust, const int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);
		method.addAsciiParameter(cust);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->addCustomizationOption(cust, value);
}

void DraftSchematic::setAssemblySkill(const String& ass) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);
		method.addAsciiParameter(ass);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->setAssemblySkill(ass);
}

void DraftSchematic::setResourcesWereRemoved() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->setResourcesWereRemoved();
}

void DraftSchematic::setFinished() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->setFinished();
}

void DraftSchematic::setCrafter(Player* crafter) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);
		method.addObjectParameter(crafter);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->setCrafter(crafter);
}

void DraftSchematic::setManufacturingLimit(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->setManufacturingLimit(value);
}

String& DraftSchematic::getTanoStfName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);

		method.executeWithAsciiReturn(_return_getTanoStfName);
		return _return_getTanoStfName;
	} else
		return ((DraftSchematicImplementation*) _impl)->getTanoStfName();
}

int DraftSchematic::getExpPropGroupListSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);

		return method.executeWithSignedIntReturn();
	} else
		return ((DraftSchematicImplementation*) _impl)->getExpPropGroupListSize();
}

DraftSchematicExpPropGroup* DraftSchematic::getExpPropGroup(int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);
		method.addSignedIntParameter(index);

		return (DraftSchematicExpPropGroup*) method.executeWithObjectReturn();
	} else
		return ((DraftSchematicImplementation*) _impl)->getExpPropGroup(index);
}

DraftSchematicExpPropGroup* DraftSchematic::cloneExpPropGroup(int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 36);
		method.addSignedIntParameter(index);

		return (DraftSchematicExpPropGroup*) method.executeWithObjectReturn();
	} else
		return ((DraftSchematicImplementation*) _impl)->cloneExpPropGroup(index);
}

unsigned int DraftSchematic::getSchematicID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 37);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((DraftSchematicImplementation*) _impl)->getSchematicID();
}

DraftSchematicIngredient* DraftSchematic::getIngredient(int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 38);
		method.addSignedIntParameter(index);

		return (DraftSchematicIngredient*) method.executeWithObjectReturn();
	} else
		return ((DraftSchematicImplementation*) _impl)->getIngredient(index);
}

DraftSchematicIngredient* DraftSchematic::cloneIngredient(int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 39);
		method.addSignedIntParameter(index);

		return (DraftSchematicIngredient*) method.executeWithObjectReturn();
	} else
		return ((DraftSchematicImplementation*) _impl)->cloneIngredient(index);
}

int DraftSchematic::getIngredientListSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 40);

		return method.executeWithSignedIntReturn();
	} else
		return ((DraftSchematicImplementation*) _impl)->getIngredientListSize();
}

int DraftSchematic::getRequiredIngredientCount() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 41);

		return method.executeWithSignedIntReturn();
	} else
		return ((DraftSchematicImplementation*) _impl)->getRequiredIngredientCount();
}

String& DraftSchematic::getGroupName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 42);

		method.executeWithAsciiReturn(_return_getGroupName);
		return _return_getGroupName;
	} else
		return ((DraftSchematicImplementation*) _impl)->getGroupName();
}

unsigned int DraftSchematic::getComplexity() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 43);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((DraftSchematicImplementation*) _impl)->getComplexity();
}

unsigned int DraftSchematic::getSchematicSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 44);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((DraftSchematicImplementation*) _impl)->getSchematicSize();
}

String& DraftSchematic::getTanoAttributes() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 45);

		method.executeWithAsciiReturn(_return_getTanoAttributes);
		return _return_getTanoAttributes;
	} else
		return ((DraftSchematicImplementation*) _impl)->getTanoAttributes();
}

String& DraftSchematic::getBlueFrogAttributes() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 46);

		method.executeWithAsciiReturn(_return_getBlueFrogAttributes);
		return _return_getBlueFrogAttributes;
	} else
		return ((DraftSchematicImplementation*) _impl)->getBlueFrogAttributes();
}

bool DraftSchematic::getBlueFrogEnabled() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 47);

		return method.executeWithBooleanReturn();
	} else
		return ((DraftSchematicImplementation*) _impl)->getBlueFrogEnabled();
}

int DraftSchematic::getCraftingToolTab() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 48);

		return method.executeWithSignedIntReturn();
	} else
		return ((DraftSchematicImplementation*) _impl)->getCraftingToolTab();
}

String& DraftSchematic::getXpType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 49);

		method.executeWithAsciiReturn(_return_getXpType);
		return _return_getXpType;
	} else
		return ((DraftSchematicImplementation*) _impl)->getXpType();
}

int DraftSchematic::getXp() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 50);

		return method.executeWithSignedIntReturn();
	} else
		return ((DraftSchematicImplementation*) _impl)->getXp();
}

String& DraftSchematic::getExperimentingSkill() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 51);

		method.executeWithAsciiReturn(_return_getExperimentingSkill);
		return _return_getExperimentingSkill;
	} else
		return ((DraftSchematicImplementation*) _impl)->getExperimentingSkill();
}

String& DraftSchematic::getCustomizationSkill() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 52);

		method.executeWithAsciiReturn(_return_getCustomizationSkill);
		return _return_getCustomizationSkill;
	} else
		return ((DraftSchematicImplementation*) _impl)->getCustomizationSkill();
}

String& DraftSchematic::getCustomizationOption(const int i) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 53);
		method.addSignedIntParameter(i);

		method.executeWithAsciiReturn(_return_getCustomizationOption);
		return _return_getCustomizationOption;
	} else
		return ((DraftSchematicImplementation*) _impl)->getCustomizationOption(i);
}

int DraftSchematic::getCustomizationDefaultValue(const int i) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 54);
		method.addSignedIntParameter(i);

		return method.executeWithSignedIntReturn();
	} else
		return ((DraftSchematicImplementation*) _impl)->getCustomizationDefaultValue(i);
}

int DraftSchematic::getCustomizationOptionCount() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 55);

		return method.executeWithSignedIntReturn();
	} else
		return ((DraftSchematicImplementation*) _impl)->getCustomizationOptionCount();
}

String& DraftSchematic::getAssemblySkill() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 56);

		method.executeWithAsciiReturn(_return_getAssemblySkill);
		return _return_getAssemblySkill;
	} else
		return ((DraftSchematicImplementation*) _impl)->getAssemblySkill();
}

int DraftSchematic::getExpPoints() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 57);

		return method.executeWithSignedIntReturn();
	} else
		return ((DraftSchematicImplementation*) _impl)->getExpPoints();
}

int DraftSchematic::getExpCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 58);

		return method.executeWithSignedIntReturn();
	} else
		return ((DraftSchematicImplementation*) _impl)->getExpCounter();
}

float DraftSchematic::getExpFailure() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 59);

		return method.executeWithFloatReturn();
	} else
		return ((DraftSchematicImplementation*) _impl)->getExpFailure();
}

Player* DraftSchematic::getCrafter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 60);

		return (Player*) method.executeWithObjectReturn();
	} else
		return ((DraftSchematicImplementation*) _impl)->getCrafter();
}

int DraftSchematic::getManufacturingLimit() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 61);

		return method.executeWithSignedIntReturn();
	} else
		return ((DraftSchematicImplementation*) _impl)->getManufacturingLimit();
}

DraftSchematicValues* DraftSchematic::getCraftingValues() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 62);

		return (DraftSchematicValues*) method.executeWithObjectReturn();
	} else
		return ((DraftSchematicImplementation*) _impl)->getCraftingValues();
}

bool DraftSchematic::isFinished() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 63);

		return method.executeWithBooleanReturn();
	} else
		return ((DraftSchematicImplementation*) _impl)->isFinished();
}

bool DraftSchematic::resourcesWereRemoved() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 64);

		return method.executeWithBooleanReturn();
	} else
		return ((DraftSchematicImplementation*) _impl)->resourcesWereRemoved();
}

void DraftSchematic::resetCraftingValues() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 65);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->resetCraftingValues();
}

void DraftSchematic::toString() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 66);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->toString();
}

/*
 *	DraftSchematicAdapter
 */

DraftSchematicAdapter::DraftSchematicAdapter(DraftSchematicImplementation* obj) : SceneObjectAdapter(obj) {
}

Packet* DraftSchematicAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertLong(dsClone((DraftSchematic*) inv->getObjectParameter())->_getObjectID());
		break;
	case 7:
		destroy((Player*) inv->getObjectParameter());
		break;
	case 8:
		sendTo((Player*) inv->getObjectParameter());
		break;
	case 9:
		addExperimentalProperty(inv->getUnsignedIntParameter(), inv->getAsciiParameter(_param1_addExperimentalProperty__int_String_int_String_String_float_float_int_), inv->getUnsignedIntParameter(), inv->getAsciiParameter(_param3_addExperimentalProperty__int_String_int_String_String_float_float_int_), inv->getAsciiParameter(_param4_addExperimentalProperty__int_String_int_String_String_float_float_int_), inv->getFloatParameter(), inv->getFloatParameter(), inv->getSignedIntParameter());
		break;
	case 10:
		sendExperimentalPropertiesToPlayer((Player*) inv->getObjectParameter());
		break;
	case 11:
		increaseComplexity();
		break;
	case 12:
		decreaseComplexity();
		break;
	case 13:
		increaseExpCounter();
		break;
	case 14:
		sendIngredientsToPlayer((Player*) inv->getObjectParameter());
		break;
	case 15:
		helperSendIngredientsToPlayer((ObjectControllerMessage*) inv->getObjectParameter());
		break;
	case 16:
		addIngredient(inv->getAsciiParameter(_param0_addIngredient__String_String_int_String_int_int_int_), inv->getAsciiParameter(_param1_addIngredient__String_String_int_String_int_int_int_), inv->getSignedIntParameter(), inv->getAsciiParameter(_param3_addIngredient__String_String_int_String_int_int_int_), inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter());
		break;
	case 17:
		setTanoAttributes(inv->getAsciiParameter(_param0_setTanoAttributes__String_));
		break;
	case 18:
		setBlueFrogAttributes(inv->getAsciiParameter(_param0_setBlueFrogAttributes__String_));
		break;
	case 19:
		setBlueFrogEnabled(inv->getBooleanParameter());
		break;
	case 20:
		setXpType(inv->getAsciiParameter(_param0_setXpType__String_));
		break;
	case 21:
		setXp(inv->getSignedIntParameter());
		break;
	case 22:
		setExpCounter(inv->getSignedIntParameter());
		break;
	case 23:
		setExpPoints(inv->getSignedIntParameter());
		break;
	case 24:
		setExpFailure(inv->getFloatParameter());
		break;
	case 25:
		setExperimentingSkill(inv->getAsciiParameter(_param0_setExperimentingSkill__String_));
		break;
	case 26:
		setCustomizationSkill(inv->getAsciiParameter(_param0_setCustomizationSkill__String_));
		break;
	case 27:
		addCustomizationOption(inv->getAsciiParameter(_param0_addCustomizationOption__String_int_), inv->getSignedIntParameter());
		break;
	case 28:
		setAssemblySkill(inv->getAsciiParameter(_param0_setAssemblySkill__String_));
		break;
	case 29:
		setResourcesWereRemoved();
		break;
	case 30:
		setFinished();
		break;
	case 31:
		setCrafter((Player*) inv->getObjectParameter());
		break;
	case 32:
		setManufacturingLimit(inv->getSignedIntParameter());
		break;
	case 33:
		resp->insertAscii(getTanoStfName());
		break;
	case 34:
		resp->insertSignedInt(getExpPropGroupListSize());
		break;
	case 35:
		resp->insertLong(getExpPropGroup(inv->getSignedIntParameter())->_getObjectID());
		break;
	case 36:
		resp->insertLong(cloneExpPropGroup(inv->getSignedIntParameter())->_getObjectID());
		break;
	case 37:
		resp->insertInt(getSchematicID());
		break;
	case 38:
		resp->insertLong(getIngredient(inv->getSignedIntParameter())->_getObjectID());
		break;
	case 39:
		resp->insertLong(cloneIngredient(inv->getSignedIntParameter())->_getObjectID());
		break;
	case 40:
		resp->insertSignedInt(getIngredientListSize());
		break;
	case 41:
		resp->insertSignedInt(getRequiredIngredientCount());
		break;
	case 42:
		resp->insertAscii(getGroupName());
		break;
	case 43:
		resp->insertInt(getComplexity());
		break;
	case 44:
		resp->insertInt(getSchematicSize());
		break;
	case 45:
		resp->insertAscii(getTanoAttributes());
		break;
	case 46:
		resp->insertAscii(getBlueFrogAttributes());
		break;
	case 47:
		resp->insertBoolean(getBlueFrogEnabled());
		break;
	case 48:
		resp->insertSignedInt(getCraftingToolTab());
		break;
	case 49:
		resp->insertAscii(getXpType());
		break;
	case 50:
		resp->insertSignedInt(getXp());
		break;
	case 51:
		resp->insertAscii(getExperimentingSkill());
		break;
	case 52:
		resp->insertAscii(getCustomizationSkill());
		break;
	case 53:
		resp->insertAscii(getCustomizationOption(inv->getSignedIntParameter()));
		break;
	case 54:
		resp->insertSignedInt(getCustomizationDefaultValue(inv->getSignedIntParameter()));
		break;
	case 55:
		resp->insertSignedInt(getCustomizationOptionCount());
		break;
	case 56:
		resp->insertAscii(getAssemblySkill());
		break;
	case 57:
		resp->insertSignedInt(getExpPoints());
		break;
	case 58:
		resp->insertSignedInt(getExpCounter());
		break;
	case 59:
		resp->insertFloat(getExpFailure());
		break;
	case 60:
		resp->insertLong(getCrafter()->_getObjectID());
		break;
	case 61:
		resp->insertSignedInt(getManufacturingLimit());
		break;
	case 62:
		resp->insertLong(getCraftingValues()->_getObjectID());
		break;
	case 63:
		resp->insertBoolean(isFinished());
		break;
	case 64:
		resp->insertBoolean(resourcesWereRemoved());
		break;
	case 65:
		resetCraftingValues();
		break;
	case 66:
		toString();
		break;
	default:
		return NULL;
	}

	return resp;
}

DraftSchematic* DraftSchematicAdapter::dsClone(DraftSchematic* draftSchematic) {
	return ((DraftSchematicImplementation*) impl)->dsClone(draftSchematic);
}

void DraftSchematicAdapter::destroy(Player* player) {
	return ((DraftSchematicImplementation*) impl)->destroy(player);
}

void DraftSchematicAdapter::sendTo(Player* player) {
	return ((DraftSchematicImplementation*) impl)->sendTo(player);
}

void DraftSchematicAdapter::addExperimentalProperty(unsigned int groupNumber, const String& experimentalProperty, unsigned int weight, String& title, String& subtitle, float min, float max, int precision) {
	return ((DraftSchematicImplementation*) impl)->addExperimentalProperty(groupNumber, experimentalProperty, weight, title, subtitle, min, max, precision);
}

void DraftSchematicAdapter::sendExperimentalPropertiesToPlayer(Player* player) {
	return ((DraftSchematicImplementation*) impl)->sendExperimentalPropertiesToPlayer(player);
}

void DraftSchematicAdapter::increaseComplexity() {
	return ((DraftSchematicImplementation*) impl)->increaseComplexity();
}

void DraftSchematicAdapter::decreaseComplexity() {
	return ((DraftSchematicImplementation*) impl)->decreaseComplexity();
}

void DraftSchematicAdapter::increaseExpCounter() {
	return ((DraftSchematicImplementation*) impl)->increaseExpCounter();
}

void DraftSchematicAdapter::sendIngredientsToPlayer(Player* player) {
	return ((DraftSchematicImplementation*) impl)->sendIngredientsToPlayer(player);
}

void DraftSchematicAdapter::helperSendIngredientsToPlayer(ObjectControllerMessage* objMsg) {
	return ((DraftSchematicImplementation*) impl)->helperSendIngredientsToPlayer(objMsg);
}

void DraftSchematicAdapter::addIngredient(const String& ingredientTemplateName, const String& ingredientTitleName, const int optional, const String& resourceType, unsigned int resourceQuantity, unsigned int combineType, unsigned int contribution) {
	return ((DraftSchematicImplementation*) impl)->addIngredient(ingredientTemplateName, ingredientTitleName, optional, resourceType, resourceQuantity, combineType, contribution);
}

void DraftSchematicAdapter::setTanoAttributes(String& attributes) {
	return ((DraftSchematicImplementation*) impl)->setTanoAttributes(attributes);
}

void DraftSchematicAdapter::setBlueFrogAttributes(String& attributes) {
	return ((DraftSchematicImplementation*) impl)->setBlueFrogAttributes(attributes);
}

void DraftSchematicAdapter::setBlueFrogEnabled(bool enabled) {
	return ((DraftSchematicImplementation*) impl)->setBlueFrogEnabled(enabled);
}

void DraftSchematicAdapter::setXpType(String& type) {
	return ((DraftSchematicImplementation*) impl)->setXpType(type);
}

void DraftSchematicAdapter::setXp(int x) {
	return ((DraftSchematicImplementation*) impl)->setXp(x);
}

void DraftSchematicAdapter::setExpCounter(int value) {
	return ((DraftSchematicImplementation*) impl)->setExpCounter(value);
}

void DraftSchematicAdapter::setExpPoints(int points) {
	return ((DraftSchematicImplementation*) impl)->setExpPoints(points);
}

void DraftSchematicAdapter::setExpFailure(float rate) {
	return ((DraftSchematicImplementation*) impl)->setExpFailure(rate);
}

void DraftSchematicAdapter::setExperimentingSkill(const String& exp) {
	return ((DraftSchematicImplementation*) impl)->setExperimentingSkill(exp);
}

void DraftSchematicAdapter::setCustomizationSkill(const String& cust) {
	return ((DraftSchematicImplementation*) impl)->setCustomizationSkill(cust);
}

void DraftSchematicAdapter::addCustomizationOption(const String& cust, const int value) {
	return ((DraftSchematicImplementation*) impl)->addCustomizationOption(cust, value);
}

void DraftSchematicAdapter::setAssemblySkill(const String& ass) {
	return ((DraftSchematicImplementation*) impl)->setAssemblySkill(ass);
}

void DraftSchematicAdapter::setResourcesWereRemoved() {
	return ((DraftSchematicImplementation*) impl)->setResourcesWereRemoved();
}

void DraftSchematicAdapter::setFinished() {
	return ((DraftSchematicImplementation*) impl)->setFinished();
}

void DraftSchematicAdapter::setCrafter(Player* crafter) {
	return ((DraftSchematicImplementation*) impl)->setCrafter(crafter);
}

void DraftSchematicAdapter::setManufacturingLimit(int value) {
	return ((DraftSchematicImplementation*) impl)->setManufacturingLimit(value);
}

String& DraftSchematicAdapter::getTanoStfName() {
	return ((DraftSchematicImplementation*) impl)->getTanoStfName();
}

int DraftSchematicAdapter::getExpPropGroupListSize() {
	return ((DraftSchematicImplementation*) impl)->getExpPropGroupListSize();
}

DraftSchematicExpPropGroup* DraftSchematicAdapter::getExpPropGroup(int index) {
	return ((DraftSchematicImplementation*) impl)->getExpPropGroup(index);
}

DraftSchematicExpPropGroup* DraftSchematicAdapter::cloneExpPropGroup(int index) {
	return ((DraftSchematicImplementation*) impl)->cloneExpPropGroup(index);
}

unsigned int DraftSchematicAdapter::getSchematicID() {
	return ((DraftSchematicImplementation*) impl)->getSchematicID();
}

DraftSchematicIngredient* DraftSchematicAdapter::getIngredient(int index) {
	return ((DraftSchematicImplementation*) impl)->getIngredient(index);
}

DraftSchematicIngredient* DraftSchematicAdapter::cloneIngredient(int index) {
	return ((DraftSchematicImplementation*) impl)->cloneIngredient(index);
}

int DraftSchematicAdapter::getIngredientListSize() {
	return ((DraftSchematicImplementation*) impl)->getIngredientListSize();
}

int DraftSchematicAdapter::getRequiredIngredientCount() {
	return ((DraftSchematicImplementation*) impl)->getRequiredIngredientCount();
}

String& DraftSchematicAdapter::getGroupName() {
	return ((DraftSchematicImplementation*) impl)->getGroupName();
}

unsigned int DraftSchematicAdapter::getComplexity() {
	return ((DraftSchematicImplementation*) impl)->getComplexity();
}

unsigned int DraftSchematicAdapter::getSchematicSize() {
	return ((DraftSchematicImplementation*) impl)->getSchematicSize();
}

String& DraftSchematicAdapter::getTanoAttributes() {
	return ((DraftSchematicImplementation*) impl)->getTanoAttributes();
}

String& DraftSchematicAdapter::getBlueFrogAttributes() {
	return ((DraftSchematicImplementation*) impl)->getBlueFrogAttributes();
}

bool DraftSchematicAdapter::getBlueFrogEnabled() {
	return ((DraftSchematicImplementation*) impl)->getBlueFrogEnabled();
}

int DraftSchematicAdapter::getCraftingToolTab() {
	return ((DraftSchematicImplementation*) impl)->getCraftingToolTab();
}

String& DraftSchematicAdapter::getXpType() {
	return ((DraftSchematicImplementation*) impl)->getXpType();
}

int DraftSchematicAdapter::getXp() {
	return ((DraftSchematicImplementation*) impl)->getXp();
}

String& DraftSchematicAdapter::getExperimentingSkill() {
	return ((DraftSchematicImplementation*) impl)->getExperimentingSkill();
}

String& DraftSchematicAdapter::getCustomizationSkill() {
	return ((DraftSchematicImplementation*) impl)->getCustomizationSkill();
}

String& DraftSchematicAdapter::getCustomizationOption(const int i) {
	return ((DraftSchematicImplementation*) impl)->getCustomizationOption(i);
}

int DraftSchematicAdapter::getCustomizationDefaultValue(const int i) {
	return ((DraftSchematicImplementation*) impl)->getCustomizationDefaultValue(i);
}

int DraftSchematicAdapter::getCustomizationOptionCount() {
	return ((DraftSchematicImplementation*) impl)->getCustomizationOptionCount();
}

String& DraftSchematicAdapter::getAssemblySkill() {
	return ((DraftSchematicImplementation*) impl)->getAssemblySkill();
}

int DraftSchematicAdapter::getExpPoints() {
	return ((DraftSchematicImplementation*) impl)->getExpPoints();
}

int DraftSchematicAdapter::getExpCounter() {
	return ((DraftSchematicImplementation*) impl)->getExpCounter();
}

float DraftSchematicAdapter::getExpFailure() {
	return ((DraftSchematicImplementation*) impl)->getExpFailure();
}

Player* DraftSchematicAdapter::getCrafter() {
	return ((DraftSchematicImplementation*) impl)->getCrafter();
}

int DraftSchematicAdapter::getManufacturingLimit() {
	return ((DraftSchematicImplementation*) impl)->getManufacturingLimit();
}

DraftSchematicValues* DraftSchematicAdapter::getCraftingValues() {
	return ((DraftSchematicImplementation*) impl)->getCraftingValues();
}

bool DraftSchematicAdapter::isFinished() {
	return ((DraftSchematicImplementation*) impl)->isFinished();
}

bool DraftSchematicAdapter::resourcesWereRemoved() {
	return ((DraftSchematicImplementation*) impl)->resourcesWereRemoved();
}

void DraftSchematicAdapter::resetCraftingValues() {
	return ((DraftSchematicImplementation*) impl)->resetCraftingValues();
}

void DraftSchematicAdapter::toString() {
	return ((DraftSchematicImplementation*) impl)->toString();
}

/*
 *	DraftSchematicHelper
 */

DraftSchematicHelper* DraftSchematicHelper::staticInitializer = DraftSchematicHelper::instance();

DraftSchematicHelper::DraftSchematicHelper() {
	className = "DraftSchematic";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void DraftSchematicHelper::finalizeHelper() {
	DraftSchematicHelper::finalize();
}

DistributedObject* DraftSchematicHelper::instantiateObject() {
	return new DraftSchematic(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* DraftSchematicHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new DraftSchematicAdapter((DraftSchematicImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	DraftSchematicServant
 */

DraftSchematicServant::DraftSchematicServant() : SceneObjectImplementation() {
	_classHelper = DraftSchematicHelper::instance();
}

DraftSchematicServant::~DraftSchematicServant() {
}

void DraftSchematicServant::_setStub(DistributedObjectStub* stub) {
	_this = (DraftSchematic*) stub;
	SceneObjectServant::_setStub(stub);
}

DistributedObjectStub* DraftSchematicServant::_getStub() {
	return _this;
}

