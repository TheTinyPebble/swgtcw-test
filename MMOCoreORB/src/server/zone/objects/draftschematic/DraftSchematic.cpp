/*
 *	server/zone/objects/draftschematic/DraftSchematic.cpp generated by engine3 IDL compiler 0.60
 */

#include "DraftSchematic.h"

#include "server/zone/objects/player/PlayerCreature.h"

/*
 *	DraftSchematicStub
 */

DraftSchematic::DraftSchematic() : SceneObject(DummyConstructorParameter::instance()) {
	_impl = new DraftSchematicImplementation();
	_impl->_setStub(this);
}

DraftSchematic::DraftSchematic(DummyConstructorParameter* param) : SceneObject(param) {
}

DraftSchematic::~DraftSchematic() {
}


void DraftSchematic::fillAttributeList(AttributeListMessage* msg, PlayerCreature* object) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((DraftSchematicImplementation*) _impl)->fillAttributeList(msg, object);
}

void DraftSchematic::sendBaselinesTo(SceneObject* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->sendBaselinesTo(player);
}

void DraftSchematic::sendDraftSlotsTo(PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->sendDraftSlotsTo(player);
}

void DraftSchematic::sendResourceWeightsTo(PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->sendResourceWeightsTo(player);
}

void DraftSchematic::addSlot(DraftSlot* slot) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((DraftSchematicImplementation*) _impl)->addSlot(slot);
}

void DraftSchematic::addResourceWeight(ResourceWeight* weight) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((DraftSchematicImplementation*) _impl)->addResourceWeight(weight);
}

void DraftSchematic::setSchematicID(unsigned int id) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addUnsignedIntParameter(id);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->setSchematicID(id);
}

unsigned int DraftSchematic::getSchematicID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((DraftSchematicImplementation*) _impl)->getSchematicID();
}

void DraftSchematic::setComplexity(float complex) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addFloatParameter(complex);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->setComplexity(complex);
}

float DraftSchematic::getComplexity() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		return method.executeWithFloatReturn();
	} else
		return ((DraftSchematicImplementation*) _impl)->getComplexity();
}

void DraftSchematic::setToolTab(unsigned int tab) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addUnsignedIntParameter(tab);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->setToolTab(tab);
}

unsigned int DraftSchematic::getToolTab() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((DraftSchematicImplementation*) _impl)->getToolTab();
}

void DraftSchematic::setSize(unsigned int s) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addUnsignedIntParameter(s);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->setSize(s);
}

float DraftSchematic::getSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		return method.executeWithFloatReturn();
	} else
		return ((DraftSchematicImplementation*) _impl)->getSize();
}

void DraftSchematic::setXpType(String& type) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addAsciiParameter(type);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->setXpType(type);
}

String DraftSchematic::getXpType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		method.executeWithAsciiReturn(_return_getXpType);
		return _return_getXpType;
	} else
		return ((DraftSchematicImplementation*) _impl)->getXpType();
}

void DraftSchematic::setXpAmount(int amount) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addSignedIntParameter(amount);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->setXpAmount(amount);
}

int DraftSchematic::getXpAmount() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);

		return method.executeWithSignedIntReturn();
	} else
		return ((DraftSchematicImplementation*) _impl)->getXpAmount();
}

void DraftSchematic::setAssemblySkill(String& skill) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addAsciiParameter(skill);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->setAssemblySkill(skill);
}

String DraftSchematic::getAssemblySkill() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);

		method.executeWithAsciiReturn(_return_getAssemblySkill);
		return _return_getAssemblySkill;
	} else
		return ((DraftSchematicImplementation*) _impl)->getAssemblySkill();
}

void DraftSchematic::setExperiementationSkill(String& skill) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);
		method.addAsciiParameter(skill);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->setExperiementationSkill(skill);
}

String DraftSchematic::getExperiementationSkill() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);

		method.executeWithAsciiReturn(_return_getExperiementationSkill);
		return _return_getExperiementationSkill;
	} else
		return ((DraftSchematicImplementation*) _impl)->getExperiementationSkill();
}

/*
 *	DraftSchematicImplementation
 */

DraftSchematicImplementation::DraftSchematicImplementation(DummyConstructorParameter* param) : SceneObjectImplementation(param) {
	_initializeImplementation();
}

DraftSchematicImplementation::~DraftSchematicImplementation() {
}


void DraftSchematicImplementation::finalize() {
}

void DraftSchematicImplementation::_initializeImplementation() {
	_setClassHelper(DraftSchematicHelper::instance());

	_serializationHelperMethod();
}

void DraftSchematicImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (DraftSchematic*) stub;
	SceneObjectImplementation::_setStub(stub);
}

DistributedObjectStub* DraftSchematicImplementation::_getStub() {
	return _this;
}

DraftSchematicImplementation::operator const DraftSchematic*() {
	return _this;
}

void DraftSchematicImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void DraftSchematicImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void DraftSchematicImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void DraftSchematicImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void DraftSchematicImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void DraftSchematicImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void DraftSchematicImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void DraftSchematicImplementation::_serializationHelperMethod() {
	SceneObjectImplementation::_serializationHelperMethod();

	_setClassName("DraftSchematic");

	addSerializableVariable("schematicID", &schematicID);
	addSerializableVariable("complexity", &complexity);
	addSerializableVariable("toolTab", &toolTab);
	addSerializableVariable("size", &size);
	addSerializableVariable("xpType", &xpType);
	addSerializableVariable("xpAmount", &xpAmount);
	addSerializableVariable("assemblySkill", &assemblySkill);
	addSerializableVariable("experiementationSkill", &experiementationSkill);
	addSerializableVariable("draftSlots", &draftSlots);
	addSerializableVariable("resourceWeights", &resourceWeights);
}

DraftSchematicImplementation::DraftSchematicImplementation() {
	_initializeImplementation();
	// server/zone/objects/draftschematic/DraftSchematic.idl(115):  		Logger.setLoggingName("DraftSchematic");
	Logger::setLoggingName("DraftSchematic");
}

void DraftSchematicImplementation::addSlot(DraftSlot* slot) {
	// server/zone/objects/draftschematic/DraftSchematic.idl(158):  		draftSlots.add(slot);
	(&draftSlots)->add(slot);
}

void DraftSchematicImplementation::addResourceWeight(ResourceWeight* weight) {
	// server/zone/objects/draftschematic/DraftSchematic.idl(163):  		resourceWeights.add(weight);
	(&resourceWeights)->add(weight);
}

void DraftSchematicImplementation::setSchematicID(unsigned int id) {
	// server/zone/objects/draftschematic/DraftSchematic.idl(171):  		schematicID = id;
	schematicID = id;
}

unsigned int DraftSchematicImplementation::getSchematicID() {
	// server/zone/objects/draftschematic/DraftSchematic.idl(179):  		return schematicID;
	return schematicID;
}

void DraftSchematicImplementation::setComplexity(float complex) {
	// server/zone/objects/draftschematic/DraftSchematic.idl(187):  		complexity = complex;
	complexity = complex;
}

float DraftSchematicImplementation::getComplexity() {
	// server/zone/objects/draftschematic/DraftSchematic.idl(195):  		return complexity;
	return complexity;
}

void DraftSchematicImplementation::setToolTab(unsigned int tab) {
	// server/zone/objects/draftschematic/DraftSchematic.idl(203):  		toolTab = tab;
	toolTab = tab;
}

unsigned int DraftSchematicImplementation::getToolTab() {
	// server/zone/objects/draftschematic/DraftSchematic.idl(211):  		return toolTab;
	return toolTab;
}

void DraftSchematicImplementation::setSize(unsigned int s) {
	// server/zone/objects/draftschematic/DraftSchematic.idl(219):  		size = s;
	size = s;
}

float DraftSchematicImplementation::getSize() {
	// server/zone/objects/draftschematic/DraftSchematic.idl(227):  		return size;
	return size;
}

void DraftSchematicImplementation::setXpType(String& type) {
	// server/zone/objects/draftschematic/DraftSchematic.idl(235):  		xpType = type;
	xpType = type;
}

String DraftSchematicImplementation::getXpType() {
	// server/zone/objects/draftschematic/DraftSchematic.idl(243):  		return xpType;
	return xpType;
}

void DraftSchematicImplementation::setXpAmount(int amount) {
	// server/zone/objects/draftschematic/DraftSchematic.idl(251):  		xpAmount = amount;
	xpAmount = amount;
}

int DraftSchematicImplementation::getXpAmount() {
	// server/zone/objects/draftschematic/DraftSchematic.idl(259):  		return xpAmount;
	return xpAmount;
}

void DraftSchematicImplementation::setAssemblySkill(String& skill) {
	// server/zone/objects/draftschematic/DraftSchematic.idl(267):  		assemblySkill = skill;
	assemblySkill = skill;
}

String DraftSchematicImplementation::getAssemblySkill() {
	// server/zone/objects/draftschematic/DraftSchematic.idl(275):  		return assemblySkill;
	return assemblySkill;
}

void DraftSchematicImplementation::setExperiementationSkill(String& skill) {
	// server/zone/objects/draftschematic/DraftSchematic.idl(283):  		experiementationSkill = skill;
	experiementationSkill = skill;
}

String DraftSchematicImplementation::getExperiementationSkill() {
	// server/zone/objects/draftschematic/DraftSchematic.idl(291):  		return experiementationSkill;
	return experiementationSkill;
}

/*
 *	DraftSchematicAdapter
 */

DraftSchematicAdapter::DraftSchematicAdapter(DraftSchematicImplementation* obj) : SceneObjectAdapter(obj) {
}

Packet* DraftSchematicAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		sendBaselinesTo((SceneObject*) inv->getObjectParameter());
		break;
	case 7:
		sendDraftSlotsTo((PlayerCreature*) inv->getObjectParameter());
		break;
	case 8:
		sendResourceWeightsTo((PlayerCreature*) inv->getObjectParameter());
		break;
	case 9:
		setSchematicID(inv->getUnsignedIntParameter());
		break;
	case 10:
		resp->insertInt(getSchematicID());
		break;
	case 11:
		setComplexity(inv->getFloatParameter());
		break;
	case 12:
		resp->insertFloat(getComplexity());
		break;
	case 13:
		setToolTab(inv->getUnsignedIntParameter());
		break;
	case 14:
		resp->insertInt(getToolTab());
		break;
	case 15:
		setSize(inv->getUnsignedIntParameter());
		break;
	case 16:
		resp->insertFloat(getSize());
		break;
	case 17:
		setXpType(inv->getAsciiParameter(_param0_setXpType__String_));
		break;
	case 18:
		resp->insertAscii(getXpType());
		break;
	case 19:
		setXpAmount(inv->getSignedIntParameter());
		break;
	case 20:
		resp->insertSignedInt(getXpAmount());
		break;
	case 21:
		setAssemblySkill(inv->getAsciiParameter(_param0_setAssemblySkill__String_));
		break;
	case 22:
		resp->insertAscii(getAssemblySkill());
		break;
	case 23:
		setExperiementationSkill(inv->getAsciiParameter(_param0_setExperiementationSkill__String_));
		break;
	case 24:
		resp->insertAscii(getExperiementationSkill());
		break;
	default:
		return NULL;
	}

	return resp;
}

void DraftSchematicAdapter::sendBaselinesTo(SceneObject* player) {
	((DraftSchematicImplementation*) impl)->sendBaselinesTo(player);
}

void DraftSchematicAdapter::sendDraftSlotsTo(PlayerCreature* player) {
	((DraftSchematicImplementation*) impl)->sendDraftSlotsTo(player);
}

void DraftSchematicAdapter::sendResourceWeightsTo(PlayerCreature* player) {
	((DraftSchematicImplementation*) impl)->sendResourceWeightsTo(player);
}

void DraftSchematicAdapter::setSchematicID(unsigned int id) {
	((DraftSchematicImplementation*) impl)->setSchematicID(id);
}

unsigned int DraftSchematicAdapter::getSchematicID() {
	return ((DraftSchematicImplementation*) impl)->getSchematicID();
}

void DraftSchematicAdapter::setComplexity(float complex) {
	((DraftSchematicImplementation*) impl)->setComplexity(complex);
}

float DraftSchematicAdapter::getComplexity() {
	return ((DraftSchematicImplementation*) impl)->getComplexity();
}

void DraftSchematicAdapter::setToolTab(unsigned int tab) {
	((DraftSchematicImplementation*) impl)->setToolTab(tab);
}

unsigned int DraftSchematicAdapter::getToolTab() {
	return ((DraftSchematicImplementation*) impl)->getToolTab();
}

void DraftSchematicAdapter::setSize(unsigned int s) {
	((DraftSchematicImplementation*) impl)->setSize(s);
}

float DraftSchematicAdapter::getSize() {
	return ((DraftSchematicImplementation*) impl)->getSize();
}

void DraftSchematicAdapter::setXpType(String& type) {
	((DraftSchematicImplementation*) impl)->setXpType(type);
}

String DraftSchematicAdapter::getXpType() {
	return ((DraftSchematicImplementation*) impl)->getXpType();
}

void DraftSchematicAdapter::setXpAmount(int amount) {
	((DraftSchematicImplementation*) impl)->setXpAmount(amount);
}

int DraftSchematicAdapter::getXpAmount() {
	return ((DraftSchematicImplementation*) impl)->getXpAmount();
}

void DraftSchematicAdapter::setAssemblySkill(String& skill) {
	((DraftSchematicImplementation*) impl)->setAssemblySkill(skill);
}

String DraftSchematicAdapter::getAssemblySkill() {
	return ((DraftSchematicImplementation*) impl)->getAssemblySkill();
}

void DraftSchematicAdapter::setExperiementationSkill(String& skill) {
	((DraftSchematicImplementation*) impl)->setExperiementationSkill(skill);
}

String DraftSchematicAdapter::getExperiementationSkill() {
	return ((DraftSchematicImplementation*) impl)->getExperiementationSkill();
}

/*
 *	DraftSchematicHelper
 */

DraftSchematicHelper* DraftSchematicHelper::staticInitializer = DraftSchematicHelper::instance();

DraftSchematicHelper::DraftSchematicHelper() {
	className = "DraftSchematic";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void DraftSchematicHelper::finalizeHelper() {
	DraftSchematicHelper::finalize();
}

DistributedObject* DraftSchematicHelper::instantiateObject() {
	return new DraftSchematic(DummyConstructorParameter::instance());
}

DistributedObjectServant* DraftSchematicHelper::instantiateServant() {
	return new DraftSchematicImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* DraftSchematicHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new DraftSchematicAdapter((DraftSchematicImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

