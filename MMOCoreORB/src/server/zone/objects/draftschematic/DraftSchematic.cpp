/*
 *	server/zone/objects/draftschematic/DraftSchematic.cpp generated by engine3 IDL compiler 0.60
 */

#include "DraftSchematic.h"

#include "server/zone/objects/player/PlayerCreature.h"

/*
 *	DraftSchematicStub
 */

DraftSchematic::DraftSchematic() : SceneObject(DummyConstructorParameter::instance()) {
	_impl = new DraftSchematicImplementation();
	_impl->_setStub(this);
}

DraftSchematic::DraftSchematic(DummyConstructorParameter* param) : SceneObject(param) {
}

DraftSchematic::~DraftSchematic() {
}


void DraftSchematic::fillAttributeList(AttributeListMessage* msg, PlayerCreature* object) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((DraftSchematicImplementation*) _impl)->fillAttributeList(msg, object);
}

void DraftSchematic::sendBaselinesTo(SceneObject* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->sendBaselinesTo(player);
}

void DraftSchematic::setComplexity(float complex) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addFloatParameter(complex);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicImplementation*) _impl)->setComplexity(complex);
}

float DraftSchematic::getComplexity() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		return method.executeWithFloatReturn();
	} else
		return ((DraftSchematicImplementation*) _impl)->getComplexity();
}

/*
 *	DraftSchematicImplementation
 */

DraftSchematicImplementation::DraftSchematicImplementation(DummyConstructorParameter* param) : SceneObjectImplementation(param) {
	_initializeImplementation();
}

DraftSchematicImplementation::~DraftSchematicImplementation() {
}


void DraftSchematicImplementation::finalize() {
}

void DraftSchematicImplementation::_initializeImplementation() {
	_setClassHelper(DraftSchematicHelper::instance());

	_serializationHelperMethod();
}

void DraftSchematicImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (DraftSchematic*) stub;
	SceneObjectImplementation::_setStub(stub);
}

DistributedObjectStub* DraftSchematicImplementation::_getStub() {
	return _this;
}

DraftSchematicImplementation::operator const DraftSchematic*() {
	return _this;
}

void DraftSchematicImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void DraftSchematicImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void DraftSchematicImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void DraftSchematicImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void DraftSchematicImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void DraftSchematicImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void DraftSchematicImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void DraftSchematicImplementation::_serializationHelperMethod() {
	SceneObjectImplementation::_serializationHelperMethod();

	_setClassName("DraftSchematic");

	addSerializableVariable("complexity", &complexity);
}

DraftSchematicImplementation::DraftSchematicImplementation() {
	_initializeImplementation();
	// server/zone/objects/draftschematic/DraftSchematic.idl(58):  		Logger.setLoggingName("DraftSchematic");
	Logger::setLoggingName("DraftSchematic");
}

void DraftSchematicImplementation::setComplexity(float complex) {
	// server/zone/objects/draftschematic/DraftSchematic.idl(85):  		complexity = complex;
	complexity = complex;
}

float DraftSchematicImplementation::getComplexity() {
	// server/zone/objects/draftschematic/DraftSchematic.idl(93):  		return complexity;
	return complexity;
}

/*
 *	DraftSchematicAdapter
 */

DraftSchematicAdapter::DraftSchematicAdapter(DraftSchematicImplementation* obj) : SceneObjectAdapter(obj) {
}

Packet* DraftSchematicAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		sendBaselinesTo((SceneObject*) inv->getObjectParameter());
		break;
	case 7:
		setComplexity(inv->getFloatParameter());
		break;
	case 8:
		resp->insertFloat(getComplexity());
		break;
	default:
		return NULL;
	}

	return resp;
}

void DraftSchematicAdapter::sendBaselinesTo(SceneObject* player) {
	((DraftSchematicImplementation*) impl)->sendBaselinesTo(player);
}

void DraftSchematicAdapter::setComplexity(float complex) {
	((DraftSchematicImplementation*) impl)->setComplexity(complex);
}

float DraftSchematicAdapter::getComplexity() {
	return ((DraftSchematicImplementation*) impl)->getComplexity();
}

/*
 *	DraftSchematicHelper
 */

DraftSchematicHelper* DraftSchematicHelper::staticInitializer = DraftSchematicHelper::instance();

DraftSchematicHelper::DraftSchematicHelper() {
	className = "DraftSchematic";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void DraftSchematicHelper::finalizeHelper() {
	DraftSchematicHelper::finalize();
}

DistributedObject* DraftSchematicHelper::instantiateObject() {
	return new DraftSchematic(DummyConstructorParameter::instance());
}

DistributedObjectServant* DraftSchematicHelper::instantiateServant() {
	return new DraftSchematicImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* DraftSchematicHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new DraftSchematicAdapter((DraftSchematicImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

