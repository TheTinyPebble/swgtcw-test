/*
 *	server/zone/objects/draftschematic/DraftSchematic.h generated by engine3 IDL compiler 0.55
 */

#ifndef DRAFTSCHEMATIC_H_
#define DRAFTSCHEMATIC_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedObject.h"

class SceneObject;

class Player;

class DraftSchematicIngredient;

class DraftSchematicAttribute;

class DraftSchematicValues;

class DraftSchematicExpPropGroup;

class ObjectControllerMessage;

#include "engine/core/ManagedObject.h"

class DraftSchematic : public ManagedObject {
public:
	DraftSchematic(unsigned int schematicID, const String& objName, const String& StringName, unsigned int objCRC, const String& groupName, unsigned int complexity, unsigned int schematicSize, int craftingToolTab);

	DraftSchematic(DraftSchematic* draftSchematic);

	DraftSchematic* dsClone(DraftSchematic* draftSchematic);

	void destroy(Player* player);

	void sendTo(Player* player);

	void addExperimentalProperty(unsigned int groupNumber, const String& experimentalProperty, unsigned int weight, String& title, String& subtitle, float min, float max, int precision);

	void sendExperimentalPropertiesToPlayer(Player* player);

	void increaseComplexity();

	void increaseExpCounter();

	void sendIngredientsToPlayer(Player* player);

	void helperSendIngredientsToPlayer(ObjectControllerMessage* objMsg);

	void addIngredient(const String& ingredientTemplateName, const String& ingredientTitleName, const int optional, const String& resourceType, unsigned int resourceQuantity, unsigned int combineType, unsigned int contribution);

	DraftSchematicIngredient* getIngredient(int index);

	int getIngredientListSize();

	int getRequiredIngredientCount();

	void setPersistent(bool status);

	void setObjectID(unsigned long long objID);

	void setTanoAttributes(String& attributes);

	void setContainer(SceneObject* container);

	void setXpType(String& type);

	void setXp(int x);

	void setExpCounter(int value);

	void setExpPoints(int points);

	void setExpFailure(float rate);

	void setExperimentingSkill(const String& exp);

	void setCustomizationSkill(const String& cust);

	void addCustomizationOption(const String& cust, const int value);

	void setAssemblySkill(const String& ass);

	void setResourcesWereRemoved();

	void setFinished();

	void setCrafter(Player* crafter);

	int getExpPropGroupListSize();

	DraftSchematicExpPropGroup* getExpPropGroup(int index);

	unsigned int getSchematicID();

	unsigned int getSchematicCRC();

	String& getName();

	String& getStringName();

	String& getGroupName();

	unsigned int getComplexity();

	unsigned int getSchematicSize();

	unsigned int getObjectID();

	String& getTanoAttributes();

	int getCraftingToolTab();

	SceneObject* getContainer();

	String& getXpType();

	int getXp();

	String& getExperimentingSkill();

	String& getCustomizationSkill();

	String& getCustomizationOption(const int i);

	int getCustomizationDefaultValue(const int i);

	int getCustomizationOptionCount();

	String& getAssemblySkill();

	int getExpPoints();

	int getExpCounter();

	float getExpFailure();

	Player* getCrafter();

	DraftSchematicValues* getCraftingValues();

	bool isFinished();

	bool resourcesWereRemoved();

	void toString();

protected:
	DraftSchematic(DummyConstructorParameter* param);

	virtual ~DraftSchematic();

	String _return_getAssemblySkill;
	String _return_getCustomizationOption;
	String _return_getCustomizationSkill;
	String _return_getExperimentingSkill;
	String _return_getGroupName;
	String _return_getName;
	String _return_getStringName;
	String _return_getTanoAttributes;
	String _return_getXpType;

	friend class DraftSchematicHelper;
};

class DraftSchematicImplementation;

class DraftSchematicAdapter : public ManagedObjectAdapter {
public:
	DraftSchematicAdapter(DraftSchematicImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	DraftSchematic* dsClone(DraftSchematic* draftSchematic);

	void destroy(Player* player);

	void sendTo(Player* player);

	void addExperimentalProperty(unsigned int groupNumber, const String& experimentalProperty, unsigned int weight, String& title, String& subtitle, float min, float max, int precision);

	void sendExperimentalPropertiesToPlayer(Player* player);

	void increaseComplexity();

	void increaseExpCounter();

	void sendIngredientsToPlayer(Player* player);

	void helperSendIngredientsToPlayer(ObjectControllerMessage* objMsg);

	void addIngredient(const String& ingredientTemplateName, const String& ingredientTitleName, const int optional, const String& resourceType, unsigned int resourceQuantity, unsigned int combineType, unsigned int contribution);

	DraftSchematicIngredient* getIngredient(int index);

	int getIngredientListSize();

	int getRequiredIngredientCount();

	void setPersistent(bool status);

	void setObjectID(unsigned long long objID);

	void setTanoAttributes(String& attributes);

	void setContainer(SceneObject* container);

	void setXpType(String& type);

	void setXp(int x);

	void setExpCounter(int value);

	void setExpPoints(int points);

	void setExpFailure(float rate);

	void setExperimentingSkill(const String& exp);

	void setCustomizationSkill(const String& cust);

	void addCustomizationOption(const String& cust, const int value);

	void setAssemblySkill(const String& ass);

	void setResourcesWereRemoved();

	void setFinished();

	void setCrafter(Player* crafter);

	int getExpPropGroupListSize();

	DraftSchematicExpPropGroup* getExpPropGroup(int index);

	unsigned int getSchematicID();

	unsigned int getSchematicCRC();

	String& getName();

	String& getStringName();

	String& getGroupName();

	unsigned int getComplexity();

	unsigned int getSchematicSize();

	unsigned int getObjectID();

	String& getTanoAttributes();

	int getCraftingToolTab();

	SceneObject* getContainer();

	String& getXpType();

	int getXp();

	String& getExperimentingSkill();

	String& getCustomizationSkill();

	String& getCustomizationOption(const int i);

	int getCustomizationDefaultValue(const int i);

	int getCustomizationOptionCount();

	String& getAssemblySkill();

	int getExpPoints();

	int getExpCounter();

	float getExpFailure();

	Player* getCrafter();

	DraftSchematicValues* getCraftingValues();

	bool isFinished();

	bool resourcesWereRemoved();

	void toString();

protected:
	String _param1_addExperimentalProperty__int_String_int_String_String_float_float_int_;
	String _param3_addExperimentalProperty__int_String_int_String_String_float_float_int_;
	String _param4_addExperimentalProperty__int_String_int_String_String_float_float_int_;
	String _param0_addIngredient__String_String_int_String_int_int_int_;
	String _param1_addIngredient__String_String_int_String_int_int_int_;
	String _param3_addIngredient__String_String_int_String_int_int_int_;
	String _param0_setTanoAttributes__String_;
	String _param0_setXpType__String_;
	String _param0_setExperimentingSkill__String_;
	String _param0_setCustomizationSkill__String_;
	String _param0_addCustomizationOption__String_int_;
	String _param0_setAssemblySkill__String_;
};

class DraftSchematicHelper : public DistributedObjectClassHelper, public Singleton<DraftSchematicHelper> {
	static DraftSchematicHelper* staticInitializer;

public:
	DraftSchematicHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<DraftSchematicHelper>;
};

#include "engine/core/ManagedObjectImplementation.h"

class DraftSchematicServant : public ManagedObjectImplementation {
public:
	DraftSchematic* _this;

public:
	DraftSchematicServant();
	virtual ~DraftSchematicServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*DRAFTSCHEMATIC_H_*/
