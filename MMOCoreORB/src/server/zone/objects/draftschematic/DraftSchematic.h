/*
 *	server/zone/objects/draftschematic/DraftSchematic.h generated by engine3 IDL compiler 0.60
 */

#ifndef DRAFTSCHEMATIC_H_
#define DRAFTSCHEMATIC_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace player {

class PlayerCreature;

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/packets/object/ObjectControllerMessage.h"

#include "server/zone/objects/draftschematic/draftslot/DraftSlots.h"

#include "server/zone/objects/draftschematic/draftslot/DraftSlot.h"

#include "server/zone/objects/draftschematic/resourceweight/ResourceWeight.h"

#include "server/zone/objects/draftschematic/resourceweight/ResourceWeights.h"

#include "server/zone/objects/scene/SceneObject.h"

namespace server {
namespace zone {
namespace object {
namespace draftschematic {
namespace DraftSchematic {

class DraftSchematic : public SceneObject {
public:
	DraftSchematic();

	void fillAttributeList(AttributeListMessage* msg, PlayerCreature* object);

	void sendBaselinesTo(SceneObject* player);

	void sendDraftSlotsTo(PlayerCreature* player);

	void sendResourceWeightsTo(PlayerCreature* player);

	void addSlot(DraftSlot* slot);

	void addResourceWeight(ResourceWeight* weight);

	void setSchematicID(unsigned int id);

	unsigned int getSchematicID();

	void setComplexity(float complex);

	float getComplexity();

	void setToolTab(unsigned int tab);

	float getToolTab();

	void setSize(unsigned int s);

	float getSize();

	void setXpType(String& type);

	String getXpType();

	void setXpAmount(int amount);

	int getXpAmount();

	void setAssemblySkill(String& skill);

	String getAssemblySkill();

	void setExperiementationSkill(String& skill);

	String getExperiementationSkill();

protected:
	DraftSchematic(DummyConstructorParameter* param);

	virtual ~DraftSchematic();

	String _return_getAssemblySkill;
	String _return_getExperiementationSkill;
	String _return_getXpType;

	friend class DraftSchematicHelper;
};

} // namespace DraftSchematic
} // namespace draftschematic
} // namespace object
} // namespace zone
} // namespace server

using namespace server::zone::object::draftschematic::DraftSchematic;

namespace server {
namespace zone {
namespace object {
namespace draftschematic {
namespace DraftSchematic {

class DraftSchematicImplementation : public SceneObjectImplementation {
	unsigned int schematicID;

	float complexity;

	unsigned int toolTab;

	int size;

protected:
	String xpType;

	int xpAmount;

	String assemblySkill;

	String experiementationSkill;

	DraftSlots draftSlots;

	ResourceWeights resourceWeights;

public:
	DraftSchematicImplementation();

	DraftSchematicImplementation(DummyConstructorParameter* param);

	void fillAttributeList(AttributeListMessage* msg, PlayerCreature* object);

	void sendBaselinesTo(SceneObject* player);

	void sendDraftSlotsTo(PlayerCreature* player);

private:
	void insertIngredients(ObjectControllerMessage* msg);

public:
	void sendResourceWeightsTo(PlayerCreature* player);

	void addSlot(DraftSlot* slot);

	void addResourceWeight(ResourceWeight* weight);

	void setSchematicID(unsigned int id);

	unsigned int getSchematicID();

	void setComplexity(float complex);

	float getComplexity();

	void setToolTab(unsigned int tab);

	float getToolTab();

	void setSize(unsigned int s);

	float getSize();

	void setXpType(String& type);

	String getXpType();

	void setXpAmount(int amount);

	int getXpAmount();

	void setAssemblySkill(String& skill);

	String getAssemblySkill();

	void setExperiementationSkill(String& skill);

	String getExperiementationSkill();

	DraftSchematic* _this;

	operator const DraftSchematic*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~DraftSchematicImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();

	friend class DraftSchematic;
};

class DraftSchematicAdapter : public SceneObjectAdapter {
public:
	DraftSchematicAdapter(DraftSchematicImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void sendBaselinesTo(SceneObject* player);

	void sendDraftSlotsTo(PlayerCreature* player);

	void sendResourceWeightsTo(PlayerCreature* player);

	void setSchematicID(unsigned int id);

	unsigned int getSchematicID();

	void setComplexity(float complex);

	float getComplexity();

	void setToolTab(unsigned int tab);

	float getToolTab();

	void setSize(unsigned int s);

	float getSize();

	void setXpType(String& type);

	String getXpType();

	void setXpAmount(int amount);

	int getXpAmount();

	void setAssemblySkill(String& skill);

	String getAssemblySkill();

	void setExperiementationSkill(String& skill);

	String getExperiementationSkill();

protected:
	String _param0_setXpType__String_;
	String _param0_setAssemblySkill__String_;
	String _param0_setExperiementationSkill__String_;
};

class DraftSchematicHelper : public DistributedObjectClassHelper, public Singleton<DraftSchematicHelper> {
	static DraftSchematicHelper* staticInitializer;

public:
	DraftSchematicHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<DraftSchematicHelper>;
};

} // namespace DraftSchematic
} // namespace draftschematic
} // namespace object
} // namespace zone
} // namespace server

using namespace server::zone::object::draftschematic::DraftSchematic;

#endif /*DRAFTSCHEMATIC_H_*/
