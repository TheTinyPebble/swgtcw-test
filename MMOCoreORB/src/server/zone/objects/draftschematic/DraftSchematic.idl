/*
Copyright (C) 2007 <SWGEmu>
 
This File is part of Core3.
 
This program is free software; you can redistribute 
it and/or modify it under the terms of the GNU Lesser 
General Public License as published by the Free Software
Foundation; either version 2 of the License, 
or (at your option) any later version.
 
This program is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
See the GNU Lesser General Public License for
more details.
 
You should have received a copy of the GNU Lesser General 
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 
Linking Engine3 statically or dynamically with other modules 
is making a combined work based on Engine3. 
Thus, the terms and conditions of the GNU Lesser General Public License 
cover the whole combination.
 
In addition, as a special exception, the copyright holders of Engine3 
give you permission to combine Engine3 program with free software 
programs or libraries that are released under the GNU LGPL and with 
code included in the standard release of Core3 under the GNU LGPL 
license (or modified versions of such code, with unchanged license). 
You may copy and distribute such a system following the terms of the 
GNU LGPL for Engine3 and the licenses of the other code concerned, 
provided that you include the source code of that other code when 
and as the GNU LGPL requires distribution of source code.
 
Note that people who make modified versions of Engine3 are not obligated 
to grant this special exception for their modified versions; 
it is their choice whether to do so. The GNU Lesser General Public License 
gives permission to release a modified version without this exception; 
this exception also makes it possible to release a modified version 
which carries forward this exception.
*/

package server.zone.object.draftschematic.DraftSchematic;

include server.zone.packets.scene.AttributeListMessage;
include server.zone.packets.object.ObjectControllerMessage;

include server.zone.objects.draftschematic.draftslot.DraftSlots;
include server.zone.objects.draftschematic.draftslot.DraftSlot;
include server.zone.objects.draftschematic.resourceweight.ResourceWeight;
include server.zone.objects.draftschematic.resourceweight.ResourceWeights;

import server.zone.objects.scene.SceneObject;
import server.zone.objects.player.PlayerCreature;

class DraftSchematic extends SceneObject {

	/// Arbitrary ID for the schematic
	private unsigned int schematicID;
	
	/// Level of complexity
	private float complexity;
	
	/// Indicates what tab in the crafting tool this item is found on
	/*
	 * BITMASK FOR TABS
	 * 0 = unknown													0000
	 * 1 = weapons													0001
	 * 2 = armor													0010
	 * 4 = food														0100
	 * 8 = clothing													1000
	 * 16 = vehicle											   0001 0000
	 * 32 =	droid											   0010 0000
	 * 64 = chemical										   0100 0000
	 * 128 = tissues									  	   1000 0000
	 * 256 = creatures									  0001 0000 0000
	 * 512 = furniture									  0010 0000 0000
	 * 1024 = installation								  0100 0000 0000
	 * 2048 = lightsaber							 	  1000 0000 0000
	 * 4096 = generic item							 0001 0000 0000 0000
	 * 8192 = genetics								 0010 0000 0000 0000
	 * 16384 = tailor, Mandalorian					 0100 0000 0000 0000
	 * 32768 = armorsmith, Mandalorian				 1000 0000 0000 0000
	 * 65536 = Droid Engineer, Mandalorian		0001 0000 0000 0000 0000
	 * 131072 = Starship Components				0010 0000 0000 0000 0000
	 * 262144 = Ship Tools						0100 0000 0000 0000 0000
	 * 524288 = Misc							1000 0000 0000 0000 0000
	 * * */
	private unsigned int toolTab;
	
	/// The datapad size of the schematic
	private int size;
	
	/// Xp Type awarded
	protected string xpType;
	
	/// XP Amount awarded
	protected int xpAmount;
	
	/// Assembly skill used
	protected string assemblySkill;
	
	/// Experimentation Skill used
	protected string experiementationSkill;
	
	@dereferenced
	protected DraftSlots draftSlots;
	
	@dereferenced
	protected ResourceWeights resourceWeights;
	
	public DraftSchematic() {
		Logger.setLoggingName("DraftSchematic");	
	}

	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	@local
	public native void fillAttributeList(AttributeListMessage msg, PlayerCreature object);

	
	/**
	 * Sends the baseline messages of this object to the specified player\
	 * @pre { this object is locked }
	 * @post { this object is locked, player received the baseline messages }
	 * @param player SceneObject that will receive the baselines 
	 */
	public native void sendBaselinesTo(SceneObject player);
	
	/**
	 * Sends the ingredients of this object to the specified player\
	 * @pre { this object is locked }
	 * @post { this object is locked, player received the baseline messages }
	 * @param player SceneObject that will receive the ingredients 
	 */
	public native void sendDraftSlotsTo(PlayerCreature player);
	
	@local
	private native void insertIngredients(ObjectControllerMessage msg);
	
	/**
	 * Sends the resource weights of this object to the specified player\
	 * @pre { this object is locked }
	 * @post { this object is locked, player received the baseline messages }
	 * @param player SceneObject that will receive the ingredients 
	 */
	public native void sendResourceWeightsTo(PlayerCreature player);
	
	@local
	public void addSlot(DraftSlot slot) {
		draftSlots.add(slot);
	}
	
	@local
	public void addResourceWeight(ResourceWeight weight) {
		resourceWeights.add(weight);
	}
	
	/**
	 * Setter for the schematic ID
	 * \param id incoming ID
	 */
	public void setSchematicID(unsigned int id) {
		schematicID = id;
	}
	
	/**
	 * Setter for the crafting tool tab mask
	 * \return schematicID
	 */
	public unsigned int getSchematicID() {
		return schematicID;
	}
	
	/**
	 * Setter for complexity
	 * \param complex Complexity Level
	 */
	public void setComplexity(float complex) {
		complexity = complex;
	}
	
	/**
	 * Getter for complexity
	 * \return complexity
	 */
	public float getComplexity() {
		return complexity;
	}
	
	/**
	 * Setter for the crafting tool tab mask
	 * \param tab crafting tool tab
	 */
	public void setToolTab(unsigned int tab) {
		toolTab = tab;
	}
	
	/**
	 * Setter for the crafting tool tab mask
	 * \return toolTab
	 */
	public unsigned int getToolTab() {
		return toolTab;
	}
	
	/**
	 * Setter for the schematic size
	 * \param s size of schematic
	 */
	public void setSize(unsigned int s) {
		size = s;
	}
	
	/**
	 * getter for the schematic size
	 * \return size
	 */
	public float getSize() {
		return size;
	}
	
	/**
	 * Setter for xptype
	 * \param type type of xp
	 */
	public void setXpType(string type) {
		xpType = type;
	}
	
	/**
	 * getter for xpType
	 * \return size
	 */
	public string getXpType() {
		return xpType;
	}
	
	/**
	 * Setter for xpAmount
	 * \param amount xp amount
	 */
	public void setXpAmount(int amount) {
		xpAmount = amount;
	}
	
	/**
	 * getter for the xpAmount
	 * \return xpAmount
	 */
	public int getXpAmount() {
		return xpAmount;
	}

	/**
	 * Setter for assemblySkill
	 * \param skill assemblySkill
	 */
	public void setAssemblySkill(string skill) {
		assemblySkill = skill;
	}
	
	/**
	 * getter for assemblyMod
	 * \return assemblyMod
	 */
	public string getAssemblySkill() {
		return assemblySkill;
	}

	/**
	 * Setter for experiementationSkill
	 * \param skill experiementationSkill
	 */
	public void setExperiementationSkill(string skill) {
		experiementationSkill = skill;
	}
	
	/**
	 * getter for experiementationMod
	 * \return experiementationMod
	 */
	public string getExperiementationSkill() {
		return experiementationSkill;
	}
}
