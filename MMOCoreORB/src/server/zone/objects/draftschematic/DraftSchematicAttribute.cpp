/*
 *	server/zone/objects/draftschematic/DraftSchematicAttribute.cpp generated by engine3 IDL compiler 0.55
 */

#include "DraftSchematicAttribute.h"

#include "DraftSchematicAttributeImplementation.h"

/*
 *	DraftSchematicAttributeStub
 */

DraftSchematicAttribute::DraftSchematicAttribute(const String& attribute, float minVal, float maxVal, const String& attributeExpProp, const int precision) {
	_impl = new DraftSchematicAttributeImplementation(attribute, minVal, maxVal, attributeExpProp, precision);
	_impl->_setStub(this);
}

DraftSchematicAttribute::DraftSchematicAttribute(DraftSchematicAttribute* attrib) {
	_impl = new DraftSchematicAttributeImplementation(attrib);
	_impl->_setStub(this);
}

DraftSchematicAttribute::DraftSchematicAttribute(DummyConstructorParameter* param) {
	_impl = NULL;
}

DraftSchematicAttribute::~DraftSchematicAttribute() {
}

void DraftSchematicAttribute::setAttributeName(const String& attribute) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addAsciiParameter(attribute);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicAttributeImplementation*) _impl)->setAttributeName(attribute);
}

void DraftSchematicAttribute::setMinValue(float minVal) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addFloatParameter(minVal);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicAttributeImplementation*) _impl)->setMinValue(minVal);
}

void DraftSchematicAttribute::setMaxValue(float maxVal) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addFloatParameter(maxVal);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicAttributeImplementation*) _impl)->setMaxValue(maxVal);
}

void DraftSchematicAttribute::setAttributeExperimentalProperty(const String& attributeExpProp) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addAsciiParameter(attributeExpProp);

		method.executeWithVoidReturn();
	} else
		((DraftSchematicAttributeImplementation*) _impl)->setAttributeExperimentalProperty(attributeExpProp);
}

String& DraftSchematicAttribute::getAttributeName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		method.executeWithAsciiReturn(_return_getAttributeName);
		return _return_getAttributeName;
	} else
		return ((DraftSchematicAttributeImplementation*) _impl)->getAttributeName();
}

float DraftSchematicAttribute::getMinValue() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		return method.executeWithFloatReturn();
	} else
		return ((DraftSchematicAttributeImplementation*) _impl)->getMinValue();
}

float DraftSchematicAttribute::getMaxValue() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		return method.executeWithFloatReturn();
	} else
		return ((DraftSchematicAttributeImplementation*) _impl)->getMaxValue();
}

float DraftSchematicAttribute::getRange() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		return method.executeWithFloatReturn();
	} else
		return ((DraftSchematicAttributeImplementation*) _impl)->getRange();
}

int DraftSchematicAttribute::getPrecision() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		return method.executeWithSignedIntReturn();
	} else
		return ((DraftSchematicAttributeImplementation*) _impl)->getPrecision();
}

String& DraftSchematicAttribute::getAttributeExperimentalProperty() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		method.executeWithAsciiReturn(_return_getAttributeExperimentalProperty);
		return _return_getAttributeExperimentalProperty;
	} else
		return ((DraftSchematicAttributeImplementation*) _impl)->getAttributeExperimentalProperty();
}

/*
 *	DraftSchematicAttributeAdapter
 */

DraftSchematicAttributeAdapter::DraftSchematicAttributeAdapter(DraftSchematicAttributeImplementation* obj) : DistributedObjectAdapter((DistributedObjectServant*) obj) {
}

Packet* DraftSchematicAttributeAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		setAttributeName(inv->getAsciiParameter(_param0_setAttributeName__String_));
		break;
	case 7:
		setMinValue(inv->getFloatParameter());
		break;
	case 8:
		setMaxValue(inv->getFloatParameter());
		break;
	case 9:
		setAttributeExperimentalProperty(inv->getAsciiParameter(_param0_setAttributeExperimentalProperty__String_));
		break;
	case 10:
		resp->insertAscii(getAttributeName());
		break;
	case 11:
		resp->insertFloat(getMinValue());
		break;
	case 12:
		resp->insertFloat(getMaxValue());
		break;
	case 13:
		resp->insertFloat(getRange());
		break;
	case 14:
		resp->insertSignedInt(getPrecision());
		break;
	case 15:
		resp->insertAscii(getAttributeExperimentalProperty());
		break;
	default:
		return NULL;
	}

	return resp;
}

void DraftSchematicAttributeAdapter::setAttributeName(const String& attribute) {
	return ((DraftSchematicAttributeImplementation*) impl)->setAttributeName(attribute);
}

void DraftSchematicAttributeAdapter::setMinValue(float minVal) {
	return ((DraftSchematicAttributeImplementation*) impl)->setMinValue(minVal);
}

void DraftSchematicAttributeAdapter::setMaxValue(float maxVal) {
	return ((DraftSchematicAttributeImplementation*) impl)->setMaxValue(maxVal);
}

void DraftSchematicAttributeAdapter::setAttributeExperimentalProperty(const String& attributeExpProp) {
	return ((DraftSchematicAttributeImplementation*) impl)->setAttributeExperimentalProperty(attributeExpProp);
}

String& DraftSchematicAttributeAdapter::getAttributeName() {
	return ((DraftSchematicAttributeImplementation*) impl)->getAttributeName();
}

float DraftSchematicAttributeAdapter::getMinValue() {
	return ((DraftSchematicAttributeImplementation*) impl)->getMinValue();
}

float DraftSchematicAttributeAdapter::getMaxValue() {
	return ((DraftSchematicAttributeImplementation*) impl)->getMaxValue();
}

float DraftSchematicAttributeAdapter::getRange() {
	return ((DraftSchematicAttributeImplementation*) impl)->getRange();
}

int DraftSchematicAttributeAdapter::getPrecision() {
	return ((DraftSchematicAttributeImplementation*) impl)->getPrecision();
}

String& DraftSchematicAttributeAdapter::getAttributeExperimentalProperty() {
	return ((DraftSchematicAttributeImplementation*) impl)->getAttributeExperimentalProperty();
}

/*
 *	DraftSchematicAttributeHelper
 */

DraftSchematicAttributeHelper* DraftSchematicAttributeHelper::staticInitializer = DraftSchematicAttributeHelper::instance();

DraftSchematicAttributeHelper::DraftSchematicAttributeHelper() {
	className = "DraftSchematicAttribute";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void DraftSchematicAttributeHelper::finalizeHelper() {
	DraftSchematicAttributeHelper::finalize();
}

DistributedObject* DraftSchematicAttributeHelper::instantiateObject() {
	return new DraftSchematicAttribute(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* DraftSchematicAttributeHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new DraftSchematicAttributeAdapter((DraftSchematicAttributeImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	DraftSchematicAttributeServant
 */

DraftSchematicAttributeServant::DraftSchematicAttributeServant() {
	_classHelper = DraftSchematicAttributeHelper::instance();
}

DraftSchematicAttributeServant::~DraftSchematicAttributeServant() {
}

void DraftSchematicAttributeServant::_setStub(DistributedObjectStub* stub) {
	_this = (DraftSchematicAttribute*) stub;
}

DistributedObjectStub* DraftSchematicAttributeServant::_getStub() {
	return _this;
}

