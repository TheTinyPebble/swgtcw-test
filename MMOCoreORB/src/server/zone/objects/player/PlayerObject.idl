/*
Copyright (C) 2007 <SWGEmu>

This File is part of Core3.

This program is free software; you can redistribute
it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software
Foundation; either version 2 of the License,
or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for
more details.

You should have received a copy of the GNU Lesser General
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Linking Engine3 statically or dynamically with other modules
is making a combined work based on Engine3.
Thus, the terms and conditions of the GNU Lesser General Public License
cover the whole combination.

In addition, as a special exception, the copyright holders of Engine3
give you permission to combine Engine3 program with free software
programs or libraries that are released under the GNU LGPL and with
code included in the standard release of Core3 under the GNU LGPL
license (or modified versions of such code, with unchanged license).
You may copy and distribute such a system following the terms of the
GNU LGPL for Engine3 and the licenses of the other code concerned,
provided that you include the source code of that other code when
and as the GNU LGPL requires distribution of source code.

Note that people who make modified versions of Engine3 are not obligated
to grant this special exception for their modified versions;
it is their choice whether to do so. The GNU Lesser General Public License
gives permission to release a modified version without this exception;
this exception also makes it possible to release a modified version
which carries forward this exception.
*/

import "../../Zone";

import "../scene/SceneObject";

import "Player";

import "FriendsList";
import "IgnoreList";

import "../waypoint/WaypointObject";

import "../../managers/player/PlayerManager";

import "badges/Badges";


interface PlayerObject implements SceneObject {
	PlayerObject(Player player) {
		super(unsigned long oid, int type);
	}

	void sendToOwner();
	void sendTo(Player player, boolean doClose = true);

	int getExperience(const String xpType);
	void addExperience(const String xpType, int xp, boolean updateClient);
	void removeExperience(const String xpType, int xp, boolean updateClient);
	void loadExperience(const String xpStr);
	String saveExperience();

	boolean setCharacterBit(unsigned int bit, boolean updateClient = false);
	boolean clearCharacterBit(unsigned int bit, boolean updateClient = false);

	// client actions
	void setForcePowerBar(unsigned int fp);
	void updateMaxForcePowerBar(boolean updateClient = true);

	// force setters
	void setForcePower(unsigned int fp);

	// force getters
	unsigned int getForcePower();
	unsigned int getForcePowerMax();
	unsigned int getForceRegen();

	boolean isJedi();
	boolean isOnFullForce();

	unsigned int getCharacterBitmask();

	int getWaypointListSize();

	int getDrinkFilling();
	int getDrinkFillingMax();
	int getFoodFilling();
	int getFoodFillingMax();

	void setDrinkFilling(int filling, boolean updateClient);
	void setDrinkFillingMax(int filling);
	void setFoodFilling(int filling, boolean updateClient);
	void setFoodFillingMax(int filling);

	void changeDrinkFilling(int filling, boolean updateClient);
	void changeFoodFilling(int filling, boolean updateClient);

	boolean isDigesting();

	void setAdminLevel(unsigned int level, boolean updateClient = true);
	unsigned int getAdminLevel();	

	unsigned int getJediState();

	WaypointObject getWaypoint(unsigned long id);

	void addWaypoint(WaypointObject wp, boolean updateClient);

	boolean removeWaypoint(WaypointObject wp, boolean updateClient);

	void updateWaypoint(WaypointObject wp);

	Player getPlayer();

	void setCurrentTitle(String nTitle, boolean updateClient);
	void setTitle(String temptitle);
	String getCurrentTitle();

	unsigned int getExperienceListCount();
	unsigned int getNewExperienceListCount(int cnt);

	unsigned int getWaypointListCount();
	unsigned int getNewWaypointListCount(int cnt);

	FriendsList getFriendsList();
	void addFriend(String name, String inServer);
	void friendsMagicNumberReset();
	void removeFriend(String name);
	void findFriend(String name, PlayerManager playerManager);
	void saveFriends();
	void loadFriends();
	void updateAllFriends(PlayerObject playerObject);
	void pokeReverseFriendList(unsigned long playerID);
	void removeFromReverseFriendList(unsigned long playID);
	int getReverseFriendListSize();
	unsigned long getReverseFriendListEntry(int i);

	IgnoreList getIgnoreList();
	void addIgnore(String name, String inServer);
	void ignoreMagicNumberReset();
	void removeIgnore(String name);
	void saveIgnore();
	void loadIgnore();

	void saveWaypoints(Player player);
	WaypointObject searchWaypoint(Player play, const String name, int mode);
}
