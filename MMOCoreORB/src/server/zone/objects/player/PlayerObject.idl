/*
Copyright (C) 2007 <SWGEmu>

This File is part of Core3.

This program is free software; you can redistribute
it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software
Foundation; either version 2 of the License,
or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for
more details.

You should have received a copy of the GNU Lesser General
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Linking Engine3 statically or dynamically with other modules
is making a combined work based on Engine3.
Thus, the terms and conditions of the GNU Lesser General Public License
cover the whole combination.

In addition, as a special exception, the copyright holders of Engine3
give you permission to combine Engine3 program with free software
programs or libraries that are released under the GNU LGPL and with
code included in the standard release of Core3 under the GNU LGPL
license (or modified versions of such code, with unchanged license).
You may copy and distribute such a system following the terms of the
GNU LGPL for Engine3 and the licenses of the other code concerned,
provided that you include the source code of that other code when
and as the GNU LGPL requires distribution of source code.

Note that people who make modified versions of Engine3 are not obligated
to grant this special exception for their modified versions;
it is their choice whether to do so. The GNU Lesser General Public License
gives permission to release a modified version without this exception;
this exception also makes it possible to release a modified version
which carries forward this exception.
*/

package server.zone.objects.player;

import engine.lua.LuaObject;
import server.zone.objects.scene.SceneObject;
import server.zone.objects.intangible.IntangibleObject;
import server.zone.objects.creature.CreatureObject;
import server.zone.objects.creature.commands.QueueCommand;
import server.zone.managers.objectcontroller.ObjectController;
include server.zone.objects.creature.professions.Certification;
include server.zone.objects.draftschematic.DraftSchematic;
include server.zone.objects.manufactureschematic.ManufactureSchematic;
include server.zone.managers.crafting.schematicmap.DraftSchematicGroup;
import server.zone.ZoneClientSession;
include server.zone.objects.scene.variables.DeltaVectorMap;
include server.zone.objects.scene.variables.DeltaVector;
import server.zone.objects.waypoint.WaypointObject;
include server.zone.objects.player.variables.WaypointList;
include server.zone.objects.creature.professions.Skill;
include server.zone.objects.player.variables.SkillList;
include server.zone.objects.player.variables.FriendList;
include server.zone.objects.player.variables.IgnoreList;
include server.zone.objects.player.variables.SchematicList;
import server.zone.Zone;
include server.zone.templates.SharedObjectTemplate;

class PlayerObject extends IntangibleObject {	
	protected unsigned int characterBitmask;
	protected string title;
	
	protected int forcePower;
	protected int forcePowerMax;
	
	protected int foodFilling;
	protected int foodFillingMax;
	
	protected int drinkFilling;
	protected int drinkFillingMax;
	
	protected int jediState;
	protected unsigned int adminLevel;
	
	protected byte languageID;
	
	@dereferenced
	protected VectorMap<string, int> xpTypeCapList;
		
	@dereferenced
	protected DeltaVectorMap<string, int> experienceList;
	
	@dereferenced
	protected WaypointList waypointList;
	
	@dereferenced
	protected SkillList skillList;
	
	@dereferenced
	protected FriendList friendList;
	
	@dereferenced
	protected IgnoreList ignoreList;
	
	@dereferenced
	protected SchematicList schematicList;
	
	public static final int LFG = 1;
	public static final int NEWBIEHELPER = 2;
	public static final int ROLEPLAYER = 4;
	public static final int AFK = 0x80;
	public static final int LD = 0x100;
	public static final int FACTIONRANK = 0x200;
	public static final int ANONYMOUS = 0x80000000;
	
	public static final int CSR = 1;
	public static final int DEV = 2;
	
	public PlayerObject() {
		Logger.setLoggingName("PlayerObject");
	}
	
	public void finalize() {

	}
	
	@local
	public native void loadTemplateData(SharedObjectTemplate templateData);
	public native void initializeTransientMembers();
	
	public native void sendBaselinesTo(SceneObject player);
	
	public native void sendMessage(BasePacket msg);
	
	 /**
	 * Adds experience of a type to the player's experience pool.
	 * @pre { this is locked }
	 * @post { this is locked }
	 * @param xpType The string value for the type of experience to add.
	 * @param xp The value of experience to add.
	 * @param notifyClient Boolean to determing whether the client should receive a delta packet for the experience gain.
	 */
	public native void addExperience(final string xpType, int xp, boolean notifyClient = true);

    /**
	 * Removes experience of a type from the player's experience pool.
	 * @pre { this is locked }
	 * @post { this is locked }
	 * @param xpType The string value for the type of experience to remove.
	 * @param notifyClient Boolean to determing whether the client should receive a delta packet for the experience loss.
	 */
	public native void removeExperience(final string xpType, boolean notifyClient = true);
	
	/**
	 * Adds waypoint object to waypointList
	 * @pre { this is locked }
	 * @post { this is locked, waypoint object is in the list }
	 * @param waypoint waypoint object to add
	 * @param notifyClient determines whether to update the client with the changes
	 */
	@local
	public native void addWaypoint(WaypointObject waypoint, boolean notifyClient = true);
	
	/** 
	 * Adds a new waypoint with the specified coordinates
	 * @pre { this is locked }
	 * @post { this is locked, waypoint object is in the list }
	 * @param planet planet where waypoint will be created
	 * @param positionX waypoint position X
	 * @param positionY waypoint position Y
	 * @param notifyClient determines whether to update the client with the changes
	 */
	public native void addWaypoint(final string planet, float positionX, float positionY, boolean notifyClient = true);
	
	/**
	 * Removes a waypoint from this player
	 * @pre { this is locked }
	 * @post { this is locked, waypoint list doesnt contain the specified waypoint }
	 * @param waypointID waypoint object id to remove
	 * @param notifyClient determines whether to update the client with the changes
	 */
	public native void removeWaypoint(unsigned long waypointID, boolean notifyClient = true);
	
	/**
	 * Adds new queue commands to player
	 * @pre { this is locked }
	 * @post { this is locked }
	 * @param skills Vector of skills to add
	 * @param notifyClient determines whether to update the client with the changes
	 */
	@local
	public native void addSkills(@dereferenced Vector<QueueCommand> skills, boolean notifyClient = true);
	
	/**
	 * Adds new certifications to player
	 * @pre { this is locked }
	 * @post { this is locked }
	 * @param skills Vector of skills to add
	 * @param notifyClient determines whether to update the client with the changes
	 */
	@local
	public native void addSkills(@dereferenced Vector<Certification> skills, boolean notifyClient = true);
	
	/**
	 * Removes queue commands from player
	 * @pre { this is locked }
	 * @post { this is locked }
	 * @param skills Vector of skills to add
	 * @param notifyClient determines whether to update the client with the changes
	 */
	@local
	public native void removeSkills(@dereferenced Vector<QueueCommand> skills, boolean notifyClient = true);
	
	/**
	 * Removes certifications from player
	 * @pre { this is locked }
	 * @post { this is locked }
	 * @param skills Vector of skills to add
	 * @param notifyClient determines whether to update the client with the changes
	 */
	@local
	public native void removeSkills(@dereferenced Vector<Certification> skills, boolean notifyClient = true);
	
	@local
	public native void addSchematics(@dereferenced Vector<DraftSchematic> schematics, boolean notifyClient = true);
	
	@local
	public native void removeSchematics(@dereferenced Vector<DraftSchematic> schematics, boolean notifyClient = true);
	
	@local
	public native void addSchematic(DraftSchematic schematic, boolean notifyClient = true);
	
	@local
	public native void removeSchematic(DraftSchematic schematic, boolean notifyClient = true);

	/**
	 * Sets the specified language id
	 * @pre { }
	 * @post { }
	 * @param language language id to set
	 * @param notifyClient determines whether to update the client with the changes
	 */
	public native void setLanguageID(byte language, boolean notifyClient = true);
	
	/**
	 * Adds a friend to the friend list
	 * @pre { this is locked}
	 * @post { this is locked }
	 * @param name friends name
	 * @param notifyClient determines whether to update the client with the changes
	 */
	public native void addFriend(final string name, boolean notifyClient = true);
	
	/**
	 * Removes the specified friend from the friend list
	 * @pre { this is locked }
	 * @post { this is locked}
	 * @param name friend name to remove
	 * @param notifyClient determines whether to update the client with the changes
	 */
	public native void removeFriend(final string name, boolean notifyClient = true);
	
	/**
	 * Adds a player to the ignore list
	 * @pre { this is locked}
	 * @post { this is locked }
	 * @param name player name
	 * @param notifyClient determines whether to update the client with the changes
	 */
	public native void addIgnore(final string name, boolean notifyClient = true);
	
	/**
	 * Removes the specified player from the ignore list
	 * @pre { this is locked }
	 * @post { this is locked}
	 * @param name player name to remove
	 * @param notifyClient determines whether to update the client with the changes
	 */
	public native void removeIgnore(final string name, boolean notifyClient = true);
	
	/**
	 * Notifies all reverse friends online status
	 * @pre { }
	 * @post { }
	 */
	public native void notifyOnline();
	
	/**
	 * Notifies all reverse friends offline status
	 * @pre { }
	 * @post { }
	 */
	public native void notifyOffline();
	
	public boolean hasFriend(final string name) {
		return friendList.contains(name);
	}
	
	public boolean isIgnoring(final string name) {
		return ignoreList.contains(name);
	}
	
	public void addReverseFriend(final string name) {
		friendList.addReversePlayer(name);
	}
	
	public void removeReverseFriend(final string name) {
		friendList.removeReversePlayer(name);
	}
	
	public native void sendFriendLists();
	
	public boolean hasWaypoint(unsigned long objectID) {
		return waypointList.contains(objectID);
	}
	
	@local
	public boolean hasSkill(Skill skill) {
		return skillList.contains(skill);
	}
	
	public native boolean hasSkill(final string skillName);

	public unsigned int getCharacterBitmask() {
		return characterBitmask;
	}
	
	public string getTitle() {
		return title;
	}
	
	public unsigned int getAdminLevel() {
		return adminLevel;
	}
	
	public boolean isDeveloper() {
		return adminLevel == DEV;
	}
	
	public boolean isCSR() {
		return adminLevel == CSR;
	}
	
	public boolean isPrivileged() {
		return adminLevel > 0;
	}
	
	public void setCharacterBitmask(unsigned int bitmask) {
		characterBitmask = bitmask;
	}
	
	public native boolean setCharacterBit(unsigned int bit, boolean notifyClient = false);
	public native boolean clearCharacterBit(unsigned int bit, boolean notifyClient = false);
	
	public void setTitle(final string characterTitle) {
		title = characterTitle;
	}
	
	@local 
	public VectorMap<string, int> getXpTypeCapList() {
	    return xpTypeCapList;
	}
	
	@local
	public DeltaVectorMap<string, int> getExperienceList() {
		return experienceList;
	}
	
	public int getForcePower() {
		return forcePower;
	}
	
	public int getForcePowerMax() {
		return forcePowerMax;
	}
	
	@local
	public WaypointList getWaypointList() {
		return waypointList;
	}
	
	@local
	public SkillList getSkills() {
		return skillList;
	}
	
	@local
	public SchematicList getSchematics() {
		return schematicList;
	}
	
	public DraftSchematic getSchematic(int i) {
		return schematicList.get(i);
	}
	
	@local
	@dereferenced
	public native Vector<DraftSchematic> filterSchematicList(Vector<unsigned int> enabledTabs, int complexityLevel);
	
	public int getFoodFilling() {
		return foodFilling;
	}
	
	public int getFoodFillingMax() {
		return foodFillingMax;
	}
	
	public int getDrinkFilling() {
		return drinkFilling;
	}
	
	public int getDrinkFillingMax() {
		return drinkFillingMax;
	}
	
	public int getJediState() {
		return jediState;
	}
	
	public byte getLanguageID() {
		return languageID;
	}
	
	@local
	public DeltaVector<string> getFriendList() {
		return friendList;
	}
	
	@local
	public DeltaVector<string> getIgnoreList() {
		return ignoreList;
	}
	
	public int getExperience(final string xp) {
		return experienceList.get(xp);
	}
	
}
