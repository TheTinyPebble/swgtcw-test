/*
Copyright (C) 2007 <SWGEmu>

This File is part of Core3.

This program is free software; you can redistribute
it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software
Foundation; either version 2 of the License,
or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for
more details.

You should have received a copy of the GNU Lesser General
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Linking Engine3 statically or dynamically with other modules
is making a combined work based on Engine3.
Thus, the terms and conditions of the GNU Lesser General Public License
cover the whole combination.

In addition, as a special exception, the copyright holders of Engine3
give you permission to combine Engine3 program with free software
programs or libraries that are released under the GNU LGPL and with
code included in the standard release of Core3 under the GNU LGPL
license (or modified versions of such code, with unchanged license).
You may copy and distribute such a system following the terms of the
GNU LGPL for Engine3 and the licenses of the other code concerned,
provided that you include the source code of that other code when
and as the GNU LGPL requires distribution of source code.

Note that people who make modified versions of Engine3 are not obligated
to grant this special exception for their modified versions;
it is their choice whether to do so. The GNU Lesser General Public License
gives permission to release a modified version without this exception;
this exception also makes it possible to release a modified version
which carries forward this exception.
*/

package server.zone.objects.player;

import system.lang.Time;
import system.util.SortedVector;
import system.util.VectorMap;
import engine.util.QuadTreeEntry;
import server.zone.objects.creature.CreatureObject;
import server.zone.ZoneClientSession;
import server.zone.objects.player.PlayerObject;
import server.zone.objects.scene.SceneObject;
import server.zone.objects.building.BuildingObject;
import server.zone.objects.tangible.Container;
import engine.service.proto.BasePacket;
import engine.lua.LuaObject;
import server.zone.objects.player.events.PlayerDisconnectEvent;
import server.zone.objects.player.events.PlayerRecoveryEvent;
import server.chat.room.ChatRoom;
include server.zone.objects.player.sui.SuiBox;
include server.zone.objects.creature.CreatureFlag;
include server.zone.objects.scene.variables.DeltaVectorMap;
include server.zone.objects.player.badges.Badges;

class PlayerCreature extends CreatureObject {
	protected ZoneClientSession owner;
	
	protected int savedZoneID;
	protected unsigned long savedParentID;
	
	protected int onlineStatus;
	
	@dereferenced
	protected Time logoutTimeStamp;
	
	protected unsigned int clientLastMovementStamp;
	
	protected unsigned int accountID;
	
	protected unsigned int suiBoxNextID;

	protected string raceFile; //race iff, defines the race file of the character being created.
	protected byte raceID;

	protected string startingLocation; //start location iff string
	protected string startingProfession; //starting profession string

	protected unicode biography; //char biography

	protected int lotsRemaining;
	
	protected transient PlayerDisconnectEvent disconnectEvent;
	protected transient PlayerRecoveryEvent recoveryEvent;
	
	protected int skillPoints;

	@dereferenced
	protected Badges badges;
	
	@dereferenced
	protected Time nextTip;
	
	@dereferenced
	protected SortedVector<ChatRoom> chatRooms;

	protected byte incapacitationCounter;
	
	@dereferenced
	protected Time firstIncapacitationTime;
	
	@dereferenced
	VectorMap<unsigned int, SuiBox> suiBoxes;
	
	protected int pvpRating;

	protected int factionStatus;
	
	@dereferenced
	SortedVector<unsigned long> persistentMessages;
	
	//Badges
	
	//protected BankTerminal registeredBank;
	
	public static final int ONLINE = 1;
	public static final int OFFLINE = 2;
	public static final int LINKDEAD = 3;
	public static final int LOGGINGIN = 4;
	public static final int LOGGINGOUT = 5;
	public static final int LOADING = 6;
	
	public PlayerCreature() {
		Logger.setLoggingName("PlayerCreature");

		owner = null;

		disconnectEvent = null;
		recoveryEvent = null;

		accountID = 0;

		savedZoneID = -1;
		savedParentID = 0;
		
		skillPoints = 0;
		
		suiBoxNextID = 0;
		
		factionStatus = 0;
		lotsRemaining = 0;
		
		clientLastMovementStamp = 0;
		
		super.pvpStatusBitmask = CreatureFlag.PLAYER;
		
		persistentMessages.setNoDuplicateInsertPlan();

		setOffline();
	}
	
	public void finalize() {
		
	}
	
	public native void initializeTransientMembers();
	
	@local
	public native void notifyInsert(QuadTreeEntry entry);
	
	@local
	public native void notifyDissapear(QuadTreeEntry entry);
	
	public native void disconnect(boolean closeClient, boolean doLock);
	
	public native void unload();
	
	public native void reload(ZoneClientSession client);
	
	public native void logout(boolean doLock);
	
	public native void activateRecovery();
	
	public native void doRecovery();
	
	/**
	 * Inserts this object into the building, this method is only to be called from insertToZone
	 * Includes a trigger to BuildingObject::onEnter
	 * @pre { this object is locked, zone is locked }
	 * @post { this object is in the building, building->onEnter has been triggered,
	 * 		   this object is locked, zone is locked }
	 * @param building BuildingObject where this object will be inserted
	 */
	public native void insertToBuilding(BuildingObject building);
	
	/**
	 * Removes this object from the building, this method is only to be called from removeFromZone
	 * Includes a trigger to BuildingObject::onExit
	 * @pre { this object is locked, zone is locked }
	 * @post { this object is not in the building, building->onExit has been triggered, 
	 * 		   this object is locked, zone is locked }
	 * @param building BuildingObject from where this object will be removed
	 */
	public native void removeFromBuilding(BuildingObject building);
	
	/**
	 * Sends a message to client
	 * @pre { }
	 * @post { message is sent to client }
	 * @param msg BasePacket to send
	 */
	public native void sendMessage(BasePacket msg);
	
	/**
	 * Sends the necessary messages to owner client
	 * @pre { this object is locked }
	 * @post { this object is locked, owner received its own scene object }
	 * @param doClose if true a SceneObjectCloseMessage is sent to finish the object
	 */
	public native void sendToOwner(boolean doClose = true);
	
	/**
	 * Sends a badges response message
	 * @pre { }
	 * @post { }
	 * @param player PlayerCreature to receive badges response message
	 */
	public native void sendBadgesResponseTo(PlayerCreature player);
	
	public native void notifySceneReady();
	
	@local
	public SortedVector<unsigned long> getPersistentMessages() {
		return persistentMessages;
	}
	
	public void addPersistentMessage(unsigned long id) {
		persistentMessages.put(id);
	}
	
	public void dropPersistentMessage(unsigned long id) {
		persistentMessages.drop(id);
	}
	
	public PlayerObject getPlayerObject() {
		return (PlayerObject) super.getSlottedObject("ghost");
	}
	
	public boolean isOnline() {
		return onlineStatus != OFFLINE && onlineStatus != LINKDEAD;
	}
	
	public boolean isOffline() {
		return onlineStatus == OFFLINE;
	}
	
	public boolean isLoading() {
		return onlineStatus == LOADING || onlineStatus == LOGGINGOUT;
	}
	
	public boolean isLinkDead() {
		return onlineStatus == LINKDEAD;
	}
	
	public boolean isLoggingIn() {
		return onlineStatus == LOGGINGIN;
	}
	
	public boolean isLoggingOut() {
		return onlineStatus == LOGGINGOUT;
	}
	
	public unsigned int getAccountID() {
		return accountID;
	}
	
	public ZoneClientSession getClient() {
		return owner;
	}
	
	public byte getRaceID() {
		return raceID;
	}
	
	public unsigned long getSavedParentID() {
		return savedParentID;
	}
	
	public int getSavedZoneID() {
		return savedZoneID;
	}
	
	public native string getFirstName();
	public native string getLastName();
	
	public void setSavedParentID(unsigned long id) {
		savedParentID = id;
	}
	
	public void setSavedZoneID(int id) {
		savedZoneID = id;
	}
	
	public void setSkillPoints(int points) {
		skillPoints = points;
	}
	
	public void addSkillPoints(int points) {
		skillPoints += points;
	}
	
	public void setClient(ZoneClientSession cli) {
		owner = cli;
	}
	
	public void setBiography(final unicode bio) {
		biography = bio;
	}
	
	public void setRaceID(byte id) {
		raceID = id;
	}
	
	public void setClientLastMovementStamp(unsigned int stamp) {
		clientLastMovementStamp = stamp;
	}
	
	public void setOffline() {
		if (isLinkDead()) {
			// clear LD flag
		}
		
		onlineStatus = OFFLINE;
	}
	
	public native void setLinkDead();
	
	public native void setOnline();
	
	public void setLoggingOut() {
		onlineStatus = LOGGINGOUT;
	}
	
	public void setAccountID(unsigned int id) {
		accountID = id;
	}
	
	public void clearDisconnectEvent() {
		disconnectEvent = null;
	}
	
	public void clearRecoveryEvent() {
		recoveryEvent = null;
	}
	
	public void addChatRoom(ChatRoom room) {
		chatRooms.put(room);
	}

	public void removeChatRoom(ChatRoom room) {
		chatRooms.drop(room);
	}
	
	public int getSkillPoints() {
		return skillPoints;
	}
	
	public native unsigned int getNewSuiBoxID(unsigned int type);
	
	public boolean hasSuiBox(unsigned int boxID) {
		return suiBoxes.contains(boxID);
	}
	
	public SuiBox getSuiBox(unsigned int boxID) {
		return suiBoxes.get(boxID);
	}
	
	public void removeSuiBox(unsigned int boxID) {
		suiBoxes.drop(boxID);
	}
	
	public void addSuiBox(SuiBox sui) {
		unsigned int key = sui.getBoxID();
		suiBoxes.put(key, sui);
	}
	
	public int getLotsRemaining() {
		return lotsRemaining;
	}
	
	public int getFactionStatus() {
		return factionStatus;
	}
	
	public unicode getBiography() {
		return biography;
	}
	
	public unsigned int getClientLastMovementStamp() {
		return clientLastMovementStamp;
	}
	
}