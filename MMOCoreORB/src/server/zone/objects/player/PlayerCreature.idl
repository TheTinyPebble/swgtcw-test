/*
Copyright (C) 2007 <SWGEmu>

This File is part of Core3.

This program is free software; you can redistribute
it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software
Foundation; either version 2 of the License,
or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for
more details.

You should have received a copy of the GNU Lesser General
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Linking Engine3 statically or dynamically with other modules
is making a combined work based on Engine3.
Thus, the terms and conditions of the GNU Lesser General Public License
cover the whole combination.

In addition, as a special exception, the copyright holders of Engine3
give you permission to combine Engine3 program with free software
programs or libraries that are released under the GNU LGPL and with
code included in the standard release of Core3 under the GNU LGPL
license (or modified versions of such code, with unchanged license).
You may copy and distribute such a system following the terms of the
GNU LGPL for Engine3 and the licenses of the other code concerned,
provided that you include the source code of that other code when
and as the GNU LGPL requires distribution of source code.

Note that people who make modified versions of Engine3 are not obligated
to grant this special exception for their modified versions;
it is their choice whether to do so. The GNU Lesser General Public License
gives permission to release a modified version without this exception;
this exception also makes it possible to release a modified version
which carries forward this exception.
*/

package server.zone.objects.player;

import system.lang.Time;
import system.util.SortedVector;
import system.util.VectorMap;
import engine.util.QuadTreeEntry;
import engine.util.Vector3;
import server.zone.objects.creature.CreatureObject;
import server.zone.ZoneClientSession;
import server.zone.objects.player.PlayerObject;
import server.zone.objects.scene.SceneObject;
import server.zone.objects.building.BuildingObject;
import server.zone.objects.tangible.Container;
include server.zone.objects.tangible.tool.SurveyTool;
import server.zone.objects.tangible.tool.CraftingTool;
import engine.service.proto.BasePacket;
import engine.lua.LuaObject;
import server.zone.objects.player.events.PlayerDisconnectEvent;
import server.zone.objects.player.events.PlayerRecoveryEvent;
import server.chat.room.ChatRoom;
import server.zone.Zone;
include server.zone.objects.player.sui.SuiBox;
include server.zone.objects.creature.CreatureFlag;
include server.zone.objects.scene.variables.DeltaVectorMap;
include server.zone.objects.player.badges.Badges;
import server.zone.objects.tangible.weapon.WeaponObject;
import server.zone.objects.group.GroupObject;
import server.zone.objects.waypoint.WaypointObject;
import system.lang.ref.Reference;
import server.zone.objects.tangible.TangibleObject;
import server.zone.templates.SharedObjectTemplate;
include server.zone.objects.player.TradeContainer;
import server.zone.objects.area.ActiveArea;
import server.zone.packets.object.ObjectMenuResponse;
import server.zone.objects.creature.professions.SkillBox;
import server.zone.objects.structure.StructureObject;

class PlayerCreature extends CreatureObject {
	protected transient ZoneClientSession owner;
	
	protected int savedZoneID;
	protected unsigned long savedParentID;
	
	protected int onlineStatus;
	
	@weakReference
	protected BuildingObject declaredResidence;
	
	@dereferenced
	protected Time logoutTimeStamp;
	
	protected unsigned int clientLastMovementStamp;
	
	protected unsigned int accountID;

	protected boolean invisible;
	
	protected unsigned int suiBoxNextID;

	protected string raceFile; //race iff, defines the race file of the character being created.
	protected byte raceID;

	protected string startingLocation; //start location iff string
	protected string startingProfession; //starting profession string

	protected unicode biography; //char biography

	protected int lotsRemaining;
	
	protected transient PlayerDisconnectEvent disconnectEvent;
	protected transient PlayerRecoveryEvent recoveryEvent;
	
	protected int skillPoints;

	@transient
	protected boolean teachingOrLearning;

	@dereferenced
	protected Badges badges;
	
	@dereferenced
	protected SortedVector<ChatRoom> chatRooms;

	protected byte incapacitationCounter;
	
	@dereferenced
	protected VectorMap<unsigned int, SuiBox> suiBoxes;
	
	protected int pvpRating;

	protected int factionStatus;
	
	@dereferenced
	protected SortedVector<unsigned long> persistentMessages;
	
	@dereferenced
	protected SortedVector<PlayerCreature> duelList;
	
	/// Crafting and Surveying
	/// Reference to last used Survey Tool
	@weakReference
	protected SurveyTool surveyTool;

	protected transient CraftingTool lastCraftingToolUsed;
	
	protected transient boolean spawnedBlueFrog;
	
	@dereferenced
	protected SortedVector<string> consentList;
	
	//npc conversation
	protected string lastNpcConvoMessage;
	protected string lastNpcConvo;
	@dereferenced
	protected Vector<string> lastNpcConvoOptions;
	@weakReference
	protected CreatureObject conversatingCreature;
	
	protected int centeredBonus;
	
	@dereferenced
	protected TradeContainer tradeContainer;
	
	//protected BankTerminal registeredBank;

	public static final int ONLINE = 1;
	public static final int OFFLINE = 2;
	public static final int LINKDEAD = 3;
	public static final int LOGGINGIN = 4;
	public static final int LOGGINGOUT = 5;
	public static final int LOADING = 6;
	
	public PlayerCreature() {
		Logger.setLoggingName("PlayerCreature");

		owner = null;

		disconnectEvent = null;
		recoveryEvent = null;
		accountID = 0;

		savedZoneID = -1;
		savedParentID = 0;
		
		skillPoints = 0;
		
		teachingOrLearning = false;

		invisible = false;
		
		suiBoxNextID = 0;
		
		factionStatus = 0;
		lotsRemaining = 10;
		
		centeredBonus = 0;
		
		clientLastMovementStamp = 0;
		
		super.pvpStatusBitmask = CreatureFlag.PLAYER;
		
		conversatingCreature = null;
		
		spawnedBlueFrog = false;
		
		declaredResidence = null;
		
		persistentMessages.setNoDuplicateInsertPlan();
		duelList.setNoDuplicateInsertPlan();
		consentList.setNoDuplicateInsertPlan();

		setOffline();
	}
	
	public native void finalize();
	
	@local 
	public void loadTemplateData(SharedObjectTemplate templateData) {
		super.loadTemplateData(templateData);
		
		super.pvpStatusBitmask = CreatureFlag.PLAYER;
	}
	
	public native void initializeTransientMembers();
	
	/**
	 * Gets called when this objects is loaded from database
	 * @pre { this locked }
	 * @post { this locked }
	 */
	public native void notifyLoadFromDatabase();
	
	@local
	public native void notifyInsert(QuadTreeEntry entry);
	
	@local
	public native void notifyDissapear(QuadTreeEntry entry);
	
	public native void disconnect(boolean closeClient, boolean doLock);
	
	public native void unload();
	
	public native void reload(ZoneClientSession client);
	
	public native void logout(boolean doLock);
	
	public native void activateRecovery();
	
	public native void doRecovery();
	
		/**
	 * Fills the radial options, needs to be overriden
	 * @pre { this object is locked }
	 * @post { this object is locked, menuResponse is complete}
	 * @param menuResponse ObjectMenuResponse that will be sent to the client
	 */
	@local
	public native void fillObjectMenuResponse(ObjectMenuResponse menuResponse, PlayerCreature player);
	
	/**
	 * Handles the radial selection sent by the client, must be overriden by inherited objects
	 * @pre { this object is locked, player is locked }
	 * @post { this object is locked, player is locked }
	 * @param player PlayerCreature that selected the option
	 * @param selectedID selected menu id
	 * @returns 0 if successfull
	 */
	public native int handleObjectMenuSelect(PlayerCreature player, byte selectedID);
	
	/**
	 * Inserts this object into the building, this method is only to be called from insertToZone
	 * Includes a trigger to BuildingObject::onEnter
	 * @pre { this object is locked, zone is locked }
	 * @post { this object is in the building, building->onEnter has been triggered,
	 * 		   this object is locked, zone is locked }
	 * @param building BuildingObject where this object will be inserted
	 */
	public native void insertToBuilding(BuildingObject building);
	
	/**
	 * Removes this object from the building, this method is only to be called from removeFromZone
	 * Includes a trigger to BuildingObject::onExit
	 * @pre { this object is locked, zone is locked }
	 * @post { this object is not in the building, building->onExit has been triggered, 
	 * 		   this object is locked, zone is locked }
	 * @param building BuildingObject from where this object will be removed
	 */
	public native void removeFromBuilding(BuildingObject building);
	
	/**
	 * Updates this object to database (calls updatesToDatabaseAllObjects())
	 * @pre { this object is locked }
	 * @post { this object is locked }
	 * @param startTask if true, queues a new update task
	 */
	 public native void updateToDatabase();
	
	/**
	 * Sends a message to client
	 * @pre { }
	 * @post { message is sent to client }
	 * @param msg BasePacket to send
	 */
	public native void sendMessage(BasePacket msg);
	
	/**
	 * Sends the necessary messages to owner client
	 * @pre { this object is locked }
	 * @post { this object is locked, owner received its own scene object }
	 * @param doClose if true a SceneObjectCloseMessage is sent to finish the object
	 */
	public native void sendToOwner(boolean doClose = true);
	
	/**
	 * Sends a badges response message
	 * @pre { }
	 * @post { }
	 * @param player PlayerCreature to receive badges response message
	 */
	public native void sendBadgesResponseTo(PlayerCreature player);
	
	/**
	 * Unloads all the spawned creatures from the datapad control devices
	 */
	public native void unloadSpawnedChildren();
	
	/**
	 * Evaluates if this creature is aggresive to the object
	 * @pre { }
	 * @post { }
	 * @return returns true if its aggressive
	 */
	public boolean isAggressiveTo(PlayerCreature object) {
		if (duelList.contains(object) && object.requestedDuelTo(this))
			return true;
		
		return false;
	}
	
	/**
	 * Sends a ExecuteConsoleCommand to the client
	 * @param command example "/attack"
	 */
	public native void sendExecuteConsoleCommand(final string command);
	
	/**
	 * Evaluates if this object can be attacket by the passed creature object
	 * @pre { this object is locked }
	 * @post { this object is locked }
	 * @return returns true if the creature object can attack this 
	 */
	public native boolean isAttackableBy(CreatureObject object);
	
	public native int canAddObject(SceneObject object, int containmentType, string errorDescription);
	
	/**
	 * Is called when this object has been inserted with an object
	 * @param object object that has been inserted
	 */
	public native int notifyObjectInserted(SceneObject object);
	public native int notifyObjectRemoved(SceneObject object);
	
	/**
	 * Is called when this object is destroyed
	 * @pre { this, attacker locked }
	 * @post { this, attacker locked }
	 */
	public native int notifyObjectDestructionObservers(TangibleObject attacker, int condition);
	
	/**
	 * Sets the combat state
	 * @pre { this object is locked }
	 * @post { this object is locked, this object is in a combat state }
	 */
	public native void setCombatState();
	
	public void setBadge(unsigned int badge) {
		badges.setBadge(badge);
	}
	
	public native void awardBadge(unsigned int badge);
	
	public int getNumBadges() {
		return badges.getNumBadges();
	}
	
	public int getBadgeTypeCount(byte type) {
		return badges.getTypeCount(type);
	}
	
	public native boolean isFirstIncapacitationExpired();

	public void resetIncapacitationCounter() {
		incapacitationCounter = 0;
	}

	public native void resetFirstIncapacitationTime();

	public void updateIncapacitationCounter() {
		incapacitationCounter++;

		if (isFirstIncapacitation() || isFirstIncapacitationExpired())
			resetFirstIncapacitationTime();
	}

	public boolean isFirstIncapacitation() {
		return incapacitationCounter == 1;
	}

	public byte getIncapacitationCounter() {
		return incapacitationCounter;
	}
	
	//NPC Conversation Methods
	public void setLastNpcConvStr(final string conv) {
		lastNpcConvo = conv;
	}

	public void setLastNpcConvMessStr(final string mess) {
		lastNpcConvoMessage = mess;
	}

	public string getLastNpcConvStr() {
		return lastNpcConvo;
	}

	public string getLastNpcConvMessStr() {
		return lastNpcConvoMessage;
	}

	public string getLastNpcConvOption(int idx) {
		return lastNpcConvoOptions.get(idx);
	}

	public void addLastNpcConvOptions(final string option) {
		lastNpcConvoOptions.add(option);
	}

	public int countLastNpcConvOptions() {
		return lastNpcConvoOptions.size();
	}

	public void clearLastNpcConvOptions() {
		lastNpcConvoOptions.removeAll();
	}
	
	public void setSpawnedBlueFrog() {
		spawnedBlueFrog = true;
	}
	
	public boolean hasSpawnedBlueFrog() {
		return spawnedBlueFrog;
	}
	
	public void addToConsentList(final string name) {
		consentList.put(name);
	}
	
	public boolean hasInConsentList(final string name) {
		return consentList.contains(name);
	}
	
	public void removeFromConsentList(final string name) {
		consentList.drop(name);
	}
	
	public string getConsentName(int i) {
		return consentList.get(i);
	}
	
	public int getConsentListSize() {
		return consentList.size();
	}
	
	//Duel list manipulation methods
	public void addToDuelList(PlayerCreature targetPlayer) {
		duelList.put(targetPlayer);
	}

	public void removeFromDuelList(PlayerCreature targetPlayer) {
		duelList.drop(targetPlayer);
	}

	public PlayerCreature getDuelListObject(int index) {
		return duelList.get(index);
	}

	public boolean requestedDuelTo(PlayerCreature targetPlayer) {
		return duelList.contains(targetPlayer);
	}

	public boolean isDuelListEmpty() {
		return duelList.isEmpty();
	}

	public int getDuelListSize() {
		return duelList.size();
	}
	
	public native void notifySceneReady();
	
	@local
	public SortedVector<unsigned long> getPersistentMessages() {
		return persistentMessages;
	}
	
	public void addPersistentMessage(unsigned long id) {
		persistentMessages.put(id);
	}
	
	public void dropPersistentMessage(unsigned long id) {
		persistentMessages.drop(id);
	}
	
	public PlayerObject getPlayerObject() {
		return (PlayerObject) super.getSlottedObject("ghost");
	}
	
	public boolean isOnline() {
		return onlineStatus != OFFLINE && onlineStatus != LINKDEAD;
	}
	
	public boolean isOffline() {
		return onlineStatus == OFFLINE;
	}
	
	public boolean isLoading() {
		return onlineStatus == LOADING || onlineStatus == LOGGINGOUT;
	}
	
	public boolean isLinkDead() {
		return onlineStatus == LINKDEAD;
	}
	
	public boolean isLoggingIn() {
		return onlineStatus == LOGGINGIN;
	}
	
	public boolean isLoggingOut() {
		return onlineStatus == LOGGINGOUT;
	}
	
	public unsigned int getAccountID() {
		return accountID;
	}
	
	public ZoneClientSession getClient() {
		return owner;
	}
	
	public byte getRaceID() {
		return raceID;
	}
	
	public unsigned long getSavedParentID() {
		return savedParentID;
	}
	
	public int getSavedZoneID() {
		return savedZoneID;
	}
	
	public native string getFirstName();
	public native string getLastName();
	
	public void setSavedParentID(unsigned long id) {
		savedParentID = id;
	}
	
	public void setSavedZoneID(int id) {
		savedZoneID = id;
	}
	
	public void setSkillPoints(int points) {
		skillPoints = points;
	}
	
	public void addSkillPoints(int points) {
		skillPoints += points;
	}
	
	public void setClient(ZoneClientSession cli) {
		owner = cli;
	}
	
	public void setBiography(final unicode bio) {
		biography = bio;
	}
	
	public void setRaceID(byte id) {
		raceID = id;
	}
	
	public void setConversatingCreature(CreatureObject creature) {
		conversatingCreature = creature;
	}
	
	public void setClientLastMovementStamp(unsigned int stamp) {
		clientLastMovementStamp = stamp;
	}
	
	public void setOffline() {
		if (isLinkDead()) {
			// clear LD flag
		}
		
		onlineStatus = OFFLINE;
	}
	
	public native void setLinkDead();
	
	public native void setOnline();
	
	public void setLoggingOut() {
		onlineStatus = LOGGINGOUT;
	}
	
	public void setAccountID(unsigned int id) {
		accountID = id;
	}
	
	public void clearDisconnectEvent() {
		disconnectEvent = null;
	}
	
	public void clearRecoveryEvent() {
		recoveryEvent = null;
	}
	
	public void addChatRoom(ChatRoom room) {
		chatRooms.put(room);
	}

	public void removeChatRoom(ChatRoom room) {
		chatRooms.drop(room);
	}
	
	public int getSkillPoints() {
		return skillPoints;
	}
	
	public native unsigned int getNewSuiBoxID(unsigned int type);
	
	public boolean hasSuiBox(unsigned int boxID) {
		return suiBoxes.contains(boxID);
	}
	
	public SuiBox getSuiBox(unsigned int boxID) {
		return suiBoxes.get(boxID);
	}
	
	/**
	 * Removes the specified box id and optionally closes the client sui
	 */
	public native void removeSuiBox(unsigned int boxID, boolean closeWindowToClient = false);
	
	public native void removeSuiBoxType(unsigned int windowType);
	
	public boolean hasSuiBoxWindowType(unsigned int windowType) {
		unsigned int type = 0;
		
		for (int i = 0; i < suiBoxes.size(); ++i) {
			SuiBox sui = suiBoxes.get(i);
			
			type = sui.getWindowType();
			
			if (windowType == type)
				return true;
		}

		return false;
	}
	
	public void closeSuiWindowType(unsigned int windowType) {
		if (hasSuiBoxWindowType(windowType)) {
			SuiBox sui = getSuiBoxFromWindowType(windowType);
			
			if (sui != null) {
				sendMessage(sui.generateCloseMessage());
				removeSuiBox(sui.getBoxID());
			}
		}
	}
	
	public unsigned SuiBox getSuiBoxFromWindowType(unsigned int windowType) {
		unsigned int type = 0;
		
		for (int i = 0; i < suiBoxes.size(); ++i) {
			SuiBox sui = suiBoxes.get(i);
			
			if (windowType == sui.getWindowType())
				return sui;
		}
		
		return null;
	}
	
	public void addSuiBox(SuiBox sui) {
		unsigned int key = sui.getBoxID();
		suiBoxes.put(key, sui);
	}
	
	public int getLotsRemaining() {
		return lotsRemaining;
	}
	
	public void setLotsRemaining(int lots) {
		lotsRemaining = lots;
	}
	
	public int getFactionStatus() {
		return factionStatus;
	}
	
	public unicode getBiography() {
		return biography;
	}
	
	public unsigned int getClientLastMovementStamp() {
		return clientLastMovementStamp;
	}
	
	/**
	 * Set active survey tool, this is set whenever
	 * a SurveyTool is used
	 */
	public void setSurveyTool(SurveyTool tool) {
		surveyTool = tool;
	}
	
	/**
	 * Returns the active SurveyTool
	 */
	public SurveyTool getSurveyTool() {
		return surveyTool;
	}
	
	@local
	public void clearTradeContainer() {
		tradeContainer.clear();
	}
	
	public void setTeachingOrLearning(boolean value) {
	    teachingOrLearning = value;
	}
	
	@local
	public boolean isTeachingOrLearning() {
	    return teachingOrLearning;
	}
	
	/**
	 * Returns the active SurveyWaypoint
	 */
	public native WaypointObject getSurveyWaypoint();
	
	public CreatureObject getConversatingCreature() {
		return conversatingCreature;
	}
	
	public int getCenteredBonus() {
		return centeredBonus;
	}
	
	public void setCenteredBonus(int bonus) {
		centeredBonus = bonus;
	}
	
	@local
	public TradeContainer getTradeContainer() {
		return tradeContainer;
	}
	
	public boolean hasBadge(unsigned int badge) {
		return badges.hasBadge(badge);
	}
	
	public CraftingTool getLastCraftingToolUsed() {
		return lastCraftingToolUsed;
	}
	
	public void setLastCraftingToolUsed(CraftingTool tool) {
		lastCraftingToolUsed = tool;
	}

	public boolean isInvisible() {
		return invisible;
	}

	public void setInvisible(boolean invis) {
		invisible = invis;
	}
	
	public BuildingObject getDeclaredResidence() {
		return declaredResidence;
	}
	
	public void setDeclaredResidence(BuildingObject residence) {
		declaredResidence = residence;
	}
}
