/*
Copyright (C) 2007 <SWGEmu>

This File is part of Core3.

This program is free software; you can redistribute
it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software
Foundation; either version 2 of the License,
or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for
more details.

You should have received a copy of the GNU Lesser General
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Linking Engine3 statically or dynamically with other modules
is making a combined work based on Engine3.
Thus, the terms and conditions of the GNU Lesser General Public License
cover the whole combination.

In addition, as a special exception, the copyright holders of Engine3
give you permission to combine Engine3 program with free software
programs or libraries that are released under the GNU LGPL and with
code included in the standard release of Core3 under the GNU LGPL
license (or modified versions of such code, with unchanged license).
You may copy and distribute such a system following the terms of the
GNU LGPL for Engine3 and the licenses of the other code concerned,
provided that you include the source code of that other code when
and as the GNU LGPL requires distribution of source code.

Note that people who make modified versions of Engine3 are not obligated
to grant this special exception for their modified versions;
it is their choice whether to do so. The GNU Lesser General Public License
gives permission to release a modified version without this exception;
this exception also makes it possible to release a modified version
which carries forward this exception.
*/

package server.zone.objects.creature;

import system.lang.Time;
import engine.util.QuadTreeEntry;
import server.zone.objects.creature.CreatureObject;
import server.zone.ZoneClientSession;
import server.zone.objects.player.PlayerObject;
import server.zone.objects.scene.SceneObject;
import server.zone.objects.tangible.Container;
import engine.service.proto.BasePacket;
import engine.lua.LuaObject;
import server.zone.objects.player.events.PlayerDisconnectEvent;
import server.zone.objects.player.events.PlayerRecoveryEvent;

class PlayerCreature extends CreatureObject {
	protected ZoneClientSession owner;
	
	protected int onlineStatus;
	protected Time logoutTimeStamp;

	protected unsigned long accountID;
	protected unsigned long characterID;
	protected unsigned long baseID;

	protected string raceFile; //race iff, defines the race file of the character being created.
	protected byte raceID;

	protected string startingLocation; //start location iff string
	protected string startingProfession; //starting profession string

	protected unicode biography; //char biography

	protected byte lotsRemaining;
	
	protected PlayerDisconnectEvent disconnectEvent;
	protected PlayerRecoveryEvent recoveryEvent;

	// player objects
	/*protected PlayerObject playerObject;
	protected Datapad datapad;*/

	//Vector<CommandQueueAction> commandQueue;
	protected Time nextAction;
	protected Time nextTip;

	protected int itemShift;

	protected byte incapacitationCounter;
	protected Time firstIncapacitationTime;
	protected int pvpRating;


	protected int factionStatus;
	
	public static final int ONLINE = 1;
	public static final int OFFLINE = 2;
	public static final int LINKDEAD = 3;
	public static final int LOGGINGIN = 4;
	public static final int LOGGINGOUT = 5;
	public static final int LOADING = 6;
	
	public native PlayerCreature(LuaObject templateData);
	
	public native void notifyInsert(QuadTreeEntry entry);
	public native void notifyDissapear(QuadTreeEntry entry);
	
	public native void disconnect(boolean closeClient, boolean doLock);
	
	public native void unload();
	
	public native void logout(boolean doLock);
	
	public native void activateRecovery();
	
	public native void doRecovery();
	
	public void sendMessage(BasePacket msg) {
		if (owner == null) {
			msg.finalize();
			return;
		} else {
			owner.sendMessage(msg);
		}
	}
	
	public native void sendToOwner(boolean doClose = true);
	
	public boolean isOnline() {
		return onlineStatus != OFFLINE && onlineStatus != LINKDEAD;
	}
	
	public boolean isOffline() {
		return onlineStatus == OFFLINE;
	}
	
	public boolean isLoading() {
		return onlineStatus == LOADING || onlineStatus == LOGGINGOUT;
	}
	
	public boolean isLinkDead() {
		return onlineStatus == LINKDEAD;
	}
	
	public boolean isLoggingIn() {
		return onlineStatus == LOGGINGIN;
	}
	
	public boolean isLoggingOut() {
		return onlineStatus == LOGGINGOUT;
	}
	
	public ZoneClientSession getClient() {
		return owner;
	}
	
	public byte getRaceID() {
		return raceID;
	}
	
	public void setClient(ZoneClientSession cli) {
		owner = cli;
	}
	
	public local void setBiography(final unicode bio) {
		biography = bio;
	}
	
	public void setRaceID(byte id) {
		raceID = id;
	}
	
	public void setOffline() {
		if (isLinkDead()) {
			// clear LD flag
		}
		
		onlineStatus = OFFLINE;
	}
	
	public void setLinkDead() {
		onlineStatus = LINKDEAD;
		
		logoutTimeStamp.update();
		logoutTimeStamp.addMiliTime(30000);
		
		activateRecovery();
	}
	
	public void setOnline() {
		onlineStatus = ONLINE;
		
		doRecovery();
	}
	
	public void setLoggingOut() {
		onlineStatus = LOGGINGOUT;
	}
	
	public void clearDisconnectEvent() {
		disconnectEvent = null;
	}
	
	public void clearRecoveryEvent() {
		recoveryEvent = null;
	}
	
}