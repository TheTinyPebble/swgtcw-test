/*
 *	server/zone/objects/player/components/PlayerContainerComponent.h generated by engine3 IDL compiler 0.60
 */

#ifndef PLAYERCONTAINERCOMPONENT_H_
#define PLAYERCONTAINERCOMPONENT_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

#include "engine/core/ManagedObject.h"

#include "server/zone/objects/scene/components/ContainerComponent.h"

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace components {

class PlayerContainerComponent : public ContainerComponent {
public:
	PlayerContainerComponent();

	int canAddObject(SceneObject* object, int containmentType, String& errorDescription);

	DistributedObjectServant* _getImplementation();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	PlayerContainerComponent(DummyConstructorParameter* param);

	virtual ~PlayerContainerComponent();

	friend class PlayerContainerComponentHelper;
};

} // namespace components
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::components;

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace components {

class PlayerContainerComponentImplementation : public ContainerComponentImplementation {

public:
	PlayerContainerComponentImplementation();

	PlayerContainerComponentImplementation(DummyConstructorParameter* param);

	int canAddObject(SceneObject* object, int containmentType, String& errorDescription);

	PlayerContainerComponent* _this;

	operator const PlayerContainerComponent*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~PlayerContainerComponentImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const String& name);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class PlayerContainerComponent;
};

class PlayerContainerComponentAdapter : public ContainerComponentAdapter {
public:
	PlayerContainerComponentAdapter(PlayerContainerComponentImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	int canAddObject(SceneObject* object, int containmentType, String& errorDescription);

protected:
	String _param2_canAddObject__SceneObject_int_String_;
};

class PlayerContainerComponentHelper : public DistributedObjectClassHelper, public Singleton<PlayerContainerComponentHelper> {
	static PlayerContainerComponentHelper* staticInitializer;

public:
	PlayerContainerComponentHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<PlayerContainerComponentHelper>;
};

} // namespace components
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::components;

#endif /*PLAYERCONTAINERCOMPONENT_H_*/
