/*
 *	server/zone/objects/player/components/PlayerContainerComponent.cpp generated by engine3 IDL compiler 0.60
 */

#include "PlayerContainerComponent.h"

#include "server/zone/objects/scene/SceneObject.h"

/*
 *	PlayerContainerComponentStub
 */

enum {RPC_CANADDOBJECT__SCENEOBJECT_INT_STRING_ = 6};

PlayerContainerComponent::PlayerContainerComponent() : ContainerComponent(DummyConstructorParameter::instance()) {
	PlayerContainerComponentImplementation* _implementation = new PlayerContainerComponentImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

PlayerContainerComponent::PlayerContainerComponent(DummyConstructorParameter* param) : ContainerComponent(param) {
}

PlayerContainerComponent::~PlayerContainerComponent() {
}


int PlayerContainerComponent::canAddObject(SceneObject* object, int containmentType, String& errorDescription) {
	PlayerContainerComponentImplementation* _implementation = (PlayerContainerComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CANADDOBJECT__SCENEOBJECT_INT_STRING_);
		method.addObjectParameter(object);
		method.addSignedIntParameter(containmentType);
		method.addAsciiParameter(errorDescription);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->canAddObject(object, containmentType, errorDescription);
}

DistributedObjectServant* PlayerContainerComponent::_getImplementation() {

	_updated = true;
	return _impl;
}

void PlayerContainerComponent::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	PlayerContainerComponentImplementation
 */

PlayerContainerComponentImplementation::PlayerContainerComponentImplementation(DummyConstructorParameter* param) : ContainerComponentImplementation(param) {
	_initializeImplementation();
}


PlayerContainerComponentImplementation::~PlayerContainerComponentImplementation() {
}


void PlayerContainerComponentImplementation::finalize() {
}

void PlayerContainerComponentImplementation::_initializeImplementation() {
	_setClassHelper(PlayerContainerComponentHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void PlayerContainerComponentImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (PlayerContainerComponent*) stub;
	ContainerComponentImplementation::_setStub(stub);
}

DistributedObjectStub* PlayerContainerComponentImplementation::_getStub() {
	return _this;
}

PlayerContainerComponentImplementation::operator const PlayerContainerComponent*() {
	return _this;
}

void PlayerContainerComponentImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void PlayerContainerComponentImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void PlayerContainerComponentImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void PlayerContainerComponentImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void PlayerContainerComponentImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void PlayerContainerComponentImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void PlayerContainerComponentImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void PlayerContainerComponentImplementation::_serializationHelperMethod() {
	ContainerComponentImplementation::_serializationHelperMethod();

	_setClassName("PlayerContainerComponent");

}

void PlayerContainerComponentImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(PlayerContainerComponentImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool PlayerContainerComponentImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ContainerComponentImplementation::readObjectMember(stream, _name))
		return true;


	return false;
}

void PlayerContainerComponentImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = PlayerContainerComponentImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int PlayerContainerComponentImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;

	return 0 + ContainerComponentImplementation::writeObjectMembers(stream);
}

PlayerContainerComponentImplementation::PlayerContainerComponentImplementation() : ContainerComponentImplementation() {
	_initializeImplementation();
}

/*
 *	PlayerContainerComponentAdapter
 */

PlayerContainerComponentAdapter::PlayerContainerComponentAdapter(PlayerContainerComponentImplementation* obj) : ContainerComponentAdapter(obj) {
}

Packet* PlayerContainerComponentAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_CANADDOBJECT__SCENEOBJECT_INT_STRING_:
		resp->insertSignedInt(canAddObject((SceneObject*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getAsciiParameter(_param2_canAddObject__SceneObject_int_String_)));
		break;
	default:
		return NULL;
	}

	return resp;
}

int PlayerContainerComponentAdapter::canAddObject(SceneObject* object, int containmentType, String& errorDescription) {
	return ((PlayerContainerComponentImplementation*) impl)->canAddObject(object, containmentType, errorDescription);
}

/*
 *	PlayerContainerComponentHelper
 */

PlayerContainerComponentHelper* PlayerContainerComponentHelper::staticInitializer = PlayerContainerComponentHelper::instance();

PlayerContainerComponentHelper::PlayerContainerComponentHelper() {
	className = "PlayerContainerComponent";

	Core::getObjectBroker()->registerClass(className, this);
}

void PlayerContainerComponentHelper::finalizeHelper() {
	PlayerContainerComponentHelper::finalize();
}

DistributedObject* PlayerContainerComponentHelper::instantiateObject() {
	return new PlayerContainerComponent(DummyConstructorParameter::instance());
}

DistributedObjectServant* PlayerContainerComponentHelper::instantiateServant() {
	return new PlayerContainerComponentImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* PlayerContainerComponentHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new PlayerContainerComponentAdapter((PlayerContainerComponentImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

