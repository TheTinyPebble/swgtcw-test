/*
 *	server/zone/objects/player/components/PlayerZoneComponent.cpp generated by engine3 IDL compiler 0.60
 */

#include "PlayerZoneComponent.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/building/BuildingObject.h"

/*
 *	PlayerZoneComponentStub
 */

enum {RPC_TELEPORT__FLOAT_FLOAT_FLOAT_LONG_,RPC_UPDATEZONE__BOOL_BOOL_,RPC_UPDATEZONEWITHPARENT__SCENEOBJECT_BOOL_BOOL_,RPC_INSERTTOBUILDING__BUILDINGOBJECT_,RPC_REMOVEFROMBUILDING__BUILDINGOBJECT_};

PlayerZoneComponent::PlayerZoneComponent() : ZoneComponent(DummyConstructorParameter::instance()) {
	PlayerZoneComponentImplementation* _implementation = new PlayerZoneComponentImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

PlayerZoneComponent::PlayerZoneComponent(DummyConstructorParameter* param) : ZoneComponent(param) {
}

PlayerZoneComponent::~PlayerZoneComponent() {
}


void PlayerZoneComponent::notifyInsert(QuadTreeEntry* entry) {
	PlayerZoneComponentImplementation* _implementation = (PlayerZoneComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->notifyInsert(entry);
}

void PlayerZoneComponent::notifyDissapear(QuadTreeEntry* entry) {
	PlayerZoneComponentImplementation* _implementation = (PlayerZoneComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->notifyDissapear(entry);
}

void PlayerZoneComponent::teleport(float newPositionX, float newPositionZ, float newPositionY, unsigned long long parentID) {
	PlayerZoneComponentImplementation* _implementation = (PlayerZoneComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_TELEPORT__FLOAT_FLOAT_FLOAT_LONG_);
		method.addFloatParameter(newPositionX);
		method.addFloatParameter(newPositionZ);
		method.addFloatParameter(newPositionY);
		method.addUnsignedLongParameter(parentID);

		method.executeWithVoidReturn();
	} else
		_implementation->teleport(newPositionX, newPositionZ, newPositionY, parentID);
}

void PlayerZoneComponent::updateZone(bool lightUpdate, bool sendPackets) {
	PlayerZoneComponentImplementation* _implementation = (PlayerZoneComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATEZONE__BOOL_BOOL_);
		method.addBooleanParameter(lightUpdate);
		method.addBooleanParameter(sendPackets);

		method.executeWithVoidReturn();
	} else
		_implementation->updateZone(lightUpdate, sendPackets);
}

void PlayerZoneComponent::updateZoneWithParent(SceneObject* newParent, bool lightUpdate, bool sendPackets) {
	PlayerZoneComponentImplementation* _implementation = (PlayerZoneComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATEZONEWITHPARENT__SCENEOBJECT_BOOL_BOOL_);
		method.addObjectParameter(newParent);
		method.addBooleanParameter(lightUpdate);
		method.addBooleanParameter(sendPackets);

		method.executeWithVoidReturn();
	} else
		_implementation->updateZoneWithParent(newParent, lightUpdate, sendPackets);
}

void PlayerZoneComponent::insertToBuilding(BuildingObject* building) {
	PlayerZoneComponentImplementation* _implementation = (PlayerZoneComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INSERTTOBUILDING__BUILDINGOBJECT_);
		method.addObjectParameter(building);

		method.executeWithVoidReturn();
	} else
		_implementation->insertToBuilding(building);
}

void PlayerZoneComponent::removeFromBuilding(BuildingObject* building) {
	PlayerZoneComponentImplementation* _implementation = (PlayerZoneComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEFROMBUILDING__BUILDINGOBJECT_);
		method.addObjectParameter(building);

		method.executeWithVoidReturn();
	} else
		_implementation->removeFromBuilding(building);
}

DistributedObjectServant* PlayerZoneComponent::_getImplementation() {

	_updated = true;
	return _impl;
}

void PlayerZoneComponent::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	PlayerZoneComponentImplementation
 */

PlayerZoneComponentImplementation::PlayerZoneComponentImplementation(DummyConstructorParameter* param) : ZoneComponentImplementation(param) {
	_initializeImplementation();
}


PlayerZoneComponentImplementation::~PlayerZoneComponentImplementation() {
}


void PlayerZoneComponentImplementation::finalize() {
}

void PlayerZoneComponentImplementation::_initializeImplementation() {
	_setClassHelper(PlayerZoneComponentHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void PlayerZoneComponentImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (PlayerZoneComponent*) stub;
	ZoneComponentImplementation::_setStub(stub);
}

DistributedObjectStub* PlayerZoneComponentImplementation::_getStub() {
	return _this;
}

PlayerZoneComponentImplementation::operator const PlayerZoneComponent*() {
	return _this;
}

void PlayerZoneComponentImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void PlayerZoneComponentImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void PlayerZoneComponentImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void PlayerZoneComponentImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void PlayerZoneComponentImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void PlayerZoneComponentImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void PlayerZoneComponentImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void PlayerZoneComponentImplementation::_serializationHelperMethod() {
	ZoneComponentImplementation::_serializationHelperMethod();

	_setClassName("PlayerZoneComponent");

}

void PlayerZoneComponentImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(PlayerZoneComponentImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool PlayerZoneComponentImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ZoneComponentImplementation::readObjectMember(stream, _name))
		return true;


	return false;
}

void PlayerZoneComponentImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = PlayerZoneComponentImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int PlayerZoneComponentImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;

	return 0 + ZoneComponentImplementation::writeObjectMembers(stream);
}

PlayerZoneComponentImplementation::PlayerZoneComponentImplementation() : ZoneComponentImplementation() {
	_initializeImplementation();
}

/*
 *	PlayerZoneComponentAdapter
 */

PlayerZoneComponentAdapter::PlayerZoneComponentAdapter(PlayerZoneComponentImplementation* obj) : ZoneComponentAdapter(obj) {
}

Packet* PlayerZoneComponentAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_TELEPORT__FLOAT_FLOAT_FLOAT_LONG_:
		teleport(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getUnsignedLongParameter());
		break;
	case RPC_UPDATEZONE__BOOL_BOOL_:
		updateZone(inv->getBooleanParameter(), inv->getBooleanParameter());
		break;
	case RPC_UPDATEZONEWITHPARENT__SCENEOBJECT_BOOL_BOOL_:
		updateZoneWithParent((SceneObject*) inv->getObjectParameter(), inv->getBooleanParameter(), inv->getBooleanParameter());
		break;
	case RPC_INSERTTOBUILDING__BUILDINGOBJECT_:
		insertToBuilding((BuildingObject*) inv->getObjectParameter());
		break;
	case RPC_REMOVEFROMBUILDING__BUILDINGOBJECT_:
		removeFromBuilding((BuildingObject*) inv->getObjectParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void PlayerZoneComponentAdapter::teleport(float newPositionX, float newPositionZ, float newPositionY, unsigned long long parentID) {
	((PlayerZoneComponentImplementation*) impl)->teleport(newPositionX, newPositionZ, newPositionY, parentID);
}

void PlayerZoneComponentAdapter::updateZone(bool lightUpdate, bool sendPackets) {
	((PlayerZoneComponentImplementation*) impl)->updateZone(lightUpdate, sendPackets);
}

void PlayerZoneComponentAdapter::updateZoneWithParent(SceneObject* newParent, bool lightUpdate, bool sendPackets) {
	((PlayerZoneComponentImplementation*) impl)->updateZoneWithParent(newParent, lightUpdate, sendPackets);
}

void PlayerZoneComponentAdapter::insertToBuilding(BuildingObject* building) {
	((PlayerZoneComponentImplementation*) impl)->insertToBuilding(building);
}

void PlayerZoneComponentAdapter::removeFromBuilding(BuildingObject* building) {
	((PlayerZoneComponentImplementation*) impl)->removeFromBuilding(building);
}

/*
 *	PlayerZoneComponentHelper
 */

PlayerZoneComponentHelper* PlayerZoneComponentHelper::staticInitializer = PlayerZoneComponentHelper::instance();

PlayerZoneComponentHelper::PlayerZoneComponentHelper() {
	className = "PlayerZoneComponent";

	Core::getObjectBroker()->registerClass(className, this);
}

void PlayerZoneComponentHelper::finalizeHelper() {
	PlayerZoneComponentHelper::finalize();
}

DistributedObject* PlayerZoneComponentHelper::instantiateObject() {
	return new PlayerZoneComponent(DummyConstructorParameter::instance());
}

DistributedObjectServant* PlayerZoneComponentHelper::instantiateServant() {
	return new PlayerZoneComponentImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* PlayerZoneComponentHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new PlayerZoneComponentAdapter((PlayerZoneComponentImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

