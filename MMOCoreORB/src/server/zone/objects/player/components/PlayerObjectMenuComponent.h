/*
 *	server/zone/objects/player/components/PlayerObjectMenuComponent.h generated by engine3 IDL compiler 0.60
 */

#ifndef PLAYEROBJECTMENUCOMPONENT_H_
#define PLAYEROBJECTMENUCOMPONENT_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace packets {
namespace object {

class ObjectMenuResponse;

} // namespace object
} // namespace packets
} // namespace zone
} // namespace server

using namespace server::zone::packets::object;

namespace server {
namespace zone {
namespace objects {
namespace player {

class PlayerCreature;

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

#include "engine/core/ManagedObject.h"

#include "server/zone/objects/scene/components/ObjectMenuComponent.h"

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace components {

class PlayerObjectMenuComponent : public ObjectMenuComponent {
public:
	PlayerObjectMenuComponent();

	void fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player);

	int handleObjectMenuSelect(PlayerCreature* player, byte selectedID);

	DistributedObjectServant* _getImplementation();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	PlayerObjectMenuComponent(DummyConstructorParameter* param);

	virtual ~PlayerObjectMenuComponent();

	friend class PlayerObjectMenuComponentHelper;
};

} // namespace components
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::components;

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace components {

class PlayerObjectMenuComponentImplementation : public ObjectMenuComponentImplementation {

public:
	PlayerObjectMenuComponentImplementation();

	PlayerObjectMenuComponentImplementation(DummyConstructorParameter* param);

	void fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player);

	int handleObjectMenuSelect(PlayerCreature* player, byte selectedID);

	PlayerObjectMenuComponent* _this;

	operator const PlayerObjectMenuComponent*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~PlayerObjectMenuComponentImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const String& name);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class PlayerObjectMenuComponent;
};

class PlayerObjectMenuComponentAdapter : public ObjectMenuComponentAdapter {
public:
	PlayerObjectMenuComponentAdapter(PlayerObjectMenuComponentImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	int handleObjectMenuSelect(PlayerCreature* player, byte selectedID);

};

class PlayerObjectMenuComponentHelper : public DistributedObjectClassHelper, public Singleton<PlayerObjectMenuComponentHelper> {
	static PlayerObjectMenuComponentHelper* staticInitializer;

public:
	PlayerObjectMenuComponentHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<PlayerObjectMenuComponentHelper>;
};

} // namespace components
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::components;

#endif /*PLAYEROBJECTMENUCOMPONENT_H_*/
