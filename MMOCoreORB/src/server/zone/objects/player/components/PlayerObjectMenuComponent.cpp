/*
 *	server/zone/objects/player/components/PlayerObjectMenuComponent.cpp generated by engine3 IDL compiler 0.60
 */

#include "PlayerObjectMenuComponent.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/player/PlayerCreature.h"

/*
 *	PlayerObjectMenuComponentStub
 */

enum {RPC_HANDLEOBJECTMENUSELECT__PLAYERCREATURE_BYTE_};

PlayerObjectMenuComponent::PlayerObjectMenuComponent() : ObjectMenuComponent(DummyConstructorParameter::instance()) {
	PlayerObjectMenuComponentImplementation* _implementation = new PlayerObjectMenuComponentImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

PlayerObjectMenuComponent::PlayerObjectMenuComponent(DummyConstructorParameter* param) : ObjectMenuComponent(param) {
}

PlayerObjectMenuComponent::~PlayerObjectMenuComponent() {
}


void PlayerObjectMenuComponent::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player) {
	PlayerObjectMenuComponentImplementation* _implementation = (PlayerObjectMenuComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->fillObjectMenuResponse(menuResponse, player);
}

int PlayerObjectMenuComponent::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	PlayerObjectMenuComponentImplementation* _implementation = (PlayerObjectMenuComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEOBJECTMENUSELECT__PLAYERCREATURE_BYTE_);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->handleObjectMenuSelect(player, selectedID);
}

DistributedObjectServant* PlayerObjectMenuComponent::_getImplementation() {

	_updated = true;
	return _impl;
}

void PlayerObjectMenuComponent::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	PlayerObjectMenuComponentImplementation
 */

PlayerObjectMenuComponentImplementation::PlayerObjectMenuComponentImplementation(DummyConstructorParameter* param) : ObjectMenuComponentImplementation(param) {
	_initializeImplementation();
}


PlayerObjectMenuComponentImplementation::~PlayerObjectMenuComponentImplementation() {
}


void PlayerObjectMenuComponentImplementation::finalize() {
}

void PlayerObjectMenuComponentImplementation::_initializeImplementation() {
	_setClassHelper(PlayerObjectMenuComponentHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void PlayerObjectMenuComponentImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (PlayerObjectMenuComponent*) stub;
	ObjectMenuComponentImplementation::_setStub(stub);
}

DistributedObjectStub* PlayerObjectMenuComponentImplementation::_getStub() {
	return _this;
}

PlayerObjectMenuComponentImplementation::operator const PlayerObjectMenuComponent*() {
	return _this;
}

void PlayerObjectMenuComponentImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void PlayerObjectMenuComponentImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void PlayerObjectMenuComponentImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void PlayerObjectMenuComponentImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void PlayerObjectMenuComponentImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void PlayerObjectMenuComponentImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void PlayerObjectMenuComponentImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void PlayerObjectMenuComponentImplementation::_serializationHelperMethod() {
	ObjectMenuComponentImplementation::_serializationHelperMethod();

	_setClassName("PlayerObjectMenuComponent");

}

void PlayerObjectMenuComponentImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(PlayerObjectMenuComponentImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool PlayerObjectMenuComponentImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ObjectMenuComponentImplementation::readObjectMember(stream, _name))
		return true;


	return false;
}

void PlayerObjectMenuComponentImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = PlayerObjectMenuComponentImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int PlayerObjectMenuComponentImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;

	return 0 + ObjectMenuComponentImplementation::writeObjectMembers(stream);
}

PlayerObjectMenuComponentImplementation::PlayerObjectMenuComponentImplementation() : ObjectMenuComponentImplementation() {
	_initializeImplementation();
}

/*
 *	PlayerObjectMenuComponentAdapter
 */

PlayerObjectMenuComponentAdapter::PlayerObjectMenuComponentAdapter(PlayerObjectMenuComponentImplementation* obj) : ObjectMenuComponentAdapter(obj) {
}

Packet* PlayerObjectMenuComponentAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_HANDLEOBJECTMENUSELECT__PLAYERCREATURE_BYTE_:
		resp->insertSignedInt(handleObjectMenuSelect((PlayerCreature*) inv->getObjectParameter(), inv->getByteParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

int PlayerObjectMenuComponentAdapter::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	return ((PlayerObjectMenuComponentImplementation*) impl)->handleObjectMenuSelect(player, selectedID);
}

/*
 *	PlayerObjectMenuComponentHelper
 */

PlayerObjectMenuComponentHelper* PlayerObjectMenuComponentHelper::staticInitializer = PlayerObjectMenuComponentHelper::instance();

PlayerObjectMenuComponentHelper::PlayerObjectMenuComponentHelper() {
	className = "PlayerObjectMenuComponent";

	Core::getObjectBroker()->registerClass(className, this);
}

void PlayerObjectMenuComponentHelper::finalizeHelper() {
	PlayerObjectMenuComponentHelper::finalize();
}

DistributedObject* PlayerObjectMenuComponentHelper::instantiateObject() {
	return new PlayerObjectMenuComponent(DummyConstructorParameter::instance());
}

DistributedObjectServant* PlayerObjectMenuComponentHelper::instantiateServant() {
	return new PlayerObjectMenuComponentImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* PlayerObjectMenuComponentHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new PlayerObjectMenuComponentAdapter((PlayerObjectMenuComponentImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

