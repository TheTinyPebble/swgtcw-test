/*
 *	server/zone/objects/player/components/PlayerZoneComponent.h generated by engine3 IDL compiler 0.60
 */

#ifndef PLAYERZONECOMPONENT_H_
#define PLAYERZONECOMPONENT_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

namespace server {
namespace zone {
namespace objects {
namespace building {

class BuildingObject;

} // namespace building
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::building;

#include "engine/core/ManagedObject.h"

#include "server/zone/objects/scene/components/ZoneComponent.h"

#include "engine/util/u3d/QuadTreeEntry.h"

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace components {

class PlayerZoneComponent : public ZoneComponent {
public:
	PlayerZoneComponent();

	void notifyInsert(QuadTreeEntry* entry);

	void notifyDissapear(QuadTreeEntry* entry);

	void teleport(float newPositionX, float newPositionZ, float newPositionY, unsigned long long parentID = 0);

	void updateZone(bool lightUpdate, bool sendPackets = true);

	void updateZoneWithParent(SceneObject* newParent, bool lightUpdate, bool sendPackets = true);

	void insertToBuilding(BuildingObject* building);

	void removeFromBuilding(BuildingObject* building);

	DistributedObjectServant* _getImplementation();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	PlayerZoneComponent(DummyConstructorParameter* param);

	virtual ~PlayerZoneComponent();

	friend class PlayerZoneComponentHelper;
};

} // namespace components
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::components;

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace components {

class PlayerZoneComponentImplementation : public ZoneComponentImplementation {

public:
	PlayerZoneComponentImplementation();

	PlayerZoneComponentImplementation(DummyConstructorParameter* param);

	void notifyInsert(QuadTreeEntry* entry);

	void notifyDissapear(QuadTreeEntry* entry);

	void teleport(float newPositionX, float newPositionZ, float newPositionY, unsigned long long parentID = 0);

	void updateZone(bool lightUpdate, bool sendPackets = true);

	void updateZoneWithParent(SceneObject* newParent, bool lightUpdate, bool sendPackets = true);

	void insertToBuilding(BuildingObject* building);

	void removeFromBuilding(BuildingObject* building);

	PlayerZoneComponent* _this;

	operator const PlayerZoneComponent*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~PlayerZoneComponentImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const String& name);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class PlayerZoneComponent;
};

class PlayerZoneComponentAdapter : public ZoneComponentAdapter {
public:
	PlayerZoneComponentAdapter(PlayerZoneComponentImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void teleport(float newPositionX, float newPositionZ, float newPositionY, unsigned long long parentID);

	void updateZone(bool lightUpdate, bool sendPackets);

	void updateZoneWithParent(SceneObject* newParent, bool lightUpdate, bool sendPackets);

	void insertToBuilding(BuildingObject* building);

	void removeFromBuilding(BuildingObject* building);

};

class PlayerZoneComponentHelper : public DistributedObjectClassHelper, public Singleton<PlayerZoneComponentHelper> {
	static PlayerZoneComponentHelper* staticInitializer;

public:
	PlayerZoneComponentHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<PlayerZoneComponentHelper>;
};

} // namespace components
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::components;

#endif /*PLAYERZONECOMPONENT_H_*/
