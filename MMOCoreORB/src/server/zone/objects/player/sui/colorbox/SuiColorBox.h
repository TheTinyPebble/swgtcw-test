/*
 *	server/zone/objects/player/sui/colorbox/SuiColorBox.h generated by engine3 IDL compiler 0.60
 */

#ifndef SUICOLORBOX_H_
#define SUICOLORBOX_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

#include "server/zone/packets/ui/SuiCreatePageMessage.h"

#include "engine/lua/LuaObject.h"

#include "engine/service/proto/BaseMessage.h"

#include "server/zone/objects/player/sui/SuiBox.h"

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace sui {
namespace colorbox {

class SuiColorBox : public SuiBox {
public:
	SuiColorBox(CreatureObject* player, unsigned int windowType);

	BaseMessage* generateMessage();

	String getColorPalette();

	void setColorPalette(String& pal);

	bool isColorPicker();

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	SuiColorBox(DummyConstructorParameter* param);

	virtual ~SuiColorBox();

	friend class SuiColorBoxHelper;
};

} // namespace colorbox
} // namespace sui
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::sui::colorbox;

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace sui {
namespace colorbox {

class SuiColorBoxImplementation : public SuiBoxImplementation {
protected:
	String variable;

public:
	SuiColorBoxImplementation(CreatureObject* player, unsigned int windowType);

	SuiColorBoxImplementation(DummyConstructorParameter* param);

	BaseMessage* generateMessage();

	String getColorPalette();

	void setColorPalette(String& pal);

	bool isColorPicker();

	WeakReference<SuiColorBox*> _this;

	operator const SuiColorBox*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~SuiColorBoxImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class SuiColorBox;
};

class SuiColorBoxAdapter : public SuiBoxAdapter {
public:
	SuiColorBoxAdapter(SuiColorBox* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	BaseMessage* generateMessage();

	String getColorPalette();

	void setColorPalette(String& pal);

	bool isColorPicker();

};

class SuiColorBoxHelper : public DistributedObjectClassHelper, public Singleton<SuiColorBoxHelper> {
	static SuiColorBoxHelper* staticInitializer;

public:
	SuiColorBoxHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<SuiColorBoxHelper>;
};

} // namespace colorbox
} // namespace sui
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::sui::colorbox;

#endif /*SUICOLORBOX_H_*/
