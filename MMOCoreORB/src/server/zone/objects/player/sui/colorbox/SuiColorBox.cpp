/*
 *	server/zone/objects/player/sui/colorbox/SuiColorBox.cpp generated by engine3 IDL compiler 0.60
 */

#include "SuiColorBox.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	SuiColorBoxStub
 */

enum {RPC_GENERATEMESSAGE__ = 6,RPC_GETCOLORPALETTE__,RPC_SETCOLORPALETTE__STRING_,RPC_ISCOLORPICKER__};

SuiColorBox::SuiColorBox(CreatureObject* player, unsigned int windowType) : SuiBox(DummyConstructorParameter::instance()) {
	SuiColorBoxImplementation* _implementation = new SuiColorBoxImplementation(player, windowType);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("SuiColorBox");
}

SuiColorBox::SuiColorBox(DummyConstructorParameter* param) : SuiBox(param) {
	_setClassName("SuiColorBox");
}

SuiColorBox::~SuiColorBox() {
}



BaseMessage* SuiColorBox::generateMessage() {
	SuiColorBoxImplementation* _implementation = static_cast<SuiColorBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GENERATEMESSAGE__);

		return static_cast<BaseMessage*>(method.executeWithObjectReturn());
	} else
		return _implementation->generateMessage();
}

String SuiColorBox::getColorPalette() {
	SuiColorBoxImplementation* _implementation = static_cast<SuiColorBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCOLORPALETTE__);

		String _return_getColorPalette;
		method.executeWithAsciiReturn(_return_getColorPalette);
		return _return_getColorPalette;
	} else
		return _implementation->getColorPalette();
}

void SuiColorBox::setColorPalette(String& pal) {
	SuiColorBoxImplementation* _implementation = static_cast<SuiColorBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCOLORPALETTE__STRING_);
		method.addAsciiParameter(pal);

		method.executeWithVoidReturn();
	} else
		_implementation->setColorPalette(pal);
}

bool SuiColorBox::isColorPicker() {
	SuiColorBoxImplementation* _implementation = static_cast<SuiColorBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCOLORPICKER__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isColorPicker();
}

DistributedObjectServant* SuiColorBox::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* SuiColorBox::_getImplementationForRead() {
	return _impl;
}

void SuiColorBox::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	SuiColorBoxImplementation
 */

SuiColorBoxImplementation::SuiColorBoxImplementation(DummyConstructorParameter* param) : SuiBoxImplementation(param) {
	_initializeImplementation();
}


SuiColorBoxImplementation::~SuiColorBoxImplementation() {
}


void SuiColorBoxImplementation::finalize() {
}

void SuiColorBoxImplementation::_initializeImplementation() {
	_setClassHelper(SuiColorBoxHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void SuiColorBoxImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<SuiColorBox*>(stub);
	SuiBoxImplementation::_setStub(stub);
}

DistributedObjectStub* SuiColorBoxImplementation::_getStub() {
	return _this.get();
}

SuiColorBoxImplementation::operator const SuiColorBox*() {
	return _this.get();
}

void SuiColorBoxImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void SuiColorBoxImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void SuiColorBoxImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void SuiColorBoxImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void SuiColorBoxImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void SuiColorBoxImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void SuiColorBoxImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void SuiColorBoxImplementation::_serializationHelperMethod() {
	SuiBoxImplementation::_serializationHelperMethod();

	_setClassName("SuiColorBox");

}

void SuiColorBoxImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(SuiColorBoxImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool SuiColorBoxImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (SuiBoxImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x75f61db8: //SuiColorBox.variable
		TypeInfo<String >::parseFromBinaryStream(&variable, stream);
		return true;

	}

	return false;
}

void SuiColorBoxImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = SuiColorBoxImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int SuiColorBoxImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = SuiBoxImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x75f61db8; //SuiColorBox.variable
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&variable, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 1;
}

SuiColorBoxImplementation::SuiColorBoxImplementation(CreatureObject* player, unsigned int windowType) : SuiBoxImplementation(player, windowType, SuiBox::COLORPICKER) {
	_initializeImplementation();
}

String SuiColorBoxImplementation::getColorPalette() {
	// server/zone/objects/player/sui/colorbox/SuiColorBox.idl():  		return variable;
	return variable;
}

void SuiColorBoxImplementation::setColorPalette(String& pal) {
	// server/zone/objects/player/sui/colorbox/SuiColorBox.idl():  		variable = pal;
	variable = pal;
}

bool SuiColorBoxImplementation::isColorPicker() {
	// server/zone/objects/player/sui/colorbox/SuiColorBox.idl():  		return true;
	return true;
}

/*
 *	SuiColorBoxAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


SuiColorBoxAdapter::SuiColorBoxAdapter(SuiColorBox* obj) : SuiBoxAdapter(obj) {
}

void SuiColorBoxAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_GENERATEMESSAGE__:
		{
			resp->insertLong(generateMessage()->_getObjectID());
		}
		break;
	case RPC_GETCOLORPALETTE__:
		{
			resp->insertAscii(getColorPalette());
		}
		break;
	case RPC_SETCOLORPALETTE__STRING_:
		{
			String pal; 
			setColorPalette(inv->getAsciiParameter(pal));
		}
		break;
	case RPC_ISCOLORPICKER__:
		{
			resp->insertBoolean(isColorPicker());
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

BaseMessage* SuiColorBoxAdapter::generateMessage() {
	return (static_cast<SuiColorBox*>(stub))->generateMessage();
}

String SuiColorBoxAdapter::getColorPalette() {
	return (static_cast<SuiColorBox*>(stub))->getColorPalette();
}

void SuiColorBoxAdapter::setColorPalette(String& pal) {
	(static_cast<SuiColorBox*>(stub))->setColorPalette(pal);
}

bool SuiColorBoxAdapter::isColorPicker() {
	return (static_cast<SuiColorBox*>(stub))->isColorPicker();
}

/*
 *	SuiColorBoxHelper
 */

SuiColorBoxHelper* SuiColorBoxHelper::staticInitializer = SuiColorBoxHelper::instance();

SuiColorBoxHelper::SuiColorBoxHelper() {
	className = "SuiColorBox";

	Core::getObjectBroker()->registerClass(className, this);
}

void SuiColorBoxHelper::finalizeHelper() {
	SuiColorBoxHelper::finalize();
}

DistributedObject* SuiColorBoxHelper::instantiateObject() {
	return new SuiColorBox(DummyConstructorParameter::instance());
}

DistributedObjectServant* SuiColorBoxHelper::instantiateServant() {
	return new SuiColorBoxImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* SuiColorBoxHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SuiColorBoxAdapter(static_cast<SuiColorBox*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

