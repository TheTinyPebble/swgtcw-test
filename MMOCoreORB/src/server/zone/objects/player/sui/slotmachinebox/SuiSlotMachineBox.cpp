/*
 *	server/zone/objects/player/sui/slotmachinebox/SuiSlotMachineBox.cpp generated by engine3 IDL compiler 0.60
 */

#include "SuiSlotMachineBox.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/player/sui/SuiBox.h"

/*
 *	SuiSlotMachineBoxStub
 */

SuiSlotMachineBox::SuiSlotMachineBox(PlayerCreature* player, unsigned int windowType, unsigned int payoutBox, unsigned int listBoxType) : SuiListBox(DummyConstructorParameter::instance()) {
	_impl = new SuiSlotMachineBoxImplementation(player, windowType, payoutBox, listBoxType);
	_impl->_setStub(this);
}

SuiSlotMachineBox::SuiSlotMachineBox(DummyConstructorParameter* param) : SuiListBox(param) {
}

SuiSlotMachineBox::~SuiSlotMachineBox() {
}


unsigned int SuiSlotMachineBox::getPayoutBoxID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((SuiSlotMachineBoxImplementation*) _impl)->getPayoutBoxID();
}

/*
 *	SuiSlotMachineBoxImplementation
 */

SuiSlotMachineBoxImplementation::SuiSlotMachineBoxImplementation(DummyConstructorParameter* param) : SuiListBoxImplementation(param) {
	_initializeImplementation();
}


SuiSlotMachineBoxImplementation::~SuiSlotMachineBoxImplementation() {
}


void SuiSlotMachineBoxImplementation::finalize() {
}

void SuiSlotMachineBoxImplementation::_initializeImplementation() {
	_setClassHelper(SuiSlotMachineBoxHelper::instance());

	_serializationHelperMethod();
}

void SuiSlotMachineBoxImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (SuiSlotMachineBox*) stub;
	SuiListBoxImplementation::_setStub(stub);
}

DistributedObjectStub* SuiSlotMachineBoxImplementation::_getStub() {
	return _this;
}

SuiSlotMachineBoxImplementation::operator const SuiSlotMachineBox*() {
	return _this;
}

void SuiSlotMachineBoxImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void SuiSlotMachineBoxImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void SuiSlotMachineBoxImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void SuiSlotMachineBoxImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void SuiSlotMachineBoxImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void SuiSlotMachineBoxImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void SuiSlotMachineBoxImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void SuiSlotMachineBoxImplementation::_serializationHelperMethod() {
	SuiListBoxImplementation::_serializationHelperMethod();

	_setClassName("SuiSlotMachineBox");

	addSerializableVariable("payoutBoxID", &payoutBoxID);
}

SuiSlotMachineBoxImplementation::SuiSlotMachineBoxImplementation(PlayerCreature* player, unsigned int windowType, unsigned int payoutBox, unsigned int listBoxType) : SuiListBoxImplementation(player, windowType, listBoxType) {
	_initializeImplementation();
	// server/zone/objects/player/sui/slotmachinebox/SuiSlotMachineBox.idl(65):  		payoutBoxID = payoutBox;
	payoutBoxID = payoutBox;
}

unsigned int SuiSlotMachineBoxImplementation::getPayoutBoxID() {
	// server/zone/objects/player/sui/slotmachinebox/SuiSlotMachineBox.idl(69):  		return payoutBoxID;
	return payoutBoxID;
}

/*
 *	SuiSlotMachineBoxAdapter
 */

SuiSlotMachineBoxAdapter::SuiSlotMachineBoxAdapter(SuiSlotMachineBoxImplementation* obj) : SuiListBoxAdapter(obj) {
}

Packet* SuiSlotMachineBoxAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertInt(getPayoutBoxID());
		break;
	default:
		return NULL;
	}

	return resp;
}

unsigned int SuiSlotMachineBoxAdapter::getPayoutBoxID() {
	return ((SuiSlotMachineBoxImplementation*) impl)->getPayoutBoxID();
}

/*
 *	SuiSlotMachineBoxHelper
 */

SuiSlotMachineBoxHelper* SuiSlotMachineBoxHelper::staticInitializer = SuiSlotMachineBoxHelper::instance();

SuiSlotMachineBoxHelper::SuiSlotMachineBoxHelper() {
	className = "SuiSlotMachineBox";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void SuiSlotMachineBoxHelper::finalizeHelper() {
	SuiSlotMachineBoxHelper::finalize();
}

DistributedObject* SuiSlotMachineBoxHelper::instantiateObject() {
	return new SuiSlotMachineBox(DummyConstructorParameter::instance());
}

DistributedObjectServant* SuiSlotMachineBoxHelper::instantiateServant() {
	return new SuiSlotMachineBoxImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* SuiSlotMachineBoxHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SuiSlotMachineBoxAdapter((SuiSlotMachineBoxImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

