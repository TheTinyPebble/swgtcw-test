/*
 *	server/zone/objects/player/sui/slicingbox/SuiSlicingBox.cpp generated by engine3 IDL compiler 0.55
 */

#include "SuiSlicingBox.h"

#include "SuiSlicingBoxImplementation.h"

#include "../listbox/SuiListBox.h"

#include "../../../tangible/tools/smuggler/PrecisionLaserKnife.h"

#include "../../../tangible/TangibleObject.h"

#include "../../Player.h"

/*
 *	SuiSlicingBoxStub
 */

SuiSlicingBox::SuiSlicingBox(Player* player, TangibleObject* tano) : SuiListBox(DummyConstructorParameter::instance()) {
	_impl = new SuiSlicingBoxImplementation(player, tano);
	_impl->_setStub(this);
}

SuiSlicingBox::SuiSlicingBox(DummyConstructorParameter* param) : SuiListBox(param) {
}

SuiSlicingBox::~SuiSlicingBox() {
}

bool SuiSlicingBox::handleMenuChoice(unsigned char index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addUnsignedCharParameter(index);

		return method.executeWithBooleanReturn();
	} else
		return ((SuiSlicingBoxImplementation*) _impl)->handleMenuChoice(index);
}

void SuiSlicingBox::generateMenu() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		((SuiSlicingBoxImplementation*) _impl)->generateMenu();
}

void SuiSlicingBox::setPrecisionLaserKnife(PrecisionLaserKnife* knife) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(knife);

		method.executeWithVoidReturn();
	} else
		((SuiSlicingBoxImplementation*) _impl)->setPrecisionLaserKnife(knife);
}

void SuiSlicingBox::setSlicingObject(TangibleObject* tano) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(tano);

		method.executeWithVoidReturn();
	} else
		((SuiSlicingBoxImplementation*) _impl)->setSlicingObject(tano);
}

PrecisionLaserKnife* SuiSlicingBox::getPrecisionLaserKnife() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		return (PrecisionLaserKnife*) method.executeWithObjectReturn();
	} else
		return ((SuiSlicingBoxImplementation*) _impl)->getPrecisionLaserKnife();
}

TangibleObject* SuiSlicingBox::getSlicingObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		return (TangibleObject*) method.executeWithObjectReturn();
	} else
		return ((SuiSlicingBoxImplementation*) _impl)->getSlicingObject();
}

unsigned char SuiSlicingBox::getProgress() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		return method.executeWithUnsignedCharReturn();
	} else
		return ((SuiSlicingBoxImplementation*) _impl)->getProgress();
}

/*
 *	SuiSlicingBoxAdapter
 */

SuiSlicingBoxAdapter::SuiSlicingBoxAdapter(SuiSlicingBoxImplementation* obj) : SuiListBoxAdapter(obj) {
}

Packet* SuiSlicingBoxAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertBoolean(handleMenuChoice(inv->getUnsignedCharParameter()));
		break;
	case 7:
		generateMenu();
		break;
	case 8:
		setPrecisionLaserKnife((PrecisionLaserKnife*) inv->getObjectParameter());
		break;
	case 9:
		setSlicingObject((TangibleObject*) inv->getObjectParameter());
		break;
	case 10:
		resp->insertLong(getPrecisionLaserKnife()->_getObjectID());
		break;
	case 11:
		resp->insertLong(getSlicingObject()->_getObjectID());
		break;
	case 12:
		resp->insertByte(getProgress());
		break;
	default:
		return NULL;
	}

	return resp;
}

bool SuiSlicingBoxAdapter::handleMenuChoice(unsigned char index) {
	return ((SuiSlicingBoxImplementation*) impl)->handleMenuChoice(index);
}

void SuiSlicingBoxAdapter::generateMenu() {
	return ((SuiSlicingBoxImplementation*) impl)->generateMenu();
}

void SuiSlicingBoxAdapter::setPrecisionLaserKnife(PrecisionLaserKnife* knife) {
	return ((SuiSlicingBoxImplementation*) impl)->setPrecisionLaserKnife(knife);
}

void SuiSlicingBoxAdapter::setSlicingObject(TangibleObject* tano) {
	return ((SuiSlicingBoxImplementation*) impl)->setSlicingObject(tano);
}

PrecisionLaserKnife* SuiSlicingBoxAdapter::getPrecisionLaserKnife() {
	return ((SuiSlicingBoxImplementation*) impl)->getPrecisionLaserKnife();
}

TangibleObject* SuiSlicingBoxAdapter::getSlicingObject() {
	return ((SuiSlicingBoxImplementation*) impl)->getSlicingObject();
}

unsigned char SuiSlicingBoxAdapter::getProgress() {
	return ((SuiSlicingBoxImplementation*) impl)->getProgress();
}

/*
 *	SuiSlicingBoxHelper
 */

SuiSlicingBoxHelper* SuiSlicingBoxHelper::staticInitializer = SuiSlicingBoxHelper::instance();

SuiSlicingBoxHelper::SuiSlicingBoxHelper() {
	className = "SuiSlicingBox";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void SuiSlicingBoxHelper::finalizeHelper() {
	SuiSlicingBoxHelper::finalize();
}

DistributedObject* SuiSlicingBoxHelper::instantiateObject() {
	return new SuiSlicingBox(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* SuiSlicingBoxHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SuiSlicingBoxAdapter((SuiSlicingBoxImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	SuiSlicingBoxServant
 */

SuiSlicingBoxServant::SuiSlicingBoxServant(Player* player, unsigned int windowType, unsigned int listBoxType) : SuiListBoxImplementation(player, windowType, listBoxType) {
	_classHelper = SuiSlicingBoxHelper::instance();
}

SuiSlicingBoxServant::~SuiSlicingBoxServant() {
}

void SuiSlicingBoxServant::_setStub(DistributedObjectStub* stub) {
	_this = (SuiSlicingBox*) stub;
	SuiListBoxServant::_setStub(stub);
}

DistributedObjectStub* SuiSlicingBoxServant::_getStub() {
	return _this;
}

