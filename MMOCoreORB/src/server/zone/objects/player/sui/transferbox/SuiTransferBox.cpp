/*
 *	server/zone/objects/player/sui/transferbox/SuiTransferBox.cpp generated by engine3 IDL compiler 0.60
 */

#include "SuiTransferBox.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

/*
 *	SuiTransferBoxStub
 */

enum {RPC_GENERATEMESSAGE__ = 6,RPC_ADDFROM__STRING_STRING_STRING_STRING_,RPC_ADDTO__STRING_STRING_STRING_STRING_,RPC_ISTRANSFERBOX__};

SuiTransferBox::SuiTransferBox(PlayerCreature* player, unsigned int windowType) : SuiBox(DummyConstructorParameter::instance()) {
	SuiTransferBoxImplementation* _implementation = new SuiTransferBoxImplementation(player, windowType);
	_impl = _implementation;
	_impl->_setStub(this);
}

SuiTransferBox::SuiTransferBox(DummyConstructorParameter* param) : SuiBox(param) {
}

SuiTransferBox::~SuiTransferBox() {
}


BaseMessage* SuiTransferBox::generateMessage() {
	SuiTransferBoxImplementation* _implementation = (SuiTransferBoxImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GENERATEMESSAGE__);

		return (BaseMessage*) method.executeWithObjectReturn();
	} else
		return _implementation->generateMessage();
}

void SuiTransferBox::addFrom(const String& from, const String& startingFrom, const String& inputFrom, const String& rFrom) {
	SuiTransferBoxImplementation* _implementation = (SuiTransferBoxImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDFROM__STRING_STRING_STRING_STRING_);
		method.addAsciiParameter(from);
		method.addAsciiParameter(startingFrom);
		method.addAsciiParameter(inputFrom);
		method.addAsciiParameter(rFrom);

		method.executeWithVoidReturn();
	} else
		_implementation->addFrom(from, startingFrom, inputFrom, rFrom);
}

void SuiTransferBox::addTo(const String& to, const String& startingTo, const String& inputTo, const String& rTo) {
	SuiTransferBoxImplementation* _implementation = (SuiTransferBoxImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDTO__STRING_STRING_STRING_STRING_);
		method.addAsciiParameter(to);
		method.addAsciiParameter(startingTo);
		method.addAsciiParameter(inputTo);
		method.addAsciiParameter(rTo);

		method.executeWithVoidReturn();
	} else
		_implementation->addTo(to, startingTo, inputTo, rTo);
}

bool SuiTransferBox::isTransferBox() {
	SuiTransferBoxImplementation* _implementation = (SuiTransferBoxImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISTRANSFERBOX__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isTransferBox();
}

DistributedObjectServant* SuiTransferBox::_getImplementation() {

	_updated = true;
	return _impl;
}

void SuiTransferBox::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	SuiTransferBoxImplementation
 */

SuiTransferBoxImplementation::SuiTransferBoxImplementation(DummyConstructorParameter* param) : SuiBoxImplementation(param) {
	_initializeImplementation();
}


SuiTransferBoxImplementation::~SuiTransferBoxImplementation() {
}


void SuiTransferBoxImplementation::finalize() {
}

void SuiTransferBoxImplementation::_initializeImplementation() {
	_setClassHelper(SuiTransferBoxHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void SuiTransferBoxImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (SuiTransferBox*) stub;
	SuiBoxImplementation::_setStub(stub);
}

DistributedObjectStub* SuiTransferBoxImplementation::_getStub() {
	return _this;
}

SuiTransferBoxImplementation::operator const SuiTransferBox*() {
	return _this;
}

void SuiTransferBoxImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void SuiTransferBoxImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void SuiTransferBoxImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void SuiTransferBoxImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void SuiTransferBoxImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void SuiTransferBoxImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void SuiTransferBoxImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void SuiTransferBoxImplementation::_serializationHelperMethod() {
	SuiBoxImplementation::_serializationHelperMethod();

	_setClassName("SuiTransferBox");

}

void SuiTransferBoxImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(SuiTransferBoxImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool SuiTransferBoxImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (SuiBoxImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "lblFrom") {
		TypeInfo<String >::parseFromBinaryStream(&lblFrom, stream);
		return true;
	}

	if (_name == "lblStartingFrom") {
		TypeInfo<String >::parseFromBinaryStream(&lblStartingFrom, stream);
		return true;
	}

	if (_name == "lblInputFrom") {
		TypeInfo<String >::parseFromBinaryStream(&lblInputFrom, stream);
		return true;
	}

	if (_name == "lblTo") {
		TypeInfo<String >::parseFromBinaryStream(&lblTo, stream);
		return true;
	}

	if (_name == "lblStartingTo") {
		TypeInfo<String >::parseFromBinaryStream(&lblStartingTo, stream);
		return true;
	}

	if (_name == "lblInputTo") {
		TypeInfo<String >::parseFromBinaryStream(&lblInputTo, stream);
		return true;
	}

	if (_name == "convertRatioFrom") {
		TypeInfo<String >::parseFromBinaryStream(&convertRatioFrom, stream);
		return true;
	}

	if (_name == "convertRatioTo") {
		TypeInfo<String >::parseFromBinaryStream(&convertRatioTo, stream);
		return true;
	}


	return false;
}

void SuiTransferBoxImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = SuiTransferBoxImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int SuiTransferBoxImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "lblFrom";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<String >::toBinaryStream(&lblFrom, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "lblStartingFrom";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<String >::toBinaryStream(&lblStartingFrom, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "lblInputFrom";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<String >::toBinaryStream(&lblInputFrom, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "lblTo";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<String >::toBinaryStream(&lblTo, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "lblStartingTo";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<String >::toBinaryStream(&lblStartingTo, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "lblInputTo";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<String >::toBinaryStream(&lblInputTo, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "convertRatioFrom";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<String >::toBinaryStream(&convertRatioFrom, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "convertRatioTo";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<String >::toBinaryStream(&convertRatioTo, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 8 + SuiBoxImplementation::writeObjectMembers(stream);
}

SuiTransferBoxImplementation::SuiTransferBoxImplementation(PlayerCreature* player, unsigned int windowType) : SuiBoxImplementation(player, windowType, SuiBox::TRANSFERBOX) {
	_initializeImplementation();
}

bool SuiTransferBoxImplementation::isTransferBox() {
	// server/zone/objects/player/sui/transferbox/SuiTransferBox.idl():  		return true;
	return true;
}

/*
 *	SuiTransferBoxAdapter
 */

SuiTransferBoxAdapter::SuiTransferBoxAdapter(SuiTransferBoxImplementation* obj) : SuiBoxAdapter(obj) {
}

Packet* SuiTransferBoxAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_GENERATEMESSAGE__:
		resp->insertLong(generateMessage()->_getObjectID());
		break;
	case RPC_ADDFROM__STRING_STRING_STRING_STRING_:
		addFrom(inv->getAsciiParameter(_param0_addFrom__String_String_String_String_), inv->getAsciiParameter(_param1_addFrom__String_String_String_String_), inv->getAsciiParameter(_param2_addFrom__String_String_String_String_), inv->getAsciiParameter(_param3_addFrom__String_String_String_String_));
		break;
	case RPC_ADDTO__STRING_STRING_STRING_STRING_:
		addTo(inv->getAsciiParameter(_param0_addTo__String_String_String_String_), inv->getAsciiParameter(_param1_addTo__String_String_String_String_), inv->getAsciiParameter(_param2_addTo__String_String_String_String_), inv->getAsciiParameter(_param3_addTo__String_String_String_String_));
		break;
	case RPC_ISTRANSFERBOX__:
		resp->insertBoolean(isTransferBox());
		break;
	default:
		return NULL;
	}

	return resp;
}

BaseMessage* SuiTransferBoxAdapter::generateMessage() {
	return ((SuiTransferBoxImplementation*) impl)->generateMessage();
}

void SuiTransferBoxAdapter::addFrom(const String& from, const String& startingFrom, const String& inputFrom, const String& rFrom) {
	((SuiTransferBoxImplementation*) impl)->addFrom(from, startingFrom, inputFrom, rFrom);
}

void SuiTransferBoxAdapter::addTo(const String& to, const String& startingTo, const String& inputTo, const String& rTo) {
	((SuiTransferBoxImplementation*) impl)->addTo(to, startingTo, inputTo, rTo);
}

bool SuiTransferBoxAdapter::isTransferBox() {
	return ((SuiTransferBoxImplementation*) impl)->isTransferBox();
}

/*
 *	SuiTransferBoxHelper
 */

SuiTransferBoxHelper* SuiTransferBoxHelper::staticInitializer = SuiTransferBoxHelper::instance();

SuiTransferBoxHelper::SuiTransferBoxHelper() {
	className = "SuiTransferBox";

	Core::getObjectBroker()->registerClass(className, this);
}

void SuiTransferBoxHelper::finalizeHelper() {
	SuiTransferBoxHelper::finalize();
}

DistributedObject* SuiTransferBoxHelper::instantiateObject() {
	return new SuiTransferBox(DummyConstructorParameter::instance());
}

DistributedObjectServant* SuiTransferBoxHelper::instantiateServant() {
	return new SuiTransferBoxImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* SuiTransferBoxHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SuiTransferBoxAdapter((SuiTransferBoxImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

