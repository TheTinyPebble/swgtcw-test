/*
 *	server/zone/objects/player/sui/banktransferbox/SuiBankTransferBox.cpp generated by engine3 IDL compiler 0.55
 */

#include "SuiBankTransferBox.h"

#include "SuiBankTransferBoxImplementation.h"

#include "../SuiBox.h"

#include "../../Player.h"

/*
 *	SuiBankTransferBoxStub
 */

SuiBankTransferBox::SuiBankTransferBox(Player* player, unsigned int windowType) : SuiBox(DummyConstructorParameter::instance()) {
	_impl = new SuiBankTransferBoxImplementation(player, windowType);
	_impl->_setStub(this);
}

SuiBankTransferBox::SuiBankTransferBox(DummyConstructorParameter* param) : SuiBox(param) {
}

SuiBankTransferBox::~SuiBankTransferBox() {
}

void SuiBankTransferBox::addCash(int cash) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addSignedIntParameter(cash);

		method.executeWithVoidReturn();
	} else
		((SuiBankTransferBoxImplementation*) _impl)->addCash(cash);
}

void SuiBankTransferBox::addBank(int bank) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addSignedIntParameter(bank);

		method.executeWithVoidReturn();
	} else
		((SuiBankTransferBoxImplementation*) _impl)->addBank(bank);
}

BaseMessage* SuiBankTransferBox::generateMessage() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		return (BaseMessage*) method.executeWithObjectReturn();
	} else
		return ((SuiBankTransferBoxImplementation*) _impl)->generateMessage();
}

/*
 *	SuiBankTransferBoxAdapter
 */

SuiBankTransferBoxAdapter::SuiBankTransferBoxAdapter(SuiBankTransferBoxImplementation* obj) : SuiBoxAdapter(obj) {
}

Packet* SuiBankTransferBoxAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		addCash(inv->getSignedIntParameter());
		break;
	case 7:
		addBank(inv->getSignedIntParameter());
		break;
	case 8:
		resp->insertLong(generateMessage()->_getObjectID());
		break;
	default:
		return NULL;
	}

	return resp;
}

void SuiBankTransferBoxAdapter::addCash(int cash) {
	return ((SuiBankTransferBoxImplementation*) impl)->addCash(cash);
}

void SuiBankTransferBoxAdapter::addBank(int bank) {
	return ((SuiBankTransferBoxImplementation*) impl)->addBank(bank);
}

BaseMessage* SuiBankTransferBoxAdapter::generateMessage() {
	return ((SuiBankTransferBoxImplementation*) impl)->generateMessage();
}

/*
 *	SuiBankTransferBoxHelper
 */

SuiBankTransferBoxHelper* SuiBankTransferBoxHelper::staticInitializer = SuiBankTransferBoxHelper::instance();

SuiBankTransferBoxHelper::SuiBankTransferBoxHelper() {
	className = "SuiBankTransferBox";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void SuiBankTransferBoxHelper::finalizeHelper() {
	SuiBankTransferBoxHelper::finalize();
}

DistributedObject* SuiBankTransferBoxHelper::instantiateObject() {
	return new SuiBankTransferBox(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* SuiBankTransferBoxHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SuiBankTransferBoxAdapter((SuiBankTransferBoxImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	SuiBankTransferBoxServant
 */

SuiBankTransferBoxServant::SuiBankTransferBoxServant(Player* player, unsigned int windowType, unsigned int boxType) : SuiBoxImplementation(player, windowType, boxType) {
	_classHelper = SuiBankTransferBoxHelper::instance();
}

SuiBankTransferBoxServant::~SuiBankTransferBoxServant() {
}

void SuiBankTransferBoxServant::_setStub(DistributedObjectStub* stub) {
	_this = (SuiBankTransferBox*) stub;
	SuiBoxServant::_setStub(stub);
}

DistributedObjectStub* SuiBankTransferBoxServant::_getStub() {
	return _this;
}

