/*
 *	server/zone/objects/player/sui/inputbox/SuiInputBox.cpp generated by engine3 IDL compiler 0.55
 */

#include "SuiInputBox.h"

#include "SuiInputBoxImplementation.h"

#include "../SuiBox.h"

#include "../../Player.h"

/*
 *	SuiInputBoxStub
 */

SuiInputBox::SuiInputBox(Player* player, unsigned int windowType, int inputtype) : SuiBox(DummyConstructorParameter::instance()) {
	_impl = new SuiInputBoxImplementation(player, windowType, inputtype);
	_impl->_setStub(this);
}

SuiInputBox::SuiInputBox(DummyConstructorParameter* param) : SuiBox(param) {
}

SuiInputBox::~SuiInputBox() {
}

BaseMessage* SuiInputBox::generateMessage() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		return (BaseMessage*) method.executeWithObjectReturn();
	} else
		return ((SuiInputBoxImplementation*) _impl)->generateMessage();
}

void SuiInputBox::setMaxInputSize(int size) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addSignedIntParameter(size);

		method.executeWithVoidReturn();
	} else
		((SuiInputBoxImplementation*) _impl)->setMaxInputSize(size);
}

void SuiInputBox::setDefaultInput(const String& text) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addAsciiParameter(text);

		method.executeWithVoidReturn();
	} else
		((SuiInputBoxImplementation*) _impl)->setDefaultInput(text);
}

bool SuiInputBox::isFilterBox() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return method.executeWithBooleanReturn();
	} else
		return ((SuiInputBoxImplementation*) _impl)->isFilterBox();
}

/*
 *	SuiInputBoxAdapter
 */

SuiInputBoxAdapter::SuiInputBoxAdapter(SuiInputBoxImplementation* obj) : SuiBoxAdapter(obj) {
}

Packet* SuiInputBoxAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertLong(generateMessage()->_getObjectID());
		break;
	case 7:
		setMaxInputSize(inv->getSignedIntParameter());
		break;
	case 8:
		setDefaultInput(inv->getAsciiParameter(_param0_setDefaultInput__String_));
		break;
	case 9:
		resp->insertBoolean(isFilterBox());
		break;
	default:
		return NULL;
	}

	return resp;
}

BaseMessage* SuiInputBoxAdapter::generateMessage() {
	return ((SuiInputBoxImplementation*) impl)->generateMessage();
}

void SuiInputBoxAdapter::setMaxInputSize(int size) {
	return ((SuiInputBoxImplementation*) impl)->setMaxInputSize(size);
}

void SuiInputBoxAdapter::setDefaultInput(const String& text) {
	return ((SuiInputBoxImplementation*) impl)->setDefaultInput(text);
}

bool SuiInputBoxAdapter::isFilterBox() {
	return ((SuiInputBoxImplementation*) impl)->isFilterBox();
}

/*
 *	SuiInputBoxHelper
 */

SuiInputBoxHelper* SuiInputBoxHelper::staticInitializer = SuiInputBoxHelper::instance();

SuiInputBoxHelper::SuiInputBoxHelper() {
	className = "SuiInputBox";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void SuiInputBoxHelper::finalizeHelper() {
	SuiInputBoxHelper::finalize();
}

DistributedObject* SuiInputBoxHelper::instantiateObject() {
	return new SuiInputBox(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* SuiInputBoxHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SuiInputBoxAdapter((SuiInputBoxImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	SuiInputBoxServant
 */

SuiInputBoxServant::SuiInputBoxServant(Player* player, unsigned int windowType, unsigned int boxType) : SuiBoxImplementation(player, windowType, boxType) {
	_classHelper = SuiInputBoxHelper::instance();
}

SuiInputBoxServant::~SuiInputBoxServant() {
}

void SuiInputBoxServant::_setStub(DistributedObjectStub* stub) {
	_this = (SuiInputBox*) stub;
	SuiBoxServant::_setStub(stub);
}

DistributedObjectStub* SuiInputBoxServant::_getStub() {
	return _this;
}

