/*
 *	server/zone/objects/player/sui/listbox/SuiListBox.cpp generated by engine3 IDL compiler 0.60
 */

#include "SuiListBox.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	SuiListBoxStub
 */

enum {RPC_INIT__ = 6,RPC_ADDMENUITEM__STRING_LONG_,RPC_GETMENUITEMNAME__INT_,RPC_REMOVEALLMENUITEMS__,RPC_GETMENUOBJECTID__INT_,RPC_GETMENUSIZE__,RPC_GENERATEMESSAGE__,RPC_SETNEXTBOX__INT_,RPC_SETPREVIOUSBOX__INT_,RPC_GETNEXTBOX__,RPC_GETPREVIOUSBOX__,RPC_ISLISTBOX__};

SuiListBox::SuiListBox(CreatureObject* player, unsigned int windowType, unsigned int listBoxType) : SuiBox(DummyConstructorParameter::instance()) {
	SuiListBoxImplementation* _implementation = new SuiListBoxImplementation(player, windowType, listBoxType);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("SuiListBox");
}

SuiListBox::SuiListBox(DummyConstructorParameter* param) : SuiBox(param) {
	_setClassName("SuiListBox");
}

SuiListBox::~SuiListBox() {
}



void SuiListBox::init() {
	SuiListBoxImplementation* _implementation = static_cast<SuiListBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INIT__);

		method.executeWithVoidReturn();
	} else
		_implementation->init();
}

void SuiListBox::addMenuItem(const String& name, unsigned long long objectID) {
	SuiListBoxImplementation* _implementation = static_cast<SuiListBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDMENUITEM__STRING_LONG_);
		method.addAsciiParameter(name);
		method.addUnsignedLongParameter(objectID);

		method.executeWithVoidReturn();
	} else
		_implementation->addMenuItem(name, objectID);
}

String SuiListBox::getMenuItemName(int index) {
	SuiListBoxImplementation* _implementation = static_cast<SuiListBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMENUITEMNAME__INT_);
		method.addSignedIntParameter(index);

		String _return_getMenuItemName;
		method.executeWithAsciiReturn(_return_getMenuItemName);
		return _return_getMenuItemName;
	} else
		return _implementation->getMenuItemName(index);
}

void SuiListBox::removeAllMenuItems() {
	SuiListBoxImplementation* _implementation = static_cast<SuiListBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEALLMENUITEMS__);

		method.executeWithVoidReturn();
	} else
		_implementation->removeAllMenuItems();
}

unsigned long long SuiListBox::getMenuObjectID(unsigned int idx) {
	SuiListBoxImplementation* _implementation = static_cast<SuiListBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMENUOBJECTID__INT_);
		method.addUnsignedIntParameter(idx);

		return method.executeWithUnsignedLongReturn();
	} else
		return _implementation->getMenuObjectID(idx);
}

int SuiListBox::getMenuSize() {
	SuiListBoxImplementation* _implementation = static_cast<SuiListBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMENUSIZE__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getMenuSize();
}

BaseMessage* SuiListBox::generateMessage() {
	SuiListBoxImplementation* _implementation = static_cast<SuiListBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GENERATEMESSAGE__);

		return static_cast<BaseMessage*>(method.executeWithObjectReturn());
	} else
		return _implementation->generateMessage();
}

void SuiListBox::setNextBox(unsigned int boxID) {
	SuiListBoxImplementation* _implementation = static_cast<SuiListBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETNEXTBOX__INT_);
		method.addUnsignedIntParameter(boxID);

		method.executeWithVoidReturn();
	} else
		_implementation->setNextBox(boxID);
}

void SuiListBox::setPreviousBox(unsigned int boxID) {
	SuiListBoxImplementation* _implementation = static_cast<SuiListBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPREVIOUSBOX__INT_);
		method.addUnsignedIntParameter(boxID);

		method.executeWithVoidReturn();
	} else
		_implementation->setPreviousBox(boxID);
}

unsigned long long SuiListBox::getNextBox() {
	SuiListBoxImplementation* _implementation = static_cast<SuiListBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETNEXTBOX__);

		return method.executeWithUnsignedLongReturn();
	} else
		return _implementation->getNextBox();
}

unsigned long long SuiListBox::getPreviousBox() {
	SuiListBoxImplementation* _implementation = static_cast<SuiListBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPREVIOUSBOX__);

		return method.executeWithUnsignedLongReturn();
	} else
		return _implementation->getPreviousBox();
}

bool SuiListBox::isListBox() {
	SuiListBoxImplementation* _implementation = static_cast<SuiListBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISLISTBOX__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isListBox();
}

DistributedObjectServant* SuiListBox::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

void SuiListBox::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	SuiListBoxImplementation
 */

SuiListBoxImplementation::SuiListBoxImplementation(DummyConstructorParameter* param) : SuiBoxImplementation(param) {
	_initializeImplementation();
}


SuiListBoxImplementation::~SuiListBoxImplementation() {
}


void SuiListBoxImplementation::finalize() {
}

void SuiListBoxImplementation::_initializeImplementation() {
	_setClassHelper(SuiListBoxHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void SuiListBoxImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<SuiListBox*>(stub);
	SuiBoxImplementation::_setStub(stub);
}

DistributedObjectStub* SuiListBoxImplementation::_getStub() {
	return _this.get();
}

SuiListBoxImplementation::operator const SuiListBox*() {
	return _this.get();
}

void SuiListBoxImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void SuiListBoxImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void SuiListBoxImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void SuiListBoxImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void SuiListBoxImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void SuiListBoxImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void SuiListBoxImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void SuiListBoxImplementation::_serializationHelperMethod() {
	SuiBoxImplementation::_serializationHelperMethod();

	_setClassName("SuiListBox");

}

void SuiListBoxImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(SuiListBoxImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool SuiListBoxImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (SuiBoxImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "SuiListBox.menuItems") {
		TypeInfo<Vector<ManagedReference<SuiListBoxMenuItem* > > >::parseFromBinaryStream(&menuItems, stream);
		return true;
	}

	if (_name == "SuiListBox.type") {
		TypeInfo<int >::parseFromBinaryStream(&type, stream);
		return true;
	}

	if (_name == "SuiListBox.next") {
		TypeInfo<unsigned long long >::parseFromBinaryStream(&next, stream);
		return true;
	}

	if (_name == "SuiListBox.previous") {
		TypeInfo<unsigned long long >::parseFromBinaryStream(&previous, stream);
		return true;
	}


	return false;
}

void SuiListBoxImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = SuiListBoxImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int SuiListBoxImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = SuiBoxImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;
	_name = "SuiListBox.menuItems";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<ManagedReference<SuiListBoxMenuItem* > > >::toBinaryStream(&menuItems, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SuiListBox.type";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&type, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SuiListBox.next";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&next, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SuiListBox.previous";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&previous, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 4;
}

SuiListBoxImplementation::SuiListBoxImplementation(CreatureObject* player, unsigned int windowType, unsigned int listBoxType) : SuiBoxImplementation(player, windowType, SuiBox::LISTBOX) {
	_initializeImplementation();
	// server/zone/objects/player/sui/listbox/SuiListBox.idl():  		type = listBoxType;
	type = listBoxType;
	// server/zone/objects/player/sui/listbox/SuiListBox.idl():  		init();
	init();
}

void SuiListBoxImplementation::init() {
	// server/zone/objects/player/sui/listbox/SuiListBox.idl():  		next = 0;
	next = 0;
	// server/zone/objects/player/sui/listbox/SuiListBox.idl():  		previous = 0;
	previous = 0;
}

String SuiListBoxImplementation::getMenuItemName(int index) {
	// server/zone/objects/player/sui/listbox/SuiListBox.idl():  		SuiListBoxMenuItem menuItem = menuItems.get(index);
	ManagedReference<SuiListBoxMenuItem* > menuItem = (&menuItems)->get(index);
	// server/zone/objects/player/sui/listbox/SuiListBox.idl():  		return menuItem.getOptionName();
	return menuItem->getOptionName();
}

void SuiListBoxImplementation::removeAllMenuItems() {
	// server/zone/objects/player/sui/listbox/SuiListBox.idl():  		menuItems.removeAll();
	(&menuItems)->removeAll();
}

unsigned long long SuiListBoxImplementation::getMenuObjectID(unsigned int idx) {
	// server/zone/objects/player/sui/listbox/SuiListBox.idl():  		return 
	if (idx < (&menuItems)->size()){
	// server/zone/objects/player/sui/listbox/SuiListBox.idl():  			SuiListBoxMenuItem menuItem = menuItems.get(idx);
	ManagedReference<SuiListBoxMenuItem* > menuItem = (&menuItems)->get(idx);
	// server/zone/objects/player/sui/listbox/SuiListBox.idl():  		}
	if (menuItem != NULL)	// server/zone/objects/player/sui/listbox/SuiListBox.idl():  				return menuItem.getObjectID();
	return menuItem->getObjectID();
}
	// server/zone/objects/player/sui/listbox/SuiListBox.idl():  		return 0;
	return 0;
}

int SuiListBoxImplementation::getMenuSize() {
	// server/zone/objects/player/sui/listbox/SuiListBox.idl():  		return menuItems.size();
	return (&menuItems)->size();
}

void SuiListBoxImplementation::setNextBox(unsigned int boxID) {
	// server/zone/objects/player/sui/listbox/SuiListBox.idl():  		next = boxID;
	next = boxID;
}

void SuiListBoxImplementation::setPreviousBox(unsigned int boxID) {
	// server/zone/objects/player/sui/listbox/SuiListBox.idl():  		previous = boxID;
	previous = boxID;
}

unsigned long long SuiListBoxImplementation::getNextBox() {
	// server/zone/objects/player/sui/listbox/SuiListBox.idl():  		return next;
	return next;
}

unsigned long long SuiListBoxImplementation::getPreviousBox() {
	// server/zone/objects/player/sui/listbox/SuiListBox.idl():  		return previous;
	return previous;
}

bool SuiListBoxImplementation::isListBox() {
	// server/zone/objects/player/sui/listbox/SuiListBox.idl():  		return true;
	return true;
}

/*
 *	SuiListBoxAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


SuiListBoxAdapter::SuiListBoxAdapter(SuiListBox* obj) : SuiBoxAdapter(obj) {
}

void SuiListBoxAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INIT__:
		{
			init();
		}
		break;
	case RPC_ADDMENUITEM__STRING_LONG_:
		{
			String name; 
			addMenuItem(inv->getAsciiParameter(name), inv->getUnsignedLongParameter());
		}
		break;
	case RPC_GETMENUITEMNAME__INT_:
		{
			resp->insertAscii(getMenuItemName(inv->getSignedIntParameter()));
		}
		break;
	case RPC_REMOVEALLMENUITEMS__:
		{
			removeAllMenuItems();
		}
		break;
	case RPC_GETMENUOBJECTID__INT_:
		{
			resp->insertLong(getMenuObjectID(inv->getUnsignedIntParameter()));
		}
		break;
	case RPC_GETMENUSIZE__:
		{
			resp->insertSignedInt(getMenuSize());
		}
		break;
	case RPC_GENERATEMESSAGE__:
		{
			resp->insertLong(generateMessage()->_getObjectID());
		}
		break;
	case RPC_SETNEXTBOX__INT_:
		{
			setNextBox(inv->getUnsignedIntParameter());
		}
		break;
	case RPC_SETPREVIOUSBOX__INT_:
		{
			setPreviousBox(inv->getUnsignedIntParameter());
		}
		break;
	case RPC_GETNEXTBOX__:
		{
			resp->insertLong(getNextBox());
		}
		break;
	case RPC_GETPREVIOUSBOX__:
		{
			resp->insertLong(getPreviousBox());
		}
		break;
	case RPC_ISLISTBOX__:
		{
			resp->insertBoolean(isListBox());
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void SuiListBoxAdapter::init() {
	(static_cast<SuiListBox*>(stub))->init();
}

void SuiListBoxAdapter::addMenuItem(const String& name, unsigned long long objectID) {
	(static_cast<SuiListBox*>(stub))->addMenuItem(name, objectID);
}

String SuiListBoxAdapter::getMenuItemName(int index) {
	return (static_cast<SuiListBox*>(stub))->getMenuItemName(index);
}

void SuiListBoxAdapter::removeAllMenuItems() {
	(static_cast<SuiListBox*>(stub))->removeAllMenuItems();
}

unsigned long long SuiListBoxAdapter::getMenuObjectID(unsigned int idx) {
	return (static_cast<SuiListBox*>(stub))->getMenuObjectID(idx);
}

int SuiListBoxAdapter::getMenuSize() {
	return (static_cast<SuiListBox*>(stub))->getMenuSize();
}

BaseMessage* SuiListBoxAdapter::generateMessage() {
	return (static_cast<SuiListBox*>(stub))->generateMessage();
}

void SuiListBoxAdapter::setNextBox(unsigned int boxID) {
	(static_cast<SuiListBox*>(stub))->setNextBox(boxID);
}

void SuiListBoxAdapter::setPreviousBox(unsigned int boxID) {
	(static_cast<SuiListBox*>(stub))->setPreviousBox(boxID);
}

unsigned long long SuiListBoxAdapter::getNextBox() {
	return (static_cast<SuiListBox*>(stub))->getNextBox();
}

unsigned long long SuiListBoxAdapter::getPreviousBox() {
	return (static_cast<SuiListBox*>(stub))->getPreviousBox();
}

bool SuiListBoxAdapter::isListBox() {
	return (static_cast<SuiListBox*>(stub))->isListBox();
}

/*
 *	SuiListBoxHelper
 */

SuiListBoxHelper* SuiListBoxHelper::staticInitializer = SuiListBoxHelper::instance();

SuiListBoxHelper::SuiListBoxHelper() {
	className = "SuiListBox";

	Core::getObjectBroker()->registerClass(className, this);
}

void SuiListBoxHelper::finalizeHelper() {
	SuiListBoxHelper::finalize();
}

DistributedObject* SuiListBoxHelper::instantiateObject() {
	return new SuiListBox(DummyConstructorParameter::instance());
}

DistributedObjectServant* SuiListBoxHelper::instantiateServant() {
	return new SuiListBoxImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* SuiListBoxHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SuiListBoxAdapter(static_cast<SuiListBox*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

