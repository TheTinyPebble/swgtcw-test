/*
 *	server/zone/objects/player/sui/listbox/resourcedeedlistbox/ResourceDeedListBox.cpp generated by engine3 IDL compiler 0.60
 */

#include "ResourceDeedListBox.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

/*
 *	ResourceDeedListBoxStub
 */

ResourceDeedListBox::ResourceDeedListBox(PlayerCreature* player, unsigned int windowType, unsigned int listBoxType) : SuiListBox(DummyConstructorParameter::instance()) {
	_impl = new ResourceDeedListBoxImplementation(player, windowType, listBoxType);
	_impl->_setStub(this);
}

ResourceDeedListBox::ResourceDeedListBox(DummyConstructorParameter* param) : SuiListBox(param) {
}

ResourceDeedListBox::~ResourceDeedListBox() {
}


void ResourceDeedListBox::initializeTransientMembers() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((ResourceDeedListBoxImplementation*) _impl)->initializeTransientMembers();
}

void ResourceDeedListBox::addBox(const String& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		((ResourceDeedListBoxImplementation*) _impl)->addBox(name);
}

int ResourceDeedListBox::getBoxCount() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		return method.executeWithSignedIntReturn();
	} else
		return ((ResourceDeedListBoxImplementation*) _impl)->getBoxCount();
}

String ResourceDeedListBox::getBox(int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addSignedIntParameter(index);

		method.executeWithAsciiReturn(_return_getBox);
		return _return_getBox;
	} else
		return ((ResourceDeedListBoxImplementation*) _impl)->getBox(index);
}

void ResourceDeedListBox::removeBox() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		method.executeWithVoidReturn();
	} else
		((ResourceDeedListBoxImplementation*) _impl)->removeBox();
}

String ResourceDeedListBox::getCurrentBox() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		method.executeWithAsciiReturn(_return_getCurrentBox);
		return _return_getCurrentBox;
	} else
		return ((ResourceDeedListBoxImplementation*) _impl)->getCurrentBox();
}

String ResourceDeedListBox::getPreviousBox() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		method.executeWithAsciiReturn(_return_getPreviousBox);
		return _return_getPreviousBox;
	} else
		return ((ResourceDeedListBoxImplementation*) _impl)->getPreviousBox();
}

/*
 *	ResourceDeedListBoxImplementation
 */

ResourceDeedListBoxImplementation::ResourceDeedListBoxImplementation(DummyConstructorParameter* param) : SuiListBoxImplementation(param) {
	_initializeImplementation();
}


ResourceDeedListBoxImplementation::~ResourceDeedListBoxImplementation() {
	ResourceDeedListBoxImplementation::finalize();
}


void ResourceDeedListBoxImplementation::_initializeImplementation() {
	_setClassHelper(ResourceDeedListBoxHelper::instance());

	_serializationHelperMethod();
}

void ResourceDeedListBoxImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (ResourceDeedListBox*) stub;
	SuiListBoxImplementation::_setStub(stub);
}

DistributedObjectStub* ResourceDeedListBoxImplementation::_getStub() {
	return _this;
}

ResourceDeedListBoxImplementation::operator const ResourceDeedListBox*() {
	return _this;
}

void ResourceDeedListBoxImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void ResourceDeedListBoxImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void ResourceDeedListBoxImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void ResourceDeedListBoxImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void ResourceDeedListBoxImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void ResourceDeedListBoxImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void ResourceDeedListBoxImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void ResourceDeedListBoxImplementation::_serializationHelperMethod() {
	SuiListBoxImplementation::_serializationHelperMethod();

	_setClassName("ResourceDeedListBox");

}

ResourceDeedListBoxImplementation::ResourceDeedListBoxImplementation(PlayerCreature* player, unsigned int windowType, unsigned int listBoxType) : SuiListBoxImplementation(player, windowType, SuiBox::LISTBOX) {
	_initializeImplementation();
}

void ResourceDeedListBoxImplementation::addBox(const String& name) {
	// server/zone/objects/player/sui/listbox/resourcedeedlistbox/ResourceDeedListBox.idl(67):  		boxes.add(name);
	(&boxes)->add(name);
}

int ResourceDeedListBoxImplementation::getBoxCount() {
	// server/zone/objects/player/sui/listbox/resourcedeedlistbox/ResourceDeedListBox.idl(71):  		return boxes.size();
	return (&boxes)->size();
}

String ResourceDeedListBoxImplementation::getBox(int index) {
	// server/zone/objects/player/sui/listbox/resourcedeedlistbox/ResourceDeedListBox.idl(75):  		return boxes.get(index);
	return (&boxes)->get(index);
}

String ResourceDeedListBoxImplementation::getCurrentBox() {
	// server/zone/objects/player/sui/listbox/resourcedeedlistbox/ResourceDeedListBox.idl(81):  		return boxes.get(boxes.size() - 1);
	return (&boxes)->get((&boxes)->size() - 1);
}

/*
 *	ResourceDeedListBoxAdapter
 */

ResourceDeedListBoxAdapter::ResourceDeedListBoxAdapter(ResourceDeedListBoxImplementation* obj) : SuiListBoxAdapter(obj) {
}

Packet* ResourceDeedListBoxAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		finalize();
		break;
	case 7:
		initializeTransientMembers();
		break;
	case 8:
		addBox(inv->getAsciiParameter(_param0_addBox__String_));
		break;
	case 9:
		resp->insertSignedInt(getBoxCount());
		break;
	case 10:
		resp->insertAscii(getBox(inv->getSignedIntParameter()));
		break;
	case 11:
		removeBox();
		break;
	case 12:
		resp->insertAscii(getCurrentBox());
		break;
	case 13:
		resp->insertAscii(getPreviousBox());
		break;
	default:
		return NULL;
	}

	return resp;
}

void ResourceDeedListBoxAdapter::finalize() {
	((ResourceDeedListBoxImplementation*) impl)->finalize();
}

void ResourceDeedListBoxAdapter::initializeTransientMembers() {
	((ResourceDeedListBoxImplementation*) impl)->initializeTransientMembers();
}

void ResourceDeedListBoxAdapter::addBox(const String& name) {
	((ResourceDeedListBoxImplementation*) impl)->addBox(name);
}

int ResourceDeedListBoxAdapter::getBoxCount() {
	return ((ResourceDeedListBoxImplementation*) impl)->getBoxCount();
}

String ResourceDeedListBoxAdapter::getBox(int index) {
	return ((ResourceDeedListBoxImplementation*) impl)->getBox(index);
}

void ResourceDeedListBoxAdapter::removeBox() {
	((ResourceDeedListBoxImplementation*) impl)->removeBox();
}

String ResourceDeedListBoxAdapter::getCurrentBox() {
	return ((ResourceDeedListBoxImplementation*) impl)->getCurrentBox();
}

String ResourceDeedListBoxAdapter::getPreviousBox() {
	return ((ResourceDeedListBoxImplementation*) impl)->getPreviousBox();
}

/*
 *	ResourceDeedListBoxHelper
 */

ResourceDeedListBoxHelper* ResourceDeedListBoxHelper::staticInitializer = ResourceDeedListBoxHelper::instance();

ResourceDeedListBoxHelper::ResourceDeedListBoxHelper() {
	className = "ResourceDeedListBox";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void ResourceDeedListBoxHelper::finalizeHelper() {
	ResourceDeedListBoxHelper::finalize();
}

DistributedObject* ResourceDeedListBoxHelper::instantiateObject() {
	return new ResourceDeedListBox(DummyConstructorParameter::instance());
}

DistributedObjectServant* ResourceDeedListBoxHelper::instantiateServant() {
	return new ResourceDeedListBoxImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ResourceDeedListBoxHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ResourceDeedListBoxAdapter((ResourceDeedListBoxImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

