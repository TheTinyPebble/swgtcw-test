/*
 *	server/zone/objects/player/sui/SuiBox.cpp generated by engine3 IDL compiler 0.60
 */

#include "SuiBox.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/player/PlayerObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	SuiBoxStub
 */

enum {RPC_INITIALIZE__ = 6,RPC_FINALIZE__,RPC_INITIALIZETRANSIENTMEMBERS__,RPC_GENERATEHEADER__SUICREATEPAGEMESSAGE_,RPC_GENERATEBODY__SUICREATEPAGEMESSAGE_,RPC_GENERATEFOOTER__SUICREATEPAGEMESSAGE_INT_,RPC_GENERATEMESSAGE__,RPC_GENERATECLOSEMESSAGE__,RPC_ADDSETTING__STRING_STRING_STRING_STRING_,RPC_ADDHEADER__STRING_STRING_,RPC_CLEAROPTIONS__,RPC_COMPARETO__SUIBOX_,RPC_HASGENERATEDMESSAGE__,RPC_SETPROMPTTITLE__STRING_,RPC_SETPROMPTTEXT__STRING_,RPC_GETPROMPTTITLE__,RPC_SETHANDLERTEXT__STRING_,RPC_SETWINDOWTYPE__INT_,RPC_SETBOXTYPE__INT_,RPC_ISINPUTBOX__,RPC_ISLISTBOX__,RPC_ISMESSAGEBOX__,RPC_ISTRANSFERBOX__,RPC_ISBANKTRANSFERBOX__,RPC_ISSLICINGBOX__,RPC_ISCHARACTERBUILDERBOX__,RPC_ISCOLORPICKER__,RPC_SETCANCELBUTTON__BOOL_STRING_,RPC_SETOTHERBUTTON__BOOL_STRING_,RPC_SETOKBUTTON__BOOL_STRING_,RPC_SETFORCECLOSEDISTANCE__FLOAT_,RPC_SETFORCECLOSEDISABLED__,RPC_GETPLAYER__,RPC_GETBOXID__,RPC_GETWINDOWTYPE__,RPC_GETUSINGOBJECT__,RPC_SETUSINGOBJECT__SCENEOBJECT_,};

SuiBox::SuiBox(CreatureObject* play, unsigned int windowtype, unsigned int boxtype) : ManagedObject(DummyConstructorParameter::instance()) {
	SuiBoxImplementation* _implementation = new SuiBoxImplementation(play, windowtype, boxtype);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("SuiBox");
}

SuiBox::SuiBox(DummyConstructorParameter* param) : ManagedObject(param) {
	_setClassName("SuiBox");
}

SuiBox::~SuiBox() {
}



void SuiBox::initialize() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZE__);

		method.executeWithVoidReturn();
	} else
		_implementation->initialize();
}

void SuiBox::initializeTransientMembers() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void SuiBox::generateHeader(SuiCreatePageMessage* message) {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GENERATEHEADER__SUICREATEPAGEMESSAGE_);
		method.addObjectParameter(message);

		method.executeWithVoidReturn();
	} else
		_implementation->generateHeader(message);
}

void SuiBox::generateBody(SuiCreatePageMessage* message) {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GENERATEBODY__SUICREATEPAGEMESSAGE_);
		method.addObjectParameter(message);

		method.executeWithVoidReturn();
	} else
		_implementation->generateBody(message);
}

void SuiBox::generateFooter(SuiCreatePageMessage* message, int type) {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GENERATEFOOTER__SUICREATEPAGEMESSAGE_INT_);
		method.addObjectParameter(message);
		method.addSignedIntParameter(type);

		method.executeWithVoidReturn();
	} else
		_implementation->generateFooter(message, type);
}

BaseMessage* SuiBox::generateMessage() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GENERATEMESSAGE__);

		return static_cast<BaseMessage*>(method.executeWithObjectReturn());
	} else
		return _implementation->generateMessage();
}

BaseMessage* SuiBox::generateCloseMessage() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GENERATECLOSEMESSAGE__);

		return static_cast<BaseMessage*>(method.executeWithObjectReturn());
	} else
		return _implementation->generateCloseMessage();
}

void SuiBox::addSetting(const String& optType, const String& variable, const String& setting, const String& value) {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDSETTING__STRING_STRING_STRING_STRING_);
		method.addAsciiParameter(optType);
		method.addAsciiParameter(variable);
		method.addAsciiParameter(setting);
		method.addAsciiParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->addSetting(optType, variable, setting, value);
}

void SuiBox::addHeader(const String& variable, const String& type) {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDHEADER__STRING_STRING_);
		method.addAsciiParameter(variable);
		method.addAsciiParameter(type);

		method.executeWithVoidReturn();
	} else
		_implementation->addHeader(variable, type);
}

void SuiBox::clearOptions() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLEAROPTIONS__);

		method.executeWithVoidReturn();
	} else
		_implementation->clearOptions();
}

int SuiBox::compareTo(SuiBox* obj) {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_COMPARETO__SUIBOX_);
		method.addObjectParameter(obj);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->compareTo(obj);
}

bool SuiBox::hasGeneratedMessage() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASGENERATEDMESSAGE__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasGeneratedMessage();
}

void SuiBox::setPromptTitle(const String& name) {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPROMPTTITLE__STRING_);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		_implementation->setPromptTitle(name);
}

void SuiBox::setPromptText(const String& name) {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPROMPTTEXT__STRING_);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		_implementation->setPromptText(name);
}

String SuiBox::getPromptTitle() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPROMPTTITLE__);

		String _return_getPromptTitle;
		method.executeWithAsciiReturn(_return_getPromptTitle);
		return _return_getPromptTitle;
	} else
		return _implementation->getPromptTitle();
}

void SuiBox::setHandlerText(const String& text) {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETHANDLERTEXT__STRING_);
		method.addAsciiParameter(text);

		method.executeWithVoidReturn();
	} else
		_implementation->setHandlerText(text);
}

void SuiBox::setWindowType(unsigned int type) {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETWINDOWTYPE__INT_);
		method.addUnsignedIntParameter(type);

		method.executeWithVoidReturn();
	} else
		_implementation->setWindowType(type);
}

void SuiBox::setBoxType(int type) {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETBOXTYPE__INT_);
		method.addSignedIntParameter(type);

		method.executeWithVoidReturn();
	} else
		_implementation->setBoxType(type);
}

bool SuiBox::isInputBox() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISINPUTBOX__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isInputBox();
}

bool SuiBox::isListBox() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISLISTBOX__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isListBox();
}

bool SuiBox::isMessageBox() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISMESSAGEBOX__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isMessageBox();
}

bool SuiBox::isTransferBox() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISTRANSFERBOX__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isTransferBox();
}

bool SuiBox::isBankTransferBox() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISBANKTRANSFERBOX__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isBankTransferBox();
}

bool SuiBox::isSlicingBox() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSLICINGBOX__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isSlicingBox();
}

bool SuiBox::isCharacterBuilderBox() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCHARACTERBUILDERBOX__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isCharacterBuilderBox();
}

bool SuiBox::isColorPicker() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCOLORPICKER__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isColorPicker();
}

void SuiBox::setCancelButton(bool value, const String& cancelText) {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCANCELBUTTON__BOOL_STRING_);
		method.addBooleanParameter(value);
		method.addAsciiParameter(cancelText);

		method.executeWithVoidReturn();
	} else
		_implementation->setCancelButton(value, cancelText);
}

void SuiBox::setOtherButton(bool value, const String& backText) {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETOTHERBUTTON__BOOL_STRING_);
		method.addBooleanParameter(value);
		method.addAsciiParameter(backText);

		method.executeWithVoidReturn();
	} else
		_implementation->setOtherButton(value, backText);
}

void SuiBox::setOkButton(bool value, const String& okText) {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETOKBUTTON__BOOL_STRING_);
		method.addBooleanParameter(value);
		method.addAsciiParameter(okText);

		method.executeWithVoidReturn();
	} else
		_implementation->setOkButton(value, okText);
}

void SuiBox::setForceCloseDistance(float dist) {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETFORCECLOSEDISTANCE__FLOAT_);
		method.addFloatParameter(dist);

		method.executeWithVoidReturn();
	} else
		_implementation->setForceCloseDistance(dist);
}

void SuiBox::setForceCloseDisabled() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETFORCECLOSEDISABLED__);

		method.executeWithVoidReturn();
	} else
		_implementation->setForceCloseDisabled();
}

ManagedWeakReference<CreatureObject* > SuiBox::getPlayer() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPLAYER__);

		return static_cast<CreatureObject*>(method.executeWithObjectReturn());
	} else
		return _implementation->getPlayer();
}

unsigned int SuiBox::getBoxID() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETBOXID__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getBoxID();
}

int SuiBox::getWindowType() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETWINDOWTYPE__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getWindowType();
}

ManagedWeakReference<SceneObject* > SuiBox::getUsingObject() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETUSINGOBJECT__);

		return static_cast<SceneObject*>(method.executeWithObjectReturn());
	} else
		return _implementation->getUsingObject();
}

void SuiBox::setUsingObject(SceneObject* object) {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETUSINGOBJECT__SCENEOBJECT_);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		_implementation->setUsingObject(object);
}

void SuiBox::setCallback(SuiCallback* callback) {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->setCallback(callback);
}

SuiCallback* SuiBox::getCallback() {
	SuiBoxImplementation* _implementation = static_cast<SuiBoxImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getCallback();
}

DistributedObjectServant* SuiBox::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

void SuiBox::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	SuiBoxImplementation
 */

SuiBoxImplementation::SuiBoxImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}


SuiBoxImplementation::~SuiBoxImplementation() {
	SuiBoxImplementation::finalize();
}


void SuiBoxImplementation::_initializeImplementation() {
	_setClassHelper(SuiBoxHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void SuiBoxImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<SuiBox*>(stub);
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* SuiBoxImplementation::_getStub() {
	return _this.get();
}

SuiBoxImplementation::operator const SuiBox*() {
	return _this.get();
}

void SuiBoxImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void SuiBoxImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void SuiBoxImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void SuiBoxImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void SuiBoxImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void SuiBoxImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void SuiBoxImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void SuiBoxImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("SuiBox");

}

void SuiBoxImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(SuiBoxImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool SuiBoxImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ManagedObjectImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "SuiBox.player") {
		TypeInfo<ManagedWeakReference<CreatureObject* > >::parseFromBinaryStream(&player, stream);
		return true;
	}

	if (_name == "SuiBox.suiCallback") {
		TypeInfo<Reference<SuiCallback* > >::parseFromBinaryStream(&suiCallback, stream);
		return true;
	}

	if (_name == "SuiBox.boxID") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&boxID, stream);
		return true;
	}

	if (_name == "SuiBox.usingObject") {
		TypeInfo<ManagedWeakReference<SceneObject* > >::parseFromBinaryStream(&usingObject, stream);
		return true;
	}

	if (_name == "SuiBox.handlerStr") {
		TypeInfo<String >::parseFromBinaryStream(&handlerStr, stream);
		return true;
	}

	if (_name == "SuiBox.cancelButtonText") {
		TypeInfo<String >::parseFromBinaryStream(&cancelButtonText, stream);
		return true;
	}

	if (_name == "SuiBox.cancelButton") {
		TypeInfo<bool >::parseFromBinaryStream(&cancelButton, stream);
		return true;
	}

	if (_name == "SuiBox.okButtonText") {
		TypeInfo<String >::parseFromBinaryStream(&okButtonText, stream);
		return true;
	}

	if (_name == "SuiBox.okButton") {
		TypeInfo<bool >::parseFromBinaryStream(&okButton, stream);
		return true;
	}

	if (_name == "SuiBox.otherButtonText") {
		TypeInfo<String >::parseFromBinaryStream(&otherButtonText, stream);
		return true;
	}

	if (_name == "SuiBox.otherButton") {
		TypeInfo<bool >::parseFromBinaryStream(&otherButton, stream);
		return true;
	}

	if (_name == "SuiBox.promptTitle") {
		TypeInfo<String >::parseFromBinaryStream(&promptTitle, stream);
		return true;
	}

	if (_name == "SuiBox.promptText") {
		TypeInfo<String >::parseFromBinaryStream(&promptText, stream);
		return true;
	}

	if (_name == "SuiBox.boxType") {
		TypeInfo<int >::parseFromBinaryStream(&boxType, stream);
		return true;
	}

	if (_name == "SuiBox.windowType") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&windowType, stream);
		return true;
	}

	if (_name == "SuiBox.forceCloseDistance") {
		TypeInfo<float >::parseFromBinaryStream(&forceCloseDistance, stream);
		return true;
	}

	if (_name == "SuiBox.headerSets") {
		TypeInfo<Vector<String> >::parseFromBinaryStream(&headerSets, stream);
		return true;
	}

	if (_name == "SuiBox.optionSets") {
		TypeInfo<Vector<String> >::parseFromBinaryStream(&optionSets, stream);
		return true;
	}

	if (_name == "SuiBox.hdrOptCount") {
		TypeInfo<int >::parseFromBinaryStream(&hdrOptCount, stream);
		return true;
	}

	if (_name == "SuiBox.hasGenerated") {
		TypeInfo<bool >::parseFromBinaryStream(&hasGenerated, stream);
		return true;
	}


	return false;
}

void SuiBoxImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = SuiBoxImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int SuiBoxImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedObjectImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;
	_name = "SuiBox.player";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<CreatureObject* > >::toBinaryStream(&player, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SuiBox.suiCallback";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Reference<SuiCallback* > >::toBinaryStream(&suiCallback, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SuiBox.boxID";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&boxID, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SuiBox.usingObject";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<SceneObject* > >::toBinaryStream(&usingObject, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SuiBox.handlerStr";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&handlerStr, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SuiBox.cancelButtonText";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&cancelButtonText, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SuiBox.cancelButton";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&cancelButton, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SuiBox.okButtonText";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&okButtonText, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SuiBox.okButton";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&okButton, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SuiBox.otherButtonText";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&otherButtonText, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SuiBox.otherButton";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&otherButton, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SuiBox.promptTitle";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&promptTitle, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SuiBox.promptText";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&promptText, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SuiBox.boxType";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&boxType, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SuiBox.windowType";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&windowType, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SuiBox.forceCloseDistance";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&forceCloseDistance, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SuiBox.headerSets";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<String> >::toBinaryStream(&headerSets, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SuiBox.optionSets";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<String> >::toBinaryStream(&optionSets, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SuiBox.hdrOptCount";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&hdrOptCount, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SuiBox.hasGenerated";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&hasGenerated, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 20;
}

SuiBoxImplementation::SuiBoxImplementation(CreatureObject* play, unsigned int windowtype, unsigned int boxtype) {
	_initializeImplementation();
	// server/zone/objects/player/sui/SuiBox.idl():  		player = play;
	player = play;
	// server/zone/objects/player/sui/SuiBox.idl():  		forceCloseDistance = 32;
	forceCloseDistance = 32;
	// server/zone/objects/player/sui/SuiBox.idl():  		boxType = boxtype;
	boxType = boxtype;
	// server/zone/objects/player/sui/SuiBox.idl():  		windowType = windowtype;
	windowType = windowtype;
	// server/zone/objects/player/sui/SuiBox.idl():  		initialize();
	initialize();
}

void SuiBoxImplementation::initialize() {
	// server/zone/objects/player/sui/SuiBox.idl():  		Logger.setLoggingName("SuiBox");
	Logger::setLoggingName("SuiBox");
	// server/zone/objects/player/sui/SuiBox.idl():  		PlayerObject ghost = player.getPlayerObject();
	ManagedReference<PlayerObject* > ghost = player.get()->getPlayerObject();
	// server/zone/objects/player/sui/SuiBox.idl():  		boxID = ghost.getNewSuiBoxID(windowType);
	boxID = ghost->getNewSuiBoxID(windowType);
	// server/zone/objects/player/sui/SuiBox.idl():  		handlerStr = "msgSelected";
	handlerStr = "msgSelected";
	// server/zone/objects/player/sui/SuiBox.idl():  		cancelButtonText = "@cancel";
	cancelButtonText = "@cancel";
	// server/zone/objects/player/sui/SuiBox.idl():  		cancelButton = false;
	cancelButton = false;
	// server/zone/objects/player/sui/SuiBox.idl():  		otherButtonText = "@back";
	otherButtonText = "@back";
	// server/zone/objects/player/sui/SuiBox.idl():  		otherButton = false;
	otherButton = false;
	// server/zone/objects/player/sui/SuiBox.idl():  		okButtonText = "@ok";
	okButtonText = "@ok";
	// server/zone/objects/player/sui/SuiBox.idl():  		okButton = true;
	okButton = true;
	// server/zone/objects/player/sui/SuiBox.idl():  		hdrOptCount = 0;
	hdrOptCount = 0;
	// server/zone/objects/player/sui/SuiBox.idl():  		hasGenerated = false;
	hasGenerated = false;
	// server/zone/objects/player/sui/SuiBox.idl():  		suiCallback = null;
	suiCallback = NULL;
}

void SuiBoxImplementation::finalize() {
}

void SuiBoxImplementation::initializeTransientMembers() {
	// server/zone/objects/player/sui/SuiBox.idl():  		super.initializeTransientMembers();
	ManagedObjectImplementation::initializeTransientMembers();
}

BaseMessage* SuiBoxImplementation::generateMessage() {
	// server/zone/objects/player/sui/SuiBox.idl():  		return null;
	return NULL;
}

void SuiBoxImplementation::clearOptions() {
	// server/zone/objects/player/sui/SuiBox.idl():  		headerSets.removeAll();
	(&headerSets)->removeAll();
	// server/zone/objects/player/sui/SuiBox.idl():  		hdrOptCount = 0;
	hdrOptCount = 0;
	// server/zone/objects/player/sui/SuiBox.idl():  		optionSets.removeAll();
	(&optionSets)->removeAll();
}

int SuiBoxImplementation::compareTo(SuiBox* obj) {
	// server/zone/objects/player/sui/SuiBox.idl():  		unsigned int id = obj.getBoxID();
	unsigned int id = obj->getBoxID();
	// server/zone/objects/player/sui/SuiBox.idl():  			return 0;
	if (boxID < id)	// server/zone/objects/player/sui/SuiBox.idl():  			return 1;
	return 1;

	else 	// server/zone/objects/player/sui/SuiBox.idl():  			return 0;
	if (boxID > id)	// server/zone/objects/player/sui/SuiBox.idl():  			return -1;
	return -1;

	else 	// server/zone/objects/player/sui/SuiBox.idl():  			return 0;
	return 0;
}

bool SuiBoxImplementation::hasGeneratedMessage() {
	// server/zone/objects/player/sui/SuiBox.idl():  		return hasGenerated;
	return hasGenerated;
}

void SuiBoxImplementation::setPromptTitle(const String& name) {
	// server/zone/objects/player/sui/SuiBox.idl():  		promptTitle = name;
	promptTitle = name;
}

void SuiBoxImplementation::setPromptText(const String& name) {
	// server/zone/objects/player/sui/SuiBox.idl():  		promptText = name;
	promptText = name;
}

String SuiBoxImplementation::getPromptTitle() {
	// server/zone/objects/player/sui/SuiBox.idl():  		return promptTitle;
	return promptTitle;
}

void SuiBoxImplementation::setHandlerText(const String& text) {
	// server/zone/objects/player/sui/SuiBox.idl():  		handlerStr = text;
	handlerStr = text;
}

void SuiBoxImplementation::setWindowType(unsigned int type) {
	// server/zone/objects/player/sui/SuiBox.idl():  		windowType = type;
	windowType = type;
}

void SuiBoxImplementation::setBoxType(int type) {
	// server/zone/objects/player/sui/SuiBox.idl():  		boxType = type;
	boxType = type;
}

bool SuiBoxImplementation::isInputBox() {
	// server/zone/objects/player/sui/SuiBox.idl():  		return false;
	return false;
}

bool SuiBoxImplementation::isListBox() {
	// server/zone/objects/player/sui/SuiBox.idl():  		return false;
	return false;
}

bool SuiBoxImplementation::isMessageBox() {
	// server/zone/objects/player/sui/SuiBox.idl():  		return false;
	return false;
}

bool SuiBoxImplementation::isTransferBox() {
	// server/zone/objects/player/sui/SuiBox.idl():  		return false;
	return false;
}

bool SuiBoxImplementation::isBankTransferBox() {
	// server/zone/objects/player/sui/SuiBox.idl():  		return false;
	return false;
}

bool SuiBoxImplementation::isSlicingBox() {
	// server/zone/objects/player/sui/SuiBox.idl():  		return false;
	return false;
}

bool SuiBoxImplementation::isCharacterBuilderBox() {
	// server/zone/objects/player/sui/SuiBox.idl():  		return false;
	return false;
}

bool SuiBoxImplementation::isColorPicker() {
	// server/zone/objects/player/sui/SuiBox.idl():  		return false;
	return false;
}

ManagedWeakReference<CreatureObject* > SuiBoxImplementation::getPlayer() {
	// server/zone/objects/player/sui/SuiBox.idl():  		return player;
	return player;
}

unsigned int SuiBoxImplementation::getBoxID() {
	// server/zone/objects/player/sui/SuiBox.idl():  		return boxID;
	return boxID;
}

int SuiBoxImplementation::getWindowType() {
	// server/zone/objects/player/sui/SuiBox.idl():  		return windowType;
	return windowType;
}

ManagedWeakReference<SceneObject* > SuiBoxImplementation::getUsingObject() {
	// server/zone/objects/player/sui/SuiBox.idl():  		return usingObject;
	return usingObject;
}

void SuiBoxImplementation::setUsingObject(SceneObject* object) {
	// server/zone/objects/player/sui/SuiBox.idl():  		usingObject = object;
	usingObject = object;
}

void SuiBoxImplementation::setCallback(SuiCallback* callback) {
	// server/zone/objects/player/sui/SuiBox.idl():  		suiCallback = callback;
	suiCallback = callback;
}

SuiCallback* SuiBoxImplementation::getCallback() {
	// server/zone/objects/player/sui/SuiBox.idl():  		return suiCallback;
	return suiCallback;
}

/*
 *	SuiBoxAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


SuiBoxAdapter::SuiBoxAdapter(SuiBox* obj) : ManagedObjectAdapter(obj) {
}

void SuiBoxAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZE__:
		{
			initialize();
		}
		break;
	case RPC_FINALIZE__:
		{
			finalize();
		}
		break;
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			initializeTransientMembers();
		}
		break;
	case RPC_GENERATEHEADER__SUICREATEPAGEMESSAGE_:
		{
			generateHeader(static_cast<SuiCreatePageMessage*>(inv->getObjectParameter()));
		}
		break;
	case RPC_GENERATEBODY__SUICREATEPAGEMESSAGE_:
		{
			generateBody(static_cast<SuiCreatePageMessage*>(inv->getObjectParameter()));
		}
		break;
	case RPC_GENERATEFOOTER__SUICREATEPAGEMESSAGE_INT_:
		{
			generateFooter(static_cast<SuiCreatePageMessage*>(inv->getObjectParameter()), inv->getSignedIntParameter());
		}
		break;
	case RPC_GENERATEMESSAGE__:
		{
			resp->insertLong(generateMessage()->_getObjectID());
		}
		break;
	case RPC_GENERATECLOSEMESSAGE__:
		{
			resp->insertLong(generateCloseMessage()->_getObjectID());
		}
		break;
	case RPC_ADDSETTING__STRING_STRING_STRING_STRING_:
		{
			String optType; String variable; String setting; String value; 
			addSetting(inv->getAsciiParameter(optType), inv->getAsciiParameter(variable), inv->getAsciiParameter(setting), inv->getAsciiParameter(value));
		}
		break;
	case RPC_ADDHEADER__STRING_STRING_:
		{
			String variable; String type; 
			addHeader(inv->getAsciiParameter(variable), inv->getAsciiParameter(type));
		}
		break;
	case RPC_CLEAROPTIONS__:
		{
			clearOptions();
		}
		break;
	case RPC_COMPARETO__SUIBOX_:
		{
			resp->insertSignedInt(compareTo(static_cast<SuiBox*>(inv->getObjectParameter())));
		}
		break;
	case RPC_HASGENERATEDMESSAGE__:
		{
			resp->insertBoolean(hasGeneratedMessage());
		}
		break;
	case RPC_SETPROMPTTITLE__STRING_:
		{
			String name; 
			setPromptTitle(inv->getAsciiParameter(name));
		}
		break;
	case RPC_SETPROMPTTEXT__STRING_:
		{
			String name; 
			setPromptText(inv->getAsciiParameter(name));
		}
		break;
	case RPC_GETPROMPTTITLE__:
		{
			resp->insertAscii(getPromptTitle());
		}
		break;
	case RPC_SETHANDLERTEXT__STRING_:
		{
			String text; 
			setHandlerText(inv->getAsciiParameter(text));
		}
		break;
	case RPC_SETWINDOWTYPE__INT_:
		{
			setWindowType(inv->getUnsignedIntParameter());
		}
		break;
	case RPC_SETBOXTYPE__INT_:
		{
			setBoxType(inv->getSignedIntParameter());
		}
		break;
	case RPC_ISINPUTBOX__:
		{
			resp->insertBoolean(isInputBox());
		}
		break;
	case RPC_ISLISTBOX__:
		{
			resp->insertBoolean(isListBox());
		}
		break;
	case RPC_ISMESSAGEBOX__:
		{
			resp->insertBoolean(isMessageBox());
		}
		break;
	case RPC_ISTRANSFERBOX__:
		{
			resp->insertBoolean(isTransferBox());
		}
		break;
	case RPC_ISBANKTRANSFERBOX__:
		{
			resp->insertBoolean(isBankTransferBox());
		}
		break;
	case RPC_ISSLICINGBOX__:
		{
			resp->insertBoolean(isSlicingBox());
		}
		break;
	case RPC_ISCHARACTERBUILDERBOX__:
		{
			resp->insertBoolean(isCharacterBuilderBox());
		}
		break;
	case RPC_ISCOLORPICKER__:
		{
			resp->insertBoolean(isColorPicker());
		}
		break;
	case RPC_SETCANCELBUTTON__BOOL_STRING_:
		{
			String cancelText; 
			setCancelButton(inv->getBooleanParameter(), inv->getAsciiParameter(cancelText));
		}
		break;
	case RPC_SETOTHERBUTTON__BOOL_STRING_:
		{
			String backText; 
			setOtherButton(inv->getBooleanParameter(), inv->getAsciiParameter(backText));
		}
		break;
	case RPC_SETOKBUTTON__BOOL_STRING_:
		{
			String okText; 
			setOkButton(inv->getBooleanParameter(), inv->getAsciiParameter(okText));
		}
		break;
	case RPC_SETFORCECLOSEDISTANCE__FLOAT_:
		{
			setForceCloseDistance(inv->getFloatParameter());
		}
		break;
	case RPC_SETFORCECLOSEDISABLED__:
		{
			setForceCloseDisabled();
		}
		break;
	case RPC_GETPLAYER__:
		{
			resp->insertLong(getPlayer().get()->_getObjectID());
		}
		break;
	case RPC_GETBOXID__:
		{
			resp->insertInt(getBoxID());
		}
		break;
	case RPC_GETWINDOWTYPE__:
		{
			resp->insertSignedInt(getWindowType());
		}
		break;
	case RPC_GETUSINGOBJECT__:
		{
			resp->insertLong(getUsingObject().get()->_getObjectID());
		}
		break;
	case RPC_SETUSINGOBJECT__SCENEOBJECT_:
		{
			setUsingObject(static_cast<SceneObject*>(inv->getObjectParameter()));
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void SuiBoxAdapter::initialize() {
	(static_cast<SuiBox*>(stub))->initialize();
}

void SuiBoxAdapter::finalize() {
	(static_cast<SuiBox*>(stub))->finalize();
}

void SuiBoxAdapter::initializeTransientMembers() {
	(static_cast<SuiBox*>(stub))->initializeTransientMembers();
}

void SuiBoxAdapter::generateHeader(SuiCreatePageMessage* message) {
	(static_cast<SuiBox*>(stub))->generateHeader(message);
}

void SuiBoxAdapter::generateBody(SuiCreatePageMessage* message) {
	(static_cast<SuiBox*>(stub))->generateBody(message);
}

void SuiBoxAdapter::generateFooter(SuiCreatePageMessage* message, int type) {
	(static_cast<SuiBox*>(stub))->generateFooter(message, type);
}

BaseMessage* SuiBoxAdapter::generateMessage() {
	return (static_cast<SuiBox*>(stub))->generateMessage();
}

BaseMessage* SuiBoxAdapter::generateCloseMessage() {
	return (static_cast<SuiBox*>(stub))->generateCloseMessage();
}

void SuiBoxAdapter::addSetting(const String& optType, const String& variable, const String& setting, const String& value) {
	(static_cast<SuiBox*>(stub))->addSetting(optType, variable, setting, value);
}

void SuiBoxAdapter::addHeader(const String& variable, const String& type) {
	(static_cast<SuiBox*>(stub))->addHeader(variable, type);
}

void SuiBoxAdapter::clearOptions() {
	(static_cast<SuiBox*>(stub))->clearOptions();
}

int SuiBoxAdapter::compareTo(SuiBox* obj) {
	return (static_cast<SuiBox*>(stub))->compareTo(obj);
}

bool SuiBoxAdapter::hasGeneratedMessage() {
	return (static_cast<SuiBox*>(stub))->hasGeneratedMessage();
}

void SuiBoxAdapter::setPromptTitle(const String& name) {
	(static_cast<SuiBox*>(stub))->setPromptTitle(name);
}

void SuiBoxAdapter::setPromptText(const String& name) {
	(static_cast<SuiBox*>(stub))->setPromptText(name);
}

String SuiBoxAdapter::getPromptTitle() {
	return (static_cast<SuiBox*>(stub))->getPromptTitle();
}

void SuiBoxAdapter::setHandlerText(const String& text) {
	(static_cast<SuiBox*>(stub))->setHandlerText(text);
}

void SuiBoxAdapter::setWindowType(unsigned int type) {
	(static_cast<SuiBox*>(stub))->setWindowType(type);
}

void SuiBoxAdapter::setBoxType(int type) {
	(static_cast<SuiBox*>(stub))->setBoxType(type);
}

bool SuiBoxAdapter::isInputBox() {
	return (static_cast<SuiBox*>(stub))->isInputBox();
}

bool SuiBoxAdapter::isListBox() {
	return (static_cast<SuiBox*>(stub))->isListBox();
}

bool SuiBoxAdapter::isMessageBox() {
	return (static_cast<SuiBox*>(stub))->isMessageBox();
}

bool SuiBoxAdapter::isTransferBox() {
	return (static_cast<SuiBox*>(stub))->isTransferBox();
}

bool SuiBoxAdapter::isBankTransferBox() {
	return (static_cast<SuiBox*>(stub))->isBankTransferBox();
}

bool SuiBoxAdapter::isSlicingBox() {
	return (static_cast<SuiBox*>(stub))->isSlicingBox();
}

bool SuiBoxAdapter::isCharacterBuilderBox() {
	return (static_cast<SuiBox*>(stub))->isCharacterBuilderBox();
}

bool SuiBoxAdapter::isColorPicker() {
	return (static_cast<SuiBox*>(stub))->isColorPicker();
}

void SuiBoxAdapter::setCancelButton(bool value, const String& cancelText) {
	(static_cast<SuiBox*>(stub))->setCancelButton(value, cancelText);
}

void SuiBoxAdapter::setOtherButton(bool value, const String& backText) {
	(static_cast<SuiBox*>(stub))->setOtherButton(value, backText);
}

void SuiBoxAdapter::setOkButton(bool value, const String& okText) {
	(static_cast<SuiBox*>(stub))->setOkButton(value, okText);
}

void SuiBoxAdapter::setForceCloseDistance(float dist) {
	(static_cast<SuiBox*>(stub))->setForceCloseDistance(dist);
}

void SuiBoxAdapter::setForceCloseDisabled() {
	(static_cast<SuiBox*>(stub))->setForceCloseDisabled();
}

ManagedWeakReference<CreatureObject* > SuiBoxAdapter::getPlayer() {
	return (static_cast<SuiBox*>(stub))->getPlayer();
}

unsigned int SuiBoxAdapter::getBoxID() {
	return (static_cast<SuiBox*>(stub))->getBoxID();
}

int SuiBoxAdapter::getWindowType() {
	return (static_cast<SuiBox*>(stub))->getWindowType();
}

ManagedWeakReference<SceneObject* > SuiBoxAdapter::getUsingObject() {
	return (static_cast<SuiBox*>(stub))->getUsingObject();
}

void SuiBoxAdapter::setUsingObject(SceneObject* object) {
	(static_cast<SuiBox*>(stub))->setUsingObject(object);
}

/*
 *	SuiBoxHelper
 */

SuiBoxHelper* SuiBoxHelper::staticInitializer = SuiBoxHelper::instance();

SuiBoxHelper::SuiBoxHelper() {
	className = "SuiBox";

	Core::getObjectBroker()->registerClass(className, this);
}

void SuiBoxHelper::finalizeHelper() {
	SuiBoxHelper::finalize();
}

DistributedObject* SuiBoxHelper::instantiateObject() {
	return new SuiBox(DummyConstructorParameter::instance());
}

DistributedObjectServant* SuiBoxHelper::instantiateServant() {
	return new SuiBoxImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* SuiBoxHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SuiBoxAdapter(static_cast<SuiBox*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

