/*
 *	server/zone/objects/player/PlayerCreature.cpp generated by engine3 IDL compiler 0.60
 */

#include "PlayerCreature.h"

#include "server/zone/ZoneClientSession.h"

#include "server/zone/objects/player/PlayerObject.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "server/zone/objects/tangible/Container.h"

#include "server/zone/objects/player/events/PlayerDisconnectEvent.h"

#include "server/zone/objects/player/events/PlayerRecoveryEvent.h"

#include "server/chat/room/ChatRoom.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/tangible/weapon/WeaponObject.h"

#include "server/zone/objects/group/GroupObject.h"

#include "server/zone/objects/waypoint/WaypointObject.h"

#include "server/zone/objects/tangible/TangibleObject.h"

/*
 *	PlayerCreatureStub
 */

PlayerCreature::PlayerCreature() : CreatureObject(DummyConstructorParameter::instance()) {
	_impl = new PlayerCreatureImplementation();
	_impl->_setStub(this);
}

PlayerCreature::PlayerCreature(DummyConstructorParameter* param) : CreatureObject(param) {
}

PlayerCreature::~PlayerCreature() {
}


void PlayerCreature::loadTemplateData(SharedObjectTemplate* templateData) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((PlayerCreatureImplementation*) _impl)->loadTemplateData(templateData);
}

void PlayerCreature::initializeTransientMembers() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->initializeTransientMembers();
}

void PlayerCreature::notifyInsert(QuadTreeEntry* entry) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((PlayerCreatureImplementation*) _impl)->notifyInsert(entry);
}

void PlayerCreature::notifyDissapear(QuadTreeEntry* entry) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((PlayerCreatureImplementation*) _impl)->notifyDissapear(entry);
}

void PlayerCreature::disconnect(bool closeClient, bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addBooleanParameter(closeClient);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->disconnect(closeClient, doLock);
}

void PlayerCreature::unload() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->unload();
}

void PlayerCreature::reload(ZoneClientSession* client) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(client);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->reload(client);
}

void PlayerCreature::logout(bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->logout(doLock);
}

void PlayerCreature::activateRecovery() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->activateRecovery();
}

void PlayerCreature::doRecovery() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->doRecovery();
}

void PlayerCreature::insertToBuilding(BuildingObject* building) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addObjectParameter(building);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->insertToBuilding(building);
}

void PlayerCreature::removeFromBuilding(BuildingObject* building) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addObjectParameter(building);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->removeFromBuilding(building);
}

void PlayerCreature::sendMessage(BasePacket* msg) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addObjectParameter(msg);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->sendMessage(msg);
}

void PlayerCreature::sendToOwner(bool doClose) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addBooleanParameter(doClose);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->sendToOwner(doClose);
}

void PlayerCreature::sendBadgesResponseTo(PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->sendBadgesResponseTo(player);
}

void PlayerCreature::unloadSpawnedChildren() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->unloadSpawnedChildren();
}

bool PlayerCreature::isAggressiveTo(PlayerCreature* object) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addObjectParameter(object);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerCreatureImplementation*) _impl)->isAggressiveTo(object);
}

int PlayerCreature::canAddObject(SceneObject* object, String& errorDescription) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addObjectParameter(object);
		method.addAsciiParameter(errorDescription);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerCreatureImplementation*) _impl)->canAddObject(object, errorDescription);
}

int PlayerCreature::notifyObjectInserted(SceneObject* object) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addObjectParameter(object);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerCreatureImplementation*) _impl)->notifyObjectInserted(object);
}

int PlayerCreature::notifyObjectRemoved(SceneObject* object) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);
		method.addObjectParameter(object);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerCreatureImplementation*) _impl)->notifyObjectRemoved(object);
}

int PlayerCreature::notifyObjectDestructionObservers(TangibleObject* attacker, int condition) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);
		method.addObjectParameter(attacker);
		method.addSignedIntParameter(condition);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerCreatureImplementation*) _impl)->notifyObjectDestructionObservers(attacker, condition);
}

bool PlayerCreature::isFirstIncapacitationExpired() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerCreatureImplementation*) _impl)->isFirstIncapacitationExpired();
}

void PlayerCreature::resetIncapacitationCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->resetIncapacitationCounter();
}

void PlayerCreature::resetFirstIncapacitationTime() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->resetFirstIncapacitationTime();
}

void PlayerCreature::updateIncapacitationCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->updateIncapacitationCounter();
}

bool PlayerCreature::isFirstIncapacitation() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerCreatureImplementation*) _impl)->isFirstIncapacitation();
}

byte PlayerCreature::getIncapacitationCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);

		return method.executeWithByteReturn();
	} else
		return ((PlayerCreatureImplementation*) _impl)->getIncapacitationCounter();
}

void PlayerCreature::setLastNpcConvStr(const String& conv) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);
		method.addAsciiParameter(conv);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->setLastNpcConvStr(conv);
}

void PlayerCreature::setLastNpcConvMessStr(const String& mess) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);
		method.addAsciiParameter(mess);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->setLastNpcConvMessStr(mess);
}

String PlayerCreature::getLastNpcConvStr() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);

		method.executeWithAsciiReturn(_return_getLastNpcConvStr);
		return _return_getLastNpcConvStr;
	} else
		return ((PlayerCreatureImplementation*) _impl)->getLastNpcConvStr();
}

String PlayerCreature::getLastNpcConvMessStr() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);

		method.executeWithAsciiReturn(_return_getLastNpcConvMessStr);
		return _return_getLastNpcConvMessStr;
	} else
		return ((PlayerCreatureImplementation*) _impl)->getLastNpcConvMessStr();
}

String PlayerCreature::getLastNpcConvOption(int idx) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);
		method.addSignedIntParameter(idx);

		method.executeWithAsciiReturn(_return_getLastNpcConvOption);
		return _return_getLastNpcConvOption;
	} else
		return ((PlayerCreatureImplementation*) _impl)->getLastNpcConvOption(idx);
}

void PlayerCreature::addLastNpcConvOptions(const String& option) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);
		method.addAsciiParameter(option);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->addLastNpcConvOptions(option);
}

int PlayerCreature::countLastNpcConvOptions() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 36);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerCreatureImplementation*) _impl)->countLastNpcConvOptions();
}

void PlayerCreature::clearLastNpcConvOptions() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 37);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->clearLastNpcConvOptions();
}

void PlayerCreature::addToDuelList(PlayerCreature* targetPlayer) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 38);
		method.addObjectParameter(targetPlayer);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->addToDuelList(targetPlayer);
}

void PlayerCreature::removeFromDuelList(PlayerCreature* targetPlayer) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 39);
		method.addObjectParameter(targetPlayer);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->removeFromDuelList(targetPlayer);
}

PlayerCreature* PlayerCreature::getDuelListObject(int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 40);
		method.addSignedIntParameter(index);

		return (PlayerCreature*) method.executeWithObjectReturn();
	} else
		return ((PlayerCreatureImplementation*) _impl)->getDuelListObject(index);
}

bool PlayerCreature::requestedDuelTo(PlayerCreature* targetPlayer) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 41);
		method.addObjectParameter(targetPlayer);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerCreatureImplementation*) _impl)->requestedDuelTo(targetPlayer);
}

bool PlayerCreature::isDuelListEmpty() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 42);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerCreatureImplementation*) _impl)->isDuelListEmpty();
}

int PlayerCreature::getDuelListSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 43);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerCreatureImplementation*) _impl)->getDuelListSize();
}

void PlayerCreature::notifySceneReady() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 44);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->notifySceneReady();
}

SortedVector<unsigned long long>* PlayerCreature::getPersistentMessages() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((PlayerCreatureImplementation*) _impl)->getPersistentMessages();
}

void PlayerCreature::addPersistentMessage(unsigned long long id) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 45);
		method.addUnsignedLongParameter(id);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->addPersistentMessage(id);
}

void PlayerCreature::dropPersistentMessage(unsigned long long id) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 46);
		method.addUnsignedLongParameter(id);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->dropPersistentMessage(id);
}

PlayerObject* PlayerCreature::getPlayerObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 47);

		return (PlayerObject*) method.executeWithObjectReturn();
	} else
		return ((PlayerCreatureImplementation*) _impl)->getPlayerObject();
}

bool PlayerCreature::isOnline() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 48);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerCreatureImplementation*) _impl)->isOnline();
}

bool PlayerCreature::isOffline() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 49);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerCreatureImplementation*) _impl)->isOffline();
}

bool PlayerCreature::isLoading() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 50);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerCreatureImplementation*) _impl)->isLoading();
}

bool PlayerCreature::isLinkDead() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 51);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerCreatureImplementation*) _impl)->isLinkDead();
}

bool PlayerCreature::isLoggingIn() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 52);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerCreatureImplementation*) _impl)->isLoggingIn();
}

bool PlayerCreature::isLoggingOut() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 53);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerCreatureImplementation*) _impl)->isLoggingOut();
}

unsigned int PlayerCreature::getAccountID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 54);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerCreatureImplementation*) _impl)->getAccountID();
}

ZoneClientSession* PlayerCreature::getClient() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 55);

		return (ZoneClientSession*) method.executeWithObjectReturn();
	} else
		return ((PlayerCreatureImplementation*) _impl)->getClient();
}

byte PlayerCreature::getRaceID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 56);

		return method.executeWithByteReturn();
	} else
		return ((PlayerCreatureImplementation*) _impl)->getRaceID();
}

unsigned long long PlayerCreature::getSavedParentID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 57);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((PlayerCreatureImplementation*) _impl)->getSavedParentID();
}

int PlayerCreature::getSavedZoneID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 58);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerCreatureImplementation*) _impl)->getSavedZoneID();
}

String PlayerCreature::getFirstName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 59);

		method.executeWithAsciiReturn(_return_getFirstName);
		return _return_getFirstName;
	} else
		return ((PlayerCreatureImplementation*) _impl)->getFirstName();
}

String PlayerCreature::getLastName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 60);

		method.executeWithAsciiReturn(_return_getLastName);
		return _return_getLastName;
	} else
		return ((PlayerCreatureImplementation*) _impl)->getLastName();
}

void PlayerCreature::setSavedParentID(unsigned long long id) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 61);
		method.addUnsignedLongParameter(id);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->setSavedParentID(id);
}

void PlayerCreature::setSavedZoneID(int id) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 62);
		method.addSignedIntParameter(id);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->setSavedZoneID(id);
}

void PlayerCreature::setSkillPoints(int points) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 63);
		method.addSignedIntParameter(points);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->setSkillPoints(points);
}

void PlayerCreature::addSkillPoints(int points) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 64);
		method.addSignedIntParameter(points);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->addSkillPoints(points);
}

void PlayerCreature::setClient(ZoneClientSession* cli) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 65);
		method.addObjectParameter(cli);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->setClient(cli);
}

void PlayerCreature::setBiography(const UnicodeString& bio) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 66);
		method.addUnicodeParameter(bio);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->setBiography(bio);
}

void PlayerCreature::setRaceID(byte id) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 67);
		method.addByteParameter(id);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->setRaceID(id);
}

void PlayerCreature::setConversatingCreature(CreatureObject* creature) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 68);
		method.addObjectParameter(creature);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->setConversatingCreature(creature);
}

void PlayerCreature::setClientLastMovementStamp(unsigned int stamp) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 69);
		method.addUnsignedIntParameter(stamp);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->setClientLastMovementStamp(stamp);
}

void PlayerCreature::setOffline() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 70);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->setOffline();
}

void PlayerCreature::setLinkDead() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 71);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->setLinkDead();
}

void PlayerCreature::setOnline() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 72);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->setOnline();
}

void PlayerCreature::setLoggingOut() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 73);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->setLoggingOut();
}

void PlayerCreature::setAccountID(unsigned int id) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 74);
		method.addUnsignedIntParameter(id);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->setAccountID(id);
}

void PlayerCreature::clearDisconnectEvent() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 75);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->clearDisconnectEvent();
}

void PlayerCreature::clearRecoveryEvent() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 76);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->clearRecoveryEvent();
}

void PlayerCreature::addChatRoom(ChatRoom* room) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 77);
		method.addObjectParameter(room);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->addChatRoom(room);
}

void PlayerCreature::removeChatRoom(ChatRoom* room) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 78);
		method.addObjectParameter(room);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->removeChatRoom(room);
}

int PlayerCreature::getSkillPoints() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 79);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerCreatureImplementation*) _impl)->getSkillPoints();
}

unsigned int PlayerCreature::getNewSuiBoxID(unsigned int type) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 80);
		method.addUnsignedIntParameter(type);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerCreatureImplementation*) _impl)->getNewSuiBoxID(type);
}

bool PlayerCreature::hasSuiBox(unsigned int boxID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 81);
		method.addUnsignedIntParameter(boxID);

		return method.executeWithBooleanReturn();
	} else
		return ((PlayerCreatureImplementation*) _impl)->hasSuiBox(boxID);
}

SuiBox* PlayerCreature::getSuiBox(unsigned int boxID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 82);
		method.addUnsignedIntParameter(boxID);

		return (SuiBox*) method.executeWithObjectReturn();
	} else
		return ((PlayerCreatureImplementation*) _impl)->getSuiBox(boxID);
}

void PlayerCreature::removeSuiBox(unsigned int boxID, bool closeWindowToClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 83);
		method.addUnsignedIntParameter(boxID);
		method.addBooleanParameter(closeWindowToClient);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->removeSuiBox(boxID, closeWindowToClient);
}

void PlayerCreature::addSuiBox(SuiBox* sui) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 84);
		method.addObjectParameter(sui);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->addSuiBox(sui);
}

int PlayerCreature::getLotsRemaining() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 85);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerCreatureImplementation*) _impl)->getLotsRemaining();
}

int PlayerCreature::getFactionStatus() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 86);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerCreatureImplementation*) _impl)->getFactionStatus();
}

UnicodeString PlayerCreature::getBiography() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 87);

		method.executeWithUnicodeReturn(_return_getBiography);
		return _return_getBiography;
	} else
		return ((PlayerCreatureImplementation*) _impl)->getBiography();
}

unsigned int PlayerCreature::getClientLastMovementStamp() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 88);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((PlayerCreatureImplementation*) _impl)->getClientLastMovementStamp();
}

void PlayerCreature::setSurveyTool(SurveyTool* tool) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 89);
		method.addObjectParameter(tool);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->setSurveyTool(tool);
}

SurveyTool* PlayerCreature::getSurveyTool() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 90);

		return (SurveyTool*) method.executeWithObjectReturn();
	} else
		return ((PlayerCreatureImplementation*) _impl)->getSurveyTool();
}

void PlayerCreature::setSurveyWaypoint(WaypointObject* waypoint) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 91);
		method.addObjectParameter(waypoint);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->setSurveyWaypoint(waypoint);
}

WaypointObject* PlayerCreature::getSurveyWaypoint() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 92);

		return (WaypointObject*) method.executeWithObjectReturn();
	} else
		return ((PlayerCreatureImplementation*) _impl)->getSurveyWaypoint();
}

CreatureObject* PlayerCreature::getConversatingCreature() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 93);

		return (CreatureObject*) method.executeWithObjectReturn();
	} else
		return ((PlayerCreatureImplementation*) _impl)->getConversatingCreature();
}

/*
 *	PlayerCreatureImplementation
 */

PlayerCreatureImplementation::PlayerCreatureImplementation(DummyConstructorParameter* param) : CreatureObjectImplementation(param) {
	_initializeImplementation();
}

PlayerCreatureImplementation::~PlayerCreatureImplementation() {
}


void PlayerCreatureImplementation::finalize() {
}

void PlayerCreatureImplementation::_initializeImplementation() {
	_setClassHelper(PlayerCreatureHelper::instance());

	_serializationHelperMethod();
}

void PlayerCreatureImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (PlayerCreature*) stub;
	CreatureObjectImplementation::_setStub(stub);
}

DistributedObjectStub* PlayerCreatureImplementation::_getStub() {
	return _this;
}

PlayerCreatureImplementation::operator const PlayerCreature*() {
	return _this;
}

void PlayerCreatureImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void PlayerCreatureImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void PlayerCreatureImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void PlayerCreatureImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void PlayerCreatureImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void PlayerCreatureImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void PlayerCreatureImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void PlayerCreatureImplementation::_serializationHelperMethod() {
	CreatureObjectImplementation::_serializationHelperMethod();

	_setClassName("PlayerCreature");

	addSerializableVariable("savedZoneID", &savedZoneID);
	addSerializableVariable("savedParentID", &savedParentID);
	addSerializableVariable("onlineStatus", &onlineStatus);
	addSerializableVariable("logoutTimeStamp", &logoutTimeStamp);
	addSerializableVariable("clientLastMovementStamp", &clientLastMovementStamp);
	addSerializableVariable("accountID", &accountID);
	addSerializableVariable("suiBoxNextID", &suiBoxNextID);
	addSerializableVariable("raceFile", &raceFile);
	addSerializableVariable("raceID", &raceID);
	addSerializableVariable("startingLocation", &startingLocation);
	addSerializableVariable("startingProfession", &startingProfession);
	addSerializableVariable("biography", &biography);
	addSerializableVariable("lotsRemaining", &lotsRemaining);
	addSerializableVariable("skillPoints", &skillPoints);
	addSerializableVariable("badges", &badges);
	addSerializableVariable("chatRooms", &chatRooms);
	addSerializableVariable("suiBoxes", &suiBoxes);
	addSerializableVariable("pvpRating", &pvpRating);
	addSerializableVariable("factionStatus", &factionStatus);
	addSerializableVariable("persistentMessages", &persistentMessages);
	addSerializableVariable("duelList", &duelList);
}

PlayerCreatureImplementation::PlayerCreatureImplementation() {
	_initializeImplementation();
	// server/zone/objects/player/PlayerCreature.idl(153):  		Logger.setLoggingName("PlayerCreature");
	Logger::setLoggingName("PlayerCreature");
	// server/zone/objects/player/PlayerCreature.idl(155):  		owner = null;
	owner = NULL;
	// server/zone/objects/player/PlayerCreature.idl(157):  		disconnectEvent = null;
	disconnectEvent = NULL;
	// server/zone/objects/player/PlayerCreature.idl(158):  		recoveryEvent = null;
	recoveryEvent = NULL;
	// server/zone/objects/player/PlayerCreature.idl(159):  		accountID = 0;
	accountID = 0;
	// server/zone/objects/player/PlayerCreature.idl(161):  		savedZoneID = -1;
	savedZoneID = -1;
	// server/zone/objects/player/PlayerCreature.idl(162):  		savedParentID = 0;
	savedParentID = 0;
	// server/zone/objects/player/PlayerCreature.idl(164):  		skillPoints = 0;
	skillPoints = 0;
	// server/zone/objects/player/PlayerCreature.idl(166):  		suiBoxNextID = 0;
	suiBoxNextID = 0;
	// server/zone/objects/player/PlayerCreature.idl(168):  		factionStatus = 0;
	factionStatus = 0;
	// server/zone/objects/player/PlayerCreature.idl(169):  		lotsRemaining = 0;
	lotsRemaining = 0;
	// server/zone/objects/player/PlayerCreature.idl(171):  		clientLastMovementStamp = 0;
	clientLastMovementStamp = 0;
	// server/zone/objects/player/PlayerCreature.idl(173):  		super.pvpStatusBitmask = CreatureFlag.PLAYER;
	CreatureObjectImplementation::pvpStatusBitmask = CreatureFlag::PLAYER;
	// server/zone/objects/player/PlayerCreature.idl(175):  		conversatingCreature = null;
	conversatingCreature = NULL;
	// server/zone/objects/player/PlayerCreature.idl(177):  		persistentMessages.setNoDuplicateInsertPlan();
	(&persistentMessages)->setNoDuplicateInsertPlan();
	// server/zone/objects/player/PlayerCreature.idl(178):  		duelList.setNoDuplicateInsertPlan();
	(&duelList)->setNoDuplicateInsertPlan();
	// server/zone/objects/player/PlayerCreature.idl(180):  		setOffline();
	setOffline();
}

void PlayerCreatureImplementation::loadTemplateData(SharedObjectTemplate* templateData) {
	// server/zone/objects/player/PlayerCreature.idl(185):  		super.loadTemplateData(templateData);
	CreatureObjectImplementation::loadTemplateData(templateData);
	// server/zone/objects/player/PlayerCreature.idl(187):  		super.pvpStatusBitmask = CreatureFlag.PLAYER;
	CreatureObjectImplementation::pvpStatusBitmask = CreatureFlag::PLAYER;
}

bool PlayerCreatureImplementation::isAggressiveTo(PlayerCreature* object) {
	// server/zone/objects/player/PlayerCreature.idl(266):  		return 
	if ((&duelList)->contains(object) && object->requestedDuelTo(_this))	// server/zone/objects/player/PlayerCreature.idl(267):  			return true;
	return true;
	// server/zone/objects/player/PlayerCreature.idl(269):  false;
	return false;
}

void PlayerCreatureImplementation::resetIncapacitationCounter() {
	// server/zone/objects/player/PlayerCreature.idl(291):  		incapacitationCounter = 0;
	incapacitationCounter = 0;
}

void PlayerCreatureImplementation::updateIncapacitationCounter() {
	// server/zone/objects/player/PlayerCreature.idl(297):  		incapacitationCounter++;
	incapacitationCounter ++;
	// server/zone/objects/player/PlayerCreature.idl(299):  	}
	if (isFirstIncapacitation() || isFirstIncapacitationExpired())	// server/zone/objects/player/PlayerCreature.idl(300):  			resetFirstIncapacitationTime();
	resetFirstIncapacitationTime();
}

bool PlayerCreatureImplementation::isFirstIncapacitation() {
	// server/zone/objects/player/PlayerCreature.idl(304):  		return incapacitationCounter == 1;
	return incapacitationCounter == 1;
}

byte PlayerCreatureImplementation::getIncapacitationCounter() {
	// server/zone/objects/player/PlayerCreature.idl(308):  		return incapacitationCounter;
	return incapacitationCounter;
}

void PlayerCreatureImplementation::setLastNpcConvStr(const String& conv) {
	// server/zone/objects/player/PlayerCreature.idl(313):  		lastNpcConvo = conv;
	lastNpcConvo = conv;
}

void PlayerCreatureImplementation::setLastNpcConvMessStr(const String& mess) {
	// server/zone/objects/player/PlayerCreature.idl(317):  		lastNpcConvoMessage = mess;
	lastNpcConvoMessage = mess;
}

String PlayerCreatureImplementation::getLastNpcConvStr() {
	// server/zone/objects/player/PlayerCreature.idl(321):  		return lastNpcConvo;
	return lastNpcConvo;
}

String PlayerCreatureImplementation::getLastNpcConvMessStr() {
	// server/zone/objects/player/PlayerCreature.idl(325):  		return lastNpcConvoMessage;
	return lastNpcConvoMessage;
}

String PlayerCreatureImplementation::getLastNpcConvOption(int idx) {
	// server/zone/objects/player/PlayerCreature.idl(329):  		return lastNpcConvoOptions.get(idx);
	return (&lastNpcConvoOptions)->get(idx);
}

void PlayerCreatureImplementation::addLastNpcConvOptions(const String& option) {
	// server/zone/objects/player/PlayerCreature.idl(333):  		lastNpcConvoOptions.add(option);
	(&lastNpcConvoOptions)->add(option);
}

int PlayerCreatureImplementation::countLastNpcConvOptions() {
	// server/zone/objects/player/PlayerCreature.idl(337):  		return lastNpcConvoOptions.size();
	return (&lastNpcConvoOptions)->size();
}

void PlayerCreatureImplementation::clearLastNpcConvOptions() {
	// server/zone/objects/player/PlayerCreature.idl(341):  		lastNpcConvoOptions.removeAll();
	(&lastNpcConvoOptions)->removeAll();
}

void PlayerCreatureImplementation::addToDuelList(PlayerCreature* targetPlayer) {
	// server/zone/objects/player/PlayerCreature.idl(347):  		duelList.put(targetPlayer);
	(&duelList)->put(targetPlayer);
}

void PlayerCreatureImplementation::removeFromDuelList(PlayerCreature* targetPlayer) {
	// server/zone/objects/player/PlayerCreature.idl(351):  		duelList.drop(targetPlayer);
	(&duelList)->drop(targetPlayer);
}

PlayerCreature* PlayerCreatureImplementation::getDuelListObject(int index) {
	// server/zone/objects/player/PlayerCreature.idl(355):  		return duelList.get(index);
	return (&duelList)->get(index);
}

bool PlayerCreatureImplementation::requestedDuelTo(PlayerCreature* targetPlayer) {
	// server/zone/objects/player/PlayerCreature.idl(359):  		return duelList.contains(targetPlayer);
	return (&duelList)->contains(targetPlayer);
}

bool PlayerCreatureImplementation::isDuelListEmpty() {
	// server/zone/objects/player/PlayerCreature.idl(363):  		return duelList.isEmpty();
	return (&duelList)->isEmpty();
}

int PlayerCreatureImplementation::getDuelListSize() {
	// server/zone/objects/player/PlayerCreature.idl(367):  		return duelList.size();
	return (&duelList)->size();
}

SortedVector<unsigned long long>* PlayerCreatureImplementation::getPersistentMessages() {
	// server/zone/objects/player/PlayerCreature.idl(374):  		return persistentMessages;
	return (&persistentMessages);
}

void PlayerCreatureImplementation::addPersistentMessage(unsigned long long id) {
	// server/zone/objects/player/PlayerCreature.idl(378):  		persistentMessages.put(id);
	(&persistentMessages)->put(id);
}

void PlayerCreatureImplementation::dropPersistentMessage(unsigned long long id) {
	// server/zone/objects/player/PlayerCreature.idl(382):  		persistentMessages.drop(id);
	(&persistentMessages)->drop(id);
}

PlayerObject* PlayerCreatureImplementation::getPlayerObject() {
	// server/zone/objects/player/PlayerCreature.idl(386):  		return (PlayerObject) super.getSlottedObject("ghost");
	return (PlayerObject*) CreatureObjectImplementation::getSlottedObject("ghost");
}

bool PlayerCreatureImplementation::isOnline() {
	// server/zone/objects/player/PlayerCreature.idl(390):  		return onlineStatus != OFFLINE && onlineStatus != LINKDEAD;
	return onlineStatus != OFFLINE && onlineStatus != LINKDEAD;
}

bool PlayerCreatureImplementation::isOffline() {
	// server/zone/objects/player/PlayerCreature.idl(394):  		return onlineStatus == OFFLINE;
	return onlineStatus == OFFLINE;
}

bool PlayerCreatureImplementation::isLoading() {
	// server/zone/objects/player/PlayerCreature.idl(398):  		return onlineStatus == LOADING || onlineStatus == LOGGINGOUT;
	return onlineStatus == LOADING || onlineStatus == LOGGINGOUT;
}

bool PlayerCreatureImplementation::isLinkDead() {
	// server/zone/objects/player/PlayerCreature.idl(402):  		return onlineStatus == LINKDEAD;
	return onlineStatus == LINKDEAD;
}

bool PlayerCreatureImplementation::isLoggingIn() {
	// server/zone/objects/player/PlayerCreature.idl(406):  		return onlineStatus == LOGGINGIN;
	return onlineStatus == LOGGINGIN;
}

bool PlayerCreatureImplementation::isLoggingOut() {
	// server/zone/objects/player/PlayerCreature.idl(410):  		return onlineStatus == LOGGINGOUT;
	return onlineStatus == LOGGINGOUT;
}

unsigned int PlayerCreatureImplementation::getAccountID() {
	// server/zone/objects/player/PlayerCreature.idl(414):  		return accountID;
	return accountID;
}

ZoneClientSession* PlayerCreatureImplementation::getClient() {
	// server/zone/objects/player/PlayerCreature.idl(418):  		return owner;
	return owner;
}

byte PlayerCreatureImplementation::getRaceID() {
	// server/zone/objects/player/PlayerCreature.idl(422):  		return raceID;
	return raceID;
}

unsigned long long PlayerCreatureImplementation::getSavedParentID() {
	// server/zone/objects/player/PlayerCreature.idl(426):  		return savedParentID;
	return savedParentID;
}

int PlayerCreatureImplementation::getSavedZoneID() {
	// server/zone/objects/player/PlayerCreature.idl(430):  		return savedZoneID;
	return savedZoneID;
}

void PlayerCreatureImplementation::setSavedParentID(unsigned long long id) {
	// server/zone/objects/player/PlayerCreature.idl(437):  		savedParentID = id;
	savedParentID = id;
}

void PlayerCreatureImplementation::setSavedZoneID(int id) {
	// server/zone/objects/player/PlayerCreature.idl(441):  		savedZoneID = id;
	savedZoneID = id;
}

void PlayerCreatureImplementation::setSkillPoints(int points) {
	// server/zone/objects/player/PlayerCreature.idl(445):  		skillPoints = points;
	skillPoints = points;
}

void PlayerCreatureImplementation::addSkillPoints(int points) {
	// server/zone/objects/player/PlayerCreature.idl(449):  		skillPoints += points;
	skillPoints += points;
}

void PlayerCreatureImplementation::setClient(ZoneClientSession* cli) {
	// server/zone/objects/player/PlayerCreature.idl(453):  		owner = cli;
	owner = cli;
}

void PlayerCreatureImplementation::setBiography(const UnicodeString& bio) {
	// server/zone/objects/player/PlayerCreature.idl(457):  		biography = bio;
	biography = bio;
}

void PlayerCreatureImplementation::setRaceID(byte id) {
	// server/zone/objects/player/PlayerCreature.idl(461):  		raceID = id;
	raceID = id;
}

void PlayerCreatureImplementation::setConversatingCreature(CreatureObject* creature) {
	// server/zone/objects/player/PlayerCreature.idl(465):  		conversatingCreature = creature;
	conversatingCreature = creature;
}

void PlayerCreatureImplementation::setClientLastMovementStamp(unsigned int stamp) {
	// server/zone/objects/player/PlayerCreature.idl(469):  		clientLastMovementStamp = stamp;
	clientLastMovementStamp = stamp;
}

void PlayerCreatureImplementation::setOffline() {
	// server/zone/objects/player/PlayerCreature.idl(473):  		onlineStatus 
	if (isLinkDead()){
}
	// server/zone/objects/player/PlayerCreature.idl(477):  = OFFLINE;
	onlineStatus = OFFLINE;
}

void PlayerCreatureImplementation::setLoggingOut() {
	// server/zone/objects/player/PlayerCreature.idl(485):  		onlineStatus = LOGGINGOUT;
	onlineStatus = LOGGINGOUT;
}

void PlayerCreatureImplementation::setAccountID(unsigned int id) {
	// server/zone/objects/player/PlayerCreature.idl(489):  		accountID = id;
	accountID = id;
}

void PlayerCreatureImplementation::clearDisconnectEvent() {
	// server/zone/objects/player/PlayerCreature.idl(493):  		disconnectEvent = null;
	disconnectEvent = NULL;
}

void PlayerCreatureImplementation::clearRecoveryEvent() {
	// server/zone/objects/player/PlayerCreature.idl(497):  		recoveryEvent = null;
	recoveryEvent = NULL;
}

void PlayerCreatureImplementation::addChatRoom(ChatRoom* room) {
	// server/zone/objects/player/PlayerCreature.idl(501):  		chatRooms.put(room);
	(&chatRooms)->put(room);
}

void PlayerCreatureImplementation::removeChatRoom(ChatRoom* room) {
	// server/zone/objects/player/PlayerCreature.idl(505):  		chatRooms.drop(room);
	(&chatRooms)->drop(room);
}

int PlayerCreatureImplementation::getSkillPoints() {
	// server/zone/objects/player/PlayerCreature.idl(509):  		return skillPoints;
	return skillPoints;
}

bool PlayerCreatureImplementation::hasSuiBox(unsigned int boxID) {
	// server/zone/objects/player/PlayerCreature.idl(515):  		return suiBoxes.contains(boxID);
	return (&suiBoxes)->contains(boxID);
}

SuiBox* PlayerCreatureImplementation::getSuiBox(unsigned int boxID) {
	// server/zone/objects/player/PlayerCreature.idl(519):  		return suiBoxes.get(boxID);
	return (&suiBoxes)->get(boxID);
}

void PlayerCreatureImplementation::addSuiBox(SuiBox* sui) {
	// server/zone/objects/player/PlayerCreature.idl(528):  		unsigned int key = sui.getBoxID();
	unsigned int key = sui->getBoxID();
	// server/zone/objects/player/PlayerCreature.idl(529):  		suiBoxes.put(key, sui);
	(&suiBoxes)->put(key, sui);
}

int PlayerCreatureImplementation::getLotsRemaining() {
	// server/zone/objects/player/PlayerCreature.idl(533):  		return lotsRemaining;
	return lotsRemaining;
}

int PlayerCreatureImplementation::getFactionStatus() {
	// server/zone/objects/player/PlayerCreature.idl(537):  		return factionStatus;
	return factionStatus;
}

UnicodeString PlayerCreatureImplementation::getBiography() {
	// server/zone/objects/player/PlayerCreature.idl(541):  		return biography;
	return biography;
}

unsigned int PlayerCreatureImplementation::getClientLastMovementStamp() {
	// server/zone/objects/player/PlayerCreature.idl(545):  		return clientLastMovementStamp;
	return clientLastMovementStamp;
}

void PlayerCreatureImplementation::setSurveyTool(SurveyTool* tool) {
	// server/zone/objects/player/PlayerCreature.idl(553):  		surveyTool = tool;
	surveyTool = tool;
}

SurveyTool* PlayerCreatureImplementation::getSurveyTool() {
	// server/zone/objects/player/PlayerCreature.idl(560):  		return surveyTool;
	return surveyTool;
}

void PlayerCreatureImplementation::setSurveyWaypoint(WaypointObject* waypoint) {
	// server/zone/objects/player/PlayerCreature.idl(568):  		surveyWaypoint = waypoint;
	surveyWaypoint = waypoint;
}

WaypointObject* PlayerCreatureImplementation::getSurveyWaypoint() {
	// server/zone/objects/player/PlayerCreature.idl(575):  		return surveyWaypoint;
	return surveyWaypoint;
}

CreatureObject* PlayerCreatureImplementation::getConversatingCreature() {
	// server/zone/objects/player/PlayerCreature.idl(579):  		return conversatingCreature;
	return conversatingCreature;
}

/*
 *	PlayerCreatureAdapter
 */

PlayerCreatureAdapter::PlayerCreatureAdapter(PlayerCreatureImplementation* obj) : CreatureObjectAdapter(obj) {
}

Packet* PlayerCreatureAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initializeTransientMembers();
		break;
	case 7:
		disconnect(inv->getBooleanParameter(), inv->getBooleanParameter());
		break;
	case 8:
		unload();
		break;
	case 9:
		reload((ZoneClientSession*) inv->getObjectParameter());
		break;
	case 10:
		logout(inv->getBooleanParameter());
		break;
	case 11:
		activateRecovery();
		break;
	case 12:
		doRecovery();
		break;
	case 13:
		insertToBuilding((BuildingObject*) inv->getObjectParameter());
		break;
	case 14:
		removeFromBuilding((BuildingObject*) inv->getObjectParameter());
		break;
	case 15:
		sendMessage((BasePacket*) inv->getObjectParameter());
		break;
	case 16:
		sendToOwner(inv->getBooleanParameter());
		break;
	case 17:
		sendBadgesResponseTo((PlayerCreature*) inv->getObjectParameter());
		break;
	case 18:
		unloadSpawnedChildren();
		break;
	case 19:
		resp->insertBoolean(isAggressiveTo((PlayerCreature*) inv->getObjectParameter()));
		break;
	case 20:
		resp->insertSignedInt(canAddObject((SceneObject*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_canAddObject__SceneObject_String_)));
		break;
	case 21:
		resp->insertSignedInt(notifyObjectInserted((SceneObject*) inv->getObjectParameter()));
		break;
	case 22:
		resp->insertSignedInt(notifyObjectRemoved((SceneObject*) inv->getObjectParameter()));
		break;
	case 23:
		resp->insertSignedInt(notifyObjectDestructionObservers((TangibleObject*) inv->getObjectParameter(), inv->getSignedIntParameter()));
		break;
	case 24:
		resp->insertBoolean(isFirstIncapacitationExpired());
		break;
	case 25:
		resetIncapacitationCounter();
		break;
	case 26:
		resetFirstIncapacitationTime();
		break;
	case 27:
		updateIncapacitationCounter();
		break;
	case 28:
		resp->insertBoolean(isFirstIncapacitation());
		break;
	case 29:
		resp->insertByte(getIncapacitationCounter());
		break;
	case 30:
		setLastNpcConvStr(inv->getAsciiParameter(_param0_setLastNpcConvStr__String_));
		break;
	case 31:
		setLastNpcConvMessStr(inv->getAsciiParameter(_param0_setLastNpcConvMessStr__String_));
		break;
	case 32:
		resp->insertAscii(getLastNpcConvStr());
		break;
	case 33:
		resp->insertAscii(getLastNpcConvMessStr());
		break;
	case 34:
		resp->insertAscii(getLastNpcConvOption(inv->getSignedIntParameter()));
		break;
	case 35:
		addLastNpcConvOptions(inv->getAsciiParameter(_param0_addLastNpcConvOptions__String_));
		break;
	case 36:
		resp->insertSignedInt(countLastNpcConvOptions());
		break;
	case 37:
		clearLastNpcConvOptions();
		break;
	case 38:
		addToDuelList((PlayerCreature*) inv->getObjectParameter());
		break;
	case 39:
		removeFromDuelList((PlayerCreature*) inv->getObjectParameter());
		break;
	case 40:
		resp->insertLong(getDuelListObject(inv->getSignedIntParameter())->_getObjectID());
		break;
	case 41:
		resp->insertBoolean(requestedDuelTo((PlayerCreature*) inv->getObjectParameter()));
		break;
	case 42:
		resp->insertBoolean(isDuelListEmpty());
		break;
	case 43:
		resp->insertSignedInt(getDuelListSize());
		break;
	case 44:
		notifySceneReady();
		break;
	case 45:
		addPersistentMessage(inv->getUnsignedLongParameter());
		break;
	case 46:
		dropPersistentMessage(inv->getUnsignedLongParameter());
		break;
	case 47:
		resp->insertLong(getPlayerObject()->_getObjectID());
		break;
	case 48:
		resp->insertBoolean(isOnline());
		break;
	case 49:
		resp->insertBoolean(isOffline());
		break;
	case 50:
		resp->insertBoolean(isLoading());
		break;
	case 51:
		resp->insertBoolean(isLinkDead());
		break;
	case 52:
		resp->insertBoolean(isLoggingIn());
		break;
	case 53:
		resp->insertBoolean(isLoggingOut());
		break;
	case 54:
		resp->insertInt(getAccountID());
		break;
	case 55:
		resp->insertLong(getClient()->_getObjectID());
		break;
	case 56:
		resp->insertByte(getRaceID());
		break;
	case 57:
		resp->insertLong(getSavedParentID());
		break;
	case 58:
		resp->insertSignedInt(getSavedZoneID());
		break;
	case 59:
		resp->insertAscii(getFirstName());
		break;
	case 60:
		resp->insertAscii(getLastName());
		break;
	case 61:
		setSavedParentID(inv->getUnsignedLongParameter());
		break;
	case 62:
		setSavedZoneID(inv->getSignedIntParameter());
		break;
	case 63:
		setSkillPoints(inv->getSignedIntParameter());
		break;
	case 64:
		addSkillPoints(inv->getSignedIntParameter());
		break;
	case 65:
		setClient((ZoneClientSession*) inv->getObjectParameter());
		break;
	case 66:
		setBiography(inv->getUnicodeParameter(_param0_setBiography__UnicodeString_));
		break;
	case 67:
		setRaceID(inv->getByteParameter());
		break;
	case 68:
		setConversatingCreature((CreatureObject*) inv->getObjectParameter());
		break;
	case 69:
		setClientLastMovementStamp(inv->getUnsignedIntParameter());
		break;
	case 70:
		setOffline();
		break;
	case 71:
		setLinkDead();
		break;
	case 72:
		setOnline();
		break;
	case 73:
		setLoggingOut();
		break;
	case 74:
		setAccountID(inv->getUnsignedIntParameter());
		break;
	case 75:
		clearDisconnectEvent();
		break;
	case 76:
		clearRecoveryEvent();
		break;
	case 77:
		addChatRoom((ChatRoom*) inv->getObjectParameter());
		break;
	case 78:
		removeChatRoom((ChatRoom*) inv->getObjectParameter());
		break;
	case 79:
		resp->insertSignedInt(getSkillPoints());
		break;
	case 80:
		resp->insertInt(getNewSuiBoxID(inv->getUnsignedIntParameter()));
		break;
	case 81:
		resp->insertBoolean(hasSuiBox(inv->getUnsignedIntParameter()));
		break;
	case 82:
		resp->insertLong(getSuiBox(inv->getUnsignedIntParameter())->_getObjectID());
		break;
	case 83:
		removeSuiBox(inv->getUnsignedIntParameter(), inv->getBooleanParameter());
		break;
	case 84:
		addSuiBox((SuiBox*) inv->getObjectParameter());
		break;
	case 85:
		resp->insertSignedInt(getLotsRemaining());
		break;
	case 86:
		resp->insertSignedInt(getFactionStatus());
		break;
	case 87:
		resp->insertUnicode(getBiography());
		break;
	case 88:
		resp->insertInt(getClientLastMovementStamp());
		break;
	case 89:
		setSurveyTool((SurveyTool*) inv->getObjectParameter());
		break;
	case 90:
		resp->insertLong(getSurveyTool()->_getObjectID());
		break;
	case 91:
		setSurveyWaypoint((WaypointObject*) inv->getObjectParameter());
		break;
	case 92:
		resp->insertLong(getSurveyWaypoint()->_getObjectID());
		break;
	case 93:
		resp->insertLong(getConversatingCreature()->_getObjectID());
		break;
	default:
		return NULL;
	}

	return resp;
}

void PlayerCreatureAdapter::initializeTransientMembers() {
	((PlayerCreatureImplementation*) impl)->initializeTransientMembers();
}

void PlayerCreatureAdapter::disconnect(bool closeClient, bool doLock) {
	((PlayerCreatureImplementation*) impl)->disconnect(closeClient, doLock);
}

void PlayerCreatureAdapter::unload() {
	((PlayerCreatureImplementation*) impl)->unload();
}

void PlayerCreatureAdapter::reload(ZoneClientSession* client) {
	((PlayerCreatureImplementation*) impl)->reload(client);
}

void PlayerCreatureAdapter::logout(bool doLock) {
	((PlayerCreatureImplementation*) impl)->logout(doLock);
}

void PlayerCreatureAdapter::activateRecovery() {
	((PlayerCreatureImplementation*) impl)->activateRecovery();
}

void PlayerCreatureAdapter::doRecovery() {
	((PlayerCreatureImplementation*) impl)->doRecovery();
}

void PlayerCreatureAdapter::insertToBuilding(BuildingObject* building) {
	((PlayerCreatureImplementation*) impl)->insertToBuilding(building);
}

void PlayerCreatureAdapter::removeFromBuilding(BuildingObject* building) {
	((PlayerCreatureImplementation*) impl)->removeFromBuilding(building);
}

void PlayerCreatureAdapter::sendMessage(BasePacket* msg) {
	((PlayerCreatureImplementation*) impl)->sendMessage(msg);
}

void PlayerCreatureAdapter::sendToOwner(bool doClose) {
	((PlayerCreatureImplementation*) impl)->sendToOwner(doClose);
}

void PlayerCreatureAdapter::sendBadgesResponseTo(PlayerCreature* player) {
	((PlayerCreatureImplementation*) impl)->sendBadgesResponseTo(player);
}

void PlayerCreatureAdapter::unloadSpawnedChildren() {
	((PlayerCreatureImplementation*) impl)->unloadSpawnedChildren();
}

bool PlayerCreatureAdapter::isAggressiveTo(PlayerCreature* object) {
	return ((PlayerCreatureImplementation*) impl)->isAggressiveTo(object);
}

int PlayerCreatureAdapter::canAddObject(SceneObject* object, String& errorDescription) {
	return ((PlayerCreatureImplementation*) impl)->canAddObject(object, errorDescription);
}

int PlayerCreatureAdapter::notifyObjectInserted(SceneObject* object) {
	return ((PlayerCreatureImplementation*) impl)->notifyObjectInserted(object);
}

int PlayerCreatureAdapter::notifyObjectRemoved(SceneObject* object) {
	return ((PlayerCreatureImplementation*) impl)->notifyObjectRemoved(object);
}

int PlayerCreatureAdapter::notifyObjectDestructionObservers(TangibleObject* attacker, int condition) {
	return ((PlayerCreatureImplementation*) impl)->notifyObjectDestructionObservers(attacker, condition);
}

bool PlayerCreatureAdapter::isFirstIncapacitationExpired() {
	return ((PlayerCreatureImplementation*) impl)->isFirstIncapacitationExpired();
}

void PlayerCreatureAdapter::resetIncapacitationCounter() {
	((PlayerCreatureImplementation*) impl)->resetIncapacitationCounter();
}

void PlayerCreatureAdapter::resetFirstIncapacitationTime() {
	((PlayerCreatureImplementation*) impl)->resetFirstIncapacitationTime();
}

void PlayerCreatureAdapter::updateIncapacitationCounter() {
	((PlayerCreatureImplementation*) impl)->updateIncapacitationCounter();
}

bool PlayerCreatureAdapter::isFirstIncapacitation() {
	return ((PlayerCreatureImplementation*) impl)->isFirstIncapacitation();
}

byte PlayerCreatureAdapter::getIncapacitationCounter() {
	return ((PlayerCreatureImplementation*) impl)->getIncapacitationCounter();
}

void PlayerCreatureAdapter::setLastNpcConvStr(const String& conv) {
	((PlayerCreatureImplementation*) impl)->setLastNpcConvStr(conv);
}

void PlayerCreatureAdapter::setLastNpcConvMessStr(const String& mess) {
	((PlayerCreatureImplementation*) impl)->setLastNpcConvMessStr(mess);
}

String PlayerCreatureAdapter::getLastNpcConvStr() {
	return ((PlayerCreatureImplementation*) impl)->getLastNpcConvStr();
}

String PlayerCreatureAdapter::getLastNpcConvMessStr() {
	return ((PlayerCreatureImplementation*) impl)->getLastNpcConvMessStr();
}

String PlayerCreatureAdapter::getLastNpcConvOption(int idx) {
	return ((PlayerCreatureImplementation*) impl)->getLastNpcConvOption(idx);
}

void PlayerCreatureAdapter::addLastNpcConvOptions(const String& option) {
	((PlayerCreatureImplementation*) impl)->addLastNpcConvOptions(option);
}

int PlayerCreatureAdapter::countLastNpcConvOptions() {
	return ((PlayerCreatureImplementation*) impl)->countLastNpcConvOptions();
}

void PlayerCreatureAdapter::clearLastNpcConvOptions() {
	((PlayerCreatureImplementation*) impl)->clearLastNpcConvOptions();
}

void PlayerCreatureAdapter::addToDuelList(PlayerCreature* targetPlayer) {
	((PlayerCreatureImplementation*) impl)->addToDuelList(targetPlayer);
}

void PlayerCreatureAdapter::removeFromDuelList(PlayerCreature* targetPlayer) {
	((PlayerCreatureImplementation*) impl)->removeFromDuelList(targetPlayer);
}

PlayerCreature* PlayerCreatureAdapter::getDuelListObject(int index) {
	return ((PlayerCreatureImplementation*) impl)->getDuelListObject(index);
}

bool PlayerCreatureAdapter::requestedDuelTo(PlayerCreature* targetPlayer) {
	return ((PlayerCreatureImplementation*) impl)->requestedDuelTo(targetPlayer);
}

bool PlayerCreatureAdapter::isDuelListEmpty() {
	return ((PlayerCreatureImplementation*) impl)->isDuelListEmpty();
}

int PlayerCreatureAdapter::getDuelListSize() {
	return ((PlayerCreatureImplementation*) impl)->getDuelListSize();
}

void PlayerCreatureAdapter::notifySceneReady() {
	((PlayerCreatureImplementation*) impl)->notifySceneReady();
}

void PlayerCreatureAdapter::addPersistentMessage(unsigned long long id) {
	((PlayerCreatureImplementation*) impl)->addPersistentMessage(id);
}

void PlayerCreatureAdapter::dropPersistentMessage(unsigned long long id) {
	((PlayerCreatureImplementation*) impl)->dropPersistentMessage(id);
}

PlayerObject* PlayerCreatureAdapter::getPlayerObject() {
	return ((PlayerCreatureImplementation*) impl)->getPlayerObject();
}

bool PlayerCreatureAdapter::isOnline() {
	return ((PlayerCreatureImplementation*) impl)->isOnline();
}

bool PlayerCreatureAdapter::isOffline() {
	return ((PlayerCreatureImplementation*) impl)->isOffline();
}

bool PlayerCreatureAdapter::isLoading() {
	return ((PlayerCreatureImplementation*) impl)->isLoading();
}

bool PlayerCreatureAdapter::isLinkDead() {
	return ((PlayerCreatureImplementation*) impl)->isLinkDead();
}

bool PlayerCreatureAdapter::isLoggingIn() {
	return ((PlayerCreatureImplementation*) impl)->isLoggingIn();
}

bool PlayerCreatureAdapter::isLoggingOut() {
	return ((PlayerCreatureImplementation*) impl)->isLoggingOut();
}

unsigned int PlayerCreatureAdapter::getAccountID() {
	return ((PlayerCreatureImplementation*) impl)->getAccountID();
}

ZoneClientSession* PlayerCreatureAdapter::getClient() {
	return ((PlayerCreatureImplementation*) impl)->getClient();
}

byte PlayerCreatureAdapter::getRaceID() {
	return ((PlayerCreatureImplementation*) impl)->getRaceID();
}

unsigned long long PlayerCreatureAdapter::getSavedParentID() {
	return ((PlayerCreatureImplementation*) impl)->getSavedParentID();
}

int PlayerCreatureAdapter::getSavedZoneID() {
	return ((PlayerCreatureImplementation*) impl)->getSavedZoneID();
}

String PlayerCreatureAdapter::getFirstName() {
	return ((PlayerCreatureImplementation*) impl)->getFirstName();
}

String PlayerCreatureAdapter::getLastName() {
	return ((PlayerCreatureImplementation*) impl)->getLastName();
}

void PlayerCreatureAdapter::setSavedParentID(unsigned long long id) {
	((PlayerCreatureImplementation*) impl)->setSavedParentID(id);
}

void PlayerCreatureAdapter::setSavedZoneID(int id) {
	((PlayerCreatureImplementation*) impl)->setSavedZoneID(id);
}

void PlayerCreatureAdapter::setSkillPoints(int points) {
	((PlayerCreatureImplementation*) impl)->setSkillPoints(points);
}

void PlayerCreatureAdapter::addSkillPoints(int points) {
	((PlayerCreatureImplementation*) impl)->addSkillPoints(points);
}

void PlayerCreatureAdapter::setClient(ZoneClientSession* cli) {
	((PlayerCreatureImplementation*) impl)->setClient(cli);
}

void PlayerCreatureAdapter::setBiography(const UnicodeString& bio) {
	((PlayerCreatureImplementation*) impl)->setBiography(bio);
}

void PlayerCreatureAdapter::setRaceID(byte id) {
	((PlayerCreatureImplementation*) impl)->setRaceID(id);
}

void PlayerCreatureAdapter::setConversatingCreature(CreatureObject* creature) {
	((PlayerCreatureImplementation*) impl)->setConversatingCreature(creature);
}

void PlayerCreatureAdapter::setClientLastMovementStamp(unsigned int stamp) {
	((PlayerCreatureImplementation*) impl)->setClientLastMovementStamp(stamp);
}

void PlayerCreatureAdapter::setOffline() {
	((PlayerCreatureImplementation*) impl)->setOffline();
}

void PlayerCreatureAdapter::setLinkDead() {
	((PlayerCreatureImplementation*) impl)->setLinkDead();
}

void PlayerCreatureAdapter::setOnline() {
	((PlayerCreatureImplementation*) impl)->setOnline();
}

void PlayerCreatureAdapter::setLoggingOut() {
	((PlayerCreatureImplementation*) impl)->setLoggingOut();
}

void PlayerCreatureAdapter::setAccountID(unsigned int id) {
	((PlayerCreatureImplementation*) impl)->setAccountID(id);
}

void PlayerCreatureAdapter::clearDisconnectEvent() {
	((PlayerCreatureImplementation*) impl)->clearDisconnectEvent();
}

void PlayerCreatureAdapter::clearRecoveryEvent() {
	((PlayerCreatureImplementation*) impl)->clearRecoveryEvent();
}

void PlayerCreatureAdapter::addChatRoom(ChatRoom* room) {
	((PlayerCreatureImplementation*) impl)->addChatRoom(room);
}

void PlayerCreatureAdapter::removeChatRoom(ChatRoom* room) {
	((PlayerCreatureImplementation*) impl)->removeChatRoom(room);
}

int PlayerCreatureAdapter::getSkillPoints() {
	return ((PlayerCreatureImplementation*) impl)->getSkillPoints();
}

unsigned int PlayerCreatureAdapter::getNewSuiBoxID(unsigned int type) {
	return ((PlayerCreatureImplementation*) impl)->getNewSuiBoxID(type);
}

bool PlayerCreatureAdapter::hasSuiBox(unsigned int boxID) {
	return ((PlayerCreatureImplementation*) impl)->hasSuiBox(boxID);
}

SuiBox* PlayerCreatureAdapter::getSuiBox(unsigned int boxID) {
	return ((PlayerCreatureImplementation*) impl)->getSuiBox(boxID);
}

void PlayerCreatureAdapter::removeSuiBox(unsigned int boxID, bool closeWindowToClient) {
	((PlayerCreatureImplementation*) impl)->removeSuiBox(boxID, closeWindowToClient);
}

void PlayerCreatureAdapter::addSuiBox(SuiBox* sui) {
	((PlayerCreatureImplementation*) impl)->addSuiBox(sui);
}

int PlayerCreatureAdapter::getLotsRemaining() {
	return ((PlayerCreatureImplementation*) impl)->getLotsRemaining();
}

int PlayerCreatureAdapter::getFactionStatus() {
	return ((PlayerCreatureImplementation*) impl)->getFactionStatus();
}

UnicodeString PlayerCreatureAdapter::getBiography() {
	return ((PlayerCreatureImplementation*) impl)->getBiography();
}

unsigned int PlayerCreatureAdapter::getClientLastMovementStamp() {
	return ((PlayerCreatureImplementation*) impl)->getClientLastMovementStamp();
}

void PlayerCreatureAdapter::setSurveyTool(SurveyTool* tool) {
	((PlayerCreatureImplementation*) impl)->setSurveyTool(tool);
}

SurveyTool* PlayerCreatureAdapter::getSurveyTool() {
	return ((PlayerCreatureImplementation*) impl)->getSurveyTool();
}

void PlayerCreatureAdapter::setSurveyWaypoint(WaypointObject* waypoint) {
	((PlayerCreatureImplementation*) impl)->setSurveyWaypoint(waypoint);
}

WaypointObject* PlayerCreatureAdapter::getSurveyWaypoint() {
	return ((PlayerCreatureImplementation*) impl)->getSurveyWaypoint();
}

CreatureObject* PlayerCreatureAdapter::getConversatingCreature() {
	return ((PlayerCreatureImplementation*) impl)->getConversatingCreature();
}

/*
 *	PlayerCreatureHelper
 */

PlayerCreatureHelper* PlayerCreatureHelper::staticInitializer = PlayerCreatureHelper::instance();

PlayerCreatureHelper::PlayerCreatureHelper() {
	className = "PlayerCreature";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void PlayerCreatureHelper::finalizeHelper() {
	PlayerCreatureHelper::finalize();
}

DistributedObject* PlayerCreatureHelper::instantiateObject() {
	return new PlayerCreature(DummyConstructorParameter::instance());
}

DistributedObjectServant* PlayerCreatureHelper::instantiateServant() {
	return new PlayerCreatureImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* PlayerCreatureHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new PlayerCreatureAdapter((PlayerCreatureImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

