/*
 *	server/zone/objects/player/PlayerCreature.cpp generated by engine3 IDL compiler 0.60
 */

#include "PlayerCreature.h"

#include "server/zone/ZoneClientSession.h"

#include "server/zone/objects/player/PlayerObject.h"

#include "server/zone/objects/tangible/Container.h"

/*
 *	PlayerCreatureStub
 */

PlayerCreature::PlayerCreature(LuaObject* templateData) : CreatureObject(DummyConstructorParameter::instance()) {
	_impl = new PlayerCreatureImplementation(templateData);
	_impl->_setStub(this);

	((PlayerCreatureImplementation*) _impl)->_serializationHelperMethod();
}

PlayerCreature::PlayerCreature(DummyConstructorParameter* param) : CreatureObject(param) {
}

PlayerCreature::~PlayerCreature() {
}

void PlayerCreature::sendMessage(BaseMessage* msg) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(msg);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->sendMessage(msg);
}

void PlayerCreature::sendToOwner(bool doClose) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addBooleanParameter(doClose);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->sendToOwner(doClose);
}

ZoneClientSession* PlayerCreature::getClient() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		return (ZoneClientSession*) method.executeWithObjectReturn();
	} else
		return ((PlayerCreatureImplementation*) _impl)->getClient();
}

byte PlayerCreature::getRaceID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return method.executeWithByteReturn();
	} else
		return ((PlayerCreatureImplementation*) _impl)->getRaceID();
}

void PlayerCreature::setClient(ZoneClientSession* cli) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(cli);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->setClient(cli);
}

void PlayerCreature::setBiography(const UnicodeString& bio) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((PlayerCreatureImplementation*) _impl)->setBiography(bio);
}

void PlayerCreature::setRaceID(byte id) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addByteParameter(id);

		method.executeWithVoidReturn();
	} else
		((PlayerCreatureImplementation*) _impl)->setRaceID(id);
}

/*
 *	PlayerCreatureImplementation
 */

PlayerCreatureImplementation::~PlayerCreatureImplementation() {
}

void PlayerCreatureImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (PlayerCreature*) stub;
	CreatureObjectImplementation::_setStub(stub);
}

DistributedObjectStub* PlayerCreatureImplementation::_getStub() {
	return _this;
}

PlayerCreatureImplementation::operator const PlayerCreature*() {
	return _this;
}

void PlayerCreatureImplementation::_serializationHelperMethod() {
	CreatureObjectImplementation::_serializationHelperMethod();

	addSerializableVariable("owner", owner);
	addSerializableVariable("onlineStatus", &onlineStatus);
	addSerializableVariable("accountID", &accountID);
	addSerializableVariable("characterID", &characterID);
	addSerializableVariable("baseID", &baseID);
	addSerializableVariable("raceFile", &raceFile);
	addSerializableVariable("raceID", &raceID);
	addSerializableVariable("startingLocation", &startingLocation);
	addSerializableVariable("startingProfession", &startingProfession);
	addSerializableVariable("biography", &biography);
	addSerializableVariable("lotsRemaining", &lotsRemaining);
	addSerializableVariable("itemShift", &itemShift);
	addSerializableVariable("incapacitationCounter", &incapacitationCounter);
	addSerializableVariable("pvpRating", &pvpRating);
	addSerializableVariable("factionStatus", &factionStatus);
}

void PlayerCreatureImplementation::sendMessage(BaseMessage* msg) {
	// server/zone/objects/player/PlayerCreature.idl(98):  
	if (owner == NULL){
	// server/zone/objects/player/PlayerCreature.idl(99):  msg.finalize();
	msg->finalize();
	// server/zone/objects/player/PlayerCreature.idl(100):  return;
	return;
}

	else {
	// server/zone/objects/player/PlayerCreature.idl(102):  owner.sendMessage(msg);
	owner->sendMessage(msg);
}
}

ZoneClientSession* PlayerCreatureImplementation::getClient() {
	// server/zone/objects/player/PlayerCreature.idl(109):  return owner;
	return owner;
}

byte PlayerCreatureImplementation::getRaceID() {
	// server/zone/objects/player/PlayerCreature.idl(113):  return raceID;
	return raceID;
}

void PlayerCreatureImplementation::setClient(ZoneClientSession* cli) {
	// server/zone/objects/player/PlayerCreature.idl(117):  owner = cli;
	owner = cli;
}

void PlayerCreatureImplementation::setBiography(const UnicodeString& bio) {
	// server/zone/objects/player/PlayerCreature.idl(121):  biography = bio;
	biography = bio;
}

void PlayerCreatureImplementation::setRaceID(byte id) {
	// server/zone/objects/player/PlayerCreature.idl(125):  raceID = id;
	raceID = id;
}

/*
 *	PlayerCreatureAdapter
 */

PlayerCreatureAdapter::PlayerCreatureAdapter(PlayerCreatureImplementation* obj) : CreatureObjectAdapter(obj) {
}

Packet* PlayerCreatureAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		sendMessage((BaseMessage*) inv->getObjectParameter());
		break;
	case 7:
		sendToOwner(inv->getBooleanParameter());
		break;
	case 8:
		resp->insertLong(getClient()->_getObjectID());
		break;
	case 9:
		resp->insertByte(getRaceID());
		break;
	case 10:
		setClient((ZoneClientSession*) inv->getObjectParameter());
		break;
	case 11:
		setRaceID(inv->getByteParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void PlayerCreatureAdapter::sendMessage(BaseMessage* msg) {
	return ((PlayerCreatureImplementation*) impl)->sendMessage(msg);
}

void PlayerCreatureAdapter::sendToOwner(bool doClose) {
	return ((PlayerCreatureImplementation*) impl)->sendToOwner(doClose);
}

ZoneClientSession* PlayerCreatureAdapter::getClient() {
	return ((PlayerCreatureImplementation*) impl)->getClient();
}

byte PlayerCreatureAdapter::getRaceID() {
	return ((PlayerCreatureImplementation*) impl)->getRaceID();
}

void PlayerCreatureAdapter::setClient(ZoneClientSession* cli) {
	return ((PlayerCreatureImplementation*) impl)->setClient(cli);
}

void PlayerCreatureAdapter::setRaceID(byte id) {
	return ((PlayerCreatureImplementation*) impl)->setRaceID(id);
}

/*
 *	PlayerCreatureHelper
 */

PlayerCreatureHelper* PlayerCreatureHelper::staticInitializer = PlayerCreatureHelper::instance();

PlayerCreatureHelper::PlayerCreatureHelper() {
	className = "PlayerCreature";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void PlayerCreatureHelper::finalizeHelper() {
	PlayerCreatureHelper::finalize();
}

DistributedObject* PlayerCreatureHelper::instantiateObject() {
	return new PlayerCreature(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* PlayerCreatureHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new PlayerCreatureAdapter((PlayerCreatureImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

