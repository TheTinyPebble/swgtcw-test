/*
 *	server/zone/objects/player/Player.h generated by engine3 IDL compiler 0.60
 */

#ifndef PLAYER_H_
#define PLAYER_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "engine/lua/LuaObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

namespace server {
namespace zone {
namespace objects {
namespace player {

class Player : public CreatureObject {
public:
	Player(LuaObject* templ, SceneObject* parent = NULL);

protected:
	Player(DummyConstructorParameter* param);

	virtual ~Player();

	friend class PlayerHelper;
};

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

#include "server/zone/objects/creature/CreatureObjectImplementation.h"

namespace server {
namespace zone {
namespace objects {
namespace player {

class PlayerImplementation : public CreatureObjectImplementation {
	int test;

public:
	PlayerImplementation(LuaObject* templ, SceneObject* parent = NULL);

	Player* _this;

protected:
	virtual ~PlayerImplementation();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();
};

class PlayerAdapter : public CreatureObjectAdapter {
public:
	PlayerAdapter(PlayerImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

};

class PlayerHelper : public DistributedObjectClassHelper, public Singleton<PlayerHelper> {
	static PlayerHelper* staticInitializer;

public:
	PlayerHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<PlayerHelper>;
};

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

#endif /*PLAYER_H_*/
