/*
 *	server/zone/objects/player/sessions/StructureStatusSession.cpp generated by engine3 IDL compiler 0.60
 */

#include "StructureStatusSession.h"

/*
 *	StructureStatusSessionStub
 */

enum {RPC_INITIALIZESESSION__ = 6,RPC_UPDATESTATUS__,RPC_CANCELSESSION__,RPC_CLEARSESSION__};

StructureStatusSession::StructureStatusSession(StructureObject* structure) : Facade(DummyConstructorParameter::instance()) {
	StructureStatusSessionImplementation* _implementation = new StructureStatusSessionImplementation(structure);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("StructureStatusSession");
}

StructureStatusSession::StructureStatusSession(DummyConstructorParameter* param) : Facade(param) {
	_setClassName("StructureStatusSession");
}

StructureStatusSession::~StructureStatusSession() {
}



int StructureStatusSession::initializeSession() {
	StructureStatusSessionImplementation* _implementation = static_cast<StructureStatusSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZESESSION__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->initializeSession();
}

int StructureStatusSession::updateStatus() {
	StructureStatusSessionImplementation* _implementation = static_cast<StructureStatusSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATESTATUS__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->updateStatus();
}

int StructureStatusSession::cancelSession() {
	StructureStatusSessionImplementation* _implementation = static_cast<StructureStatusSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CANCELSESSION__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->cancelSession();
}

int StructureStatusSession::clearSession() {
	StructureStatusSessionImplementation* _implementation = static_cast<StructureStatusSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLEARSESSION__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->clearSession();
}

DistributedObjectServant* StructureStatusSession::_getImplementation() {

	_updated = true;
	return _impl;
}

void StructureStatusSession::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	StructureStatusSessionImplementation
 */

StructureStatusSessionImplementation::StructureStatusSessionImplementation(DummyConstructorParameter* param) : FacadeImplementation(param) {
	_initializeImplementation();
}


StructureStatusSessionImplementation::~StructureStatusSessionImplementation() {
}


void StructureStatusSessionImplementation::finalize() {
}

void StructureStatusSessionImplementation::_initializeImplementation() {
	_setClassHelper(StructureStatusSessionHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void StructureStatusSessionImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<StructureStatusSession*>(stub);
	FacadeImplementation::_setStub(stub);
}

DistributedObjectStub* StructureStatusSessionImplementation::_getStub() {
	return _this;
}

StructureStatusSessionImplementation::operator const StructureStatusSession*() {
	return _this;
}

void StructureStatusSessionImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void StructureStatusSessionImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void StructureStatusSessionImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void StructureStatusSessionImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void StructureStatusSessionImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void StructureStatusSessionImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void StructureStatusSessionImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void StructureStatusSessionImplementation::_serializationHelperMethod() {
	FacadeImplementation::_serializationHelperMethod();

	_setClassName("StructureStatusSession");

}

void StructureStatusSessionImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(StructureStatusSessionImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool StructureStatusSessionImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (FacadeImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "StructureStatusSession.structureObject") {
		TypeInfo<ManagedWeakReference<StructureObject* > >::parseFromBinaryStream(&structureObject, stream);
		return true;
	}


	return false;
}

void StructureStatusSessionImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = StructureStatusSessionImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int StructureStatusSessionImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = FacadeImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;
	_name = "StructureStatusSession.structureObject";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<StructureObject* > >::toBinaryStream(&structureObject, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 1;
}

StructureStatusSessionImplementation::StructureStatusSessionImplementation(StructureObject* structure) {
	_initializeImplementation();
	// server/zone/objects/player/sessions/StructureStatusSession.idl():  		Logger.setLoggingName("StructureStatusSession");
	Logger::setLoggingName("StructureStatusSession");
	// server/zone/objects/player/sessions/StructureStatusSession.idl():  		Logger.setLogging(true);
	Logger::setLogging(true);
	// server/zone/objects/player/sessions/StructureStatusSession.idl():  		structureObject = structure;
	structureObject = structure;
	// server/zone/objects/player/sessions/StructureStatusSession.idl():  		initializeSession();
	initializeSession();
}

int StructureStatusSessionImplementation::initializeSession() {
	// server/zone/objects/player/sessions/StructureStatusSession.idl():  		return 0;
	return 0;
}

int StructureStatusSessionImplementation::updateStatus() {
	// server/zone/objects/player/sessions/StructureStatusSession.idl():  		return 0;
	return 0;
}

int StructureStatusSessionImplementation::cancelSession() {
	// server/zone/objects/player/sessions/StructureStatusSession.idl():  		return 0;
	return 0;
}

int StructureStatusSessionImplementation::clearSession() {
	// server/zone/objects/player/sessions/StructureStatusSession.idl():  		return 0;
	return 0;
}

/*
 *	StructureStatusSessionAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


StructureStatusSessionAdapter::StructureStatusSessionAdapter(StructureStatusSession* obj) : FacadeAdapter(obj) {
}

void StructureStatusSessionAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZESESSION__:
		{
			resp->insertSignedInt(initializeSession());
		}
		break;
	case RPC_UPDATESTATUS__:
		{
			resp->insertSignedInt(updateStatus());
		}
		break;
	case RPC_CANCELSESSION__:
		{
			resp->insertSignedInt(cancelSession());
		}
		break;
	case RPC_CLEARSESSION__:
		{
			resp->insertSignedInt(clearSession());
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

int StructureStatusSessionAdapter::initializeSession() {
	return (static_cast<StructureStatusSession*>(stub))->initializeSession();
}

int StructureStatusSessionAdapter::updateStatus() {
	return (static_cast<StructureStatusSession*>(stub))->updateStatus();
}

int StructureStatusSessionAdapter::cancelSession() {
	return (static_cast<StructureStatusSession*>(stub))->cancelSession();
}

int StructureStatusSessionAdapter::clearSession() {
	return (static_cast<StructureStatusSession*>(stub))->clearSession();
}

/*
 *	StructureStatusSessionHelper
 */

StructureStatusSessionHelper* StructureStatusSessionHelper::staticInitializer = StructureStatusSessionHelper::instance();

StructureStatusSessionHelper::StructureStatusSessionHelper() {
	className = "StructureStatusSession";

	Core::getObjectBroker()->registerClass(className, this);
}

void StructureStatusSessionHelper::finalizeHelper() {
	StructureStatusSessionHelper::finalize();
}

DistributedObject* StructureStatusSessionHelper::instantiateObject() {
	return new StructureStatusSession(DummyConstructorParameter::instance());
}

DistributedObjectServant* StructureStatusSessionHelper::instantiateServant() {
	return new StructureStatusSessionImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* StructureStatusSessionHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new StructureStatusSessionAdapter(static_cast<StructureStatusSession*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

