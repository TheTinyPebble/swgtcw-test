/*
 *	server/zone/objects/player/sessions/vendor/VendorAdBarkingSession.cpp generated by engine3 IDL compiler 0.60
 */

#include "VendorAdBarkingSession.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	VendorAdBarkingSessionStub
 */

enum {RPC_INITIALIZESESSION__ = 6,RPC_CANCELSESSION__,RPC_CLEARSESSION__,RPC_SETMESSAGE__STRING_,RPC_SETMOOD__STRING_,RPC_SETANIMATION__STRING_,RPC_SENDPHRASEOPTIONS__,RPC_SENDCUSTOMMESSAGEINPUT__,RPC_SENDMOODSELECT__,RPC_SENDANIMATIONSELECT__,};

VendorAdBarkingSession::VendorAdBarkingSession(CreatureObject* play, SceneObject* vend) : Facade(DummyConstructorParameter::instance()) {
	VendorAdBarkingSessionImplementation* _implementation = new VendorAdBarkingSessionImplementation(play, vend);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("VendorAdBarkingSession");
}

VendorAdBarkingSession::VendorAdBarkingSession(DummyConstructorParameter* param) : Facade(param) {
	_setClassName("VendorAdBarkingSession");
}

VendorAdBarkingSession::~VendorAdBarkingSession() {
}



int VendorAdBarkingSession::initializeSession() {
	VendorAdBarkingSessionImplementation* _implementation = static_cast<VendorAdBarkingSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZESESSION__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->initializeSession();
}

int VendorAdBarkingSession::cancelSession() {
	VendorAdBarkingSessionImplementation* _implementation = static_cast<VendorAdBarkingSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CANCELSESSION__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->cancelSession();
}

int VendorAdBarkingSession::clearSession() {
	VendorAdBarkingSessionImplementation* _implementation = static_cast<VendorAdBarkingSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLEARSESSION__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->clearSession();
}

void VendorAdBarkingSession::setMessage(const String& mess) {
	VendorAdBarkingSessionImplementation* _implementation = static_cast<VendorAdBarkingSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMESSAGE__STRING_);
		method.addAsciiParameter(mess);

		method.executeWithVoidReturn();
	} else
		_implementation->setMessage(mess);
}

void VendorAdBarkingSession::setMood(const String& mo) {
	VendorAdBarkingSessionImplementation* _implementation = static_cast<VendorAdBarkingSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMOOD__STRING_);
		method.addAsciiParameter(mo);

		method.executeWithVoidReturn();
	} else
		_implementation->setMood(mo);
}

void VendorAdBarkingSession::setAnimation(const String& ani) {
	VendorAdBarkingSessionImplementation* _implementation = static_cast<VendorAdBarkingSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETANIMATION__STRING_);
		method.addAsciiParameter(ani);

		method.executeWithVoidReturn();
	} else
		_implementation->setAnimation(ani);
}

void VendorAdBarkingSession::sendPhraseOptions() {
	VendorAdBarkingSessionImplementation* _implementation = static_cast<VendorAdBarkingSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDPHRASEOPTIONS__);

		method.executeWithVoidReturn();
	} else
		_implementation->sendPhraseOptions();
}

void VendorAdBarkingSession::sendCustomMessageInput() {
	VendorAdBarkingSessionImplementation* _implementation = static_cast<VendorAdBarkingSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDCUSTOMMESSAGEINPUT__);

		method.executeWithVoidReturn();
	} else
		_implementation->sendCustomMessageInput();
}

void VendorAdBarkingSession::sendMoodSelect() {
	VendorAdBarkingSessionImplementation* _implementation = static_cast<VendorAdBarkingSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDMOODSELECT__);

		method.executeWithVoidReturn();
	} else
		_implementation->sendMoodSelect();
}

void VendorAdBarkingSession::sendAnimationSelect() {
	VendorAdBarkingSessionImplementation* _implementation = static_cast<VendorAdBarkingSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDANIMATIONSELECT__);

		method.executeWithVoidReturn();
	} else
		_implementation->sendAnimationSelect();
}

DistributedObjectServant* VendorAdBarkingSession::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

void VendorAdBarkingSession::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	VendorAdBarkingSessionImplementation
 */

VendorAdBarkingSessionImplementation::VendorAdBarkingSessionImplementation(DummyConstructorParameter* param) : FacadeImplementation(param) {
	_initializeImplementation();
}


VendorAdBarkingSessionImplementation::~VendorAdBarkingSessionImplementation() {
}


void VendorAdBarkingSessionImplementation::finalize() {
}

void VendorAdBarkingSessionImplementation::_initializeImplementation() {
	_setClassHelper(VendorAdBarkingSessionHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void VendorAdBarkingSessionImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<VendorAdBarkingSession*>(stub);
	FacadeImplementation::_setStub(stub);
}

DistributedObjectStub* VendorAdBarkingSessionImplementation::_getStub() {
	return _this.get();
}

VendorAdBarkingSessionImplementation::operator const VendorAdBarkingSession*() {
	return _this.get();
}

void VendorAdBarkingSessionImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void VendorAdBarkingSessionImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void VendorAdBarkingSessionImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void VendorAdBarkingSessionImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void VendorAdBarkingSessionImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void VendorAdBarkingSessionImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void VendorAdBarkingSessionImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void VendorAdBarkingSessionImplementation::_serializationHelperMethod() {
	FacadeImplementation::_serializationHelperMethod();

	_setClassName("VendorAdBarkingSession");

}

void VendorAdBarkingSessionImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(VendorAdBarkingSessionImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool VendorAdBarkingSessionImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (FacadeImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "VendorAdBarkingSession.owner") {
		TypeInfo<ManagedReference<CreatureObject* > >::parseFromBinaryStream(&owner, stream);
		return true;
	}

	if (_name == "VendorAdBarkingSession.vendor") {
		TypeInfo<ManagedReference<SceneObject* > >::parseFromBinaryStream(&vendor, stream);
		return true;
	}

	if (_name == "VendorAdBarkingSession.advertisingMod") {
		TypeInfo<int >::parseFromBinaryStream(&advertisingMod, stream);
		return true;
	}


	return false;
}

void VendorAdBarkingSessionImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = VendorAdBarkingSessionImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int VendorAdBarkingSessionImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = FacadeImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;
	_name = "VendorAdBarkingSession.owner";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<CreatureObject* > >::toBinaryStream(&owner, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "VendorAdBarkingSession.vendor";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<SceneObject* > >::toBinaryStream(&vendor, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "VendorAdBarkingSession.advertisingMod";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&advertisingMod, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 3;
}

VendorAdBarkingSessionImplementation::VendorAdBarkingSessionImplementation(CreatureObject* play, SceneObject* vend) {
	_initializeImplementation();
	// server/zone/objects/player/sessions/vendor/VendorAdBarkingSession.idl():  		Logger.setLoggingName("VendorAdBarkingSession");
	Logger::setLoggingName("VendorAdBarkingSession");
	// server/zone/objects/player/sessions/vendor/VendorAdBarkingSession.idl():  		Logger.setLogging(true);
	Logger::setLogging(true);
	// server/zone/objects/player/sessions/vendor/VendorAdBarkingSession.idl():  		owner = play;
	owner = play;
	// server/zone/objects/player/sessions/vendor/VendorAdBarkingSession.idl():  		vendor = vend;
	vendor = vend;
}

int VendorAdBarkingSessionImplementation::cancelSession() {
	// server/zone/objects/player/sessions/vendor/VendorAdBarkingSession.idl():  		clearSession(
	if (owner != NULL)	// server/zone/objects/player/sessions/vendor/VendorAdBarkingSession.idl():  			owner.dropActiveSession(SessionFacadeType.VENDORADBARKING);
	owner->dropActiveSession(SessionFacadeType::VENDORADBARKING);
	// server/zone/objects/player/sessions/vendor/VendorAdBarkingSession.idl():  		clearSession();
	clearSession();
	// server/zone/objects/player/sessions/vendor/VendorAdBarkingSession.idl():  		return 0;
	return 0;
}

int VendorAdBarkingSessionImplementation::clearSession() {
	// server/zone/objects/player/sessions/vendor/VendorAdBarkingSession.idl():  		owner = null;
	owner = NULL;
	// server/zone/objects/player/sessions/vendor/VendorAdBarkingSession.idl():  		return 0;
	return 0;
}

void VendorAdBarkingSessionImplementation::setMessage(const String& mess) {
	// server/zone/objects/player/sessions/vendor/VendorAdBarkingSession.idl():  		message = mess;
	message = mess;
	// server/zone/objects/player/sessions/vendor/VendorAdBarkingSession.idl():  		sendMoodSelect();
	sendMoodSelect();
}

void VendorAdBarkingSessionImplementation::setMood(const String& mo) {
	// server/zone/objects/player/sessions/vendor/VendorAdBarkingSession.idl():  		mood = mo;
	mood = mo;
	// server/zone/objects/player/sessions/vendor/VendorAdBarkingSession.idl():  		sendAnimationSelect();
	sendAnimationSelect();
}

void VendorAdBarkingSessionImplementation::setAnimation(const String& ani) {
	// server/zone/objects/player/sessions/vendor/VendorAdBarkingSession.idl():  		animation = ani;
	animation = ani;
	// server/zone/objects/player/sessions/vendor/VendorAdBarkingSession.idl():  		completeSession();
	completeSession();
}

/*
 *	VendorAdBarkingSessionAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


VendorAdBarkingSessionAdapter::VendorAdBarkingSessionAdapter(VendorAdBarkingSession* obj) : FacadeAdapter(obj) {
}

void VendorAdBarkingSessionAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZESESSION__:
		{
			resp->insertSignedInt(initializeSession());
		}
		break;
	case RPC_CANCELSESSION__:
		{
			resp->insertSignedInt(cancelSession());
		}
		break;
	case RPC_CLEARSESSION__:
		{
			resp->insertSignedInt(clearSession());
		}
		break;
	case RPC_SETMESSAGE__STRING_:
		{
			String mess; 
			setMessage(inv->getAsciiParameter(mess));
		}
		break;
	case RPC_SETMOOD__STRING_:
		{
			String mo; 
			setMood(inv->getAsciiParameter(mo));
		}
		break;
	case RPC_SETANIMATION__STRING_:
		{
			String ani; 
			setAnimation(inv->getAsciiParameter(ani));
		}
		break;
	case RPC_SENDPHRASEOPTIONS__:
		{
			sendPhraseOptions();
		}
		break;
	case RPC_SENDCUSTOMMESSAGEINPUT__:
		{
			sendCustomMessageInput();
		}
		break;
	case RPC_SENDMOODSELECT__:
		{
			sendMoodSelect();
		}
		break;
	case RPC_SENDANIMATIONSELECT__:
		{
			sendAnimationSelect();
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

int VendorAdBarkingSessionAdapter::initializeSession() {
	return (static_cast<VendorAdBarkingSession*>(stub))->initializeSession();
}

int VendorAdBarkingSessionAdapter::cancelSession() {
	return (static_cast<VendorAdBarkingSession*>(stub))->cancelSession();
}

int VendorAdBarkingSessionAdapter::clearSession() {
	return (static_cast<VendorAdBarkingSession*>(stub))->clearSession();
}

void VendorAdBarkingSessionAdapter::setMessage(const String& mess) {
	(static_cast<VendorAdBarkingSession*>(stub))->setMessage(mess);
}

void VendorAdBarkingSessionAdapter::setMood(const String& mo) {
	(static_cast<VendorAdBarkingSession*>(stub))->setMood(mo);
}

void VendorAdBarkingSessionAdapter::setAnimation(const String& ani) {
	(static_cast<VendorAdBarkingSession*>(stub))->setAnimation(ani);
}

void VendorAdBarkingSessionAdapter::sendPhraseOptions() {
	(static_cast<VendorAdBarkingSession*>(stub))->sendPhraseOptions();
}

void VendorAdBarkingSessionAdapter::sendCustomMessageInput() {
	(static_cast<VendorAdBarkingSession*>(stub))->sendCustomMessageInput();
}

void VendorAdBarkingSessionAdapter::sendMoodSelect() {
	(static_cast<VendorAdBarkingSession*>(stub))->sendMoodSelect();
}

void VendorAdBarkingSessionAdapter::sendAnimationSelect() {
	(static_cast<VendorAdBarkingSession*>(stub))->sendAnimationSelect();
}

/*
 *	VendorAdBarkingSessionHelper
 */

VendorAdBarkingSessionHelper* VendorAdBarkingSessionHelper::staticInitializer = VendorAdBarkingSessionHelper::instance();

VendorAdBarkingSessionHelper::VendorAdBarkingSessionHelper() {
	className = "VendorAdBarkingSession";

	Core::getObjectBroker()->registerClass(className, this);
}

void VendorAdBarkingSessionHelper::finalizeHelper() {
	VendorAdBarkingSessionHelper::finalize();
}

DistributedObject* VendorAdBarkingSessionHelper::instantiateObject() {
	return new VendorAdBarkingSession(DummyConstructorParameter::instance());
}

DistributedObjectServant* VendorAdBarkingSessionHelper::instantiateServant() {
	return new VendorAdBarkingSessionImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* VendorAdBarkingSessionHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new VendorAdBarkingSessionAdapter(static_cast<VendorAdBarkingSession*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

