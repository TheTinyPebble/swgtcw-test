/*
 *	server/zone/objects/player/sessions/crafting/CraftingSession.h generated by engine3 IDL compiler 0.60
 */

#ifndef CRAFTINGSESSION_H_
#define CRAFTINGSESSION_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace player {

class PlayerObject;

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace tool {

class CraftingTool;

} // namespace tool
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::tool;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace tool {

class CraftingStation;

} // namespace tool
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::tool;

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

namespace server {
namespace zone {
namespace objects {
namespace tangible {

class TangibleObject;

} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible;

namespace server {
namespace zone {
namespace objects {
namespace manufactureschematic {

class ManufactureSchematic;

} // namespace manufactureschematic
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::manufactureschematic;

namespace server {
namespace zone {
namespace objects {
namespace draftschematic {

class DraftSchematic;

} // namespace draftschematic
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::draftschematic;

namespace server {
namespace zone {
namespace managers {
namespace crafting {

class CraftingManager;

} // namespace crafting
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::crafting;

#include "server/zone/objects/scene/SessionFacadeType.h"

#include "server/zone/templates/customization/CustomizationVariable.h"

#include "engine/util/Facade.h"

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace sessions {
namespace crafting {

class CraftingSession : public Facade {
public:
	CraftingSession(CreatureObject* creature);

	/**
	 * The crafting tool and station have been identified pre calling initializeSession
	 */
	int initializeSession(CraftingTool* tool, CraftingStation* station);

	/**
	 * Cancels the current session
	 */
	int cancelSession();

	/**
	 * 
	 */
	int clearSession();

	ManagedWeakReference<ManufactureSchematic* > getSchematic();

	/**
	 * The SelectDraftSchematicCommand uses this
	 */
	void selectDraftSchematic(int index);

	/**
	 * Sends ingredients on ManufactureSchematic::synchronizedUIListen
	 */
	void sendIngredientForUIListen();

	/**
	 * The CraftingAddIngredientCallback executes this method
	 * when an object is added in the crafting window
	 */
	void addIngredient(TangibleObject* tano, int slotUpdated, int clientCounter);

	/**
	 * The CraftingRemoveIngredientCallback executes this method
	 * when an object is removed from the crafting window
	 */
	void removeIngredient(TangibleObject* tano, int slotUpdated, int clientCounter);

	/**
	 * The NextCraftingStageCommand uses this
	 */
	void nextCraftingStage(int clientCounter);

	/**
	 * The CraftingExperimentCallback executes this method
	 * when a player experiments in a crafting tool
	 */
	void experiment(int rowsAttempted, const String& expAttempt, int clientCounter);

	/**
	 * The CraftingCustomizationCallback executes this method 
	 * a user customizes a tano in the crafting tool
	 */
	void customization(const String& name, byte templateChoice, int schematicCount, const String& customizationString);

	/**
	 * CreatePrototypeCommand calls this
	 */
	void createPrototype(int clientCounter, bool practice);

	/**
	 * CreateManfSchematicCommand calls this
	 */
	void createManufactureSchematic(int clientCounter);

	int getState();

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	CraftingSession(DummyConstructorParameter* param);

	virtual ~CraftingSession();

	friend class CraftingSessionHelper;
};

} // namespace crafting
} // namespace sessions
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::sessions::crafting;

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace sessions {
namespace crafting {

class CraftingSessionImplementation : public FacadeImplementation {
protected:
	ManagedWeakReference<CreatureObject* > crafter;

	ManagedWeakReference<PlayerObject* > crafterGhost;

	ManagedWeakReference<CraftingTool* > craftingTool;

	ManagedWeakReference<CraftingStation* > craftingStation;

	ManagedWeakReference<CraftingManager* > craftingManager;

	ManagedWeakReference<ManufactureSchematic* > manufactureSchematic;

	ManagedWeakReference<TangibleObject* > prototype;

	int experimentationPointsTotal;

	int experimentationPointsUsed;

	byte state;

	Vector<ManagedReference<DraftSchematic* > > currentSchematicList;

	byte assemblyResult;

	byte experimentationResult;

	unsigned long long lastExperimentTime;

	VectorMap<String, Reference<CustomizationVariable*> > variables;

public:
	CraftingSessionImplementation(CreatureObject* creature);

	CraftingSessionImplementation(DummyConstructorParameter* param);

	/**
	 * The crafting tool and station have been identified pre calling initializeSession
	 */
	int initializeSession(CraftingTool* tool, CraftingStation* station);

private:
	/**
	 * Sends the packets and creates the objects to start
	 * the crafting session
	 */
	int startSession();

public:
	/**
	 * Cancels the current session
	 */
	int cancelSession();

	/**
	 * 
	 */
	int clearSession();

	ManagedWeakReference<ManufactureSchematic* > getSchematic();

private:
	/**
	 * Closes an open crafting windows
	 */
	void closeCraftingWindow(int clientCounter);

	/**
	 * Sends various crafting messages
	 */
	void sendSlotMessage(int counter, int message);

public:
	/**
	 * The SelectDraftSchematicCommand uses this
	 */
	void selectDraftSchematic(int index);

private:
	/**
	 * Creates the needed objects when a schematic is selected
	 */
	bool createSessionObjects(DraftSchematic* draftSchematic);

	/**
	 * Creates the manufacture schematic
	 */
	bool createManufactureSchematic(DraftSchematic* draftschematic);

	/**
	 * Creates the prototype to be crafted
	 */
	bool createPrototypeObject(DraftSchematic* draftschematic);

public:
	/**
	 * Sends ingredients on ManufactureSchematic::synchronizedUIListen
	 */
	void sendIngredientForUIListen();

	/**
	 * The CraftingAddIngredientCallback executes this method
	 * when an object is added in the crafting window
	 */
	void addIngredient(TangibleObject* tano, int slotUpdated, int clientCounter);

	/**
	 * The CraftingRemoveIngredientCallback executes this method
	 * when an object is removed from the crafting window
	 */
	void removeIngredient(TangibleObject* tano, int slotUpdated, int clientCounter);

	/**
	 * The NextCraftingStageCommand uses this
	 */
	void nextCraftingStage(int clientCounter);

private:
	/**
	 * Ends the ingredient phase, resources/components are
	 * unrecoverable
	 */
	void initialAssembly(int clientCounter);

	/**
	 * Sends the crafting process to customization
	 */
	void finishAssembly(int clientCounter);

public:
	/**
	 * The CraftingExperimentCallback executes this method
	 * when a player experiments in a crafting tool
	 */
	void experiment(int rowsAttempted, const String& expAttempt, int clientCounter);

	/**
	 * The CraftingCustomizationCallback executes this method 
	 * a user customizes a tano in the crafting tool
	 */
	void customization(const String& name, byte templateChoice, int schematicCount, const String& customizationString);

private:
	/**
	 * 
	 */
	void finishStage1(int clientCounter);

	/**
	 * 
	 */
	void finishStage2(int clientCounter);

public:
	/**
	 * CreatePrototypeCommand calls this
	 */
	void createPrototype(int clientCounter, bool practice);

	/**
	 * CreateManfSchematicCommand calls this
	 */
	void createManufactureSchematic(int clientCounter);

private:
	/**
	 * Starts tasks for counting down and creating item
	 * based on complexity
	 */
	void startCreationTasks(int timer, bool practice);

public:
	int getState();

private:
	void addSkillMods();

	void addWeaponDots();

public:
	WeakReference<CraftingSession*> _this;

	operator const CraftingSession*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~CraftingSessionImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class CraftingSession;
};

class CraftingSessionAdapter : public FacadeAdapter {
public:
	CraftingSessionAdapter(CraftingSession* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	int initializeSession(CraftingTool* tool, CraftingStation* station);

	int cancelSession();

	int clearSession();

	ManagedWeakReference<ManufactureSchematic* > getSchematic();

	void selectDraftSchematic(int index);

	void sendIngredientForUIListen();

	void addIngredient(TangibleObject* tano, int slotUpdated, int clientCounter);

	void removeIngredient(TangibleObject* tano, int slotUpdated, int clientCounter);

	void nextCraftingStage(int clientCounter);

	void experiment(int rowsAttempted, const String& expAttempt, int clientCounter);

	void customization(const String& name, byte templateChoice, int schematicCount, const String& customizationString);

	void createPrototype(int clientCounter, bool practice);

	void createManufactureSchematic(int clientCounter);

	int getState();

};

class CraftingSessionHelper : public DistributedObjectClassHelper, public Singleton<CraftingSessionHelper> {
	static CraftingSessionHelper* staticInitializer;

public:
	CraftingSessionHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<CraftingSessionHelper>;
};

} // namespace crafting
} // namespace sessions
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::sessions::crafting;

#endif /*CRAFTINGSESSION_H_*/
