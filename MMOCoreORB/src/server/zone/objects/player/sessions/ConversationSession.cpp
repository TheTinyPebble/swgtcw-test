/*
 *	server/zone/objects/player/sessions/ConversationSession.cpp generated by engine3 IDL compiler 0.60
 */

#include "ConversationSession.h"

#include "server/zone/templates/mobile/ConversationScreen.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	ConversationSessionStub
 */

enum {RPC_GETNPC__};

ConversationSession::ConversationSession(CreatureObject* conversingCreature) : Facade(DummyConstructorParameter::instance()) {
	ConversationSessionImplementation* _implementation = new ConversationSessionImplementation(conversingCreature);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("ConversationSession");
}

ConversationSession::ConversationSession(DummyConstructorParameter* param) : Facade(param) {
	_setClassName("ConversationSession");
}

ConversationSession::~ConversationSession() {
}



void ConversationSession::setLastConversationScreen(ConversationScreen* screen) {
	ConversationSessionImplementation* _implementation = static_cast<ConversationSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->setLastConversationScreen(screen);
}

ConversationScreen* ConversationSession::getLastConversationScreen() {
	ConversationSessionImplementation* _implementation = static_cast<ConversationSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getLastConversationScreen();
}

ManagedWeakReference<CreatureObject* > ConversationSession::getNPC() {
	ConversationSessionImplementation* _implementation = static_cast<ConversationSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETNPC__);

		return static_cast<CreatureObject*>(method.executeWithObjectReturn());
	} else
		return _implementation->getNPC();
}

DistributedObjectServant* ConversationSession::_getImplementation() {

	_updated = true;
	return _impl;
}

void ConversationSession::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	ConversationSessionImplementation
 */

ConversationSessionImplementation::ConversationSessionImplementation(DummyConstructorParameter* param) : FacadeImplementation(param) {
	_initializeImplementation();
}


ConversationSessionImplementation::~ConversationSessionImplementation() {
}


void ConversationSessionImplementation::finalize() {
}

void ConversationSessionImplementation::_initializeImplementation() {
	_setClassHelper(ConversationSessionHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void ConversationSessionImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<ConversationSession*>(stub);
	FacadeImplementation::_setStub(stub);
}

DistributedObjectStub* ConversationSessionImplementation::_getStub() {
	return _this.get();
}

ConversationSessionImplementation::operator const ConversationSession*() {
	return _this.get();
}

void ConversationSessionImplementation::lock(bool doLock) {
	_this.get()->lock(doLock);
}

void ConversationSessionImplementation::lock(ManagedObject* obj) {
	_this.get()->lock(obj);
}

void ConversationSessionImplementation::rlock(bool doLock) {
	_this.get()->rlock(doLock);
}

void ConversationSessionImplementation::wlock(bool doLock) {
	_this.get()->wlock(doLock);
}

void ConversationSessionImplementation::wlock(ManagedObject* obj) {
	_this.get()->wlock(obj);
}

void ConversationSessionImplementation::unlock(bool doLock) {
	_this.get()->unlock(doLock);
}

void ConversationSessionImplementation::runlock(bool doLock) {
	_this.get()->runlock(doLock);
}

void ConversationSessionImplementation::_serializationHelperMethod() {
	FacadeImplementation::_serializationHelperMethod();

	_setClassName("ConversationSession");

}

void ConversationSessionImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(ConversationSessionImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ConversationSessionImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (FacadeImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "ConversationSession.lastConversationScreen") {
		TypeInfo<Reference<ConversationScreen* > >::parseFromBinaryStream(&lastConversationScreen, stream);
		return true;
	}

	if (_name == "ConversationSession.npc") {
		TypeInfo<ManagedWeakReference<CreatureObject* > >::parseFromBinaryStream(&npc, stream);
		return true;
	}


	return false;
}

void ConversationSessionImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ConversationSessionImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ConversationSessionImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = FacadeImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;
	_name = "ConversationSession.lastConversationScreen";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Reference<ConversationScreen* > >::toBinaryStream(&lastConversationScreen, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "ConversationSession.npc";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<CreatureObject* > >::toBinaryStream(&npc, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 2;
}

ConversationSessionImplementation::ConversationSessionImplementation(CreatureObject* conversingCreature) {
	_initializeImplementation();
	// server/zone/objects/player/sessions/ConversationSession.idl():  		lastConversationScreen = null;
	lastConversationScreen = NULL;
	// server/zone/objects/player/sessions/ConversationSession.idl():  		npc = conversingCreature;
	npc = conversingCreature;
}

void ConversationSessionImplementation::setLastConversationScreen(ConversationScreen* screen) {
	// server/zone/objects/player/sessions/ConversationSession.idl():  		lastConversationScreen = screen;
	lastConversationScreen = screen;
}

ConversationScreen* ConversationSessionImplementation::getLastConversationScreen() {
	// server/zone/objects/player/sessions/ConversationSession.idl():  		return lastConversationScreen;
	return lastConversationScreen;
}

ManagedWeakReference<CreatureObject* > ConversationSessionImplementation::getNPC() {
	// server/zone/objects/player/sessions/ConversationSession.idl():  		return npc;
	return npc;
}

/*
 *	ConversationSessionAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


ConversationSessionAdapter::ConversationSessionAdapter(ConversationSession* obj) : FacadeAdapter(obj) {
}

void ConversationSessionAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_GETNPC__:
		{
			resp->insertLong(getNPC().get()->_getObjectID());
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

ManagedWeakReference<CreatureObject* > ConversationSessionAdapter::getNPC() {
	return (static_cast<ConversationSession*>(stub))->getNPC();
}

/*
 *	ConversationSessionHelper
 */

ConversationSessionHelper* ConversationSessionHelper::staticInitializer = ConversationSessionHelper::instance();

ConversationSessionHelper::ConversationSessionHelper() {
	className = "ConversationSession";

	Core::getObjectBroker()->registerClass(className, this);
}

void ConversationSessionHelper::finalizeHelper() {
	ConversationSessionHelper::finalize();
}

DistributedObject* ConversationSessionHelper::instantiateObject() {
	return new ConversationSession(DummyConstructorParameter::instance());
}

DistributedObjectServant* ConversationSessionHelper::instantiateServant() {
	return new ConversationSessionImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ConversationSessionHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ConversationSessionAdapter(static_cast<ConversationSession*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

