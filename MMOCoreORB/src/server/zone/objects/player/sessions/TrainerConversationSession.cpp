/*
 *	server/zone/objects/player/sessions/TrainerConversationSession.cpp generated by engine3 IDL compiler 0.60
 */

#include "TrainerConversationSession.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	TrainerConversationSessionStub
 */

enum {RPC_CLEARTRAINABLESKILLS__ = 6,RPC_ADDTRAINABLESKILL__STRING_,RPC_GETTRAINABLESKILLS__INT_,RPC_GETTRAINABLESKILLSCOUNT__,RPC_CLEARNEXTSKILLS__,RPC_ADDNEXTSKILL__STRING_,RPC_GETNEXTSKILL__INT_,RPC_GETNEXTSKILLSCOUNT__,RPC_SETSELECTEDSKILL__STRING_,RPC_GETSELECTEDSKILL__,RPC_GETMASTERSKILL__,RPC_SETMASTERSKILL__STRING_,RPC_ADDADDITIONALMASTERSKILL__STRING_,RPC_GETADDITIONALMASTERSKILL__INT_,RPC_GETADDITIONALMASTERSKILLSCOUNT__};

TrainerConversationSession::TrainerConversationSession(CreatureObject* npc) : ConversationSession(DummyConstructorParameter::instance()) {
	TrainerConversationSessionImplementation* _implementation = new TrainerConversationSessionImplementation(npc);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("TrainerConversationSession");
}

TrainerConversationSession::TrainerConversationSession(DummyConstructorParameter* param) : ConversationSession(param) {
	_setClassName("TrainerConversationSession");
}

TrainerConversationSession::~TrainerConversationSession() {
}



void TrainerConversationSession::clearTrainableSkills() {
	TrainerConversationSessionImplementation* _implementation = static_cast<TrainerConversationSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLEARTRAINABLESKILLS__);

		method.executeWithVoidReturn();
	} else
		_implementation->clearTrainableSkills();
}

void TrainerConversationSession::addTrainableSkill(String& skillName) {
	TrainerConversationSessionImplementation* _implementation = static_cast<TrainerConversationSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDTRAINABLESKILL__STRING_);
		method.addAsciiParameter(skillName);

		method.executeWithVoidReturn();
	} else
		_implementation->addTrainableSkill(skillName);
}

String TrainerConversationSession::getTrainableSkills(int selectedOption) {
	TrainerConversationSessionImplementation* _implementation = static_cast<TrainerConversationSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTRAINABLESKILLS__INT_);
		method.addSignedIntParameter(selectedOption);

		String _return_getTrainableSkills;
		method.executeWithAsciiReturn(_return_getTrainableSkills);
		return _return_getTrainableSkills;
	} else
		return _implementation->getTrainableSkills(selectedOption);
}

int TrainerConversationSession::getTrainableSkillsCount() {
	TrainerConversationSessionImplementation* _implementation = static_cast<TrainerConversationSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTRAINABLESKILLSCOUNT__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getTrainableSkillsCount();
}

void TrainerConversationSession::clearNextSkills() {
	TrainerConversationSessionImplementation* _implementation = static_cast<TrainerConversationSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLEARNEXTSKILLS__);

		method.executeWithVoidReturn();
	} else
		_implementation->clearNextSkills();
}

void TrainerConversationSession::addNextSkill(String& skillName) {
	TrainerConversationSessionImplementation* _implementation = static_cast<TrainerConversationSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDNEXTSKILL__STRING_);
		method.addAsciiParameter(skillName);

		method.executeWithVoidReturn();
	} else
		_implementation->addNextSkill(skillName);
}

String TrainerConversationSession::getNextSkill(int selectedOption) {
	TrainerConversationSessionImplementation* _implementation = static_cast<TrainerConversationSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETNEXTSKILL__INT_);
		method.addSignedIntParameter(selectedOption);

		String _return_getNextSkill;
		method.executeWithAsciiReturn(_return_getNextSkill);
		return _return_getNextSkill;
	} else
		return _implementation->getNextSkill(selectedOption);
}

int TrainerConversationSession::getNextSkillsCount() {
	TrainerConversationSessionImplementation* _implementation = static_cast<TrainerConversationSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETNEXTSKILLSCOUNT__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getNextSkillsCount();
}

void TrainerConversationSession::setSelectedSkill(String& skillName) {
	TrainerConversationSessionImplementation* _implementation = static_cast<TrainerConversationSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSELECTEDSKILL__STRING_);
		method.addAsciiParameter(skillName);

		method.executeWithVoidReturn();
	} else
		_implementation->setSelectedSkill(skillName);
}

String TrainerConversationSession::getSelectedSkill() {
	TrainerConversationSessionImplementation* _implementation = static_cast<TrainerConversationSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSELECTEDSKILL__);

		String _return_getSelectedSkill;
		method.executeWithAsciiReturn(_return_getSelectedSkill);
		return _return_getSelectedSkill;
	} else
		return _implementation->getSelectedSkill();
}

String TrainerConversationSession::getMasterSkill() {
	TrainerConversationSessionImplementation* _implementation = static_cast<TrainerConversationSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMASTERSKILL__);

		String _return_getMasterSkill;
		method.executeWithAsciiReturn(_return_getMasterSkill);
		return _return_getMasterSkill;
	} else
		return _implementation->getMasterSkill();
}

void TrainerConversationSession::setMasterSkill(String& skillName) {
	TrainerConversationSessionImplementation* _implementation = static_cast<TrainerConversationSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMASTERSKILL__STRING_);
		method.addAsciiParameter(skillName);

		method.executeWithVoidReturn();
	} else
		_implementation->setMasterSkill(skillName);
}

void TrainerConversationSession::addAdditionalMasterSkill(String& skillName) {
	TrainerConversationSessionImplementation* _implementation = static_cast<TrainerConversationSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDADDITIONALMASTERSKILL__STRING_);
		method.addAsciiParameter(skillName);

		method.executeWithVoidReturn();
	} else
		_implementation->addAdditionalMasterSkill(skillName);
}

String TrainerConversationSession::getAdditionalMasterSkill(int selectedOption) {
	TrainerConversationSessionImplementation* _implementation = static_cast<TrainerConversationSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETADDITIONALMASTERSKILL__INT_);
		method.addSignedIntParameter(selectedOption);

		String _return_getAdditionalMasterSkill;
		method.executeWithAsciiReturn(_return_getAdditionalMasterSkill);
		return _return_getAdditionalMasterSkill;
	} else
		return _implementation->getAdditionalMasterSkill(selectedOption);
}

int TrainerConversationSession::getAdditionalMasterSkillsCount() {
	TrainerConversationSessionImplementation* _implementation = static_cast<TrainerConversationSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETADDITIONALMASTERSKILLSCOUNT__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getAdditionalMasterSkillsCount();
}

DistributedObjectServant* TrainerConversationSession::_getImplementation() {

	_updated = true;
	return _impl;
}

void TrainerConversationSession::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	TrainerConversationSessionImplementation
 */

TrainerConversationSessionImplementation::TrainerConversationSessionImplementation(DummyConstructorParameter* param) : ConversationSessionImplementation(param) {
	_initializeImplementation();
}


TrainerConversationSessionImplementation::~TrainerConversationSessionImplementation() {
}


void TrainerConversationSessionImplementation::finalize() {
}

void TrainerConversationSessionImplementation::_initializeImplementation() {
	_setClassHelper(TrainerConversationSessionHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void TrainerConversationSessionImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<TrainerConversationSession*>(stub);
	ConversationSessionImplementation::_setStub(stub);
}

DistributedObjectStub* TrainerConversationSessionImplementation::_getStub() {
	return _this;
}

TrainerConversationSessionImplementation::operator const TrainerConversationSession*() {
	return _this;
}

void TrainerConversationSessionImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void TrainerConversationSessionImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void TrainerConversationSessionImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void TrainerConversationSessionImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void TrainerConversationSessionImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void TrainerConversationSessionImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void TrainerConversationSessionImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void TrainerConversationSessionImplementation::_serializationHelperMethod() {
	ConversationSessionImplementation::_serializationHelperMethod();

	_setClassName("TrainerConversationSession");

}

void TrainerConversationSessionImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(TrainerConversationSessionImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool TrainerConversationSessionImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ConversationSessionImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "TrainerConversationSession.trainableSkills") {
		TypeInfo<Vector<String> >::parseFromBinaryStream(&trainableSkills, stream);
		return true;
	}

	if (_name == "TrainerConversationSession.nextSkills") {
		TypeInfo<Vector<String> >::parseFromBinaryStream(&nextSkills, stream);
		return true;
	}

	if (_name == "TrainerConversationSession.masterSkill") {
		TypeInfo<String >::parseFromBinaryStream(&masterSkill, stream);
		return true;
	}

	if (_name == "TrainerConversationSession.additionalMasterSkills") {
		TypeInfo<Vector<String> >::parseFromBinaryStream(&additionalMasterSkills, stream);
		return true;
	}

	if (_name == "TrainerConversationSession.selectedSkill") {
		TypeInfo<String >::parseFromBinaryStream(&selectedSkill, stream);
		return true;
	}


	return false;
}

void TrainerConversationSessionImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = TrainerConversationSessionImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int TrainerConversationSessionImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ConversationSessionImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;
	_name = "TrainerConversationSession.trainableSkills";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<String> >::toBinaryStream(&trainableSkills, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "TrainerConversationSession.nextSkills";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<String> >::toBinaryStream(&nextSkills, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "TrainerConversationSession.masterSkill";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&masterSkill, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "TrainerConversationSession.additionalMasterSkills";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<String> >::toBinaryStream(&additionalMasterSkills, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "TrainerConversationSession.selectedSkill";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&selectedSkill, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 5;
}

TrainerConversationSessionImplementation::TrainerConversationSessionImplementation(CreatureObject* npc) : ConversationSessionImplementation(npc) {
	_initializeImplementation();
}

void TrainerConversationSessionImplementation::addTrainableSkill(String& skillName) {
	// server/zone/objects/player/sessions/TrainerConversationSession.idl():  		trainableSkills.add(skillName);
	(&trainableSkills)->add(skillName);
}

String TrainerConversationSessionImplementation::getTrainableSkills(int selectedOption) {
	// server/zone/objects/player/sessions/TrainerConversationSession.idl():  		return trainableSkills.get(selectedOption);
	return (&trainableSkills)->get(selectedOption);
}

int TrainerConversationSessionImplementation::getTrainableSkillsCount() {
	// server/zone/objects/player/sessions/TrainerConversationSession.idl():  		return trainableSkills.size();
	return (&trainableSkills)->size();
}

void TrainerConversationSessionImplementation::addNextSkill(String& skillName) {
	// server/zone/objects/player/sessions/TrainerConversationSession.idl():  		nextSkills.add(skillName);
	(&nextSkills)->add(skillName);
}

String TrainerConversationSessionImplementation::getNextSkill(int selectedOption) {
	// server/zone/objects/player/sessions/TrainerConversationSession.idl():  		return nextSkills.get(selectedOption);
	return (&nextSkills)->get(selectedOption);
}

int TrainerConversationSessionImplementation::getNextSkillsCount() {
	// server/zone/objects/player/sessions/TrainerConversationSession.idl():  		return nextSkills.size();
	return (&nextSkills)->size();
}

void TrainerConversationSessionImplementation::setSelectedSkill(String& skillName) {
	// server/zone/objects/player/sessions/TrainerConversationSession.idl():  		selectedSkill = skillName;
	selectedSkill = skillName;
}

String TrainerConversationSessionImplementation::getSelectedSkill() {
	// server/zone/objects/player/sessions/TrainerConversationSession.idl():  		return selectedSkill;
	return selectedSkill;
}

String TrainerConversationSessionImplementation::getMasterSkill() {
	// server/zone/objects/player/sessions/TrainerConversationSession.idl():  		return masterSkill;
	return masterSkill;
}

void TrainerConversationSessionImplementation::setMasterSkill(String& skillName) {
	// server/zone/objects/player/sessions/TrainerConversationSession.idl():  		masterSkill = skillName;
	masterSkill = skillName;
}

void TrainerConversationSessionImplementation::addAdditionalMasterSkill(String& skillName) {
	// server/zone/objects/player/sessions/TrainerConversationSession.idl():  		additionalMasterSkills.add(skillName);
	(&additionalMasterSkills)->add(skillName);
}

String TrainerConversationSessionImplementation::getAdditionalMasterSkill(int selectedOption) {
	// server/zone/objects/player/sessions/TrainerConversationSession.idl():  		return additionalMasterSkills.get(selectedOption);
	return (&additionalMasterSkills)->get(selectedOption);
}

int TrainerConversationSessionImplementation::getAdditionalMasterSkillsCount() {
	// server/zone/objects/player/sessions/TrainerConversationSession.idl():  		return additionalMasterSkills.size();
	return (&additionalMasterSkills)->size();
}

/*
 *	TrainerConversationSessionAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


TrainerConversationSessionAdapter::TrainerConversationSessionAdapter(TrainerConversationSession* obj) : ConversationSessionAdapter(obj) {
}

void TrainerConversationSessionAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_CLEARTRAINABLESKILLS__:
		{
			clearTrainableSkills();
		}
		break;
	case RPC_ADDTRAINABLESKILL__STRING_:
		{
			String skillName; 
			addTrainableSkill(inv->getAsciiParameter(skillName));
		}
		break;
	case RPC_GETTRAINABLESKILLS__INT_:
		{
			resp->insertAscii(getTrainableSkills(inv->getSignedIntParameter()));
		}
		break;
	case RPC_GETTRAINABLESKILLSCOUNT__:
		{
			resp->insertSignedInt(getTrainableSkillsCount());
		}
		break;
	case RPC_CLEARNEXTSKILLS__:
		{
			clearNextSkills();
		}
		break;
	case RPC_ADDNEXTSKILL__STRING_:
		{
			String skillName; 
			addNextSkill(inv->getAsciiParameter(skillName));
		}
		break;
	case RPC_GETNEXTSKILL__INT_:
		{
			resp->insertAscii(getNextSkill(inv->getSignedIntParameter()));
		}
		break;
	case RPC_GETNEXTSKILLSCOUNT__:
		{
			resp->insertSignedInt(getNextSkillsCount());
		}
		break;
	case RPC_SETSELECTEDSKILL__STRING_:
		{
			String skillName; 
			setSelectedSkill(inv->getAsciiParameter(skillName));
		}
		break;
	case RPC_GETSELECTEDSKILL__:
		{
			resp->insertAscii(getSelectedSkill());
		}
		break;
	case RPC_GETMASTERSKILL__:
		{
			resp->insertAscii(getMasterSkill());
		}
		break;
	case RPC_SETMASTERSKILL__STRING_:
		{
			String skillName; 
			setMasterSkill(inv->getAsciiParameter(skillName));
		}
		break;
	case RPC_ADDADDITIONALMASTERSKILL__STRING_:
		{
			String skillName; 
			addAdditionalMasterSkill(inv->getAsciiParameter(skillName));
		}
		break;
	case RPC_GETADDITIONALMASTERSKILL__INT_:
		{
			resp->insertAscii(getAdditionalMasterSkill(inv->getSignedIntParameter()));
		}
		break;
	case RPC_GETADDITIONALMASTERSKILLSCOUNT__:
		{
			resp->insertSignedInt(getAdditionalMasterSkillsCount());
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void TrainerConversationSessionAdapter::clearTrainableSkills() {
	(static_cast<TrainerConversationSession*>(stub))->clearTrainableSkills();
}

void TrainerConversationSessionAdapter::addTrainableSkill(String& skillName) {
	(static_cast<TrainerConversationSession*>(stub))->addTrainableSkill(skillName);
}

String TrainerConversationSessionAdapter::getTrainableSkills(int selectedOption) {
	return (static_cast<TrainerConversationSession*>(stub))->getTrainableSkills(selectedOption);
}

int TrainerConversationSessionAdapter::getTrainableSkillsCount() {
	return (static_cast<TrainerConversationSession*>(stub))->getTrainableSkillsCount();
}

void TrainerConversationSessionAdapter::clearNextSkills() {
	(static_cast<TrainerConversationSession*>(stub))->clearNextSkills();
}

void TrainerConversationSessionAdapter::addNextSkill(String& skillName) {
	(static_cast<TrainerConversationSession*>(stub))->addNextSkill(skillName);
}

String TrainerConversationSessionAdapter::getNextSkill(int selectedOption) {
	return (static_cast<TrainerConversationSession*>(stub))->getNextSkill(selectedOption);
}

int TrainerConversationSessionAdapter::getNextSkillsCount() {
	return (static_cast<TrainerConversationSession*>(stub))->getNextSkillsCount();
}

void TrainerConversationSessionAdapter::setSelectedSkill(String& skillName) {
	(static_cast<TrainerConversationSession*>(stub))->setSelectedSkill(skillName);
}

String TrainerConversationSessionAdapter::getSelectedSkill() {
	return (static_cast<TrainerConversationSession*>(stub))->getSelectedSkill();
}

String TrainerConversationSessionAdapter::getMasterSkill() {
	return (static_cast<TrainerConversationSession*>(stub))->getMasterSkill();
}

void TrainerConversationSessionAdapter::setMasterSkill(String& skillName) {
	(static_cast<TrainerConversationSession*>(stub))->setMasterSkill(skillName);
}

void TrainerConversationSessionAdapter::addAdditionalMasterSkill(String& skillName) {
	(static_cast<TrainerConversationSession*>(stub))->addAdditionalMasterSkill(skillName);
}

String TrainerConversationSessionAdapter::getAdditionalMasterSkill(int selectedOption) {
	return (static_cast<TrainerConversationSession*>(stub))->getAdditionalMasterSkill(selectedOption);
}

int TrainerConversationSessionAdapter::getAdditionalMasterSkillsCount() {
	return (static_cast<TrainerConversationSession*>(stub))->getAdditionalMasterSkillsCount();
}

/*
 *	TrainerConversationSessionHelper
 */

TrainerConversationSessionHelper* TrainerConversationSessionHelper::staticInitializer = TrainerConversationSessionHelper::instance();

TrainerConversationSessionHelper::TrainerConversationSessionHelper() {
	className = "TrainerConversationSession";

	Core::getObjectBroker()->registerClass(className, this);
}

void TrainerConversationSessionHelper::finalizeHelper() {
	TrainerConversationSessionHelper::finalize();
}

DistributedObject* TrainerConversationSessionHelper::instantiateObject() {
	return new TrainerConversationSession(DummyConstructorParameter::instance());
}

DistributedObjectServant* TrainerConversationSessionHelper::instantiateServant() {
	return new TrainerConversationSessionImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* TrainerConversationSessionHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new TrainerConversationSessionAdapter(static_cast<TrainerConversationSession*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

