/*
 *	server/zone/objects/player/sessions/EntertainingSession.cpp generated by engine3 IDL compiler 0.60
 */

#include "EntertainingSession.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/objects/tangible/Instrument.h"

#include "server/zone/objects/player/events/EntertainingSessionTask.h"

#include "server/zone/objects/player/EntertainingObserver.h"

#include "server/zone/objects/tangible/Instrument.h"

/*
 *	EntertainingSessionStub
 */

EntertainingSession::EntertainingSession(CreatureObject* ent) : Facade(DummyConstructorParameter::instance()) {
	EntertainingSessionImplementation* _implementation = new EntertainingSessionImplementation(ent);
	_impl = _implementation;
	_impl->_setStub(this);
}

EntertainingSession::EntertainingSession(DummyConstructorParameter* param) : Facade(param) {
}

EntertainingSession::~EntertainingSession() {
}


void EntertainingSession::doEntertainerPatronEffects() {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		_implementation->doEntertainerPatronEffects();
}

void EntertainingSession::doPerformanceAction() {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		_implementation->doPerformanceAction();
}

void EntertainingSession::addEntertainerFlourishBuff() {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		method.executeWithVoidReturn();
	} else
		_implementation->addEntertainerFlourishBuff();
}

void EntertainingSession::startDancing(const String& dance, const String& animation) {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addAsciiParameter(dance);
		method.addAsciiParameter(animation);

		method.executeWithVoidReturn();
	} else
		_implementation->startDancing(dance, animation);
}

void EntertainingSession::startPlayingMusic(const String& song, const String& instrumentAnimation, int instrid) {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addAsciiParameter(song);
		method.addAsciiParameter(instrumentAnimation);
		method.addSignedIntParameter(instrid);

		method.executeWithVoidReturn();
	} else
		_implementation->startPlayingMusic(song, instrumentAnimation, instrid);
}

void EntertainingSession::startEntertaining() {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		method.executeWithVoidReturn();
	} else
		_implementation->startEntertaining();
}

void EntertainingSession::healWounds(CreatureObject* creature, float woundHeal, float shockHeal) {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addObjectParameter(creature);
		method.addFloatParameter(woundHeal);
		method.addFloatParameter(shockHeal);

		method.executeWithVoidReturn();
	} else
		_implementation->healWounds(creature, woundHeal, shockHeal);
}

bool EntertainingSession::isInEntertainingBuilding(CreatureObject* creature) {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addObjectParameter(creature);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isInEntertainingBuilding(creature);
}

void EntertainingSession::doFlourish(int flourishNumber) {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addSignedIntParameter(flourishNumber);

		method.executeWithVoidReturn();
	} else
		_implementation->doFlourish(flourishNumber);
}

bool EntertainingSession::canGiveEntertainBuff() {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->canGiveEntertainBuff();
}

void EntertainingSession::addFlourishXp(int xp) {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addSignedIntParameter(xp);

		method.executeWithVoidReturn();
	} else
		_implementation->addFlourishXp(xp);
}

void EntertainingSession::addHealingXp(int xp) {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addSignedIntParameter(xp);

		method.executeWithVoidReturn();
	} else
		_implementation->addHealingXp(xp);
}

int EntertainingSession::initializeSession() {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->initializeSession();
}

int EntertainingSession::cancelSession() {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->cancelSession();
}

int EntertainingSession::clearSession() {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->clearSession();
}

void EntertainingSession::stopPlayingMusic() {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);

		method.executeWithVoidReturn();
	} else
		_implementation->stopPlayingMusic();
}

void EntertainingSession::stopDancing() {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);

		method.executeWithVoidReturn();
	} else
		_implementation->stopDancing();
}

void EntertainingSession::activateAction() {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);

		method.executeWithVoidReturn();
	} else
		_implementation->activateAction();
}

void EntertainingSession::startTickTask() {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);

		method.executeWithVoidReturn();
	} else
		_implementation->startTickTask();
}

void EntertainingSession::addEntertainerBuffDuration(CreatureObject* creature, int performanceType, float duration) {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->addEntertainerBuffDuration(creature, performanceType, duration);
}

void EntertainingSession::addEntertainerBuffStrength(CreatureObject* creature, int performanceType, float strength) {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->addEntertainerBuffStrength(creature, performanceType, strength);
}

void EntertainingSession::setEntertainerBuffDuration(CreatureObject* creature, int performanceType, float duration) {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->setEntertainerBuffDuration(creature, performanceType, duration);
}

void EntertainingSession::setEntertainerBuffStrength(CreatureObject* creature, int performanceType, float strength) {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->setEntertainerBuffStrength(creature, performanceType, strength);
}

int EntertainingSession::getEntertainerBuffStrength(CreatureObject* creature, int performanceType) {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);
		method.addObjectParameter(creature);
		method.addSignedIntParameter(performanceType);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getEntertainerBuffStrength(creature, performanceType);
}

int EntertainingSession::getEntertainerBuffDuration(CreatureObject* creature, int performanceType) {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);
		method.addObjectParameter(creature);
		method.addSignedIntParameter(performanceType);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getEntertainerBuffDuration(creature, performanceType);
}

void EntertainingSession::sendEntertainingUpdate(CreatureObject* creature, float entval, const String& performance, unsigned int perfcntr, int instrid) {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);
		method.addObjectParameter(creature);
		method.addFloatParameter(entval);
		method.addAsciiParameter(performance);
		method.addUnsignedIntParameter(perfcntr);
		method.addSignedIntParameter(instrid);

		method.executeWithVoidReturn();
	} else
		_implementation->sendEntertainingUpdate(creature, entval, performance, perfcntr, instrid);
}

void EntertainingSession::sendEntertainmentUpdate(CreatureObject* creature, unsigned long long entid, const String& mood, bool updateEntValue) {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);
		method.addObjectParameter(creature);
		method.addUnsignedLongParameter(entid);
		method.addAsciiParameter(mood);
		method.addBooleanParameter(updateEntValue);

		method.executeWithVoidReturn();
	} else
		_implementation->sendEntertainmentUpdate(creature, entid, mood, updateEntValue);
}

void EntertainingSession::activateEntertainerBuff(CreatureObject* creature, int performanceType) {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);
		method.addObjectParameter(creature);
		method.addSignedIntParameter(performanceType);

		method.executeWithVoidReturn();
	} else
		_implementation->activateEntertainerBuff(creature, performanceType);
}

Instrument* EntertainingSession::getInstrument(CreatureObject* creature) {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);
		method.addObjectParameter(creature);

		return (Instrument*) method.executeWithObjectReturn();
	} else
		return _implementation->getInstrument(creature);
}

void EntertainingSession::addWatcher(CreatureObject* creature) {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);
		method.addObjectParameter(creature);

		method.executeWithVoidReturn();
	} else
		_implementation->addWatcher(creature);
}

void EntertainingSession::addListener(CreatureObject* listener) {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);
		method.addObjectParameter(listener);

		method.executeWithVoidReturn();
	} else
		_implementation->addListener(listener);
}

bool EntertainingSession::isDancing() {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isDancing();
}

bool EntertainingSession::isPlayingMusic() {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isPlayingMusic();
}

bool EntertainingSession::isAcceptingBandFlourishes() {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isAcceptingBandFlourishes();
}

void EntertainingSession::setAcceptingBandFlourishes(bool val) {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 36);
		method.addBooleanParameter(val);

		method.executeWithVoidReturn();
	} else
		_implementation->setAcceptingBandFlourishes(val);
}

void EntertainingSession::removeWatcher(CreatureObject* creature) {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 37);
		method.addObjectParameter(creature);

		method.executeWithVoidReturn();
	} else
		_implementation->removeWatcher(creature);
}

void EntertainingSession::removeListener(CreatureObject* creature) {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 38);
		method.addObjectParameter(creature);

		method.executeWithVoidReturn();
	} else
		_implementation->removeListener(creature);
}

void EntertainingSession::setPerformanceName(const String& name) {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 39);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		_implementation->setPerformanceName(name);
}

void EntertainingSession::setDancing(bool val) {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 40);
		method.addBooleanParameter(val);

		method.executeWithVoidReturn();
	} else
		_implementation->setDancing(val);
}

void EntertainingSession::setTargetInstrument(bool var) {
	EntertainingSessionImplementation* _implementation = (EntertainingSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 41);
		method.addBooleanParameter(var);

		method.executeWithVoidReturn();
	} else
		_implementation->setTargetInstrument(var);
}

DistributedObjectServant* EntertainingSession::_getImplementation() {

	_updated = true;
	return _impl;
}

void EntertainingSession::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	EntertainingSessionImplementation
 */

EntertainingSessionImplementation::EntertainingSessionImplementation(DummyConstructorParameter* param) : FacadeImplementation(param) {
	_initializeImplementation();
}


EntertainingSessionImplementation::~EntertainingSessionImplementation() {
	EntertainingSessionImplementation::finalize();
}


void EntertainingSessionImplementation::_initializeImplementation() {
	_setClassHelper(EntertainingSessionHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void EntertainingSessionImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (EntertainingSession*) stub;
	FacadeImplementation::_setStub(stub);
}

DistributedObjectStub* EntertainingSessionImplementation::_getStub() {
	return _this;
}

EntertainingSessionImplementation::operator const EntertainingSession*() {
	return _this;
}

void EntertainingSessionImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void EntertainingSessionImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void EntertainingSessionImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void EntertainingSessionImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void EntertainingSessionImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void EntertainingSessionImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void EntertainingSessionImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void EntertainingSessionImplementation::_serializationHelperMethod() {
	FacadeImplementation::_serializationHelperMethod();

	_setClassName("EntertainingSession");

}

void EntertainingSessionImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(EntertainingSessionImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool EntertainingSessionImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (FacadeImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "entertainer") {
		TypeInfo<ManagedWeakReference<CreatureObject* > >::parseFromBinaryStream(&entertainer, stream);
		return true;
	}

	if (_name == "observer") {
		TypeInfo<ManagedReference<EntertainingObserver* > >::parseFromBinaryStream(&observer, stream);
		return true;
	}

	if (_name == "watchers") {
		TypeInfo<EntertainingDataMap >::parseFromBinaryStream(&watchers, stream);
		return true;
	}

	if (_name == "listeners") {
		TypeInfo<EntertainingDataMap >::parseFromBinaryStream(&listeners, stream);
		return true;
	}

	if (_name == "nextTick") {
		TypeInfo<Time >::parseFromBinaryStream(&nextTick, stream);
		return true;
	}

	if (_name == "performanceName") {
		TypeInfo<String >::parseFromBinaryStream(&performanceName, stream);
		return true;
	}

	if (_name == "dancing") {
		TypeInfo<bool >::parseFromBinaryStream(&dancing, stream);
		return true;
	}

	if (_name == "playingMusic") {
		TypeInfo<bool >::parseFromBinaryStream(&playingMusic, stream);
		return true;
	}

	if (_name == "flourishXp") {
		TypeInfo<int >::parseFromBinaryStream(&flourishXp, stream);
		return true;
	}

	if (_name == "healingXp") {
		TypeInfo<int >::parseFromBinaryStream(&healingXp, stream);
		return true;
	}

	if (_name == "flourishCount") {
		TypeInfo<int >::parseFromBinaryStream(&flourishCount, stream);
		return true;
	}

	if (_name == "acceptingBandFlourishes") {
		TypeInfo<bool >::parseFromBinaryStream(&acceptingBandFlourishes, stream);
		return true;
	}

	if (_name == "targetInstrument") {
		TypeInfo<bool >::parseFromBinaryStream(&targetInstrument, stream);
		return true;
	}

	if (_name == "externalInstrument") {
		TypeInfo<ManagedReference<Instrument* > >::parseFromBinaryStream(&externalInstrument, stream);
		return true;
	}


	return false;
}

void EntertainingSessionImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = EntertainingSessionImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int EntertainingSessionImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "entertainer";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedWeakReference<CreatureObject* > >::toBinaryStream(&entertainer, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "observer";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<EntertainingObserver* > >::toBinaryStream(&observer, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "watchers";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<EntertainingDataMap >::toBinaryStream(&watchers, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "listeners";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<EntertainingDataMap >::toBinaryStream(&listeners, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "nextTick";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<Time >::toBinaryStream(&nextTick, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "performanceName";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<String >::toBinaryStream(&performanceName, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "dancing";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<bool >::toBinaryStream(&dancing, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "playingMusic";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<bool >::toBinaryStream(&playingMusic, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "flourishXp";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&flourishXp, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "healingXp";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&healingXp, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "flourishCount";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&flourishCount, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "acceptingBandFlourishes";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<bool >::toBinaryStream(&acceptingBandFlourishes, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "targetInstrument";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<bool >::toBinaryStream(&targetInstrument, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "externalInstrument";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<Instrument* > >::toBinaryStream(&externalInstrument, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 14 + FacadeImplementation::writeObjectMembers(stream);
}

EntertainingSessionImplementation::EntertainingSessionImplementation(CreatureObject* ent) {
	_initializeImplementation();
	// server/zone/objects/player/sessions/EntertainingSession.idl():  		entertainer = ent;
	entertainer = ent;
	// server/zone/objects/player/sessions/EntertainingSession.idl():  		flourishXp = 0;
	flourishXp = 0;
	// server/zone/objects/player/sessions/EntertainingSession.idl():  		healingXp = 0;
	healingXp = 0;
	// server/zone/objects/player/sessions/EntertainingSession.idl():  		flourishCount = 0;
	flourishCount = 0;
	// server/zone/objects/player/sessions/EntertainingSession.idl():  		observer = null;
	observer = NULL;
	// server/zone/objects/player/sessions/EntertainingSession.idl():  		dancing = false;
	dancing = false;
	// server/zone/objects/player/sessions/EntertainingSession.idl():  		playingMusic = false;
	playingMusic = false;
	// server/zone/objects/player/sessions/EntertainingSession.idl():  		acceptingBandFlourishes = true;
	acceptingBandFlourishes = true;
	// server/zone/objects/player/sessions/EntertainingSession.idl():  		targetInstrument = false;
	targetInstrument = false;
	// server/zone/objects/player/sessions/EntertainingSession.idl():  		watchers.setNoDuplicateInsertPlan();
	(&watchers)->setNoDuplicateInsertPlan();
	// server/zone/objects/player/sessions/EntertainingSession.idl():  		listeners.setNoDuplicateInsertPlan();
	(&listeners)->setNoDuplicateInsertPlan();
	// server/zone/objects/player/sessions/EntertainingSession.idl():  		Logger.setLoggingName("EntertainingSession");
	Logger::setLoggingName("EntertainingSession");
	// server/zone/objects/player/sessions/EntertainingSession.idl():  		Logger.setLogging(false);
	Logger::setLogging(false);
}

void EntertainingSessionImplementation::finalize() {
}

void EntertainingSessionImplementation::addFlourishXp(int xp) {
	// server/zone/objects/player/sessions/EntertainingSession.idl():  		flourishXp 
	if (flourishCount > 2)	// server/zone/objects/player/sessions/EntertainingSession.idl():  			return;
	return;
	// server/zone/objects/player/sessions/EntertainingSession.idl():  		flourishXp = flourishXp + xp;
	flourishXp = flourishXp + xp;
	// server/zone/objects/player/sessions/EntertainingSession.idl():  		flourishCount 
	if (flourishXp > 2 * xp)	// server/zone/objects/player/sessions/EntertainingSession.idl():  			flourishXp = 2 * xp;
	flourishXp = 2 * xp;
	// server/zone/objects/player/sessions/EntertainingSession.idl():  		flourishCount = flourishCount + 1;
	flourishCount = flourishCount + 1;
}

void EntertainingSessionImplementation::addHealingXp(int xp) {
	// server/zone/objects/player/sessions/EntertainingSession.idl():  		healingXp = healingXp + xp;
	healingXp = healingXp + xp;
}

int EntertainingSessionImplementation::initializeSession() {
	// server/zone/objects/player/sessions/EntertainingSession.idl():  		return 0;
	return 0;
}

int EntertainingSessionImplementation::cancelSession() {
	// server/zone/objects/player/sessions/EntertainingSession.idl():  		stopPlayingMusic();
	stopPlayingMusic();
	// server/zone/objects/player/sessions/EntertainingSession.idl():  		stopDancing();
	stopDancing();
	// server/zone/objects/player/sessions/EntertainingSession.idl():  		return 0;
	return 0;
}

int EntertainingSessionImplementation::clearSession() {
	// server/zone/objects/player/sessions/EntertainingSession.idl():  		return 0;
	return 0;
}

bool EntertainingSessionImplementation::isDancing() {
	// server/zone/objects/player/sessions/EntertainingSession.idl():  		return dancing;
	return dancing;
}

bool EntertainingSessionImplementation::isPlayingMusic() {
	// server/zone/objects/player/sessions/EntertainingSession.idl():  		return playingMusic;
	return playingMusic;
}

bool EntertainingSessionImplementation::isAcceptingBandFlourishes() {
	// server/zone/objects/player/sessions/EntertainingSession.idl():  		return acceptingBandFlourishes;
	return acceptingBandFlourishes;
}

void EntertainingSessionImplementation::setAcceptingBandFlourishes(bool val) {
	// server/zone/objects/player/sessions/EntertainingSession.idl():  		acceptingBandFlourishes = val;
	acceptingBandFlourishes = val;
}

void EntertainingSessionImplementation::removeWatcher(CreatureObject* creature) {
	// server/zone/objects/player/sessions/EntertainingSession.idl():  		watchers.drop(creature);
	(&watchers)->drop(creature);
}

void EntertainingSessionImplementation::removeListener(CreatureObject* creature) {
	// server/zone/objects/player/sessions/EntertainingSession.idl():  		listeners.drop(creature);
	(&listeners)->drop(creature);
}

void EntertainingSessionImplementation::setPerformanceName(const String& name) {
	// server/zone/objects/player/sessions/EntertainingSession.idl():  		performanceName = name;
	performanceName = name;
}

void EntertainingSessionImplementation::setDancing(bool val) {
	// server/zone/objects/player/sessions/EntertainingSession.idl():  		dancing = val;
	dancing = val;
}

void EntertainingSessionImplementation::setTargetInstrument(bool var) {
	// server/zone/objects/player/sessions/EntertainingSession.idl():  		targetInstrument = var;
	targetInstrument = var;
}

/*
 *	EntertainingSessionAdapter
 */

EntertainingSessionAdapter::EntertainingSessionAdapter(EntertainingSessionImplementation* obj) : FacadeAdapter(obj) {
}

enum {RPC_DOENTERTAINERPATRONEFFECTS__ = 6,RPC_DOPERFORMANCEACTION__,RPC_ADDENTERTAINERFLOURISHBUFF__,RPC_STARTDANCING__STRING_STRING_,RPC_STARTPLAYINGMUSIC__STRING_STRING_INT_,RPC_STARTENTERTAINING__,RPC_FINALIZE__,RPC_HEALWOUNDS__CREATUREOBJECT_FLOAT_FLOAT_,RPC_ISINENTERTAININGBUILDING__CREATUREOBJECT_,RPC_DOFLOURISH__INT_,RPC_CANGIVEENTERTAINBUFF__,RPC_ADDFLOURISHXP__INT_,RPC_ADDHEALINGXP__INT_,RPC_INITIALIZESESSION__,RPC_CANCELSESSION__,RPC_CLEARSESSION__,RPC_STOPPLAYINGMUSIC__,RPC_STOPDANCING__,RPC_ACTIVATEACTION__,RPC_STARTTICKTASK__,RPC_GETENTERTAINERBUFFSTRENGTH__CREATUREOBJECT_INT_,RPC_GETENTERTAINERBUFFDURATION__CREATUREOBJECT_INT_,RPC_SENDENTERTAININGUPDATE__CREATUREOBJECT_FLOAT_STRING_INT_INT_,RPC_SENDENTERTAINMENTUPDATE__CREATUREOBJECT_LONG_STRING_BOOL_,RPC_ACTIVATEENTERTAINERBUFF__CREATUREOBJECT_INT_,RPC_GETINSTRUMENT__CREATUREOBJECT_,RPC_ADDWATCHER__CREATUREOBJECT_,RPC_ADDLISTENER__CREATUREOBJECT_,RPC_ISDANCING__,RPC_ISPLAYINGMUSIC__,RPC_ISACCEPTINGBANDFLOURISHES__,RPC_SETACCEPTINGBANDFLOURISHES__BOOL_,RPC_REMOVEWATCHER__CREATUREOBJECT_,RPC_REMOVELISTENER__CREATUREOBJECT_,RPC_SETPERFORMANCENAME__STRING_,RPC_SETDANCING__BOOL_,RPC_SETTARGETINSTRUMENT__BOOL_};

Packet* EntertainingSessionAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_DOENTERTAINERPATRONEFFECTS__:
		doEntertainerPatronEffects();
		break;
	case RPC_DOPERFORMANCEACTION__:
		doPerformanceAction();
		break;
	case RPC_ADDENTERTAINERFLOURISHBUFF__:
		addEntertainerFlourishBuff();
		break;
	case RPC_STARTDANCING__STRING_STRING_:
		startDancing(inv->getAsciiParameter(_param0_startDancing__String_String_), inv->getAsciiParameter(_param1_startDancing__String_String_));
		break;
	case RPC_STARTPLAYINGMUSIC__STRING_STRING_INT_:
		startPlayingMusic(inv->getAsciiParameter(_param0_startPlayingMusic__String_String_int_), inv->getAsciiParameter(_param1_startPlayingMusic__String_String_int_), inv->getSignedIntParameter());
		break;
	case RPC_STARTENTERTAINING__:
		startEntertaining();
		break;
	case RPC_FINALIZE__:
		finalize();
		break;
	case RPC_HEALWOUNDS__CREATUREOBJECT_FLOAT_FLOAT_:
		healWounds((CreatureObject*) inv->getObjectParameter(), inv->getFloatParameter(), inv->getFloatParameter());
		break;
	case RPC_ISINENTERTAININGBUILDING__CREATUREOBJECT_:
		resp->insertBoolean(isInEntertainingBuilding((CreatureObject*) inv->getObjectParameter()));
		break;
	case RPC_DOFLOURISH__INT_:
		doFlourish(inv->getSignedIntParameter());
		break;
	case RPC_CANGIVEENTERTAINBUFF__:
		resp->insertBoolean(canGiveEntertainBuff());
		break;
	case RPC_ADDFLOURISHXP__INT_:
		addFlourishXp(inv->getSignedIntParameter());
		break;
	case RPC_ADDHEALINGXP__INT_:
		addHealingXp(inv->getSignedIntParameter());
		break;
	case RPC_INITIALIZESESSION__:
		resp->insertSignedInt(initializeSession());
		break;
	case RPC_CANCELSESSION__:
		resp->insertSignedInt(cancelSession());
		break;
	case RPC_CLEARSESSION__:
		resp->insertSignedInt(clearSession());
		break;
	case RPC_STOPPLAYINGMUSIC__:
		stopPlayingMusic();
		break;
	case RPC_STOPDANCING__:
		stopDancing();
		break;
	case RPC_ACTIVATEACTION__:
		activateAction();
		break;
	case RPC_STARTTICKTASK__:
		startTickTask();
		break;
	case RPC_GETENTERTAINERBUFFSTRENGTH__CREATUREOBJECT_INT_:
		resp->insertSignedInt(getEntertainerBuffStrength((CreatureObject*) inv->getObjectParameter(), inv->getSignedIntParameter()));
		break;
	case RPC_GETENTERTAINERBUFFDURATION__CREATUREOBJECT_INT_:
		resp->insertSignedInt(getEntertainerBuffDuration((CreatureObject*) inv->getObjectParameter(), inv->getSignedIntParameter()));
		break;
	case RPC_SENDENTERTAININGUPDATE__CREATUREOBJECT_FLOAT_STRING_INT_INT_:
		sendEntertainingUpdate((CreatureObject*) inv->getObjectParameter(), inv->getFloatParameter(), inv->getAsciiParameter(_param2_sendEntertainingUpdate__CreatureObject_float_String_int_int_), inv->getUnsignedIntParameter(), inv->getSignedIntParameter());
		break;
	case RPC_SENDENTERTAINMENTUPDATE__CREATUREOBJECT_LONG_STRING_BOOL_:
		sendEntertainmentUpdate((CreatureObject*) inv->getObjectParameter(), inv->getUnsignedLongParameter(), inv->getAsciiParameter(_param2_sendEntertainmentUpdate__CreatureObject_long_String_bool_), inv->getBooleanParameter());
		break;
	case RPC_ACTIVATEENTERTAINERBUFF__CREATUREOBJECT_INT_:
		activateEntertainerBuff((CreatureObject*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case RPC_GETINSTRUMENT__CREATUREOBJECT_:
		resp->insertLong(getInstrument((CreatureObject*) inv->getObjectParameter())->_getObjectID());
		break;
	case RPC_ADDWATCHER__CREATUREOBJECT_:
		addWatcher((CreatureObject*) inv->getObjectParameter());
		break;
	case RPC_ADDLISTENER__CREATUREOBJECT_:
		addListener((CreatureObject*) inv->getObjectParameter());
		break;
	case RPC_ISDANCING__:
		resp->insertBoolean(isDancing());
		break;
	case RPC_ISPLAYINGMUSIC__:
		resp->insertBoolean(isPlayingMusic());
		break;
	case RPC_ISACCEPTINGBANDFLOURISHES__:
		resp->insertBoolean(isAcceptingBandFlourishes());
		break;
	case RPC_SETACCEPTINGBANDFLOURISHES__BOOL_:
		setAcceptingBandFlourishes(inv->getBooleanParameter());
		break;
	case RPC_REMOVEWATCHER__CREATUREOBJECT_:
		removeWatcher((CreatureObject*) inv->getObjectParameter());
		break;
	case RPC_REMOVELISTENER__CREATUREOBJECT_:
		removeListener((CreatureObject*) inv->getObjectParameter());
		break;
	case RPC_SETPERFORMANCENAME__STRING_:
		setPerformanceName(inv->getAsciiParameter(_param0_setPerformanceName__String_));
		break;
	case RPC_SETDANCING__BOOL_:
		setDancing(inv->getBooleanParameter());
		break;
	case RPC_SETTARGETINSTRUMENT__BOOL_:
		setTargetInstrument(inv->getBooleanParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void EntertainingSessionAdapter::doEntertainerPatronEffects() {
	((EntertainingSessionImplementation*) impl)->doEntertainerPatronEffects();
}

void EntertainingSessionAdapter::doPerformanceAction() {
	((EntertainingSessionImplementation*) impl)->doPerformanceAction();
}

void EntertainingSessionAdapter::addEntertainerFlourishBuff() {
	((EntertainingSessionImplementation*) impl)->addEntertainerFlourishBuff();
}

void EntertainingSessionAdapter::startDancing(const String& dance, const String& animation) {
	((EntertainingSessionImplementation*) impl)->startDancing(dance, animation);
}

void EntertainingSessionAdapter::startPlayingMusic(const String& song, const String& instrumentAnimation, int instrid) {
	((EntertainingSessionImplementation*) impl)->startPlayingMusic(song, instrumentAnimation, instrid);
}

void EntertainingSessionAdapter::startEntertaining() {
	((EntertainingSessionImplementation*) impl)->startEntertaining();
}

void EntertainingSessionAdapter::finalize() {
	((EntertainingSessionImplementation*) impl)->finalize();
}

void EntertainingSessionAdapter::healWounds(CreatureObject* creature, float woundHeal, float shockHeal) {
	((EntertainingSessionImplementation*) impl)->healWounds(creature, woundHeal, shockHeal);
}

bool EntertainingSessionAdapter::isInEntertainingBuilding(CreatureObject* creature) {
	return ((EntertainingSessionImplementation*) impl)->isInEntertainingBuilding(creature);
}

void EntertainingSessionAdapter::doFlourish(int flourishNumber) {
	((EntertainingSessionImplementation*) impl)->doFlourish(flourishNumber);
}

bool EntertainingSessionAdapter::canGiveEntertainBuff() {
	return ((EntertainingSessionImplementation*) impl)->canGiveEntertainBuff();
}

void EntertainingSessionAdapter::addFlourishXp(int xp) {
	((EntertainingSessionImplementation*) impl)->addFlourishXp(xp);
}

void EntertainingSessionAdapter::addHealingXp(int xp) {
	((EntertainingSessionImplementation*) impl)->addHealingXp(xp);
}

int EntertainingSessionAdapter::initializeSession() {
	return ((EntertainingSessionImplementation*) impl)->initializeSession();
}

int EntertainingSessionAdapter::cancelSession() {
	return ((EntertainingSessionImplementation*) impl)->cancelSession();
}

int EntertainingSessionAdapter::clearSession() {
	return ((EntertainingSessionImplementation*) impl)->clearSession();
}

void EntertainingSessionAdapter::stopPlayingMusic() {
	((EntertainingSessionImplementation*) impl)->stopPlayingMusic();
}

void EntertainingSessionAdapter::stopDancing() {
	((EntertainingSessionImplementation*) impl)->stopDancing();
}

void EntertainingSessionAdapter::activateAction() {
	((EntertainingSessionImplementation*) impl)->activateAction();
}

void EntertainingSessionAdapter::startTickTask() {
	((EntertainingSessionImplementation*) impl)->startTickTask();
}

int EntertainingSessionAdapter::getEntertainerBuffStrength(CreatureObject* creature, int performanceType) {
	return ((EntertainingSessionImplementation*) impl)->getEntertainerBuffStrength(creature, performanceType);
}

int EntertainingSessionAdapter::getEntertainerBuffDuration(CreatureObject* creature, int performanceType) {
	return ((EntertainingSessionImplementation*) impl)->getEntertainerBuffDuration(creature, performanceType);
}

void EntertainingSessionAdapter::sendEntertainingUpdate(CreatureObject* creature, float entval, const String& performance, unsigned int perfcntr, int instrid) {
	((EntertainingSessionImplementation*) impl)->sendEntertainingUpdate(creature, entval, performance, perfcntr, instrid);
}

void EntertainingSessionAdapter::sendEntertainmentUpdate(CreatureObject* creature, unsigned long long entid, const String& mood, bool updateEntValue) {
	((EntertainingSessionImplementation*) impl)->sendEntertainmentUpdate(creature, entid, mood, updateEntValue);
}

void EntertainingSessionAdapter::activateEntertainerBuff(CreatureObject* creature, int performanceType) {
	((EntertainingSessionImplementation*) impl)->activateEntertainerBuff(creature, performanceType);
}

Instrument* EntertainingSessionAdapter::getInstrument(CreatureObject* creature) {
	return ((EntertainingSessionImplementation*) impl)->getInstrument(creature);
}

void EntertainingSessionAdapter::addWatcher(CreatureObject* creature) {
	((EntertainingSessionImplementation*) impl)->addWatcher(creature);
}

void EntertainingSessionAdapter::addListener(CreatureObject* listener) {
	((EntertainingSessionImplementation*) impl)->addListener(listener);
}

bool EntertainingSessionAdapter::isDancing() {
	return ((EntertainingSessionImplementation*) impl)->isDancing();
}

bool EntertainingSessionAdapter::isPlayingMusic() {
	return ((EntertainingSessionImplementation*) impl)->isPlayingMusic();
}

bool EntertainingSessionAdapter::isAcceptingBandFlourishes() {
	return ((EntertainingSessionImplementation*) impl)->isAcceptingBandFlourishes();
}

void EntertainingSessionAdapter::setAcceptingBandFlourishes(bool val) {
	((EntertainingSessionImplementation*) impl)->setAcceptingBandFlourishes(val);
}

void EntertainingSessionAdapter::removeWatcher(CreatureObject* creature) {
	((EntertainingSessionImplementation*) impl)->removeWatcher(creature);
}

void EntertainingSessionAdapter::removeListener(CreatureObject* creature) {
	((EntertainingSessionImplementation*) impl)->removeListener(creature);
}

void EntertainingSessionAdapter::setPerformanceName(const String& name) {
	((EntertainingSessionImplementation*) impl)->setPerformanceName(name);
}

void EntertainingSessionAdapter::setDancing(bool val) {
	((EntertainingSessionImplementation*) impl)->setDancing(val);
}

void EntertainingSessionAdapter::setTargetInstrument(bool var) {
	((EntertainingSessionImplementation*) impl)->setTargetInstrument(var);
}

/*
 *	EntertainingSessionHelper
 */

EntertainingSessionHelper* EntertainingSessionHelper::staticInitializer = EntertainingSessionHelper::instance();

EntertainingSessionHelper::EntertainingSessionHelper() {
	className = "EntertainingSession";

	Core::getObjectBroker()->registerClass(className, this);
}

void EntertainingSessionHelper::finalizeHelper() {
	EntertainingSessionHelper::finalize();
}

DistributedObject* EntertainingSessionHelper::instantiateObject() {
	return new EntertainingSession(DummyConstructorParameter::instance());
}

DistributedObjectServant* EntertainingSessionHelper::instantiateServant() {
	return new EntertainingSessionImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* EntertainingSessionHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new EntertainingSessionAdapter((EntertainingSessionImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

