/*
 *	server/zone/objects/player/sessions/CityTreasuryWithdrawalSession.h generated by engine3 IDL compiler 0.60
 */

#ifndef CITYTREASURYWITHDRAWALSESSION_H_
#define CITYTREASURYWITHDRAWALSESSION_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace region {

class CityRegion;

} // namespace region
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::region;

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

namespace server {
namespace zone {
namespace objects {
namespace structure {

class StructureObject;

} // namespace structure
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::structure;

#include "server/zone/objects/scene/SessionFacadeType.h"

#include "engine/util/Facade.h"

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace sessions {

class CityTreasuryWithdrawalSession : public Facade {
public:
	CityTreasuryWithdrawalSession(CreatureObject* creature, CityRegion* city, SceneObject* terminal = NULL);

	void setReason(const String& r);

	int initializeSession();

	int sendTransferBox(const String& reason);

	int withdrawCredits(int value);

	int cancelSession();

	int clearSession();

	DistributedObjectServant* _getImplementation();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	CityTreasuryWithdrawalSession(DummyConstructorParameter* param);

	virtual ~CityTreasuryWithdrawalSession();

	friend class CityTreasuryWithdrawalSessionHelper;
};

} // namespace sessions
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::sessions;

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace sessions {

class CityTreasuryWithdrawalSessionImplementation : public FacadeImplementation {
protected:
	ManagedWeakReference<CreatureObject* > creatureObject;

	ManagedWeakReference<CityRegion* > cityRegion;

	ManagedWeakReference<SceneObject* > terminalObject;

	String reason;

public:
	CityTreasuryWithdrawalSessionImplementation(CreatureObject* creature, CityRegion* city, SceneObject* terminal = NULL);

	CityTreasuryWithdrawalSessionImplementation(DummyConstructorParameter* param);

	void setReason(const String& r);

	int initializeSession();

	int sendTransferBox(const String& reason);

	int withdrawCredits(int value);

	int cancelSession();

	int clearSession();

	WeakReference<CityTreasuryWithdrawalSession*> _this;

	operator const CityTreasuryWithdrawalSession*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~CityTreasuryWithdrawalSessionImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const String& name);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class CityTreasuryWithdrawalSession;
};

class CityTreasuryWithdrawalSessionAdapter : public FacadeAdapter {
public:
	CityTreasuryWithdrawalSessionAdapter(CityTreasuryWithdrawalSession* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void setReason(const String& r);

	int initializeSession();

	int sendTransferBox(const String& reason);

	int withdrawCredits(int value);

	int cancelSession();

	int clearSession();

};

class CityTreasuryWithdrawalSessionHelper : public DistributedObjectClassHelper, public Singleton<CityTreasuryWithdrawalSessionHelper> {
	static CityTreasuryWithdrawalSessionHelper* staticInitializer;

public:
	CityTreasuryWithdrawalSessionHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<CityTreasuryWithdrawalSessionHelper>;
};

} // namespace sessions
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::sessions;

#endif /*CITYTREASURYWITHDRAWALSESSION_H_*/
