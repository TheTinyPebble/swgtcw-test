/*
 *	server/zone/objects/player/sessions/StructureSetAccessFeeSession.cpp generated by engine3 IDL compiler 0.60
 */

#include "StructureSetAccessFeeSession.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/player/PlayerObject.h"

#include "server/zone/objects/building/BuildingObject.h"

/*
 *	StructureSetAccessFeeSessionStub
 */

enum {RPC_INITIALIZESESSION__ = 6,RPC_CANCELSESSION__,RPC_CLEARSESSION__,RPC_PROMPTSETACCESSFEE__,RPC_SETACCESSFEE__INT_,RPC_PROMPTSETACCESSDURATION__,RPC_SETACCESSDURATION__INT_};

StructureSetAccessFeeSession::StructureSetAccessFeeSession(CreatureObject* play, BuildingObject* struc) : Facade(DummyConstructorParameter::instance()) {
	StructureSetAccessFeeSessionImplementation* _implementation = new StructureSetAccessFeeSessionImplementation(play, struc);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("StructureSetAccessFeeSession");
}

StructureSetAccessFeeSession::StructureSetAccessFeeSession(DummyConstructorParameter* param) : Facade(param) {
	_setClassName("StructureSetAccessFeeSession");
}

StructureSetAccessFeeSession::~StructureSetAccessFeeSession() {
}



int StructureSetAccessFeeSession::initializeSession() {
	StructureSetAccessFeeSessionImplementation* _implementation = static_cast<StructureSetAccessFeeSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZESESSION__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->initializeSession();
}

int StructureSetAccessFeeSession::cancelSession() {
	StructureSetAccessFeeSessionImplementation* _implementation = static_cast<StructureSetAccessFeeSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CANCELSESSION__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->cancelSession();
}

int StructureSetAccessFeeSession::clearSession() {
	StructureSetAccessFeeSessionImplementation* _implementation = static_cast<StructureSetAccessFeeSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLEARSESSION__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->clearSession();
}

void StructureSetAccessFeeSession::promptSetAccessFee() {
	StructureSetAccessFeeSessionImplementation* _implementation = static_cast<StructureSetAccessFeeSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_PROMPTSETACCESSFEE__);

		method.executeWithVoidReturn();
	} else
		_implementation->promptSetAccessFee();
}

void StructureSetAccessFeeSession::setAccessFee(const int fee) {
	StructureSetAccessFeeSessionImplementation* _implementation = static_cast<StructureSetAccessFeeSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETACCESSFEE__INT_);
		method.addSignedIntParameter(fee);

		method.executeWithVoidReturn();
	} else
		_implementation->setAccessFee(fee);
}

void StructureSetAccessFeeSession::promptSetAccessDuration() {
	StructureSetAccessFeeSessionImplementation* _implementation = static_cast<StructureSetAccessFeeSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_PROMPTSETACCESSDURATION__);

		method.executeWithVoidReturn();
	} else
		_implementation->promptSetAccessDuration();
}

void StructureSetAccessFeeSession::setAccessDuration(const int duration) {
	StructureSetAccessFeeSessionImplementation* _implementation = static_cast<StructureSetAccessFeeSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETACCESSDURATION__INT_);
		method.addSignedIntParameter(duration);

		method.executeWithVoidReturn();
	} else
		_implementation->setAccessDuration(duration);
}

DistributedObjectServant* StructureSetAccessFeeSession::_getImplementation() {

	_updated = true;
	return _impl;
}

void StructureSetAccessFeeSession::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	StructureSetAccessFeeSessionImplementation
 */

StructureSetAccessFeeSessionImplementation::StructureSetAccessFeeSessionImplementation(DummyConstructorParameter* param) : FacadeImplementation(param) {
	_initializeImplementation();
}


StructureSetAccessFeeSessionImplementation::~StructureSetAccessFeeSessionImplementation() {
}


void StructureSetAccessFeeSessionImplementation::finalize() {
}

void StructureSetAccessFeeSessionImplementation::_initializeImplementation() {
	_setClassHelper(StructureSetAccessFeeSessionHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void StructureSetAccessFeeSessionImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<StructureSetAccessFeeSession*>(stub);
	FacadeImplementation::_setStub(stub);
}

DistributedObjectStub* StructureSetAccessFeeSessionImplementation::_getStub() {
	return _this.get();
}

StructureSetAccessFeeSessionImplementation::operator const StructureSetAccessFeeSession*() {
	return _this.get();
}

void StructureSetAccessFeeSessionImplementation::lock(bool doLock) {
	_this.get()->lock(doLock);
}

void StructureSetAccessFeeSessionImplementation::lock(ManagedObject* obj) {
	_this.get()->lock(obj);
}

void StructureSetAccessFeeSessionImplementation::rlock(bool doLock) {
	_this.get()->rlock(doLock);
}

void StructureSetAccessFeeSessionImplementation::wlock(bool doLock) {
	_this.get()->wlock(doLock);
}

void StructureSetAccessFeeSessionImplementation::wlock(ManagedObject* obj) {
	_this.get()->wlock(obj);
}

void StructureSetAccessFeeSessionImplementation::unlock(bool doLock) {
	_this.get()->unlock(doLock);
}

void StructureSetAccessFeeSessionImplementation::runlock(bool doLock) {
	_this.get()->runlock(doLock);
}

void StructureSetAccessFeeSessionImplementation::_serializationHelperMethod() {
	FacadeImplementation::_serializationHelperMethod();

	_setClassName("StructureSetAccessFeeSession");

}

void StructureSetAccessFeeSessionImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(StructureSetAccessFeeSessionImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool StructureSetAccessFeeSessionImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (FacadeImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "StructureSetAccessFeeSession.playerGhost") {
		TypeInfo<ManagedReference<PlayerObject* > >::parseFromBinaryStream(&playerGhost, stream);
		return true;
	}

	if (_name == "StructureSetAccessFeeSession.player") {
		TypeInfo<ManagedReference<CreatureObject* > >::parseFromBinaryStream(&player, stream);
		return true;
	}

	if (_name == "StructureSetAccessFeeSession.structure") {
		TypeInfo<ManagedReference<BuildingObject* > >::parseFromBinaryStream(&structure, stream);
		return true;
	}

	if (_name == "StructureSetAccessFeeSession.feeAmountBox") {
		TypeInfo<ManagedReference<SuiInputBox* > >::parseFromBinaryStream(&feeAmountBox, stream);
		return true;
	}

	if (_name == "StructureSetAccessFeeSession.durationBox") {
		TypeInfo<ManagedReference<SuiInputBox* > >::parseFromBinaryStream(&durationBox, stream);
		return true;
	}

	if (_name == "StructureSetAccessFeeSession.accessFee") {
		TypeInfo<int >::parseFromBinaryStream(&accessFee, stream);
		return true;
	}


	return false;
}

void StructureSetAccessFeeSessionImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = StructureSetAccessFeeSessionImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int StructureSetAccessFeeSessionImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = FacadeImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;
	_name = "StructureSetAccessFeeSession.playerGhost";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<PlayerObject* > >::toBinaryStream(&playerGhost, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "StructureSetAccessFeeSession.player";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<CreatureObject* > >::toBinaryStream(&player, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "StructureSetAccessFeeSession.structure";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<BuildingObject* > >::toBinaryStream(&structure, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "StructureSetAccessFeeSession.feeAmountBox";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<SuiInputBox* > >::toBinaryStream(&feeAmountBox, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "StructureSetAccessFeeSession.durationBox";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<SuiInputBox* > >::toBinaryStream(&durationBox, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "StructureSetAccessFeeSession.accessFee";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&accessFee, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 6;
}

StructureSetAccessFeeSessionImplementation::StructureSetAccessFeeSessionImplementation(CreatureObject* play, BuildingObject* struc) {
	_initializeImplementation();
	// server/zone/objects/player/sessions/StructureSetAccessFeeSession.idl():  		player = play;
	player = play;
	// server/zone/objects/player/sessions/StructureSetAccessFeeSession.idl():  		playerGhost = player.getPlayerObject();
	playerGhost = player->getPlayerObject();
	// server/zone/objects/player/sessions/StructureSetAccessFeeSession.idl():  		structure = struc;
	structure = struc;
	// server/zone/objects/player/sessions/StructureSetAccessFeeSession.idl():  		feeAmountBox = null;
	feeAmountBox = NULL;
	// server/zone/objects/player/sessions/StructureSetAccessFeeSession.idl():  		durationBox = null;
	durationBox = NULL;
	// server/zone/objects/player/sessions/StructureSetAccessFeeSession.idl():  		accessFee = 0;
	accessFee = 0;
	// server/zone/objects/player/sessions/StructureSetAccessFeeSession.idl():  		Logger.setLoggingName("StructureSetAccessFeeSession");
	Logger::setLoggingName("StructureSetAccessFeeSession");
	// server/zone/objects/player/sessions/StructureSetAccessFeeSession.idl():  		Logger.setLogging(true);
	Logger::setLogging(true);
}

int StructureSetAccessFeeSessionImplementation::cancelSession() {
	// server/zone/objects/player/sessions/StructureSetAccessFeeSession.idl():  		clearSession(
	if (player != NULL)	// server/zone/objects/player/sessions/StructureSetAccessFeeSession.idl():  			player.dropActiveSession(SessionFacadeType.SETSTRUCTUREACCESSFEE);
	player->dropActiveSession(SessionFacadeType::SETSTRUCTUREACCESSFEE);
	// server/zone/objects/player/sessions/StructureSetAccessFeeSession.idl():  		clearSession();
	clearSession();
	// server/zone/objects/player/sessions/StructureSetAccessFeeSession.idl():  		return 0;
	return 0;
}

/*
 *	StructureSetAccessFeeSessionAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


StructureSetAccessFeeSessionAdapter::StructureSetAccessFeeSessionAdapter(StructureSetAccessFeeSession* obj) : FacadeAdapter(obj) {
}

void StructureSetAccessFeeSessionAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZESESSION__:
		{
			resp->insertSignedInt(initializeSession());
		}
		break;
	case RPC_CANCELSESSION__:
		{
			resp->insertSignedInt(cancelSession());
		}
		break;
	case RPC_CLEARSESSION__:
		{
			resp->insertSignedInt(clearSession());
		}
		break;
	case RPC_PROMPTSETACCESSFEE__:
		{
			promptSetAccessFee();
		}
		break;
	case RPC_SETACCESSFEE__INT_:
		{
			setAccessFee(inv->getSignedIntParameter());
		}
		break;
	case RPC_PROMPTSETACCESSDURATION__:
		{
			promptSetAccessDuration();
		}
		break;
	case RPC_SETACCESSDURATION__INT_:
		{
			setAccessDuration(inv->getSignedIntParameter());
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

int StructureSetAccessFeeSessionAdapter::initializeSession() {
	return (static_cast<StructureSetAccessFeeSession*>(stub))->initializeSession();
}

int StructureSetAccessFeeSessionAdapter::cancelSession() {
	return (static_cast<StructureSetAccessFeeSession*>(stub))->cancelSession();
}

int StructureSetAccessFeeSessionAdapter::clearSession() {
	return (static_cast<StructureSetAccessFeeSession*>(stub))->clearSession();
}

void StructureSetAccessFeeSessionAdapter::promptSetAccessFee() {
	(static_cast<StructureSetAccessFeeSession*>(stub))->promptSetAccessFee();
}

void StructureSetAccessFeeSessionAdapter::setAccessFee(const int fee) {
	(static_cast<StructureSetAccessFeeSession*>(stub))->setAccessFee(fee);
}

void StructureSetAccessFeeSessionAdapter::promptSetAccessDuration() {
	(static_cast<StructureSetAccessFeeSession*>(stub))->promptSetAccessDuration();
}

void StructureSetAccessFeeSessionAdapter::setAccessDuration(const int duration) {
	(static_cast<StructureSetAccessFeeSession*>(stub))->setAccessDuration(duration);
}

/*
 *	StructureSetAccessFeeSessionHelper
 */

StructureSetAccessFeeSessionHelper* StructureSetAccessFeeSessionHelper::staticInitializer = StructureSetAccessFeeSessionHelper::instance();

StructureSetAccessFeeSessionHelper::StructureSetAccessFeeSessionHelper() {
	className = "StructureSetAccessFeeSession";

	Core::getObjectBroker()->registerClass(className, this);
}

void StructureSetAccessFeeSessionHelper::finalizeHelper() {
	StructureSetAccessFeeSessionHelper::finalize();
}

DistributedObject* StructureSetAccessFeeSessionHelper::instantiateObject() {
	return new StructureSetAccessFeeSession(DummyConstructorParameter::instance());
}

DistributedObjectServant* StructureSetAccessFeeSessionHelper::instantiateServant() {
	return new StructureSetAccessFeeSessionImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* StructureSetAccessFeeSessionHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new StructureSetAccessFeeSessionAdapter(static_cast<StructureSetAccessFeeSession*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

