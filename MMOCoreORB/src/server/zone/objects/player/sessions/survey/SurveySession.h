/*
 *	server/zone/objects/player/sessions/survey/SurveySession.h generated by engine3 IDL compiler 0.60
 */

#ifndef SURVEYSESSION_H_
#define SURVEYSESSION_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace player {

class PlayerObject;

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace tool {

class SurveyTool;

} // namespace tool
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::tool;

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

namespace server {
namespace zone {
namespace objects {
namespace tangible {

class TangibleObject;

} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible;

namespace server {
namespace zone {
namespace managers {
namespace resource {

class ResourceManager;

} // namespace resource
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::resource;

#include "server/zone/objects/scene/SessionFacadeType.h"

#include "server/zone/templates/customization/CustomizationVariable.h"

#include "engine/util/Facade.h"

#include "engine/util/u3d/Coordinate.h"

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace sessions {
namespace survey {

class SurveySession : public Facade {
public:
	SurveySession(CreatureObject* creature);

	int initializeSession(SurveyTool* tool);

	int cancelSession();

	int clearSession();

	void startSurvey(const String& resname);

	void reSample();

	void startSample(const String& resname);

	void surveyCnodeMinigame(int value);

	void surveyGnodeMinigame(int value);

	SurveyTool* getActiveSurveyTool();

	void setActiveSurveyTool(SurveyTool* tool);

	SurveyTool* getOpenSurveyTool();

	void setOpenSurveyTool(SurveyTool* tool);

	bool tryGamble();

	void clearGamble();

	Coordinate* getRichSampleLocation();

	void clearRichSampleLocation();

	DistributedObjectServant* _getImplementation();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	SurveySession(DummyConstructorParameter* param);

	virtual ~SurveySession();

	friend class SurveySessionHelper;
};

} // namespace survey
} // namespace sessions
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::sessions::survey;

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace sessions {
namespace survey {

class SurveySessionImplementation : public FacadeImplementation {
protected:
	ManagedWeakReference<CreatureObject* > surveyer;

	ManagedWeakReference<PlayerObject* > surveyerGhost;

	ManagedWeakReference<SurveyTool* > activeSurveyTool;

	ManagedWeakReference<SurveyTool* > openSurveyTool;

	ManagedWeakReference<ResourceManager* > resourceManager;

	Reference<Coordinate* > richSampleLocation;

	bool doGamble;

	String lastResourceSampleName;

public:
	SurveySessionImplementation(CreatureObject* creature);

	SurveySessionImplementation(DummyConstructorParameter* param);

	int initializeSession(SurveyTool* tool);

private:
	int startSession();

public:
	int cancelSession();

	int clearSession();

	void startSurvey(const String& resname);

	void reSample();

	void startSample(const String& resname);

private:
	void surveyCnodeMinigameSui();

public:
	void surveyCnodeMinigame(int value);

private:
	void surveyGnodeMinigameSui();

public:
	void surveyGnodeMinigame(int value);

	SurveyTool* getActiveSurveyTool();

	void setActiveSurveyTool(SurveyTool* tool);

	SurveyTool* getOpenSurveyTool();

	void setOpenSurveyTool(SurveyTool* tool);

	bool tryGamble();

	void clearGamble();

	Coordinate* getRichSampleLocation();

	void clearRichSampleLocation();

	WeakReference<SurveySession*> _this;

	operator const SurveySession*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~SurveySessionImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const String& name);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class SurveySession;
};

class SurveySessionAdapter : public FacadeAdapter {
public:
	SurveySessionAdapter(SurveySession* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	int initializeSession(SurveyTool* tool);

	int cancelSession();

	int clearSession();

	void startSurvey(const String& resname);

	void reSample();

	void startSample(const String& resname);

	void surveyCnodeMinigame(int value);

	void surveyGnodeMinigame(int value);

	SurveyTool* getActiveSurveyTool();

	void setActiveSurveyTool(SurveyTool* tool);

	SurveyTool* getOpenSurveyTool();

	void setOpenSurveyTool(SurveyTool* tool);

	bool tryGamble();

	void clearGamble();

	void clearRichSampleLocation();

};

class SurveySessionHelper : public DistributedObjectClassHelper, public Singleton<SurveySessionHelper> {
	static SurveySessionHelper* staticInitializer;

public:
	SurveySessionHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<SurveySessionHelper>;
};

} // namespace survey
} // namespace sessions
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::sessions::survey;

#endif /*SURVEYSESSION_H_*/
