/*
 *	server/zone/objects/player/sessions/FindSession.cpp generated by engine3 IDL compiler 0.60
 */

#include "FindSession.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	FindSessionStub
 */

enum {RPC_INITIALIZESESSION__ = 6,RPC_CANCELSESSION__,RPC_CLEARSESSION__,RPC_ADDWAYPOINT__FLOAT_FLOAT_STRING_,RPC_CLEARWAYPOINT__};

FindSession::FindSession(CreatureObject* pl) : Facade(DummyConstructorParameter::instance()) {
	FindSessionImplementation* _implementation = new FindSessionImplementation(pl);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("FindSession");
}

FindSession::FindSession(DummyConstructorParameter* param) : Facade(param) {
	_setClassName("FindSession");
}

FindSession::~FindSession() {
}



int FindSession::initializeSession() {
	FindSessionImplementation* _implementation = static_cast<FindSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZESESSION__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->initializeSession();
}

int FindSession::cancelSession() {
	FindSessionImplementation* _implementation = static_cast<FindSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CANCELSESSION__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->cancelSession();
}

int FindSession::clearSession() {
	FindSessionImplementation* _implementation = static_cast<FindSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLEARSESSION__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->clearSession();
}

void FindSession::initalizeFindMenu() {
	FindSessionImplementation* _implementation = static_cast<FindSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->initalizeFindMenu();
}

void FindSession::addWaypoint(float x, float y, const String& name) {
	FindSessionImplementation* _implementation = static_cast<FindSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDWAYPOINT__FLOAT_FLOAT_STRING_);
		method.addFloatParameter(x);
		method.addFloatParameter(y);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		_implementation->addWaypoint(x, y, name);
}

void FindSession::findPlanetaryObject(String& maplocationtype) {
	FindSessionImplementation* _implementation = static_cast<FindSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->findPlanetaryObject(maplocationtype);
}

void FindSession::clearWaypoint() {
	FindSessionImplementation* _implementation = static_cast<FindSessionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLEARWAYPOINT__);

		method.executeWithVoidReturn();
	} else
		_implementation->clearWaypoint();
}

DistributedObjectServant* FindSession::_getImplementation() {

	_updated = true;
	return _impl;
}

void FindSession::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	FindSessionImplementation
 */

FindSessionImplementation::FindSessionImplementation(DummyConstructorParameter* param) : FacadeImplementation(param) {
	_initializeImplementation();
}


FindSessionImplementation::~FindSessionImplementation() {
}


void FindSessionImplementation::finalize() {
}

void FindSessionImplementation::_initializeImplementation() {
	_setClassHelper(FindSessionHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void FindSessionImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<FindSession*>(stub);
	FacadeImplementation::_setStub(stub);
}

DistributedObjectStub* FindSessionImplementation::_getStub() {
	return _this;
}

FindSessionImplementation::operator const FindSession*() {
	return _this;
}

void FindSessionImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void FindSessionImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void FindSessionImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void FindSessionImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void FindSessionImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void FindSessionImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void FindSessionImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void FindSessionImplementation::_serializationHelperMethod() {
	FacadeImplementation::_serializationHelperMethod();

	_setClassName("FindSession");

}

void FindSessionImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(FindSessionImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool FindSessionImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (FacadeImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "FindSession.player") {
		TypeInfo<ManagedWeakReference<CreatureObject* > >::parseFromBinaryStream(&player, stream);
		return true;
	}

	if (_name == "FindSession.findSuiBox") {
		TypeInfo<ManagedReference<SuiListBox* > >::parseFromBinaryStream(&findSuiBox, stream);
		return true;
	}


	return false;
}

void FindSessionImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = FindSessionImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int FindSessionImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = FacadeImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;
	_name = "FindSession.player";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<CreatureObject* > >::toBinaryStream(&player, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "FindSession.findSuiBox";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<SuiListBox* > >::toBinaryStream(&findSuiBox, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 2;
}

FindSessionImplementation::FindSessionImplementation(CreatureObject* pl) {
	_initializeImplementation();
	// server/zone/objects/player/sessions/FindSession.idl():  		Logger.setLoggingName("FindSession");
	Logger::setLoggingName("FindSession");
	// server/zone/objects/player/sessions/FindSession.idl():  		Logger.setLogging(true);
	Logger::setLogging(true);
	// server/zone/objects/player/sessions/FindSession.idl():  		initializeSession();
	initializeSession();
	// server/zone/objects/player/sessions/FindSession.idl():  		player = pl;
	player = pl;
}

int FindSessionImplementation::initializeSession() {
	// server/zone/objects/player/sessions/FindSession.idl():  		return 0;
	return 0;
}

int FindSessionImplementation::cancelSession() {
	// server/zone/objects/player/sessions/FindSession.idl():  		clearSession(
	if (player != NULL)	// server/zone/objects/player/sessions/FindSession.idl():  			player.dropActiveSession(SessionFacadeType.FIND);
	player->dropActiveSession(SessionFacadeType::FIND);
	// server/zone/objects/player/sessions/FindSession.idl():  		clearSession();
	clearSession();
	// server/zone/objects/player/sessions/FindSession.idl():  		return 0;
	return 0;
}

int FindSessionImplementation::clearSession() {
	// server/zone/objects/player/sessions/FindSession.idl():  		player = null;
	player = NULL;
	// server/zone/objects/player/sessions/FindSession.idl():  		return 0;
	return 0;
}

/*
 *	FindSessionAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


FindSessionAdapter::FindSessionAdapter(FindSession* obj) : FacadeAdapter(obj) {
}

void FindSessionAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZESESSION__:
		{
			resp->insertSignedInt(initializeSession());
		}
		break;
	case RPC_CANCELSESSION__:
		{
			resp->insertSignedInt(cancelSession());
		}
		break;
	case RPC_CLEARSESSION__:
		{
			resp->insertSignedInt(clearSession());
		}
		break;
	case RPC_ADDWAYPOINT__FLOAT_FLOAT_STRING_:
		{
			String name; 
			addWaypoint(inv->getFloatParameter(), inv->getFloatParameter(), inv->getAsciiParameter(name));
		}
		break;
	case RPC_CLEARWAYPOINT__:
		{
			clearWaypoint();
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

int FindSessionAdapter::initializeSession() {
	return (static_cast<FindSession*>(stub))->initializeSession();
}

int FindSessionAdapter::cancelSession() {
	return (static_cast<FindSession*>(stub))->cancelSession();
}

int FindSessionAdapter::clearSession() {
	return (static_cast<FindSession*>(stub))->clearSession();
}

void FindSessionAdapter::addWaypoint(float x, float y, const String& name) {
	(static_cast<FindSession*>(stub))->addWaypoint(x, y, name);
}

void FindSessionAdapter::clearWaypoint() {
	(static_cast<FindSession*>(stub))->clearWaypoint();
}

/*
 *	FindSessionHelper
 */

FindSessionHelper* FindSessionHelper::staticInitializer = FindSessionHelper::instance();

FindSessionHelper::FindSessionHelper() {
	className = "FindSession";

	Core::getObjectBroker()->registerClass(className, this);
}

void FindSessionHelper::finalizeHelper() {
	FindSessionHelper::finalize();
}

DistributedObject* FindSessionHelper::instantiateObject() {
	return new FindSession(DummyConstructorParameter::instance());
}

DistributedObjectServant* FindSessionHelper::instantiateServant() {
	return new FindSessionImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* FindSessionHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new FindSessionAdapter(static_cast<FindSession*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

