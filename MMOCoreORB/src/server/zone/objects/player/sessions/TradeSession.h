/*
 *	server/zone/objects/player/sessions/TradeSession.h generated by engine3 IDL compiler 0.60
 */

#ifndef TRADESESSION_H_
#define TRADESESSION_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace player {

class PlayerObject;

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

#include "engine/core/ManagedObject.h"

#include "engine/util/Facade.h"

#include "system/util/SortedVector.h"

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace sessions {

class TradeSession : public Facade {
public:
	TradeSession();

	bool getAcceptedTrade();

	void addTradeItem(SceneObject* object);

	SortedVector<ManagedReference<SceneObject* > >* getItemsToTrade();

	SceneObject* getTradeItem(int index);

	int getTradeSize();

	int getMoneyToTrade();

	unsigned long long getTradeTargetPlayer();

	bool isTryingToTrade();

	bool hasVerifiedTrade();

	void setAcceptedTrade(bool val);

	void setMoneyToTrade(int val);

	void setTradeTargetPlayer(unsigned long long val);

	void setVerifiedTrade(bool val);

	DistributedObjectServant* _getImplementation();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	TradeSession(DummyConstructorParameter* param);

	virtual ~TradeSession();

	friend class TradeSessionHelper;
};

} // namespace sessions
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::sessions;

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace sessions {

class TradeSessionImplementation : public FacadeImplementation {
protected:
	unsigned long long tradeTargetPlayer;

	SortedVector<ManagedReference<SceneObject* > > itemsToTrade;

	bool verifiedTrade;

	bool acceptedTrade;

	int moneyToTrade;

public:
	TradeSessionImplementation();

	TradeSessionImplementation(DummyConstructorParameter* param);

	bool getAcceptedTrade();

	void addTradeItem(SceneObject* object);

	SortedVector<ManagedReference<SceneObject* > >* getItemsToTrade();

	SceneObject* getTradeItem(int index);

	int getTradeSize();

	int getMoneyToTrade();

	unsigned long long getTradeTargetPlayer();

	bool isTryingToTrade();

	bool hasVerifiedTrade();

	void setAcceptedTrade(bool val);

	void setMoneyToTrade(int val);

	void setTradeTargetPlayer(unsigned long long val);

	void setVerifiedTrade(bool val);

	WeakReference<TradeSession*> _this;

	operator const TradeSession*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~TradeSessionImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const String& name);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class TradeSession;
};

class TradeSessionAdapter : public FacadeAdapter {
public:
	TradeSessionAdapter(TradeSession* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	bool getAcceptedTrade();

	void addTradeItem(SceneObject* object);

	SceneObject* getTradeItem(int index);

	int getTradeSize();

	int getMoneyToTrade();

	unsigned long long getTradeTargetPlayer();

	bool isTryingToTrade();

	bool hasVerifiedTrade();

	void setAcceptedTrade(bool val);

	void setMoneyToTrade(int val);

	void setTradeTargetPlayer(unsigned long long val);

	void setVerifiedTrade(bool val);

};

class TradeSessionHelper : public DistributedObjectClassHelper, public Singleton<TradeSessionHelper> {
	static TradeSessionHelper* staticInitializer;

public:
	TradeSessionHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<TradeSessionHelper>;
};

} // namespace sessions
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::sessions;

#endif /*TRADESESSION_H_*/
