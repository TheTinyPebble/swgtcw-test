/*
 *	server/zone/objects/player/PlayerObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "PlayerObject.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/creature/commands/QueueCommand.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

#include "server/zone/ZoneClientSession.h"

#include "server/zone/objects/waypoint/WaypointObject.h"

#include "server/zone/Zone.h"

#include "server/zone/templates/SharedObjectTemplate.h"

/*
 *	PlayerObjectStub
 */

PlayerObject::PlayerObject() : IntangibleObject(DummyConstructorParameter::instance()) {
	PlayerObjectImplementation* _implementation = new PlayerObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

PlayerObject::PlayerObject(DummyConstructorParameter* param) : IntangibleObject(param) {
}

PlayerObject::~PlayerObject() {
}


void PlayerObject::loadTemplateData(SharedObjectTemplate* templateData) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->loadTemplateData(templateData);
}

void PlayerObject::initializeTransientMembers() {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void PlayerObject::sendBaselinesTo(SceneObject* player) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendBaselinesTo(player);
}

void PlayerObject::sendMessage(BasePacket* msg) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(msg);

		method.executeWithVoidReturn();
	} else
		_implementation->sendMessage(msg);
}

int PlayerObject::addExperience(const String& xpType, int xp, bool notifyClient) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addAsciiParameter(xpType);
		method.addSignedIntParameter(xp);
		method.addBooleanParameter(notifyClient);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->addExperience(xpType, xp, notifyClient);
}

void PlayerObject::removeExperience(const String& xpType, bool notifyClient) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addAsciiParameter(xpType);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->removeExperience(xpType, notifyClient);
}

void PlayerObject::addWaypoint(WaypointObject* waypoint, bool checkName, bool notifyClient) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addObjectParameter(waypoint);
		method.addBooleanParameter(checkName);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->addWaypoint(waypoint, checkName, notifyClient);
}

void PlayerObject::setWaypoint(WaypointObject* waypoint, bool notifyClient) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addObjectParameter(waypoint);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setWaypoint(waypoint, notifyClient);
}

void PlayerObject::addWaypoint(const String& planet, float positionX, float positionY, bool notifyClient) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addAsciiParameter(planet);
		method.addFloatParameter(positionX);
		method.addFloatParameter(positionY);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->addWaypoint(planet, positionX, positionY, notifyClient);
}

void PlayerObject::removeWaypoint(unsigned long long waypointID, bool notifyClient) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addUnsignedLongParameter(waypointID);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->removeWaypoint(waypointID, notifyClient);
}

void PlayerObject::addSkills(Vector<String>& skills, bool notifyClient) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->addSkills(skills, notifyClient);
}

void PlayerObject::addSkills(Vector<Certification*>& skills, bool notifyClient) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->addSkills(skills, notifyClient);
}

void PlayerObject::removeSkills(Vector<String>& skills, bool notifyClient) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->removeSkills(skills, notifyClient);
}

void PlayerObject::removeSkills(Vector<Certification*>& skills, bool notifyClient) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->removeSkills(skills, notifyClient);
}

void PlayerObject::addSchematics(Vector<ManagedReference<DraftSchematic* > >& schematics, bool notifyClient) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->addSchematics(schematics, notifyClient);
}

void PlayerObject::removeSchematics(Vector<ManagedReference<DraftSchematic* > >& schematics, bool notifyClient) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->removeSchematics(schematics, notifyClient);
}

void PlayerObject::addSchematic(DraftSchematic* schematic, bool notifyClient) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->addSchematic(schematic, notifyClient);
}

void PlayerObject::removeSchematic(DraftSchematic* schematic, bool notifyClient) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->removeSchematic(schematic, notifyClient);
}

void PlayerObject::setLanguageID(byte language, bool notifyClient) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addByteParameter(language);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setLanguageID(language, notifyClient);
}

void PlayerObject::addFriend(const String& name, bool notifyClient) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addAsciiParameter(name);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->addFriend(name, notifyClient);
}

void PlayerObject::removeFriend(const String& name, bool notifyClient) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addAsciiParameter(name);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->removeFriend(name, notifyClient);
}

void PlayerObject::addIgnore(const String& name, bool notifyClient) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addAsciiParameter(name);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->addIgnore(name, notifyClient);
}

void PlayerObject::removeIgnore(const String& name, bool notifyClient) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addAsciiParameter(name);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->removeIgnore(name, notifyClient);
}

void PlayerObject::setTitle(const String& characterTitle, bool notifyClient) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addAsciiParameter(characterTitle);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setTitle(characterTitle, notifyClient);
}

void PlayerObject::setFoodFilling(int newValue, bool notifyClient) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addSignedIntParameter(newValue);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setFoodFilling(newValue, notifyClient);
}

void PlayerObject::setDrinkFilling(int newValue, bool notifyClient) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);
		method.addSignedIntParameter(newValue);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setDrinkFilling(newValue, notifyClient);
}

void PlayerObject::setCommandMessageString(unsigned int actionCRC, String& message) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);
		method.addUnsignedIntParameter(actionCRC);
		method.addAsciiParameter(message);

		method.executeWithVoidReturn();
	} else
		_implementation->setCommandMessageString(actionCRC, message);
}

void PlayerObject::removeCommandMessageString(unsigned int actionCRC) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);
		method.addUnsignedIntParameter(actionCRC);

		method.executeWithVoidReturn();
	} else
		_implementation->removeCommandMessageString(actionCRC);
}

void PlayerObject::notifyOnline() {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyOnline();
}

void PlayerObject::doDigest() {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);

		method.executeWithVoidReturn();
	} else
		_implementation->doDigest();
}

bool PlayerObject::isDigesting() {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isDigesting();
}

void PlayerObject::notifyOffline() {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyOffline();
}

bool PlayerObject::hasFriend(const String& name) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);
		method.addAsciiParameter(name);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasFriend(name);
}

bool PlayerObject::isIgnoring(const String& name) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);
		method.addAsciiParameter(name);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isIgnoring(name);
}

void PlayerObject::addReverseFriend(const String& name) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		_implementation->addReverseFriend(name);
}

void PlayerObject::removeReverseFriend(const String& name) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		_implementation->removeReverseFriend(name);
}

void PlayerObject::sendFriendLists() {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);

		method.executeWithVoidReturn();
	} else
		_implementation->sendFriendLists();
}

bool PlayerObject::hasWaypoint(unsigned long long objectID) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);
		method.addUnsignedLongParameter(objectID);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasWaypoint(objectID);
}

bool PlayerObject::hasSkill(const String& skill) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->hasSkill(skill);
}

bool PlayerObject::hasCommandMessageString(unsigned int actionCRC) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);
		method.addUnsignedIntParameter(actionCRC);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasCommandMessageString(actionCRC);
}

unsigned int PlayerObject::getCharacterBitmask() {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 36);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getCharacterBitmask();
}

String PlayerObject::getTitle() {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 37);

		method.executeWithAsciiReturn(_return_getTitle);
		return _return_getTitle;
	} else
		return _implementation->getTitle();
}

unsigned int PlayerObject::getAdminLevel() {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 38);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getAdminLevel();
}

void PlayerObject::setAdminLevel(unsigned int adminlvl) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 39);
		method.addUnsignedIntParameter(adminlvl);

		method.executeWithVoidReturn();
	} else
		_implementation->setAdminLevel(adminlvl);
}

bool PlayerObject::isDeveloper() {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 40);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isDeveloper();
}

bool PlayerObject::isCSR() {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 41);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isCSR();
}

bool PlayerObject::isPrivileged() {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 42);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isPrivileged();
}

void PlayerObject::setCharacterBitmask(unsigned int bitmask) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 43);
		method.addUnsignedIntParameter(bitmask);

		method.executeWithVoidReturn();
	} else
		_implementation->setCharacterBitmask(bitmask);
}

bool PlayerObject::setCharacterBit(unsigned int bit, bool notifyClient) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 44);
		method.addUnsignedIntParameter(bit);
		method.addBooleanParameter(notifyClient);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->setCharacterBit(bit, notifyClient);
}

bool PlayerObject::clearCharacterBit(unsigned int bit, bool notifyClient) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 45);
		method.addUnsignedIntParameter(bit);
		method.addBooleanParameter(notifyClient);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->clearCharacterBit(bit, notifyClient);
}

void PlayerObject::toggleCharacterBit(unsigned int bit) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 46);
		method.addUnsignedIntParameter(bit);

		method.executeWithVoidReturn();
	} else
		_implementation->toggleCharacterBit(bit);
}

VectorMap<String, int>* PlayerObject::getXpTypeCapList() {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getXpTypeCapList();
}

DeltaVectorMap<String, int>* PlayerObject::getExperienceList() {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getExperienceList();
}

int PlayerObject::getForcePower() {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 47);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getForcePower();
}

int PlayerObject::getForcePowerMax() {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 48);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getForcePowerMax();
}

WaypointList* PlayerObject::getWaypointList() {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getWaypointList();
}

SkillList* PlayerObject::getSkills() {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getSkills();
}

SchematicList* PlayerObject::getSchematics() {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getSchematics();
}

DraftSchematic* PlayerObject::getSchematic(int i) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 49);
		method.addSignedIntParameter(i);

		return (DraftSchematic*) method.executeWithObjectReturn();
	} else
		return _implementation->getSchematic(i);
}

Vector<ManagedReference<DraftSchematic* > > PlayerObject::filterSchematicList(PlayerCreature* player, Vector<unsigned int>* enabledTabs, int complexityLevel) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->filterSchematicList(player, enabledTabs, complexityLevel);
}

int PlayerObject::getFoodFilling() {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 50);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getFoodFilling();
}

int PlayerObject::getFoodFillingMax() {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 51);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getFoodFillingMax();
}

int PlayerObject::getDrinkFilling() {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 52);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getDrinkFilling();
}

int PlayerObject::getDrinkFillingMax() {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 53);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getDrinkFillingMax();
}

int PlayerObject::getJediState() {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 54);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getJediState();
}

byte PlayerObject::getLanguageID() {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 55);

		return method.executeWithByteReturn();
	} else
		return _implementation->getLanguageID();
}

DeltaVector<String>* PlayerObject::getFriendList() {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getFriendList();
}

DeltaVector<String>* PlayerObject::getIgnoreList() {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getIgnoreList();
}

int PlayerObject::getExperience(const String& xp) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 56);
		method.addAsciiParameter(xp);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getExperience(xp);
}

String PlayerObject::getCommandMessageString(unsigned int actionCRC) {
	PlayerObjectImplementation* _implementation = (PlayerObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 57);
		method.addUnsignedIntParameter(actionCRC);

		method.executeWithAsciiReturn(_return_getCommandMessageString);
		return _return_getCommandMessageString;
	} else
		return _implementation->getCommandMessageString(actionCRC);
}

DistributedObjectServant* PlayerObject::_getImplementation() {

	_updated = true;
	return _impl;
}

void PlayerObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;}

/*
 *	PlayerObjectImplementation
 */

PlayerObjectImplementation::PlayerObjectImplementation(DummyConstructorParameter* param) : IntangibleObjectImplementation(param) {
	_initializeImplementation();
}


PlayerObjectImplementation::~PlayerObjectImplementation() {
	PlayerObjectImplementation::finalize();
}


void PlayerObjectImplementation::_initializeImplementation() {
	_setClassHelper(PlayerObjectHelper::instance());

	_serializationHelperMethod();
}

void PlayerObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (PlayerObject*) stub;
	IntangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* PlayerObjectImplementation::_getStub() {
	return _this;
}

PlayerObjectImplementation::operator const PlayerObject*() {
	return _this;
}

void PlayerObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void PlayerObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void PlayerObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void PlayerObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void PlayerObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void PlayerObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void PlayerObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void PlayerObjectImplementation::_serializationHelperMethod() {
	IntangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("PlayerObject");

	addSerializableVariable("characterBitmask", &characterBitmask);
	addSerializableVariable("title", &title);
	addSerializableVariable("forcePower", &forcePower);
	addSerializableVariable("forcePowerMax", &forcePowerMax);
	addSerializableVariable("foodFilling", &foodFilling);
	addSerializableVariable("foodFillingMax", &foodFillingMax);
	addSerializableVariable("drinkFilling", &drinkFilling);
	addSerializableVariable("drinkFillingMax", &drinkFillingMax);
	addSerializableVariable("jediState", &jediState);
	addSerializableVariable("adminLevel", &adminLevel);
	addSerializableVariable("languageID", &languageID);
	addSerializableVariable("xpTypeCapList", &xpTypeCapList);
	addSerializableVariable("commandMessageStrings", &commandMessageStrings);
	addSerializableVariable("experienceList", &experienceList);
	addSerializableVariable("waypointList", &waypointList);
	addSerializableVariable("skillList", &skillList);
	addSerializableVariable("friendList", &friendList);
	addSerializableVariable("ignoreList", &ignoreList);
	addSerializableVariable("schematicList", &schematicList);
}

PlayerObjectImplementation::PlayerObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/player/PlayerObject.idl(124):  		commandMessageStrings.setNoDuplicateInsertPlan();
	(&commandMessageStrings)->setNoDuplicateInsertPlan();
	// server/zone/objects/player/PlayerObject.idl(126):  		Logger.setLoggingName("PlayerObject");
	Logger::setLoggingName("PlayerObject");
}

void PlayerObjectImplementation::finalize() {
}

void PlayerObjectImplementation::setCommandMessageString(unsigned int actionCRC, String& message) {
	// server/zone/objects/player/PlayerObject.idl(295):  		commandMessageStrings.put(actionCRC, message);
	(&commandMessageStrings)->put(actionCRC, message);
}

void PlayerObjectImplementation::removeCommandMessageString(unsigned int actionCRC) {
	// server/zone/objects/player/PlayerObject.idl(299):  		commandMessageStrings.drop(actionCRC);
	(&commandMessageStrings)->drop(actionCRC);
}

bool PlayerObjectImplementation::isDigesting() {
	// server/zone/objects/player/PlayerObject.idl(312):  
	if (getDrinkFilling() > 0 || getFoodFilling() > 0){
	// server/zone/objects/player/PlayerObject.idl(313):  			return true;
	return true;
}

	else {
	// server/zone/objects/player/PlayerObject.idl(315):  			return false;
	return false;
}
}

bool PlayerObjectImplementation::hasFriend(const String& name) {
	// server/zone/objects/player/PlayerObject.idl(327):  		return friendList.contains(name);
	return (&friendList)->contains(name);
}

bool PlayerObjectImplementation::isIgnoring(const String& name) {
	// server/zone/objects/player/PlayerObject.idl(331):  		return ignoreList.contains(name);
	return (&ignoreList)->contains(name);
}

void PlayerObjectImplementation::addReverseFriend(const String& name) {
	// server/zone/objects/player/PlayerObject.idl(335):  		friendList.addReversePlayer(name);
	(&friendList)->addReversePlayer(name);
}

void PlayerObjectImplementation::removeReverseFriend(const String& name) {
	// server/zone/objects/player/PlayerObject.idl(339):  		friendList.removeReversePlayer(name);
	(&friendList)->removeReversePlayer(name);
}

bool PlayerObjectImplementation::hasWaypoint(unsigned long long objectID) {
	// server/zone/objects/player/PlayerObject.idl(345):  		return waypointList.contains(objectID);
	return (&waypointList)->contains(objectID);
}

bool PlayerObjectImplementation::hasSkill(const String& skill) {
	// server/zone/objects/player/PlayerObject.idl(350):  		return skillList.contains(skill);
	return (&skillList)->contains(skill);
}

bool PlayerObjectImplementation::hasCommandMessageString(unsigned int actionCRC) {
	// server/zone/objects/player/PlayerObject.idl(354):  		return commandMessageStrings.contains(actionCRC);
	return (&commandMessageStrings)->contains(actionCRC);
}

unsigned int PlayerObjectImplementation::getCharacterBitmask() {
	// server/zone/objects/player/PlayerObject.idl(358):  		return characterBitmask;
	return characterBitmask;
}

String PlayerObjectImplementation::getTitle() {
	// server/zone/objects/player/PlayerObject.idl(362):  		return title;
	return title;
}

unsigned int PlayerObjectImplementation::getAdminLevel() {
	// server/zone/objects/player/PlayerObject.idl(366):  		return adminLevel;
	return adminLevel;
}

void PlayerObjectImplementation::setAdminLevel(unsigned int adminlvl) {
	// server/zone/objects/player/PlayerObject.idl(370):  		adminLevel = adminlvl;
	adminLevel = adminlvl;
}

bool PlayerObjectImplementation::isDeveloper() {
	// server/zone/objects/player/PlayerObject.idl(374):  		return adminLevel == DEV;
	return adminLevel == DEV;
}

bool PlayerObjectImplementation::isCSR() {
	// server/zone/objects/player/PlayerObject.idl(378):  		return adminLevel == CSR;
	return adminLevel == CSR;
}

bool PlayerObjectImplementation::isPrivileged() {
	// server/zone/objects/player/PlayerObject.idl(382):  		return adminLevel > 0;
	return adminLevel > 0;
}

void PlayerObjectImplementation::setCharacterBitmask(unsigned int bitmask) {
	// server/zone/objects/player/PlayerObject.idl(386):  		characterBitmask = bitmask;
	characterBitmask = bitmask;
}

VectorMap<String, int>* PlayerObjectImplementation::getXpTypeCapList() {
	// server/zone/objects/player/PlayerObject.idl(395):  	 return xpTypeCapList;
	return (&xpTypeCapList);
}

DeltaVectorMap<String, int>* PlayerObjectImplementation::getExperienceList() {
	// server/zone/objects/player/PlayerObject.idl(400):  		return experienceList;
	return (&experienceList);
}

int PlayerObjectImplementation::getForcePower() {
	// server/zone/objects/player/PlayerObject.idl(404):  		return forcePower;
	return forcePower;
}

int PlayerObjectImplementation::getForcePowerMax() {
	// server/zone/objects/player/PlayerObject.idl(408):  		return forcePowerMax;
	return forcePowerMax;
}

WaypointList* PlayerObjectImplementation::getWaypointList() {
	// server/zone/objects/player/PlayerObject.idl(413):  		return waypointList;
	return (&waypointList);
}

SkillList* PlayerObjectImplementation::getSkills() {
	// server/zone/objects/player/PlayerObject.idl(418):  		return skillList;
	return (&skillList);
}

SchematicList* PlayerObjectImplementation::getSchematics() {
	// server/zone/objects/player/PlayerObject.idl(423):  		return schematicList;
	return (&schematicList);
}

DraftSchematic* PlayerObjectImplementation::getSchematic(int i) {
	// server/zone/objects/player/PlayerObject.idl(427):  		return schematicList.get(i);
	return (&schematicList)->get(i);
}

int PlayerObjectImplementation::getFoodFilling() {
	// server/zone/objects/player/PlayerObject.idl(435):  		return foodFilling;
	return foodFilling;
}

int PlayerObjectImplementation::getFoodFillingMax() {
	// server/zone/objects/player/PlayerObject.idl(439):  		return foodFillingMax;
	return foodFillingMax;
}

int PlayerObjectImplementation::getDrinkFilling() {
	// server/zone/objects/player/PlayerObject.idl(443):  		return drinkFilling;
	return drinkFilling;
}

int PlayerObjectImplementation::getDrinkFillingMax() {
	// server/zone/objects/player/PlayerObject.idl(447):  		return drinkFillingMax;
	return drinkFillingMax;
}

int PlayerObjectImplementation::getJediState() {
	// server/zone/objects/player/PlayerObject.idl(451):  		return jediState;
	return jediState;
}

byte PlayerObjectImplementation::getLanguageID() {
	// server/zone/objects/player/PlayerObject.idl(455):  		return languageID;
	return languageID;
}

DeltaVector<String>* PlayerObjectImplementation::getFriendList() {
	// server/zone/objects/player/PlayerObject.idl(460):  		return friendList;
	return (&friendList);
}

DeltaVector<String>* PlayerObjectImplementation::getIgnoreList() {
	// server/zone/objects/player/PlayerObject.idl(465):  		return ignoreList;
	return (&ignoreList);
}

int PlayerObjectImplementation::getExperience(const String& xp) {
	// server/zone/objects/player/PlayerObject.idl(469):  		return experienceList.get(xp);
	return (&experienceList)->get(xp);
}

String PlayerObjectImplementation::getCommandMessageString(unsigned int actionCRC) {
	// server/zone/objects/player/PlayerObject.idl(473):  		return commandMessageStrings.get(actionCRC);
	return (&commandMessageStrings)->get(actionCRC);
}

/*
 *	PlayerObjectAdapter
 */

PlayerObjectAdapter::PlayerObjectAdapter(PlayerObjectImplementation* obj) : IntangibleObjectAdapter(obj) {
}

Packet* PlayerObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		finalize();
		break;
	case 7:
		initializeTransientMembers();
		break;
	case 8:
		sendBaselinesTo((SceneObject*) inv->getObjectParameter());
		break;
	case 9:
		sendMessage((BasePacket*) inv->getObjectParameter());
		break;
	case 10:
		resp->insertSignedInt(addExperience(inv->getAsciiParameter(_param0_addExperience__String_int_bool_), inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 11:
		removeExperience(inv->getAsciiParameter(_param0_removeExperience__String_bool_), inv->getBooleanParameter());
		break;
	case 12:
		addWaypoint((WaypointObject*) inv->getObjectParameter(), inv->getBooleanParameter(), inv->getBooleanParameter());
		break;
	case 13:
		setWaypoint((WaypointObject*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 14:
		addWaypoint(inv->getAsciiParameter(_param0_addWaypoint__String_float_float_bool_), inv->getFloatParameter(), inv->getFloatParameter(), inv->getBooleanParameter());
		break;
	case 15:
		removeWaypoint(inv->getUnsignedLongParameter(), inv->getBooleanParameter());
		break;
	case 16:
		setLanguageID(inv->getByteParameter(), inv->getBooleanParameter());
		break;
	case 17:
		addFriend(inv->getAsciiParameter(_param0_addFriend__String_bool_), inv->getBooleanParameter());
		break;
	case 18:
		removeFriend(inv->getAsciiParameter(_param0_removeFriend__String_bool_), inv->getBooleanParameter());
		break;
	case 19:
		addIgnore(inv->getAsciiParameter(_param0_addIgnore__String_bool_), inv->getBooleanParameter());
		break;
	case 20:
		removeIgnore(inv->getAsciiParameter(_param0_removeIgnore__String_bool_), inv->getBooleanParameter());
		break;
	case 21:
		setTitle(inv->getAsciiParameter(_param0_setTitle__String_bool_), inv->getBooleanParameter());
		break;
	case 22:
		setFoodFilling(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 23:
		setDrinkFilling(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 24:
		setCommandMessageString(inv->getUnsignedIntParameter(), inv->getAsciiParameter(_param1_setCommandMessageString__int_String_));
		break;
	case 25:
		removeCommandMessageString(inv->getUnsignedIntParameter());
		break;
	case 26:
		notifyOnline();
		break;
	case 27:
		doDigest();
		break;
	case 28:
		resp->insertBoolean(isDigesting());
		break;
	case 29:
		notifyOffline();
		break;
	case 30:
		resp->insertBoolean(hasFriend(inv->getAsciiParameter(_param0_hasFriend__String_)));
		break;
	case 31:
		resp->insertBoolean(isIgnoring(inv->getAsciiParameter(_param0_isIgnoring__String_)));
		break;
	case 32:
		addReverseFriend(inv->getAsciiParameter(_param0_addReverseFriend__String_));
		break;
	case 33:
		removeReverseFriend(inv->getAsciiParameter(_param0_removeReverseFriend__String_));
		break;
	case 34:
		sendFriendLists();
		break;
	case 35:
		resp->insertBoolean(hasWaypoint(inv->getUnsignedLongParameter()));
		break;
	case 36:
		resp->insertBoolean(hasCommandMessageString(inv->getUnsignedIntParameter()));
		break;
	case 37:
		resp->insertInt(getCharacterBitmask());
		break;
	case 38:
		resp->insertAscii(getTitle());
		break;
	case 39:
		resp->insertInt(getAdminLevel());
		break;
	case 40:
		setAdminLevel(inv->getUnsignedIntParameter());
		break;
	case 41:
		resp->insertBoolean(isDeveloper());
		break;
	case 42:
		resp->insertBoolean(isCSR());
		break;
	case 43:
		resp->insertBoolean(isPrivileged());
		break;
	case 44:
		setCharacterBitmask(inv->getUnsignedIntParameter());
		break;
	case 45:
		resp->insertBoolean(setCharacterBit(inv->getUnsignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 46:
		resp->insertBoolean(clearCharacterBit(inv->getUnsignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 47:
		toggleCharacterBit(inv->getUnsignedIntParameter());
		break;
	case 48:
		resp->insertSignedInt(getForcePower());
		break;
	case 49:
		resp->insertSignedInt(getForcePowerMax());
		break;
	case 50:
		resp->insertLong(getSchematic(inv->getSignedIntParameter())->_getObjectID());
		break;
	case 51:
		resp->insertSignedInt(getFoodFilling());
		break;
	case 52:
		resp->insertSignedInt(getFoodFillingMax());
		break;
	case 53:
		resp->insertSignedInt(getDrinkFilling());
		break;
	case 54:
		resp->insertSignedInt(getDrinkFillingMax());
		break;
	case 55:
		resp->insertSignedInt(getJediState());
		break;
	case 56:
		resp->insertByte(getLanguageID());
		break;
	case 57:
		resp->insertSignedInt(getExperience(inv->getAsciiParameter(_param0_getExperience__String_)));
		break;
	case 58:
		resp->insertAscii(getCommandMessageString(inv->getUnsignedIntParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

void PlayerObjectAdapter::finalize() {
	((PlayerObjectImplementation*) impl)->finalize();
}

void PlayerObjectAdapter::initializeTransientMembers() {
	((PlayerObjectImplementation*) impl)->initializeTransientMembers();
}

void PlayerObjectAdapter::sendBaselinesTo(SceneObject* player) {
	((PlayerObjectImplementation*) impl)->sendBaselinesTo(player);
}

void PlayerObjectAdapter::sendMessage(BasePacket* msg) {
	((PlayerObjectImplementation*) impl)->sendMessage(msg);
}

int PlayerObjectAdapter::addExperience(const String& xpType, int xp, bool notifyClient) {
	return ((PlayerObjectImplementation*) impl)->addExperience(xpType, xp, notifyClient);
}

void PlayerObjectAdapter::removeExperience(const String& xpType, bool notifyClient) {
	((PlayerObjectImplementation*) impl)->removeExperience(xpType, notifyClient);
}

void PlayerObjectAdapter::addWaypoint(WaypointObject* waypoint, bool checkName, bool notifyClient) {
	((PlayerObjectImplementation*) impl)->addWaypoint(waypoint, checkName, notifyClient);
}

void PlayerObjectAdapter::setWaypoint(WaypointObject* waypoint, bool notifyClient) {
	((PlayerObjectImplementation*) impl)->setWaypoint(waypoint, notifyClient);
}

void PlayerObjectAdapter::addWaypoint(const String& planet, float positionX, float positionY, bool notifyClient) {
	((PlayerObjectImplementation*) impl)->addWaypoint(planet, positionX, positionY, notifyClient);
}

void PlayerObjectAdapter::removeWaypoint(unsigned long long waypointID, bool notifyClient) {
	((PlayerObjectImplementation*) impl)->removeWaypoint(waypointID, notifyClient);
}

void PlayerObjectAdapter::setLanguageID(byte language, bool notifyClient) {
	((PlayerObjectImplementation*) impl)->setLanguageID(language, notifyClient);
}

void PlayerObjectAdapter::addFriend(const String& name, bool notifyClient) {
	((PlayerObjectImplementation*) impl)->addFriend(name, notifyClient);
}

void PlayerObjectAdapter::removeFriend(const String& name, bool notifyClient) {
	((PlayerObjectImplementation*) impl)->removeFriend(name, notifyClient);
}

void PlayerObjectAdapter::addIgnore(const String& name, bool notifyClient) {
	((PlayerObjectImplementation*) impl)->addIgnore(name, notifyClient);
}

void PlayerObjectAdapter::removeIgnore(const String& name, bool notifyClient) {
	((PlayerObjectImplementation*) impl)->removeIgnore(name, notifyClient);
}

void PlayerObjectAdapter::setTitle(const String& characterTitle, bool notifyClient) {
	((PlayerObjectImplementation*) impl)->setTitle(characterTitle, notifyClient);
}

void PlayerObjectAdapter::setFoodFilling(int newValue, bool notifyClient) {
	((PlayerObjectImplementation*) impl)->setFoodFilling(newValue, notifyClient);
}

void PlayerObjectAdapter::setDrinkFilling(int newValue, bool notifyClient) {
	((PlayerObjectImplementation*) impl)->setDrinkFilling(newValue, notifyClient);
}

void PlayerObjectAdapter::setCommandMessageString(unsigned int actionCRC, String& message) {
	((PlayerObjectImplementation*) impl)->setCommandMessageString(actionCRC, message);
}

void PlayerObjectAdapter::removeCommandMessageString(unsigned int actionCRC) {
	((PlayerObjectImplementation*) impl)->removeCommandMessageString(actionCRC);
}

void PlayerObjectAdapter::notifyOnline() {
	((PlayerObjectImplementation*) impl)->notifyOnline();
}

void PlayerObjectAdapter::doDigest() {
	((PlayerObjectImplementation*) impl)->doDigest();
}

bool PlayerObjectAdapter::isDigesting() {
	return ((PlayerObjectImplementation*) impl)->isDigesting();
}

void PlayerObjectAdapter::notifyOffline() {
	((PlayerObjectImplementation*) impl)->notifyOffline();
}

bool PlayerObjectAdapter::hasFriend(const String& name) {
	return ((PlayerObjectImplementation*) impl)->hasFriend(name);
}

bool PlayerObjectAdapter::isIgnoring(const String& name) {
	return ((PlayerObjectImplementation*) impl)->isIgnoring(name);
}

void PlayerObjectAdapter::addReverseFriend(const String& name) {
	((PlayerObjectImplementation*) impl)->addReverseFriend(name);
}

void PlayerObjectAdapter::removeReverseFriend(const String& name) {
	((PlayerObjectImplementation*) impl)->removeReverseFriend(name);
}

void PlayerObjectAdapter::sendFriendLists() {
	((PlayerObjectImplementation*) impl)->sendFriendLists();
}

bool PlayerObjectAdapter::hasWaypoint(unsigned long long objectID) {
	return ((PlayerObjectImplementation*) impl)->hasWaypoint(objectID);
}

bool PlayerObjectAdapter::hasCommandMessageString(unsigned int actionCRC) {
	return ((PlayerObjectImplementation*) impl)->hasCommandMessageString(actionCRC);
}

unsigned int PlayerObjectAdapter::getCharacterBitmask() {
	return ((PlayerObjectImplementation*) impl)->getCharacterBitmask();
}

String PlayerObjectAdapter::getTitle() {
	return ((PlayerObjectImplementation*) impl)->getTitle();
}

unsigned int PlayerObjectAdapter::getAdminLevel() {
	return ((PlayerObjectImplementation*) impl)->getAdminLevel();
}

void PlayerObjectAdapter::setAdminLevel(unsigned int adminlvl) {
	((PlayerObjectImplementation*) impl)->setAdminLevel(adminlvl);
}

bool PlayerObjectAdapter::isDeveloper() {
	return ((PlayerObjectImplementation*) impl)->isDeveloper();
}

bool PlayerObjectAdapter::isCSR() {
	return ((PlayerObjectImplementation*) impl)->isCSR();
}

bool PlayerObjectAdapter::isPrivileged() {
	return ((PlayerObjectImplementation*) impl)->isPrivileged();
}

void PlayerObjectAdapter::setCharacterBitmask(unsigned int bitmask) {
	((PlayerObjectImplementation*) impl)->setCharacterBitmask(bitmask);
}

bool PlayerObjectAdapter::setCharacterBit(unsigned int bit, bool notifyClient) {
	return ((PlayerObjectImplementation*) impl)->setCharacterBit(bit, notifyClient);
}

bool PlayerObjectAdapter::clearCharacterBit(unsigned int bit, bool notifyClient) {
	return ((PlayerObjectImplementation*) impl)->clearCharacterBit(bit, notifyClient);
}

void PlayerObjectAdapter::toggleCharacterBit(unsigned int bit) {
	((PlayerObjectImplementation*) impl)->toggleCharacterBit(bit);
}

int PlayerObjectAdapter::getForcePower() {
	return ((PlayerObjectImplementation*) impl)->getForcePower();
}

int PlayerObjectAdapter::getForcePowerMax() {
	return ((PlayerObjectImplementation*) impl)->getForcePowerMax();
}

DraftSchematic* PlayerObjectAdapter::getSchematic(int i) {
	return ((PlayerObjectImplementation*) impl)->getSchematic(i);
}

int PlayerObjectAdapter::getFoodFilling() {
	return ((PlayerObjectImplementation*) impl)->getFoodFilling();
}

int PlayerObjectAdapter::getFoodFillingMax() {
	return ((PlayerObjectImplementation*) impl)->getFoodFillingMax();
}

int PlayerObjectAdapter::getDrinkFilling() {
	return ((PlayerObjectImplementation*) impl)->getDrinkFilling();
}

int PlayerObjectAdapter::getDrinkFillingMax() {
	return ((PlayerObjectImplementation*) impl)->getDrinkFillingMax();
}

int PlayerObjectAdapter::getJediState() {
	return ((PlayerObjectImplementation*) impl)->getJediState();
}

byte PlayerObjectAdapter::getLanguageID() {
	return ((PlayerObjectImplementation*) impl)->getLanguageID();
}

int PlayerObjectAdapter::getExperience(const String& xp) {
	return ((PlayerObjectImplementation*) impl)->getExperience(xp);
}

String PlayerObjectAdapter::getCommandMessageString(unsigned int actionCRC) {
	return ((PlayerObjectImplementation*) impl)->getCommandMessageString(actionCRC);
}

/*
 *	PlayerObjectHelper
 */

PlayerObjectHelper* PlayerObjectHelper::staticInitializer = PlayerObjectHelper::instance();

PlayerObjectHelper::PlayerObjectHelper() {
	className = "PlayerObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void PlayerObjectHelper::finalizeHelper() {
	PlayerObjectHelper::finalize();
}

DistributedObject* PlayerObjectHelper::instantiateObject() {
	return new PlayerObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* PlayerObjectHelper::instantiateServant() {
	return new PlayerObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* PlayerObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new PlayerObjectAdapter((PlayerObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

