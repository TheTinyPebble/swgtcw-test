/*
 *	server/zone/objects/player/ImageDesignSession.h generated by engine3 IDL compiler 0.60
 */

#ifndef IMAGEDESIGNSESSION_H_
#define IMAGEDESIGNSESSION_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace tangible {

class TangibleObject;

} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible;

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace events {

class ImageDesignTimeoutEvent;

} // namespace events
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::events;

#include "engine/core/ManagedObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/scene/SessionFacadeType.h"

#include "server/zone/managers/professions/ImageDesignManager.h"

#include "server/zone/objects/scene/variables/CustomizationVariables.h"

#include "engine/log/Logger.h"

#include "engine/core/ManagedReference.h"

#include "engine/util/Facade.h"

#include "system/lang/ref/Reference.h"

namespace server {
namespace zone {
namespace objects {
namespace player {

class ImageDesignSession : public Facade {
public:
	ImageDesignSession(CreatureObject* parent);

	void startImageDesign(PlayerCreature* object, PlayerCreature* designer, PlayerCreature* targetPlayer, unsigned long long tent, int type = 0);

	void updateImageDesign(unsigned long long object, unsigned long long designer, unsigned long long targetPlayer, unsigned long long tent, int type = 0);

	void cancelImageDesign(unsigned long long object, unsigned long long designer, unsigned long long targetPlayer, unsigned long long tent, int type = 0);

	int initializeSession();

	int cancelSession();

	int clearSession();

	void clearIdTimeoutEvent();

	void dequeueIdTimeoutEvent();

	void sessionTimeout();

	void setHairObject(String& hair);

	void setUkstring1(String& uk1);

	void setTimeStamp(unsigned int time);

	void setRequiredPayment(unsigned int rp);

	void setOfferedPayment(unsigned int op);

	void setDesignerAccepted(byte da);

	void setTargetAccepted(unsigned int ta);

	void setStatMigration(byte sm);

	void setUnknownInt1(unsigned int value);

	void setUnknownInt4(unsigned int value);

	void setUnknownInt5(unsigned int value);

	void setUnknownInt6(unsigned int value);

	void setUnknownInt7(unsigned int value);

	void setSizeFloatAttrs(unsigned int sfa);

	void setAttributesSize(unsigned int val);

	void setHoloEmote(String& val);

	int doPayment();

	void setFloatMap(VectorMap<String, float>& map);

	void setColorMap(VectorMap<String, unsigned int>& map);

	DistributedObjectServant* _getImplementation();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	ImageDesignSession(DummyConstructorParameter* param);

	virtual ~ImageDesignSession();

	friend class ImageDesignSessionHelper;
};

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

namespace server {
namespace zone {
namespace objects {
namespace player {

class ImageDesignSessionImplementation : public FacadeImplementation {
protected:
	String hairObject;

	String ukstring1;

	unsigned int ukint1;

	unsigned int timestamp;

	unsigned int requiredPayment;

	unsigned int offeredPayment;

	byte designerAccepted;

	unsigned int targetAccepted;

	byte statMigration;

	unsigned int ukint4;

	unsigned int ukint5;

	unsigned int ukint6;

	unsigned int ukint7;

	unsigned int sizeFloatAttrs;

	unsigned int attributesSize;

	String holoEmote;

	VectorMap<String, float> floatMap;

	VectorMap<String, unsigned int> colorMap;

private:
	ImageDesignManager* idMgr;

protected:
	ManagedWeakReference<PlayerCreature* > designerCreature;

	ManagedWeakReference<PlayerCreature* > targetCreature;

	Reference<ImageDesignTimeoutEvent*> idTimeoutEvent;

public:
	ImageDesignSessionImplementation(CreatureObject* parent);

	ImageDesignSessionImplementation(DummyConstructorParameter* param);

	void startImageDesign(PlayerCreature* object, PlayerCreature* designer, PlayerCreature* targetPlayer, unsigned long long tent, int type = 0);

	void updateImageDesign(unsigned long long object, unsigned long long designer, unsigned long long targetPlayer, unsigned long long tent, int type = 0);

	void cancelImageDesign(unsigned long long object, unsigned long long designer, unsigned long long targetPlayer, unsigned long long tent, int type = 0);

	int initializeSession();

	int cancelSession();

	int clearSession();

	void clearIdTimeoutEvent();

	void dequeueIdTimeoutEvent();

	void sessionTimeout();

	void setHairObject(String& hair);

	void setUkstring1(String& uk1);

	void setTimeStamp(unsigned int time);

	void setRequiredPayment(unsigned int rp);

	void setOfferedPayment(unsigned int op);

	void setDesignerAccepted(byte da);

	void setTargetAccepted(unsigned int ta);

	void setStatMigration(byte sm);

	void setUnknownInt1(unsigned int value);

	void setUnknownInt4(unsigned int value);

	void setUnknownInt5(unsigned int value);

	void setUnknownInt6(unsigned int value);

	void setUnknownInt7(unsigned int value);

	void setSizeFloatAttrs(unsigned int sfa);

	void setAttributesSize(unsigned int val);

	void setHoloEmote(String& val);

	int doPayment();

	void setFloatMap(VectorMap<String, float>& map);

	void setColorMap(VectorMap<String, unsigned int>& map);

	ImageDesignSession* _this;

	operator const ImageDesignSession*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~ImageDesignSessionImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const String& name);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class ImageDesignSession;
};

class ImageDesignSessionAdapter : public FacadeAdapter {
public:
	ImageDesignSessionAdapter(ImageDesignSessionImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void updateImageDesign(unsigned long long object, unsigned long long designer, unsigned long long targetPlayer, unsigned long long tent, int type);

	void cancelImageDesign(unsigned long long object, unsigned long long designer, unsigned long long targetPlayer, unsigned long long tent, int type);

	int initializeSession();

	int cancelSession();

	int clearSession();

	void clearIdTimeoutEvent();

	void dequeueIdTimeoutEvent();

	void sessionTimeout();

	void setHairObject(String& hair);

	void setUkstring1(String& uk1);

	void setTimeStamp(unsigned int time);

	void setRequiredPayment(unsigned int rp);

	void setOfferedPayment(unsigned int op);

	void setDesignerAccepted(byte da);

	void setTargetAccepted(unsigned int ta);

	void setStatMigration(byte sm);

	void setUnknownInt1(unsigned int value);

	void setUnknownInt4(unsigned int value);

	void setUnknownInt5(unsigned int value);

	void setUnknownInt6(unsigned int value);

	void setUnknownInt7(unsigned int value);

	void setSizeFloatAttrs(unsigned int sfa);

	void setAttributesSize(unsigned int val);

	void setHoloEmote(String& val);

	int doPayment();

protected:
	String _param0_setHairObject__String_;
	String _param0_setUkstring1__String_;
	String _param0_setHoloEmote__String_;
};

class ImageDesignSessionHelper : public DistributedObjectClassHelper, public Singleton<ImageDesignSessionHelper> {
	static ImageDesignSessionHelper* staticInitializer;

public:
	ImageDesignSessionHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<ImageDesignSessionHelper>;
};

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

#endif /*IMAGEDESIGNSESSION_H_*/
