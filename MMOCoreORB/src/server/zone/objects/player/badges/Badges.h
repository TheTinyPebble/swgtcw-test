/*
 *	server/zone/objects/player/badges/Badges.h generated by engine3 IDL compiler 0.55
 */

#ifndef BADGES_H_
#define BADGES_H_

#include "engine/orb/DistributedObjectBroker.h"

class Player;

class Badges : public DistributedObjectStub {
public:
	Badges();

	void setBadge(int badgeindex);

	void unsetBadge(int badgeindex);

	void setBitmask(int index, unsigned int bitmask);

	bool hasBadge(int badgeindex);

	unsigned int getBitmask(int index);

	unsigned char getTypeCount(unsigned char type);

	void setTypeCount(unsigned char index, unsigned char value);

	unsigned char getNumBadges();

	void setNumBadges(unsigned char value);

protected:
	Badges(DummyConstructorParameter* param);

	virtual ~Badges();

	friend class BadgesHelper;
};

class BadgesImplementation;

class BadgesAdapter : public DistributedObjectAdapter {
public:
	BadgesAdapter(BadgesImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void setBadge(int badgeindex);

	void unsetBadge(int badgeindex);

	void setBitmask(int index, unsigned int bitmask);

	bool hasBadge(int badgeindex);

	unsigned int getBitmask(int index);

	unsigned char getTypeCount(unsigned char type);

	void setTypeCount(unsigned char index, unsigned char value);

	unsigned char getNumBadges();

	void setNumBadges(unsigned char value);

};

class BadgesHelper : public DistributedObjectClassHelper, public Singleton<BadgesHelper> {
	static BadgesHelper* staticInitializer;

public:
	BadgesHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<BadgesHelper>;
};

class BadgesServant : public DistributedObjectServant {
public:
	Badges* _this;

public:
	BadgesServant();
	virtual ~BadgesServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*BADGES_H_*/
