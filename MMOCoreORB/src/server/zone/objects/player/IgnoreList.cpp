/*
 *	server/zone/objects/player/IgnoreList.cpp generated by engine3 IDL compiler 0.55
 */

#include "IgnoreList.h"

#include "IgnoreListImplementation.h"

#include "Player.h"

#include "../../managers/player/PlayerManager.h"

#include "PlayerObject.h"

/*
 *	IgnoreListStub
 */

IgnoreList::IgnoreList(Player* player) {
	_impl = new IgnoreListImplementation(player);
	_impl->_setStub(this);
}

IgnoreList::IgnoreList(DummyConstructorParameter* param) {
	_impl = NULL;
}

IgnoreList::~IgnoreList() {
}

int IgnoreList::getCount() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		return method.executeWithSignedIntReturn();
	} else
		return ((IgnoreListImplementation*) _impl)->getCount();
}

int IgnoreList::getMagicNumber() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		return method.executeWithSignedIntReturn();
	} else
		return ((IgnoreListImplementation*) _impl)->getMagicNumber();
}

String& IgnoreList::getIgnoreName(const int i) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addSignedIntParameter(i);

		method.executeWithAsciiReturn(_return_getIgnoreName);
		return _return_getIgnoreName;
	} else
		return ((IgnoreListImplementation*) _impl)->getIgnoreName(i);
}

String& IgnoreList::getIgnoreServer(const int i) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addSignedIntParameter(i);

		method.executeWithAsciiReturn(_return_getIgnoreServer);
		return _return_getIgnoreServer;
	} else
		return ((IgnoreListImplementation*) _impl)->getIgnoreServer(i);
}

void IgnoreList::addIgnore(String& name, String& inServer) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addAsciiParameter(name);
		method.addAsciiParameter(inServer);

		method.executeWithVoidReturn();
	} else
		((IgnoreListImplementation*) _impl)->addIgnore(name, inServer);
}

void IgnoreList::ignoreMagicNumberReset() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		method.executeWithVoidReturn();
	} else
		((IgnoreListImplementation*) _impl)->ignoreMagicNumberReset();
}

void IgnoreList::removeIgnore(String& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		((IgnoreListImplementation*) _impl)->removeIgnore(name);
}

void IgnoreList::saveIgnore() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		method.executeWithVoidReturn();
	} else
		((IgnoreListImplementation*) _impl)->saveIgnore();
}

void IgnoreList::loadIgnore() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		method.executeWithVoidReturn();
	} else
		((IgnoreListImplementation*) _impl)->loadIgnore();
}

void IgnoreList::toString() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		method.executeWithVoidReturn();
	} else
		((IgnoreListImplementation*) _impl)->toString();
}

/*
 *	IgnoreListAdapter
 */

IgnoreListAdapter::IgnoreListAdapter(IgnoreListImplementation* obj) : DistributedObjectAdapter((DistributedObjectServant*) obj) {
}

Packet* IgnoreListAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertSignedInt(getCount());
		break;
	case 7:
		resp->insertSignedInt(getMagicNumber());
		break;
	case 8:
		resp->insertAscii(getIgnoreName(inv->getSignedIntParameter()));
		break;
	case 9:
		resp->insertAscii(getIgnoreServer(inv->getSignedIntParameter()));
		break;
	case 10:
		addIgnore(inv->getAsciiParameter(_param0_addIgnore__String_String_), inv->getAsciiParameter(_param1_addIgnore__String_String_));
		break;
	case 11:
		ignoreMagicNumberReset();
		break;
	case 12:
		removeIgnore(inv->getAsciiParameter(_param0_removeIgnore__String_));
		break;
	case 13:
		saveIgnore();
		break;
	case 14:
		loadIgnore();
		break;
	case 15:
		toString();
		break;
	default:
		return NULL;
	}

	return resp;
}

int IgnoreListAdapter::getCount() {
	return ((IgnoreListImplementation*) impl)->getCount();
}

int IgnoreListAdapter::getMagicNumber() {
	return ((IgnoreListImplementation*) impl)->getMagicNumber();
}

String& IgnoreListAdapter::getIgnoreName(const int i) {
	return ((IgnoreListImplementation*) impl)->getIgnoreName(i);
}

String& IgnoreListAdapter::getIgnoreServer(const int i) {
	return ((IgnoreListImplementation*) impl)->getIgnoreServer(i);
}

void IgnoreListAdapter::addIgnore(String& name, String& inServer) {
	return ((IgnoreListImplementation*) impl)->addIgnore(name, inServer);
}

void IgnoreListAdapter::ignoreMagicNumberReset() {
	return ((IgnoreListImplementation*) impl)->ignoreMagicNumberReset();
}

void IgnoreListAdapter::removeIgnore(String& name) {
	return ((IgnoreListImplementation*) impl)->removeIgnore(name);
}

void IgnoreListAdapter::saveIgnore() {
	return ((IgnoreListImplementation*) impl)->saveIgnore();
}

void IgnoreListAdapter::loadIgnore() {
	return ((IgnoreListImplementation*) impl)->loadIgnore();
}

void IgnoreListAdapter::toString() {
	return ((IgnoreListImplementation*) impl)->toString();
}

/*
 *	IgnoreListHelper
 */

IgnoreListHelper* IgnoreListHelper::staticInitializer = IgnoreListHelper::instance();

IgnoreListHelper::IgnoreListHelper() {
	className = "IgnoreList";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void IgnoreListHelper::finalizeHelper() {
	IgnoreListHelper::finalize();
}

DistributedObject* IgnoreListHelper::instantiateObject() {
	return new IgnoreList(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* IgnoreListHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new IgnoreListAdapter((IgnoreListImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	IgnoreListServant
 */

IgnoreListServant::IgnoreListServant() {
	_classHelper = IgnoreListHelper::instance();
}

IgnoreListServant::~IgnoreListServant() {
}

void IgnoreListServant::_setStub(DistributedObjectStub* stub) {
	_this = (IgnoreList*) stub;
}

DistributedObjectStub* IgnoreListServant::_getStub() {
	return _this;
}

