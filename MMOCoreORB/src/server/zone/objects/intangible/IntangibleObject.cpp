/*
 *	server/zone/objects/intangible/IntangibleObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "IntangibleObject.h"

/*
 *	IntangibleObjectStub
 */

IntangibleObject::IntangibleObject(LuaObject* templateData) : SceneObject(DummyConstructorParameter::instance()) {
	_impl = new IntangibleObjectImplementation(templateData);
	_impl->_setStub(this);
}

IntangibleObject::IntangibleObject(DummyConstructorParameter* param) : SceneObject(param) {
}

IntangibleObject::~IntangibleObject() {
}

void IntangibleObject::loadTemplateData(LuaObject* templateData) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((IntangibleObjectImplementation*) _impl)->loadTemplateData(templateData);
}

void IntangibleObject::initializeTransientMembers() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((IntangibleObjectImplementation*) _impl)->initializeTransientMembers();
}

void IntangibleObject::sendBaselinesTo(SceneObject* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((IntangibleObjectImplementation*) _impl)->sendBaselinesTo(player);
}

unsigned int IntangibleObject::getStatus() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((IntangibleObjectImplementation*) _impl)->getStatus();
}

/*
 *	IntangibleObjectImplementation
 */

IntangibleObjectImplementation::IntangibleObjectImplementation(DummyConstructorParameter* param) : SceneObjectImplementation(param) {
	_initializeImplementation();
}

IntangibleObjectImplementation::~IntangibleObjectImplementation() {
}

void IntangibleObjectImplementation::_initializeImplementation() {
	_setClassHelper(IntangibleObjectHelper::instance());

	_serializationHelperMethod();
}

void IntangibleObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (IntangibleObject*) stub;
	SceneObjectImplementation::_setStub(stub);
}

DistributedObjectStub* IntangibleObjectImplementation::_getStub() {
	return _this;
}

IntangibleObjectImplementation::operator const IntangibleObject*() {
	return _this;
}

void IntangibleObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void IntangibleObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void IntangibleObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void IntangibleObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void IntangibleObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void IntangibleObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void IntangibleObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void IntangibleObjectImplementation::_serializationHelperMethod() {
	SceneObjectImplementation::_serializationHelperMethod();

	_setClassName("IntangibleObject");

	addSerializableVariable("status", &status);
}

IntangibleObjectImplementation::IntangibleObjectImplementation(LuaObject* templateData) : SceneObjectImplementation((templateData)) {
	_initializeImplementation();
	// server/zone/objects/intangible/IntangibleObject.idl(56):  Logger.setLoggingName("IntangibleObject");
	Logger::setLoggingName("IntangibleObject");
	// server/zone/objects/intangible/IntangibleObject.idl(58):  loadTemplateData(templateData);
	loadTemplateData(templateData);
	// server/zone/objects/intangible/IntangibleObject.idl(60):  status = 0;
	status = 0;
}

unsigned int IntangibleObjectImplementation::getStatus() {
	// server/zone/objects/intangible/IntangibleObject.idl(70):  return status;
	return status;
}

/*
 *	IntangibleObjectAdapter
 */

IntangibleObjectAdapter::IntangibleObjectAdapter(IntangibleObjectImplementation* obj) : SceneObjectAdapter(obj) {
}

Packet* IntangibleObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initializeTransientMembers();
		break;
	case 7:
		sendBaselinesTo((SceneObject*) inv->getObjectParameter());
		break;
	case 8:
		resp->insertInt(getStatus());
		break;
	default:
		return NULL;
	}

	return resp;
}

void IntangibleObjectAdapter::initializeTransientMembers() {
	((IntangibleObjectImplementation*) impl)->initializeTransientMembers();
}

void IntangibleObjectAdapter::sendBaselinesTo(SceneObject* player) {
	((IntangibleObjectImplementation*) impl)->sendBaselinesTo(player);
}

unsigned int IntangibleObjectAdapter::getStatus() {
	return ((IntangibleObjectImplementation*) impl)->getStatus();
}

/*
 *	IntangibleObjectHelper
 */

IntangibleObjectHelper* IntangibleObjectHelper::staticInitializer = IntangibleObjectHelper::instance();

IntangibleObjectHelper::IntangibleObjectHelper() {
	className = "IntangibleObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void IntangibleObjectHelper::finalizeHelper() {
	IntangibleObjectHelper::finalize();
}

DistributedObject* IntangibleObjectHelper::instantiateObject() {
	return new IntangibleObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* IntangibleObjectHelper::instantiateServant() {
	return new IntangibleObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* IntangibleObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new IntangibleObjectAdapter((IntangibleObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

