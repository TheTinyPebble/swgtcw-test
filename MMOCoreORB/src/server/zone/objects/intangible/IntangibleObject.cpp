/*
 *	server/zone/objects/intangible/IntangibleObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "IntangibleObject.h"

#include "IntangibleObjectImplementation.h"

#include "../scene/SceneObject.h"

#include "../player/Player.h"

/*
 *	IntangibleObjectStub
 */

IntangibleObject::IntangibleObject(unsigned long long oid, String& n, String& stringFile, String& stringName, unsigned int objCRC, SceneObject* cont) : SceneObject(DummyConstructorParameter::instance()) {
	_impl = new IntangibleObjectImplementation(oid, n, stringFile, stringName, objCRC, cont);
	_impl->_setStub(this);
}

IntangibleObject::IntangibleObject(unsigned long long oid, int tp) : SceneObject(DummyConstructorParameter::instance()) {
	_impl = new IntangibleObjectImplementation(oid, tp);
	_impl->_setStub(this);
}

IntangibleObject::IntangibleObject(DummyConstructorParameter* param) : SceneObject(param) {
}

IntangibleObject::~IntangibleObject() {
}

void IntangibleObject::sendTo(Player* player, bool doClose) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);
		method.addBooleanParameter(doClose);

		method.executeWithVoidReturn();
	} else
		((IntangibleObjectImplementation*) _impl)->sendTo(player, doClose);
}

void IntangibleObject::sendDestroyTo(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((IntangibleObjectImplementation*) _impl)->sendDestroyTo(player);
}

void IntangibleObject::updateStatus(unsigned int stat) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addUnsignedIntParameter(stat);

		method.executeWithVoidReturn();
	} else
		((IntangibleObjectImplementation*) _impl)->updateStatus(stat);
}

SceneObject* IntangibleObject::getWorldObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((IntangibleObjectImplementation*) _impl)->getWorldObject();
}

unsigned int IntangibleObject::getStatus() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((IntangibleObjectImplementation*) _impl)->getStatus();
}

void IntangibleObject::setWorldObject(SceneObject* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((IntangibleObjectImplementation*) _impl)->setWorldObject(obj);
}

/*
 *	IntangibleObjectAdapter
 */

IntangibleObjectAdapter::IntangibleObjectAdapter(IntangibleObjectImplementation* obj) : SceneObjectAdapter(obj) {
}

Packet* IntangibleObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		sendTo((Player*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 7:
		sendDestroyTo((Player*) inv->getObjectParameter());
		break;
	case 8:
		updateStatus(inv->getUnsignedIntParameter());
		break;
	case 9:
		resp->insertLong(getWorldObject()->_getObjectID());
		break;
	case 10:
		resp->insertInt(getStatus());
		break;
	case 11:
		setWorldObject((SceneObject*) inv->getObjectParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void IntangibleObjectAdapter::sendTo(Player* player, bool doClose) {
	return ((IntangibleObjectImplementation*) impl)->sendTo(player, doClose);
}

void IntangibleObjectAdapter::sendDestroyTo(Player* player) {
	return ((IntangibleObjectImplementation*) impl)->sendDestroyTo(player);
}

void IntangibleObjectAdapter::updateStatus(unsigned int stat) {
	return ((IntangibleObjectImplementation*) impl)->updateStatus(stat);
}

SceneObject* IntangibleObjectAdapter::getWorldObject() {
	return ((IntangibleObjectImplementation*) impl)->getWorldObject();
}

unsigned int IntangibleObjectAdapter::getStatus() {
	return ((IntangibleObjectImplementation*) impl)->getStatus();
}

void IntangibleObjectAdapter::setWorldObject(SceneObject* obj) {
	return ((IntangibleObjectImplementation*) impl)->setWorldObject(obj);
}

/*
 *	IntangibleObjectHelper
 */

IntangibleObjectHelper* IntangibleObjectHelper::staticInitializer = IntangibleObjectHelper::instance();

IntangibleObjectHelper::IntangibleObjectHelper() {
	className = "IntangibleObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void IntangibleObjectHelper::finalizeHelper() {
	IntangibleObjectHelper::finalize();
}

DistributedObject* IntangibleObjectHelper::instantiateObject() {
	return new IntangibleObject(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* IntangibleObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new IntangibleObjectAdapter((IntangibleObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	IntangibleObjectServant
 */

IntangibleObjectServant::IntangibleObjectServant(unsigned long long oid, int type) : SceneObjectImplementation(oid, type) {
	_classHelper = IntangibleObjectHelper::instance();
}

IntangibleObjectServant::~IntangibleObjectServant() {
}

void IntangibleObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (IntangibleObject*) stub;
	SceneObjectServant::_setStub(stub);
}

DistributedObjectStub* IntangibleObjectServant::_getStub() {
	return _this;
}

