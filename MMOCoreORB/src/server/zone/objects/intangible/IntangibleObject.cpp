/*
 *	server/zone/objects/intangible/IntangibleObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "IntangibleObject.h"

#include "server/zone/Zone.h"

#include "server/zone/templates/SharedObjectTemplate.h"

/*
 *	IntangibleObjectStub
 */

IntangibleObject::IntangibleObject() : SceneObject(DummyConstructorParameter::instance()) {
	IntangibleObjectImplementation* _implementation = new IntangibleObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

IntangibleObject::IntangibleObject(DummyConstructorParameter* param) : SceneObject(param) {
}

IntangibleObject::~IntangibleObject() {
}


void IntangibleObject::initializeTransientMembers() {
	IntangibleObjectImplementation* _implementation = (IntangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void IntangibleObject::loadTemplateData(SharedObjectTemplate* templateData) {
	IntangibleObjectImplementation* _implementation = (IntangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->loadTemplateData(templateData);
}

bool IntangibleObject::isIntangibleObject() {
	IntangibleObjectImplementation* _implementation = (IntangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isIntangibleObject();
}

void IntangibleObject::sendBaselinesTo(SceneObject* player) {
	IntangibleObjectImplementation* _implementation = (IntangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendBaselinesTo(player);
}

void IntangibleObject::updateStatus(int newStatus, bool notifyClient) {
	IntangibleObjectImplementation* _implementation = (IntangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addSignedIntParameter(newStatus);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->updateStatus(newStatus, notifyClient);
}

unsigned int IntangibleObject::getStatus() {
	IntangibleObjectImplementation* _implementation = (IntangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getStatus();
}

DistributedObjectServant* IntangibleObject::_getImplementation() {

	_updated = true;
	return _impl;
}

void IntangibleObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;}

/*
 *	IntangibleObjectImplementation
 */

IntangibleObjectImplementation::IntangibleObjectImplementation(DummyConstructorParameter* param) : SceneObjectImplementation(param) {
	_initializeImplementation();
}


IntangibleObjectImplementation::~IntangibleObjectImplementation() {
	IntangibleObjectImplementation::finalize();
}


void IntangibleObjectImplementation::_initializeImplementation() {
	_setClassHelper(IntangibleObjectHelper::instance());

	_serializationHelperMethod();
}

void IntangibleObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (IntangibleObject*) stub;
	SceneObjectImplementation::_setStub(stub);
}

DistributedObjectStub* IntangibleObjectImplementation::_getStub() {
	return _this;
}

IntangibleObjectImplementation::operator const IntangibleObject*() {
	return _this;
}

void IntangibleObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void IntangibleObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void IntangibleObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void IntangibleObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void IntangibleObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void IntangibleObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void IntangibleObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void IntangibleObjectImplementation::_serializationHelperMethod() {
	SceneObjectImplementation::_serializationHelperMethod();

	_setClassName("IntangibleObject");

	addSerializableVariable("status", &status);
}

IntangibleObjectImplementation::IntangibleObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/intangible/IntangibleObject.idl(56):  		Logger.setLoggingName("IntangibleObject");
	Logger::setLoggingName("IntangibleObject");
	// server/zone/objects/intangible/IntangibleObject.idl(58):  		status = 0;
	status = 0;
}

void IntangibleObjectImplementation::finalize() {
}

void IntangibleObjectImplementation::loadTemplateData(SharedObjectTemplate* templateData) {
	// server/zone/objects/intangible/IntangibleObject.idl(75):  		super.loadTemplateData(templateData);
	SceneObjectImplementation::loadTemplateData(templateData);
}

bool IntangibleObjectImplementation::isIntangibleObject() {
	// server/zone/objects/intangible/IntangibleObject.idl(79):  		return true;
	return true;
}

unsigned int IntangibleObjectImplementation::getStatus() {
	// server/zone/objects/intangible/IntangibleObject.idl(86):  		return status;
	return status;
}

/*
 *	IntangibleObjectAdapter
 */

IntangibleObjectAdapter::IntangibleObjectAdapter(IntangibleObjectImplementation* obj) : SceneObjectAdapter(obj) {
}

Packet* IntangibleObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		finalize();
		break;
	case 7:
		initializeTransientMembers();
		break;
	case 8:
		resp->insertBoolean(isIntangibleObject());
		break;
	case 9:
		sendBaselinesTo((SceneObject*) inv->getObjectParameter());
		break;
	case 10:
		updateStatus(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 11:
		resp->insertInt(getStatus());
		break;
	default:
		return NULL;
	}

	return resp;
}

void IntangibleObjectAdapter::finalize() {
	((IntangibleObjectImplementation*) impl)->finalize();
}

void IntangibleObjectAdapter::initializeTransientMembers() {
	((IntangibleObjectImplementation*) impl)->initializeTransientMembers();
}

bool IntangibleObjectAdapter::isIntangibleObject() {
	return ((IntangibleObjectImplementation*) impl)->isIntangibleObject();
}

void IntangibleObjectAdapter::sendBaselinesTo(SceneObject* player) {
	((IntangibleObjectImplementation*) impl)->sendBaselinesTo(player);
}

void IntangibleObjectAdapter::updateStatus(int newStatus, bool notifyClient) {
	((IntangibleObjectImplementation*) impl)->updateStatus(newStatus, notifyClient);
}

unsigned int IntangibleObjectAdapter::getStatus() {
	return ((IntangibleObjectImplementation*) impl)->getStatus();
}

/*
 *	IntangibleObjectHelper
 */

IntangibleObjectHelper* IntangibleObjectHelper::staticInitializer = IntangibleObjectHelper::instance();

IntangibleObjectHelper::IntangibleObjectHelper() {
	className = "IntangibleObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void IntangibleObjectHelper::finalizeHelper() {
	IntangibleObjectHelper::finalize();
}

DistributedObject* IntangibleObjectHelper::instantiateObject() {
	return new IntangibleObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* IntangibleObjectHelper::instantiateServant() {
	return new IntangibleObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* IntangibleObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new IntangibleObjectAdapter((IntangibleObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

