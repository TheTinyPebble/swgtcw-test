/*
 *	server/zone/objects/intangible/ShipControlDevice.h generated by engine3 IDL compiler 0.60
 */

#ifndef SHIPCONTROLDEVICE_H_
#define SHIPCONTROLDEVICE_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace packets {
namespace object {

class ObjectMenuResponse;

} // namespace object
} // namespace packets
} // namespace zone
} // namespace server

using namespace server::zone::packets::object;

#include "server/zone/managers/radial/RadialOptions.h"

#include "engine/core/ManagedObject.h"

#include "server/zone/objects/intangible/ControlDevice.h"

namespace server {
namespace zone {
namespace objects {
namespace intangible {

class ShipControlDevice : public ControlDevice {
public:
	ShipControlDevice();

	void storeObject(CreatureObject* player);

	void generateObject(CreatureObject* player);

	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	void fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player);

	DistributedObjectServant* _getImplementation();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	ShipControlDevice(DummyConstructorParameter* param);

	virtual ~ShipControlDevice();

	friend class ShipControlDeviceHelper;
};

} // namespace intangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::intangible;

namespace server {
namespace zone {
namespace objects {
namespace intangible {

class ShipControlDeviceImplementation : public ControlDeviceImplementation {

public:
	ShipControlDeviceImplementation();

	ShipControlDeviceImplementation(DummyConstructorParameter* param);

	void storeObject(CreatureObject* player);

	void generateObject(CreatureObject* player);

	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	void fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player);

	WeakReference<ShipControlDevice*> _this;

	operator const ShipControlDevice*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~ShipControlDeviceImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const String& name);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class ShipControlDevice;
};

class ShipControlDeviceAdapter : public ControlDeviceAdapter {
public:
	ShipControlDeviceAdapter(ShipControlDevice* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void storeObject(CreatureObject* player);

	void generateObject(CreatureObject* player);

	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

};

class ShipControlDeviceHelper : public DistributedObjectClassHelper, public Singleton<ShipControlDeviceHelper> {
	static ShipControlDeviceHelper* staticInitializer;

public:
	ShipControlDeviceHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<ShipControlDeviceHelper>;
};

} // namespace intangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::intangible;

#endif /*SHIPCONTROLDEVICE_H_*/
