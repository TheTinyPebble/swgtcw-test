/*
 *	server/zone/objects/installation/garage/GarageInstallation.h generated by engine3 IDL compiler 0.60
 */

#ifndef GARAGEINSTALLATION_H_
#define GARAGEINSTALLATION_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace area {

class ActiveArea;

} // namespace area
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::area;

#include "server/zone/objects/installation/InstallationObject.h"

namespace server {
namespace zone {
namespace objects {
namespace installation {
namespace garage {

class GarageInstallation : public InstallationObject {
public:
	GarageInstallation();

	void createChildObjects();

	void destroyObjectFromDatabase(bool destroyContainedObjects = false);

	DistributedObjectServant* _getImplementation();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	GarageInstallation(DummyConstructorParameter* param);

	virtual ~GarageInstallation();

	friend class GarageInstallationHelper;
};

} // namespace garage
} // namespace installation
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::installation::garage;

namespace server {
namespace zone {
namespace objects {
namespace installation {
namespace garage {

class GarageInstallationImplementation : public InstallationObjectImplementation {
protected:
	ManagedReference<ActiveArea* > garageArea;

public:
	GarageInstallationImplementation();

	GarageInstallationImplementation(DummyConstructorParameter* param);

	void createChildObjects();

	void destroyObjectFromDatabase(bool destroyContainedObjects = false);

	GarageInstallation* _this;

	operator const GarageInstallation*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~GarageInstallationImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();

	friend class GarageInstallation;
};

class GarageInstallationAdapter : public InstallationObjectAdapter {
public:
	GarageInstallationAdapter(GarageInstallationImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void createChildObjects();

	void destroyObjectFromDatabase(bool destroyContainedObjects);

};

class GarageInstallationHelper : public DistributedObjectClassHelper, public Singleton<GarageInstallationHelper> {
	static GarageInstallationHelper* staticInitializer;

public:
	GarageInstallationHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<GarageInstallationHelper>;
};

} // namespace garage
} // namespace installation
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::installation::garage;

#endif /*GARAGEINSTALLATION_H_*/
