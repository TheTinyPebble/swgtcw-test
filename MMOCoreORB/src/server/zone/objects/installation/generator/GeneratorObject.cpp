/*
 *	server/zone/objects/installation/generator/GeneratorObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "GeneratorObject.h"

/*
 *	GeneratorObjectStub
 */

GeneratorObject::GeneratorObject() : InstallationObject(DummyConstructorParameter::instance()) {
	_impl = new GeneratorObjectImplementation();
	_impl->_setStub(this);
}

GeneratorObject::GeneratorObject(DummyConstructorParameter* param) : InstallationObject(param) {
}

GeneratorObject::~GeneratorObject() {
}


/*
 *	GeneratorObjectImplementation
 */

GeneratorObjectImplementation::GeneratorObjectImplementation(DummyConstructorParameter* param) : InstallationObjectImplementation(param) {
	_initializeImplementation();
}

GeneratorObjectImplementation::~GeneratorObjectImplementation() {
}


void GeneratorObjectImplementation::finalize() {
}

void GeneratorObjectImplementation::_initializeImplementation() {
	_setClassHelper(GeneratorObjectHelper::instance());

	_serializationHelperMethod();
}

void GeneratorObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (GeneratorObject*) stub;
	InstallationObjectImplementation::_setStub(stub);
}

DistributedObjectStub* GeneratorObjectImplementation::_getStub() {
	return _this;
}

GeneratorObjectImplementation::operator const GeneratorObject*() {
	return _this;
}

void GeneratorObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void GeneratorObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void GeneratorObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void GeneratorObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void GeneratorObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void GeneratorObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void GeneratorObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void GeneratorObjectImplementation::_serializationHelperMethod() {
	InstallationObjectImplementation::_serializationHelperMethod();

	_setClassName("GeneratorObject");

}

GeneratorObjectImplementation::GeneratorObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/installation/generator/GeneratorObject.idl(7):  		Logger.setLoggingName("GeneratorObject");
	Logger::setLoggingName("GeneratorObject");
}

/*
 *	GeneratorObjectAdapter
 */

GeneratorObjectAdapter::GeneratorObjectAdapter(GeneratorObjectImplementation* obj) : InstallationObjectAdapter(obj) {
}

Packet* GeneratorObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	default:
		return NULL;
	}

	return resp;
}

/*
 *	GeneratorObjectHelper
 */

GeneratorObjectHelper* GeneratorObjectHelper::staticInitializer = GeneratorObjectHelper::instance();

GeneratorObjectHelper::GeneratorObjectHelper() {
	className = "GeneratorObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void GeneratorObjectHelper::finalizeHelper() {
	GeneratorObjectHelper::finalize();
}

DistributedObject* GeneratorObjectHelper::instantiateObject() {
	return new GeneratorObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* GeneratorObjectHelper::instantiateServant() {
	return new GeneratorObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* GeneratorObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new GeneratorObjectAdapter((GeneratorObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

