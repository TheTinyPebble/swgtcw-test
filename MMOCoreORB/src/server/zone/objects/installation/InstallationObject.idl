/*
Copyright (C) 2007 <SWGEmu>
 
This File is part of Core3.
 
This program is free software; you can redistribute 
it and/or modify it under the terms of the GNU Lesser 
General Public License as published by the Free Software
Foundation; either version 2 of the License, 
or (at your option) any later version.
 
This program is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
See the GNU Lesser General Public License for
more details.
 
You should have received a copy of the GNU Lesser General 
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 
Linking Engine3 statically or dynamically with other modules 
is making a combined work based on Engine3. 
Thus, the terms and conditions of the GNU Lesser General Public License 
cover the whole combination.
 
In addition, as a special exception, the copyright holders of Engine3 
give you permission to combine Engine3 program with free software 
programs or libraries that are released under the GNU LGPL and with 
code included in the standard release of Core3 under the GNU LGPL 
license (or modified versions of such code, with unchanged license). 
You may copy and distribute such a system following the terms of the 
GNU LGPL for Engine3 and the licenses of the other code concerned, 
provided that you include the source code of that other code when 
and as the GNU LGPL requires distribution of source code.
 
Note that people who make modified versions of Engine3 are not obligated 
to grant this special exception for their modified versions; 
it is their choice whether to do so. The GNU Lesser General Public License 
gives permission to release a modified version without this exception; 
this exception also makes it possible to release a modified version 
which carries forward this exception.
*/

package server.zone.objects.installation;

import server.zone.objects.structure.StructureObject;
import engine.lua.LuaObject;
import system.util.SortedVector;
import server.zone.objects.creature.CreatureObject;
import server.zone.objects.player.PlayerCreature;
import server.zone.packets.object.ObjectMenuResponse;
import server.zone.packets.scene.AttributeListMessage;
import server.zone.packets.object.ObjectMenuResponse;
import engine.service.proto.BasePacket;
import system.lang.ref.Reference;
import server.zone.templates.SharedObjectTemplate;
import server.zone.objects.installation.SyncrhonizedUiListenInstallationTask;
import system.util.VectorMap;
import server.zone.objects.resource.ResourceSpawn;
import server.zone.objects.resource.ResourceContainer;
include server.zone.objects.installation.HopperList;


class InstallationObject extends StructureObject {
	@dereferenced
	protected transient Reference<SyncrhonizedUiListenInstallationTask> syncUiTask;
	protected boolean operating;
	
	@dereferenced
	protected SortedVector<PlayerCreature> operatorList;
	
	protected int installationType;
	
	@dereferenced
	protected Time resourceHopperTimestamp;
	
	@dereferenced
	protected Time lastMaintenanceTime;
	
	@dereferenced
	protected HopperList resourceHopper; // ID + Size

	protected float hopperSizeMax;
	protected float extractionRate;
	
	public InstallationObject() {
		Logger.setLoggingName("InstallationObject");
		
		super.staticObject = false;
		
		operating = false;
		
		installationType = 0;

		operatorList.setNoDuplicateInsertPlan();
		
		hopperSizeMax = 10000;
		extractionRate = 100;
	}
	
	public void initializeTransientMembers() {
		super.initializeTransientMembers();
		
		operatorList.setNoDuplicateInsertPlan();
		
		Logger.setLoggingName("InstallationObject");
	}
	
	/**
	 * Destroys this object from database
	 * @pre { this is locked }
	 * @post { this is locked }
	 * @param destroyContainedObjects if true, will destroy from database all its contained objects
	 */
	public native void destroyObjectFromDatabase(boolean destroyContainedObjects = false);
	
	/**
	 * Reads and sets the template data from a SharedObjectTemplate LuaObject
	 * @pre { templateData is a valid pointer }
	 * @post { SceneObject members are initialized }
	 * @param templateData templateData points to the LuaObject that is used to initialize SceneObejct members
	 */
	@local
	public native void loadTemplateData(SharedObjectTemplate templateData);
	
	/**
	 * Fills the radial options, needs to be overriden
	 * @pre { this object is locked }
	 * @post { this object is locked, menuResponse is complete}
	 * @param menuResponse ObjectMenuResponse that will be sent to the client
	 */
	@local
	public native void fillObjectMenuResponse(ObjectMenuResponse menuResponse, PlayerCreature player);
	
	/**
	 * Handles the radial selection sent by the client, must be overriden by inherited objects
	 * @pre { this object is locked, player is locked }
	 * @post { this object is locked, player is locked }
	 * @param player PlayerCreature that selected the option
	 * @param selectedID selected menu id
	 * @returns 0 if successfull
	 */
	public native int handleObjectMenuSelect(PlayerCreature player, byte selectedID);
	

	
 

	/**
	 * Broadcasts the message to the in range objects
	 * @pre {this object is locked, message is not null }
	 * @post {this object is locked, in range objects received a copy of the message, message is deleted }
	 * @param sendSelf if true the owner if this object receives the message too
	 */
	public native void broadcastMessage(BasePacket message, boolean sendSelf);

	
	public native void updateResourceContainerQuantity(ResourceContainer container, int newQuantity, boolean notifyClient = true);

	/**
	 * Updates this object and childre objects to database
	 * @pre { this object is locked }
	 * @post { this object is locked }
	 * @param startTask if true, queues a new update task
	 */
	public abstract native void updateToDatabaseAllObjects(boolean startTask);
	
	public abstract native void setOperating(boolean operating, boolean notifyClient = true);
	
	public native void activateUiSync();
	
	public abstract void updateOperators() {
		
	}
	
	public native void verifyOperators();
	
	public abstract native void updateInstallationWork();
	
	public native void handleStructureAddEnergy(PlayerCreature player);
	
	public native void setActiveResource(ResourceContainer container);
	public native void changeActiveResourceID(unsigned long spawnObjectID);
	public native void addResourceToHopper(ResourceContainer container);
	public native void removeResourceFromHopper(ResourceContainer container);
	public native void clearResourceHopper();
	
	public native float getHopperSize();
	
	
	/**
	 * @param workingTime Time till when the installation can work
	 * @returns true if to continue working, false to shutdown after next hopper update
	 */
	@local
	public native boolean updateMaintenance(@dereferenced Time workingTime);
	
	/**
	 * @param workingTime time till when harvester can work
	 */
	@local
	public native void updateHopper(@dereferenced Time workingTime, boolean shutdownAfterUpdate);
	
	public native int getHopperItemQuantity(ResourceSpawn spawn);
	public native ResourceContainer getContainerFromHopper(ResourceSpawn spawn);
		
	public native unsigned long getActiveResourceSpawnID();
	
	public native float getActualRate();
	
	public native void broadcastToOperators(BasePacket packet);
	
	public void addOperator(PlayerCreature player) {
		operatorList.put(player);
	}
	
	public void removeOperator(PlayerCreature player) {
		operatorList.drop(player);
	}
	
	public native void sendBaselinesTo(SceneObject player);
	
	
	
	public boolean isInstallationObject() {
		return true;
	}
	
	public boolean isOperating() {
		return operating;
	}
	
	public int getInstallationType() {
		return installationType;
	}
	
	public float getExtractionRate() {
		return extractionRate;
	}
	
	public float getHopperSizeMax() {
		return hopperSizeMax;
	}
	
	@local
	public HopperList getHopperList() {
		return resourceHopper;
	}
	
	public abstract boolean isHarvesterObject() {
		return false;
	}
	
	public abstract boolean isGeneratorObject() {
		return false;
	}
}