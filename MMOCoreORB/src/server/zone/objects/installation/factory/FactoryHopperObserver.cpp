/*
 *	server/zone/objects/installation/factory/FactoryHopperObserver.cpp generated by engine3 IDL compiler 0.60
 */

#include "FactoryHopperObserver.h"

#include "server/zone/objects/installation/factory/FactoryObject.h"

/*
 *	FactoryHopperObserverStub
 */

enum {RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_ = 6};

FactoryHopperObserver::FactoryHopperObserver(FactoryObject* fact) : Observer(DummyConstructorParameter::instance()) {
	FactoryHopperObserverImplementation* _implementation = new FactoryHopperObserverImplementation(fact);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("FactoryHopperObserver");
}

FactoryHopperObserver::FactoryHopperObserver(DummyConstructorParameter* param) : Observer(param) {
	_setClassName("FactoryHopperObserver");
}

FactoryHopperObserver::~FactoryHopperObserver() {
}



int FactoryHopperObserver::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	FactoryHopperObserverImplementation* _implementation = static_cast<FactoryHopperObserverImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(observable);
		method.addObjectParameter(arg1);
		method.addSignedLongParameter(arg2);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyObserverEvent(eventType, observable, arg1, arg2);
}

DistributedObjectServant* FactoryHopperObserver::_getImplementation() {

	_updated = true;
	return _impl;
}

void FactoryHopperObserver::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	FactoryHopperObserverImplementation
 */

FactoryHopperObserverImplementation::FactoryHopperObserverImplementation(DummyConstructorParameter* param) : ObserverImplementation(param) {
	_initializeImplementation();
}


FactoryHopperObserverImplementation::~FactoryHopperObserverImplementation() {
}


void FactoryHopperObserverImplementation::finalize() {
}

void FactoryHopperObserverImplementation::_initializeImplementation() {
	_setClassHelper(FactoryHopperObserverHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void FactoryHopperObserverImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<FactoryHopperObserver*>(stub);
	ObserverImplementation::_setStub(stub);
}

DistributedObjectStub* FactoryHopperObserverImplementation::_getStub() {
	return _this;
}

FactoryHopperObserverImplementation::operator const FactoryHopperObserver*() {
	return _this;
}

void FactoryHopperObserverImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void FactoryHopperObserverImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void FactoryHopperObserverImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void FactoryHopperObserverImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void FactoryHopperObserverImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void FactoryHopperObserverImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void FactoryHopperObserverImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void FactoryHopperObserverImplementation::_serializationHelperMethod() {
	ObserverImplementation::_serializationHelperMethod();

	_setClassName("FactoryHopperObserver");

}

void FactoryHopperObserverImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(FactoryHopperObserverImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool FactoryHopperObserverImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ObserverImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "FactoryHopperObserver.factory") {
		TypeInfo<ManagedWeakReference<FactoryObject* > >::parseFromBinaryStream(&factory, stream);
		return true;
	}


	return false;
}

void FactoryHopperObserverImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = FactoryHopperObserverImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int FactoryHopperObserverImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ObserverImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;
	_name = "FactoryHopperObserver.factory";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<FactoryObject* > >::toBinaryStream(&factory, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 1;
}

FactoryHopperObserverImplementation::FactoryHopperObserverImplementation(FactoryObject* fact) {
	_initializeImplementation();
	// server/zone/objects/installation/factory/FactoryHopperObserver.idl():  		factory = fact;
	factory = fact;
}

int FactoryHopperObserverImplementation::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	// server/zone/objects/installation/factory/FactoryHopperObserver.idl():  		if(
	if (factory == NULL)	// server/zone/objects/installation/factory/FactoryHopperObserver.idl():  			return 0;
	return 0;
	// server/zone/objects/installation/factory/FactoryHopperObserver.idl():  		return 
	if (eventType == ObserverEventType::OPENCONTAINER){
	// server/zone/objects/installation/factory/FactoryHopperObserver.idl():  			factory.openHopper(observable, arg1);
	factory->openHopper(observable, arg1);
}

	else 	// server/zone/objects/installation/factory/FactoryHopperObserver.idl():  		return 
	if (eventType == ObserverEventType::CLOSECONTAINER){
	// server/zone/objects/installation/factory/FactoryHopperObserver.idl():  			factory.closeHopper(observable, arg1);
	factory->closeHopper(observable, arg1);
}
	// server/zone/objects/installation/factory/FactoryHopperObserver.idl():  		return 0;
	return 0;
}

/*
 *	FactoryHopperObserverAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


FactoryHopperObserverAdapter::FactoryHopperObserverAdapter(FactoryHopperObserver* obj) : ObserverAdapter(obj) {
}

void FactoryHopperObserverAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_:
		{
			resp->insertSignedInt(notifyObserverEvent(inv->getUnsignedIntParameter(), static_cast<Observable*>(inv->getObjectParameter()), static_cast<ManagedObject*>(inv->getObjectParameter()), inv->getSignedLongParameter()));
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

int FactoryHopperObserverAdapter::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	return (static_cast<FactoryHopperObserver*>(stub))->notifyObserverEvent(eventType, observable, arg1, arg2);
}

/*
 *	FactoryHopperObserverHelper
 */

FactoryHopperObserverHelper* FactoryHopperObserverHelper::staticInitializer = FactoryHopperObserverHelper::instance();

FactoryHopperObserverHelper::FactoryHopperObserverHelper() {
	className = "FactoryHopperObserver";

	Core::getObjectBroker()->registerClass(className, this);
}

void FactoryHopperObserverHelper::finalizeHelper() {
	FactoryHopperObserverHelper::finalize();
}

DistributedObject* FactoryHopperObserverHelper::instantiateObject() {
	return new FactoryHopperObserver(DummyConstructorParameter::instance());
}

DistributedObjectServant* FactoryHopperObserverHelper::instantiateServant() {
	return new FactoryHopperObserverImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* FactoryHopperObserverHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new FactoryHopperObserverAdapter(static_cast<FactoryHopperObserver*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

