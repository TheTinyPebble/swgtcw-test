/*
 *	server/zone/objects/installation/factory/FactoryObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "FactoryObject.h"

/*
 *	FactoryObjectStub
 */

FactoryObject::FactoryObject() : InstallationObject(DummyConstructorParameter::instance()) {
	_impl = new FactoryObjectImplementation();
	_impl->_setStub(this);
}

FactoryObject::FactoryObject(DummyConstructorParameter* param) : InstallationObject(param) {
}

FactoryObject::~FactoryObject() {
}


/*
 *	FactoryObjectImplementation
 */

FactoryObjectImplementation::FactoryObjectImplementation(DummyConstructorParameter* param) : InstallationObjectImplementation(param) {
	_initializeImplementation();
}

FactoryObjectImplementation::~FactoryObjectImplementation() {
}


void FactoryObjectImplementation::finalize() {
}

void FactoryObjectImplementation::_initializeImplementation() {
	_setClassHelper(FactoryObjectHelper::instance());

	_serializationHelperMethod();
}

void FactoryObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (FactoryObject*) stub;
	InstallationObjectImplementation::_setStub(stub);
}

DistributedObjectStub* FactoryObjectImplementation::_getStub() {
	return _this;
}

FactoryObjectImplementation::operator const FactoryObject*() {
	return _this;
}

void FactoryObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void FactoryObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void FactoryObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void FactoryObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void FactoryObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void FactoryObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void FactoryObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void FactoryObjectImplementation::_serializationHelperMethod() {
	InstallationObjectImplementation::_serializationHelperMethod();

	_setClassName("FactoryObject");

}

FactoryObjectImplementation::FactoryObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/installation/factory/FactoryObject.idl(7):  		Logger.setLoggingName("FactoryObject");
	Logger::setLoggingName("FactoryObject");
}

/*
 *	FactoryObjectAdapter
 */

FactoryObjectAdapter::FactoryObjectAdapter(FactoryObjectImplementation* obj) : InstallationObjectAdapter(obj) {
}

Packet* FactoryObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	default:
		return NULL;
	}

	return resp;
}

/*
 *	FactoryObjectHelper
 */

FactoryObjectHelper* FactoryObjectHelper::staticInitializer = FactoryObjectHelper::instance();

FactoryObjectHelper::FactoryObjectHelper() {
	className = "FactoryObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void FactoryObjectHelper::finalizeHelper() {
	FactoryObjectHelper::finalize();
}

DistributedObject* FactoryObjectHelper::instantiateObject() {
	return new FactoryObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* FactoryObjectHelper::instantiateServant() {
	return new FactoryObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* FactoryObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new FactoryObjectAdapter((FactoryObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

