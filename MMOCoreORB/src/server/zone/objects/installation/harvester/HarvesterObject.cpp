/*
 *	server/zone/objects/installation/harvester/HarvesterObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "HarvesterObject.h"

/*
 *	HarvesterObjectStub
 */

HarvesterObject::HarvesterObject() : InstallationObject(DummyConstructorParameter::instance()) {
	_impl = new HarvesterObjectImplementation();
	_impl->_setStub(this);
}

HarvesterObject::HarvesterObject(DummyConstructorParameter* param) : InstallationObject(param) {
}

HarvesterObject::~HarvesterObject() {
}


void HarvesterObject::loadTemplateData(SharedObjectTemplate* templateData) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((HarvesterObjectImplementation*) _impl)->loadTemplateData(templateData);
}

void HarvesterObject::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((HarvesterObjectImplementation*) _impl)->fillObjectMenuResponse(menuResponse, player);
}

int HarvesterObject::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return ((HarvesterObjectImplementation*) _impl)->handleObjectMenuSelect(player, selectedID);
}

void HarvesterObject::synchronizedUIListen(SceneObject* player, int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((HarvesterObjectImplementation*) _impl)->synchronizedUIListen(player, value);
}

void HarvesterObject::synchronizedUIStopListen(SceneObject* player, int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(player);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((HarvesterObjectImplementation*) _impl)->synchronizedUIStopListen(player, value);
}

void HarvesterObject::updateOperators() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		method.executeWithVoidReturn();
	} else
		((HarvesterObjectImplementation*) _impl)->updateOperators();
}

bool HarvesterObject::isHarvesterObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		return method.executeWithBooleanReturn();
	} else
		return ((HarvesterObjectImplementation*) _impl)->isHarvesterObject();
}

/*
 *	HarvesterObjectImplementation
 */

HarvesterObjectImplementation::HarvesterObjectImplementation(DummyConstructorParameter* param) : InstallationObjectImplementation(param) {
	_initializeImplementation();
}


HarvesterObjectImplementation::~HarvesterObjectImplementation() {
}


void HarvesterObjectImplementation::finalize() {
}

void HarvesterObjectImplementation::_initializeImplementation() {
	_setClassHelper(HarvesterObjectHelper::instance());

	_serializationHelperMethod();
}

void HarvesterObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (HarvesterObject*) stub;
	InstallationObjectImplementation::_setStub(stub);
}

DistributedObjectStub* HarvesterObjectImplementation::_getStub() {
	return _this;
}

HarvesterObjectImplementation::operator const HarvesterObject*() {
	return _this;
}

void HarvesterObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void HarvesterObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void HarvesterObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void HarvesterObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void HarvesterObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void HarvesterObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void HarvesterObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void HarvesterObjectImplementation::_serializationHelperMethod() {
	InstallationObjectImplementation::_serializationHelperMethod();

	_setClassName("HarvesterObject");

}

HarvesterObjectImplementation::HarvesterObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/installation/harvester/HarvesterObject.idl(51):  		Logger.setLoggingName("HarvesterObject");
	Logger::setLoggingName("HarvesterObject");
}

void HarvesterObjectImplementation::loadTemplateData(SharedObjectTemplate* templateData) {
	// server/zone/objects/installation/harvester/HarvesterObject.idl(62):  		super.loadTemplateData(templateData);
	InstallationObjectImplementation::loadTemplateData(templateData);
	// server/zone/objects/installation/harvester/HarvesterObject.idl(64):  		super.surplusPower = 1000;
	InstallationObjectImplementation::surplusPower = 1000;
	// server/zone/objects/installation/harvester/HarvesterObject.idl(65):  		super.basePowerRate = 100;
	InstallationObjectImplementation::basePowerRate = 100;
}

bool HarvesterObjectImplementation::isHarvesterObject() {
	// server/zone/objects/installation/harvester/HarvesterObject.idl(109):  		return true;
	return true;
}

/*
 *	HarvesterObjectAdapter
 */

HarvesterObjectAdapter::HarvesterObjectAdapter(HarvesterObjectImplementation* obj) : InstallationObjectAdapter(obj) {
}

Packet* HarvesterObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertSignedInt(handleObjectMenuSelect((PlayerCreature*) inv->getObjectParameter(), inv->getByteParameter()));
		break;
	case 7:
		synchronizedUIListen((SceneObject*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case 8:
		synchronizedUIStopListen((SceneObject*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case 9:
		updateOperators();
		break;
	case 10:
		resp->insertBoolean(isHarvesterObject());
		break;
	default:
		return NULL;
	}

	return resp;
}

int HarvesterObjectAdapter::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	return ((HarvesterObjectImplementation*) impl)->handleObjectMenuSelect(player, selectedID);
}

void HarvesterObjectAdapter::synchronizedUIListen(SceneObject* player, int value) {
	((HarvesterObjectImplementation*) impl)->synchronizedUIListen(player, value);
}

void HarvesterObjectAdapter::synchronizedUIStopListen(SceneObject* player, int value) {
	((HarvesterObjectImplementation*) impl)->synchronizedUIStopListen(player, value);
}

void HarvesterObjectAdapter::updateOperators() {
	((HarvesterObjectImplementation*) impl)->updateOperators();
}

bool HarvesterObjectAdapter::isHarvesterObject() {
	return ((HarvesterObjectImplementation*) impl)->isHarvesterObject();
}

/*
 *	HarvesterObjectHelper
 */

HarvesterObjectHelper* HarvesterObjectHelper::staticInitializer = HarvesterObjectHelper::instance();

HarvesterObjectHelper::HarvesterObjectHelper() {
	className = "HarvesterObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void HarvesterObjectHelper::finalizeHelper() {
	HarvesterObjectHelper::finalize();
}

DistributedObject* HarvesterObjectHelper::instantiateObject() {
	return new HarvesterObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* HarvesterObjectHelper::instantiateServant() {
	return new HarvesterObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* HarvesterObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new HarvesterObjectAdapter((HarvesterObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

