/*
 *	server/zone/objects/installation/harvester/HarvesterObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "HarvesterObject.h"

#include "HarvesterObjectImplementation.h"

#include "../../tangible/TangibleObject.h"

#include "../../creature/CreatureObject.h"

#include "../../player/Player.h"

#include "../../tangible/deed/DeedObject.h"

#include "../../tangible/deed/harvesterdeed/HarvesterDeed.h"

#include "../InstallationObject.h"

#include "../../../Zone.h"

/*
 *	HarvesterObjectStub
 */

HarvesterObject::HarvesterObject(unsigned long long oid) : InstallationObject(DummyConstructorParameter::instance()) {
	_impl = new HarvesterObjectImplementation(oid);
	_impl->_setStub(this);
}

HarvesterObject::HarvesterObject(unsigned long long oid, HarvesterDeed* theDeed) : InstallationObject(DummyConstructorParameter::instance()) {
	_impl = new HarvesterObjectImplementation(oid, theDeed);
	_impl->_setStub(this);
}

HarvesterObject::HarvesterObject(DummyConstructorParameter* param) : InstallationObject(param) {
}

HarvesterObject::~HarvesterObject() {
}

int HarvesterObject::getHarvesterType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		return method.executeWithSignedIntReturn();
	} else
		return ((HarvesterObjectImplementation*) _impl)->getHarvesterType();
}

void HarvesterObject::changeActiveResourceID(unsigned long long oid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addUnsignedLongParameter(oid);

		method.executeWithVoidReturn();
	} else
		((HarvesterObjectImplementation*) _impl)->changeActiveResourceID(oid);
}

void HarvesterObject::updateOperatorsAddBlankActiveRescource() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		method.executeWithVoidReturn();
	} else
		((HarvesterObjectImplementation*) _impl)->updateOperatorsAddBlankActiveRescource();
}

/*
 *	HarvesterObjectAdapter
 */

HarvesterObjectAdapter::HarvesterObjectAdapter(HarvesterObjectImplementation* obj) : InstallationObjectAdapter(obj) {
}

Packet* HarvesterObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertSignedInt(getHarvesterType());
		break;
	case 7:
		changeActiveResourceID(inv->getUnsignedLongParameter());
		break;
	case 8:
		updateOperatorsAddBlankActiveRescource();
		break;
	default:
		return NULL;
	}

	return resp;
}

int HarvesterObjectAdapter::getHarvesterType() {
	return ((HarvesterObjectImplementation*) impl)->getHarvesterType();
}

void HarvesterObjectAdapter::changeActiveResourceID(unsigned long long oid) {
	return ((HarvesterObjectImplementation*) impl)->changeActiveResourceID(oid);
}

void HarvesterObjectAdapter::updateOperatorsAddBlankActiveRescource() {
	return ((HarvesterObjectImplementation*) impl)->updateOperatorsAddBlankActiveRescource();
}

/*
 *	HarvesterObjectHelper
 */

HarvesterObjectHelper* HarvesterObjectHelper::staticInitializer = HarvesterObjectHelper::instance();

HarvesterObjectHelper::HarvesterObjectHelper() {
	className = "HarvesterObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void HarvesterObjectHelper::finalizeHelper() {
	HarvesterObjectHelper::finalize();
}

DistributedObject* HarvesterObjectHelper::instantiateObject() {
	return new HarvesterObject(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* HarvesterObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new HarvesterObjectAdapter((HarvesterObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	HarvesterObjectServant
 */

HarvesterObjectServant::HarvesterObjectServant(unsigned long long oid) : InstallationObjectImplementation(oid) {
	_classHelper = HarvesterObjectHelper::instance();
}

HarvesterObjectServant::HarvesterObjectServant(unsigned long long oid, HarvesterDeed* theDeed) : InstallationObjectImplementation(oid, theDeed) {
	_classHelper = HarvesterObjectHelper::instance();
}

HarvesterObjectServant::~HarvesterObjectServant() {
}

void HarvesterObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (HarvesterObject*) stub;
	InstallationObjectServant::_setStub(stub);
}

DistributedObjectStub* HarvesterObjectServant::_getStub() {
	return _this;
}

