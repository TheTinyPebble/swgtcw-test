/*
 *	server/zone/objects/installation/harvester/HarvesterObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "HarvesterObject.h"

#include "server/zone/objects/resource/ResourceSpawn.h"

#include "server/zone/objects/resource/ResourceContainer.h"

/*
 *	HarvesterObjectStub
 */

HarvesterObject::HarvesterObject() : InstallationObject(DummyConstructorParameter::instance()) {
	_impl = new HarvesterObjectImplementation();
	_impl->_setStub(this);
}

HarvesterObject::HarvesterObject(DummyConstructorParameter* param) : InstallationObject(param) {
}

HarvesterObject::~HarvesterObject() {
}


void HarvesterObject::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((HarvesterObjectImplementation*) _impl)->fillObjectMenuResponse(menuResponse, player);
}

int HarvesterObject::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return ((HarvesterObjectImplementation*) _impl)->handleObjectMenuSelect(player, selectedID);
}

void HarvesterObject::synchronizedUIListen(SceneObject* player, int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((HarvesterObjectImplementation*) _impl)->synchronizedUIListen(player, value);
}

void HarvesterObject::synchronizedUIStopListen(SceneObject* player, int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(player);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((HarvesterObjectImplementation*) _impl)->synchronizedUIStopListen(player, value);
}

void HarvesterObject::updateToDatabaseAllObjects(bool startTask) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addBooleanParameter(startTask);

		method.executeWithVoidReturn();
	} else
		((HarvesterObjectImplementation*) _impl)->updateToDatabaseAllObjects(startTask);
}

void HarvesterObject::updateOperators() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		method.executeWithVoidReturn();
	} else
		((HarvesterObjectImplementation*) _impl)->updateOperators();
}

void HarvesterObject::setActiveResource(ResourceContainer* container) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addObjectParameter(container);

		method.executeWithVoidReturn();
	} else
		((HarvesterObjectImplementation*) _impl)->setActiveResource(container);
}

void HarvesterObject::changeActiveResourceID(unsigned long long spawnObjectID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addUnsignedLongParameter(spawnObjectID);

		method.executeWithVoidReturn();
	} else
		((HarvesterObjectImplementation*) _impl)->changeActiveResourceID(spawnObjectID);
}

void HarvesterObject::addResourceToHopper(ResourceContainer* container) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addObjectParameter(container);

		method.executeWithVoidReturn();
	} else
		((HarvesterObjectImplementation*) _impl)->addResourceToHopper(container);
}

void HarvesterObject::removeResourceFromHopper(ResourceContainer* container) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addObjectParameter(container);

		method.executeWithVoidReturn();
	} else
		((HarvesterObjectImplementation*) _impl)->removeResourceFromHopper(container);
}

void HarvesterObject::clearResourceHopper() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		method.executeWithVoidReturn();
	} else
		((HarvesterObjectImplementation*) _impl)->clearResourceHopper();
}

float HarvesterObject::getHopperSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		return method.executeWithFloatReturn();
	} else
		return ((HarvesterObjectImplementation*) _impl)->getHopperSize();
}

void HarvesterObject::updateHopper() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);

		method.executeWithVoidReturn();
	} else
		((HarvesterObjectImplementation*) _impl)->updateHopper();
}

void HarvesterObject::verifyOperators() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		method.executeWithVoidReturn();
	} else
		((HarvesterObjectImplementation*) _impl)->verifyOperators();
}

int HarvesterObject::getHopperItemQuantity(ResourceSpawn* spawn) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addObjectParameter(spawn);

		return method.executeWithSignedIntReturn();
	} else
		return ((HarvesterObjectImplementation*) _impl)->getHopperItemQuantity(spawn);
}

ResourceContainer* HarvesterObject::getContainerFromHopper(ResourceSpawn* spawn) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addObjectParameter(spawn);

		return (ResourceContainer*) method.executeWithObjectReturn();
	} else
		return ((HarvesterObjectImplementation*) _impl)->getContainerFromHopper(spawn);
}

unsigned long long HarvesterObject::getActiveResourceSpawnID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((HarvesterObjectImplementation*) _impl)->getActiveResourceSpawnID();
}

float HarvesterObject::getActualRate() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);

		return method.executeWithFloatReturn();
	} else
		return ((HarvesterObjectImplementation*) _impl)->getActualRate();
}

float HarvesterObject::getExtractionRate() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);

		return method.executeWithFloatReturn();
	} else
		return ((HarvesterObjectImplementation*) _impl)->getExtractionRate();
}

float HarvesterObject::getHopperSizeMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);

		return method.executeWithFloatReturn();
	} else
		return ((HarvesterObjectImplementation*) _impl)->getHopperSizeMax();
}

HopperList* HarvesterObject::getHopperList() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((HarvesterObjectImplementation*) _impl)->getHopperList();
}

bool HarvesterObject::isHarvesterObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);

		return method.executeWithBooleanReturn();
	} else
		return ((HarvesterObjectImplementation*) _impl)->isHarvesterObject();
}

/*
 *	HarvesterObjectImplementation
 */

HarvesterObjectImplementation::HarvesterObjectImplementation(DummyConstructorParameter* param) : InstallationObjectImplementation(param) {
	_initializeImplementation();
}

HarvesterObjectImplementation::~HarvesterObjectImplementation() {
}


void HarvesterObjectImplementation::finalize() {
}

void HarvesterObjectImplementation::_initializeImplementation() {
	_setClassHelper(HarvesterObjectHelper::instance());

	_serializationHelperMethod();
}

void HarvesterObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (HarvesterObject*) stub;
	InstallationObjectImplementation::_setStub(stub);
}

DistributedObjectStub* HarvesterObjectImplementation::_getStub() {
	return _this;
}

HarvesterObjectImplementation::operator const HarvesterObject*() {
	return _this;
}

void HarvesterObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void HarvesterObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void HarvesterObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void HarvesterObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void HarvesterObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void HarvesterObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void HarvesterObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void HarvesterObjectImplementation::_serializationHelperMethod() {
	InstallationObjectImplementation::_serializationHelperMethod();

	_setClassName("HarvesterObject");

	addSerializableVariable("resourceHopperTimestamp", &resourceHopperTimestamp);
	addSerializableVariable("lastMaintenanceTime", &lastMaintenanceTime);
	addSerializableVariable("resourceHopper", &resourceHopper);
	addSerializableVariable("hopperSizeMax", &hopperSizeMax);
	addSerializableVariable("extractionRate", &extractionRate);
}

HarvesterObjectImplementation::HarvesterObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/installation/harvester/HarvesterObject.idl(68):  		hopperSizeMax = 10;
	hopperSizeMax = 10;
	// server/zone/objects/installation/harvester/HarvesterObject.idl(69):  		extractionRate = 10;
	extractionRate = 10;
	// server/zone/objects/installation/harvester/HarvesterObject.idl(71):  		Logger.setLoggingName("HarvesterObject");
	Logger::setLoggingName("HarvesterObject");
}

float HarvesterObjectImplementation::getExtractionRate() {
	// server/zone/objects/installation/harvester/HarvesterObject.idl(139):  		return extractionRate;
	return extractionRate;
}

float HarvesterObjectImplementation::getHopperSizeMax() {
	// server/zone/objects/installation/harvester/HarvesterObject.idl(143):  		return hopperSizeMax;
	return hopperSizeMax;
}

HopperList* HarvesterObjectImplementation::getHopperList() {
	// server/zone/objects/installation/harvester/HarvesterObject.idl(148):  		return resourceHopper;
	return (&resourceHopper);
}

bool HarvesterObjectImplementation::isHarvesterObject() {
	// server/zone/objects/installation/harvester/HarvesterObject.idl(152):  		return true;
	return true;
}

/*
 *	HarvesterObjectAdapter
 */

HarvesterObjectAdapter::HarvesterObjectAdapter(HarvesterObjectImplementation* obj) : InstallationObjectAdapter(obj) {
}

Packet* HarvesterObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertSignedInt(handleObjectMenuSelect((PlayerCreature*) inv->getObjectParameter(), inv->getByteParameter()));
		break;
	case 7:
		synchronizedUIListen((SceneObject*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case 8:
		synchronizedUIStopListen((SceneObject*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case 9:
		updateToDatabaseAllObjects(inv->getBooleanParameter());
		break;
	case 10:
		updateOperators();
		break;
	case 11:
		setActiveResource((ResourceContainer*) inv->getObjectParameter());
		break;
	case 12:
		changeActiveResourceID(inv->getUnsignedLongParameter());
		break;
	case 13:
		addResourceToHopper((ResourceContainer*) inv->getObjectParameter());
		break;
	case 14:
		removeResourceFromHopper((ResourceContainer*) inv->getObjectParameter());
		break;
	case 15:
		clearResourceHopper();
		break;
	case 16:
		resp->insertFloat(getHopperSize());
		break;
	case 17:
		updateHopper();
		break;
	case 18:
		verifyOperators();
		break;
	case 19:
		resp->insertSignedInt(getHopperItemQuantity((ResourceSpawn*) inv->getObjectParameter()));
		break;
	case 20:
		resp->insertLong(getContainerFromHopper((ResourceSpawn*) inv->getObjectParameter())->_getObjectID());
		break;
	case 21:
		resp->insertLong(getActiveResourceSpawnID());
		break;
	case 22:
		resp->insertFloat(getActualRate());
		break;
	case 23:
		resp->insertFloat(getExtractionRate());
		break;
	case 24:
		resp->insertFloat(getHopperSizeMax());
		break;
	case 25:
		resp->insertBoolean(isHarvesterObject());
		break;
	default:
		return NULL;
	}

	return resp;
}

int HarvesterObjectAdapter::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	return ((HarvesterObjectImplementation*) impl)->handleObjectMenuSelect(player, selectedID);
}

void HarvesterObjectAdapter::synchronizedUIListen(SceneObject* player, int value) {
	((HarvesterObjectImplementation*) impl)->synchronizedUIListen(player, value);
}

void HarvesterObjectAdapter::synchronizedUIStopListen(SceneObject* player, int value) {
	((HarvesterObjectImplementation*) impl)->synchronizedUIStopListen(player, value);
}

void HarvesterObjectAdapter::updateToDatabaseAllObjects(bool startTask) {
	((HarvesterObjectImplementation*) impl)->updateToDatabaseAllObjects(startTask);
}

void HarvesterObjectAdapter::updateOperators() {
	((HarvesterObjectImplementation*) impl)->updateOperators();
}

void HarvesterObjectAdapter::setActiveResource(ResourceContainer* container) {
	((HarvesterObjectImplementation*) impl)->setActiveResource(container);
}

void HarvesterObjectAdapter::changeActiveResourceID(unsigned long long spawnObjectID) {
	((HarvesterObjectImplementation*) impl)->changeActiveResourceID(spawnObjectID);
}

void HarvesterObjectAdapter::addResourceToHopper(ResourceContainer* container) {
	((HarvesterObjectImplementation*) impl)->addResourceToHopper(container);
}

void HarvesterObjectAdapter::removeResourceFromHopper(ResourceContainer* container) {
	((HarvesterObjectImplementation*) impl)->removeResourceFromHopper(container);
}

void HarvesterObjectAdapter::clearResourceHopper() {
	((HarvesterObjectImplementation*) impl)->clearResourceHopper();
}

float HarvesterObjectAdapter::getHopperSize() {
	return ((HarvesterObjectImplementation*) impl)->getHopperSize();
}

void HarvesterObjectAdapter::updateHopper() {
	((HarvesterObjectImplementation*) impl)->updateHopper();
}

void HarvesterObjectAdapter::verifyOperators() {
	((HarvesterObjectImplementation*) impl)->verifyOperators();
}

int HarvesterObjectAdapter::getHopperItemQuantity(ResourceSpawn* spawn) {
	return ((HarvesterObjectImplementation*) impl)->getHopperItemQuantity(spawn);
}

ResourceContainer* HarvesterObjectAdapter::getContainerFromHopper(ResourceSpawn* spawn) {
	return ((HarvesterObjectImplementation*) impl)->getContainerFromHopper(spawn);
}

unsigned long long HarvesterObjectAdapter::getActiveResourceSpawnID() {
	return ((HarvesterObjectImplementation*) impl)->getActiveResourceSpawnID();
}

float HarvesterObjectAdapter::getActualRate() {
	return ((HarvesterObjectImplementation*) impl)->getActualRate();
}

float HarvesterObjectAdapter::getExtractionRate() {
	return ((HarvesterObjectImplementation*) impl)->getExtractionRate();
}

float HarvesterObjectAdapter::getHopperSizeMax() {
	return ((HarvesterObjectImplementation*) impl)->getHopperSizeMax();
}

bool HarvesterObjectAdapter::isHarvesterObject() {
	return ((HarvesterObjectImplementation*) impl)->isHarvesterObject();
}

/*
 *	HarvesterObjectHelper
 */

HarvesterObjectHelper* HarvesterObjectHelper::staticInitializer = HarvesterObjectHelper::instance();

HarvesterObjectHelper::HarvesterObjectHelper() {
	className = "HarvesterObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void HarvesterObjectHelper::finalizeHelper() {
	HarvesterObjectHelper::finalize();
}

DistributedObject* HarvesterObjectHelper::instantiateObject() {
	return new HarvesterObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* HarvesterObjectHelper::instantiateServant() {
	return new HarvesterObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* HarvesterObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new HarvesterObjectAdapter((HarvesterObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

