/*
Copyright (C) 2007 <SWGEmu>
 
This File is part of Core3.
 
This program is free software; you can redistribute 
it and/or modify it under the terms of the GNU Lesser 
General Public License as published by the Free Software
Foundation; either version 2 of the License, 
or (at your option) any later version.
 
This program is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
See the GNU Lesser General Public License for
more details.
 
You should have received a copy of the GNU Lesser General 
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 
Linking Engine3 statically or dynamically with other modules 
is making a combined work based on Engine3. 
Thus, the terms and conditions of the GNU Lesser General Public License 
cover the whole combination.
 
In addition, as a special exception, the copyright holders of Engine3 
give you permission to combine Engine3 program with free software 
programs or libraries that are released under the GNU LGPL and with 
code included in the standard release of Core3 under the GNU LGPL 
license (or modified versions of such code, with unchanged license). 
You may copy and distribute such a system following the terms of the 
GNU LGPL for Engine3 and the licenses of the other code concerned, 
provided that you include the source code of that other code when 
and as the GNU LGPL requires distribution of source code.
 
Note that people who make modified versions of Engine3 are not obligated 
to grant this special exception for their modified versions; 
it is their choice whether to do so. The GNU Lesser General Public License 
gives permission to release a modified version without this exception; 
this exception also makes it possible to release a modified version 
which carries forward this exception.
*/

package server.zone.objects.installation.harvester;

import server.zone.objects.installation.InstallationObject;
import system.util.VectorMap;
import server.zone.objects.resource.ResourceSpawn;
import server.zone.objects.resource.ResourceContainer;
include server.zone.objects.installation.harvester.HopperList;

class HarvesterObject extends InstallationObject {
	@dereferenced
	protected Time resourceHopperTimestamp;
	
	@dereferenced
	protected Time lastMaintenanceTime;
	
	@dereferenced
	protected HopperList resourceHopper; // ID + Size

	float hopperSizeMax;
	float extractionRate;
	
	public HarvesterObject() {
		
		hopperSizeMax = 10000;
		extractionRate = 1000;
		
		Logger.setLoggingName("HarvesterObject");
	}
	
	/**
	 * Fills the radial options, needs to be overriden
	 * @pre { this object is locked }
	 * @post { this object is locked, menuResponse is complete}
	 * @param menuResponse ObjectMenuResponse that will be sent to the client
	 */
	@local
	public native void fillObjectMenuResponse(ObjectMenuResponse menuResponse, PlayerCreature player);
	
	/**
	 * Handles the radial selection sent by the client, must be overriden by inherited objects
	 * @pre { this object is locked, player is locked }
	 * @post { this object is locked, player is locked }
	 * @param player PlayerCreature that selected the option
	 * @param selectedID selected menu id
	 * @returns 0 if successfull
	 */
	public native int handleObjectMenuSelect(PlayerCreature player, byte selectedID);
	
	/**
	 * Calls the appropriate UI Listener Function
	 * @pre { this object is locked, object is locked }
	 * @post {this object is locked, object is locked }
	 * @param player PlayerCreature using the item
	 * @param value value from packet
	 */
	public native void synchronizedUIListen(SceneObject player, int value);
	
	/**
	 * Calls the appropriate UI Stop Listener Function
	 * @pre { this object is locked, object is locked }
	 * @post {this object is locked, object is locked }
	 * @param player PlayerCreature using the item
	 * @param value value from packet
	 */
	public native void synchronizedUIStopListen(SceneObject player, int value);
	
	public native void updateResourceContainerQuantity(ResourceContainer container, int newQuantity, boolean notifyClient = true);
	
	/**
	 * Updates this object and childre objects to database
	 * @pre { this object is locked }
	 * @post { this object is locked }
	 * @param startTask if true, queues a new update task
	 */
	public abstract native void updateToDatabaseAllObjects(boolean startTask);
	
	/**
	 * Destroys this object from database
	 * @pre { this is locked }
	 * @post { this is locked }
	 * @param destroyContainedObjects if true, will destroy from database all its contained objects
	 */
	public native void destroyObjectFromDatabase(boolean destroyContainedObjects = false);
	
	public native void setOperating(boolean operating, boolean notifyClient = true);
	
	public void updateInstallationWork() {
		updateMaintenance();
		updateHopper();
	}
	
	public native void updateOperators();
	
	public native void setActiveResource(ResourceContainer container);
	public native void changeActiveResourceID(unsigned long spawnObjectID);
	public native void addResourceToHopper(ResourceContainer container);
	public native void removeResourceFromHopper(ResourceContainer container);
	public native void clearResourceHopper();
	
	public native float getHopperSize();
	public native void updateHopper();
	public native void updateMaintenance();
	
	public native int getHopperItemQuantity(ResourceSpawn spawn);
	public native ResourceContainer getContainerFromHopper(ResourceSpawn spawn);
		
	public native unsigned long getActiveResourceSpawnID();
	
	public native float getActualRate();
	
	public float getExtractionRate() {
		return extractionRate;
	}
	
	public float getHopperSizeMax() {
		return hopperSizeMax;
	}
	
	@local
	public HopperList getHopperList() {
		return resourceHopper;
	}
	
	public boolean isHarvesterObject() {
		return true;
	}
}