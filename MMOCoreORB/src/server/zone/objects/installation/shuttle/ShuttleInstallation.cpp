/*
 *	server/zone/objects/installation/shuttle/ShuttleInstallation.cpp generated by engine3 IDL compiler 0.60
 */

#include "ShuttleInstallation.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/Zone.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/objects/tangible/terminal/ticketcollector/TicketCollector.h"

#include "server/zone/objects/tangible/terminal/travel/TravelTerminal.h"

/*
 *	ShuttleInstallationStub
 */

enum {RPC_CHECKREQUISITESFORPLACEMENT__CREATUREOBJECT_ = 6,RPC_ISSHUTTLEINSTALLATION__};

ShuttleInstallation::ShuttleInstallation() : InstallationObject(DummyConstructorParameter::instance()) {
	ShuttleInstallationImplementation* _implementation = new ShuttleInstallationImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("ShuttleInstallation");
}

ShuttleInstallation::ShuttleInstallation(DummyConstructorParameter* param) : InstallationObject(param) {
	_setClassName("ShuttleInstallation");
}

ShuttleInstallation::~ShuttleInstallation() {
}



bool ShuttleInstallation::checkRequisitesForPlacement(CreatureObject* player) {
	ShuttleInstallationImplementation* _implementation = static_cast<ShuttleInstallationImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CHECKREQUISITESFORPLACEMENT__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->checkRequisitesForPlacement(player);
}

bool ShuttleInstallation::isShuttleInstallation() {
	ShuttleInstallationImplementation* _implementation = static_cast<ShuttleInstallationImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSHUTTLEINSTALLATION__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isShuttleInstallation();
}

DistributedObjectServant* ShuttleInstallation::_getImplementation() {

	_updated = true;
	return _impl;
}

void ShuttleInstallation::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	ShuttleInstallationImplementation
 */

ShuttleInstallationImplementation::ShuttleInstallationImplementation(DummyConstructorParameter* param) : InstallationObjectImplementation(param) {
	_initializeImplementation();
}


ShuttleInstallationImplementation::~ShuttleInstallationImplementation() {
}


void ShuttleInstallationImplementation::finalize() {
}

void ShuttleInstallationImplementation::_initializeImplementation() {
	_setClassHelper(ShuttleInstallationHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void ShuttleInstallationImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<ShuttleInstallation*>(stub);
	InstallationObjectImplementation::_setStub(stub);
}

DistributedObjectStub* ShuttleInstallationImplementation::_getStub() {
	return _this.get();
}

ShuttleInstallationImplementation::operator const ShuttleInstallation*() {
	return _this.get();
}

void ShuttleInstallationImplementation::lock(bool doLock) {
	_this.get()->lock(doLock);
}

void ShuttleInstallationImplementation::lock(ManagedObject* obj) {
	_this.get()->lock(obj);
}

void ShuttleInstallationImplementation::rlock(bool doLock) {
	_this.get()->rlock(doLock);
}

void ShuttleInstallationImplementation::wlock(bool doLock) {
	_this.get()->wlock(doLock);
}

void ShuttleInstallationImplementation::wlock(ManagedObject* obj) {
	_this.get()->wlock(obj);
}

void ShuttleInstallationImplementation::unlock(bool doLock) {
	_this.get()->unlock(doLock);
}

void ShuttleInstallationImplementation::runlock(bool doLock) {
	_this.get()->runlock(doLock);
}

void ShuttleInstallationImplementation::_serializationHelperMethod() {
	InstallationObjectImplementation::_serializationHelperMethod();

	_setClassName("ShuttleInstallation");

}

void ShuttleInstallationImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(ShuttleInstallationImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ShuttleInstallationImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (InstallationObjectImplementation::readObjectMember(stream, _name))
		return true;


	return false;
}

void ShuttleInstallationImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ShuttleInstallationImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ShuttleInstallationImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = InstallationObjectImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;

	return _count + 0;
}

ShuttleInstallationImplementation::ShuttleInstallationImplementation() {
	_initializeImplementation();
	// server/zone/objects/installation/shuttle/ShuttleInstallation.idl():  		setLoggingName("ShuttleInstallation");
	setLoggingName("ShuttleInstallation");
}

bool ShuttleInstallationImplementation::isShuttleInstallation() {
	// server/zone/objects/installation/shuttle/ShuttleInstallation.idl():  		return true;
	return true;
}

/*
 *	ShuttleInstallationAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


ShuttleInstallationAdapter::ShuttleInstallationAdapter(ShuttleInstallation* obj) : InstallationObjectAdapter(obj) {
}

void ShuttleInstallationAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_CHECKREQUISITESFORPLACEMENT__CREATUREOBJECT_:
		{
			resp->insertBoolean(checkRequisitesForPlacement(static_cast<CreatureObject*>(inv->getObjectParameter())));
		}
		break;
	case RPC_ISSHUTTLEINSTALLATION__:
		{
			resp->insertBoolean(isShuttleInstallation());
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

bool ShuttleInstallationAdapter::checkRequisitesForPlacement(CreatureObject* player) {
	return (static_cast<ShuttleInstallation*>(stub))->checkRequisitesForPlacement(player);
}

bool ShuttleInstallationAdapter::isShuttleInstallation() {
	return (static_cast<ShuttleInstallation*>(stub))->isShuttleInstallation();
}

/*
 *	ShuttleInstallationHelper
 */

ShuttleInstallationHelper* ShuttleInstallationHelper::staticInitializer = ShuttleInstallationHelper::instance();

ShuttleInstallationHelper::ShuttleInstallationHelper() {
	className = "ShuttleInstallation";

	Core::getObjectBroker()->registerClass(className, this);
}

void ShuttleInstallationHelper::finalizeHelper() {
	ShuttleInstallationHelper::finalize();
}

DistributedObject* ShuttleInstallationHelper::instantiateObject() {
	return new ShuttleInstallation(DummyConstructorParameter::instance());
}

DistributedObjectServant* ShuttleInstallationHelper::instantiateServant() {
	return new ShuttleInstallationImplementation();
}

DistributedObjectAdapter* ShuttleInstallationHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ShuttleInstallationAdapter(static_cast<ShuttleInstallation*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

