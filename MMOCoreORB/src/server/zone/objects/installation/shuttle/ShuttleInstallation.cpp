/*
 *	server/zone/objects/installation/shuttle/ShuttleInstallation.cpp generated by engine3 IDL compiler 0.60
 */

#include "ShuttleInstallation.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/Zone.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/objects/creature/shuttle/ShuttleCreature.h"

#include "server/zone/objects/tangible/terminal/ticketcollector/TicketCollector.h"

#include "server/zone/objects/tangible/terminal/travel/TravelTerminal.h"


// Imported class dependencies

#include "server/zone/managers/planet/PlanetManager.h"

#include "server/zone/objects/player/TradeContainer.h"

#include "server/zone/objects/creature/shuttle/ShuttleCreature.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/managers/object/ObjectMap.h"

#include "server/zone/objects/tangible/weapon/WeaponObject.h"

#include "server/zone/objects/scene/variables/CustomizationVariables.h"

#include "server/zone/managers/planet/MapLocationTable.h"

#include "server/zone/objects/creature/buffs/BuffList.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "server/zone/objects/structure/events/StructureMaintenanceTask.h"

#include "server/zone/objects/structure/StructurePermissionList.h"

#include "server/zone/managers/creature/CreatureManager.h"

#include "server/zone/objects/creature/variables/SkillBoxList.h"

#include "server/zone/objects/area/ActiveArea.h"

#include "system/util/SortedVector.h"

#include "server/zone/objects/intangible/ControlDevice.h"

#include "server/zone/objects/installation/SyncrhonizedUiListenInstallationTask.h"

#include "server/zone/objects/player/events/PlayerRecoveryEvent.h"

#include "server/zone/objects/scene/ObserverEventMap.h"

#include "server/zone/Zone.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/objects/player/badges/Badges.h"

#include "server/zone/objects/creature/damageovertime/DamageOverTimeList.h"

#include "server/zone/objects/player/events/PlayerDisconnectEvent.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/creature/shuttle/ShuttleTakeOffEvent.h"

#include "system/util/VectorMap.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/scene/variables/DeltaVector.h"

#include "system/lang/Time.h"

#include "server/zone/objects/tangible/tool/CraftingTool.h"

#include "server/zone/ZoneProcessServerImplementation.h"

#include "server/zone/objects/creature/variables/CooldownTimerMap.h"

#include "server/zone/ZoneClientSession.h"

#include "server/zone/objects/scene/variables/StringId.h"

#include "server/zone/objects/scene/variables/DeltaVectorMap.h"

#include "server/zone/objects/tangible/tool/SurveyTool.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

#include "server/zone/objects/group/GroupObject.h"

#include "engine/util/Quaternion.h"

#include "system/util/Vector.h"

#include "server/zone/objects/installation/HopperList.h"

#include "server/zone/objects/creature/shuttle/ShuttleLandingEvent.h"

#include "server/zone/managers/planet/HeightMap.h"

/*
 *	ShuttleInstallationStub
 */

ShuttleInstallation::ShuttleInstallation() : InstallationObject(DummyConstructorParameter::instance()) {
	ManagedObject::_setImplementation(new ShuttleInstallationImplementation());
	ManagedObject::_getImplementation()->_setStub(this);
}

ShuttleInstallation::ShuttleInstallation(DummyConstructorParameter* param) : InstallationObject(param) {
}

ShuttleInstallation::~ShuttleInstallation() {
}


void ShuttleInstallation::insertToZone(Zone* zone) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(zone);

		method.executeWithVoidReturn();
	} else
		((ShuttleInstallationImplementation*) _getImplementation())->insertToZone(zone);
}

void ShuttleInstallation::spawnShuttleObjects() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		((ShuttleInstallationImplementation*) _getImplementation())->spawnShuttleObjects();
}

bool ShuttleInstallation::checkRequisitesForPlacement(PlayerCreature* player) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return ((ShuttleInstallationImplementation*) _getImplementation())->checkRequisitesForPlacement(player);
}

/*
 *	ShuttleInstallationImplementation
 */

ShuttleInstallationImplementation::ShuttleInstallationImplementation(DummyConstructorParameter* param) : InstallationObjectImplementation(param) {
	_initializeImplementation();
}


ShuttleInstallationImplementation::~ShuttleInstallationImplementation() {
}


void ShuttleInstallationImplementation::finalize() {
}

void ShuttleInstallationImplementation::_initializeImplementation() {
	_setClassHelper(ShuttleInstallationHelper::instance());

	_serializationHelperMethod();
}

void ShuttleInstallationImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (ShuttleInstallation*) stub;
	InstallationObjectImplementation::_setStub(stub);
}

DistributedObjectStub* ShuttleInstallationImplementation::_getStub() {
	return _this;
}

ShuttleInstallationImplementation::operator const ShuttleInstallation*() {
	return _this;
}

TransactionalObject* ShuttleInstallationImplementation::clone() {
	return (TransactionalObject*) new ShuttleInstallationImplementation(*this);
}


void ShuttleInstallationImplementation::lock(bool doLock) {
}

void ShuttleInstallationImplementation::lock(ManagedObject* obj) {
}

void ShuttleInstallationImplementation::rlock(bool doLock) {
}

void ShuttleInstallationImplementation::wlock(bool doLock) {
}

void ShuttleInstallationImplementation::wlock(ManagedObject* obj) {
}

void ShuttleInstallationImplementation::unlock(bool doLock) {
}

void ShuttleInstallationImplementation::runlock(bool doLock) {
}

void ShuttleInstallationImplementation::_serializationHelperMethod() {
	InstallationObjectImplementation::_serializationHelperMethod();

	_setClassName("ShuttleInstallation");

	addSerializableVariable("shuttle", &shuttle);
	addSerializableVariable("ticketCollector", &ticketCollector);
	addSerializableVariable("travelTerminal", &travelTerminal);
}

ShuttleInstallationImplementation::ShuttleInstallationImplementation() {
	_initializeImplementation();
	// server/zone/objects/installation/shuttle/ShuttleInstallation.idl(70):  		setLoggingName("ShuttleInstallation");
	setLoggingName("ShuttleInstallation");
}

void ShuttleInstallationImplementation::insertToZone(Zone* zone) {
	// server/zone/objects/installation/shuttle/ShuttleInstallation.idl(80):  		super.insertToZone(zone);
	InstallationObjectImplementation::insertToZone(zone);
	// server/zone/objects/installation/shuttle/ShuttleInstallation.idl(82):  		spawnShuttleObjects();
	spawnShuttleObjects();
}

/*
 *	ShuttleInstallationAdapter
 */

ShuttleInstallationAdapter::ShuttleInstallationAdapter(ShuttleInstallationImplementation* obj) : InstallationObjectAdapter(obj) {
}

Packet* ShuttleInstallationAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		insertToZone((Zone*) inv->getObjectParameter());
		break;
	case 7:
		spawnShuttleObjects();
		break;
	case 8:
		resp->insertBoolean(checkRequisitesForPlacement((PlayerCreature*) inv->getObjectParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

void ShuttleInstallationAdapter::insertToZone(Zone* zone) {
	((ShuttleInstallationImplementation*) impl)->insertToZone(zone);
}

void ShuttleInstallationAdapter::spawnShuttleObjects() {
	((ShuttleInstallationImplementation*) impl)->spawnShuttleObjects();
}

bool ShuttleInstallationAdapter::checkRequisitesForPlacement(PlayerCreature* player) {
	return ((ShuttleInstallationImplementation*) impl)->checkRequisitesForPlacement(player);
}

/*
 *	ShuttleInstallationHelper
 */

ShuttleInstallationHelper* ShuttleInstallationHelper::staticInitializer = ShuttleInstallationHelper::instance();

ShuttleInstallationHelper::ShuttleInstallationHelper() {
	className = "ShuttleInstallation";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void ShuttleInstallationHelper::finalizeHelper() {
	ShuttleInstallationHelper::finalize();
}

DistributedObject* ShuttleInstallationHelper::instantiateObject() {
	return new ShuttleInstallation(DummyConstructorParameter::instance());
}

DistributedObjectServant* ShuttleInstallationHelper::instantiateServant() {
	return new ShuttleInstallationImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ShuttleInstallationHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ShuttleInstallationAdapter((ShuttleInstallationImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

