/*
 *	server/zone/objects/installation/shuttle/ShuttleInstallation.cpp generated by engine3 IDL compiler 0.60
 */

#include "ShuttleInstallation.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/Zone.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/objects/tangible/terminal/ticketcollector/TicketCollector.h"

#include "server/zone/objects/tangible/terminal/travel/TravelTerminal.h"

/*
 *	ShuttleInstallationStub
 */

enum {RPC_CHECKREQUISITESFORPLACEMENT__PLAYERCREATURE_ = 6};

ShuttleInstallation::ShuttleInstallation() : InstallationObject(DummyConstructorParameter::instance()) {
	ShuttleInstallationImplementation* _implementation = new ShuttleInstallationImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

ShuttleInstallation::ShuttleInstallation(DummyConstructorParameter* param) : InstallationObject(param) {
}

ShuttleInstallation::~ShuttleInstallation() {
}


bool ShuttleInstallation::checkRequisitesForPlacement(PlayerCreature* player) {
	ShuttleInstallationImplementation* _implementation = (ShuttleInstallationImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CHECKREQUISITESFORPLACEMENT__PLAYERCREATURE_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->checkRequisitesForPlacement(player);
}

DistributedObjectServant* ShuttleInstallation::_getImplementation() {

	_updated = true;
	return _impl;
}

void ShuttleInstallation::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	ShuttleInstallationImplementation
 */

ShuttleInstallationImplementation::ShuttleInstallationImplementation(DummyConstructorParameter* param) : InstallationObjectImplementation(param) {
	_initializeImplementation();
}


ShuttleInstallationImplementation::~ShuttleInstallationImplementation() {
}


void ShuttleInstallationImplementation::finalize() {
}

void ShuttleInstallationImplementation::_initializeImplementation() {
	_setClassHelper(ShuttleInstallationHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void ShuttleInstallationImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (ShuttleInstallation*) stub;
	InstallationObjectImplementation::_setStub(stub);
}

DistributedObjectStub* ShuttleInstallationImplementation::_getStub() {
	return _this;
}

ShuttleInstallationImplementation::operator const ShuttleInstallation*() {
	return _this;
}

void ShuttleInstallationImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void ShuttleInstallationImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void ShuttleInstallationImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void ShuttleInstallationImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void ShuttleInstallationImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void ShuttleInstallationImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void ShuttleInstallationImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void ShuttleInstallationImplementation::_serializationHelperMethod() {
	InstallationObjectImplementation::_serializationHelperMethod();

	_setClassName("ShuttleInstallation");

}

void ShuttleInstallationImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(ShuttleInstallationImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ShuttleInstallationImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (InstallationObjectImplementation::readObjectMember(stream, _name))
		return true;


	return false;
}

void ShuttleInstallationImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ShuttleInstallationImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ShuttleInstallationImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;

	return 0 + InstallationObjectImplementation::writeObjectMembers(stream);
}

ShuttleInstallationImplementation::ShuttleInstallationImplementation() {
	_initializeImplementation();
	// server/zone/objects/installation/shuttle/ShuttleInstallation.idl():  		setLoggingName("ShuttleInstallation");
	setLoggingName("ShuttleInstallation");
}

/*
 *	ShuttleInstallationAdapter
 */

ShuttleInstallationAdapter::ShuttleInstallationAdapter(ShuttleInstallationImplementation* obj) : InstallationObjectAdapter(obj) {
}

Packet* ShuttleInstallationAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_CHECKREQUISITESFORPLACEMENT__PLAYERCREATURE_:
		resp->insertBoolean(checkRequisitesForPlacement((PlayerCreature*) inv->getObjectParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

bool ShuttleInstallationAdapter::checkRequisitesForPlacement(PlayerCreature* player) {
	return ((ShuttleInstallationImplementation*) impl)->checkRequisitesForPlacement(player);
}

/*
 *	ShuttleInstallationHelper
 */

ShuttleInstallationHelper* ShuttleInstallationHelper::staticInitializer = ShuttleInstallationHelper::instance();

ShuttleInstallationHelper::ShuttleInstallationHelper() {
	className = "ShuttleInstallation";

	Core::getObjectBroker()->registerClass(className, this);
}

void ShuttleInstallationHelper::finalizeHelper() {
	ShuttleInstallationHelper::finalize();
}

DistributedObject* ShuttleInstallationHelper::instantiateObject() {
	return new ShuttleInstallation(DummyConstructorParameter::instance());
}

DistributedObjectServant* ShuttleInstallationHelper::instantiateServant() {
	return new ShuttleInstallationImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ShuttleInstallationHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ShuttleInstallationAdapter((ShuttleInstallationImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

