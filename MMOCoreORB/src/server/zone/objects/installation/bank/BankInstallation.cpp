/*
 *	server/zone/objects/installation/bank/BankInstallation.cpp generated by engine3 IDL compiler 0.60
 */

#include "BankInstallation.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/Zone.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/objects/tangible/terminal/bank/BankTerminal.h"


// Imported class dependencies

#include "system/lang/Time.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/creature/buffs/BuffList.h"

#include "server/zone/managers/planet/MapLocationTable.h"

#include "server/zone/objects/scene/ObserverEventMap.h"

#include "server/zone/objects/group/GroupObject.h"

#include "system/util/Vector.h"

#include "server/zone/managers/creature/CreatureManager.h"

#include "server/zone/ZoneClientSession.h"

#include "server/zone/objects/player/events/PlayerRecoveryEvent.h"

#include "server/zone/ZoneProcessServerImplementation.h"

#include "server/zone/objects/creature/variables/CooldownTimerMap.h"

#include "engine/util/QuadTree.h"

#include "server/zone/objects/installation/SyncrhonizedUiListenInstallationTask.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "server/zone/objects/scene/variables/CustomizationVariables.h"

#include "server/zone/objects/scene/variables/StringId.h"

#include "server/zone/objects/installation/HopperList.h"

#include "server/zone/objects/scene/variables/DeltaVector.h"

#include "server/zone/objects/structure/StructurePermissionList.h"

#include "engine/util/Quaternion.h"

#include "server/zone/objects/player/TradeContainer.h"

#include "server/zone/objects/tangible/tool/CraftingTool.h"

#include "server/zone/objects/scene/variables/DeltaVectorMap.h"

#include "server/zone/objects/tangible/tool/SurveyTool.h"

#include "system/util/VectorMap.h"

#include "server/zone/objects/player/events/PlayerDisconnectEvent.h"

#include "server/zone/objects/tangible/weapon/WeaponObject.h"

#include "server/zone/managers/object/ObjectMap.h"

#include "server/zone/objects/player/badges/Badges.h"

#include "server/zone/objects/structure/events/StructureMaintenanceTask.h"

#include "server/zone/objects/creature/damageovertime/DamageOverTimeList.h"

#include "server/zone/Zone.h"

#include "server/zone/managers/planet/HeightMap.h"

#include "server/zone/objects/intangible/ControlDevice.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/ZoneServer.h"

#include "system/util/SortedVector.h"

#include "server/zone/managers/planet/PlanetManager.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

#include "server/zone/objects/creature/variables/SkillBoxList.h"

/*
 *	BankInstallationStub
 */

BankInstallation::BankInstallation() : InstallationObject(DummyConstructorParameter::instance()) {
	BankInstallationImplementation* _implementation = new BankInstallationImplementation();
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

BankInstallation::BankInstallation(DummyConstructorParameter* param) : InstallationObject(param) {
}

BankInstallation::~BankInstallation() {
}


void BankInstallation::insertToZone(Zone* zone) {
	BankInstallationImplementation* _implementation = (BankInstallationImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(zone);

		method.executeWithVoidReturn();
	} else
		_implementation->insertToZone(zone);
}

void BankInstallation::removeFromZone() {
	BankInstallationImplementation* _implementation = (BankInstallationImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		_implementation->removeFromZone();
}

void BankInstallation::spawnBankObjects() {
	BankInstallationImplementation* _implementation = (BankInstallationImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		method.executeWithVoidReturn();
	} else
		_implementation->spawnBankObjects();
}

void BankInstallation::despawnBankObjects() {
	BankInstallationImplementation* _implementation = (BankInstallationImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		method.executeWithVoidReturn();
	} else
		_implementation->despawnBankObjects();
}

DistributedObjectServant* BankInstallation::_getImplementation() {
	return getForUpdate();}

void BankInstallation::_setImplementation(DistributedObjectServant* servant) {
	setObject((ManagedObjectImplementation*) servant);}

/*
 *	BankInstallationImplementation
 */

BankInstallationImplementation::BankInstallationImplementation(DummyConstructorParameter* param) : InstallationObjectImplementation(param) {
	_initializeImplementation();
}


BankInstallationImplementation::~BankInstallationImplementation() {
}


void BankInstallationImplementation::finalize() {
}

void BankInstallationImplementation::_initializeImplementation() {
	_setClassHelper(BankInstallationHelper::instance());

	_serializationHelperMethod();
}

void BankInstallationImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (BankInstallation*) stub;
	InstallationObjectImplementation::_setStub(stub);
}

DistributedObjectStub* BankInstallationImplementation::_getStub() {
	return _this;
}

BankInstallationImplementation::operator const BankInstallation*() {
	return _this;
}

TransactionalObject* BankInstallationImplementation::clone() {
	return (TransactionalObject*) new BankInstallationImplementation(*this);
}


void BankInstallationImplementation::lock(bool doLock) {
}

void BankInstallationImplementation::lock(ManagedObject* obj) {
}

void BankInstallationImplementation::rlock(bool doLock) {
}

void BankInstallationImplementation::wlock(bool doLock) {
}

void BankInstallationImplementation::wlock(ManagedObject* obj) {
}

void BankInstallationImplementation::unlock(bool doLock) {
}

void BankInstallationImplementation::runlock(bool doLock) {
}

void BankInstallationImplementation::_serializationHelperMethod() {
	InstallationObjectImplementation::_serializationHelperMethod();

	_setClassName("BankInstallation");

	addSerializableVariable("banks", &banks);
}

BankInstallationImplementation::BankInstallationImplementation() {
	_initializeImplementation();
	// server/zone/objects/installation/bank/BankInstallation.idl(67):  		setLoggingName("BankInstallation");
	setLoggingName("BankInstallation");
}

void BankInstallationImplementation::insertToZone(Zone* zone) {
	// server/zone/objects/installation/bank/BankInstallation.idl(77):  		super.insertToZone(zone);
	InstallationObjectImplementation::insertToZone(zone);
	// server/zone/objects/installation/bank/BankInstallation.idl(79):  		spawnBankObjects();
	spawnBankObjects();
}

void BankInstallationImplementation::removeFromZone() {
	// server/zone/objects/installation/bank/BankInstallation.idl(83):  		despawnBankObjects();
	despawnBankObjects();
	// server/zone/objects/installation/bank/BankInstallation.idl(85):  		super.removeFromZone();
	InstallationObjectImplementation::removeFromZone();
	// server/zone/objects/installation/bank/BankInstallation.idl(87):  		updateToDatabaseWithoutChildren();
	updateToDatabaseWithoutChildren();
}

/*
 *	BankInstallationAdapter
 */

BankInstallationAdapter::BankInstallationAdapter(BankInstallationImplementation* obj) : InstallationObjectAdapter(obj) {
}

Packet* BankInstallationAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		insertToZone((Zone*) inv->getObjectParameter());
		break;
	case 7:
		removeFromZone();
		break;
	case 8:
		spawnBankObjects();
		break;
	case 9:
		despawnBankObjects();
		break;
	default:
		return NULL;
	}

	return resp;
}

void BankInstallationAdapter::insertToZone(Zone* zone) {
	((BankInstallationImplementation*) impl)->insertToZone(zone);
}

void BankInstallationAdapter::removeFromZone() {
	((BankInstallationImplementation*) impl)->removeFromZone();
}

void BankInstallationAdapter::spawnBankObjects() {
	((BankInstallationImplementation*) impl)->spawnBankObjects();
}

void BankInstallationAdapter::despawnBankObjects() {
	((BankInstallationImplementation*) impl)->despawnBankObjects();
}

/*
 *	BankInstallationHelper
 */

BankInstallationHelper* BankInstallationHelper::staticInitializer = BankInstallationHelper::instance();

BankInstallationHelper::BankInstallationHelper() {
	className = "BankInstallation";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void BankInstallationHelper::finalizeHelper() {
	BankInstallationHelper::finalize();
}

DistributedObject* BankInstallationHelper::instantiateObject() {
	return new BankInstallation(DummyConstructorParameter::instance());
}

DistributedObjectServant* BankInstallationHelper::instantiateServant() {
	return new BankInstallationImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* BankInstallationHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new BankInstallationAdapter((BankInstallationImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

