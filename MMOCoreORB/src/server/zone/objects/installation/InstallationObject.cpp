/*
 *	server/zone/objects/installation/InstallationObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "InstallationObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/objects/installation/SyncrhonizedUiListenInstallationTask.h"

#include "server/zone/objects/resource/ResourceSpawn.h"

#include "server/zone/objects/resource/ResourceContainer.h"

#include "server/zone/objects/area/ActiveArea.h"

/*
 *	InstallationObjectStub
 */

InstallationObject::InstallationObject() : StructureObject(DummyConstructorParameter::instance()) {
	InstallationObjectImplementation* _implementation = new InstallationObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

InstallationObject::InstallationObject(DummyConstructorParameter* param) : StructureObject(param) {
}

InstallationObject::~InstallationObject() {
}


void InstallationObject::initializeTransientMembers() {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void InstallationObject::destroyObjectFromDatabase(bool destroyContainedObjects) {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addBooleanParameter(destroyContainedObjects);

		method.executeWithVoidReturn();
	} else
		_implementation->destroyObjectFromDatabase(destroyContainedObjects);
}

void InstallationObject::fillAttributeList(AttributeListMessage* alm, PlayerCreature* object) {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->fillAttributeList(alm, object);
}

void InstallationObject::loadTemplateData(SharedObjectTemplate* templateData) {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->loadTemplateData(templateData);
}

void InstallationObject::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player) {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->fillObjectMenuResponse(menuResponse, player);
}

int InstallationObject::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->handleObjectMenuSelect(player, selectedID);
}

void InstallationObject::broadcastMessage(BasePacket* message, bool sendSelf) {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(message);
		method.addBooleanParameter(sendSelf);

		method.executeWithVoidReturn();
	} else
		_implementation->broadcastMessage(message, sendSelf);
}

void InstallationObject::updateResourceContainerQuantity(ResourceContainer* container, int newQuantity, bool notifyClient) {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(container);
		method.addSignedIntParameter(newQuantity);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->updateResourceContainerQuantity(container, newQuantity, notifyClient);
}

void InstallationObject::updateToDatabaseAllObjects(bool startTask) {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addBooleanParameter(startTask);

		method.executeWithVoidReturn();
	} else
		_implementation->updateToDatabaseAllObjects(startTask);
}

void InstallationObject::setOperating(bool operating, bool notifyClient) {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addBooleanParameter(operating);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setOperating(operating, notifyClient);
}

void InstallationObject::activateUiSync() {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		method.executeWithVoidReturn();
	} else
		_implementation->activateUiSync();
}

void InstallationObject::updateOperators() {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		method.executeWithVoidReturn();
	} else
		_implementation->updateOperators();
}

void InstallationObject::verifyOperators() {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		method.executeWithVoidReturn();
	} else
		_implementation->verifyOperators();
}

void InstallationObject::updateInstallationWork() {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		method.executeWithVoidReturn();
	} else
		_implementation->updateInstallationWork();
}

void InstallationObject::handleStructureAddEnergy(PlayerCreature* player) {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->handleStructureAddEnergy(player);
}

void InstallationObject::setActiveResource(ResourceContainer* container) {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addObjectParameter(container);

		method.executeWithVoidReturn();
	} else
		_implementation->setActiveResource(container);
}

void InstallationObject::changeActiveResourceID(unsigned long long spawnObjectID) {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addUnsignedLongParameter(spawnObjectID);

		method.executeWithVoidReturn();
	} else
		_implementation->changeActiveResourceID(spawnObjectID);
}

void InstallationObject::addResourceToHopper(ResourceContainer* container) {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addObjectParameter(container);

		method.executeWithVoidReturn();
	} else
		_implementation->addResourceToHopper(container);
}

void InstallationObject::removeResourceFromHopper(ResourceContainer* container) {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addObjectParameter(container);

		method.executeWithVoidReturn();
	} else
		_implementation->removeResourceFromHopper(container);
}

void InstallationObject::clearResourceHopper() {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);

		method.executeWithVoidReturn();
	} else
		_implementation->clearResourceHopper();
}

float InstallationObject::getHopperSize() {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getHopperSize();
}

bool InstallationObject::updateMaintenance(Time& workingTime) {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->updateMaintenance(workingTime);
}

void InstallationObject::updateHopper(Time& workingTime, bool shutdownAfterUpdate) {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->updateHopper(workingTime, shutdownAfterUpdate);
}

int InstallationObject::getHopperItemQuantity(ResourceSpawn* spawn) {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);
		method.addObjectParameter(spawn);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getHopperItemQuantity(spawn);
}

ResourceContainer* InstallationObject::getContainerFromHopper(ResourceSpawn* spawn) {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);
		method.addObjectParameter(spawn);

		return (ResourceContainer*) method.executeWithObjectReturn();
	} else
		return _implementation->getContainerFromHopper(spawn);
}

unsigned long long InstallationObject::getActiveResourceSpawnID() {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);

		return method.executeWithUnsignedLongReturn();
	} else
		return _implementation->getActiveResourceSpawnID();
}

float InstallationObject::getActualRate() {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getActualRate();
}

void InstallationObject::broadcastToOperators(BasePacket* packet) {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);
		method.addObjectParameter(packet);

		method.executeWithVoidReturn();
	} else
		_implementation->broadcastToOperators(packet);
}

void InstallationObject::addOperator(PlayerCreature* player) {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->addOperator(player);
}

void InstallationObject::removeOperator(PlayerCreature* player) {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->removeOperator(player);
}

void InstallationObject::sendBaselinesTo(SceneObject* player) {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendBaselinesTo(player);
}

bool InstallationObject::isInstallationObject() {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isInstallationObject();
}

bool InstallationObject::isOperating() {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isOperating();
}

int InstallationObject::getInstallationType() {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getInstallationType();
}

float InstallationObject::getExtractionRate() {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getExtractionRate();
}

float InstallationObject::getHopperSizeMax() {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 36);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getHopperSizeMax();
}

HopperList* InstallationObject::getHopperList() {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getHopperList();
}

bool InstallationObject::isHarvesterObject() {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 37);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isHarvesterObject();
}

bool InstallationObject::isGeneratorObject() {
	InstallationObjectImplementation* _implementation = (InstallationObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 38);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isGeneratorObject();
}

DistributedObjectServant* InstallationObject::_getImplementation() {

	_updated = true;
	return _impl;
}

void InstallationObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	InstallationObjectImplementation
 */

InstallationObjectImplementation::InstallationObjectImplementation(DummyConstructorParameter* param) : StructureObjectImplementation(param) {
	_initializeImplementation();
}


InstallationObjectImplementation::~InstallationObjectImplementation() {
}


void InstallationObjectImplementation::finalize() {
}

void InstallationObjectImplementation::_initializeImplementation() {
	_setClassHelper(InstallationObjectHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void InstallationObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (InstallationObject*) stub;
	StructureObjectImplementation::_setStub(stub);
}

DistributedObjectStub* InstallationObjectImplementation::_getStub() {
	return _this;
}

InstallationObjectImplementation::operator const InstallationObject*() {
	return _this;
}

void InstallationObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void InstallationObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void InstallationObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void InstallationObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void InstallationObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void InstallationObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void InstallationObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void InstallationObjectImplementation::_serializationHelperMethod() {
	StructureObjectImplementation::_serializationHelperMethod();

	_setClassName("InstallationObject");

}

void InstallationObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(InstallationObjectImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool InstallationObjectImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (StructureObjectImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "operating") {
		TypeInfo<bool >::parseFromBinaryStream(&operating, stream);
		return true;
	}

	if (_name == "operatorList") {
		TypeInfo<SortedVector<ManagedReference<PlayerCreature* > > >::parseFromBinaryStream(&operatorList, stream);
		return true;
	}

	if (_name == "installationType") {
		TypeInfo<int >::parseFromBinaryStream(&installationType, stream);
		return true;
	}

	if (_name == "resourceHopperTimestamp") {
		TypeInfo<Time >::parseFromBinaryStream(&resourceHopperTimestamp, stream);
		return true;
	}

	if (_name == "lastMaintenanceTime") {
		TypeInfo<Time >::parseFromBinaryStream(&lastMaintenanceTime, stream);
		return true;
	}

	if (_name == "resourceHopper") {
		TypeInfo<HopperList >::parseFromBinaryStream(&resourceHopper, stream);
		return true;
	}

	if (_name == "hopperSizeMax") {
		TypeInfo<float >::parseFromBinaryStream(&hopperSizeMax, stream);
		return true;
	}

	if (_name == "extractionRate") {
		TypeInfo<float >::parseFromBinaryStream(&extractionRate, stream);
		return true;
	}


	return false;
}

void InstallationObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = InstallationObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int InstallationObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "operating";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<bool >::toBinaryStream(&operating, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "operatorList";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<SortedVector<ManagedReference<PlayerCreature* > > >::toBinaryStream(&operatorList, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "installationType";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&installationType, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "resourceHopperTimestamp";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<Time >::toBinaryStream(&resourceHopperTimestamp, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "lastMaintenanceTime";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<Time >::toBinaryStream(&lastMaintenanceTime, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "resourceHopper";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<HopperList >::toBinaryStream(&resourceHopper, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "hopperSizeMax";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<float >::toBinaryStream(&hopperSizeMax, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "extractionRate";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<float >::toBinaryStream(&extractionRate, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 8 + StructureObjectImplementation::writeObjectMembers(stream);
}

InstallationObjectImplementation::InstallationObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/installation/InstallationObject.idl():  		Logger.setLoggingName("InstallationObject");
	Logger::setLoggingName("InstallationObject");
	// server/zone/objects/installation/InstallationObject.idl():  		operating = false;
	operating = false;
	// server/zone/objects/installation/InstallationObject.idl():  		installationType = 0;
	installationType = 0;
	// server/zone/objects/installation/InstallationObject.idl():  		operatorList.setNoDuplicateInsertPlan();
	(&operatorList)->setNoDuplicateInsertPlan();
	// server/zone/objects/installation/InstallationObject.idl():  		hopperSizeMax = 10000;
	hopperSizeMax = 10000;
	// server/zone/objects/installation/InstallationObject.idl():  		extractionRate = 100;
	extractionRate = 100;
}

void InstallationObjectImplementation::initializeTransientMembers() {
	// server/zone/objects/installation/InstallationObject.idl():  		super.initializeTransientMembers();
	StructureObjectImplementation::initializeTransientMembers();
	// server/zone/objects/installation/InstallationObject.idl():  		super.staticObject = false;
	StructureObjectImplementation::staticObject = false;
	// server/zone/objects/installation/InstallationObject.idl():  		operatorList.setNoDuplicateInsertPlan();
	(&operatorList)->setNoDuplicateInsertPlan();
	// server/zone/objects/installation/InstallationObject.idl():  		Logger.setLoggingName("InstallationObject");
	Logger::setLoggingName("InstallationObject");
}

void InstallationObjectImplementation::updateOperators() {
}

void InstallationObjectImplementation::addOperator(PlayerCreature* player) {
	// server/zone/objects/installation/InstallationObject.idl():  		operatorList.put(player);
	(&operatorList)->put(player);
}

void InstallationObjectImplementation::removeOperator(PlayerCreature* player) {
	// server/zone/objects/installation/InstallationObject.idl():  		operatorList.drop(player);
	(&operatorList)->drop(player);
}

bool InstallationObjectImplementation::isInstallationObject() {
	// server/zone/objects/installation/InstallationObject.idl():  		return true;
	return true;
}

bool InstallationObjectImplementation::isOperating() {
	// server/zone/objects/installation/InstallationObject.idl():  		return operating;
	return operating;
}

int InstallationObjectImplementation::getInstallationType() {
	// server/zone/objects/installation/InstallationObject.idl():  		return installationType;
	return installationType;
}

float InstallationObjectImplementation::getExtractionRate() {
	// server/zone/objects/installation/InstallationObject.idl():  		return extractionRate;
	return extractionRate;
}

float InstallationObjectImplementation::getHopperSizeMax() {
	// server/zone/objects/installation/InstallationObject.idl():  		return hopperSizeMax;
	return hopperSizeMax;
}

HopperList* InstallationObjectImplementation::getHopperList() {
	// server/zone/objects/installation/InstallationObject.idl():  		return resourceHopper;
	return (&resourceHopper);
}

bool InstallationObjectImplementation::isHarvesterObject() {
	// server/zone/objects/installation/InstallationObject.idl():  		return false;
	return false;
}

bool InstallationObjectImplementation::isGeneratorObject() {
	// server/zone/objects/installation/InstallationObject.idl():  		return false;
	return false;
}

/*
 *	InstallationObjectAdapter
 */

InstallationObjectAdapter::InstallationObjectAdapter(InstallationObjectImplementation* obj) : StructureObjectAdapter(obj) {
}

enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 6,RPC_DESTROYOBJECTFROMDATABASE__BOOL_,RPC_HANDLEOBJECTMENUSELECT__PLAYERCREATURE_BYTE_,RPC_BROADCASTMESSAGE__BASEPACKET_BOOL_,RPC_UPDATERESOURCECONTAINERQUANTITY__RESOURCECONTAINER_INT_BOOL_,RPC_UPDATETODATABASEALLOBJECTS__BOOL_,RPC_SETOPERATING__BOOL_BOOL_,RPC_ACTIVATEUISYNC__,RPC_UPDATEOPERATORS__,RPC_VERIFYOPERATORS__,RPC_UPDATEINSTALLATIONWORK__,RPC_HANDLESTRUCTUREADDENERGY__PLAYERCREATURE_,RPC_SETACTIVERESOURCE__RESOURCECONTAINER_,RPC_CHANGEACTIVERESOURCEID__LONG_,RPC_ADDRESOURCETOHOPPER__RESOURCECONTAINER_,RPC_REMOVERESOURCEFROMHOPPER__RESOURCECONTAINER_,RPC_CLEARRESOURCEHOPPER__,RPC_GETHOPPERSIZE__,RPC_GETHOPPERITEMQUANTITY__RESOURCESPAWN_,RPC_GETCONTAINERFROMHOPPER__RESOURCESPAWN_,RPC_GETACTIVERESOURCESPAWNID__,RPC_GETACTUALRATE__,RPC_BROADCASTTOOPERATORS__BASEPACKET_,RPC_ADDOPERATOR__PLAYERCREATURE_,RPC_REMOVEOPERATOR__PLAYERCREATURE_,RPC_SENDBASELINESTO__SCENEOBJECT_,RPC_ISINSTALLATIONOBJECT__,RPC_ISOPERATING__,RPC_GETINSTALLATIONTYPE__,RPC_GETEXTRACTIONRATE__,RPC_GETHOPPERSIZEMAX__,RPC_ISHARVESTEROBJECT__,RPC_ISGENERATOROBJECT__};

Packet* InstallationObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		initializeTransientMembers();
		break;
	case RPC_DESTROYOBJECTFROMDATABASE__BOOL_:
		destroyObjectFromDatabase(inv->getBooleanParameter());
		break;
	case RPC_HANDLEOBJECTMENUSELECT__PLAYERCREATURE_BYTE_:
		resp->insertSignedInt(handleObjectMenuSelect((PlayerCreature*) inv->getObjectParameter(), inv->getByteParameter()));
		break;
	case RPC_BROADCASTMESSAGE__BASEPACKET_BOOL_:
		broadcastMessage((BasePacket*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case RPC_UPDATERESOURCECONTAINERQUANTITY__RESOURCECONTAINER_INT_BOOL_:
		updateResourceContainerQuantity((ResourceContainer*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case RPC_UPDATETODATABASEALLOBJECTS__BOOL_:
		updateToDatabaseAllObjects(inv->getBooleanParameter());
		break;
	case RPC_SETOPERATING__BOOL_BOOL_:
		setOperating(inv->getBooleanParameter(), inv->getBooleanParameter());
		break;
	case RPC_ACTIVATEUISYNC__:
		activateUiSync();
		break;
	case RPC_UPDATEOPERATORS__:
		updateOperators();
		break;
	case RPC_VERIFYOPERATORS__:
		verifyOperators();
		break;
	case RPC_UPDATEINSTALLATIONWORK__:
		updateInstallationWork();
		break;
	case RPC_HANDLESTRUCTUREADDENERGY__PLAYERCREATURE_:
		handleStructureAddEnergy((PlayerCreature*) inv->getObjectParameter());
		break;
	case RPC_SETACTIVERESOURCE__RESOURCECONTAINER_:
		setActiveResource((ResourceContainer*) inv->getObjectParameter());
		break;
	case RPC_CHANGEACTIVERESOURCEID__LONG_:
		changeActiveResourceID(inv->getUnsignedLongParameter());
		break;
	case RPC_ADDRESOURCETOHOPPER__RESOURCECONTAINER_:
		addResourceToHopper((ResourceContainer*) inv->getObjectParameter());
		break;
	case RPC_REMOVERESOURCEFROMHOPPER__RESOURCECONTAINER_:
		removeResourceFromHopper((ResourceContainer*) inv->getObjectParameter());
		break;
	case RPC_CLEARRESOURCEHOPPER__:
		clearResourceHopper();
		break;
	case RPC_GETHOPPERSIZE__:
		resp->insertFloat(getHopperSize());
		break;
	case RPC_GETHOPPERITEMQUANTITY__RESOURCESPAWN_:
		resp->insertSignedInt(getHopperItemQuantity((ResourceSpawn*) inv->getObjectParameter()));
		break;
	case RPC_GETCONTAINERFROMHOPPER__RESOURCESPAWN_:
		resp->insertLong(getContainerFromHopper((ResourceSpawn*) inv->getObjectParameter())->_getObjectID());
		break;
	case RPC_GETACTIVERESOURCESPAWNID__:
		resp->insertLong(getActiveResourceSpawnID());
		break;
	case RPC_GETACTUALRATE__:
		resp->insertFloat(getActualRate());
		break;
	case RPC_BROADCASTTOOPERATORS__BASEPACKET_:
		broadcastToOperators((BasePacket*) inv->getObjectParameter());
		break;
	case RPC_ADDOPERATOR__PLAYERCREATURE_:
		addOperator((PlayerCreature*) inv->getObjectParameter());
		break;
	case RPC_REMOVEOPERATOR__PLAYERCREATURE_:
		removeOperator((PlayerCreature*) inv->getObjectParameter());
		break;
	case RPC_SENDBASELINESTO__SCENEOBJECT_:
		sendBaselinesTo((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_ISINSTALLATIONOBJECT__:
		resp->insertBoolean(isInstallationObject());
		break;
	case RPC_ISOPERATING__:
		resp->insertBoolean(isOperating());
		break;
	case RPC_GETINSTALLATIONTYPE__:
		resp->insertSignedInt(getInstallationType());
		break;
	case RPC_GETEXTRACTIONRATE__:
		resp->insertFloat(getExtractionRate());
		break;
	case RPC_GETHOPPERSIZEMAX__:
		resp->insertFloat(getHopperSizeMax());
		break;
	case RPC_ISHARVESTEROBJECT__:
		resp->insertBoolean(isHarvesterObject());
		break;
	case RPC_ISGENERATOROBJECT__:
		resp->insertBoolean(isGeneratorObject());
		break;
	default:
		return NULL;
	}

	return resp;
}

void InstallationObjectAdapter::initializeTransientMembers() {
	((InstallationObjectImplementation*) impl)->initializeTransientMembers();
}

void InstallationObjectAdapter::destroyObjectFromDatabase(bool destroyContainedObjects) {
	((InstallationObjectImplementation*) impl)->destroyObjectFromDatabase(destroyContainedObjects);
}

int InstallationObjectAdapter::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	return ((InstallationObjectImplementation*) impl)->handleObjectMenuSelect(player, selectedID);
}

void InstallationObjectAdapter::broadcastMessage(BasePacket* message, bool sendSelf) {
	((InstallationObjectImplementation*) impl)->broadcastMessage(message, sendSelf);
}

void InstallationObjectAdapter::updateResourceContainerQuantity(ResourceContainer* container, int newQuantity, bool notifyClient) {
	((InstallationObjectImplementation*) impl)->updateResourceContainerQuantity(container, newQuantity, notifyClient);
}

void InstallationObjectAdapter::updateToDatabaseAllObjects(bool startTask) {
	((InstallationObjectImplementation*) impl)->updateToDatabaseAllObjects(startTask);
}

void InstallationObjectAdapter::setOperating(bool operating, bool notifyClient) {
	((InstallationObjectImplementation*) impl)->setOperating(operating, notifyClient);
}

void InstallationObjectAdapter::activateUiSync() {
	((InstallationObjectImplementation*) impl)->activateUiSync();
}

void InstallationObjectAdapter::updateOperators() {
	((InstallationObjectImplementation*) impl)->updateOperators();
}

void InstallationObjectAdapter::verifyOperators() {
	((InstallationObjectImplementation*) impl)->verifyOperators();
}

void InstallationObjectAdapter::updateInstallationWork() {
	((InstallationObjectImplementation*) impl)->updateInstallationWork();
}

void InstallationObjectAdapter::handleStructureAddEnergy(PlayerCreature* player) {
	((InstallationObjectImplementation*) impl)->handleStructureAddEnergy(player);
}

void InstallationObjectAdapter::setActiveResource(ResourceContainer* container) {
	((InstallationObjectImplementation*) impl)->setActiveResource(container);
}

void InstallationObjectAdapter::changeActiveResourceID(unsigned long long spawnObjectID) {
	((InstallationObjectImplementation*) impl)->changeActiveResourceID(spawnObjectID);
}

void InstallationObjectAdapter::addResourceToHopper(ResourceContainer* container) {
	((InstallationObjectImplementation*) impl)->addResourceToHopper(container);
}

void InstallationObjectAdapter::removeResourceFromHopper(ResourceContainer* container) {
	((InstallationObjectImplementation*) impl)->removeResourceFromHopper(container);
}

void InstallationObjectAdapter::clearResourceHopper() {
	((InstallationObjectImplementation*) impl)->clearResourceHopper();
}

float InstallationObjectAdapter::getHopperSize() {
	return ((InstallationObjectImplementation*) impl)->getHopperSize();
}

int InstallationObjectAdapter::getHopperItemQuantity(ResourceSpawn* spawn) {
	return ((InstallationObjectImplementation*) impl)->getHopperItemQuantity(spawn);
}

ResourceContainer* InstallationObjectAdapter::getContainerFromHopper(ResourceSpawn* spawn) {
	return ((InstallationObjectImplementation*) impl)->getContainerFromHopper(spawn);
}

unsigned long long InstallationObjectAdapter::getActiveResourceSpawnID() {
	return ((InstallationObjectImplementation*) impl)->getActiveResourceSpawnID();
}

float InstallationObjectAdapter::getActualRate() {
	return ((InstallationObjectImplementation*) impl)->getActualRate();
}

void InstallationObjectAdapter::broadcastToOperators(BasePacket* packet) {
	((InstallationObjectImplementation*) impl)->broadcastToOperators(packet);
}

void InstallationObjectAdapter::addOperator(PlayerCreature* player) {
	((InstallationObjectImplementation*) impl)->addOperator(player);
}

void InstallationObjectAdapter::removeOperator(PlayerCreature* player) {
	((InstallationObjectImplementation*) impl)->removeOperator(player);
}

void InstallationObjectAdapter::sendBaselinesTo(SceneObject* player) {
	((InstallationObjectImplementation*) impl)->sendBaselinesTo(player);
}

bool InstallationObjectAdapter::isInstallationObject() {
	return ((InstallationObjectImplementation*) impl)->isInstallationObject();
}

bool InstallationObjectAdapter::isOperating() {
	return ((InstallationObjectImplementation*) impl)->isOperating();
}

int InstallationObjectAdapter::getInstallationType() {
	return ((InstallationObjectImplementation*) impl)->getInstallationType();
}

float InstallationObjectAdapter::getExtractionRate() {
	return ((InstallationObjectImplementation*) impl)->getExtractionRate();
}

float InstallationObjectAdapter::getHopperSizeMax() {
	return ((InstallationObjectImplementation*) impl)->getHopperSizeMax();
}

bool InstallationObjectAdapter::isHarvesterObject() {
	return ((InstallationObjectImplementation*) impl)->isHarvesterObject();
}

bool InstallationObjectAdapter::isGeneratorObject() {
	return ((InstallationObjectImplementation*) impl)->isGeneratorObject();
}

/*
 *	InstallationObjectHelper
 */

InstallationObjectHelper* InstallationObjectHelper::staticInitializer = InstallationObjectHelper::instance();

InstallationObjectHelper::InstallationObjectHelper() {
	className = "InstallationObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void InstallationObjectHelper::finalizeHelper() {
	InstallationObjectHelper::finalize();
}

DistributedObject* InstallationObjectHelper::instantiateObject() {
	return new InstallationObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* InstallationObjectHelper::instantiateServant() {
	return new InstallationObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* InstallationObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new InstallationObjectAdapter((InstallationObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

