/*
 *	server/zone/objects/installation/InstallationObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "InstallationObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

/*
 *	InstallationObjectStub
 */

InstallationObject::InstallationObject() : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new InstallationObjectImplementation();
	_impl->_setStub(this);
}

InstallationObject::InstallationObject(DummyConstructorParameter* param) : TangibleObject(param) {
}

InstallationObject::~InstallationObject() {
}


void InstallationObject::initializeTransientMembers() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->initializeTransientMembers();
}

void InstallationObject::sendBaselinesTo(SceneObject* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->sendBaselinesTo(player);
}

void InstallationObject::setLotSize(int lotsize) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addSignedIntParameter(lotsize);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->setLotSize(lotsize);
}

int InstallationObject::getLotSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return method.executeWithSignedIntReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getLotSize();
}

void InstallationObject::setDeedObjectID(unsigned long long deedid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addUnsignedLongParameter(deedid);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->setDeedObjectID(deedid);
}

unsigned long long InstallationObject::getDeedObjectID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getDeedObjectID();
}

void InstallationObject::setOwnerObjectID(unsigned long long ownerID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addUnsignedLongParameter(ownerID);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->setOwnerObjectID(ownerID);
}

unsigned long long InstallationObject::getOwnerObjectID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getOwnerObjectID();
}

void InstallationObject::setMaintenancePool(unsigned int maintenance) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addUnsignedIntParameter(maintenance);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->setMaintenancePool(maintenance);
}

unsigned int InstallationObject::getMaintenancePool() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getMaintenancePool();
}

void InstallationObject::setPowerPool(unsigned int power) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addUnsignedIntParameter(power);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->setPowerPool(power);
}

unsigned int InstallationObject::getPowerPool() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getPowerPool();
}

int InstallationObject::getBasePowerRate() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		return method.executeWithSignedIntReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getBasePowerRate();
}

void InstallationObject::setBasePowerRate(int powerRate) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addSignedIntParameter(powerRate);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->setBasePowerRate(powerRate);
}

void InstallationObject::setBaseMaintenanceRate(int maintenanceRate) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addSignedIntParameter(maintenanceRate);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->setBaseMaintenanceRate(maintenanceRate);
}

int InstallationObject::getBaseMaintenanceRate() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);

		return method.executeWithSignedIntReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getBaseMaintenanceRate();
}

int InstallationObject::getRedeedCost() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);

		return method.executeWithSignedIntReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getRedeedCost();
}

bool InstallationObject::isOnAdminList(CreatureObject* creature) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);
		method.addObjectParameter(creature);

		return method.executeWithBooleanReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->isOnAdminList(creature);
}

void InstallationObject::sendPermissionListTo(PlayerCreature* player, const String& listName) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);
		method.addObjectParameter(player);
		method.addAsciiParameter(listName);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->sendPermissionListTo(player, listName);
}

/*
 *	InstallationObjectImplementation
 */

InstallationObjectImplementation::InstallationObjectImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
	_initializeImplementation();
}

InstallationObjectImplementation::~InstallationObjectImplementation() {
}


void InstallationObjectImplementation::finalize() {
}

void InstallationObjectImplementation::_initializeImplementation() {
	_setClassHelper(InstallationObjectHelper::instance());

	_serializationHelperMethod();
}

void InstallationObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (InstallationObject*) stub;
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* InstallationObjectImplementation::_getStub() {
	return _this;
}

InstallationObjectImplementation::operator const InstallationObject*() {
	return _this;
}

void InstallationObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void InstallationObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void InstallationObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void InstallationObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void InstallationObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void InstallationObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void InstallationObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void InstallationObjectImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("InstallationObject");

	addSerializableVariable("structurePermissionList", &structurePermissionList);
	addSerializableVariable("ownerObjectID", &ownerObjectID);
	addSerializableVariable("lotSize", &lotSize);
	addSerializableVariable("deedObjectID", &deedObjectID);
	addSerializableVariable("baseMaintenanceRate", &baseMaintenanceRate);
	addSerializableVariable("basePowerRate", &basePowerRate);
	addSerializableVariable("maintenancePool", &maintenancePool);
	addSerializableVariable("powerPool", &powerPool);
	addSerializableVariable("operatorList", &operatorList);
}

InstallationObjectImplementation::InstallationObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/installation/InstallationObject.idl(75):  		Logger.setLoggingName("InstallationObject");
	Logger::setLoggingName("InstallationObject");
	// server/zone/objects/installation/InstallationObject.idl(77):  		super.staticObject = false;
	TangibleObjectImplementation::staticObject = false;
	// server/zone/objects/installation/InstallationObject.idl(79):  		lotSize = 0;
	lotSize = 0;
	// server/zone/objects/installation/InstallationObject.idl(81):  		baseMaintenanceRate = 0;
	baseMaintenanceRate = 0;
	// server/zone/objects/installation/InstallationObject.idl(82):  		basePowerRate = 0;
	basePowerRate = 0;
	// server/zone/objects/installation/InstallationObject.idl(83):  		maintenancePool = 0;
	maintenancePool = 0;
	// server/zone/objects/installation/InstallationObject.idl(84):  		powerPool = 0;
	powerPool = 0;
	// server/zone/objects/installation/InstallationObject.idl(85):  		deedObjectID = 0;
	deedObjectID = 0;
	// server/zone/objects/installation/InstallationObject.idl(86):  		operatorList.setNoDuplicateInsertPlan();
	(&operatorList)->setNoDuplicateInsertPlan();
}

void InstallationObjectImplementation::initializeTransientMembers() {
	// server/zone/objects/installation/InstallationObject.idl(90):  		super.initializeTransientMembers();
	TangibleObjectImplementation::initializeTransientMembers();
	// server/zone/objects/installation/InstallationObject.idl(92):  		operatorList.setNoDuplicateInsertPlan();
	(&operatorList)->setNoDuplicateInsertPlan();
	// server/zone/objects/installation/InstallationObject.idl(94):  		Logger.setLoggingName("InstallationObject");
	Logger::setLoggingName("InstallationObject");
}

void InstallationObjectImplementation::setLotSize(int lotsize) {
	// server/zone/objects/installation/InstallationObject.idl(100):  		lotSize = lotsize;
	lotSize = lotsize;
}

int InstallationObjectImplementation::getLotSize() {
	// server/zone/objects/installation/InstallationObject.idl(104):  		return lotSize;
	return lotSize;
}

void InstallationObjectImplementation::setDeedObjectID(unsigned long long deedid) {
	// server/zone/objects/installation/InstallationObject.idl(108):  		deedObjectID = deedid;
	deedObjectID = deedid;
}

unsigned long long InstallationObjectImplementation::getDeedObjectID() {
	// server/zone/objects/installation/InstallationObject.idl(112):  		return deedObjectID;
	return deedObjectID;
}

void InstallationObjectImplementation::setOwnerObjectID(unsigned long long ownerID) {
	// server/zone/objects/installation/InstallationObject.idl(116):  		ownerObjectID = ownerID;
	ownerObjectID = ownerID;
	// server/zone/objects/installation/InstallationObject.idl(117):  		structurePermissionList.grantPermission(ownerID, StructurePermissionList.OWNER);
	(&structurePermissionList)->grantPermission(ownerID, StructurePermissionList::OWNER);
}

unsigned long long InstallationObjectImplementation::getOwnerObjectID() {
	// server/zone/objects/installation/InstallationObject.idl(121):  		return ownerObjectID;
	return ownerObjectID;
}

void InstallationObjectImplementation::setMaintenancePool(unsigned int maintenance) {
	// server/zone/objects/installation/InstallationObject.idl(125):  		maintenancePool = maintenance;
	maintenancePool = maintenance;
}

unsigned int InstallationObjectImplementation::getMaintenancePool() {
	// server/zone/objects/installation/InstallationObject.idl(129):  		return maintenancePool;
	return maintenancePool;
}

void InstallationObjectImplementation::setPowerPool(unsigned int power) {
	// server/zone/objects/installation/InstallationObject.idl(133):  		powerPool = power;
	powerPool = power;
}

unsigned int InstallationObjectImplementation::getPowerPool() {
	// server/zone/objects/installation/InstallationObject.idl(137):  		return powerPool;
	return powerPool;
}

int InstallationObjectImplementation::getBasePowerRate() {
	// server/zone/objects/installation/InstallationObject.idl(146):  		return basePowerRate;
	return basePowerRate;
}

void InstallationObjectImplementation::setBasePowerRate(int powerRate) {
	// server/zone/objects/installation/InstallationObject.idl(154):  		basePowerRate = powerRate;
	basePowerRate = powerRate;
}

void InstallationObjectImplementation::setBaseMaintenanceRate(int maintenanceRate) {
	// server/zone/objects/installation/InstallationObject.idl(162):  		baseMaintenanceRate = maintenanceRate;
	baseMaintenanceRate = maintenanceRate;
}

int InstallationObjectImplementation::getBaseMaintenanceRate() {
	// server/zone/objects/installation/InstallationObject.idl(171):  		return baseMaintenanceRate;
	return baseMaintenanceRate;
}

int InstallationObjectImplementation::getRedeedCost() {
	// server/zone/objects/installation/InstallationObject.idl(179):  		return baseMaintenanceRate * 50;
	return baseMaintenanceRate * 50;
}

bool InstallationObjectImplementation::isOnAdminList(CreatureObject* creature) {
	// server/zone/objects/installation/InstallationObject.idl(188):  		return structurePermissionList.isOnAdminList(creature.getObjectID());
	return (&structurePermissionList)->isOnAdminList(creature->getObjectID());
}

void InstallationObjectImplementation::sendPermissionListTo(PlayerCreature* player, const String& listName) {
	// server/zone/objects/installation/InstallationObject.idl(192):  		structurePermissionList.sendTo(player, listName);
	(&structurePermissionList)->sendTo(player, listName);
}

/*
 *	InstallationObjectAdapter
 */

InstallationObjectAdapter::InstallationObjectAdapter(InstallationObjectImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* InstallationObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initializeTransientMembers();
		break;
	case 7:
		sendBaselinesTo((SceneObject*) inv->getObjectParameter());
		break;
	case 8:
		setLotSize(inv->getSignedIntParameter());
		break;
	case 9:
		resp->insertSignedInt(getLotSize());
		break;
	case 10:
		setDeedObjectID(inv->getUnsignedLongParameter());
		break;
	case 11:
		resp->insertLong(getDeedObjectID());
		break;
	case 12:
		setOwnerObjectID(inv->getUnsignedLongParameter());
		break;
	case 13:
		resp->insertLong(getOwnerObjectID());
		break;
	case 14:
		setMaintenancePool(inv->getUnsignedIntParameter());
		break;
	case 15:
		resp->insertInt(getMaintenancePool());
		break;
	case 16:
		setPowerPool(inv->getUnsignedIntParameter());
		break;
	case 17:
		resp->insertInt(getPowerPool());
		break;
	case 18:
		resp->insertSignedInt(getBasePowerRate());
		break;
	case 19:
		setBasePowerRate(inv->getSignedIntParameter());
		break;
	case 20:
		setBaseMaintenanceRate(inv->getSignedIntParameter());
		break;
	case 21:
		resp->insertSignedInt(getBaseMaintenanceRate());
		break;
	case 22:
		resp->insertSignedInt(getRedeedCost());
		break;
	case 23:
		resp->insertBoolean(isOnAdminList((CreatureObject*) inv->getObjectParameter()));
		break;
	case 24:
		sendPermissionListTo((PlayerCreature*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_sendPermissionListTo__PlayerCreature_String_));
		break;
	default:
		return NULL;
	}

	return resp;
}

void InstallationObjectAdapter::initializeTransientMembers() {
	((InstallationObjectImplementation*) impl)->initializeTransientMembers();
}

void InstallationObjectAdapter::sendBaselinesTo(SceneObject* player) {
	((InstallationObjectImplementation*) impl)->sendBaselinesTo(player);
}

void InstallationObjectAdapter::setLotSize(int lotsize) {
	((InstallationObjectImplementation*) impl)->setLotSize(lotsize);
}

int InstallationObjectAdapter::getLotSize() {
	return ((InstallationObjectImplementation*) impl)->getLotSize();
}

void InstallationObjectAdapter::setDeedObjectID(unsigned long long deedid) {
	((InstallationObjectImplementation*) impl)->setDeedObjectID(deedid);
}

unsigned long long InstallationObjectAdapter::getDeedObjectID() {
	return ((InstallationObjectImplementation*) impl)->getDeedObjectID();
}

void InstallationObjectAdapter::setOwnerObjectID(unsigned long long ownerID) {
	((InstallationObjectImplementation*) impl)->setOwnerObjectID(ownerID);
}

unsigned long long InstallationObjectAdapter::getOwnerObjectID() {
	return ((InstallationObjectImplementation*) impl)->getOwnerObjectID();
}

void InstallationObjectAdapter::setMaintenancePool(unsigned int maintenance) {
	((InstallationObjectImplementation*) impl)->setMaintenancePool(maintenance);
}

unsigned int InstallationObjectAdapter::getMaintenancePool() {
	return ((InstallationObjectImplementation*) impl)->getMaintenancePool();
}

void InstallationObjectAdapter::setPowerPool(unsigned int power) {
	((InstallationObjectImplementation*) impl)->setPowerPool(power);
}

unsigned int InstallationObjectAdapter::getPowerPool() {
	return ((InstallationObjectImplementation*) impl)->getPowerPool();
}

int InstallationObjectAdapter::getBasePowerRate() {
	return ((InstallationObjectImplementation*) impl)->getBasePowerRate();
}

void InstallationObjectAdapter::setBasePowerRate(int powerRate) {
	((InstallationObjectImplementation*) impl)->setBasePowerRate(powerRate);
}

void InstallationObjectAdapter::setBaseMaintenanceRate(int maintenanceRate) {
	((InstallationObjectImplementation*) impl)->setBaseMaintenanceRate(maintenanceRate);
}

int InstallationObjectAdapter::getBaseMaintenanceRate() {
	return ((InstallationObjectImplementation*) impl)->getBaseMaintenanceRate();
}

int InstallationObjectAdapter::getRedeedCost() {
	return ((InstallationObjectImplementation*) impl)->getRedeedCost();
}

bool InstallationObjectAdapter::isOnAdminList(CreatureObject* creature) {
	return ((InstallationObjectImplementation*) impl)->isOnAdminList(creature);
}

void InstallationObjectAdapter::sendPermissionListTo(PlayerCreature* player, const String& listName) {
	((InstallationObjectImplementation*) impl)->sendPermissionListTo(player, listName);
}

/*
 *	InstallationObjectHelper
 */

InstallationObjectHelper* InstallationObjectHelper::staticInitializer = InstallationObjectHelper::instance();

InstallationObjectHelper::InstallationObjectHelper() {
	className = "InstallationObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void InstallationObjectHelper::finalizeHelper() {
	InstallationObjectHelper::finalize();
}

DistributedObject* InstallationObjectHelper::instantiateObject() {
	return new InstallationObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* InstallationObjectHelper::instantiateServant() {
	return new InstallationObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* InstallationObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new InstallationObjectAdapter((InstallationObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

