/*
 *	server/zone/objects/installation/InstallationObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "InstallationObject.h"

#include "server/zone/objects/cell/CellObject.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/tangible/sign/SignObject.h"

#include "server/zone/objects/tangible/terminal/structure/StructureTerminal.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/Zone.h"

/*
 *	InstallationObjectStub
 */

InstallationObject::InstallationObject() : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new InstallationObjectImplementation();
	_impl->_setStub(this);
}

InstallationObject::InstallationObject(DummyConstructorParameter* param) : TangibleObject(param) {
}

InstallationObject::~InstallationObject() {
}


void InstallationObject::setLotSize(int lotsize) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addSignedIntParameter(lotsize);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->setLotSize(lotsize);
}

int InstallationObject::getLotSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		return method.executeWithSignedIntReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getLotSize();
}

void InstallationObject::setDeedObjectID(unsigned long long deedid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addUnsignedLongParameter(deedid);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->setDeedObjectID(deedid);
}

unsigned long long InstallationObject::getDeedObjectID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getDeedObjectID();
}

void InstallationObject::setOwnerObjectID(unsigned long long ownerID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addUnsignedLongParameter(ownerID);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->setOwnerObjectID(ownerID);
}

unsigned long long InstallationObject::getOwnerObjectID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getOwnerObjectID();
}

int InstallationObject::getBasePowerRate() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		return method.executeWithSignedIntReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getBasePowerRate();
}

void InstallationObject::setBasePowerRate(int powerRate) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addSignedIntParameter(powerRate);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->setBasePowerRate(powerRate);
}

void InstallationObject::setBaseMaintenanceRate(int maintenanceRate) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addSignedIntParameter(maintenanceRate);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->setBaseMaintenanceRate(maintenanceRate);
}

int InstallationObject::getBaseMaintenanceRate() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		return method.executeWithSignedIntReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getBaseMaintenanceRate();
}

int InstallationObject::getRedeedCost() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		return method.executeWithSignedIntReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getRedeedCost();
}

bool InstallationObject::isOnAdminList(CreatureObject* creature) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addObjectParameter(creature);

		return method.executeWithBooleanReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->isOnAdminList(creature);
}

void InstallationObject::sendPermissionListTo(PlayerCreature* player, const String& listName) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addObjectParameter(player);
		method.addAsciiParameter(listName);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->sendPermissionListTo(player, listName);
}

/*
 *	InstallationObjectImplementation
 */

InstallationObjectImplementation::InstallationObjectImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
	_initializeImplementation();
}

InstallationObjectImplementation::~InstallationObjectImplementation() {
}


void InstallationObjectImplementation::finalize() {
}

void InstallationObjectImplementation::_initializeImplementation() {
	_setClassHelper(InstallationObjectHelper::instance());

	_serializationHelperMethod();
}

void InstallationObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (InstallationObject*) stub;
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* InstallationObjectImplementation::_getStub() {
	return _this;
}

InstallationObjectImplementation::operator const InstallationObject*() {
	return _this;
}

void InstallationObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void InstallationObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void InstallationObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void InstallationObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void InstallationObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void InstallationObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void InstallationObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void InstallationObjectImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("InstallationObject");

	addSerializableVariable("structurePermissionList", &structurePermissionList);
	addSerializableVariable("ownerObjectID", &ownerObjectID);
	addSerializableVariable("lotSize", &lotSize);
	addSerializableVariable("deedObjectID", &deedObjectID);
	addSerializableVariable("baseMaintenanceRate", &baseMaintenanceRate);
	addSerializableVariable("basePowerRate", &basePowerRate);
}

InstallationObjectImplementation::InstallationObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/installation/InstallationObject.idl(79):  		Logger.setLoggingName("InstallationObject");
	Logger::setLoggingName("InstallationObject");
	// server/zone/objects/installation/InstallationObject.idl(81):  		QuadTree.setSize(-1024, -1024, 1024, 1024);
	QuadTree::setSize(-1024, -1024, 1024, 1024);
	// server/zone/objects/installation/InstallationObject.idl(83):  		super.staticObject = false;
	TangibleObjectImplementation::staticObject = false;
	// server/zone/objects/installation/InstallationObject.idl(85):  		super.containerVolumeLimit = 0xFFFFFFFF;
	TangibleObjectImplementation::containerVolumeLimit = 0xFFFFFFFF;
	// server/zone/objects/installation/InstallationObject.idl(87):  		super.containerType = 2;
	TangibleObjectImplementation::containerType = 2;
	// server/zone/objects/installation/InstallationObject.idl(89):  		lotSize = 0;
	lotSize = 0;
	// server/zone/objects/installation/InstallationObject.idl(91):  		baseMaintenanceRate = 0;
	baseMaintenanceRate = 0;
	// server/zone/objects/installation/InstallationObject.idl(93):  		basePowerRate = 0;
	basePowerRate = 0;
	// server/zone/objects/installation/InstallationObject.idl(95):  		deedObjectID = 0;
	deedObjectID = 0;
}

void InstallationObjectImplementation::setLotSize(int lotsize) {
	// server/zone/objects/installation/InstallationObject.idl(130):  		lotSize = lotsize;
	lotSize = lotsize;
}

int InstallationObjectImplementation::getLotSize() {
	// server/zone/objects/installation/InstallationObject.idl(134):  		return lotSize;
	return lotSize;
}

void InstallationObjectImplementation::setDeedObjectID(unsigned long long deedid) {
	// server/zone/objects/installation/InstallationObject.idl(138):  		deedObjectID = deedid;
	deedObjectID = deedid;
}

unsigned long long InstallationObjectImplementation::getDeedObjectID() {
	// server/zone/objects/installation/InstallationObject.idl(142):  		return deedObjectID;
	return deedObjectID;
}

void InstallationObjectImplementation::setOwnerObjectID(unsigned long long ownerID) {
	// server/zone/objects/installation/InstallationObject.idl(146):  		ownerObjectID = ownerID;
	ownerObjectID = ownerID;
	// server/zone/objects/installation/InstallationObject.idl(147):  		structurePermissionList.grantPermission(ownerID, StructurePermissionList.OWNER);
	(&structurePermissionList)->grantPermission(ownerID, StructurePermissionList::OWNER);
}

unsigned long long InstallationObjectImplementation::getOwnerObjectID() {
	// server/zone/objects/installation/InstallationObject.idl(151):  		return ownerObjectID;
	return ownerObjectID;
}

int InstallationObjectImplementation::getBasePowerRate() {
	// server/zone/objects/installation/InstallationObject.idl(160):  		return basePowerRate;
	return basePowerRate;
}

void InstallationObjectImplementation::setBasePowerRate(int powerRate) {
	// server/zone/objects/installation/InstallationObject.idl(168):  		basePowerRate = powerRate;
	basePowerRate = powerRate;
}

void InstallationObjectImplementation::setBaseMaintenanceRate(int maintenanceRate) {
	// server/zone/objects/installation/InstallationObject.idl(176):  		baseMaintenanceRate = maintenanceRate;
	baseMaintenanceRate = maintenanceRate;
}

int InstallationObjectImplementation::getBaseMaintenanceRate() {
	// server/zone/objects/installation/InstallationObject.idl(185):  		return baseMaintenanceRate;
	return baseMaintenanceRate;
}

int InstallationObjectImplementation::getRedeedCost() {
	// server/zone/objects/installation/InstallationObject.idl(193):  		return baseMaintenanceRate * 50;
	return baseMaintenanceRate * 50;
}

bool InstallationObjectImplementation::isOnAdminList(CreatureObject* creature) {
	// server/zone/objects/installation/InstallationObject.idl(202):  		return structurePermissionList.isOnAdminList(creature.getObjectID());
	return (&structurePermissionList)->isOnAdminList(creature->getObjectID());
}

void InstallationObjectImplementation::sendPermissionListTo(PlayerCreature* player, const String& listName) {
	// server/zone/objects/installation/InstallationObject.idl(206):  		structurePermissionList.sendTo(player, listName);
	(&structurePermissionList)->sendTo(player, listName);
}

/*
 *	InstallationObjectAdapter
 */

InstallationObjectAdapter::InstallationObjectAdapter(InstallationObjectImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* InstallationObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		setLotSize(inv->getSignedIntParameter());
		break;
	case 7:
		resp->insertSignedInt(getLotSize());
		break;
	case 8:
		setDeedObjectID(inv->getUnsignedLongParameter());
		break;
	case 9:
		resp->insertLong(getDeedObjectID());
		break;
	case 10:
		setOwnerObjectID(inv->getUnsignedLongParameter());
		break;
	case 11:
		resp->insertLong(getOwnerObjectID());
		break;
	case 12:
		resp->insertSignedInt(getBasePowerRate());
		break;
	case 13:
		setBasePowerRate(inv->getSignedIntParameter());
		break;
	case 14:
		setBaseMaintenanceRate(inv->getSignedIntParameter());
		break;
	case 15:
		resp->insertSignedInt(getBaseMaintenanceRate());
		break;
	case 16:
		resp->insertSignedInt(getRedeedCost());
		break;
	case 17:
		resp->insertBoolean(isOnAdminList((CreatureObject*) inv->getObjectParameter()));
		break;
	case 18:
		sendPermissionListTo((PlayerCreature*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_sendPermissionListTo__PlayerCreature_String_));
		break;
	default:
		return NULL;
	}

	return resp;
}

void InstallationObjectAdapter::setLotSize(int lotsize) {
	((InstallationObjectImplementation*) impl)->setLotSize(lotsize);
}

int InstallationObjectAdapter::getLotSize() {
	return ((InstallationObjectImplementation*) impl)->getLotSize();
}

void InstallationObjectAdapter::setDeedObjectID(unsigned long long deedid) {
	((InstallationObjectImplementation*) impl)->setDeedObjectID(deedid);
}

unsigned long long InstallationObjectAdapter::getDeedObjectID() {
	return ((InstallationObjectImplementation*) impl)->getDeedObjectID();
}

void InstallationObjectAdapter::setOwnerObjectID(unsigned long long ownerID) {
	((InstallationObjectImplementation*) impl)->setOwnerObjectID(ownerID);
}

unsigned long long InstallationObjectAdapter::getOwnerObjectID() {
	return ((InstallationObjectImplementation*) impl)->getOwnerObjectID();
}

int InstallationObjectAdapter::getBasePowerRate() {
	return ((InstallationObjectImplementation*) impl)->getBasePowerRate();
}

void InstallationObjectAdapter::setBasePowerRate(int powerRate) {
	((InstallationObjectImplementation*) impl)->setBasePowerRate(powerRate);
}

void InstallationObjectAdapter::setBaseMaintenanceRate(int maintenanceRate) {
	((InstallationObjectImplementation*) impl)->setBaseMaintenanceRate(maintenanceRate);
}

int InstallationObjectAdapter::getBaseMaintenanceRate() {
	return ((InstallationObjectImplementation*) impl)->getBaseMaintenanceRate();
}

int InstallationObjectAdapter::getRedeedCost() {
	return ((InstallationObjectImplementation*) impl)->getRedeedCost();
}

bool InstallationObjectAdapter::isOnAdminList(CreatureObject* creature) {
	return ((InstallationObjectImplementation*) impl)->isOnAdminList(creature);
}

void InstallationObjectAdapter::sendPermissionListTo(PlayerCreature* player, const String& listName) {
	((InstallationObjectImplementation*) impl)->sendPermissionListTo(player, listName);
}

/*
 *	InstallationObjectHelper
 */

InstallationObjectHelper* InstallationObjectHelper::staticInitializer = InstallationObjectHelper::instance();

InstallationObjectHelper::InstallationObjectHelper() {
	className = "InstallationObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void InstallationObjectHelper::finalizeHelper() {
	InstallationObjectHelper::finalize();
}

DistributedObject* InstallationObjectHelper::instantiateObject() {
	return new InstallationObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* InstallationObjectHelper::instantiateServant() {
	return new InstallationObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* InstallationObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new InstallationObjectAdapter((InstallationObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

