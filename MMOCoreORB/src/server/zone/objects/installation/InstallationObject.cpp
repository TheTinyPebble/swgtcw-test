/*
 *	server/zone/objects/installation/InstallationObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "InstallationObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/installation/SyncrhonizedUiListenInstallationTask.h"

/*
 *	InstallationObjectStub
 */

InstallationObject::InstallationObject() : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new InstallationObjectImplementation();
	_impl->_setStub(this);
}

InstallationObject::InstallationObject(DummyConstructorParameter* param) : TangibleObject(param) {
}

InstallationObject::~InstallationObject() {
}


void InstallationObject::initializeTransientMembers() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->initializeTransientMembers();
}

void InstallationObject::destroyObjectFromDatabase(bool destroyContainedObjects) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addBooleanParameter(destroyContainedObjects);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->destroyObjectFromDatabase(destroyContainedObjects);
}

void InstallationObject::loadTemplateData(SharedObjectTemplate* templateData) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((InstallationObjectImplementation*) _impl)->loadTemplateData(templateData);
}

void InstallationObject::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((InstallationObjectImplementation*) _impl)->fillObjectMenuResponse(menuResponse, player);
}

int InstallationObject::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->handleObjectMenuSelect(player, selectedID);
}

void InstallationObject::setOperating(bool operating, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addBooleanParameter(operating);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->setOperating(operating, notifyClient);
}

void InstallationObject::activateUiSync() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->activateUiSync();
}

void InstallationObject::updateOperators() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->updateOperators();
}

void InstallationObject::verifyOperators() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->verifyOperators();
}

void InstallationObject::updateInstallationWork() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->updateInstallationWork();
}

void InstallationObject::handleStructureStatus(PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->handleStructureStatus(player);
}

void InstallationObject::handleStructureManageMaintenance(PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->handleStructureManageMaintenance(player);
}

void InstallationObject::handleSetObjectName(PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->handleSetObjectName(player);
}

void InstallationObject::handleStructureDestroy(PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->handleStructureDestroy(player);
}

void InstallationObject::broadcastToOperators(BasePacket* packet) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addObjectParameter(packet);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->broadcastToOperators(packet);
}

bool InstallationObject::isOnAdminList(CreatureObject* creature) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addObjectParameter(creature);

		return method.executeWithBooleanReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->isOnAdminList(creature);
}

void InstallationObject::sendPermissionListTo(PlayerCreature* player, const String& listName) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addObjectParameter(player);
		method.addAsciiParameter(listName);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->sendPermissionListTo(player, listName);
}

void InstallationObject::addOperator(PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->addOperator(player);
}

void InstallationObject::removeOperator(PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->removeOperator(player);
}

void InstallationObject::sendBaselinesTo(SceneObject* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->sendBaselinesTo(player);
}

void InstallationObject::setLotSize(int lotsize) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);
		method.addSignedIntParameter(lotsize);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->setLotSize(lotsize);
}

int InstallationObject::getLotSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);

		return method.executeWithSignedIntReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getLotSize();
}

void InstallationObject::setDeedObjectID(unsigned long long deedid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);
		method.addUnsignedLongParameter(deedid);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->setDeedObjectID(deedid);
}

unsigned long long InstallationObject::getDeedObjectID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getDeedObjectID();
}

void InstallationObject::setOwnerObjectID(unsigned long long ownerID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);
		method.addUnsignedLongParameter(ownerID);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->setOwnerObjectID(ownerID);
}

unsigned long long InstallationObject::getOwnerObjectID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getOwnerObjectID();
}

void InstallationObject::setMaintenancePool(unsigned int maintenance) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);
		method.addUnsignedIntParameter(maintenance);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->setMaintenancePool(maintenance);
}

unsigned int InstallationObject::getMaintenancePool() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getMaintenancePool();
}

void InstallationObject::setPowerPool(unsigned int power) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);
		method.addUnsignedIntParameter(power);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->setPowerPool(power);
}

unsigned int InstallationObject::getPowerPool() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getPowerPool();
}

void InstallationObject::addPower(int add) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);
		method.addSignedIntParameter(add);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->addPower(add);
}

void InstallationObject::addMaintenance(float maint) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);
		method.addFloatParameter(maint);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->addMaintenance(maint);
}

int InstallationObject::getBasePowerRate() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 36);

		return method.executeWithSignedIntReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getBasePowerRate();
}

void InstallationObject::setBasePowerRate(int powerRate) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 37);
		method.addSignedIntParameter(powerRate);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->setBasePowerRate(powerRate);
}

void InstallationObject::setBaseMaintenanceRate(int maintenanceRate) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 38);
		method.addSignedIntParameter(maintenanceRate);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _impl)->setBaseMaintenanceRate(maintenanceRate);
}

int InstallationObject::getBaseMaintenanceRate() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 39);

		return method.executeWithSignedIntReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getBaseMaintenanceRate();
}

int InstallationObject::getRedeedCost() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 40);

		return method.executeWithSignedIntReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getRedeedCost();
}

bool InstallationObject::isInstallationObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 41);

		return method.executeWithBooleanReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->isInstallationObject();
}

bool InstallationObject::isOperating() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 42);

		return method.executeWithBooleanReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->isOperating();
}

int InstallationObject::getInstallationType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 43);

		return method.executeWithSignedIntReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->getInstallationType();
}

bool InstallationObject::isHarvesterObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 44);

		return method.executeWithBooleanReturn();
	} else
		return ((InstallationObjectImplementation*) _impl)->isHarvesterObject();
}

/*
 *	InstallationObjectImplementation
 */

InstallationObjectImplementation::InstallationObjectImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
	_initializeImplementation();
}

InstallationObjectImplementation::~InstallationObjectImplementation() {
}


void InstallationObjectImplementation::finalize() {
}

void InstallationObjectImplementation::_initializeImplementation() {
	_setClassHelper(InstallationObjectHelper::instance());

	_serializationHelperMethod();
}

void InstallationObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (InstallationObject*) stub;
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* InstallationObjectImplementation::_getStub() {
	return _this;
}

InstallationObjectImplementation::operator const InstallationObject*() {
	return _this;
}

void InstallationObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void InstallationObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void InstallationObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void InstallationObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void InstallationObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void InstallationObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void InstallationObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void InstallationObjectImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("InstallationObject");

	addSerializableVariable("structurePermissionList", &structurePermissionList);
	addSerializableVariable("ownerObjectID", &ownerObjectID);
	addSerializableVariable("lotSize", &lotSize);
	addSerializableVariable("operating", &operating);
	addSerializableVariable("deedObjectID", &deedObjectID);
	addSerializableVariable("baseMaintenanceRate", &baseMaintenanceRate);
	addSerializableVariable("basePowerRate", &basePowerRate);
	addSerializableVariable("maintenancePool", &maintenancePool);
	addSerializableVariable("powerPool", &powerPool);
	addSerializableVariable("surplusMaintenance", &surplusMaintenance);
	addSerializableVariable("surplusPower", &surplusPower);
	addSerializableVariable("publicStructure", &publicStructure);
	addSerializableVariable("operatorList", &operatorList);
	addSerializableVariable("installationType", &installationType);
}

InstallationObjectImplementation::InstallationObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/installation/InstallationObject.idl(92):  		Logger.setLoggingName("InstallationObject");
	Logger::setLoggingName("InstallationObject");
	// server/zone/objects/installation/InstallationObject.idl(94):  		super.staticObject = false;
	TangibleObjectImplementation::staticObject = false;
	// server/zone/objects/installation/InstallationObject.idl(96):  		publicStructure = true;
	publicStructure = true;
	// server/zone/objects/installation/InstallationObject.idl(98):  		operating = false;
	operating = false;
	// server/zone/objects/installation/InstallationObject.idl(100):  		lotSize = 0;
	lotSize = 0;
	// server/zone/objects/installation/InstallationObject.idl(102):  		installationType = 0;
	installationType = 0;
	// server/zone/objects/installation/InstallationObject.idl(104):  		baseMaintenanceRate = 0;
	baseMaintenanceRate = 0;
	// server/zone/objects/installation/InstallationObject.idl(105):  		basePowerRate = 0;
	basePowerRate = 0;
	// server/zone/objects/installation/InstallationObject.idl(106):  		maintenancePool = 0;
	maintenancePool = 0;
	// server/zone/objects/installation/InstallationObject.idl(107):  		powerPool = 0;
	powerPool = 0;
	// server/zone/objects/installation/InstallationObject.idl(108):  		deedObjectID = 0;
	deedObjectID = 0;
	// server/zone/objects/installation/InstallationObject.idl(109):  		surplusMaintenance = 0;
	surplusMaintenance = 0;
	// server/zone/objects/installation/InstallationObject.idl(110):  		surplusPower = 0;
	surplusPower = 0;
	// server/zone/objects/installation/InstallationObject.idl(111):  		operatorList.setNoDuplicateInsertPlan();
	(&operatorList)->setNoDuplicateInsertPlan();
}

void InstallationObjectImplementation::initializeTransientMembers() {
	// server/zone/objects/installation/InstallationObject.idl(115):  		super.initializeTransientMembers();
	TangibleObjectImplementation::initializeTransientMembers();
	// server/zone/objects/installation/InstallationObject.idl(117):  		operatorList.setNoDuplicateInsertPlan();
	(&operatorList)->setNoDuplicateInsertPlan();
	// server/zone/objects/installation/InstallationObject.idl(119):  		Logger.setLoggingName("InstallationObject");
	Logger::setLoggingName("InstallationObject");
}

void InstallationObjectImplementation::updateOperators() {
}

void InstallationObjectImplementation::updateInstallationWork() {
}

bool InstallationObjectImplementation::isOnAdminList(CreatureObject* creature) {
	// server/zone/objects/installation/InstallationObject.idl(185):  		return structurePermissionList.isOnAdminList(creature.getObjectID());
	return (&structurePermissionList)->isOnAdminList(creature->getObjectID());
}

void InstallationObjectImplementation::sendPermissionListTo(PlayerCreature* player, const String& listName) {
	// server/zone/objects/installation/InstallationObject.idl(189):  		structurePermissionList.sendTo(player, listName);
	(&structurePermissionList)->sendTo(player, listName);
}

void InstallationObjectImplementation::addOperator(PlayerCreature* player) {
	// server/zone/objects/installation/InstallationObject.idl(193):  		operatorList.put(player);
	(&operatorList)->put(player);
}

void InstallationObjectImplementation::removeOperator(PlayerCreature* player) {
	// server/zone/objects/installation/InstallationObject.idl(197):  		operatorList.drop(player);
	(&operatorList)->drop(player);
}

void InstallationObjectImplementation::setLotSize(int lotsize) {
	// server/zone/objects/installation/InstallationObject.idl(203):  		lotSize = lotsize;
	lotSize = lotsize;
}

int InstallationObjectImplementation::getLotSize() {
	// server/zone/objects/installation/InstallationObject.idl(207):  		return lotSize;
	return lotSize;
}

void InstallationObjectImplementation::setDeedObjectID(unsigned long long deedid) {
	// server/zone/objects/installation/InstallationObject.idl(211):  		deedObjectID = deedid;
	deedObjectID = deedid;
}

unsigned long long InstallationObjectImplementation::getDeedObjectID() {
	// server/zone/objects/installation/InstallationObject.idl(215):  		return deedObjectID;
	return deedObjectID;
}

void InstallationObjectImplementation::setOwnerObjectID(unsigned long long ownerID) {
	// server/zone/objects/installation/InstallationObject.idl(219):  		ownerObjectID = ownerID;
	ownerObjectID = ownerID;
	// server/zone/objects/installation/InstallationObject.idl(220):  		structurePermissionList.grantPermission(ownerID, StructurePermissionList.OWNER);
	(&structurePermissionList)->grantPermission(ownerID, StructurePermissionList::OWNER);
}

unsigned long long InstallationObjectImplementation::getOwnerObjectID() {
	// server/zone/objects/installation/InstallationObject.idl(224):  		return ownerObjectID;
	return ownerObjectID;
}

void InstallationObjectImplementation::setMaintenancePool(unsigned int maintenance) {
	// server/zone/objects/installation/InstallationObject.idl(228):  		maintenancePool = maintenance;
	maintenancePool = maintenance;
}

unsigned int InstallationObjectImplementation::getMaintenancePool() {
	// server/zone/objects/installation/InstallationObject.idl(232):  		return maintenancePool;
	return maintenancePool;
}

void InstallationObjectImplementation::setPowerPool(unsigned int power) {
	// server/zone/objects/installation/InstallationObject.idl(236):  		powerPool = power;
	powerPool = power;
}

unsigned int InstallationObjectImplementation::getPowerPool() {
	// server/zone/objects/installation/InstallationObject.idl(240):  		return powerPool;
	return powerPool;
}

void InstallationObjectImplementation::addPower(int add) {
	// server/zone/objects/installation/InstallationObject.idl(244):  		powerPool = powerPool + add;
	powerPool = powerPool + add;
}

void InstallationObjectImplementation::addMaintenance(float maint) {
	// server/zone/objects/installation/InstallationObject.idl(248):  		surplusMaintenance = surplusMaintenance + maint;
	surplusMaintenance = surplusMaintenance + maint;
}

int InstallationObjectImplementation::getBasePowerRate() {
	// server/zone/objects/installation/InstallationObject.idl(257):  		return basePowerRate;
	return basePowerRate;
}

void InstallationObjectImplementation::setBasePowerRate(int powerRate) {
	// server/zone/objects/installation/InstallationObject.idl(265):  		basePowerRate = powerRate;
	basePowerRate = powerRate;
}

void InstallationObjectImplementation::setBaseMaintenanceRate(int maintenanceRate) {
	// server/zone/objects/installation/InstallationObject.idl(273):  		baseMaintenanceRate = maintenanceRate;
	baseMaintenanceRate = maintenanceRate;
}

int InstallationObjectImplementation::getBaseMaintenanceRate() {
	// server/zone/objects/installation/InstallationObject.idl(282):  		return baseMaintenanceRate;
	return baseMaintenanceRate;
}

int InstallationObjectImplementation::getRedeedCost() {
	// server/zone/objects/installation/InstallationObject.idl(290):  		return baseMaintenanceRate * 50;
	return baseMaintenanceRate * 50;
}

bool InstallationObjectImplementation::isInstallationObject() {
	// server/zone/objects/installation/InstallationObject.idl(294):  		return true;
	return true;
}

bool InstallationObjectImplementation::isOperating() {
	// server/zone/objects/installation/InstallationObject.idl(298):  		return operating;
	return operating;
}

int InstallationObjectImplementation::getInstallationType() {
	// server/zone/objects/installation/InstallationObject.idl(302):  		return installationType;
	return installationType;
}

bool InstallationObjectImplementation::isHarvesterObject() {
	// server/zone/objects/installation/InstallationObject.idl(306):  		return false;
	return false;
}

/*
 *	InstallationObjectAdapter
 */

InstallationObjectAdapter::InstallationObjectAdapter(InstallationObjectImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* InstallationObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initializeTransientMembers();
		break;
	case 7:
		destroyObjectFromDatabase(inv->getBooleanParameter());
		break;
	case 8:
		resp->insertSignedInt(handleObjectMenuSelect((PlayerCreature*) inv->getObjectParameter(), inv->getByteParameter()));
		break;
	case 9:
		setOperating(inv->getBooleanParameter(), inv->getBooleanParameter());
		break;
	case 10:
		activateUiSync();
		break;
	case 11:
		updateOperators();
		break;
	case 12:
		verifyOperators();
		break;
	case 13:
		updateInstallationWork();
		break;
	case 14:
		handleStructureStatus((PlayerCreature*) inv->getObjectParameter());
		break;
	case 15:
		handleStructureManageMaintenance((PlayerCreature*) inv->getObjectParameter());
		break;
	case 16:
		handleSetObjectName((PlayerCreature*) inv->getObjectParameter());
		break;
	case 17:
		handleStructureDestroy((PlayerCreature*) inv->getObjectParameter());
		break;
	case 18:
		broadcastToOperators((BasePacket*) inv->getObjectParameter());
		break;
	case 19:
		resp->insertBoolean(isOnAdminList((CreatureObject*) inv->getObjectParameter()));
		break;
	case 20:
		sendPermissionListTo((PlayerCreature*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_sendPermissionListTo__PlayerCreature_String_));
		break;
	case 21:
		addOperator((PlayerCreature*) inv->getObjectParameter());
		break;
	case 22:
		removeOperator((PlayerCreature*) inv->getObjectParameter());
		break;
	case 23:
		sendBaselinesTo((SceneObject*) inv->getObjectParameter());
		break;
	case 24:
		setLotSize(inv->getSignedIntParameter());
		break;
	case 25:
		resp->insertSignedInt(getLotSize());
		break;
	case 26:
		setDeedObjectID(inv->getUnsignedLongParameter());
		break;
	case 27:
		resp->insertLong(getDeedObjectID());
		break;
	case 28:
		setOwnerObjectID(inv->getUnsignedLongParameter());
		break;
	case 29:
		resp->insertLong(getOwnerObjectID());
		break;
	case 30:
		setMaintenancePool(inv->getUnsignedIntParameter());
		break;
	case 31:
		resp->insertInt(getMaintenancePool());
		break;
	case 32:
		setPowerPool(inv->getUnsignedIntParameter());
		break;
	case 33:
		resp->insertInt(getPowerPool());
		break;
	case 34:
		addPower(inv->getSignedIntParameter());
		break;
	case 35:
		addMaintenance(inv->getFloatParameter());
		break;
	case 36:
		resp->insertSignedInt(getBasePowerRate());
		break;
	case 37:
		setBasePowerRate(inv->getSignedIntParameter());
		break;
	case 38:
		setBaseMaintenanceRate(inv->getSignedIntParameter());
		break;
	case 39:
		resp->insertSignedInt(getBaseMaintenanceRate());
		break;
	case 40:
		resp->insertSignedInt(getRedeedCost());
		break;
	case 41:
		resp->insertBoolean(isInstallationObject());
		break;
	case 42:
		resp->insertBoolean(isOperating());
		break;
	case 43:
		resp->insertSignedInt(getInstallationType());
		break;
	case 44:
		resp->insertBoolean(isHarvesterObject());
		break;
	default:
		return NULL;
	}

	return resp;
}

void InstallationObjectAdapter::initializeTransientMembers() {
	((InstallationObjectImplementation*) impl)->initializeTransientMembers();
}

void InstallationObjectAdapter::destroyObjectFromDatabase(bool destroyContainedObjects) {
	((InstallationObjectImplementation*) impl)->destroyObjectFromDatabase(destroyContainedObjects);
}

int InstallationObjectAdapter::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	return ((InstallationObjectImplementation*) impl)->handleObjectMenuSelect(player, selectedID);
}

void InstallationObjectAdapter::setOperating(bool operating, bool notifyClient) {
	((InstallationObjectImplementation*) impl)->setOperating(operating, notifyClient);
}

void InstallationObjectAdapter::activateUiSync() {
	((InstallationObjectImplementation*) impl)->activateUiSync();
}

void InstallationObjectAdapter::updateOperators() {
	((InstallationObjectImplementation*) impl)->updateOperators();
}

void InstallationObjectAdapter::verifyOperators() {
	((InstallationObjectImplementation*) impl)->verifyOperators();
}

void InstallationObjectAdapter::updateInstallationWork() {
	((InstallationObjectImplementation*) impl)->updateInstallationWork();
}

void InstallationObjectAdapter::handleStructureStatus(PlayerCreature* player) {
	((InstallationObjectImplementation*) impl)->handleStructureStatus(player);
}

void InstallationObjectAdapter::handleStructureManageMaintenance(PlayerCreature* player) {
	((InstallationObjectImplementation*) impl)->handleStructureManageMaintenance(player);
}

void InstallationObjectAdapter::handleSetObjectName(PlayerCreature* player) {
	((InstallationObjectImplementation*) impl)->handleSetObjectName(player);
}

void InstallationObjectAdapter::handleStructureDestroy(PlayerCreature* player) {
	((InstallationObjectImplementation*) impl)->handleStructureDestroy(player);
}

void InstallationObjectAdapter::broadcastToOperators(BasePacket* packet) {
	((InstallationObjectImplementation*) impl)->broadcastToOperators(packet);
}

bool InstallationObjectAdapter::isOnAdminList(CreatureObject* creature) {
	return ((InstallationObjectImplementation*) impl)->isOnAdminList(creature);
}

void InstallationObjectAdapter::sendPermissionListTo(PlayerCreature* player, const String& listName) {
	((InstallationObjectImplementation*) impl)->sendPermissionListTo(player, listName);
}

void InstallationObjectAdapter::addOperator(PlayerCreature* player) {
	((InstallationObjectImplementation*) impl)->addOperator(player);
}

void InstallationObjectAdapter::removeOperator(PlayerCreature* player) {
	((InstallationObjectImplementation*) impl)->removeOperator(player);
}

void InstallationObjectAdapter::sendBaselinesTo(SceneObject* player) {
	((InstallationObjectImplementation*) impl)->sendBaselinesTo(player);
}

void InstallationObjectAdapter::setLotSize(int lotsize) {
	((InstallationObjectImplementation*) impl)->setLotSize(lotsize);
}

int InstallationObjectAdapter::getLotSize() {
	return ((InstallationObjectImplementation*) impl)->getLotSize();
}

void InstallationObjectAdapter::setDeedObjectID(unsigned long long deedid) {
	((InstallationObjectImplementation*) impl)->setDeedObjectID(deedid);
}

unsigned long long InstallationObjectAdapter::getDeedObjectID() {
	return ((InstallationObjectImplementation*) impl)->getDeedObjectID();
}

void InstallationObjectAdapter::setOwnerObjectID(unsigned long long ownerID) {
	((InstallationObjectImplementation*) impl)->setOwnerObjectID(ownerID);
}

unsigned long long InstallationObjectAdapter::getOwnerObjectID() {
	return ((InstallationObjectImplementation*) impl)->getOwnerObjectID();
}

void InstallationObjectAdapter::setMaintenancePool(unsigned int maintenance) {
	((InstallationObjectImplementation*) impl)->setMaintenancePool(maintenance);
}

unsigned int InstallationObjectAdapter::getMaintenancePool() {
	return ((InstallationObjectImplementation*) impl)->getMaintenancePool();
}

void InstallationObjectAdapter::setPowerPool(unsigned int power) {
	((InstallationObjectImplementation*) impl)->setPowerPool(power);
}

unsigned int InstallationObjectAdapter::getPowerPool() {
	return ((InstallationObjectImplementation*) impl)->getPowerPool();
}

void InstallationObjectAdapter::addPower(int add) {
	((InstallationObjectImplementation*) impl)->addPower(add);
}

void InstallationObjectAdapter::addMaintenance(float maint) {
	((InstallationObjectImplementation*) impl)->addMaintenance(maint);
}

int InstallationObjectAdapter::getBasePowerRate() {
	return ((InstallationObjectImplementation*) impl)->getBasePowerRate();
}

void InstallationObjectAdapter::setBasePowerRate(int powerRate) {
	((InstallationObjectImplementation*) impl)->setBasePowerRate(powerRate);
}

void InstallationObjectAdapter::setBaseMaintenanceRate(int maintenanceRate) {
	((InstallationObjectImplementation*) impl)->setBaseMaintenanceRate(maintenanceRate);
}

int InstallationObjectAdapter::getBaseMaintenanceRate() {
	return ((InstallationObjectImplementation*) impl)->getBaseMaintenanceRate();
}

int InstallationObjectAdapter::getRedeedCost() {
	return ((InstallationObjectImplementation*) impl)->getRedeedCost();
}

bool InstallationObjectAdapter::isInstallationObject() {
	return ((InstallationObjectImplementation*) impl)->isInstallationObject();
}

bool InstallationObjectAdapter::isOperating() {
	return ((InstallationObjectImplementation*) impl)->isOperating();
}

int InstallationObjectAdapter::getInstallationType() {
	return ((InstallationObjectImplementation*) impl)->getInstallationType();
}

bool InstallationObjectAdapter::isHarvesterObject() {
	return ((InstallationObjectImplementation*) impl)->isHarvesterObject();
}

/*
 *	InstallationObjectHelper
 */

InstallationObjectHelper* InstallationObjectHelper::staticInitializer = InstallationObjectHelper::instance();

InstallationObjectHelper::InstallationObjectHelper() {
	className = "InstallationObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void InstallationObjectHelper::finalizeHelper() {
	InstallationObjectHelper::finalize();
}

DistributedObject* InstallationObjectHelper::instantiateObject() {
	return new InstallationObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* InstallationObjectHelper::instantiateServant() {
	return new InstallationObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* InstallationObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new InstallationObjectAdapter((InstallationObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

