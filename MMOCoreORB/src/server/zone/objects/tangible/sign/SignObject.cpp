/*
 *	server/zone/objects/tangible/sign/SignObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "SignObject.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/Zone.h"

/*
 *	SignObjectStub
 */

enum {RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_ = 6,RPC_SENDSIGNNAMETO__CREATUREOBJECT_,RPC_ISSIGNOBJECT__,RPC_INITIALIZECHILDOBJECT__SCENEOBJECT_};

SignObject::SignObject() : TangibleObject(DummyConstructorParameter::instance()) {
	SignObjectImplementation* _implementation = new SignObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("SignObject");
}

SignObject::SignObject(DummyConstructorParameter* param) : TangibleObject(param) {
	_setClassName("SignObject");
}

SignObject::~SignObject() {
}



int SignObject::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	SignObjectImplementation* _implementation = static_cast<SignObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->handleObjectMenuSelect(player, selectedID);
}

void SignObject::sendSignNameTo(CreatureObject* player) {
	SignObjectImplementation* _implementation = static_cast<SignObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDSIGNNAMETO__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendSignNameTo(player);
}

bool SignObject::isSignObject() {
	SignObjectImplementation* _implementation = static_cast<SignObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSIGNOBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isSignObject();
}

void SignObject::initializeChildObject(SceneObject* controllerObject) {
	SignObjectImplementation* _implementation = static_cast<SignObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZECHILDOBJECT__SCENEOBJECT_);
		method.addObjectParameter(controllerObject);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeChildObject(controllerObject);
}

DistributedObjectServant* SignObject::_getImplementation() {

	_updated = true;
	return _impl;
}

void SignObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	SignObjectImplementation
 */

SignObjectImplementation::SignObjectImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
	_initializeImplementation();
}


SignObjectImplementation::~SignObjectImplementation() {
}


void SignObjectImplementation::finalize() {
}

void SignObjectImplementation::_initializeImplementation() {
	_setClassHelper(SignObjectHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void SignObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<SignObject*>(stub);
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* SignObjectImplementation::_getStub() {
	return _this;
}

SignObjectImplementation::operator const SignObject*() {
	return _this;
}

void SignObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void SignObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void SignObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void SignObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void SignObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void SignObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void SignObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void SignObjectImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("SignObject");

}

void SignObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(SignObjectImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool SignObjectImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (TangibleObjectImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "SignObject.attachedObject") {
		TypeInfo<ManagedWeakReference<SceneObject* > >::parseFromBinaryStream(&attachedObject, stream);
		return true;
	}


	return false;
}

void SignObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = SignObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int SignObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = TangibleObjectImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;
	_name = "SignObject.attachedObject";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<SceneObject* > >::toBinaryStream(&attachedObject, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 1;
}

SignObjectImplementation::SignObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/sign/SignObject.idl():  		Logger.setLoggingName("SignObject");
	Logger::setLoggingName("SignObject");
}

bool SignObjectImplementation::isSignObject() {
	// server/zone/objects/tangible/sign/SignObject.idl():  		return true;
	return true;
}

/*
 *	SignObjectAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


SignObjectAdapter::SignObjectAdapter(SignObject* obj) : TangibleObjectAdapter(obj) {
}

void SignObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_:
		{
			resp->insertSignedInt(handleObjectMenuSelect(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getByteParameter()));
		}
		break;
	case RPC_SENDSIGNNAMETO__CREATUREOBJECT_:
		{
			sendSignNameTo(static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_ISSIGNOBJECT__:
		{
			resp->insertBoolean(isSignObject());
		}
		break;
	case RPC_INITIALIZECHILDOBJECT__SCENEOBJECT_:
		{
			initializeChildObject(static_cast<SceneObject*>(inv->getObjectParameter()));
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

int SignObjectAdapter::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	return (static_cast<SignObject*>(stub))->handleObjectMenuSelect(player, selectedID);
}

void SignObjectAdapter::sendSignNameTo(CreatureObject* player) {
	(static_cast<SignObject*>(stub))->sendSignNameTo(player);
}

bool SignObjectAdapter::isSignObject() {
	return (static_cast<SignObject*>(stub))->isSignObject();
}

void SignObjectAdapter::initializeChildObject(SceneObject* controllerObject) {
	(static_cast<SignObject*>(stub))->initializeChildObject(controllerObject);
}

/*
 *	SignObjectHelper
 */

SignObjectHelper* SignObjectHelper::staticInitializer = SignObjectHelper::instance();

SignObjectHelper::SignObjectHelper() {
	className = "SignObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void SignObjectHelper::finalizeHelper() {
	SignObjectHelper::finalize();
}

DistributedObject* SignObjectHelper::instantiateObject() {
	return new SignObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* SignObjectHelper::instantiateServant() {
	return new SignObjectImplementation();
}

DistributedObjectAdapter* SignObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SignObjectAdapter(static_cast<SignObject*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

