/*
 *	server/zone/objects/tangible/sign/SignObserver.cpp generated by engine3 IDL compiler 0.60
 */

#include "SignObserver.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/area/ActiveArea.h"

#include "server/zone/Zone.h"

#include "server/zone/ZoneProcessServer.h"

#include "server/zone/objects/tangible/sign/SignObject.h"

/*
 *	SignObserverStub
 */

enum {RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_ = 6,RPC_NOTIFYOBJECTNAMECHANGED__SCENEOBJECT_};

SignObserver::SignObserver(SignObject* sign) : Observer(DummyConstructorParameter::instance()) {
	SignObserverImplementation* _implementation = new SignObserverImplementation(sign);
	_impl = _implementation;
	_impl->_setStub(this);
}

SignObserver::SignObserver(DummyConstructorParameter* param) : Observer(param) {
}

SignObserver::~SignObserver() {
}


int SignObserver::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	SignObserverImplementation* _implementation = (SignObserverImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(observable);
		method.addObjectParameter(arg1);
		method.addSignedLongParameter(arg2);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyObserverEvent(eventType, observable, arg1, arg2);
}

void SignObserver::notifyObjectNameChanged(SceneObject* object) {
	SignObserverImplementation* _implementation = (SignObserverImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBJECTNAMECHANGED__SCENEOBJECT_);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyObjectNameChanged(object);
}

DistributedObjectServant* SignObserver::_getImplementation() {

	_updated = true;
	return _impl;
}

void SignObserver::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	SignObserverImplementation
 */

SignObserverImplementation::SignObserverImplementation(DummyConstructorParameter* param) : ObserverImplementation(param) {
	_initializeImplementation();
}


SignObserverImplementation::~SignObserverImplementation() {
}


void SignObserverImplementation::finalize() {
}

void SignObserverImplementation::_initializeImplementation() {
	_setClassHelper(SignObserverHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void SignObserverImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (SignObserver*) stub;
	ObserverImplementation::_setStub(stub);
}

DistributedObjectStub* SignObserverImplementation::_getStub() {
	return _this;
}

SignObserverImplementation::operator const SignObserver*() {
	return _this;
}

void SignObserverImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void SignObserverImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void SignObserverImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void SignObserverImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void SignObserverImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void SignObserverImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void SignObserverImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void SignObserverImplementation::_serializationHelperMethod() {
	ObserverImplementation::_serializationHelperMethod();

	_setClassName("SignObserver");

}

void SignObserverImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(SignObserverImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool SignObserverImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ObserverImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "signObject") {
		TypeInfo<ManagedWeakReference<SignObject* > >::parseFromBinaryStream(&signObject, stream);
		return true;
	}


	return false;
}

void SignObserverImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = SignObserverImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int SignObserverImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "signObject";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedWeakReference<SignObject* > >::toBinaryStream(&signObject, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 1 + ObserverImplementation::writeObjectMembers(stream);
}

SignObserverImplementation::SignObserverImplementation(SignObject* sign) {
	_initializeImplementation();
	// server/zone/objects/tangible/sign/SignObserver.idl():  		signObject = sign;
	signObject = sign;
}

int SignObserverImplementation::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	// server/zone/objects/tangible/sign/SignObserver.idl():  		}
	switch (eventType) {
	case ObserverEventType::OBJECTNAMECHANGED :
	// server/zone/objects/tangible/sign/SignObserver.idl():  			notifyObjectNameChanged((SceneObject) arg1);
	notifyObjectNameChanged((SceneObject*) arg1);
	break;
}
	// server/zone/objects/tangible/sign/SignObserver.idl():  		return 0;
	return 0;
}

/*
 *	SignObserverAdapter
 */

SignObserverAdapter::SignObserverAdapter(SignObserverImplementation* obj) : ObserverAdapter(obj) {
}

Packet* SignObserverAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_:
		resp->insertSignedInt(notifyObserverEvent(inv->getUnsignedIntParameter(), (Observable*) inv->getObjectParameter(), (ManagedObject*) inv->getObjectParameter(), inv->getSignedLongParameter()));
		break;
	case RPC_NOTIFYOBJECTNAMECHANGED__SCENEOBJECT_:
		notifyObjectNameChanged((SceneObject*) inv->getObjectParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

int SignObserverAdapter::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	return ((SignObserverImplementation*) impl)->notifyObserverEvent(eventType, observable, arg1, arg2);
}

void SignObserverAdapter::notifyObjectNameChanged(SceneObject* object) {
	((SignObserverImplementation*) impl)->notifyObjectNameChanged(object);
}

/*
 *	SignObserverHelper
 */

SignObserverHelper* SignObserverHelper::staticInitializer = SignObserverHelper::instance();

SignObserverHelper::SignObserverHelper() {
	className = "SignObserver";

	Core::getObjectBroker()->registerClass(className, this);
}

void SignObserverHelper::finalizeHelper() {
	SignObserverHelper::finalize();
}

DistributedObject* SignObserverHelper::instantiateObject() {
	return new SignObserver(DummyConstructorParameter::instance());
}

DistributedObjectServant* SignObserverHelper::instantiateServant() {
	return new SignObserverImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* SignObserverHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SignObserverAdapter((SignObserverImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

