/*
 *	server/zone/objects/tangible/gambling/JubileeWheel.cpp generated by engine3 IDL compiler 0.55
 */

#include "JubileeWheel.h"

#include "JubileeWheelImplementation.h"

#include "../../player/Player.h"

#include "../TangibleObject.h"

/*
 *	JubileeWheelStub
 */

JubileeWheel::JubileeWheel(unsigned long long objid, float x, float z, float y) : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new JubileeWheelImplementation(objid, x, z, y);
	_impl->_setStub(this);
}

JubileeWheel::JubileeWheel(DummyConstructorParameter* param) : TangibleObject(param) {
}

JubileeWheel::~JubileeWheel() {
}

int JubileeWheel::useObject(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return ((JubileeWheelImplementation*) _impl)->useObject(player);
}

/*
 *	JubileeWheelAdapter
 */

JubileeWheelAdapter::JubileeWheelAdapter(JubileeWheelImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* JubileeWheelAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertSignedInt(useObject((Player*) inv->getObjectParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

int JubileeWheelAdapter::useObject(Player* player) {
	return ((JubileeWheelImplementation*) impl)->useObject(player);
}

/*
 *	JubileeWheelHelper
 */

JubileeWheelHelper* JubileeWheelHelper::staticInitializer = JubileeWheelHelper::instance();

JubileeWheelHelper::JubileeWheelHelper() {
	className = "JubileeWheel";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void JubileeWheelHelper::finalizeHelper() {
	JubileeWheelHelper::finalize();
}

DistributedObject* JubileeWheelHelper::instantiateObject() {
	return new JubileeWheel(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* JubileeWheelHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new JubileeWheelAdapter((JubileeWheelImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	JubileeWheelServant
 */

JubileeWheelServant::JubileeWheelServant(unsigned long long objid, unsigned int tempCRC, const UnicodeString& n, const String& tempname, int tp) : TangibleObjectImplementation(objid, tempCRC, n, tempname, tp) {
	_classHelper = JubileeWheelHelper::instance();
}

JubileeWheelServant::~JubileeWheelServant() {
}

void JubileeWheelServant::_setStub(DistributedObjectStub* stub) {
	_this = (JubileeWheel*) stub;
	TangibleObjectServant::_setStub(stub);
}

DistributedObjectStub* JubileeWheelServant::_getStub() {
	return _this;
}

