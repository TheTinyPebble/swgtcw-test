/*
 *	server/zone/objects/tangible/Datapad.cpp generated by engine3 IDL compiler 0.55
 */

#include "Datapad.h"

#include "DatapadImplementation.h"

#include "Container.h"

#include "../creature/CreatureObject.h"

/*
 *	DatapadStub
 */

Datapad::Datapad(CreatureObject* creature) : Container(DummyConstructorParameter::instance()) {
	_impl = new DatapadImplementation(creature);
	_impl->_setStub(this);
}

Datapad::Datapad(DummyConstructorParameter* param) : Container(param) {
}

Datapad::~Datapad() {
}

/*
 *	DatapadAdapter
 */

DatapadAdapter::DatapadAdapter(DatapadImplementation* obj) : ContainerAdapter(obj) {
}

Packet* DatapadAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	default:
		return NULL;
	}

	return resp;
}

/*
 *	DatapadHelper
 */

DatapadHelper* DatapadHelper::staticInitializer = DatapadHelper::instance();

DatapadHelper::DatapadHelper() {
	className = "Datapad";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void DatapadHelper::finalizeHelper() {
	DatapadHelper::finalize();
}

DistributedObject* DatapadHelper::instantiateObject() {
	return new Datapad(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* DatapadHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new DatapadAdapter((DatapadImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	DatapadServant
 */

DatapadServant::DatapadServant(unsigned long long oid) : ContainerImplementation(oid) {
	_classHelper = DatapadHelper::instance();
}

DatapadServant::~DatapadServant() {
}

void DatapadServant::_setStub(DistributedObjectStub* stub) {
	_this = (Datapad*) stub;
	ContainerServant::_setStub(stub);
}

DistributedObjectStub* DatapadServant::_getStub() {
	return _this;
}

