/*
 *	server/zone/objects/tangible/weapon/RifleWeaponObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "RifleWeaponObject.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/scene/SceneObject.h"


// Imported class dependencies

#include "server/zone/managers/planet/PlanetManager.h"

#include "system/util/VectorMap.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "engine/util/Quaternion.h"

#include "server/zone/objects/scene/variables/CustomizationVariables.h"

#include "server/zone/objects/scene/ObserverEventMap.h"

#include "server/zone/managers/planet/HeightMap.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

#include "system/lang/Time.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "server/zone/Zone.h"

#include "server/zone/ZoneProcessServerImplementation.h"

#include "server/zone/objects/area/ActiveArea.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/objects/scene/variables/StringId.h"

#include "server/zone/managers/creature/CreatureManager.h"

#include "server/zone/managers/planet/MapLocationTable.h"

#include "server/zone/templates/tangible/SharedWeaponObjectTemplate.h"

#include "system/util/Vector.h"

#include "system/util/SortedVector.h"

#include "server/zone/managers/object/ObjectMap.h"

#include "server/zone/objects/scene/variables/DeltaVector.h"

/*
 *	RifleWeaponObjectStub
 */

RifleWeaponObject::RifleWeaponObject() : RangedWeaponObject(DummyConstructorParameter::instance()) {
	RifleWeaponObjectImplementation* _implementation = new RifleWeaponObjectImplementation();
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

RifleWeaponObject::RifleWeaponObject(DummyConstructorParameter* param) : RangedWeaponObject(param) {
}

RifleWeaponObject::~RifleWeaponObject() {
}


void RifleWeaponObject::initializeTransientMembers() {
	RifleWeaponObjectImplementation* _implementation = (RifleWeaponObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void RifleWeaponObject::initializePrivateData() {
	RifleWeaponObjectImplementation* _implementation = (RifleWeaponObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		_implementation->initializePrivateData();
}

bool RifleWeaponObject::isRifleWeapon() {
	RifleWeaponObjectImplementation* _implementation = (RifleWeaponObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isRifleWeapon();
}

bool RifleWeaponObject::isLightningRifle() {
	RifleWeaponObjectImplementation* _implementation = (RifleWeaponObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isLightningRifle();
}

DistributedObjectServant* RifleWeaponObject::_getImplementation() {
	return getForUpdate();}

void RifleWeaponObject::_setImplementation(DistributedObjectServant* servant) {
	setObject((ManagedObjectImplementation*) servant);}

/*
 *	RifleWeaponObjectImplementation
 */

RifleWeaponObjectImplementation::RifleWeaponObjectImplementation(DummyConstructorParameter* param) : RangedWeaponObjectImplementation(param) {
	_initializeImplementation();
}


RifleWeaponObjectImplementation::~RifleWeaponObjectImplementation() {
}


void RifleWeaponObjectImplementation::finalize() {
}

void RifleWeaponObjectImplementation::_initializeImplementation() {
	_setClassHelper(RifleWeaponObjectHelper::instance());

	_serializationHelperMethod();
}

void RifleWeaponObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (RifleWeaponObject*) stub;
	RangedWeaponObjectImplementation::_setStub(stub);
}

DistributedObjectStub* RifleWeaponObjectImplementation::_getStub() {
	return _this;
}

RifleWeaponObjectImplementation::operator const RifleWeaponObject*() {
	return _this;
}

TransactionalObject* RifleWeaponObjectImplementation::clone() {
	return (TransactionalObject*) new RifleWeaponObjectImplementation(*this);
}


void RifleWeaponObjectImplementation::lock(bool doLock) {
}

void RifleWeaponObjectImplementation::lock(ManagedObject* obj) {
}

void RifleWeaponObjectImplementation::rlock(bool doLock) {
}

void RifleWeaponObjectImplementation::wlock(bool doLock) {
}

void RifleWeaponObjectImplementation::wlock(ManagedObject* obj) {
}

void RifleWeaponObjectImplementation::unlock(bool doLock) {
}

void RifleWeaponObjectImplementation::runlock(bool doLock) {
}

void RifleWeaponObjectImplementation::_serializationHelperMethod() {
	RangedWeaponObjectImplementation::_serializationHelperMethod();

	_setClassName("RifleWeaponObject");

}

RifleWeaponObjectImplementation::RifleWeaponObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/weapon/RifleWeaponObject.idl(55):  		Logger.setLoggingName("RifleWeaponObject");
	Logger::setLoggingName("RifleWeaponObject");
	// server/zone/objects/tangible/weapon/RifleWeaponObject.idl(57):  		initializePrivateData();
	initializePrivateData();
}

void RifleWeaponObjectImplementation::initializeTransientMembers() {
	// server/zone/objects/tangible/weapon/RifleWeaponObject.idl(61):  		super.initializeTransientMembers();
	RangedWeaponObjectImplementation::initializeTransientMembers();
	// server/zone/objects/tangible/weapon/RifleWeaponObject.idl(63):  		Logger.setLoggingName("RifleWeaponObject");
	Logger::setLoggingName("RifleWeaponObject");
}

void RifleWeaponObjectImplementation::initializePrivateData() {
	// server/zone/objects/tangible/weapon/RifleWeaponObject.idl(67):  		super.maxRange = 65;
	RangedWeaponObjectImplementation::maxRange = 65;
}

bool RifleWeaponObjectImplementation::isRifleWeapon() {
	// server/zone/objects/tangible/weapon/RifleWeaponObject.idl(71):  		return true;
	return true;
}

bool RifleWeaponObjectImplementation::isLightningRifle() {
	// server/zone/objects/tangible/weapon/RifleWeaponObject.idl(75):  		return super.gameObjectType == SceneObject.LIGHTNINGRIFLE;
	return RangedWeaponObjectImplementation::gameObjectType == SceneObject::LIGHTNINGRIFLE;
}

/*
 *	RifleWeaponObjectAdapter
 */

RifleWeaponObjectAdapter::RifleWeaponObjectAdapter(RifleWeaponObjectImplementation* obj) : RangedWeaponObjectAdapter(obj) {
}

Packet* RifleWeaponObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initializeTransientMembers();
		break;
	case 7:
		initializePrivateData();
		break;
	case 8:
		resp->insertBoolean(isRifleWeapon());
		break;
	case 9:
		resp->insertBoolean(isLightningRifle());
		break;
	default:
		return NULL;
	}

	return resp;
}

void RifleWeaponObjectAdapter::initializeTransientMembers() {
	((RifleWeaponObjectImplementation*) impl)->initializeTransientMembers();
}

void RifleWeaponObjectAdapter::initializePrivateData() {
	((RifleWeaponObjectImplementation*) impl)->initializePrivateData();
}

bool RifleWeaponObjectAdapter::isRifleWeapon() {
	return ((RifleWeaponObjectImplementation*) impl)->isRifleWeapon();
}

bool RifleWeaponObjectAdapter::isLightningRifle() {
	return ((RifleWeaponObjectImplementation*) impl)->isLightningRifle();
}

/*
 *	RifleWeaponObjectHelper
 */

RifleWeaponObjectHelper* RifleWeaponObjectHelper::staticInitializer = RifleWeaponObjectHelper::instance();

RifleWeaponObjectHelper::RifleWeaponObjectHelper() {
	className = "RifleWeaponObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void RifleWeaponObjectHelper::finalizeHelper() {
	RifleWeaponObjectHelper::finalize();
}

DistributedObject* RifleWeaponObjectHelper::instantiateObject() {
	return new RifleWeaponObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* RifleWeaponObjectHelper::instantiateServant() {
	return new RifleWeaponObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* RifleWeaponObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new RifleWeaponObjectAdapter((RifleWeaponObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

