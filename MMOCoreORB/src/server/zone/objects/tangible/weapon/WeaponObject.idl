/*
Copyright (C) 2007 <SWGEmu>

This File is part of Core3.

This program is free software; you can redistribute
it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software
Foundation; either version 2 of the License,
or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for
more details.

You should have received a copy of the GNU Lesser General
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Linking Engine3 statically or dynamically with other modules
is making a combined work based on Engine3.
Thus, the terms and conditions of the GNU Lesser General Public License
cover the whole combination.

In addition, as a special exception, the copyright holders of Engine3
give you permission to combine Engine3 program with free software
programs or libraries that are released under the GNU LGPL and with
code included in the standard release of Core3 under the GNU LGPL
license (or modified versions of such code, with unchanged license).
You may copy and distribute such a system following the terms of the
GNU LGPL for Engine3 and the licenses of the other code concerned,
provided that you include the source code of that other code when
and as the GNU LGPL requires distribution of source code.

Note that people who make modified versions of Engine3 are not obligated
to grant this special exception for their modified versions;
it is their choice whether to do so. The GNU Lesser General Public License
gives permission to release a modified version without this exception;
this exception also makes it possible to release a modified version
which carries forward this exception.
*/

package server.zone.objects.tangible.weapon;

import server.zone.objects.tangible.TangibleObject;
import engine.lua.LuaObject;
import server.zone.objects.scene.SceneObject;
import server.zone.objects.player.PlayerCreature;
import server.zone.packets.scene.AttributeListMessage;
import server.zone.Zone;


class WeaponObject extends TangibleObject {
	protected int attackType;
	protected string weaponEffect;
	protected int weaponEffectIndex;
	
	protected boolean certified;
	
	protected int armorPiercing;
	
	protected int pointBlankAccuracy;
	protected int pointBlankRange;

	protected int idealRange;
	protected int idealAccuracy;

	protected int maxRange;
	protected int maxRangeAccuracy;
	
	protected int damageType;
	
	protected float attackSpeed;
	
	protected float minDamage;
	protected float maxDamage;
	
	protected float area;
	
	protected float woundsRatio;
	
	protected int healthAttackCost;
	protected int actionAttackCost;
	protected int mindAttackCost;
	protected int forceCost;
	
	@dereferenced
	protected Vector<string> damageModifiers;
	
	@dereferenced
	protected Vector<string> speedModifiers;
	
	@dereferenced
	protected Vector<string> creatureAccuracyModifiers;
	
	@dereferenced
	protected Vector<string> defenderDefenseModifiers;
	
	@dereferenced
	protected Vector<string> certificationsRequired;
	
	@dereferenced
	protected Vector<string> defenderSecondaryDefenseModifiers;
	
	public static final int NONE = 0;
	public static final int LIGHT = 1;
	public static final int MEDIUM = 2;
	public static final int HEAVY = 3;

	public static final int KINETIC = 1;
	public static final int ENERGY = 2;
	public static final int ELECTRICITY = 3;
	public static final int STUN = 4;
	public static final int BLAST = 5;
	public static final int HEAT = 6;
	public static final int COLD = 7;
	public static final int ACID = 8;
	public static final int LIGHTSABER = 9;
	public static final int FORCE = 10;

	public static final int MELEEATTACK = 0;
	public static final int RANGEDATTACK = 1;
	public static final int FORCEATTACK = 2;
	public static final int TRAPATTACK = 3;
	public static final int GRENADEATTACK = 4;
	public static final int HEAVYACIDBEAMATTACK = 14;
	public static final int HEAVYLIGHTNINGBEAMATTACK = 15;
	public static final int HEAVYPARTICLEBEAMATTACK = 17;
	public static final int HEAVYROCKETLAUNCHERATTACK = 18;
	public static final int HEAVYLAUNCHERATTACK = 19;
		
	public WeaponObject() {
		certified = false;
		armorPiercing = 0;
		
		healthAttackCost = 0;
		actionAttackCost = 0;
		mindAttackCost = 0;
		forceCost = 0;
		
		pointBlankAccuracy = 0;
		pointBlankRange = 0;
		
		idealRange = 0;
		idealAccuracy = 0;
		
		maxRange = 5;
		maxRangeAccuracy = 0;
		
		damageType = 0;
		
		minDamage = 1;
		maxDamage = 10;
		
		woundsRatio = 0;
		
		area = 0;
		
		attackSpeed = 1;
		
		Logger.setLoggingName("WeaponObject");
	}
	
	@local
	public native void loadTemplateData(LuaObject templateData);
	
	public native void initializeTransientMembers();
	
	public native void sendBaselinesTo(SceneObject player);
	
	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	@local
	public native void fillAttributeList(AttributeListMessage msg, PlayerCreature object);
	
	/**
	 * Returns true if the player has the required certifications for this weapon
	 * @pre { }
	 * @post { }
	 * @param object player object to check against
	 */
	public native boolean isCertifiedFor(PlayerCreature object);
	
	@local
	public Vector<string> getDamageModifiers() {
		return damageModifiers;
	}
	
	@local
	public Vector<string> getSpeedModifiers() {
		return speedModifiers;
	}
	
	@local
	public Vector<string> getCreatureAccuracyModifiers() {
		return creatureAccuracyModifiers;
	}
	
	@local
	public Vector<string> getDefenderDefenseModifiers() {
		return defenderDefenseModifiers;
	}
	
	@local
	public Vector<string> getDefenderSecondaryDefenseModifiers() {
		return defenderSecondaryDefenseModifiers;
	}
	
	public void setCertified(boolean cert) {
		certified = cert;
	}
	
	public int getAttackType() {
		return attackType;
	}
	
	public boolean isCertified() {
		return certified;
	}
	
	public int getPointBlankAccuracy() {
		return pointBlankAccuracy;
	}
	
	public int getPointBlankRange() {
		return pointBlankRange;
	}
	
	public int getIdealRange() {
		return idealRange;
	}
	
	public int getMaxRange() {
		return maxRange;
	}
	
	public int getIdealAccuracy() {
		return idealAccuracy;
	}
	
	public int getArmorPiercing() {
		return armorPiercing;
	}
	
	public int getMaxRangeAccuracy() {
		return maxRangeAccuracy;
	}
	
	public float getAttackSpeed() {
		return attackSpeed;
	}
	
	public float getMaxDamage() {
		return maxDamage;
	}
	
	public float getMinDamage() {
		return minDamage;
	}
	
	public float getWoundsRatio() {
		return woundsRatio;
	}
	
	public int getHealthAttackCost() {
		return healthAttackCost;
	}
	
	public int getActionAttackCost() {
		return actionAttackCost;
	}
	
	public int getMindAttackCost() {
		return mindAttackCost;
	}
	
	public int getForceCost() {
		return forceCost;
	}
	
	public int getDamageType() {
		return damageType;
	}
	
	public boolean hasMeleeAttack() {
		return attackType == MELEEATTACK;
	}
	
	public boolean hasRangedAttack() {
		return attackType == RANGEDATTACK;
	}
	
	public boolean isUnarmedWeapon() {
		return super.gameObjectType == SceneObject.WEAPON;
	}
	
	public abstract boolean isMeleeWeapon() {
		return false;
	}
	
	public abstract boolean isRangedWeapon() {
		return false;
	}
	
	public abstract boolean isRifleWeapon() {
		return false;
	}
	
	public abstract boolean isPistolWeapon() {
		return false;
	}
	
	public abstract boolean isOneHandMeleeWeapon() {
		return false;
	}

}
