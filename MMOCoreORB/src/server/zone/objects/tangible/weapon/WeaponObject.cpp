/*
 *	server/zone/objects/tangible/weapon/WeaponObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "WeaponObject.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/Zone.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/tangible/powerup/PowerupObject.h"

/*
 *	WeaponObjectStub
 */

enum {RPC_INITIALIZETRANSIENTMEMBERS__,RPC_SENDBASELINESTO__SCENEOBJECT_,RPC_SENDCONTAINERTO__CREATUREOBJECT_,RPC_CREATECHILDOBJECTS__,RPC_ISCERTIFIEDFOR__CREATUREOBJECT_,RPC_SETCERTIFIED__BOOL_,RPC_GETATTACKTYPE__,RPC_SETATTACKTYPE__INT_,RPC_ISCERTIFIED__,RPC_GETPOINTBLANKACCURACY__BOOL_,RPC_SETPOINTBLANKACCURACY__INT_,RPC_GETPOINTBLANKRANGE__BOOL_,RPC_GETIDEALRANGE__BOOL_,RPC_SETIDEALRANGE__INT_,RPC_GETMAXRANGE__BOOL_,RPC_SETMAXRANGE__INT_,RPC_GETIDEALACCURACY__BOOL_,RPC_SETIDEALACCURACY__INT_,RPC_GETARMORPIERCING__,RPC_GETMAXRANGEACCURACY__BOOL_,RPC_SETMAXRANGEACCURACY__INT_,RPC_GETATTACKSPEED__BOOL_,RPC_SETATTACKSPEED__FLOAT_,RPC_GETMAXDAMAGE__BOOL_,RPC_SETMAXDAMAGE__FLOAT_,RPC_GETMINDAMAGE__BOOL_,RPC_SETMINDAMAGE__FLOAT_,RPC_GETWOUNDSRATIO__BOOL_,RPC_SETWOUNDSRATIO__FLOAT_,RPC_GETDAMAGERADIUS__BOOL_,RPC_SETDAMAGERADIUS__FLOAT_,RPC_GETHEALTHATTACKCOST__BOOL_,RPC_SETHEALTHATTACKCOST__INT_,RPC_GETACTIONATTACKCOST__BOOL_,RPC_SETACTIONATTACKCOST__INT_,RPC_GETMINDATTACKCOST__BOOL_,RPC_SETMINDATTACKCOST__INT_,RPC_GETFORCECOST__,RPC_SETFORCECOST__INT_,RPC_GETBLADECOLOR__,RPC_SETBLADECOLOR__INT_,RPC_GETDAMAGETYPE__,RPC_GETXPTYPE__,RPC_GETWEAPONTYPE__,RPC_ISUNARMEDWEAPON__,RPC_ISMELEEWEAPON__,RPC_ISRANGEDWEAPON__,RPC_ISRIFLEWEAPON__,RPC_ISTHROWNWEAPON__,RPC_ISHEAVYWEAPON__,RPC_ISSPECIALHEAVYWEAPON__,RPC_ISLIGHTNINGRIFLE__,RPC_ISCARBINEWEAPON__,RPC_ISPISTOLWEAPON__,RPC_ISONEHANDMELEEWEAPON__,RPC_ISPOLEARMWEAPONOBJECT__,RPC_ISTWOHANDMELEEWEAPON__,RPC_ISMINEWEAPON__,RPC_ISJEDIWEAPON__,RPC_ISJEDIONEHANDEDWEAPON__,RPC_ISJEDITWOHANDEDWEAPON__,RPC_ISJEDIPOLEARMWEAPON__,RPC_ISWEAPONOBJECT__,RPC_HASPOWERUP__,RPC_APPLYPOWERUP__CREATUREOBJECT_POWERUPOBJECT_,RPC_REMOVEPOWERUP__,RPC_DECREASEPOWERUPUSES__CREATUREOBJECT_,RPC_REPAIRATTEMPT__INT_,RPC_DECAY__CREATUREOBJECT_FLOAT_,RPC_SETDAMAGESLICE__FLOAT_,RPC_SETSPEEDSLICE__FLOAT_};

WeaponObject::WeaponObject() : TangibleObject(DummyConstructorParameter::instance()) {
	WeaponObjectImplementation* _implementation = new WeaponObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("WeaponObject");
}

WeaponObject::WeaponObject(DummyConstructorParameter* param) : TangibleObject(param) {
	_setClassName("WeaponObject");
}

WeaponObject::~WeaponObject() {
}



void WeaponObject::loadTemplateData(SharedObjectTemplate* templateData) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->loadTemplateData(templateData);
}

void WeaponObject::initializeTransientMembers() {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void WeaponObject::sendBaselinesTo(SceneObject* player) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDBASELINESTO__SCENEOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendBaselinesTo(player);
}

void WeaponObject::sendContainerTo(CreatureObject* player) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDCONTAINERTO__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendContainerTo(player);
}

void WeaponObject::fillAttributeList(AttributeListMessage* msg, CreatureObject* object) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->fillAttributeList(msg, object);
}

void WeaponObject::updateCraftingValues(CraftingValues* values, bool firstUpdate) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->updateCraftingValues(values, firstUpdate);
}

void WeaponObject::createChildObjects() {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATECHILDOBJECTS__);

		method.executeWithVoidReturn();
	} else
		_implementation->createChildObjects();
}

bool WeaponObject::isCertifiedFor(CreatureObject* object) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCERTIFIEDFOR__CREATUREOBJECT_);
		method.addObjectParameter(object);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isCertifiedFor(object);
}

Vector<String>* WeaponObject::getDamageModifiers() {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getDamageModifiers();
}

Vector<String>* WeaponObject::getSpeedModifiers() {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getSpeedModifiers();
}

Vector<String>* WeaponObject::getCreatureAccuracyModifiers() {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getCreatureAccuracyModifiers();
}

Vector<String>* WeaponObject::getCreatureAimModifiers() {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getCreatureAimModifiers();
}

Vector<String>* WeaponObject::getDefenderDefenseModifiers() {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getDefenderDefenseModifiers();
}

Vector<String>* WeaponObject::getDefenderSecondaryDefenseModifiers() {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getDefenderSecondaryDefenseModifiers();
}

Vector<String>* WeaponObject::getDefenderToughnessModifiers() {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getDefenderToughnessModifiers();
}

void WeaponObject::setCertified(bool cert) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCERTIFIED__BOOL_);
		method.addBooleanParameter(cert);

		method.executeWithVoidReturn();
	} else
		_implementation->setCertified(cert);
}

int WeaponObject::getAttackType() {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETATTACKTYPE__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getAttackType();
}

void WeaponObject::setAttackType(int a) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETATTACKTYPE__INT_);
		method.addSignedIntParameter(a);

		method.executeWithVoidReturn();
	} else
		_implementation->setAttackType(a);
}

bool WeaponObject::isCertified() {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCERTIFIED__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isCertified();
}

int WeaponObject::getPointBlankAccuracy(bool withPup) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPOINTBLANKACCURACY__BOOL_);
		method.addBooleanParameter(withPup);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getPointBlankAccuracy(withPup);
}

void WeaponObject::setPointBlankAccuracy(int value) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPOINTBLANKACCURACY__INT_);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setPointBlankAccuracy(value);
}

int WeaponObject::getPointBlankRange(bool withPup) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPOINTBLANKRANGE__BOOL_);
		method.addBooleanParameter(withPup);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getPointBlankRange(withPup);
}

int WeaponObject::getIdealRange(bool withPup) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETIDEALRANGE__BOOL_);
		method.addBooleanParameter(withPup);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getIdealRange(withPup);
}

void WeaponObject::setIdealRange(int value) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETIDEALRANGE__INT_);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setIdealRange(value);
}

int WeaponObject::getMaxRange(bool withPup) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMAXRANGE__BOOL_);
		method.addBooleanParameter(withPup);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getMaxRange(withPup);
}

void WeaponObject::setMaxRange(int value) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMAXRANGE__INT_);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setMaxRange(value);
}

int WeaponObject::getIdealAccuracy(bool withPup) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETIDEALACCURACY__BOOL_);
		method.addBooleanParameter(withPup);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getIdealAccuracy(withPup);
}

void WeaponObject::setIdealAccuracy(int value) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETIDEALACCURACY__INT_);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setIdealAccuracy(value);
}

int WeaponObject::getArmorPiercing() {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETARMORPIERCING__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getArmorPiercing();
}

int WeaponObject::getMaxRangeAccuracy(bool withPup) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMAXRANGEACCURACY__BOOL_);
		method.addBooleanParameter(withPup);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getMaxRangeAccuracy(withPup);
}

void WeaponObject::setMaxRangeAccuracy(int value) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMAXRANGEACCURACY__INT_);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setMaxRangeAccuracy(value);
}

float WeaponObject::getAttackSpeed(bool withPup) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETATTACKSPEED__BOOL_);
		method.addBooleanParameter(withPup);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getAttackSpeed(withPup);
}

void WeaponObject::setAttackSpeed(float value) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETATTACKSPEED__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setAttackSpeed(value);
}

float WeaponObject::getMaxDamage(bool withPup) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMAXDAMAGE__BOOL_);
		method.addBooleanParameter(withPup);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getMaxDamage(withPup);
}

void WeaponObject::setMaxDamage(float value) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMAXDAMAGE__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setMaxDamage(value);
}

float WeaponObject::getMinDamage(bool withPup) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMINDAMAGE__BOOL_);
		method.addBooleanParameter(withPup);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getMinDamage(withPup);
}

void WeaponObject::setMinDamage(float value) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMINDAMAGE__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setMinDamage(value);
}

float WeaponObject::getWoundsRatio(bool withPup) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETWOUNDSRATIO__BOOL_);
		method.addBooleanParameter(withPup);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getWoundsRatio(withPup);
}

void WeaponObject::setWoundsRatio(float value) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETWOUNDSRATIO__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setWoundsRatio(value);
}

float WeaponObject::getDamageRadius(bool withPup) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDAMAGERADIUS__BOOL_);
		method.addBooleanParameter(withPup);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getDamageRadius(withPup);
}

void WeaponObject::setDamageRadius(float value) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETDAMAGERADIUS__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setDamageRadius(value);
}

int WeaponObject::getHealthAttackCost(bool withPup) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETHEALTHATTACKCOST__BOOL_);
		method.addBooleanParameter(withPup);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getHealthAttackCost(withPup);
}

void WeaponObject::setHealthAttackCost(int value) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETHEALTHATTACKCOST__INT_);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setHealthAttackCost(value);
}

int WeaponObject::getActionAttackCost(bool withPup) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETACTIONATTACKCOST__BOOL_);
		method.addBooleanParameter(withPup);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getActionAttackCost(withPup);
}

void WeaponObject::setActionAttackCost(int value) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETACTIONATTACKCOST__INT_);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setActionAttackCost(value);
}

int WeaponObject::getMindAttackCost(bool withPup) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMINDATTACKCOST__BOOL_);
		method.addBooleanParameter(withPup);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getMindAttackCost(withPup);
}

void WeaponObject::setMindAttackCost(int value) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMINDATTACKCOST__INT_);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setMindAttackCost(value);
}

int WeaponObject::getForceCost() {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFORCECOST__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getForceCost();
}

void WeaponObject::setForceCost(int value) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETFORCECOST__INT_);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setForceCost(value);
}

int WeaponObject::getBladeColor() {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETBLADECOLOR__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getBladeColor();
}

void WeaponObject::setBladeColor(int value) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETBLADECOLOR__INT_);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setBladeColor(value);
}

int WeaponObject::getDamageType() {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDAMAGETYPE__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getDamageType();
}

String WeaponObject::getXpType() {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETXPTYPE__);

		String _return_getXpType;
		method.executeWithAsciiReturn(_return_getXpType);
		return _return_getXpType;
	} else
		return _implementation->getXpType();
}

String WeaponObject::getWeaponType() {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETWEAPONTYPE__);

		String _return_getWeaponType;
		method.executeWithAsciiReturn(_return_getWeaponType);
		return _return_getWeaponType;
	} else
		return _implementation->getWeaponType();
}

bool WeaponObject::isUnarmedWeapon() {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISUNARMEDWEAPON__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isUnarmedWeapon();
}

bool WeaponObject::isMeleeWeapon() {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISMELEEWEAPON__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isMeleeWeapon();
}

bool WeaponObject::isRangedWeapon() {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISRANGEDWEAPON__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isRangedWeapon();
}

bool WeaponObject::isRifleWeapon() {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISRIFLEWEAPON__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isRifleWeapon();
}

bool WeaponObject::isThrownWeapon() {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISTHROWNWEAPON__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isThrownWeapon();
}

bool WeaponObject::isHeavyWeapon() {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISHEAVYWEAPON__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isHeavyWeapon();
}

bool WeaponObject::isSpecialHeavyWeapon() {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSPECIALHEAVYWEAPON__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isSpecialHeavyWeapon();
}

bool WeaponObject::isLightningRifle() {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISLIGHTNINGRIFLE__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isLightningRifle();
}

bool WeaponObject::isCarbineWeapon() {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCARBINEWEAPON__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isCarbineWeapon();
}

bool WeaponObject::isPistolWeapon() {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISPISTOLWEAPON__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isPistolWeapon();
}

bool WeaponObject::isOneHandMeleeWeapon() {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISONEHANDMELEEWEAPON__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isOneHandMeleeWeapon();
}

bool WeaponObject::isPolearmWeaponObject() {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISPOLEARMWEAPONOBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isPolearmWeaponObject();
}

bool WeaponObject::isTwoHandMeleeWeapon() {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISTWOHANDMELEEWEAPON__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isTwoHandMeleeWeapon();
}

bool WeaponObject::isMineWeapon() {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISMINEWEAPON__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isMineWeapon();
}

bool WeaponObject::isJediWeapon() {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISJEDIWEAPON__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isJediWeapon();
}

bool WeaponObject::isJediOneHandedWeapon() {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISJEDIONEHANDEDWEAPON__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isJediOneHandedWeapon();
}

bool WeaponObject::isJediTwoHandedWeapon() {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISJEDITWOHANDEDWEAPON__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isJediTwoHandedWeapon();
}

bool WeaponObject::isJediPolearmWeapon() {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISJEDIPOLEARMWEAPON__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isJediPolearmWeapon();
}

bool WeaponObject::isWeaponObject() {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISWEAPONOBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isWeaponObject();
}

bool WeaponObject::hasPowerup() {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASPOWERUP__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasPowerup();
}

void WeaponObject::applyPowerup(CreatureObject* player, PowerupObject* pup) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_APPLYPOWERUP__CREATUREOBJECT_POWERUPOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(pup);

		method.executeWithVoidReturn();
	} else
		_implementation->applyPowerup(player, pup);
}

PowerupObject* WeaponObject::removePowerup() {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEPOWERUP__);

		return static_cast<PowerupObject*>(method.executeWithObjectReturn());
	} else
		return _implementation->removePowerup();
}

void WeaponObject::decreasePowerupUses(CreatureObject* player) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DECREASEPOWERUPUSES__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->decreasePowerupUses(player);
}

String WeaponObject::repairAttempt(int repairChance) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REPAIRATTEMPT__INT_);
		method.addSignedIntParameter(repairChance);

		String _return_repairAttempt;
		method.executeWithAsciiReturn(_return_repairAttempt);
		return _return_repairAttempt;
	} else
		return _implementation->repairAttempt(repairChance);
}

void WeaponObject::decay(CreatureObject* user, float damage) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DECAY__CREATUREOBJECT_FLOAT_);
		method.addObjectParameter(user);
		method.addFloatParameter(damage);

		method.executeWithVoidReturn();
	} else
		_implementation->decay(user, damage);
}

void WeaponObject::setDamageSlice(float value) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETDAMAGESLICE__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setDamageSlice(value);
}

void WeaponObject::setSpeedSlice(float value) {
	WeaponObjectImplementation* _implementation = static_cast<WeaponObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSPEEDSLICE__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setSpeedSlice(value);
}

DistributedObjectServant* WeaponObject::_getImplementation() {

	_updated = true;
	return _impl;
}

void WeaponObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	WeaponObjectImplementation
 */

WeaponObjectImplementation::WeaponObjectImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
	_initializeImplementation();
}


WeaponObjectImplementation::~WeaponObjectImplementation() {
}


void WeaponObjectImplementation::finalize() {
}

void WeaponObjectImplementation::_initializeImplementation() {
	_setClassHelper(WeaponObjectHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void WeaponObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<WeaponObject*>(stub);
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* WeaponObjectImplementation::_getStub() {
	return _this.get();
}

WeaponObjectImplementation::operator const WeaponObject*() {
	return _this.get();
}

void WeaponObjectImplementation::lock(bool doLock) {
	_this.get()->lock(doLock);
}

void WeaponObjectImplementation::lock(ManagedObject* obj) {
	_this.get()->lock(obj);
}

void WeaponObjectImplementation::rlock(bool doLock) {
	_this.get()->rlock(doLock);
}

void WeaponObjectImplementation::wlock(bool doLock) {
	_this.get()->wlock(doLock);
}

void WeaponObjectImplementation::wlock(ManagedObject* obj) {
	_this.get()->wlock(obj);
}

void WeaponObjectImplementation::unlock(bool doLock) {
	_this.get()->unlock(doLock);
}

void WeaponObjectImplementation::runlock(bool doLock) {
	_this.get()->runlock(doLock);
}

void WeaponObjectImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("WeaponObject");

}

void WeaponObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(WeaponObjectImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool WeaponObjectImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (TangibleObjectImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "WeaponObject.attackType") {
		TypeInfo<int >::parseFromBinaryStream(&attackType, stream);
		return true;
	}

	if (_name == "WeaponObject.weaponEffect") {
		TypeInfo<String >::parseFromBinaryStream(&weaponEffect, stream);
		return true;
	}

	if (_name == "WeaponObject.weaponEffectIndex") {
		TypeInfo<int >::parseFromBinaryStream(&weaponEffectIndex, stream);
		return true;
	}

	if (_name == "WeaponObject.certified") {
		TypeInfo<bool >::parseFromBinaryStream(&certified, stream);
		return true;
	}

	if (_name == "WeaponObject.armorPiercing") {
		TypeInfo<int >::parseFromBinaryStream(&armorPiercing, stream);
		return true;
	}

	if (_name == "WeaponObject.pointBlankAccuracy") {
		TypeInfo<int >::parseFromBinaryStream(&pointBlankAccuracy, stream);
		return true;
	}

	if (_name == "WeaponObject.pointBlankRange") {
		TypeInfo<int >::parseFromBinaryStream(&pointBlankRange, stream);
		return true;
	}

	if (_name == "WeaponObject.idealRange") {
		TypeInfo<int >::parseFromBinaryStream(&idealRange, stream);
		return true;
	}

	if (_name == "WeaponObject.idealAccuracy") {
		TypeInfo<int >::parseFromBinaryStream(&idealAccuracy, stream);
		return true;
	}

	if (_name == "WeaponObject.maxRange") {
		TypeInfo<int >::parseFromBinaryStream(&maxRange, stream);
		return true;
	}

	if (_name == "WeaponObject.maxRangeAccuracy") {
		TypeInfo<int >::parseFromBinaryStream(&maxRangeAccuracy, stream);
		return true;
	}

	if (_name == "WeaponObject.damageType") {
		TypeInfo<int >::parseFromBinaryStream(&damageType, stream);
		return true;
	}

	if (_name == "WeaponObject.attackSpeed") {
		TypeInfo<float >::parseFromBinaryStream(&attackSpeed, stream);
		return true;
	}

	if (_name == "WeaponObject.minDamage") {
		TypeInfo<float >::parseFromBinaryStream(&minDamage, stream);
		return true;
	}

	if (_name == "WeaponObject.maxDamage") {
		TypeInfo<float >::parseFromBinaryStream(&maxDamage, stream);
		return true;
	}

	if (_name == "WeaponObject.damageRadius") {
		TypeInfo<float >::parseFromBinaryStream(&damageRadius, stream);
		return true;
	}

	if (_name == "WeaponObject.woundsRatio") {
		TypeInfo<float >::parseFromBinaryStream(&woundsRatio, stream);
		return true;
	}

	if (_name == "WeaponObject.healthAttackCost") {
		TypeInfo<int >::parseFromBinaryStream(&healthAttackCost, stream);
		return true;
	}

	if (_name == "WeaponObject.actionAttackCost") {
		TypeInfo<int >::parseFromBinaryStream(&actionAttackCost, stream);
		return true;
	}

	if (_name == "WeaponObject.mindAttackCost") {
		TypeInfo<int >::parseFromBinaryStream(&mindAttackCost, stream);
		return true;
	}

	if (_name == "WeaponObject.forceCost") {
		TypeInfo<int >::parseFromBinaryStream(&forceCost, stream);
		return true;
	}

	if (_name == "WeaponObject.bladeColor") {
		TypeInfo<int >::parseFromBinaryStream(&bladeColor, stream);
		return true;
	}

	if (_name == "WeaponObject.powerupObject") {
		TypeInfo<ManagedReference<PowerupObject* > >::parseFromBinaryStream(&powerupObject, stream);
		return true;
	}

	if (_name == "WeaponObject.damageSlice") {
		TypeInfo<float >::parseFromBinaryStream(&damageSlice, stream);
		return true;
	}

	if (_name == "WeaponObject.speedSlice") {
		TypeInfo<float >::parseFromBinaryStream(&speedSlice, stream);
		return true;
	}


	return false;
}

void WeaponObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = WeaponObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int WeaponObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = TangibleObjectImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;
	_name = "WeaponObject.attackType";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&attackType, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "WeaponObject.weaponEffect";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&weaponEffect, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "WeaponObject.weaponEffectIndex";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&weaponEffectIndex, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "WeaponObject.certified";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&certified, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "WeaponObject.armorPiercing";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&armorPiercing, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "WeaponObject.pointBlankAccuracy";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&pointBlankAccuracy, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "WeaponObject.pointBlankRange";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&pointBlankRange, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "WeaponObject.idealRange";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&idealRange, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "WeaponObject.idealAccuracy";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&idealAccuracy, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "WeaponObject.maxRange";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&maxRange, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "WeaponObject.maxRangeAccuracy";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&maxRangeAccuracy, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "WeaponObject.damageType";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&damageType, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "WeaponObject.attackSpeed";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&attackSpeed, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "WeaponObject.minDamage";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&minDamage, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "WeaponObject.maxDamage";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&maxDamage, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "WeaponObject.damageRadius";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&damageRadius, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "WeaponObject.woundsRatio";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&woundsRatio, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "WeaponObject.healthAttackCost";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&healthAttackCost, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "WeaponObject.actionAttackCost";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&actionAttackCost, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "WeaponObject.mindAttackCost";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&mindAttackCost, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "WeaponObject.forceCost";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&forceCost, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "WeaponObject.bladeColor";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&bladeColor, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "WeaponObject.powerupObject";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<PowerupObject* > >::toBinaryStream(&powerupObject, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "WeaponObject.damageSlice";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&damageSlice, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "WeaponObject.speedSlice";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&speedSlice, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 25;
}

WeaponObjectImplementation::WeaponObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		certified = false;
	certified = false;
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		armorPiercing = 0;
	armorPiercing = 0;
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		healthAttackCost = 0;
	healthAttackCost = 0;
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		actionAttackCost = 0;
	actionAttackCost = 0;
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		mindAttackCost = 0;
	mindAttackCost = 0;
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		forceCost = 0;
	forceCost = 0;
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		pointBlankAccuracy = 0;
	pointBlankAccuracy = 0;
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		pointBlankRange = 0;
	pointBlankRange = 0;
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		idealRange = 0;
	idealRange = 0;
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		idealAccuracy = 0;
	idealAccuracy = 0;
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		maxRange = 5;
	maxRange = 5;
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		maxRangeAccuracy = 0;
	maxRangeAccuracy = 0;
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		damageType = 0;
	damageType = 0;
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		minDamage = 1;
	minDamage = 1;
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		maxDamage = 10;
	maxDamage = 10;
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		woundsRatio = 0;
	woundsRatio = 0;
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		damageRadius = 0;
	damageRadius = 0;
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		attackSpeed = 1;
	attackSpeed = 1;
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		weaponTemplate = null;
	weaponTemplate = NULL;
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		Logger.setLoggingName("WeaponObject");
	Logger::setLoggingName("WeaponObject");
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		damageSlice = 1;
	damageSlice = 1;
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		speedSlice = 1;
	speedSlice = 1;
}

Vector<String>* WeaponObjectImplementation::getDamageModifiers() {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		return weaponTemplate.getDamageModifiers();
	return weaponTemplate->getDamageModifiers();
}

Vector<String>* WeaponObjectImplementation::getSpeedModifiers() {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		return weaponTemplate.getSpeedModifiers();
	return weaponTemplate->getSpeedModifiers();
}

Vector<String>* WeaponObjectImplementation::getCreatureAccuracyModifiers() {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		return weaponTemplate.getCreatureAccuracyModifiers();
	return weaponTemplate->getCreatureAccuracyModifiers();
}

Vector<String>* WeaponObjectImplementation::getCreatureAimModifiers() {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		return weaponTemplate.getCreatureAimModifiers();
	return weaponTemplate->getCreatureAimModifiers();
}

Vector<String>* WeaponObjectImplementation::getDefenderDefenseModifiers() {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		return weaponTemplate.getDefenderDefenseModifiers();
	return weaponTemplate->getDefenderDefenseModifiers();
}

Vector<String>* WeaponObjectImplementation::getDefenderSecondaryDefenseModifiers() {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		return weaponTemplate.getDefenderSecondaryDefenseModifiers();
	return weaponTemplate->getDefenderSecondaryDefenseModifiers();
}

Vector<String>* WeaponObjectImplementation::getDefenderToughnessModifiers() {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		return weaponTemplate.getDefenderToughnessModifiers();
	return weaponTemplate->getDefenderToughnessModifiers();
}

void WeaponObjectImplementation::setCertified(bool cert) {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		certified = cert;
	certified = cert;
}

int WeaponObjectImplementation::getAttackType() {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		return attackType;
	return attackType;
}

void WeaponObjectImplementation::setAttackType(int a) {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		attackType = a;
	attackType = a;
}

bool WeaponObjectImplementation::isCertified() {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		return certified;
	return certified;
}

void WeaponObjectImplementation::setPointBlankAccuracy(int value) {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		pointBlankAccuracy = value;
	pointBlankAccuracy = value;
}

void WeaponObjectImplementation::setIdealRange(int value) {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		idealRange = value;
	idealRange = value;
}

void WeaponObjectImplementation::setMaxRange(int value) {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		maxRange = value;
	maxRange = value;
}

void WeaponObjectImplementation::setIdealAccuracy(int value) {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		idealAccuracy = value;
	idealAccuracy = value;
}

int WeaponObjectImplementation::getArmorPiercing() {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		return armorPiercing;
	return armorPiercing;
}

void WeaponObjectImplementation::setMaxRangeAccuracy(int value) {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		maxRangeAccuracy = value;
	maxRangeAccuracy = value;
}

void WeaponObjectImplementation::setAttackSpeed(float value) {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		attackSpeed = value;
	attackSpeed = value;
}

void WeaponObjectImplementation::setMaxDamage(float value) {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		maxDamage = value;
	maxDamage = value;
}

void WeaponObjectImplementation::setMinDamage(float value) {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		minDamage = value;
	minDamage = value;
}

void WeaponObjectImplementation::setWoundsRatio(float value) {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		woundsRatio = value;
	woundsRatio = value;
}

void WeaponObjectImplementation::setDamageRadius(float value) {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		damageRadius = value;
	damageRadius = value;
}

void WeaponObjectImplementation::setHealthAttackCost(int value) {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		healthAttackCost = value;
	healthAttackCost = value;
}

void WeaponObjectImplementation::setActionAttackCost(int value) {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		actionAttackCost = value;
	actionAttackCost = value;
}

void WeaponObjectImplementation::setMindAttackCost(int value) {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		mindAttackCost = value;
	mindAttackCost = value;
}

int WeaponObjectImplementation::getForceCost() {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		return forceCost;
	return forceCost;
}

void WeaponObjectImplementation::setForceCost(int value) {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		forceCost = value;
	forceCost = value;
}

int WeaponObjectImplementation::getBladeColor() {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		return bladeColor;
	return bladeColor;
}

void WeaponObjectImplementation::setBladeColor(int value) {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		bladeColor = value;
	bladeColor = value;
}

int WeaponObjectImplementation::getDamageType() {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		return damageType;
	return damageType;
}

String WeaponObjectImplementation::getXpType() {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		return weaponTemplate.getXpType();
	return weaponTemplate->getXpType();
}

bool WeaponObjectImplementation::isUnarmedWeapon() {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		return super.gameObjectType == SceneObjectType.WEAPON || super.gameObjectType == SceneObjectType.MELEEWEAPON;
	return TangibleObjectImplementation::gameObjectType == SceneObjectType::WEAPON || TangibleObjectImplementation::gameObjectType == SceneObjectType::MELEEWEAPON;
}

bool WeaponObjectImplementation::isMeleeWeapon() {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		return attackType == MELEEATTACK;
	return attackType == MELEEATTACK;
}

bool WeaponObjectImplementation::isRangedWeapon() {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		return attackType == RANGEDATTACK;
	return attackType == RANGEDATTACK;
}

bool WeaponObjectImplementation::isRifleWeapon() {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		return super.gameObjectType == SceneObjectType.RIFLE;
	return TangibleObjectImplementation::gameObjectType == SceneObjectType::RIFLE;
}

bool WeaponObjectImplementation::isThrownWeapon() {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		return super.gameObjectType == SceneObjectType.THROWNWEAPON;
	return TangibleObjectImplementation::gameObjectType == SceneObjectType::THROWNWEAPON;
}

bool WeaponObjectImplementation::isHeavyWeapon() {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		return super.gameObjectType == SceneObjectType.HEAVYWEAPON;
	return TangibleObjectImplementation::gameObjectType == SceneObjectType::HEAVYWEAPON;
}

bool WeaponObjectImplementation::isSpecialHeavyWeapon() {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		return super.gameObjectType == SceneObjectType.SPECIALHEAVYWEAPON;
	return TangibleObjectImplementation::gameObjectType == SceneObjectType::SPECIALHEAVYWEAPON;
}

bool WeaponObjectImplementation::isLightningRifle() {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		return weaponTemplate.getServerObjectCRC() == 397924793;
	return weaponTemplate->getServerObjectCRC() == 397924793;
}

bool WeaponObjectImplementation::isCarbineWeapon() {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		return super.gameObjectType == SceneObjectType.CARBINE;
	return TangibleObjectImplementation::gameObjectType == SceneObjectType::CARBINE;
}

bool WeaponObjectImplementation::isPistolWeapon() {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		return super.gameObjectType == SceneObjectType.PISTOL;
	return TangibleObjectImplementation::gameObjectType == SceneObjectType::PISTOL;
}

bool WeaponObjectImplementation::isOneHandMeleeWeapon() {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		return super.gameObjectType == SceneObjectType.ONEHANDMELEEWEAPON;
	return TangibleObjectImplementation::gameObjectType == SceneObjectType::ONEHANDMELEEWEAPON;
}

bool WeaponObjectImplementation::isPolearmWeaponObject() {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		return super.gameObjectType == SceneObjectType.POLEARM;
	return TangibleObjectImplementation::gameObjectType == SceneObjectType::POLEARM;
}

bool WeaponObjectImplementation::isTwoHandMeleeWeapon() {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		return super.gameObjectType == SceneObjectType.TWOHANDMELEEWEAPON;
	return TangibleObjectImplementation::gameObjectType == SceneObjectType::TWOHANDMELEEWEAPON;
}

bool WeaponObjectImplementation::isMineWeapon() {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		return super.gameObjectType == SceneObjectType.MINE;
	return TangibleObjectImplementation::gameObjectType == SceneObjectType::MINE;
}

bool WeaponObjectImplementation::isJediWeapon() {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		return isJediOneHandedWeapon() || isJediTwoHandedWeapon() || isJediPolearmWeapon();
	return isJediOneHandedWeapon() || isJediTwoHandedWeapon() || isJediPolearmWeapon();
}

bool WeaponObjectImplementation::isJediOneHandedWeapon() {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		return weaponTemplate.isDerivedFrom("object/weapon/melee/sword/base/shared_crafted_lightsaber_base.iff");
	return weaponTemplate->isDerivedFrom("object/weapon/melee/sword/base/shared_crafted_lightsaber_base.iff");
}

bool WeaponObjectImplementation::isJediTwoHandedWeapon() {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		return weaponTemplate.isDerivedFrom("object/weapon/melee/2h_sword/base/shared_crafted_lightsaber_base.iff");
	return weaponTemplate->isDerivedFrom("object/weapon/melee/2h_sword/base/shared_crafted_lightsaber_base.iff");
}

bool WeaponObjectImplementation::isJediPolearmWeapon() {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		return weaponTemplate.isDerivedFrom("object/weapon/melee/polearm/base/shared_crafted_lance_lightsaber_base.iff");
	return weaponTemplate->isDerivedFrom("object/weapon/melee/polearm/base/shared_crafted_lance_lightsaber_base.iff");
}

bool WeaponObjectImplementation::isWeaponObject() {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		return true;
	return true;
}

bool WeaponObjectImplementation::hasPowerup() {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		return powerupObject != null;
	return powerupObject != NULL;
}

void WeaponObjectImplementation::applyPowerup(CreatureObject* player, PowerupObject* pup) {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  	}
	if (!hasPowerup()){
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  			powerupObject = pup;
	powerupObject = pup;
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  			sendAttributeListTo(
	if (pup->getParent() != NULL)	// server/zone/objects/tangible/weapon/WeaponObject.idl():  				pup.destroyObjectFromWorld(true);
	pup->destroyObjectFromWorld(true);
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  			sendAttributeListTo(player);
	sendAttributeListTo(player);
}
}

PowerupObject* WeaponObjectImplementation::removePowerup() {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		return 
	if (hasPowerup()){
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  			PowerupObject pup = powerupObject;
	ManagedReference<PowerupObject* > pup = powerupObject;
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  			powerupObject = null;
	powerupObject = NULL;
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  			return pup;
	return pup;
}
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		return null;
	return NULL;
}

void WeaponObjectImplementation::setDamageSlice(float value) {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		damageSlice 
	if (value > 0.5f || value < 0)	// server/zone/objects/tangible/weapon/WeaponObject.idl():  			return;
	return;
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		damageSlice = 1 + value;
	damageSlice = 1 + value;
}

void WeaponObjectImplementation::setSpeedSlice(float value) {
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		speedSlice 
	if (value > 0.5f || value < 0)	// server/zone/objects/tangible/weapon/WeaponObject.idl():  			return;
	return;
	// server/zone/objects/tangible/weapon/WeaponObject.idl():  		speedSlice = 1 - value;
	speedSlice = 1 - value;
}

/*
 *	WeaponObjectAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


WeaponObjectAdapter::WeaponObjectAdapter(WeaponObject* obj) : TangibleObjectAdapter(obj) {
}

void WeaponObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			initializeTransientMembers();
		}
		break;
	case RPC_SENDBASELINESTO__SCENEOBJECT_:
		{
			sendBaselinesTo(static_cast<SceneObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_SENDCONTAINERTO__CREATUREOBJECT_:
		{
			sendContainerTo(static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_CREATECHILDOBJECTS__:
		{
			createChildObjects();
		}
		break;
	case RPC_ISCERTIFIEDFOR__CREATUREOBJECT_:
		{
			resp->insertBoolean(isCertifiedFor(static_cast<CreatureObject*>(inv->getObjectParameter())));
		}
		break;
	case RPC_SETCERTIFIED__BOOL_:
		{
			setCertified(inv->getBooleanParameter());
		}
		break;
	case RPC_GETATTACKTYPE__:
		{
			resp->insertSignedInt(getAttackType());
		}
		break;
	case RPC_SETATTACKTYPE__INT_:
		{
			setAttackType(inv->getSignedIntParameter());
		}
		break;
	case RPC_ISCERTIFIED__:
		{
			resp->insertBoolean(isCertified());
		}
		break;
	case RPC_GETPOINTBLANKACCURACY__BOOL_:
		{
			resp->insertSignedInt(getPointBlankAccuracy(inv->getBooleanParameter()));
		}
		break;
	case RPC_SETPOINTBLANKACCURACY__INT_:
		{
			setPointBlankAccuracy(inv->getSignedIntParameter());
		}
		break;
	case RPC_GETPOINTBLANKRANGE__BOOL_:
		{
			resp->insertSignedInt(getPointBlankRange(inv->getBooleanParameter()));
		}
		break;
	case RPC_GETIDEALRANGE__BOOL_:
		{
			resp->insertSignedInt(getIdealRange(inv->getBooleanParameter()));
		}
		break;
	case RPC_SETIDEALRANGE__INT_:
		{
			setIdealRange(inv->getSignedIntParameter());
		}
		break;
	case RPC_GETMAXRANGE__BOOL_:
		{
			resp->insertSignedInt(getMaxRange(inv->getBooleanParameter()));
		}
		break;
	case RPC_SETMAXRANGE__INT_:
		{
			setMaxRange(inv->getSignedIntParameter());
		}
		break;
	case RPC_GETIDEALACCURACY__BOOL_:
		{
			resp->insertSignedInt(getIdealAccuracy(inv->getBooleanParameter()));
		}
		break;
	case RPC_SETIDEALACCURACY__INT_:
		{
			setIdealAccuracy(inv->getSignedIntParameter());
		}
		break;
	case RPC_GETARMORPIERCING__:
		{
			resp->insertSignedInt(getArmorPiercing());
		}
		break;
	case RPC_GETMAXRANGEACCURACY__BOOL_:
		{
			resp->insertSignedInt(getMaxRangeAccuracy(inv->getBooleanParameter()));
		}
		break;
	case RPC_SETMAXRANGEACCURACY__INT_:
		{
			setMaxRangeAccuracy(inv->getSignedIntParameter());
		}
		break;
	case RPC_GETATTACKSPEED__BOOL_:
		{
			resp->insertFloat(getAttackSpeed(inv->getBooleanParameter()));
		}
		break;
	case RPC_SETATTACKSPEED__FLOAT_:
		{
			setAttackSpeed(inv->getFloatParameter());
		}
		break;
	case RPC_GETMAXDAMAGE__BOOL_:
		{
			resp->insertFloat(getMaxDamage(inv->getBooleanParameter()));
		}
		break;
	case RPC_SETMAXDAMAGE__FLOAT_:
		{
			setMaxDamage(inv->getFloatParameter());
		}
		break;
	case RPC_GETMINDAMAGE__BOOL_:
		{
			resp->insertFloat(getMinDamage(inv->getBooleanParameter()));
		}
		break;
	case RPC_SETMINDAMAGE__FLOAT_:
		{
			setMinDamage(inv->getFloatParameter());
		}
		break;
	case RPC_GETWOUNDSRATIO__BOOL_:
		{
			resp->insertFloat(getWoundsRatio(inv->getBooleanParameter()));
		}
		break;
	case RPC_SETWOUNDSRATIO__FLOAT_:
		{
			setWoundsRatio(inv->getFloatParameter());
		}
		break;
	case RPC_GETDAMAGERADIUS__BOOL_:
		{
			resp->insertFloat(getDamageRadius(inv->getBooleanParameter()));
		}
		break;
	case RPC_SETDAMAGERADIUS__FLOAT_:
		{
			setDamageRadius(inv->getFloatParameter());
		}
		break;
	case RPC_GETHEALTHATTACKCOST__BOOL_:
		{
			resp->insertSignedInt(getHealthAttackCost(inv->getBooleanParameter()));
		}
		break;
	case RPC_SETHEALTHATTACKCOST__INT_:
		{
			setHealthAttackCost(inv->getSignedIntParameter());
		}
		break;
	case RPC_GETACTIONATTACKCOST__BOOL_:
		{
			resp->insertSignedInt(getActionAttackCost(inv->getBooleanParameter()));
		}
		break;
	case RPC_SETACTIONATTACKCOST__INT_:
		{
			setActionAttackCost(inv->getSignedIntParameter());
		}
		break;
	case RPC_GETMINDATTACKCOST__BOOL_:
		{
			resp->insertSignedInt(getMindAttackCost(inv->getBooleanParameter()));
		}
		break;
	case RPC_SETMINDATTACKCOST__INT_:
		{
			setMindAttackCost(inv->getSignedIntParameter());
		}
		break;
	case RPC_GETFORCECOST__:
		{
			resp->insertSignedInt(getForceCost());
		}
		break;
	case RPC_SETFORCECOST__INT_:
		{
			setForceCost(inv->getSignedIntParameter());
		}
		break;
	case RPC_GETBLADECOLOR__:
		{
			resp->insertSignedInt(getBladeColor());
		}
		break;
	case RPC_SETBLADECOLOR__INT_:
		{
			setBladeColor(inv->getSignedIntParameter());
		}
		break;
	case RPC_GETDAMAGETYPE__:
		{
			resp->insertSignedInt(getDamageType());
		}
		break;
	case RPC_GETXPTYPE__:
		{
			resp->insertAscii(getXpType());
		}
		break;
	case RPC_GETWEAPONTYPE__:
		{
			resp->insertAscii(getWeaponType());
		}
		break;
	case RPC_ISUNARMEDWEAPON__:
		{
			resp->insertBoolean(isUnarmedWeapon());
		}
		break;
	case RPC_ISMELEEWEAPON__:
		{
			resp->insertBoolean(isMeleeWeapon());
		}
		break;
	case RPC_ISRANGEDWEAPON__:
		{
			resp->insertBoolean(isRangedWeapon());
		}
		break;
	case RPC_ISRIFLEWEAPON__:
		{
			resp->insertBoolean(isRifleWeapon());
		}
		break;
	case RPC_ISTHROWNWEAPON__:
		{
			resp->insertBoolean(isThrownWeapon());
		}
		break;
	case RPC_ISHEAVYWEAPON__:
		{
			resp->insertBoolean(isHeavyWeapon());
		}
		break;
	case RPC_ISSPECIALHEAVYWEAPON__:
		{
			resp->insertBoolean(isSpecialHeavyWeapon());
		}
		break;
	case RPC_ISLIGHTNINGRIFLE__:
		{
			resp->insertBoolean(isLightningRifle());
		}
		break;
	case RPC_ISCARBINEWEAPON__:
		{
			resp->insertBoolean(isCarbineWeapon());
		}
		break;
	case RPC_ISPISTOLWEAPON__:
		{
			resp->insertBoolean(isPistolWeapon());
		}
		break;
	case RPC_ISONEHANDMELEEWEAPON__:
		{
			resp->insertBoolean(isOneHandMeleeWeapon());
		}
		break;
	case RPC_ISPOLEARMWEAPONOBJECT__:
		{
			resp->insertBoolean(isPolearmWeaponObject());
		}
		break;
	case RPC_ISTWOHANDMELEEWEAPON__:
		{
			resp->insertBoolean(isTwoHandMeleeWeapon());
		}
		break;
	case RPC_ISMINEWEAPON__:
		{
			resp->insertBoolean(isMineWeapon());
		}
		break;
	case RPC_ISJEDIWEAPON__:
		{
			resp->insertBoolean(isJediWeapon());
		}
		break;
	case RPC_ISJEDIONEHANDEDWEAPON__:
		{
			resp->insertBoolean(isJediOneHandedWeapon());
		}
		break;
	case RPC_ISJEDITWOHANDEDWEAPON__:
		{
			resp->insertBoolean(isJediTwoHandedWeapon());
		}
		break;
	case RPC_ISJEDIPOLEARMWEAPON__:
		{
			resp->insertBoolean(isJediPolearmWeapon());
		}
		break;
	case RPC_ISWEAPONOBJECT__:
		{
			resp->insertBoolean(isWeaponObject());
		}
		break;
	case RPC_HASPOWERUP__:
		{
			resp->insertBoolean(hasPowerup());
		}
		break;
	case RPC_APPLYPOWERUP__CREATUREOBJECT_POWERUPOBJECT_:
		{
			applyPowerup(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<PowerupObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_REMOVEPOWERUP__:
		{
			resp->insertLong(removePowerup()->_getObjectID());
		}
		break;
	case RPC_DECREASEPOWERUPUSES__CREATUREOBJECT_:
		{
			decreasePowerupUses(static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_REPAIRATTEMPT__INT_:
		{
			resp->insertAscii(repairAttempt(inv->getSignedIntParameter()));
		}
		break;
	case RPC_DECAY__CREATUREOBJECT_FLOAT_:
		{
			decay(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getFloatParameter());
		}
		break;
	case RPC_SETDAMAGESLICE__FLOAT_:
		{
			setDamageSlice(inv->getFloatParameter());
		}
		break;
	case RPC_SETSPEEDSLICE__FLOAT_:
		{
			setSpeedSlice(inv->getFloatParameter());
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void WeaponObjectAdapter::initializeTransientMembers() {
	(static_cast<WeaponObject*>(stub))->initializeTransientMembers();
}

void WeaponObjectAdapter::sendBaselinesTo(SceneObject* player) {
	(static_cast<WeaponObject*>(stub))->sendBaselinesTo(player);
}

void WeaponObjectAdapter::sendContainerTo(CreatureObject* player) {
	(static_cast<WeaponObject*>(stub))->sendContainerTo(player);
}

void WeaponObjectAdapter::createChildObjects() {
	(static_cast<WeaponObject*>(stub))->createChildObjects();
}

bool WeaponObjectAdapter::isCertifiedFor(CreatureObject* object) {
	return (static_cast<WeaponObject*>(stub))->isCertifiedFor(object);
}

void WeaponObjectAdapter::setCertified(bool cert) {
	(static_cast<WeaponObject*>(stub))->setCertified(cert);
}

int WeaponObjectAdapter::getAttackType() {
	return (static_cast<WeaponObject*>(stub))->getAttackType();
}

void WeaponObjectAdapter::setAttackType(int a) {
	(static_cast<WeaponObject*>(stub))->setAttackType(a);
}

bool WeaponObjectAdapter::isCertified() {
	return (static_cast<WeaponObject*>(stub))->isCertified();
}

int WeaponObjectAdapter::getPointBlankAccuracy(bool withPup) {
	return (static_cast<WeaponObject*>(stub))->getPointBlankAccuracy(withPup);
}

void WeaponObjectAdapter::setPointBlankAccuracy(int value) {
	(static_cast<WeaponObject*>(stub))->setPointBlankAccuracy(value);
}

int WeaponObjectAdapter::getPointBlankRange(bool withPup) {
	return (static_cast<WeaponObject*>(stub))->getPointBlankRange(withPup);
}

int WeaponObjectAdapter::getIdealRange(bool withPup) {
	return (static_cast<WeaponObject*>(stub))->getIdealRange(withPup);
}

void WeaponObjectAdapter::setIdealRange(int value) {
	(static_cast<WeaponObject*>(stub))->setIdealRange(value);
}

int WeaponObjectAdapter::getMaxRange(bool withPup) {
	return (static_cast<WeaponObject*>(stub))->getMaxRange(withPup);
}

void WeaponObjectAdapter::setMaxRange(int value) {
	(static_cast<WeaponObject*>(stub))->setMaxRange(value);
}

int WeaponObjectAdapter::getIdealAccuracy(bool withPup) {
	return (static_cast<WeaponObject*>(stub))->getIdealAccuracy(withPup);
}

void WeaponObjectAdapter::setIdealAccuracy(int value) {
	(static_cast<WeaponObject*>(stub))->setIdealAccuracy(value);
}

int WeaponObjectAdapter::getArmorPiercing() {
	return (static_cast<WeaponObject*>(stub))->getArmorPiercing();
}

int WeaponObjectAdapter::getMaxRangeAccuracy(bool withPup) {
	return (static_cast<WeaponObject*>(stub))->getMaxRangeAccuracy(withPup);
}

void WeaponObjectAdapter::setMaxRangeAccuracy(int value) {
	(static_cast<WeaponObject*>(stub))->setMaxRangeAccuracy(value);
}

float WeaponObjectAdapter::getAttackSpeed(bool withPup) {
	return (static_cast<WeaponObject*>(stub))->getAttackSpeed(withPup);
}

void WeaponObjectAdapter::setAttackSpeed(float value) {
	(static_cast<WeaponObject*>(stub))->setAttackSpeed(value);
}

float WeaponObjectAdapter::getMaxDamage(bool withPup) {
	return (static_cast<WeaponObject*>(stub))->getMaxDamage(withPup);
}

void WeaponObjectAdapter::setMaxDamage(float value) {
	(static_cast<WeaponObject*>(stub))->setMaxDamage(value);
}

float WeaponObjectAdapter::getMinDamage(bool withPup) {
	return (static_cast<WeaponObject*>(stub))->getMinDamage(withPup);
}

void WeaponObjectAdapter::setMinDamage(float value) {
	(static_cast<WeaponObject*>(stub))->setMinDamage(value);
}

float WeaponObjectAdapter::getWoundsRatio(bool withPup) {
	return (static_cast<WeaponObject*>(stub))->getWoundsRatio(withPup);
}

void WeaponObjectAdapter::setWoundsRatio(float value) {
	(static_cast<WeaponObject*>(stub))->setWoundsRatio(value);
}

float WeaponObjectAdapter::getDamageRadius(bool withPup) {
	return (static_cast<WeaponObject*>(stub))->getDamageRadius(withPup);
}

void WeaponObjectAdapter::setDamageRadius(float value) {
	(static_cast<WeaponObject*>(stub))->setDamageRadius(value);
}

int WeaponObjectAdapter::getHealthAttackCost(bool withPup) {
	return (static_cast<WeaponObject*>(stub))->getHealthAttackCost(withPup);
}

void WeaponObjectAdapter::setHealthAttackCost(int value) {
	(static_cast<WeaponObject*>(stub))->setHealthAttackCost(value);
}

int WeaponObjectAdapter::getActionAttackCost(bool withPup) {
	return (static_cast<WeaponObject*>(stub))->getActionAttackCost(withPup);
}

void WeaponObjectAdapter::setActionAttackCost(int value) {
	(static_cast<WeaponObject*>(stub))->setActionAttackCost(value);
}

int WeaponObjectAdapter::getMindAttackCost(bool withPup) {
	return (static_cast<WeaponObject*>(stub))->getMindAttackCost(withPup);
}

void WeaponObjectAdapter::setMindAttackCost(int value) {
	(static_cast<WeaponObject*>(stub))->setMindAttackCost(value);
}

int WeaponObjectAdapter::getForceCost() {
	return (static_cast<WeaponObject*>(stub))->getForceCost();
}

void WeaponObjectAdapter::setForceCost(int value) {
	(static_cast<WeaponObject*>(stub))->setForceCost(value);
}

int WeaponObjectAdapter::getBladeColor() {
	return (static_cast<WeaponObject*>(stub))->getBladeColor();
}

void WeaponObjectAdapter::setBladeColor(int value) {
	(static_cast<WeaponObject*>(stub))->setBladeColor(value);
}

int WeaponObjectAdapter::getDamageType() {
	return (static_cast<WeaponObject*>(stub))->getDamageType();
}

String WeaponObjectAdapter::getXpType() {
	return (static_cast<WeaponObject*>(stub))->getXpType();
}

String WeaponObjectAdapter::getWeaponType() {
	return (static_cast<WeaponObject*>(stub))->getWeaponType();
}

bool WeaponObjectAdapter::isUnarmedWeapon() {
	return (static_cast<WeaponObject*>(stub))->isUnarmedWeapon();
}

bool WeaponObjectAdapter::isMeleeWeapon() {
	return (static_cast<WeaponObject*>(stub))->isMeleeWeapon();
}

bool WeaponObjectAdapter::isRangedWeapon() {
	return (static_cast<WeaponObject*>(stub))->isRangedWeapon();
}

bool WeaponObjectAdapter::isRifleWeapon() {
	return (static_cast<WeaponObject*>(stub))->isRifleWeapon();
}

bool WeaponObjectAdapter::isThrownWeapon() {
	return (static_cast<WeaponObject*>(stub))->isThrownWeapon();
}

bool WeaponObjectAdapter::isHeavyWeapon() {
	return (static_cast<WeaponObject*>(stub))->isHeavyWeapon();
}

bool WeaponObjectAdapter::isSpecialHeavyWeapon() {
	return (static_cast<WeaponObject*>(stub))->isSpecialHeavyWeapon();
}

bool WeaponObjectAdapter::isLightningRifle() {
	return (static_cast<WeaponObject*>(stub))->isLightningRifle();
}

bool WeaponObjectAdapter::isCarbineWeapon() {
	return (static_cast<WeaponObject*>(stub))->isCarbineWeapon();
}

bool WeaponObjectAdapter::isPistolWeapon() {
	return (static_cast<WeaponObject*>(stub))->isPistolWeapon();
}

bool WeaponObjectAdapter::isOneHandMeleeWeapon() {
	return (static_cast<WeaponObject*>(stub))->isOneHandMeleeWeapon();
}

bool WeaponObjectAdapter::isPolearmWeaponObject() {
	return (static_cast<WeaponObject*>(stub))->isPolearmWeaponObject();
}

bool WeaponObjectAdapter::isTwoHandMeleeWeapon() {
	return (static_cast<WeaponObject*>(stub))->isTwoHandMeleeWeapon();
}

bool WeaponObjectAdapter::isMineWeapon() {
	return (static_cast<WeaponObject*>(stub))->isMineWeapon();
}

bool WeaponObjectAdapter::isJediWeapon() {
	return (static_cast<WeaponObject*>(stub))->isJediWeapon();
}

bool WeaponObjectAdapter::isJediOneHandedWeapon() {
	return (static_cast<WeaponObject*>(stub))->isJediOneHandedWeapon();
}

bool WeaponObjectAdapter::isJediTwoHandedWeapon() {
	return (static_cast<WeaponObject*>(stub))->isJediTwoHandedWeapon();
}

bool WeaponObjectAdapter::isJediPolearmWeapon() {
	return (static_cast<WeaponObject*>(stub))->isJediPolearmWeapon();
}

bool WeaponObjectAdapter::isWeaponObject() {
	return (static_cast<WeaponObject*>(stub))->isWeaponObject();
}

bool WeaponObjectAdapter::hasPowerup() {
	return (static_cast<WeaponObject*>(stub))->hasPowerup();
}

void WeaponObjectAdapter::applyPowerup(CreatureObject* player, PowerupObject* pup) {
	(static_cast<WeaponObject*>(stub))->applyPowerup(player, pup);
}

PowerupObject* WeaponObjectAdapter::removePowerup() {
	return (static_cast<WeaponObject*>(stub))->removePowerup();
}

void WeaponObjectAdapter::decreasePowerupUses(CreatureObject* player) {
	(static_cast<WeaponObject*>(stub))->decreasePowerupUses(player);
}

String WeaponObjectAdapter::repairAttempt(int repairChance) {
	return (static_cast<WeaponObject*>(stub))->repairAttempt(repairChance);
}

void WeaponObjectAdapter::decay(CreatureObject* user, float damage) {
	(static_cast<WeaponObject*>(stub))->decay(user, damage);
}

void WeaponObjectAdapter::setDamageSlice(float value) {
	(static_cast<WeaponObject*>(stub))->setDamageSlice(value);
}

void WeaponObjectAdapter::setSpeedSlice(float value) {
	(static_cast<WeaponObject*>(stub))->setSpeedSlice(value);
}

/*
 *	WeaponObjectHelper
 */

WeaponObjectHelper* WeaponObjectHelper::staticInitializer = WeaponObjectHelper::instance();

WeaponObjectHelper::WeaponObjectHelper() {
	className = "WeaponObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void WeaponObjectHelper::finalizeHelper() {
	WeaponObjectHelper::finalize();
}

DistributedObject* WeaponObjectHelper::instantiateObject() {
	return new WeaponObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* WeaponObjectHelper::instantiateServant() {
	return new WeaponObjectImplementation();
}

DistributedObjectAdapter* WeaponObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new WeaponObjectAdapter(static_cast<WeaponObject*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

