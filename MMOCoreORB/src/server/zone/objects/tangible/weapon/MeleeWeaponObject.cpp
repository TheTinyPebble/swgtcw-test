/*
 *	server/zone/objects/tangible/weapon/MeleeWeaponObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "MeleeWeaponObject.h"

#include "server/zone/Zone.h"


// Imported class dependencies

#include "server/zone/managers/planet/PlanetManager.h"

#include "system/util/VectorMap.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/ZoneServer.h"

#include "engine/util/Quaternion.h"

#include "server/zone/objects/scene/variables/CustomizationVariables.h"

#include "server/zone/objects/scene/ObserverEventMap.h"

#include "server/zone/managers/planet/HeightMap.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

#include "system/lang/Time.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "server/zone/Zone.h"

#include "server/zone/ZoneProcessServer.h"

#include "server/zone/objects/area/ActiveArea.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/objects/scene/variables/StringId.h"

#include "server/zone/managers/creature/CreatureManager.h"

#include "server/zone/managers/planet/MapLocationTable.h"

#include "system/util/Vector.h"

#include "system/util/SortedVector.h"

#include "server/zone/templates/tangible/SharedWeaponObjectTemplate.h"

#include "server/zone/managers/object/ObjectMap.h"

#include "server/zone/objects/scene/variables/DeltaVector.h"

/*
 *	MeleeWeaponObjectStub
 */

MeleeWeaponObject::MeleeWeaponObject() : WeaponObject(DummyConstructorParameter::instance()) {
	MeleeWeaponObjectImplementation* _implementation = new MeleeWeaponObjectImplementation();
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

MeleeWeaponObject::MeleeWeaponObject(DummyConstructorParameter* param) : WeaponObject(param) {
}

MeleeWeaponObject::~MeleeWeaponObject() {
}


void MeleeWeaponObject::initializePrivateData() {
	MeleeWeaponObjectImplementation* _implementation = (MeleeWeaponObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		_implementation->initializePrivateData();
}

void MeleeWeaponObject::initializeTransientMembers() {
	MeleeWeaponObjectImplementation* _implementation = (MeleeWeaponObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

bool MeleeWeaponObject::isMeleeWeapon() {
	MeleeWeaponObjectImplementation* _implementation = (MeleeWeaponObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isMeleeWeapon();
}

DistributedObjectServant* MeleeWeaponObject::_getImplementation() {
	return getForUpdate();}

void MeleeWeaponObject::_setImplementation(DistributedObjectServant* servant) {
	setObject((ManagedObjectImplementation*) servant);}

/*
 *	MeleeWeaponObjectImplementation
 */

MeleeWeaponObjectImplementation::MeleeWeaponObjectImplementation(DummyConstructorParameter* param) : WeaponObjectImplementation(param) {
	_initializeImplementation();
}


MeleeWeaponObjectImplementation::~MeleeWeaponObjectImplementation() {
}


void MeleeWeaponObjectImplementation::finalize() {
}

void MeleeWeaponObjectImplementation::_initializeImplementation() {
	_setClassHelper(MeleeWeaponObjectHelper::instance());

	_serializationHelperMethod();
}

void MeleeWeaponObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (MeleeWeaponObject*) stub;
	WeaponObjectImplementation::_setStub(stub);
}

DistributedObjectStub* MeleeWeaponObjectImplementation::_getStub() {
	return _this;
}

MeleeWeaponObjectImplementation::operator const MeleeWeaponObject*() {
	return _this;
}

TransactionalObject* MeleeWeaponObjectImplementation::clone() {
	return (TransactionalObject*) new MeleeWeaponObjectImplementation(*this);
}


void MeleeWeaponObjectImplementation::lock(bool doLock) {
}

void MeleeWeaponObjectImplementation::lock(ManagedObject* obj) {
}

void MeleeWeaponObjectImplementation::rlock(bool doLock) {
}

void MeleeWeaponObjectImplementation::wlock(bool doLock) {
}

void MeleeWeaponObjectImplementation::wlock(ManagedObject* obj) {
}

void MeleeWeaponObjectImplementation::unlock(bool doLock) {
}

void MeleeWeaponObjectImplementation::runlock(bool doLock) {
}

void MeleeWeaponObjectImplementation::_serializationHelperMethod() {
	WeaponObjectImplementation::_serializationHelperMethod();

	_setClassName("MeleeWeaponObject");

}

MeleeWeaponObjectImplementation::MeleeWeaponObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/weapon/MeleeWeaponObject.idl(54):  		Logger.setLoggingName("MeleeWeaponObject");
	Logger::setLoggingName("MeleeWeaponObject");
	// server/zone/objects/tangible/weapon/MeleeWeaponObject.idl(56):  		initializePrivateData();
	initializePrivateData();
}

void MeleeWeaponObjectImplementation::initializePrivateData() {
	// server/zone/objects/tangible/weapon/MeleeWeaponObject.idl(60):  		super.maxRange = 5;
	WeaponObjectImplementation::maxRange = 5;
}

bool MeleeWeaponObjectImplementation::isMeleeWeapon() {
	// server/zone/objects/tangible/weapon/MeleeWeaponObject.idl(66):  		return true;
	return true;
}

/*
 *	MeleeWeaponObjectAdapter
 */

MeleeWeaponObjectAdapter::MeleeWeaponObjectAdapter(MeleeWeaponObjectImplementation* obj) : WeaponObjectAdapter(obj) {
}

Packet* MeleeWeaponObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initializePrivateData();
		break;
	case 7:
		initializeTransientMembers();
		break;
	case 8:
		resp->insertBoolean(isMeleeWeapon());
		break;
	default:
		return NULL;
	}

	return resp;
}

void MeleeWeaponObjectAdapter::initializePrivateData() {
	((MeleeWeaponObjectImplementation*) impl)->initializePrivateData();
}

void MeleeWeaponObjectAdapter::initializeTransientMembers() {
	((MeleeWeaponObjectImplementation*) impl)->initializeTransientMembers();
}

bool MeleeWeaponObjectAdapter::isMeleeWeapon() {
	return ((MeleeWeaponObjectImplementation*) impl)->isMeleeWeapon();
}

/*
 *	MeleeWeaponObjectHelper
 */

MeleeWeaponObjectHelper* MeleeWeaponObjectHelper::staticInitializer = MeleeWeaponObjectHelper::instance();

MeleeWeaponObjectHelper::MeleeWeaponObjectHelper() {
	className = "MeleeWeaponObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void MeleeWeaponObjectHelper::finalizeHelper() {
	MeleeWeaponObjectHelper::finalize();
}

DistributedObject* MeleeWeaponObjectHelper::instantiateObject() {
	return new MeleeWeaponObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* MeleeWeaponObjectHelper::instantiateServant() {
	return new MeleeWeaponObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* MeleeWeaponObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new MeleeWeaponObjectAdapter((MeleeWeaponObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

