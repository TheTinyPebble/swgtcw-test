/*
 *	server/zone/objects/tangible/Container.h generated by engine3 IDL compiler 0.55
 */

#ifndef CONTAINER_H_
#define CONTAINER_H_

#include "engine/orb/DistributedObjectBroker.h"

class SceneObject;

class Player;

class TangibleObject;

#include "TangibleObject.h"

class Container : public TangibleObject {
public:
	Container(unsigned long long oid);

	void generateAttributes(SceneObject* obj);

protected:
	Container(DummyConstructorParameter* param);

	virtual ~Container();

	friend class ContainerHelper;
};

class ContainerImplementation;

class ContainerAdapter : public TangibleObjectAdapter {
public:
	ContainerAdapter(ContainerImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void generateAttributes(SceneObject* obj);

};

class ContainerHelper : public DistributedObjectClassHelper, public Singleton<ContainerHelper> {
	static ContainerHelper* staticInitializer;

public:
	ContainerHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<ContainerHelper>;
};

#include "TangibleObjectImplementation.h"

class ContainerServant : public TangibleObjectImplementation {
public:
	Container* _this;

public:
	ContainerServant(unsigned long long oid);
	virtual ~ContainerServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*CONTAINER_H_*/
