/*
 *	server/zone/objects/tangible/wearables/WearableObject.h generated by engine3 IDL compiler 0.60
 */

#ifndef WEARABLEOBJECT_H_
#define WEARABLEOBJECT_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace packets {
namespace scene {

class AttributeListMessage;

} // namespace scene
} // namespace packets
} // namespace zone
} // namespace server

using namespace server::zone::packets::scene;

namespace server {
namespace zone {
namespace objects {
namespace manufactureschematic {

class ManufactureSchematic;

} // namespace manufactureschematic
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::manufactureschematic;

namespace server {
namespace zone {

class Zone;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {
namespace objects {
namespace player {

class PlayerCreature;

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

#include "server/zone/objects/tangible/attachment/Attachment.h"

#include "server/zone/objects/tangible/wearables/WearableSkillModMap.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "engine/lua/LuaObject.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace wearables {

class WearableObject : public TangibleObject {
public:
	static const int MAXSOCKETS = 4;

	WearableObject();

	void initializeTransientMembers();

	void fillAttributeList(AttributeListMessage* msg, PlayerCreature* object);

	void updateCraftingValues(ManufactureSchematic* schematic);

	void applyAttachment(PlayerCreature* player, Attachment* attachment);

	void setAttachmentMods(PlayerCreature* player, bool remove = false);

	bool isWearableObject();

	bool isEquipped();

	int getMaxSockets();

	int socketsUsed();

	int socketsLeft();

	void setMaxSockets(int sockets);

	DistributedObjectServant* _getImplementation();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	WearableObject(DummyConstructorParameter* param);

	virtual ~WearableObject();

	friend class WearableObjectHelper;
};

} // namespace wearables
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::wearables;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace wearables {

class WearableObjectImplementation : public TangibleObjectImplementation {
protected:
	int socketCount;

	bool socketsGenerated;

public:
	static const int MAXSOCKETS = 4;

protected:
	WearableSkillModMap wearableSkillModMap;

public:
	WearableObjectImplementation();

	WearableObjectImplementation(DummyConstructorParameter* param);

	void initializeTransientMembers();

	void fillAttributeList(AttributeListMessage* msg, PlayerCreature* object);

	void updateCraftingValues(ManufactureSchematic* schematic);

	void applyAttachment(PlayerCreature* player, Attachment* attachment);

	void setAttachmentMods(PlayerCreature* player, bool remove = false);

	bool isWearableObject();

	bool isEquipped();

	int getMaxSockets();

	int socketsUsed();

	int socketsLeft();

	void setMaxSockets(int sockets);

private:
	void generateSockets(ManufactureSchematic* schematic);

public:
	WearableObject* _this;

	operator const WearableObject*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~WearableObjectImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const String& name);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class WearableObject;
};

class WearableObjectAdapter : public TangibleObjectAdapter {
public:
	WearableObjectAdapter(WearableObjectImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initializeTransientMembers();

	void updateCraftingValues(ManufactureSchematic* schematic);

	void applyAttachment(PlayerCreature* player, Attachment* attachment);

	void setAttachmentMods(PlayerCreature* player, bool remove);

	bool isWearableObject();

	bool isEquipped();

	int getMaxSockets();

	int socketsUsed();

	int socketsLeft();

	void setMaxSockets(int sockets);

};

class WearableObjectHelper : public DistributedObjectClassHelper, public Singleton<WearableObjectHelper> {
	static WearableObjectHelper* staticInitializer;

public:
	WearableObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<WearableObjectHelper>;
};

} // namespace wearables
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::wearables;

#endif /*WEARABLEOBJECT_H_*/
