/*
 *	server/zone/objects/tangible/wearables/WearableContainerObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "WearableContainerObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	WearableContainerObjectStub
 */

WearableContainerObject::WearableContainerObject() : Container(DummyConstructorParameter::instance()) {
	WearableContainerObjectImplementation* _implementation = new WearableContainerObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("WearableContainerObject");
}

WearableContainerObject::WearableContainerObject(DummyConstructorParameter* param) : Container(param) {
	_setClassName("WearableContainerObject");
}

WearableContainerObject::~WearableContainerObject() {
}



DistributedObjectServant* WearableContainerObject::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

void WearableContainerObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	WearableContainerObjectImplementation
 */

WearableContainerObjectImplementation::WearableContainerObjectImplementation(DummyConstructorParameter* param) : ContainerImplementation(param) {
	_initializeImplementation();
}


WearableContainerObjectImplementation::~WearableContainerObjectImplementation() {
}


void WearableContainerObjectImplementation::finalize() {
}

void WearableContainerObjectImplementation::_initializeImplementation() {
	_setClassHelper(WearableContainerObjectHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void WearableContainerObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<WearableContainerObject*>(stub);
	ContainerImplementation::_setStub(stub);
}

DistributedObjectStub* WearableContainerObjectImplementation::_getStub() {
	return _this.get();
}

WearableContainerObjectImplementation::operator const WearableContainerObject*() {
	return _this.get();
}

void WearableContainerObjectImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void WearableContainerObjectImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void WearableContainerObjectImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void WearableContainerObjectImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void WearableContainerObjectImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void WearableContainerObjectImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void WearableContainerObjectImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void WearableContainerObjectImplementation::_serializationHelperMethod() {
	ContainerImplementation::_serializationHelperMethod();

	_setClassName("WearableContainerObject");

}

void WearableContainerObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(WearableContainerObjectImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool WearableContainerObjectImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ContainerImplementation::readObjectMember(stream, _name))
		return true;


	return false;
}

void WearableContainerObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = WearableContainerObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int WearableContainerObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ContainerImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;

	return _count + 0;
}

WearableContainerObjectImplementation::WearableContainerObjectImplementation() : ContainerImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/wearables/WearableContainerObject.idl():  		Logger.setLoggingName("WearableContainerObject");
	Logger::setLoggingName("WearableContainerObject");
}

/*
 *	WearableContainerObjectAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


WearableContainerObjectAdapter::WearableContainerObjectAdapter(WearableContainerObject* obj) : ContainerAdapter(obj) {
}

void WearableContainerObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	default:
		throw Exception("Method does not exists");
	}
}

/*
 *	WearableContainerObjectHelper
 */

WearableContainerObjectHelper* WearableContainerObjectHelper::staticInitializer = WearableContainerObjectHelper::instance();

WearableContainerObjectHelper::WearableContainerObjectHelper() {
	className = "WearableContainerObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void WearableContainerObjectHelper::finalizeHelper() {
	WearableContainerObjectHelper::finalize();
}

DistributedObject* WearableContainerObjectHelper::instantiateObject() {
	return new WearableContainerObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* WearableContainerObjectHelper::instantiateServant() {
	return new WearableContainerObjectImplementation();
}

DistributedObjectAdapter* WearableContainerObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new WearableContainerObjectAdapter(static_cast<WearableContainerObject*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

