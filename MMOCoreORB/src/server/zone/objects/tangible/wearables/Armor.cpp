/*
 *	server/zone/objects/tangible/wearables/Armor.cpp generated by engine3 IDL compiler 0.55
 */

#include "Armor.h"

#include "ArmorImplementation.h"

#include "../../player/Player.h"

#include "../../creature/CreatureObject.h"

#include "../../scene/SceneObject.h"

#include "Wearable.h"

/*
 *	ArmorStub
 */

Armor::Armor(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, bool eqp) : Wearable(DummyConstructorParameter::instance()) {
	_impl = new ArmorImplementation(oid, tempCRC, n, tempn, eqp);
	_impl->_setStub(this);
}

Armor::Armor(CreatureObject* creature, unsigned int tempCRC, const UnicodeString& n, const String& tempn, bool eqp) : Wearable(DummyConstructorParameter::instance()) {
	_impl = new ArmorImplementation(creature, tempCRC, n, tempn, eqp);
	_impl->_setStub(this);
}

Armor::Armor(DummyConstructorParameter* param) : Wearable(param) {
}

Armor::~Armor() {
}

void Armor::sendTo(Player* player, bool doClose) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);
		method.addBooleanParameter(doClose);

		method.executeWithVoidReturn();
	} else
		((ArmorImplementation*) _impl)->sendTo(player, doClose);
}

void Armor::decay(float decayRate) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addFloatParameter(decayRate);

		method.executeWithVoidReturn();
	} else
		((ArmorImplementation*) _impl)->decay(decayRate);
}

void Armor::generateAttributes(SceneObject* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((ArmorImplementation*) _impl)->generateAttributes(obj);
}

void Armor::setArmorStats(int modifier) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addSignedIntParameter(modifier);

		method.executeWithVoidReturn();
	} else
		((ArmorImplementation*) _impl)->setArmorStats(modifier);
}

int Armor::getRating() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		return method.executeWithSignedIntReturn();
	} else
		return ((ArmorImplementation*) _impl)->getRating();
}

float Armor::getKinetic() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		return method.executeWithFloatReturn();
	} else
		return ((ArmorImplementation*) _impl)->getKinetic();
}

float Armor::getEnergy() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		return method.executeWithFloatReturn();
	} else
		return ((ArmorImplementation*) _impl)->getEnergy();
}

float Armor::getElectricity() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		return method.executeWithFloatReturn();
	} else
		return ((ArmorImplementation*) _impl)->getElectricity();
}

float Armor::getStun() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		return method.executeWithFloatReturn();
	} else
		return ((ArmorImplementation*) _impl)->getStun();
}

float Armor::getBlast() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		return method.executeWithFloatReturn();
	} else
		return ((ArmorImplementation*) _impl)->getBlast();
}

float Armor::getHeat() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		return method.executeWithFloatReturn();
	} else
		return ((ArmorImplementation*) _impl)->getHeat();
}

float Armor::getCold() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);

		return method.executeWithFloatReturn();
	} else
		return ((ArmorImplementation*) _impl)->getCold();
}

float Armor::getAcid() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		return method.executeWithFloatReturn();
	} else
		return ((ArmorImplementation*) _impl)->getAcid();
}

float Armor::getLightSaber() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);

		return method.executeWithFloatReturn();
	} else
		return ((ArmorImplementation*) _impl)->getLightSaber();
}

int Armor::getArmorPiece() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);

		return method.executeWithSignedIntReturn();
	} else
		return ((ArmorImplementation*) _impl)->getArmorPiece();
}

void Armor::setArmorPiece(int armorSlot) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addSignedIntParameter(armorSlot);

		method.executeWithVoidReturn();
	} else
		((ArmorImplementation*) _impl)->setArmorPiece(armorSlot);
}

void Armor::setRating(int rating) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);
		method.addSignedIntParameter(rating);

		method.executeWithVoidReturn();
	} else
		((ArmorImplementation*) _impl)->setRating(rating);
}

void Armor::setAcid(float resist) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);
		method.addFloatParameter(resist);

		method.executeWithVoidReturn();
	} else
		((ArmorImplementation*) _impl)->setAcid(resist);
}

void Armor::setBlast(float resist) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);
		method.addFloatParameter(resist);

		method.executeWithVoidReturn();
	} else
		((ArmorImplementation*) _impl)->setBlast(resist);
}

void Armor::setCold(float resist) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);
		method.addFloatParameter(resist);

		method.executeWithVoidReturn();
	} else
		((ArmorImplementation*) _impl)->setCold(resist);
}

void Armor::setElectricity(float resist) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);
		method.addFloatParameter(resist);

		method.executeWithVoidReturn();
	} else
		((ArmorImplementation*) _impl)->setElectricity(resist);
}

void Armor::setEnergy(float resist) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);
		method.addFloatParameter(resist);

		method.executeWithVoidReturn();
	} else
		((ArmorImplementation*) _impl)->setEnergy(resist);
}

void Armor::setStun(float resist) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);
		method.addFloatParameter(resist);

		method.executeWithVoidReturn();
	} else
		((ArmorImplementation*) _impl)->setStun(resist);
}

void Armor::setHeat(float resist) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);
		method.addFloatParameter(resist);

		method.executeWithVoidReturn();
	} else
		((ArmorImplementation*) _impl)->setHeat(resist);
}

void Armor::setKinetic(float resist) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);
		method.addFloatParameter(resist);

		method.executeWithVoidReturn();
	} else
		((ArmorImplementation*) _impl)->setKinetic(resist);
}

void Armor::setLightSaber(float resist) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);
		method.addFloatParameter(resist);

		method.executeWithVoidReturn();
	} else
		((ArmorImplementation*) _impl)->setLightSaber(resist);
}

/*
 *	ArmorAdapter
 */

ArmorAdapter::ArmorAdapter(ArmorImplementation* obj) : WearableAdapter(obj) {
}

Packet* ArmorAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		sendTo((Player*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 7:
		decay(inv->getFloatParameter());
		break;
	case 8:
		generateAttributes((SceneObject*) inv->getObjectParameter());
		break;
	case 9:
		setArmorStats(inv->getSignedIntParameter());
		break;
	case 10:
		resp->insertSignedInt(getRating());
		break;
	case 11:
		resp->insertFloat(getKinetic());
		break;
	case 12:
		resp->insertFloat(getEnergy());
		break;
	case 13:
		resp->insertFloat(getElectricity());
		break;
	case 14:
		resp->insertFloat(getStun());
		break;
	case 15:
		resp->insertFloat(getBlast());
		break;
	case 16:
		resp->insertFloat(getHeat());
		break;
	case 17:
		resp->insertFloat(getCold());
		break;
	case 18:
		resp->insertFloat(getAcid());
		break;
	case 19:
		resp->insertFloat(getLightSaber());
		break;
	case 20:
		resp->insertSignedInt(getArmorPiece());
		break;
	case 21:
		setArmorPiece(inv->getSignedIntParameter());
		break;
	case 22:
		setRating(inv->getSignedIntParameter());
		break;
	case 23:
		setAcid(inv->getFloatParameter());
		break;
	case 24:
		setBlast(inv->getFloatParameter());
		break;
	case 25:
		setCold(inv->getFloatParameter());
		break;
	case 26:
		setElectricity(inv->getFloatParameter());
		break;
	case 27:
		setEnergy(inv->getFloatParameter());
		break;
	case 28:
		setStun(inv->getFloatParameter());
		break;
	case 29:
		setHeat(inv->getFloatParameter());
		break;
	case 30:
		setKinetic(inv->getFloatParameter());
		break;
	case 31:
		setLightSaber(inv->getFloatParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void ArmorAdapter::sendTo(Player* player, bool doClose) {
	return ((ArmorImplementation*) impl)->sendTo(player, doClose);
}

void ArmorAdapter::decay(float decayRate) {
	return ((ArmorImplementation*) impl)->decay(decayRate);
}

void ArmorAdapter::generateAttributes(SceneObject* obj) {
	return ((ArmorImplementation*) impl)->generateAttributes(obj);
}

void ArmorAdapter::setArmorStats(int modifier) {
	return ((ArmorImplementation*) impl)->setArmorStats(modifier);
}

int ArmorAdapter::getRating() {
	return ((ArmorImplementation*) impl)->getRating();
}

float ArmorAdapter::getKinetic() {
	return ((ArmorImplementation*) impl)->getKinetic();
}

float ArmorAdapter::getEnergy() {
	return ((ArmorImplementation*) impl)->getEnergy();
}

float ArmorAdapter::getElectricity() {
	return ((ArmorImplementation*) impl)->getElectricity();
}

float ArmorAdapter::getStun() {
	return ((ArmorImplementation*) impl)->getStun();
}

float ArmorAdapter::getBlast() {
	return ((ArmorImplementation*) impl)->getBlast();
}

float ArmorAdapter::getHeat() {
	return ((ArmorImplementation*) impl)->getHeat();
}

float ArmorAdapter::getCold() {
	return ((ArmorImplementation*) impl)->getCold();
}

float ArmorAdapter::getAcid() {
	return ((ArmorImplementation*) impl)->getAcid();
}

float ArmorAdapter::getLightSaber() {
	return ((ArmorImplementation*) impl)->getLightSaber();
}

int ArmorAdapter::getArmorPiece() {
	return ((ArmorImplementation*) impl)->getArmorPiece();
}

void ArmorAdapter::setArmorPiece(int armorSlot) {
	return ((ArmorImplementation*) impl)->setArmorPiece(armorSlot);
}

void ArmorAdapter::setRating(int rating) {
	return ((ArmorImplementation*) impl)->setRating(rating);
}

void ArmorAdapter::setAcid(float resist) {
	return ((ArmorImplementation*) impl)->setAcid(resist);
}

void ArmorAdapter::setBlast(float resist) {
	return ((ArmorImplementation*) impl)->setBlast(resist);
}

void ArmorAdapter::setCold(float resist) {
	return ((ArmorImplementation*) impl)->setCold(resist);
}

void ArmorAdapter::setElectricity(float resist) {
	return ((ArmorImplementation*) impl)->setElectricity(resist);
}

void ArmorAdapter::setEnergy(float resist) {
	return ((ArmorImplementation*) impl)->setEnergy(resist);
}

void ArmorAdapter::setStun(float resist) {
	return ((ArmorImplementation*) impl)->setStun(resist);
}

void ArmorAdapter::setHeat(float resist) {
	return ((ArmorImplementation*) impl)->setHeat(resist);
}

void ArmorAdapter::setKinetic(float resist) {
	return ((ArmorImplementation*) impl)->setKinetic(resist);
}

void ArmorAdapter::setLightSaber(float resist) {
	return ((ArmorImplementation*) impl)->setLightSaber(resist);
}

/*
 *	ArmorHelper
 */

ArmorHelper* ArmorHelper::staticInitializer = ArmorHelper::instance();

ArmorHelper::ArmorHelper() {
	className = "Armor";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void ArmorHelper::finalizeHelper() {
	ArmorHelper::finalize();
}

DistributedObject* ArmorHelper::instantiateObject() {
	return new Armor(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ArmorHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ArmorAdapter((ArmorImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	ArmorServant
 */

ArmorServant::ArmorServant(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, bool eqp) : WearableImplementation(oid, tempCRC, n, tempn, eqp) {
	_classHelper = ArmorHelper::instance();
}

ArmorServant::ArmorServant(CreatureObject* creature, unsigned int tempCRC, const UnicodeString& n, const String& tempn, bool eqp) : WearableImplementation(creature, tempCRC, n, tempn, eqp) {
	_classHelper = ArmorHelper::instance();
}

ArmorServant::~ArmorServant() {
}

void ArmorServant::_setStub(DistributedObjectStub* stub) {
	_this = (Armor*) stub;
	WearableServant::_setStub(stub);
}

DistributedObjectStub* ArmorServant::_getStub() {
	return _this;
}

