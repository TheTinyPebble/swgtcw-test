/*
Copyright (C) 2007 <SWGEmu>
 
This File is part of Core3.
 
This program is free software; you can redistribute 
it and/or modify it under the terms of the GNU Lesser 
General Public License as published by the Free Software
Foundation; either version 2 of the License, 
or (at your option) any later version.
 
This program is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
See the GNU Lesser General Public License for
more details.
 
You should have received a copy of the GNU Lesser General 
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 
Linking Engine3 statically or dynamically with other modules 
is making a combined work based on Engine3. 
Thus, the terms and conditions of the GNU Lesser General Public License 
cover the whole combination.
 
In addition, as a special exception, the copyright holders of Engine3 
give you permission to combine Engine3 program with free software 
programs or libraries that are released under the GNU LGPL and with 
code included in the standard release of Core3 under the GNU LGPL 
license (or modified versions of such code, with unchanged license). 
You may copy and distribute such a system following the terms of the 
GNU LGPL for Engine3 and the licenses of the other code concerned, 
provided that you include the source code of that other code when 
and as the GNU LGPL requires distribution of source code.
 
Note that people who make modified versions of Engine3 are not obligated 
to grant this special exception for their modified versions; 
it is their choice whether to do so. The GNU Lesser General Public License 
gives permission to release a modified version without this exception; 
this exception also makes it possible to release a modified version 
which carries forward this exception.
*/

package server.zone.objects.tangible.wearables;

import server.zone.objects.tangible.wearables.WearableObject;
import server.zone.objects.tangible.weapon.WeaponObject;
import engine.lua.LuaObject;
import system.util.SortedVector;
import server.zone.Zone;
import server.zone.objects.creature.CreatureObject;
include server.zone.objects.manufactureschematic.craftingvalues.CraftingValues;

class ArmorObject extends WearableObject {
	protected int healthEncumbrance;
	protected int actionEncumbrance;
	protected int mindEncumbrance;
	
	protected int rating;

	protected float kinetic;
	protected float energy;
	protected float electricity;
	protected float stun;
	protected float blast;
	protected float heat;
	protected float cold;
	protected float acid;
	protected float lightSaber;

	protected int specialResists;
	protected int vulnerabilites;

	protected float baseProtection;
	protected float specialProtection;
	
	protected int armorType;
	
	public static final int LIGHT = 0x1;
	public static final int MEDIUM = 0x2;
	public static final int HEAVY = 0x3;
	
	public static final int COMPOSITE = 0x1;
	
	public ArmorObject() {		
		healthEncumbrance = 100;
		actionEncumbrance = 100;
		mindEncumbrance = 100;
		
		rating = LIGHT;

		kinetic = 0;
		energy = 0;
		electricity = 0;
		stun = 0;
		blast = 0;
		heat = 0;
		cold = 0;
		acid = 0;
		lightSaber = 0;
		
		armorType = 0;
		
		specialResists = 0;

		Logger.setLoggingName("ArmorObject");
	}
	
	public native void initializeTransientMembers();
	
	/**
	 * Reads and sets the template data from a SharedTangibleObjectTemplate LuaObject
	 * @pre { templateData is a valid pointer }
	 * @post { TangibleObject members are initialized }
	 * @param templateData templateData points to the SharedTangibleObjectTemplate LuaObject that is used to initialize the TangibleObject members
	 */
	@local
	public native void loadTemplateData(SharedObjectTemplate templateData);
	
	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	@local
	public native void fillAttributeList(AttributeListMessage msg, CreatureObject object);
	
	/**
	 * Handles the radial selection sent by the client, must be overriden by inherited objects
	 * @pre { this object is locked, player is locked }
	 * @post { this object is locked, player is locked }
	 * @param player CreatureObject that selected the option
	 * @param selectedID selected menu id
	 * @returns 0 if successfull
	 */
	public native int handleObjectMenuSelect(CreatureObject player, byte selectedID);

	@local
	public native void updateCraftingValues(CraftingValues values, boolean firstUpdate);
	
	private native void calculateSpecialProtection(CraftingValues values);
	
	native string getStringType(int type);

	private native void setProtectionValue(int type, float value);
	
	public boolean isSpecial(int type) {
		return specialResists & type;
	}
	
	public boolean isVulnerable(int type) {
		return vulnerabilites & type;
	}
	
	public boolean isArmorObject() {
		return true;
	}
	
	
	public void setRating(int rate) {
		rating = rate;
	}
	
	public int getRating() {
		return rating;
	}

	private float getTypeValue(int type) {
		
		if(isVulnerable(type)) 
			return 0;
		
		if(isSpecial(type)) 
			return specialProtection;
		
		return baseProtection;
		
	}
	
	public float getKinetic() {
		float value = kinetic + getTypeValue(WeaponObject.KINETIC);
		return value - getConditionReduction(kinetic);
	}
	
	public void setKinetic(float value) {
		kinetic = value;
	}

	public float getEnergy() {
		float value = energy + getTypeValue(WeaponObject.ENERGY);
		return value - getConditionReduction(energy);
	}
	
	public void setEnergy(float value) {
		energy = value;
	}

	public float getElectricity() {
		float value = electricity + getTypeValue(WeaponObject.ELECTRICITY);
		return value - getConditionReduction(electricity);
	}
	
	public void setElectricity(float value) {
		electricity = value;
	}

	public float getStun() {
		float value = stun + getTypeValue(WeaponObject.STUN);
		return value - getConditionReduction(stun);
	}
	
	public void setStun(float value) {
		stun = value;
	}

	public float getBlast() {
		float value = blast + getTypeValue(WeaponObject.BLAST);
		return value - getConditionReduction(blast);
	}
	
	public void setBlast(float value) {
		blast = value;
	}

	public float getHeat() {
		float value = heat + getTypeValue(WeaponObject.HEAT);
		return value - getConditionReduction(heat);
	}
	
	public void setHeat(float value) {
		heat = value;
	}

	public float getCold() {
		float value = cold + getTypeValue(WeaponObject.COLD);
		return value - getConditionReduction(cold);
	}
	
	public void setCold(float value) {
		cold = value;
	}

	public float getAcid() {
		float value = acid + getTypeValue(WeaponObject.ACID);
		return value - getConditionReduction(acid);
	}
	
	public void setAcid(float value) {
		acid = value;
	}

	public float getLightSaber() {
		float value = lightSaber + getTypeValue(WeaponObject.LIGHTSABER);
		return value - getConditionReduction(lightSaber);
	}
	
	public void setLightSaber(float value) {
		lightSaber = value;
	}
	
	public int getHealthEncumbrance() {
		return healthEncumbrance;
	}
	
	public void setHealthEncumbrance(int encumber) {
		healthEncumbrance = encumber;
	}
	
	public int getActionEncumbrance() {
		return actionEncumbrance;
	}
	
	public void setActionEncumbrance(int encumber) {
		actionEncumbrance = encumber;
	}
	
	public int getMindEncumbrance() {
		return mindEncumbrance;
	}
	
	public void setMindEncumbrance(int encumber) {
		mindEncumbrance = encumber;
	}
}
