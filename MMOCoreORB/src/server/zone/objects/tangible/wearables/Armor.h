/*
 *	server/zone/objects/tangible/wearables/Armor.h generated by engine3 IDL compiler 0.55
 */

#ifndef ARMOR_H_
#define ARMOR_H_

#include "engine/orb/DistributedObjectBroker.h"

class Player;

class CreatureObject;

class SceneObject;

class Wearable;

#include "Wearable.h"

class Armor : public Wearable {
public:
	Armor(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, bool eqp = false);

	Armor(CreatureObject* creature, unsigned int tempCRC, const UnicodeString& n, const String& tempn, bool eqp = false);

	void sendTo(Player* player, bool doClose = true);

	void decay(float decayRate);

	void generateAttributes(SceneObject* obj);

	void setArmorStats(int modifier);

	int addSkillMod(int skillModType, int skillModValue);

	int getRating();

	int getCondition();

	int getMaxCondition();

	int getHealthEncumbrance();

	int getActionEncumbrance();

	int getMindEncumbrance();

	float getKinetic();

	bool isKineticSpecial();

	float getEnergy();

	bool isEnergySpecial();

	float getElectricity();

	bool isElectricitySpecial();

	float getStun();

	bool isStunSpecial();

	float getBlast();

	bool isBlastSpecial();

	float getHeat();

	bool isHeatSpecial();

	float getCold();

	bool isColdSpecial();

	float getAcid();

	bool isAcidSpecial();

	float getLightSaber();

	bool isLightSaberSpecial();

	int getType();

	int getSocketType(int index);

	int getSocketValue(int index);

	int getSkillMod0Type();

	int getSkillMod1Type();

	int getSkillMod2Type();

	int getSkillMod0Value();

	int getSkillMod1Value();

	int getSkillMod2Value();

	int getSockets();

	int getSocket0Type();

	int getSocket1Type();

	int getSocket2Type();

	int getSocket3Type();

	int getSocket0Value();

	int getSocket1Value();

	int getSocket2Value();

	int getSocket3Value();

	int getArmorType();

	void setArmorPiece(int armorSlot);

	void setHealthEncumbrance(int healthEnc);

	void setActionEncumbrance(int actionEnc);

	void setMindEncumbrance(int mindEnc);

	void setRating(int rating);

	void setAcid(float resist);

	void setBlast(float resist);

	void setCold(float resist);

	void setElectricity(float resist);

	void setEnergy(float resist);

	void setStun(float resist);

	void setHeat(float resist);

	void setKinetic(float resist);

	void setLightSaber(float resist);

	void setSocketType(int index, int type);

	void setSocketValue(int index, int type);

	void setSockets(int socket);

	void setSocket0Type(int type);

	void setSocket1Type(int type);

	void setSocket2Type(int type);

	void setSocket3Type(int type);

	void setSocket0Value(int value);

	void setSocket1Value(int value);

	void setSocket2Value(int value);

	void setSocket3Value(int value);

	void onBroken();

	void onSlicingFailure(Player* slicer);

	void slice(Player* slicer);

	void conditionReduction(float damage);

protected:
	Armor(DummyConstructorParameter* param);

	virtual ~Armor();

	friend class ArmorHelper;
};

class ArmorImplementation;

class ArmorAdapter : public WearableAdapter {
public:
	ArmorAdapter(ArmorImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void sendTo(Player* player, bool doClose);

	void decay(float decayRate);

	void generateAttributes(SceneObject* obj);

	void setArmorStats(int modifier);

	int addSkillMod(int skillModType, int skillModValue);

	int getRating();

	int getCondition();

	int getMaxCondition();

	int getHealthEncumbrance();

	int getActionEncumbrance();

	int getMindEncumbrance();

	float getKinetic();

	bool isKineticSpecial();

	float getEnergy();

	bool isEnergySpecial();

	float getElectricity();

	bool isElectricitySpecial();

	float getStun();

	bool isStunSpecial();

	float getBlast();

	bool isBlastSpecial();

	float getHeat();

	bool isHeatSpecial();

	float getCold();

	bool isColdSpecial();

	float getAcid();

	bool isAcidSpecial();

	float getLightSaber();

	bool isLightSaberSpecial();

	int getType();

	int getSocketType(int index);

	int getSocketValue(int index);

	int getSkillMod0Type();

	int getSkillMod1Type();

	int getSkillMod2Type();

	int getSkillMod0Value();

	int getSkillMod1Value();

	int getSkillMod2Value();

	int getSockets();

	int getSocket0Type();

	int getSocket1Type();

	int getSocket2Type();

	int getSocket3Type();

	int getSocket0Value();

	int getSocket1Value();

	int getSocket2Value();

	int getSocket3Value();

	int getArmorType();

	void setArmorPiece(int armorSlot);

	void setHealthEncumbrance(int healthEnc);

	void setActionEncumbrance(int actionEnc);

	void setMindEncumbrance(int mindEnc);

	void setRating(int rating);

	void setAcid(float resist);

	void setBlast(float resist);

	void setCold(float resist);

	void setElectricity(float resist);

	void setEnergy(float resist);

	void setStun(float resist);

	void setHeat(float resist);

	void setKinetic(float resist);

	void setLightSaber(float resist);

	void setSocketType(int index, int type);

	void setSocketValue(int index, int type);

	void setSockets(int socket);

	void setSocket0Type(int type);

	void setSocket1Type(int type);

	void setSocket2Type(int type);

	void setSocket3Type(int type);

	void setSocket0Value(int value);

	void setSocket1Value(int value);

	void setSocket2Value(int value);

	void setSocket3Value(int value);

	void onBroken();

	void onSlicingFailure(Player* slicer);

	void slice(Player* slicer);

	void conditionReduction(float damage);

};

class ArmorHelper : public DistributedObjectClassHelper, public Singleton<ArmorHelper> {
	static ArmorHelper* staticInitializer;

public:
	ArmorHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<ArmorHelper>;
};

#include "WearableImplementation.h"

class ArmorServant : public WearableImplementation {
public:
	Armor* _this;

public:
	ArmorServant(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, bool eqp);
	ArmorServant(CreatureObject* creature, unsigned int tempCRC, const UnicodeString& n, const String& tempn, bool eqp);
	virtual ~ArmorServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*ARMOR_H_*/
