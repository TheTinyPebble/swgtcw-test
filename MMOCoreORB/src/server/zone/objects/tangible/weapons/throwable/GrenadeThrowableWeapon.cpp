/*
 *	server/zone/objects/tangible/weapons/throwable/GrenadeThrowableWeapon.cpp generated by engine3 IDL compiler 0.55
 */

#include "GrenadeThrowableWeapon.h"

#include "GrenadeThrowableWeaponImplementation.h"

#include "../../../creature/CreatureObject.h"

#include "../../../player/Player.h"

#include "../ThrowableWeapon.h"

/*
 *	GrenadeThrowableWeaponStub
 */

GrenadeThrowableWeapon::GrenadeThrowableWeapon(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, bool eqp) : ThrowableWeapon(DummyConstructorParameter::instance()) {
	_impl = new GrenadeThrowableWeaponImplementation(oid, tempCRC, n, tempn, eqp);
	_impl->_setStub(this);
}

GrenadeThrowableWeapon::GrenadeThrowableWeapon(CreatureObject* creature, const String& temp, const UnicodeString& n, const String& tempn, bool eqp) : ThrowableWeapon(DummyConstructorParameter::instance()) {
	_impl = new GrenadeThrowableWeaponImplementation(creature, temp, n, tempn, eqp);
	_impl->_setStub(this);
}

GrenadeThrowableWeapon::GrenadeThrowableWeapon(DummyConstructorParameter* param) : ThrowableWeapon(param) {
}

GrenadeThrowableWeapon::~GrenadeThrowableWeapon() {
}

void GrenadeThrowableWeapon::sendDeltas(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((GrenadeThrowableWeaponImplementation*) _impl)->sendDeltas(player);
}

void GrenadeThrowableWeapon::useCharge(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((GrenadeThrowableWeaponImplementation*) _impl)->useCharge(player);
}

bool GrenadeThrowableWeapon::isUsefull(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return ((GrenadeThrowableWeaponImplementation*) _impl)->isUsefull(player);
}

/*
 *	GrenadeThrowableWeaponAdapter
 */

GrenadeThrowableWeaponAdapter::GrenadeThrowableWeaponAdapter(GrenadeThrowableWeaponImplementation* obj) : ThrowableWeaponAdapter(obj) {
}

Packet* GrenadeThrowableWeaponAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		sendDeltas((Player*) inv->getObjectParameter());
		break;
	case 7:
		useCharge((Player*) inv->getObjectParameter());
		break;
	case 8:
		resp->insertBoolean(isUsefull((Player*) inv->getObjectParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

void GrenadeThrowableWeaponAdapter::sendDeltas(Player* player) {
	return ((GrenadeThrowableWeaponImplementation*) impl)->sendDeltas(player);
}

void GrenadeThrowableWeaponAdapter::useCharge(Player* player) {
	return ((GrenadeThrowableWeaponImplementation*) impl)->useCharge(player);
}

bool GrenadeThrowableWeaponAdapter::isUsefull(Player* player) {
	return ((GrenadeThrowableWeaponImplementation*) impl)->isUsefull(player);
}

/*
 *	GrenadeThrowableWeaponHelper
 */

GrenadeThrowableWeaponHelper* GrenadeThrowableWeaponHelper::staticInitializer = GrenadeThrowableWeaponHelper::instance();

GrenadeThrowableWeaponHelper::GrenadeThrowableWeaponHelper() {
	className = "GrenadeThrowableWeapon";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void GrenadeThrowableWeaponHelper::finalizeHelper() {
	GrenadeThrowableWeaponHelper::finalize();
}

DistributedObject* GrenadeThrowableWeaponHelper::instantiateObject() {
	return new GrenadeThrowableWeapon(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* GrenadeThrowableWeaponHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new GrenadeThrowableWeaponAdapter((GrenadeThrowableWeaponImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	GrenadeThrowableWeaponServant
 */

GrenadeThrowableWeaponServant::GrenadeThrowableWeaponServant(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int tp, bool eqp) : ThrowableWeaponImplementation(oid, tempCRC, n, tempn, tp, eqp) {
	_classHelper = GrenadeThrowableWeaponHelper::instance();
}

GrenadeThrowableWeaponServant::GrenadeThrowableWeaponServant(CreatureObject* creature, const String& temp, const UnicodeString& n, const String& tempn, int tp, bool eqp) : ThrowableWeaponImplementation(creature, temp, n, tempn, tp, eqp) {
	_classHelper = GrenadeThrowableWeaponHelper::instance();
}

GrenadeThrowableWeaponServant::~GrenadeThrowableWeaponServant() {
}

void GrenadeThrowableWeaponServant::_setStub(DistributedObjectStub* stub) {
	_this = (GrenadeThrowableWeapon*) stub;
	ThrowableWeaponServant::_setStub(stub);
}

DistributedObjectStub* GrenadeThrowableWeaponServant::_getStub() {
	return _this;
}

