/*
 *	server/zone/objects/tangible/weapons/throwable/TrapThrowableWeapon.h generated by engine3 IDL compiler 0.55
 */

#ifndef TRAPTHROWABLEWEAPON_H_
#define TRAPTHROWABLEWEAPON_H_

#include "engine/orb/DistributedObjectBroker.h"

class CreatureObject;

class Player;

class ThrowableWeapon;

#include "../ThrowableWeapon.h"

class TrapThrowableWeapon : public ThrowableWeapon {
public:
	TrapThrowableWeapon(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, bool eqp = false);

	TrapThrowableWeapon(CreatureObject* creature, const String& temp, const UnicodeString& n, const String& tempn, bool eqp = false);

	void sendDeltas(Player* player);

	void useCharge(Player* player);

	bool isUsefull(Player* player);

protected:
	TrapThrowableWeapon(DummyConstructorParameter* param);

	virtual ~TrapThrowableWeapon();

	friend class TrapThrowableWeaponHelper;
};

class TrapThrowableWeaponImplementation;

class TrapThrowableWeaponAdapter : public ThrowableWeaponAdapter {
public:
	TrapThrowableWeaponAdapter(TrapThrowableWeaponImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void sendDeltas(Player* player);

	void useCharge(Player* player);

	bool isUsefull(Player* player);

};

class TrapThrowableWeaponHelper : public DistributedObjectClassHelper, public Singleton<TrapThrowableWeaponHelper> {
	static TrapThrowableWeaponHelper* staticInitializer;

public:
	TrapThrowableWeaponHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<TrapThrowableWeaponHelper>;
};

#include "../ThrowableWeaponImplementation.h"

class TrapThrowableWeaponServant : public ThrowableWeaponImplementation {
public:
	TrapThrowableWeapon* _this;

public:
	TrapThrowableWeaponServant(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int tp, bool eqp);
	TrapThrowableWeaponServant(CreatureObject* creature, const String& temp, const UnicodeString& n, const String& tempn, int tp, bool eqp);
	virtual ~TrapThrowableWeaponServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*TRAPTHROWABLEWEAPON_H_*/
