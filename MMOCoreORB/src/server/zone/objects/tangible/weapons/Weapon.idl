/*
Copyright (C) 2007 <SWGEmu>
 
This File is part of Core3.
 
This program is free software; you can redistribute 
it and/or modify it under the terms of the GNU Lesser 
General Public License as published by the Free Software
Foundation; either version 2 of the License, 
or (at your option) any later version.
 
This program is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
See the GNU Lesser General Public License for
more details.
 
You should have received a copy of the GNU Lesser General 
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 
Linking Engine3 statically or dynamically with other modules 
is making a combined work based on Engine3. 
Thus, the terms and conditions of the GNU Lesser General Public License 
cover the whole combination.
 
In addition, as a special exception, the copyright holders of Engine3 
give you permission to combine Engine3 program with free software 
programs or libraries that are released under the GNU LGPL and with 
code included in the standard release of Core3 under the GNU LGPL 
license (or modified versions of such code, with unchanged license). 
You may copy and distribute such a system following the terms of the 
GNU LGPL for Engine3 and the licenses of the other code concerned, 
provided that you include the source code of that other code when 
and as the GNU LGPL requires distribution of source code.
 
Note that people who make modified versions of Engine3 are not obligated 
to grant this special exception for their modified versions; 
it is their choice whether to do so. The GNU Lesser General Public License 
gives permission to release a modified version without this exception; 
this exception also makes it possible to release a modified version 
which carries forward this exception.
*/

import "../../scene/SceneObject";

import "../../creature/CreatureObject";

import "../../player/Player";

import "../TangibleObject";

import "../powerup/Powerup";

interface Weapon implements TangibleObject {
	Weapon(unsigned long oid, unsigned int tempCRC, const UnicodeString n, const String tempn, boolean eqp, int tp, int cat) {
		super(oid, tempCRC, n, tempn, tp);
	}
	
	Weapon(CreatureObject creature, const String temp, const UnicodeString n, const String tempn, boolean eqp, int tp, int cat) {
		super(unsigned long oid, tp);
	}

	void sendTo(Player player, boolean doClose = true);
	
	//void generateAttributes(SceneObject obj);
	
	void setWeaponStats(int modifier);
	
	void decay(float decayRate);

	void removePowerup(Player player, boolean notify);

	boolean decreasePowerupUses();
	boolean decreaseUsesRemaining();
	
	//Getters
	boolean isJedi();
	
	boolean isMelee();
	
	boolean isRanged();

	boolean isCertified();

	boolean isHeavyWeapon();

	int getType();

	int getCategory();

	int getDamageType();

	int getUsesRemaining();

	float getBaseMinDamage();

	float getMinDamage();

	float getBaseMaxDamage();

	float getMaxDamage();

	float getBaseAttackSpeed();

	float getAttackSpeed();

	int getHealthAttackCost();

	int getActionAttackCost();

	int getMindAttackCost();
	
	int getForceCost();
	
	int getPointBlankRange();
	
	int getPointBlankAccuracy();
	
	int getMaxRange();
	
	int getMaxRangeAccuracy();
	
	int getIdealRange();
	
	int getIdealAccuracy();
	
	float getWoundsRatio();

	int getArmorPiercing();

	int getPowerupUses();
	boolean hasPowerup();

	String& getCert();
	String& getXpType();
	
	float getArea();

	// setters
	void setType(int type);
	
	void setDamageType(int type);
	void setMinDamage(float minDmg);
	void setMaxDamage(float maxDmg);
	void setAttackSpeed(float attackSpd);
	
	void setHealthAttackCost(int healthCost);
	void setActionAttackCost(int actionCost);
	void setMindAttackCost(int mindCost);
	void setForceCost(int forceCost);
	
	void setWoundsRatio(float woundsRat);
	
	void setArmorPiercing(int armorPierce);

	/*void setDot0Type(int type);
	void setDot0Attribute(int attribute);
	void setDot0Strength(int strength);
	void setDot0Duration(int duration);
	void setDot0Potency(int potency);
	void setDot0Uses(int uses);
	void setDot1Uses(int uses);
	void setDot2Uses(int uses);*/
	
	void setPointBlankRange(int pointBlankRnge);
	void setPointBlankAccuracy(int pointBlankAcc);
	void setMaxRange(int maxRnge);
	void setMaxRangeAccuracy(int maxRangeAcc);
	void setIdealRange(int idealRnge);
	void setIdealAccuracy(int idealAcc);
	void setArea(float ar);
	
	void powerupMinDamage(float powerupValue);
	void powerupMaxDamage(float powerupValue);
	void powerupHealthAttackCost(float powerupValue);
	void powerupActionAttackCost(float powerupValue);
	void powerupMindAttackCost(float powerupValue);
	void powerupWoundsRatio(float powerupValue);
	void powerupAttackSpeed(float powerupValue);
	void powerupPointBlankAccuracy(float powerupValue);
	void powerupIdealRange(float powerupValue);
	void powerupIdealAccuracy(float powerupValue);
	void powerupMaxRangeAccuracy(float powerupValue);

	//dots
	int getNumDots();
	int getDotType(int i);
	int getDotAttribute(int i);
	int getDotStrength(int i);
	int getDotPotency(int i);
	int getDotDuration(int i);
	int getDotUses(int i);
	boolean decreaseDotUses(int i);
	void createTestDot(int type);

	void setPowerupUses(int uses);
	void setUsesRemaining(int charges);

	void setCert(String& certification);
	void setCertified(boolean crt);

	void setXpType();

	//Event Handlers
	void onEquip(Player player);
	void onUnequip(Player player);
	void onBroken();
	void onSlicingFailure(Player slicer);

	//Actions
	void slice(Player slicer);
}
