/*
 *	server/zone/objects/tangible/weapons/MeleeWeapon.h generated by engine3 IDL compiler 0.55
 */

#ifndef MELEEWEAPON_H_
#define MELEEWEAPON_H_

#include "engine/orb/DistributedObjectBroker.h"

class CreatureObject;

class Weapon;

#include "Weapon.h"

class MeleeWeapon : public Weapon {
public:
	MeleeWeapon(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int tp, bool eqp = false);

	MeleeWeapon(CreatureObject* creature, const String& temp, const UnicodeString& n, const String& tempn, int tp, bool eqp = false);

protected:
	MeleeWeapon(DummyConstructorParameter* param);

	virtual ~MeleeWeapon();

	friend class MeleeWeaponHelper;
};

class MeleeWeaponImplementation;

class MeleeWeaponAdapter : public WeaponAdapter {
public:
	MeleeWeaponAdapter(MeleeWeaponImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

};

class MeleeWeaponHelper : public DistributedObjectClassHelper, public Singleton<MeleeWeaponHelper> {
	static MeleeWeaponHelper* staticInitializer;

public:
	MeleeWeaponHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<MeleeWeaponHelper>;
};

#include "WeaponImplementation.h"

class MeleeWeaponServant : public WeaponImplementation {
public:
	MeleeWeapon* _this;

public:
	MeleeWeaponServant(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, bool eqp, int tp, int cat);
	MeleeWeaponServant(CreatureObject* creature, const String& temp, const UnicodeString& n, const String& tempn, bool eqp, int tp, int cat);
	virtual ~MeleeWeaponServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*MELEEWEAPON_H_*/
