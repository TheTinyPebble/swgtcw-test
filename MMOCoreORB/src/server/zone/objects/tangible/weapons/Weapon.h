/*
 *	server/zone/objects/tangible/weapons/Weapon.h generated by engine3 IDL compiler 0.55
 */

#ifndef WEAPON_H_
#define WEAPON_H_

#include "engine/orb/DistributedObjectBroker.h"

class SceneObject;

class CreatureObject;

class Player;

class TangibleObject;

class Powerup;

#include "../TangibleObject.h"

class Weapon : public TangibleObject {
public:
	Weapon(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, bool eqp, int tp, int cat);

	Weapon(CreatureObject* creature, const String& temp, const UnicodeString& n, const String& tempn, bool eqp, int tp, int cat);

	void sendTo(Player* player, bool doClose = true);

	void setWeaponStats(int modifier);

	void decay(float decayRate);

	void removePowerup(Player* player, bool notify);

	bool decreasePowerupUses();

	bool decreaseUsesRemaining();

	bool isJedi();

	bool isMelee();

	bool isRanged();

	bool isCertified();

	bool isHeavyWeapon();

	int getType();

	int getCategory();

	int getDamageType();

	int getUsesRemaining();

	float getBaseMinDamage();

	float getMinDamage();

	float getBaseMaxDamage();

	float getMaxDamage();

	float getBaseAttackSpeed();

	float getAttackSpeed();

	int getHealthAttackCost();

	int getActionAttackCost();

	int getMindAttackCost();

	int getForceCost();

	int getPointBlankRange();

	int getPointBlankAccuracy();

	int getMaxRange();

	int getMaxRangeAccuracy();

	int getIdealRange();

	int getIdealAccuracy();

	float getWoundsRatio();

	int getArmorPiercing();

	int getPowerupUses();

	bool hasPowerup();

	String& getCert();

	String& getXpType();

	float getArea();

	void setType(int type);

	void setDamageType(int type);

	void setMinDamage(float minDmg);

	void setMaxDamage(float maxDmg);

	void setAttackSpeed(float attackSpd);

	void setHealthAttackCost(int healthCost);

	void setActionAttackCost(int actionCost);

	void setMindAttackCost(int mindCost);

	void setForceCost(int forceCost);

	void setWoundsRatio(float woundsRat);

	void setArmorPiercing(int armorPierce);

	void setPointBlankRange(int pointBlankRnge);

	void setPointBlankAccuracy(int pointBlankAcc);

	void setMaxRange(int maxRnge);

	void setMaxRangeAccuracy(int maxRangeAcc);

	void setIdealRange(int idealRnge);

	void setIdealAccuracy(int idealAcc);

	void setArea(float ar);

	void powerupMinDamage(float powerupValue);

	void powerupMaxDamage(float powerupValue);

	void powerupHealthAttackCost(float powerupValue);

	void powerupActionAttackCost(float powerupValue);

	void powerupMindAttackCost(float powerupValue);

	void powerupWoundsRatio(float powerupValue);

	void powerupAttackSpeed(float powerupValue);

	void powerupPointBlankAccuracy(float powerupValue);

	void powerupIdealRange(float powerupValue);

	void powerupIdealAccuracy(float powerupValue);

	void powerupMaxRangeAccuracy(float powerupValue);

	int getNumDots();

	int getDotType(int i);

	int getDotAttribute(int i);

	int getDotStrength(int i);

	int getDotPotency(int i);

	int getDotDuration(int i);

	int getDotUses(int i);

	bool decreaseDotUses(int i);

	void createTestDot(int type);

	void setPowerupUses(int uses);

	void setUsesRemaining(int charges);

	void setCert(String& certification);

	void setCertified(bool crt);

	void setXpType();

	void onEquip(Player* player);

	void onUnequip(Player* player);

	void onBroken();

	void onSlicingFailure(Player* slicer);

	void slice(Player* slicer);

protected:
	Weapon(DummyConstructorParameter* param);

	virtual ~Weapon();

	String _return_getCert;
	String _return_getXpType;

	friend class WeaponHelper;
};

class WeaponImplementation;

class WeaponAdapter : public TangibleObjectAdapter {
public:
	WeaponAdapter(WeaponImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void sendTo(Player* player, bool doClose);

	void setWeaponStats(int modifier);

	void decay(float decayRate);

	void removePowerup(Player* player, bool notify);

	bool decreasePowerupUses();

	bool decreaseUsesRemaining();

	bool isJedi();

	bool isMelee();

	bool isRanged();

	bool isCertified();

	bool isHeavyWeapon();

	int getType();

	int getCategory();

	int getDamageType();

	int getUsesRemaining();

	float getBaseMinDamage();

	float getMinDamage();

	float getBaseMaxDamage();

	float getMaxDamage();

	float getBaseAttackSpeed();

	float getAttackSpeed();

	int getHealthAttackCost();

	int getActionAttackCost();

	int getMindAttackCost();

	int getForceCost();

	int getPointBlankRange();

	int getPointBlankAccuracy();

	int getMaxRange();

	int getMaxRangeAccuracy();

	int getIdealRange();

	int getIdealAccuracy();

	float getWoundsRatio();

	int getArmorPiercing();

	int getPowerupUses();

	bool hasPowerup();

	String& getCert();

	String& getXpType();

	float getArea();

	void setType(int type);

	void setDamageType(int type);

	void setMinDamage(float minDmg);

	void setMaxDamage(float maxDmg);

	void setAttackSpeed(float attackSpd);

	void setHealthAttackCost(int healthCost);

	void setActionAttackCost(int actionCost);

	void setMindAttackCost(int mindCost);

	void setForceCost(int forceCost);

	void setWoundsRatio(float woundsRat);

	void setArmorPiercing(int armorPierce);

	void setPointBlankRange(int pointBlankRnge);

	void setPointBlankAccuracy(int pointBlankAcc);

	void setMaxRange(int maxRnge);

	void setMaxRangeAccuracy(int maxRangeAcc);

	void setIdealRange(int idealRnge);

	void setIdealAccuracy(int idealAcc);

	void setArea(float ar);

	void powerupMinDamage(float powerupValue);

	void powerupMaxDamage(float powerupValue);

	void powerupHealthAttackCost(float powerupValue);

	void powerupActionAttackCost(float powerupValue);

	void powerupMindAttackCost(float powerupValue);

	void powerupWoundsRatio(float powerupValue);

	void powerupAttackSpeed(float powerupValue);

	void powerupPointBlankAccuracy(float powerupValue);

	void powerupIdealRange(float powerupValue);

	void powerupIdealAccuracy(float powerupValue);

	void powerupMaxRangeAccuracy(float powerupValue);

	int getNumDots();

	int getDotType(int i);

	int getDotAttribute(int i);

	int getDotStrength(int i);

	int getDotPotency(int i);

	int getDotDuration(int i);

	int getDotUses(int i);

	bool decreaseDotUses(int i);

	void createTestDot(int type);

	void setPowerupUses(int uses);

	void setUsesRemaining(int charges);

	void setCert(String& certification);

	void setCertified(bool crt);

	void setXpType();

	void onEquip(Player* player);

	void onUnequip(Player* player);

	void onBroken();

	void onSlicingFailure(Player* slicer);

	void slice(Player* slicer);

protected:
	String _param0_setCert__String_;
};

class WeaponHelper : public DistributedObjectClassHelper, public Singleton<WeaponHelper> {
	static WeaponHelper* staticInitializer;

public:
	WeaponHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<WeaponHelper>;
};

#include "../TangibleObjectImplementation.h"

class WeaponServant : public TangibleObjectImplementation {
public:
	Weapon* _this;

public:
	WeaponServant(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int tp);
	WeaponServant(unsigned long long oid, int tp);
	virtual ~WeaponServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*WEAPON_H_*/
