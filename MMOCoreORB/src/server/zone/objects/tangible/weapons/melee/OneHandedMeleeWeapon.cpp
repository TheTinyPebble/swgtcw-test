/*
 *	server/zone/objects/tangible/weapons/melee/OneHandedMeleeWeapon.cpp generated by engine3 IDL compiler 0.55
 */

#include "OneHandedMeleeWeapon.h"

#include "OneHandedMeleeWeaponImplementation.h"

#include "../../../creature/CreatureObject.h"

#include "../MeleeWeapon.h"

/*
 *	OneHandedMeleeWeaponStub
 */

OneHandedMeleeWeapon::OneHandedMeleeWeapon(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, bool eqp) : MeleeWeapon(DummyConstructorParameter::instance()) {
	_impl = new OneHandedMeleeWeaponImplementation(oid, tempCRC, n, tempn, eqp);
	_impl->_setStub(this);
}

OneHandedMeleeWeapon::OneHandedMeleeWeapon(CreatureObject* creature, const String& temp, const UnicodeString& n, const String& tempn, bool eqp) : MeleeWeapon(DummyConstructorParameter::instance()) {
	_impl = new OneHandedMeleeWeaponImplementation(creature, temp, n, tempn, eqp);
	_impl->_setStub(this);
}

OneHandedMeleeWeapon::OneHandedMeleeWeapon(DummyConstructorParameter* param) : MeleeWeapon(param) {
}

OneHandedMeleeWeapon::~OneHandedMeleeWeapon() {
}

/*
 *	OneHandedMeleeWeaponAdapter
 */

OneHandedMeleeWeaponAdapter::OneHandedMeleeWeaponAdapter(OneHandedMeleeWeaponImplementation* obj) : MeleeWeaponAdapter(obj) {
}

Packet* OneHandedMeleeWeaponAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	default:
		return NULL;
	}

	return resp;
}

/*
 *	OneHandedMeleeWeaponHelper
 */

OneHandedMeleeWeaponHelper* OneHandedMeleeWeaponHelper::staticInitializer = OneHandedMeleeWeaponHelper::instance();

OneHandedMeleeWeaponHelper::OneHandedMeleeWeaponHelper() {
	className = "OneHandedMeleeWeapon";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void OneHandedMeleeWeaponHelper::finalizeHelper() {
	OneHandedMeleeWeaponHelper::finalize();
}

DistributedObject* OneHandedMeleeWeaponHelper::instantiateObject() {
	return new OneHandedMeleeWeapon(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* OneHandedMeleeWeaponHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new OneHandedMeleeWeaponAdapter((OneHandedMeleeWeaponImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	OneHandedMeleeWeaponServant
 */

OneHandedMeleeWeaponServant::OneHandedMeleeWeaponServant(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int tp, bool eqp) : MeleeWeaponImplementation(oid, tempCRC, n, tempn, tp, eqp) {
	_classHelper = OneHandedMeleeWeaponHelper::instance();
}

OneHandedMeleeWeaponServant::OneHandedMeleeWeaponServant(CreatureObject* creature, const String& temp, const UnicodeString& n, const String& tempn, int tp, bool eqp) : MeleeWeaponImplementation(creature, temp, n, tempn, tp, eqp) {
	_classHelper = OneHandedMeleeWeaponHelper::instance();
}

OneHandedMeleeWeaponServant::~OneHandedMeleeWeaponServant() {
}

void OneHandedMeleeWeaponServant::_setStub(DistributedObjectStub* stub) {
	_this = (OneHandedMeleeWeapon*) stub;
	MeleeWeaponServant::_setStub(stub);
}

DistributedObjectStub* OneHandedMeleeWeaponServant::_getStub() {
	return _this;
}

