/*
 *	server/zone/objects/tangible/weapons/jedi/OneHandedJediWeapon.cpp generated by engine3 IDL compiler 0.55
 */

#include "OneHandedJediWeapon.h"

#include "OneHandedJediWeaponImplementation.h"

#include "../../../creature/CreatureObject.h"

#include "../JediWeapon.h"

/*
 *	OneHandedJediWeaponStub
 */

OneHandedJediWeapon::OneHandedJediWeapon(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, bool eqp) : JediWeapon(DummyConstructorParameter::instance()) {
	_impl = new OneHandedJediWeaponImplementation(oid, tempCRC, n, tempn, eqp);
	_impl->_setStub(this);
}

OneHandedJediWeapon::OneHandedJediWeapon(CreatureObject* creature, const String& temp, const UnicodeString& n, const String& tempn, bool eqp) : JediWeapon(DummyConstructorParameter::instance()) {
	_impl = new OneHandedJediWeaponImplementation(creature, temp, n, tempn, eqp);
	_impl->_setStub(this);
}

OneHandedJediWeapon::OneHandedJediWeapon(DummyConstructorParameter* param) : JediWeapon(param) {
}

OneHandedJediWeapon::~OneHandedJediWeapon() {
}

/*
 *	OneHandedJediWeaponAdapter
 */

OneHandedJediWeaponAdapter::OneHandedJediWeaponAdapter(OneHandedJediWeaponImplementation* obj) : JediWeaponAdapter(obj) {
}

Packet* OneHandedJediWeaponAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	default:
		return NULL;
	}

	return resp;
}

/*
 *	OneHandedJediWeaponHelper
 */

OneHandedJediWeaponHelper* OneHandedJediWeaponHelper::staticInitializer = OneHandedJediWeaponHelper::instance();

OneHandedJediWeaponHelper::OneHandedJediWeaponHelper() {
	className = "OneHandedJediWeapon";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void OneHandedJediWeaponHelper::finalizeHelper() {
	OneHandedJediWeaponHelper::finalize();
}

DistributedObject* OneHandedJediWeaponHelper::instantiateObject() {
	return new OneHandedJediWeapon(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* OneHandedJediWeaponHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new OneHandedJediWeaponAdapter((OneHandedJediWeaponImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	OneHandedJediWeaponServant
 */

OneHandedJediWeaponServant::OneHandedJediWeaponServant(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int tp, bool eqp) : JediWeaponImplementation(oid, tempCRC, n, tempn, tp, eqp) {
	_classHelper = OneHandedJediWeaponHelper::instance();
}

OneHandedJediWeaponServant::OneHandedJediWeaponServant(CreatureObject* creature, const String& temp, const UnicodeString& n, const String& tempn, int tp, bool eqp) : JediWeaponImplementation(creature, temp, n, tempn, tp, eqp) {
	_classHelper = OneHandedJediWeaponHelper::instance();
}

OneHandedJediWeaponServant::~OneHandedJediWeaponServant() {
}

void OneHandedJediWeaponServant::_setStub(DistributedObjectStub* stub) {
	_this = (OneHandedJediWeapon*) stub;
	JediWeaponServant::_setStub(stub);
}

DistributedObjectStub* OneHandedJediWeaponServant::_getStub() {
	return _this;
}

