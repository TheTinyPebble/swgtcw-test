/*
 *	server/zone/objects/tangible/generic/Dice.cpp generated by engine3 IDL compiler 0.55
 */

#include "Dice.h"

#include "DiceImplementation.h"

#include "../../scene/SceneObject.h"

#include "../../creature/CreatureObject.h"

#include "../../player/Player.h"

#include "../TangibleObject.h"

#include "GenericItem.h"

/*
 *	DiceStub
 */

Dice::Dice(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn) : GenericItem(DummyConstructorParameter::instance()) {
	_impl = new DiceImplementation(oid, tempCRC, n, tempn);
	_impl->_setStub(this);
}

Dice::Dice(CreatureObject* creature, unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn) : GenericItem(DummyConstructorParameter::instance()) {
	_impl = new DiceImplementation(creature, oid, tempCRC, n, tempn);
	_impl->_setStub(this);
}

Dice::Dice(CreatureObject* creature, unsigned int tempCRC, const UnicodeString& n, const String& tempn) : GenericItem(DummyConstructorParameter::instance()) {
	_impl = new DiceImplementation(creature, tempCRC, n, tempn);
	_impl->_setStub(this);
}

Dice::Dice(DummyConstructorParameter* param) : GenericItem(param) {
}

Dice::~Dice() {
}

void Dice::generateAttributes(SceneObject* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((DiceImplementation*) _impl)->generateAttributes(obj);
}

void Dice::rollDice(Player* player, int dnum) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);
		method.addSignedIntParameter(dnum);

		method.executeWithVoidReturn();
	} else
		((DiceImplementation*) _impl)->rollDice(player, dnum);
}

void Dice::setConfigurableDice(int dsides) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addSignedIntParameter(dsides);

		method.executeWithVoidReturn();
	} else
		((DiceImplementation*) _impl)->setConfigurableDice(dsides);
}

/*
 *	DiceAdapter
 */

DiceAdapter::DiceAdapter(DiceImplementation* obj) : GenericItemAdapter(obj) {
}

Packet* DiceAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		generateAttributes((SceneObject*) inv->getObjectParameter());
		break;
	case 7:
		rollDice((Player*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case 8:
		setConfigurableDice(inv->getSignedIntParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void DiceAdapter::generateAttributes(SceneObject* obj) {
	return ((DiceImplementation*) impl)->generateAttributes(obj);
}

void DiceAdapter::rollDice(Player* player, int dnum) {
	return ((DiceImplementation*) impl)->rollDice(player, dnum);
}

void DiceAdapter::setConfigurableDice(int dsides) {
	return ((DiceImplementation*) impl)->setConfigurableDice(dsides);
}

/*
 *	DiceHelper
 */

DiceHelper* DiceHelper::staticInitializer = DiceHelper::instance();

DiceHelper::DiceHelper() {
	className = "Dice";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void DiceHelper::finalizeHelper() {
	DiceHelper::finalize();
}

DistributedObject* DiceHelper::instantiateObject() {
	return new Dice(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* DiceHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new DiceAdapter((DiceImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	DiceServant
 */

DiceServant::DiceServant(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int gitype) : GenericItemImplementation(oid, tempCRC, n, tempn, gitype) {
	_classHelper = DiceHelper::instance();
}

DiceServant::DiceServant(CreatureObject* creature, unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int gitype) : GenericItemImplementation(creature, oid, tempCRC, n, tempn, gitype) {
	_classHelper = DiceHelper::instance();
}

DiceServant::~DiceServant() {
}

void DiceServant::_setStub(DistributedObjectStub* stub) {
	_this = (Dice*) stub;
	GenericItemServant::_setStub(stub);
}

DistributedObjectStub* DiceServant::_getStub() {
	return _this;
}

