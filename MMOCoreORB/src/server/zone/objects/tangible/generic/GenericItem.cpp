/*
 *	server/zone/objects/tangible/generic/GenericItem.cpp generated by engine3 IDL compiler 0.55
 */

#include "GenericItem.h"

#include "GenericItemImplementation.h"

#include "../../scene/SceneObject.h"

#include "../../creature/CreatureObject.h"

#include "../../player/Player.h"

#include "../TangibleObject.h"

/*
 *	GenericItemStub
 */

GenericItem::GenericItem(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int gitype) : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new GenericItemImplementation(oid, tempCRC, n, tempn, gitype);
	_impl->_setStub(this);
}

GenericItem::GenericItem(CreatureObject* creature, unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int gitype) : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new GenericItemImplementation(creature, oid, tempCRC, n, tempn, gitype);
	_impl->_setStub(this);
}

GenericItem::GenericItem(CreatureObject* creature, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int gitype) : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new GenericItemImplementation(creature, tempCRC, n, tempn, gitype);
	_impl->_setStub(this);
}

GenericItem::GenericItem(DummyConstructorParameter* param) : TangibleObject(param) {
}

GenericItem::~GenericItem() {
}

void GenericItem::generateAttributes(SceneObject* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((GenericItemImplementation*) _impl)->generateAttributes(obj);
}

void GenericItem::setGenericItemType(int gitype) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addSignedIntParameter(gitype);

		method.executeWithVoidReturn();
	} else
		((GenericItemImplementation*) _impl)->setGenericItemType(gitype);
}

int GenericItem::getGenericItemType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		return method.executeWithSignedIntReturn();
	} else
		return ((GenericItemImplementation*) _impl)->getGenericItemType();
}

bool GenericItem::isDice() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return method.executeWithBooleanReturn();
	} else
		return ((GenericItemImplementation*) _impl)->isDice();
}

/*
 *	GenericItemAdapter
 */

GenericItemAdapter::GenericItemAdapter(GenericItemImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* GenericItemAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		generateAttributes((SceneObject*) inv->getObjectParameter());
		break;
	case 7:
		setGenericItemType(inv->getSignedIntParameter());
		break;
	case 8:
		resp->insertSignedInt(getGenericItemType());
		break;
	case 9:
		resp->insertBoolean(isDice());
		break;
	default:
		return NULL;
	}

	return resp;
}

void GenericItemAdapter::generateAttributes(SceneObject* obj) {
	return ((GenericItemImplementation*) impl)->generateAttributes(obj);
}

void GenericItemAdapter::setGenericItemType(int gitype) {
	return ((GenericItemImplementation*) impl)->setGenericItemType(gitype);
}

int GenericItemAdapter::getGenericItemType() {
	return ((GenericItemImplementation*) impl)->getGenericItemType();
}

bool GenericItemAdapter::isDice() {
	return ((GenericItemImplementation*) impl)->isDice();
}

/*
 *	GenericItemHelper
 */

GenericItemHelper* GenericItemHelper::staticInitializer = GenericItemHelper::instance();

GenericItemHelper::GenericItemHelper() {
	className = "GenericItem";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void GenericItemHelper::finalizeHelper() {
	GenericItemHelper::finalize();
}

DistributedObject* GenericItemHelper::instantiateObject() {
	return new GenericItem(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* GenericItemHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new GenericItemAdapter((GenericItemImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	GenericItemServant
 */

GenericItemServant::GenericItemServant(unsigned long long oid, int tp) : TangibleObjectImplementation(oid, tp) {
	_classHelper = GenericItemHelper::instance();
}

GenericItemServant::~GenericItemServant() {
}

void GenericItemServant::_setStub(DistributedObjectStub* stub) {
	_this = (GenericItem*) stub;
	TangibleObjectServant::_setStub(stub);
}

DistributedObjectStub* GenericItemServant::_getStub() {
	return _this;
}

