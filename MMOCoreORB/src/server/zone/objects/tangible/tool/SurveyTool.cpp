/*
 *	server/zone/objects/tangible/tool/SurveyTool.cpp generated by engine3 IDL compiler 0.60
 */

#include "SurveyTool.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/Zone.h"

/*
 *	SurveyToolStub
 */

enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 6,RPC_SETRANGE__INT_,RPC_GETRANGE__CREATUREOBJECT_,RPC_GETPOINTS__,RPC_CANSAMPLERADIOACTIVE__,RPC_TRYGAMBLE__,RPC_CLEARGAMBLE__,RPC_CONSENTRADIOACTIVESAMPLE__CREATUREOBJECT_,RPC_SENDRADIOACTIVEWARNING__CREATUREOBJECT_,RPC_SENDRANGESUI__CREATUREOBJECT_,RPC_SURVEYCNODEMINIGAMESUI__CREATUREOBJECT_,RPC_SURVEYCNODEMINIGAME__CREATUREOBJECT_INT_,RPC_CLEARRICHSAMPLELOCATION__,RPC_SETINUSE__BOOL_,RPC_ISINUSE__,RPC_SURVEYGNODEMINIGAMESUI__CREATUREOBJECT_,RPC_SURVEYGNODEMINIGAME__CREATUREOBJECT_INT_,RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_,RPC_SENDRESOURCELISTTO__CREATUREOBJECT_,RPC_SENDSURVEYTO__CREATUREOBJECT_STRING_,RPC_SENDSAMPLETO__CREATUREOBJECT_STRING_};

SurveyTool::SurveyTool() : ToolTangibleObject(DummyConstructorParameter::instance()) {
	SurveyToolImplementation* _implementation = new SurveyToolImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("SurveyTool");
}

SurveyTool::SurveyTool(DummyConstructorParameter* param) : ToolTangibleObject(param) {
	_setClassName("SurveyTool");
}

SurveyTool::~SurveyTool() {
}



void SurveyTool::initializeTransientMembers() {
	SurveyToolImplementation* _implementation = static_cast<SurveyToolImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void SurveyTool::loadTemplateData(SharedObjectTemplate* templateData) {
	SurveyToolImplementation* _implementation = static_cast<SurveyToolImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->loadTemplateData(templateData);
}

void SurveyTool::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player) {
	SurveyToolImplementation* _implementation = static_cast<SurveyToolImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->fillObjectMenuResponse(menuResponse, player);
}

void SurveyTool::updateCraftingValues(CraftingValues* values, bool firstUpdate) {
	SurveyToolImplementation* _implementation = static_cast<SurveyToolImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->updateCraftingValues(values, firstUpdate);
}

void SurveyTool::setRange(int r) {
	SurveyToolImplementation* _implementation = static_cast<SurveyToolImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETRANGE__INT_);
		method.addSignedIntParameter(r);

		method.executeWithVoidReturn();
	} else
		_implementation->setRange(r);
}

int SurveyTool::getRange(CreatureObject* player) {
	SurveyToolImplementation* _implementation = static_cast<SurveyToolImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETRANGE__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getRange(player);
}

int SurveyTool::getPoints() {
	SurveyToolImplementation* _implementation = static_cast<SurveyToolImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPOINTS__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getPoints();
}

bool SurveyTool::canSampleRadioactive() {
	SurveyToolImplementation* _implementation = static_cast<SurveyToolImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CANSAMPLERADIOACTIVE__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->canSampleRadioactive();
}

bool SurveyTool::tryGamble() {
	SurveyToolImplementation* _implementation = static_cast<SurveyToolImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_TRYGAMBLE__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->tryGamble();
}

void SurveyTool::clearGamble() {
	SurveyToolImplementation* _implementation = static_cast<SurveyToolImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLEARGAMBLE__);

		method.executeWithVoidReturn();
	} else
		_implementation->clearGamble();
}

void SurveyTool::consentRadioactiveSample(CreatureObject* player) {
	SurveyToolImplementation* _implementation = static_cast<SurveyToolImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CONSENTRADIOACTIVESAMPLE__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->consentRadioactiveSample(player);
}

void SurveyTool::sendRadioactiveWarning(CreatureObject* player) {
	SurveyToolImplementation* _implementation = static_cast<SurveyToolImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDRADIOACTIVEWARNING__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendRadioactiveWarning(player);
}

void SurveyTool::sendRangeSui(CreatureObject* player) {
	SurveyToolImplementation* _implementation = static_cast<SurveyToolImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDRANGESUI__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendRangeSui(player);
}

void SurveyTool::surveyCnodeMinigameSui(CreatureObject* player) {
	SurveyToolImplementation* _implementation = static_cast<SurveyToolImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SURVEYCNODEMINIGAMESUI__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->surveyCnodeMinigameSui(player);
}

void SurveyTool::surveyCnodeMinigame(CreatureObject* player, int value) {
	SurveyToolImplementation* _implementation = static_cast<SurveyToolImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SURVEYCNODEMINIGAME__CREATUREOBJECT_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->surveyCnodeMinigame(player, value);
}

Coordinate* SurveyTool::getRichSampleLocation() {
	SurveyToolImplementation* _implementation = static_cast<SurveyToolImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getRichSampleLocation();
}

void SurveyTool::clearRichSampleLocation() {
	SurveyToolImplementation* _implementation = static_cast<SurveyToolImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLEARRICHSAMPLELOCATION__);

		method.executeWithVoidReturn();
	} else
		_implementation->clearRichSampleLocation();
}

void SurveyTool::setInUse(bool use) {
	SurveyToolImplementation* _implementation = static_cast<SurveyToolImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETINUSE__BOOL_);
		method.addBooleanParameter(use);

		method.executeWithVoidReturn();
	} else
		_implementation->setInUse(use);
}

bool SurveyTool::isInUse() {
	SurveyToolImplementation* _implementation = static_cast<SurveyToolImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISINUSE__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isInUse();
}

void SurveyTool::surveyGnodeMinigameSui(CreatureObject* player) {
	SurveyToolImplementation* _implementation = static_cast<SurveyToolImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SURVEYGNODEMINIGAMESUI__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->surveyGnodeMinigameSui(player);
}

void SurveyTool::surveyGnodeMinigame(CreatureObject* player, int value) {
	SurveyToolImplementation* _implementation = static_cast<SurveyToolImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SURVEYGNODEMINIGAME__CREATUREOBJECT_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->surveyGnodeMinigame(player, value);
}

int SurveyTool::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	SurveyToolImplementation* _implementation = static_cast<SurveyToolImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->handleObjectMenuSelect(player, selectedID);
}

void SurveyTool::sendResourceListTo(CreatureObject* player) {
	SurveyToolImplementation* _implementation = static_cast<SurveyToolImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDRESOURCELISTTO__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendResourceListTo(player);
}

void SurveyTool::sendSurveyTo(CreatureObject* player, const String& resname) {
	SurveyToolImplementation* _implementation = static_cast<SurveyToolImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDSURVEYTO__CREATUREOBJECT_STRING_);
		method.addObjectParameter(player);
		method.addAsciiParameter(resname);

		method.executeWithVoidReturn();
	} else
		_implementation->sendSurveyTo(player, resname);
}

void SurveyTool::sendSampleTo(CreatureObject* player, const String& resname) {
	SurveyToolImplementation* _implementation = static_cast<SurveyToolImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDSAMPLETO__CREATUREOBJECT_STRING_);
		method.addObjectParameter(player);
		method.addAsciiParameter(resname);

		method.executeWithVoidReturn();
	} else
		_implementation->sendSampleTo(player, resname);
}

DistributedObjectServant* SurveyTool::_getImplementation() {

	_updated = true;
	return _impl;
}

void SurveyTool::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	SurveyToolImplementation
 */

SurveyToolImplementation::SurveyToolImplementation(DummyConstructorParameter* param) : ToolTangibleObjectImplementation(param) {
	_initializeImplementation();
}


SurveyToolImplementation::~SurveyToolImplementation() {
}


void SurveyToolImplementation::finalize() {
}

void SurveyToolImplementation::_initializeImplementation() {
	_setClassHelper(SurveyToolHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void SurveyToolImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<SurveyTool*>(stub);
	ToolTangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* SurveyToolImplementation::_getStub() {
	return _this;
}

SurveyToolImplementation::operator const SurveyTool*() {
	return _this;
}

void SurveyToolImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void SurveyToolImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void SurveyToolImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void SurveyToolImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void SurveyToolImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void SurveyToolImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void SurveyToolImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void SurveyToolImplementation::_serializationHelperMethod() {
	ToolTangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("SurveyTool");

}

void SurveyToolImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(SurveyToolImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool SurveyToolImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ToolTangibleObjectImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "SurveyTool.range") {
		TypeInfo<int >::parseFromBinaryStream(&range, stream);
		return true;
	}

	if (_name == "SurveyTool.points") {
		TypeInfo<int >::parseFromBinaryStream(&points, stream);
		return true;
	}

	if (_name == "SurveyTool.type") {
		TypeInfo<int >::parseFromBinaryStream(&type, stream);
		return true;
	}

	if (_name == "SurveyTool.surveyType") {
		TypeInfo<String >::parseFromBinaryStream(&surveyType, stream);
		return true;
	}

	if (_name == "SurveyTool.surveyAnimation") {
		TypeInfo<String >::parseFromBinaryStream(&surveyAnimation, stream);
		return true;
	}

	if (_name == "SurveyTool.sampleAnimation") {
		TypeInfo<String >::parseFromBinaryStream(&sampleAnimation, stream);
		return true;
	}

	if (_name == "SurveyTool.lastResourceSampleName") {
		TypeInfo<String >::parseFromBinaryStream(&lastResourceSampleName, stream);
		return true;
	}

	if (_name == "SurveyTool.lastResourceSurveyName") {
		TypeInfo<String >::parseFromBinaryStream(&lastResourceSurveyName, stream);
		return true;
	}

	if (_name == "SurveyTool.radioactiveOk") {
		TypeInfo<bool >::parseFromBinaryStream(&radioactiveOk, stream);
		return true;
	}

	if (_name == "SurveyTool.doGamble") {
		TypeInfo<bool >::parseFromBinaryStream(&doGamble, stream);
		return true;
	}

	if (_name == "SurveyTool.inUse") {
		TypeInfo<bool >::parseFromBinaryStream(&inUse, stream);
		return true;
	}


	return false;
}

void SurveyToolImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = SurveyToolImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int SurveyToolImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ToolTangibleObjectImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;
	_name = "SurveyTool.range";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&range, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SurveyTool.points";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&points, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SurveyTool.type";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&type, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SurveyTool.surveyType";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&surveyType, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SurveyTool.surveyAnimation";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&surveyAnimation, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SurveyTool.sampleAnimation";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&sampleAnimation, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SurveyTool.lastResourceSampleName";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&lastResourceSampleName, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SurveyTool.lastResourceSurveyName";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&lastResourceSurveyName, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SurveyTool.radioactiveOk";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&radioactiveOk, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SurveyTool.doGamble";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&doGamble, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SurveyTool.inUse";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&inUse, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 11;
}

SurveyToolImplementation::SurveyToolImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/tool/SurveyTool.idl():  		Logger.setLoggingName("SurveyTool");
	Logger::setLoggingName("SurveyTool");
	// server/zone/objects/tangible/tool/SurveyTool.idl():  		radioactiveOk = false;
	radioactiveOk = false;
	// server/zone/objects/tangible/tool/SurveyTool.idl():  		range = 0;
	range = 0;
	// server/zone/objects/tangible/tool/SurveyTool.idl():  		doGamble = false;
	doGamble = false;
	// server/zone/objects/tangible/tool/SurveyTool.idl():  		points = 0;
	points = 0;
	// server/zone/objects/tangible/tool/SurveyTool.idl():  		points = 0;
	points = 0;
	// server/zone/objects/tangible/tool/SurveyTool.idl():  		richSampleLocation = null;
	richSampleLocation = NULL;
}

void SurveyToolImplementation::initializeTransientMembers() {
	// server/zone/objects/tangible/tool/SurveyTool.idl():  		super.initializeTransientMembers();
	ToolTangibleObjectImplementation::initializeTransientMembers();
	// server/zone/objects/tangible/tool/SurveyTool.idl():  		richSampleLocation = null;
	richSampleLocation = NULL;
	// server/zone/objects/tangible/tool/SurveyTool.idl():  		doGamble = false;
	doGamble = false;
	// server/zone/objects/tangible/tool/SurveyTool.idl():  		inUse = false;
	inUse = false;
	// server/zone/objects/tangible/tool/SurveyTool.idl():  		Logger.setLoggingName("SurveyTool");
	Logger::setLoggingName("SurveyTool");
}

void SurveyToolImplementation::updateCraftingValues(CraftingValues* values, bool firstUpdate) {
}

int SurveyToolImplementation::getPoints() {
	// server/zone/objects/tangible/tool/SurveyTool.idl():  		return points;
	return points;
}

bool SurveyToolImplementation::canSampleRadioactive() {
	// server/zone/objects/tangible/tool/SurveyTool.idl():  		return radioactiveOk;
	return radioactiveOk;
}

bool SurveyToolImplementation::tryGamble() {
	// server/zone/objects/tangible/tool/SurveyTool.idl():  		return doGamble == true;
	return doGamble == true;
}

void SurveyToolImplementation::clearGamble() {
	// server/zone/objects/tangible/tool/SurveyTool.idl():  		doGamble = false;
	doGamble = false;
}

Coordinate* SurveyToolImplementation::getRichSampleLocation() {
	// server/zone/objects/tangible/tool/SurveyTool.idl():  		return richSampleLocation;
	return richSampleLocation;
}

void SurveyToolImplementation::clearRichSampleLocation() {
	// server/zone/objects/tangible/tool/SurveyTool.idl():  		richSampleLocation = null;
	richSampleLocation = NULL;
}

void SurveyToolImplementation::setInUse(bool use) {
	// server/zone/objects/tangible/tool/SurveyTool.idl():  		inUse = use;
	inUse = use;
}

bool SurveyToolImplementation::isInUse() {
	// server/zone/objects/tangible/tool/SurveyTool.idl():  		return inUse;
	return inUse;
}

/*
 *	SurveyToolAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


SurveyToolAdapter::SurveyToolAdapter(SurveyTool* obj) : ToolTangibleObjectAdapter(obj) {
}

void SurveyToolAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			initializeTransientMembers();
		}
		break;
	case RPC_SETRANGE__INT_:
		{
			setRange(inv->getSignedIntParameter());
		}
		break;
	case RPC_GETRANGE__CREATUREOBJECT_:
		{
			resp->insertSignedInt(getRange(static_cast<CreatureObject*>(inv->getObjectParameter())));
		}
		break;
	case RPC_GETPOINTS__:
		{
			resp->insertSignedInt(getPoints());
		}
		break;
	case RPC_CANSAMPLERADIOACTIVE__:
		{
			resp->insertBoolean(canSampleRadioactive());
		}
		break;
	case RPC_TRYGAMBLE__:
		{
			resp->insertBoolean(tryGamble());
		}
		break;
	case RPC_CLEARGAMBLE__:
		{
			clearGamble();
		}
		break;
	case RPC_CONSENTRADIOACTIVESAMPLE__CREATUREOBJECT_:
		{
			consentRadioactiveSample(static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_SENDRADIOACTIVEWARNING__CREATUREOBJECT_:
		{
			sendRadioactiveWarning(static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_SENDRANGESUI__CREATUREOBJECT_:
		{
			sendRangeSui(static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_SURVEYCNODEMINIGAMESUI__CREATUREOBJECT_:
		{
			surveyCnodeMinigameSui(static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_SURVEYCNODEMINIGAME__CREATUREOBJECT_INT_:
		{
			surveyCnodeMinigame(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getSignedIntParameter());
		}
		break;
	case RPC_CLEARRICHSAMPLELOCATION__:
		{
			clearRichSampleLocation();
		}
		break;
	case RPC_SETINUSE__BOOL_:
		{
			setInUse(inv->getBooleanParameter());
		}
		break;
	case RPC_ISINUSE__:
		{
			resp->insertBoolean(isInUse());
		}
		break;
	case RPC_SURVEYGNODEMINIGAMESUI__CREATUREOBJECT_:
		{
			surveyGnodeMinigameSui(static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_SURVEYGNODEMINIGAME__CREATUREOBJECT_INT_:
		{
			surveyGnodeMinigame(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getSignedIntParameter());
		}
		break;
	case RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_:
		{
			resp->insertSignedInt(handleObjectMenuSelect(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getByteParameter()));
		}
		break;
	case RPC_SENDRESOURCELISTTO__CREATUREOBJECT_:
		{
			sendResourceListTo(static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_SENDSURVEYTO__CREATUREOBJECT_STRING_:
		{
			String resname; 
			sendSurveyTo(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getAsciiParameter(resname));
		}
		break;
	case RPC_SENDSAMPLETO__CREATUREOBJECT_STRING_:
		{
			String resname; 
			sendSampleTo(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getAsciiParameter(resname));
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void SurveyToolAdapter::initializeTransientMembers() {
	(static_cast<SurveyTool*>(stub))->initializeTransientMembers();
}

void SurveyToolAdapter::setRange(int r) {
	(static_cast<SurveyTool*>(stub))->setRange(r);
}

int SurveyToolAdapter::getRange(CreatureObject* player) {
	return (static_cast<SurveyTool*>(stub))->getRange(player);
}

int SurveyToolAdapter::getPoints() {
	return (static_cast<SurveyTool*>(stub))->getPoints();
}

bool SurveyToolAdapter::canSampleRadioactive() {
	return (static_cast<SurveyTool*>(stub))->canSampleRadioactive();
}

bool SurveyToolAdapter::tryGamble() {
	return (static_cast<SurveyTool*>(stub))->tryGamble();
}

void SurveyToolAdapter::clearGamble() {
	(static_cast<SurveyTool*>(stub))->clearGamble();
}

void SurveyToolAdapter::consentRadioactiveSample(CreatureObject* player) {
	(static_cast<SurveyTool*>(stub))->consentRadioactiveSample(player);
}

void SurveyToolAdapter::sendRadioactiveWarning(CreatureObject* player) {
	(static_cast<SurveyTool*>(stub))->sendRadioactiveWarning(player);
}

void SurveyToolAdapter::sendRangeSui(CreatureObject* player) {
	(static_cast<SurveyTool*>(stub))->sendRangeSui(player);
}

void SurveyToolAdapter::surveyCnodeMinigameSui(CreatureObject* player) {
	(static_cast<SurveyTool*>(stub))->surveyCnodeMinigameSui(player);
}

void SurveyToolAdapter::surveyCnodeMinigame(CreatureObject* player, int value) {
	(static_cast<SurveyTool*>(stub))->surveyCnodeMinigame(player, value);
}

void SurveyToolAdapter::clearRichSampleLocation() {
	(static_cast<SurveyTool*>(stub))->clearRichSampleLocation();
}

void SurveyToolAdapter::setInUse(bool use) {
	(static_cast<SurveyTool*>(stub))->setInUse(use);
}

bool SurveyToolAdapter::isInUse() {
	return (static_cast<SurveyTool*>(stub))->isInUse();
}

void SurveyToolAdapter::surveyGnodeMinigameSui(CreatureObject* player) {
	(static_cast<SurveyTool*>(stub))->surveyGnodeMinigameSui(player);
}

void SurveyToolAdapter::surveyGnodeMinigame(CreatureObject* player, int value) {
	(static_cast<SurveyTool*>(stub))->surveyGnodeMinigame(player, value);
}

int SurveyToolAdapter::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	return (static_cast<SurveyTool*>(stub))->handleObjectMenuSelect(player, selectedID);
}

void SurveyToolAdapter::sendResourceListTo(CreatureObject* player) {
	(static_cast<SurveyTool*>(stub))->sendResourceListTo(player);
}

void SurveyToolAdapter::sendSurveyTo(CreatureObject* player, const String& resname) {
	(static_cast<SurveyTool*>(stub))->sendSurveyTo(player, resname);
}

void SurveyToolAdapter::sendSampleTo(CreatureObject* player, const String& resname) {
	(static_cast<SurveyTool*>(stub))->sendSampleTo(player, resname);
}

/*
 *	SurveyToolHelper
 */

SurveyToolHelper* SurveyToolHelper::staticInitializer = SurveyToolHelper::instance();

SurveyToolHelper::SurveyToolHelper() {
	className = "SurveyTool";

	Core::getObjectBroker()->registerClass(className, this);
}

void SurveyToolHelper::finalizeHelper() {
	SurveyToolHelper::finalize();
}

DistributedObject* SurveyToolHelper::instantiateObject() {
	return new SurveyTool(DummyConstructorParameter::instance());
}

DistributedObjectServant* SurveyToolHelper::instantiateServant() {
	return new SurveyToolImplementation();
}

DistributedObjectAdapter* SurveyToolHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SurveyToolAdapter(static_cast<SurveyTool*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

