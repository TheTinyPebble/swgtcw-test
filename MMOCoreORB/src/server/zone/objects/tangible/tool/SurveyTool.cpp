/*
 *	server/zone/objects/tangible/tool/SurveyTool.cpp generated by engine3 IDL compiler 0.60
 */

#include "SurveyTool.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/Zone.h"

/*
 *	SurveyToolStub
 */

SurveyTool::SurveyTool() : ToolTangibleObject(DummyConstructorParameter::instance()) {
	_impl = new SurveyToolImplementation();
	_impl->_setStub(this);
}

SurveyTool::SurveyTool(DummyConstructorParameter* param) : ToolTangibleObject(param) {
}

SurveyTool::~SurveyTool() {
}


void SurveyTool::initializeTransientMembers() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((SurveyToolImplementation*) _impl)->initializeTransientMembers();
}

void SurveyTool::loadTemplateData(SharedObjectTemplate* templateData) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((SurveyToolImplementation*) _impl)->loadTemplateData(templateData);
}

void SurveyTool::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((SurveyToolImplementation*) _impl)->fillObjectMenuResponse(menuResponse, player);
}

void SurveyTool::setRange(int r) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addSignedIntParameter(r);

		method.executeWithVoidReturn();
	} else
		((SurveyToolImplementation*) _impl)->setRange(r);
}

int SurveyTool::getRange() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		return method.executeWithSignedIntReturn();
	} else
		return ((SurveyToolImplementation*) _impl)->getRange();
}

int SurveyTool::getPoints() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return method.executeWithSignedIntReturn();
	} else
		return ((SurveyToolImplementation*) _impl)->getPoints();
}

bool SurveyTool::canSampleRadioactive() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		return method.executeWithBooleanReturn();
	} else
		return ((SurveyToolImplementation*) _impl)->canSampleRadioactive();
}

void SurveyTool::consentRadioactiveSample() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		method.executeWithVoidReturn();
	} else
		((SurveyToolImplementation*) _impl)->consentRadioactiveSample();
}

void SurveyTool::sendRadioactiveWarning(PlayerCreature* playerCreature) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addObjectParameter(playerCreature);

		method.executeWithVoidReturn();
	} else
		((SurveyToolImplementation*) _impl)->sendRadioactiveWarning(playerCreature);
}

void SurveyTool::sendRangeSui(PlayerCreature* playerCreature) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addObjectParameter(playerCreature);

		method.executeWithVoidReturn();
	} else
		((SurveyToolImplementation*) _impl)->sendRangeSui(playerCreature);
}

int SurveyTool::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return ((SurveyToolImplementation*) _impl)->handleObjectMenuSelect(player, selectedID);
}

void SurveyTool::sendResourceListTo(PlayerCreature* playerCreature) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addObjectParameter(playerCreature);

		method.executeWithVoidReturn();
	} else
		((SurveyToolImplementation*) _impl)->sendResourceListTo(playerCreature);
}

void SurveyTool::sendSurveyTo(PlayerCreature* playerCreature, const String& resname) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addObjectParameter(playerCreature);
		method.addAsciiParameter(resname);

		method.executeWithVoidReturn();
	} else
		((SurveyToolImplementation*) _impl)->sendSurveyTo(playerCreature, resname);
}

void SurveyTool::sendSampleTo(PlayerCreature* playerCreature, const String& resname) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addObjectParameter(playerCreature);
		method.addAsciiParameter(resname);

		method.executeWithVoidReturn();
	} else
		((SurveyToolImplementation*) _impl)->sendSampleTo(playerCreature, resname);
}

/*
 *	SurveyToolImplementation
 */

SurveyToolImplementation::SurveyToolImplementation(DummyConstructorParameter* param) : ToolTangibleObjectImplementation(param) {
	_initializeImplementation();
}

SurveyToolImplementation::~SurveyToolImplementation() {
}


void SurveyToolImplementation::finalize() {
}

void SurveyToolImplementation::_initializeImplementation() {
	_setClassHelper(SurveyToolHelper::instance());

	_serializationHelperMethod();
}

void SurveyToolImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (SurveyTool*) stub;
	ToolTangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* SurveyToolImplementation::_getStub() {
	return _this;
}

SurveyToolImplementation::operator const SurveyTool*() {
	return _this;
}

void SurveyToolImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void SurveyToolImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void SurveyToolImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void SurveyToolImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void SurveyToolImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void SurveyToolImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void SurveyToolImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void SurveyToolImplementation::_serializationHelperMethod() {
	ToolTangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("SurveyTool");

	addSerializableVariable("range", &range);
	addSerializableVariable("points", &points);
	addSerializableVariable("type", &type);
	addSerializableVariable("surveyType", &surveyType);
	addSerializableVariable("surveyAnimation", &surveyAnimation);
	addSerializableVariable("sampleAnimation", &sampleAnimation);
	addSerializableVariable("lastResourceSampleName", &lastResourceSampleName);
	addSerializableVariable("radioactiveOk", &radioactiveOk);
}

SurveyToolImplementation::SurveyToolImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/tool/SurveyTool.idl(79):  		Logger.setLoggingName("SurveyTool");
	Logger::setLoggingName("SurveyTool");
	// server/zone/objects/tangible/tool/SurveyTool.idl(80):  		radioactiveOk = false;
	radioactiveOk = false;
	// server/zone/objects/tangible/tool/SurveyTool.idl(81):  		range = 0;
	range = 0;
}

void SurveyToolImplementation::initializeTransientMembers() {
	// server/zone/objects/tangible/tool/SurveyTool.idl(85):  		super.initializeTransientMembers();
	ToolTangibleObjectImplementation::initializeTransientMembers();
	// server/zone/objects/tangible/tool/SurveyTool.idl(87):  		Logger.setLoggingName("SurveyTool");
	Logger::setLoggingName("SurveyTool");
}

int SurveyToolImplementation::getRange() {
	// server/zone/objects/tangible/tool/SurveyTool.idl(104):  		return range;
	return range;
}

int SurveyToolImplementation::getPoints() {
	// server/zone/objects/tangible/tool/SurveyTool.idl(108):  		return points;
	return points;
}

bool SurveyToolImplementation::canSampleRadioactive() {
	// server/zone/objects/tangible/tool/SurveyTool.idl(112):  		return radioactiveOk;
	return radioactiveOk;
}

void SurveyToolImplementation::consentRadioactiveSample() {
	// server/zone/objects/tangible/tool/SurveyTool.idl(116):  		radioactiveOk = true;
	radioactiveOk = true;
}

/*
 *	SurveyToolAdapter
 */

SurveyToolAdapter::SurveyToolAdapter(SurveyToolImplementation* obj) : ToolTangibleObjectAdapter(obj) {
}

Packet* SurveyToolAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initializeTransientMembers();
		break;
	case 7:
		setRange(inv->getSignedIntParameter());
		break;
	case 8:
		resp->insertSignedInt(getRange());
		break;
	case 9:
		resp->insertSignedInt(getPoints());
		break;
	case 10:
		resp->insertBoolean(canSampleRadioactive());
		break;
	case 11:
		consentRadioactiveSample();
		break;
	case 12:
		sendRadioactiveWarning((PlayerCreature*) inv->getObjectParameter());
		break;
	case 13:
		sendRangeSui((PlayerCreature*) inv->getObjectParameter());
		break;
	case 14:
		resp->insertSignedInt(handleObjectMenuSelect((PlayerCreature*) inv->getObjectParameter(), inv->getByteParameter()));
		break;
	case 15:
		sendResourceListTo((PlayerCreature*) inv->getObjectParameter());
		break;
	case 16:
		sendSurveyTo((PlayerCreature*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_sendSurveyTo__PlayerCreature_String_));
		break;
	case 17:
		sendSampleTo((PlayerCreature*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_sendSampleTo__PlayerCreature_String_));
		break;
	default:
		return NULL;
	}

	return resp;
}

void SurveyToolAdapter::initializeTransientMembers() {
	((SurveyToolImplementation*) impl)->initializeTransientMembers();
}

void SurveyToolAdapter::setRange(int r) {
	((SurveyToolImplementation*) impl)->setRange(r);
}

int SurveyToolAdapter::getRange() {
	return ((SurveyToolImplementation*) impl)->getRange();
}

int SurveyToolAdapter::getPoints() {
	return ((SurveyToolImplementation*) impl)->getPoints();
}

bool SurveyToolAdapter::canSampleRadioactive() {
	return ((SurveyToolImplementation*) impl)->canSampleRadioactive();
}

void SurveyToolAdapter::consentRadioactiveSample() {
	((SurveyToolImplementation*) impl)->consentRadioactiveSample();
}

void SurveyToolAdapter::sendRadioactiveWarning(PlayerCreature* playerCreature) {
	((SurveyToolImplementation*) impl)->sendRadioactiveWarning(playerCreature);
}

void SurveyToolAdapter::sendRangeSui(PlayerCreature* playerCreature) {
	((SurveyToolImplementation*) impl)->sendRangeSui(playerCreature);
}

int SurveyToolAdapter::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	return ((SurveyToolImplementation*) impl)->handleObjectMenuSelect(player, selectedID);
}

void SurveyToolAdapter::sendResourceListTo(PlayerCreature* playerCreature) {
	((SurveyToolImplementation*) impl)->sendResourceListTo(playerCreature);
}

void SurveyToolAdapter::sendSurveyTo(PlayerCreature* playerCreature, const String& resname) {
	((SurveyToolImplementation*) impl)->sendSurveyTo(playerCreature, resname);
}

void SurveyToolAdapter::sendSampleTo(PlayerCreature* playerCreature, const String& resname) {
	((SurveyToolImplementation*) impl)->sendSampleTo(playerCreature, resname);
}

/*
 *	SurveyToolHelper
 */

SurveyToolHelper* SurveyToolHelper::staticInitializer = SurveyToolHelper::instance();

SurveyToolHelper::SurveyToolHelper() {
	className = "SurveyTool";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void SurveyToolHelper::finalizeHelper() {
	SurveyToolHelper::finalize();
}

DistributedObject* SurveyToolHelper::instantiateObject() {
	return new SurveyTool(DummyConstructorParameter::instance());
}

DistributedObjectServant* SurveyToolHelper::instantiateServant() {
	return new SurveyToolImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* SurveyToolHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SurveyToolAdapter((SurveyToolImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

