/*
 *	server/zone/objects/tangible/tool/CraftingStation.cpp generated by engine3 IDL compiler 0.60
 */

#include "CraftingStation.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/Zone.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/manufactureschematic/ManufactureSchematic.h"

/*
 *	CraftingStationStub
 */

CraftingStation::CraftingStation() : ToolTangibleObject(DummyConstructorParameter::instance()) {
	_impl = new CraftingStationImplementation();
	_impl->_setStub(this);
}

CraftingStation::CraftingStation(DummyConstructorParameter* param) : ToolTangibleObject(param) {
}

CraftingStation::~CraftingStation() {
}


void CraftingStation::initializeTransientMembers() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((CraftingStationImplementation*) _impl)->initializeTransientMembers();
}

void CraftingStation::loadTemplateData(SharedObjectTemplate* templateData) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((CraftingStationImplementation*) _impl)->loadTemplateData(templateData);
}

void CraftingStation::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((CraftingStationImplementation*) _impl)->fillObjectMenuResponse(menuResponse, player);
}

int CraftingStation::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return ((CraftingStationImplementation*) _impl)->handleObjectMenuSelect(player, selectedID);
}

void CraftingStation::fillAttributeList(AttributeListMessage* msg, PlayerCreature* object) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((CraftingStationImplementation*) _impl)->fillAttributeList(msg, object);
}

void CraftingStation::updateCraftingValues(ManufactureSchematic* schematic) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(schematic);

		method.executeWithVoidReturn();
	} else
		((CraftingStationImplementation*) _impl)->updateCraftingValues(schematic);
}

bool CraftingStation::isCraftingStation() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return method.executeWithBooleanReturn();
	} else
		return ((CraftingStationImplementation*) _impl)->isCraftingStation();
}

int CraftingStation::getComplexityLevel() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		return method.executeWithSignedIntReturn();
	} else
		return ((CraftingStationImplementation*) _impl)->getComplexityLevel();
}

int CraftingStation::getStationType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		return method.executeWithSignedIntReturn();
	} else
		return ((CraftingStationImplementation*) _impl)->getStationType();
}

void CraftingStation::setComplexityLevel(int level) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addSignedIntParameter(level);

		method.executeWithVoidReturn();
	} else
		((CraftingStationImplementation*) _impl)->setComplexityLevel(level);
}

SceneObject* CraftingStation::findCraftingTool(PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addObjectParameter(player);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((CraftingStationImplementation*) _impl)->findCraftingTool(player);
}

void CraftingStation::createChildObjects() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		method.executeWithVoidReturn();
	} else
		((CraftingStationImplementation*) _impl)->createChildObjects();
}

/*
 *	CraftingStationImplementation
 */

CraftingStationImplementation::CraftingStationImplementation(DummyConstructorParameter* param) : ToolTangibleObjectImplementation(param) {
	_initializeImplementation();
}


CraftingStationImplementation::~CraftingStationImplementation() {
}


void CraftingStationImplementation::finalize() {
}

void CraftingStationImplementation::_initializeImplementation() {
	_setClassHelper(CraftingStationHelper::instance());

	_serializationHelperMethod();
}

void CraftingStationImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (CraftingStation*) stub;
	ToolTangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* CraftingStationImplementation::_getStub() {
	return _this;
}

CraftingStationImplementation::operator const CraftingStation*() {
	return _this;
}

void CraftingStationImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void CraftingStationImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void CraftingStationImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void CraftingStationImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void CraftingStationImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void CraftingStationImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void CraftingStationImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void CraftingStationImplementation::_serializationHelperMethod() {
	ToolTangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("CraftingStation");

	addSerializableVariable("type", &type);
	addSerializableVariable("effectiveness", &effectiveness);
	addSerializableVariable("complexityLevel", &complexityLevel);
}

CraftingStationImplementation::CraftingStationImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/tool/CraftingStation.idl(62):  		Logger.setLoggingName("CraftingStation");
	Logger::setLoggingName("CraftingStation");
	// server/zone/objects/tangible/tool/CraftingStation.idl(63):  		complexityLevel = 0;
	complexityLevel = 0;
	// server/zone/objects/tangible/tool/CraftingStation.idl(64):  		effectiveness = 25;
	effectiveness = 25;
}

void CraftingStationImplementation::initializeTransientMembers() {
	// server/zone/objects/tangible/tool/CraftingStation.idl(68):  		super.initializeTransientMembers();
	ToolTangibleObjectImplementation::initializeTransientMembers();
	// server/zone/objects/tangible/tool/CraftingStation.idl(70):  		Logger.setLoggingName("CraftingStation");
	Logger::setLoggingName("CraftingStation");
}

bool CraftingStationImplementation::isCraftingStation() {
	// server/zone/objects/tangible/tool/CraftingStation.idl(100):  		return true;
	return true;
}

int CraftingStationImplementation::getComplexityLevel() {
	// server/zone/objects/tangible/tool/CraftingStation.idl(104):  		return complexityLevel;
	return complexityLevel;
}

int CraftingStationImplementation::getStationType() {
	// server/zone/objects/tangible/tool/CraftingStation.idl(108):  		return type;
	return type;
}

void CraftingStationImplementation::setComplexityLevel(int level) {
	// server/zone/objects/tangible/tool/CraftingStation.idl(112):  		complexityLevel = level;
	complexityLevel = level;
}

/*
 *	CraftingStationAdapter
 */

CraftingStationAdapter::CraftingStationAdapter(CraftingStationImplementation* obj) : ToolTangibleObjectAdapter(obj) {
}

Packet* CraftingStationAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initializeTransientMembers();
		break;
	case 7:
		resp->insertSignedInt(handleObjectMenuSelect((PlayerCreature*) inv->getObjectParameter(), inv->getByteParameter()));
		break;
	case 8:
		updateCraftingValues((ManufactureSchematic*) inv->getObjectParameter());
		break;
	case 9:
		resp->insertBoolean(isCraftingStation());
		break;
	case 10:
		resp->insertSignedInt(getComplexityLevel());
		break;
	case 11:
		resp->insertSignedInt(getStationType());
		break;
	case 12:
		setComplexityLevel(inv->getSignedIntParameter());
		break;
	case 13:
		resp->insertLong(findCraftingTool((PlayerCreature*) inv->getObjectParameter())->_getObjectID());
		break;
	case 14:
		createChildObjects();
		break;
	default:
		return NULL;
	}

	return resp;
}

void CraftingStationAdapter::initializeTransientMembers() {
	((CraftingStationImplementation*) impl)->initializeTransientMembers();
}

int CraftingStationAdapter::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	return ((CraftingStationImplementation*) impl)->handleObjectMenuSelect(player, selectedID);
}

void CraftingStationAdapter::updateCraftingValues(ManufactureSchematic* schematic) {
	((CraftingStationImplementation*) impl)->updateCraftingValues(schematic);
}

bool CraftingStationAdapter::isCraftingStation() {
	return ((CraftingStationImplementation*) impl)->isCraftingStation();
}

int CraftingStationAdapter::getComplexityLevel() {
	return ((CraftingStationImplementation*) impl)->getComplexityLevel();
}

int CraftingStationAdapter::getStationType() {
	return ((CraftingStationImplementation*) impl)->getStationType();
}

void CraftingStationAdapter::setComplexityLevel(int level) {
	((CraftingStationImplementation*) impl)->setComplexityLevel(level);
}

SceneObject* CraftingStationAdapter::findCraftingTool(PlayerCreature* player) {
	return ((CraftingStationImplementation*) impl)->findCraftingTool(player);
}

void CraftingStationAdapter::createChildObjects() {
	((CraftingStationImplementation*) impl)->createChildObjects();
}

/*
 *	CraftingStationHelper
 */

CraftingStationHelper* CraftingStationHelper::staticInitializer = CraftingStationHelper::instance();

CraftingStationHelper::CraftingStationHelper() {
	className = "CraftingStation";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void CraftingStationHelper::finalizeHelper() {
	CraftingStationHelper::finalize();
}

DistributedObject* CraftingStationHelper::instantiateObject() {
	return new CraftingStation(DummyConstructorParameter::instance());
}

DistributedObjectServant* CraftingStationHelper::instantiateServant() {
	return new CraftingStationImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* CraftingStationHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new CraftingStationAdapter((CraftingStationImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

