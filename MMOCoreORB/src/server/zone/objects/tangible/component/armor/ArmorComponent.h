/*
 *	server/zone/objects/tangible/component/armor/ArmorComponent.h generated by engine3 IDL compiler 0.60
 */

#ifndef ARMORCOMPONENT_H_
#define ARMORCOMPONENT_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

namespace server {
namespace zone {

class Zone;

} // namespace zone
} // namespace server

using namespace server::zone;

#include "server/zone/objects/manufactureschematic/craftingvalues/CraftingValues.h"

#include "server/zone/objects/tangible/component/Component.h"

#include "engine/lua/LuaObject.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace component {
namespace armor {

class ArmorComponent : public Component {
public:
	ArmorComponent();

	void initializeTransientMembers();

	void updateCraftingValues(CraftingValues* values, bool firstUpdate);

	void setKinetic(float value);

	void setEnergy(float value);

	void setElectricity(float value);

	void setStun(float value);

	void setBlast(float value);

	void setHeat(float value);

	void setCold(float value);

	void setAcid(float value);

	void setLightSaber(float value);

	DistributedObjectServant* _getImplementation();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	ArmorComponent(DummyConstructorParameter* param);

	virtual ~ArmorComponent();

	friend class ArmorComponentHelper;
};

} // namespace armor
} // namespace component
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::component::armor;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace component {
namespace armor {

class ArmorComponentImplementation : public ComponentImplementation {
protected:
	float kinetic;

	float energy;

	float electricity;

	float stun;

	float blast;

	float heat;

	float cold;

	float acid;

	float lightSaber;

public:
	ArmorComponentImplementation();

	ArmorComponentImplementation(DummyConstructorParameter* param);

	void initializeTransientMembers();

	void updateCraftingValues(CraftingValues* values, bool firstUpdate);

private:
	void calculateSpecialProtection(CraftingValues* values);

	String getStringType(int type);

	void setProtectionValue(int type, float value);

public:
	void setKinetic(float value);

	void setEnergy(float value);

	void setElectricity(float value);

	void setStun(float value);

	void setBlast(float value);

	void setHeat(float value);

	void setCold(float value);

	void setAcid(float value);

	void setLightSaber(float value);

	WeakReference<ArmorComponent*> _this;

	operator const ArmorComponent*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~ArmorComponentImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const String& name);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class ArmorComponent;
};

class ArmorComponentAdapter : public ComponentAdapter {
public:
	ArmorComponentAdapter(ArmorComponent* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initializeTransientMembers();

	void setKinetic(float value);

	void setEnergy(float value);

	void setElectricity(float value);

	void setStun(float value);

	void setBlast(float value);

	void setHeat(float value);

	void setCold(float value);

	void setAcid(float value);

	void setLightSaber(float value);

};

class ArmorComponentHelper : public DistributedObjectClassHelper, public Singleton<ArmorComponentHelper> {
	static ArmorComponentHelper* staticInitializer;

public:
	ArmorComponentHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<ArmorComponentHelper>;
};

} // namespace armor
} // namespace component
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::component::armor;

#endif /*ARMORCOMPONENT_H_*/
