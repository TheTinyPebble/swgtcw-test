/*
 *	server/zone/objects/tangible/component/Component.cpp generated by engine3 IDL compiler 0.60
 */

#include "Component.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/manufactureschematic/ManufactureSchematic.h"

/*
 *	ComponentStub
 */

Component::Component() : TangibleObject(DummyConstructorParameter::instance()) {
	ComponentImplementation* _implementation = new ComponentImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

Component::Component(DummyConstructorParameter* param) : TangibleObject(param) {
}

Component::~Component() {
}


void Component::initializeTransientMembers() {
	ComponentImplementation* _implementation = (ComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void Component::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player) {
	ComponentImplementation* _implementation = (ComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->fillObjectMenuResponse(menuResponse, player);
}

void Component::fillAttributeList(AttributeListMessage* msg, PlayerCreature* object) {
	ComponentImplementation* _implementation = (ComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->fillAttributeList(msg, object);
}

bool Component::isComponent() {
	ComponentImplementation* _implementation = (ComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isComponent();
}

void Component::generateLootStats(const String& lootstring, int level) {
	ComponentImplementation* _implementation = (ComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addAsciiParameter(lootstring);
		method.addSignedIntParameter(level);

		method.executeWithVoidReturn();
	} else
		_implementation->generateLootStats(lootstring, level);
}

bool Component::compare(Component* inCmpo) {
	ComponentImplementation* _implementation = (ComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(inCmpo);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->compare(inCmpo);
}

bool Component::hasKey(const String& key) {
	ComponentImplementation* _implementation = (ComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addAsciiParameter(key);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasKey(key);
}

void Component::updateCraftingValues(ManufactureSchematic* schematic) {
	ComponentImplementation* _implementation = (ComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addObjectParameter(schematic);

		method.executeWithVoidReturn();
	} else
		_implementation->updateCraftingValues(schematic);
}

void Component::addProperty(const String& attributeName, const float value, const int precision, const String& craftingTitle, const bool hidden) {
	ComponentImplementation* _implementation = (ComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addAsciiParameter(attributeName);
		method.addFloatParameter(value);
		method.addSignedIntParameter(precision);
		method.addAsciiParameter(craftingTitle);
		method.addBooleanParameter(hidden);

		method.executeWithVoidReturn();
	} else
		_implementation->addProperty(attributeName, value, precision, craftingTitle, hidden);
}

float Component::getAttributeValue(String& attributeName) {
	ComponentImplementation* _implementation = (ComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addAsciiParameter(attributeName);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getAttributeValue(attributeName);
}

int Component::getAttributePrecision(String& attributeName) {
	ComponentImplementation* _implementation = (ComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addAsciiParameter(attributeName);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getAttributePrecision(attributeName);
}

String Component::getAttributeTitle(String& attributeName) {
	ComponentImplementation* _implementation = (ComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addAsciiParameter(attributeName);

		method.executeWithAsciiReturn(_return_getAttributeTitle);
		return _return_getAttributeTitle;
	} else
		return _implementation->getAttributeTitle(attributeName);
}

bool Component::getAttributeHidden(String& attributeName) {
	ComponentImplementation* _implementation = (ComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addAsciiParameter(attributeName);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->getAttributeHidden(attributeName);
}

void Component::setPropertyToHidden(const String& property) {
	ComponentImplementation* _implementation = (ComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addAsciiParameter(property);

		method.executeWithVoidReturn();
	} else
		_implementation->setPropertyToHidden(property);
}

void Component::addProperty(const String& attribute, const float value, const int precision, const String& title) {
	ComponentImplementation* _implementation = (ComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addAsciiParameter(attribute);
		method.addFloatParameter(value);
		method.addSignedIntParameter(precision);
		method.addAsciiParameter(title);

		method.executeWithVoidReturn();
	} else
		_implementation->addProperty(attribute, value, precision, title);
}

int Component::getPropertyCount() {
	ComponentImplementation* _implementation = (ComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getPropertyCount();
}

String Component::getProperty(const int j) {
	ComponentImplementation* _implementation = (ComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addSignedIntParameter(j);

		method.executeWithAsciiReturn(_return_getProperty);
		return _return_getProperty;
	} else
		return _implementation->getProperty(j);
}

bool Component::changeAttributeValue(String& property, float value) {
	ComponentImplementation* _implementation = (ComponentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addAsciiParameter(property);
		method.addFloatParameter(value);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->changeAttributeValue(property, value);
}

DistributedObjectServant* Component::_getImplementation() {
	return _impl;}

void Component::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;}

/*
 *	ComponentImplementation
 */

ComponentImplementation::ComponentImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
	_initializeImplementation();
}


ComponentImplementation::~ComponentImplementation() {
}


void ComponentImplementation::finalize() {
}

void ComponentImplementation::_initializeImplementation() {
	_setClassHelper(ComponentHelper::instance());

	_serializationHelperMethod();
}

void ComponentImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (Component*) stub;
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* ComponentImplementation::_getStub() {
	return _this;
}

ComponentImplementation::operator const Component*() {
	return _this;
}

void ComponentImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void ComponentImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void ComponentImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void ComponentImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void ComponentImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void ComponentImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void ComponentImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void ComponentImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("Component");

	addSerializableVariable("attributeMap", &attributeMap);
	addSerializableVariable("precisionMap", &precisionMap);
	addSerializableVariable("titleMap", &titleMap);
	addSerializableVariable("hiddenMap", &hiddenMap);
	addSerializableVariable("keyList", &keyList);
}

ComponentImplementation::ComponentImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/component/Component.idl(74):  		Logger.setLoggingName("Component");
	Logger::setLoggingName("Component");
}

bool ComponentImplementation::isComponent() {
	// server/zone/objects/tangible/component/Component.idl(92):  		return true;
	return true;
}

bool ComponentImplementation::hasKey(const String& key) {
	// server/zone/objects/tangible/component/Component.idl(100):  
	for (	// server/zone/objects/tangible/component/Component.idl(100):  		for (int i = 0;
	int i = 0;
	i < (&keyList)->size();
 ++i) 	// server/zone/objects/tangible/component/Component.idl(101):  		return 
	if ((&keyList)->get(i) == key)	// server/zone/objects/tangible/component/Component.idl(102):  				return true;
	return true;
	// server/zone/objects/tangible/component/Component.idl(103):  false;
	return false;
}

/*
 *	ComponentAdapter
 */

ComponentAdapter::ComponentAdapter(ComponentImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* ComponentAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initializeTransientMembers();
		break;
	case 7:
		resp->insertBoolean(isComponent());
		break;
	case 8:
		generateLootStats(inv->getAsciiParameter(_param0_generateLootStats__String_int_), inv->getSignedIntParameter());
		break;
	case 9:
		resp->insertBoolean(compare((Component*) inv->getObjectParameter()));
		break;
	case 10:
		resp->insertBoolean(hasKey(inv->getAsciiParameter(_param0_hasKey__String_)));
		break;
	case 11:
		updateCraftingValues((ManufactureSchematic*) inv->getObjectParameter());
		break;
	case 12:
		addProperty(inv->getAsciiParameter(_param0_addProperty__String_float_int_String_bool_), inv->getFloatParameter(), inv->getSignedIntParameter(), inv->getAsciiParameter(_param3_addProperty__String_float_int_String_bool_), inv->getBooleanParameter());
		break;
	case 13:
		resp->insertFloat(getAttributeValue(inv->getAsciiParameter(_param0_getAttributeValue__String_)));
		break;
	case 14:
		resp->insertSignedInt(getAttributePrecision(inv->getAsciiParameter(_param0_getAttributePrecision__String_)));
		break;
	case 15:
		resp->insertAscii(getAttributeTitle(inv->getAsciiParameter(_param0_getAttributeTitle__String_)));
		break;
	case 16:
		resp->insertBoolean(getAttributeHidden(inv->getAsciiParameter(_param0_getAttributeHidden__String_)));
		break;
	case 17:
		setPropertyToHidden(inv->getAsciiParameter(_param0_setPropertyToHidden__String_));
		break;
	case 18:
		addProperty(inv->getAsciiParameter(_param0_addProperty__String_float_int_String_), inv->getFloatParameter(), inv->getSignedIntParameter(), inv->getAsciiParameter(_param3_addProperty__String_float_int_String_));
		break;
	case 19:
		resp->insertSignedInt(getPropertyCount());
		break;
	case 20:
		resp->insertAscii(getProperty(inv->getSignedIntParameter()));
		break;
	case 21:
		resp->insertBoolean(changeAttributeValue(inv->getAsciiParameter(_param0_changeAttributeValue__String_float_), inv->getFloatParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

void ComponentAdapter::initializeTransientMembers() {
	((ComponentImplementation*) impl)->initializeTransientMembers();
}

bool ComponentAdapter::isComponent() {
	return ((ComponentImplementation*) impl)->isComponent();
}

void ComponentAdapter::generateLootStats(const String& lootstring, int level) {
	((ComponentImplementation*) impl)->generateLootStats(lootstring, level);
}

bool ComponentAdapter::compare(Component* inCmpo) {
	return ((ComponentImplementation*) impl)->compare(inCmpo);
}

bool ComponentAdapter::hasKey(const String& key) {
	return ((ComponentImplementation*) impl)->hasKey(key);
}

void ComponentAdapter::updateCraftingValues(ManufactureSchematic* schematic) {
	((ComponentImplementation*) impl)->updateCraftingValues(schematic);
}

void ComponentAdapter::addProperty(const String& attributeName, const float value, const int precision, const String& craftingTitle, const bool hidden) {
	((ComponentImplementation*) impl)->addProperty(attributeName, value, precision, craftingTitle, hidden);
}

float ComponentAdapter::getAttributeValue(String& attributeName) {
	return ((ComponentImplementation*) impl)->getAttributeValue(attributeName);
}

int ComponentAdapter::getAttributePrecision(String& attributeName) {
	return ((ComponentImplementation*) impl)->getAttributePrecision(attributeName);
}

String ComponentAdapter::getAttributeTitle(String& attributeName) {
	return ((ComponentImplementation*) impl)->getAttributeTitle(attributeName);
}

bool ComponentAdapter::getAttributeHidden(String& attributeName) {
	return ((ComponentImplementation*) impl)->getAttributeHidden(attributeName);
}

void ComponentAdapter::setPropertyToHidden(const String& property) {
	((ComponentImplementation*) impl)->setPropertyToHidden(property);
}

void ComponentAdapter::addProperty(const String& attribute, const float value, const int precision, const String& title) {
	((ComponentImplementation*) impl)->addProperty(attribute, value, precision, title);
}

int ComponentAdapter::getPropertyCount() {
	return ((ComponentImplementation*) impl)->getPropertyCount();
}

String ComponentAdapter::getProperty(const int j) {
	return ((ComponentImplementation*) impl)->getProperty(j);
}

bool ComponentAdapter::changeAttributeValue(String& property, float value) {
	return ((ComponentImplementation*) impl)->changeAttributeValue(property, value);
}

/*
 *	ComponentHelper
 */

ComponentHelper* ComponentHelper::staticInitializer = ComponentHelper::instance();

ComponentHelper::ComponentHelper() {
	className = "Component";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void ComponentHelper::finalizeHelper() {
	ComponentHelper::finalize();
}

DistributedObject* ComponentHelper::instantiateObject() {
	return new Component(DummyConstructorParameter::instance());
}

DistributedObjectServant* ComponentHelper::instantiateServant() {
	return new ComponentImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ComponentHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ComponentAdapter((ComponentImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

