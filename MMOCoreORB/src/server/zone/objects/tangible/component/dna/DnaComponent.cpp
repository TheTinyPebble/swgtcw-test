/*
 *	server/zone/objects/tangible/component/dna/DnaComponent.cpp generated by engine3 IDL compiler 0.60
 */

#include "DnaComponent.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/Zone.h"

#include "server/zone/templates/mobile/CreatureTemplate.h"

/*
 *	DnaComponentStub
 */

enum {RPC_SETSTATS__INT_INT_INT_INT_INT_INT_INT_INT_INT_INT_ = 6,RPC_SETCLEVERNESS__INT_,RPC_GETCLEVERNESS__,RPC_SETENDURANCE__INT_,RPC_GETENDURANCE__,RPC_SETFIERCENESS__INT_,RPC_GETFIERCENESS__,RPC_SETPOWER__INT_,RPC_GETPOWER__,RPC_SETINTELLECT__INT_,RPC_GETINTELLECT__,RPC_SETCOURAGE__INT_,RPC_GETCOURAGE__,RPC_SETDEPENDENCY__INT_,RPC_GETDEPENDENCY__,RPC_SETDEXTERITY__INT_,RPC_GETDEXTERITY__,RPC_SETFORTITUDE__INT_,RPC_GETFORITITUDE__,RPC_SETHARDINESS__INT_,RPC_GETHARDINESS__,RPC_SETENERGY__FLOAT_,RPC_GETENERGY__,RPC_SETBLAST__FLOAT_,RPC_GETBLAST__,RPC_SETCOLD__FLOAT_,RPC_GETCOLD__,RPC_SETHEAT__FLOAT_,RPC_GETHEAT__,RPC_SETELECTRIC__FLOAT_,RPC_GETELECTRIC__,RPC_SETACID__FLOAT_,RPC_GETACID__,RPC_SETSTUN__FLOAT_,RPC_GETSTUN__,RPC_SETSABER__FLOAT_,RPC_GETSABER__,RPC_SETARMORRATING__INT_,RPC_SETKINETIC__FLOAT_,RPC_GETKINETIC__,RPC_SETSOURCE__STRING_,RPC_SETSPECIALATTACKONE__STRING_,RPC_GETSPECIALATTACKONE__,RPC_SETSPECIALATTACKTWO__STRING_,RPC_GETSPECIALATTACKTWO__,RPC_SETRANGED__BOOL_,RPC_ISRANGED__,RPC_SETQUALITY__INT_,RPC_GETQUALITY__,RPC_INITIALIZETRANSIENTMEMBERS__,RPC_CONVERTSPECIALATTACK__STRING_,RPC_RESISTVALUE__FLOAT_};

DnaComponent::DnaComponent() : Component(DummyConstructorParameter::instance()) {
	DnaComponentImplementation* _implementation = new DnaComponentImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("DnaComponent");
}

DnaComponent::DnaComponent(DummyConstructorParameter* param) : Component(param) {
	_setClassName("DnaComponent");
}

DnaComponent::~DnaComponent() {
}



void DnaComponent::setStats(unsigned int cle, unsigned int end, unsigned int fie, unsigned int pow, unsigned int ite, unsigned int cou, unsigned int dep, unsigned int dex, unsigned int frt, unsigned int har) {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSTATS__INT_INT_INT_INT_INT_INT_INT_INT_INT_INT_);
		method.addUnsignedIntParameter(cle);
		method.addUnsignedIntParameter(end);
		method.addUnsignedIntParameter(fie);
		method.addUnsignedIntParameter(pow);
		method.addUnsignedIntParameter(ite);
		method.addUnsignedIntParameter(cou);
		method.addUnsignedIntParameter(dep);
		method.addUnsignedIntParameter(dex);
		method.addUnsignedIntParameter(frt);
		method.addUnsignedIntParameter(har);

		method.executeWithVoidReturn();
	} else
		_implementation->setStats(cle, end, fie, pow, ite, cou, dep, dex, frt, har);
}

void DnaComponent::setCleverness(unsigned int value) {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCLEVERNESS__INT_);
		method.addUnsignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setCleverness(value);
}

unsigned int DnaComponent::getCleverness() {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCLEVERNESS__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getCleverness();
}

void DnaComponent::setEndurance(unsigned int value) {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETENDURANCE__INT_);
		method.addUnsignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setEndurance(value);
}

unsigned int DnaComponent::getEndurance() {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETENDURANCE__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getEndurance();
}

void DnaComponent::setFierceness(unsigned int value) {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETFIERCENESS__INT_);
		method.addUnsignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setFierceness(value);
}

unsigned int DnaComponent::getFierceness() {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFIERCENESS__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getFierceness();
}

void DnaComponent::setPower(unsigned int value) {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPOWER__INT_);
		method.addUnsignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setPower(value);
}

unsigned int DnaComponent::getPower() {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPOWER__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getPower();
}

void DnaComponent::setIntellect(unsigned int value) {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETINTELLECT__INT_);
		method.addUnsignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setIntellect(value);
}

unsigned int DnaComponent::getIntellect() {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETINTELLECT__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getIntellect();
}

void DnaComponent::setCourage(unsigned int value) {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCOURAGE__INT_);
		method.addUnsignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setCourage(value);
}

unsigned int DnaComponent::getCourage() {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCOURAGE__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getCourage();
}

void DnaComponent::setDependency(unsigned int value) {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETDEPENDENCY__INT_);
		method.addUnsignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setDependency(value);
}

unsigned int DnaComponent::getDependency() {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDEPENDENCY__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getDependency();
}

void DnaComponent::setDexterity(unsigned int value) {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETDEXTERITY__INT_);
		method.addUnsignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setDexterity(value);
}

unsigned int DnaComponent::getDexterity() {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDEXTERITY__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getDexterity();
}

void DnaComponent::setFortitude(unsigned int value) {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETFORTITUDE__INT_);
		method.addUnsignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setFortitude(value);
}

unsigned int DnaComponent::getForititude() {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFORITITUDE__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getForititude();
}

void DnaComponent::setHardiness(unsigned int value) {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETHARDINESS__INT_);
		method.addUnsignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setHardiness(value);
}

unsigned int DnaComponent::getHardiness() {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETHARDINESS__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getHardiness();
}

void DnaComponent::setEnergy(float value) {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETENERGY__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setEnergy(value);
}

float DnaComponent::getEnergy() {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETENERGY__);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getEnergy();
}

void DnaComponent::setBlast(float value) {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETBLAST__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setBlast(value);
}

float DnaComponent::getBlast() {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETBLAST__);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getBlast();
}

void DnaComponent::setCold(float value) {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCOLD__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setCold(value);
}

float DnaComponent::getCold() {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCOLD__);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getCold();
}

void DnaComponent::setHeat(float value) {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETHEAT__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setHeat(value);
}

float DnaComponent::getHeat() {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETHEAT__);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getHeat();
}

void DnaComponent::setElectric(float value) {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETELECTRIC__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setElectric(value);
}

float DnaComponent::getElectric() {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETELECTRIC__);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getElectric();
}

void DnaComponent::setAcid(float value) {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETACID__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setAcid(value);
}

float DnaComponent::getAcid() {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETACID__);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getAcid();
}

void DnaComponent::setStun(float value) {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSTUN__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setStun(value);
}

float DnaComponent::getStun() {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSTUN__);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getStun();
}

void DnaComponent::setSaber(float value) {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSABER__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setSaber(value);
}

float DnaComponent::getSaber() {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSABER__);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getSaber();
}

void DnaComponent::setArmorRating(int rating) {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETARMORRATING__INT_);
		method.addSignedIntParameter(rating);

		method.executeWithVoidReturn();
	} else
		_implementation->setArmorRating(rating);
}

void DnaComponent::setKinetic(float value) {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETKINETIC__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setKinetic(value);
}

float DnaComponent::getKinetic() {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETKINETIC__);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getKinetic();
}

void DnaComponent::setSource(const String& src) {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSOURCE__STRING_);
		method.addAsciiParameter(src);

		method.executeWithVoidReturn();
	} else
		_implementation->setSource(src);
}

void DnaComponent::setSpecialAttackOne(const String& atk) {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSPECIALATTACKONE__STRING_);
		method.addAsciiParameter(atk);

		method.executeWithVoidReturn();
	} else
		_implementation->setSpecialAttackOne(atk);
}

String DnaComponent::getSpecialAttackOne() {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSPECIALATTACKONE__);

		String _return_getSpecialAttackOne;
		method.executeWithAsciiReturn(_return_getSpecialAttackOne);
		return _return_getSpecialAttackOne;
	} else
		return _implementation->getSpecialAttackOne();
}

void DnaComponent::setSpecialAttackTwo(const String& atk) {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSPECIALATTACKTWO__STRING_);
		method.addAsciiParameter(atk);

		method.executeWithVoidReturn();
	} else
		_implementation->setSpecialAttackTwo(atk);
}

String DnaComponent::getSpecialAttackTwo() {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSPECIALATTACKTWO__);

		String _return_getSpecialAttackTwo;
		method.executeWithAsciiReturn(_return_getSpecialAttackTwo);
		return _return_getSpecialAttackTwo;
	} else
		return _implementation->getSpecialAttackTwo();
}

void DnaComponent::setRanged(bool b) {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETRANGED__BOOL_);
		method.addBooleanParameter(b);

		method.executeWithVoidReturn();
	} else
		_implementation->setRanged(b);
}

bool DnaComponent::isRanged() {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISRANGED__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isRanged();
}

void DnaComponent::setQuality(int qual) {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETQUALITY__INT_);
		method.addSignedIntParameter(qual);

		method.executeWithVoidReturn();
	} else
		_implementation->setQuality(qual);
}

unsigned int DnaComponent::getQuality() {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETQUALITY__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getQuality();
}

void DnaComponent::initializeTransientMembers() {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void DnaComponent::updateCraftingValues(CraftingValues* values, bool firstUpdate) {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->updateCraftingValues(values, firstUpdate);
}

void DnaComponent::fillAttributeList(AttributeListMessage* msg, CreatureObject* object) {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->fillAttributeList(msg, object);
}

String DnaComponent::convertSpecialAttack(String& attackName) {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CONVERTSPECIALATTACK__STRING_);
		method.addAsciiParameter(attackName);

		String _return_convertSpecialAttack;
		method.executeWithAsciiReturn(_return_convertSpecialAttack);
		return _return_convertSpecialAttack;
	} else
		return _implementation->convertSpecialAttack(attackName);
}

String DnaComponent::resistValue(float input) {
	DnaComponentImplementation* _implementation = static_cast<DnaComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RESISTVALUE__FLOAT_);
		method.addFloatParameter(input);

		String _return_resistValue;
		method.executeWithAsciiReturn(_return_resistValue);
		return _return_resistValue;
	} else
		return _implementation->resistValue(input);
}

DistributedObjectServant* DnaComponent::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* DnaComponent::_getImplementationForRead() {
	return _impl;
}

void DnaComponent::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	DnaComponentImplementation
 */

DnaComponentImplementation::DnaComponentImplementation(DummyConstructorParameter* param) : ComponentImplementation(param) {
	_initializeImplementation();
}


DnaComponentImplementation::~DnaComponentImplementation() {
}


void DnaComponentImplementation::finalize() {
}

void DnaComponentImplementation::_initializeImplementation() {
	_setClassHelper(DnaComponentHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void DnaComponentImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<DnaComponent*>(stub);
	ComponentImplementation::_setStub(stub);
}

DistributedObjectStub* DnaComponentImplementation::_getStub() {
	return _this.get();
}

DnaComponentImplementation::operator const DnaComponent*() {
	return _this.get();
}

void DnaComponentImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void DnaComponentImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void DnaComponentImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void DnaComponentImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void DnaComponentImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void DnaComponentImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void DnaComponentImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void DnaComponentImplementation::_serializationHelperMethod() {
	ComponentImplementation::_serializationHelperMethod();

	_setClassName("DnaComponent");

}

void DnaComponentImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(DnaComponentImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool DnaComponentImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ComponentImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x537315ca: //DnaComponent.cleverness
		TypeInfo<unsigned int >::parseFromBinaryStream(&cleverness, stream);
		return true;

	case 0xf4af7fae: //DnaComponent.endurance
		TypeInfo<unsigned int >::parseFromBinaryStream(&endurance, stream);
		return true;

	case 0xf43f9d83: //DnaComponent.fierceness
		TypeInfo<unsigned int >::parseFromBinaryStream(&fierceness, stream);
		return true;

	case 0xefc2f678: //DnaComponent.power
		TypeInfo<unsigned int >::parseFromBinaryStream(&power, stream);
		return true;

	case 0xa2aa299c: //DnaComponent.intelligence
		TypeInfo<unsigned int >::parseFromBinaryStream(&intelligence, stream);
		return true;

	case 0xbf786897: //DnaComponent.courage
		TypeInfo<unsigned int >::parseFromBinaryStream(&courage, stream);
		return true;

	case 0x65db69d9: //DnaComponent.dependency
		TypeInfo<unsigned int >::parseFromBinaryStream(&dependency, stream);
		return true;

	case 0x3de40934: //DnaComponent.dexterity
		TypeInfo<unsigned int >::parseFromBinaryStream(&dexterity, stream);
		return true;

	case 0x8fefaa2b: //DnaComponent.fortitude
		TypeInfo<unsigned int >::parseFromBinaryStream(&fortitude, stream);
		return true;

	case 0x4583898d: //DnaComponent.hardiness
		TypeInfo<unsigned int >::parseFromBinaryStream(&hardiness, stream);
		return true;

	case 0x7e2ce408: //DnaComponent.source
		TypeInfo<String >::parseFromBinaryStream(&source, stream);
		return true;

	case 0x951debae: //DnaComponent.special1
		TypeInfo<String >::parseFromBinaryStream(&special1, stream);
		return true;

	case 0x985ecd77: //DnaComponent.special2
		TypeInfo<String >::parseFromBinaryStream(&special2, stream);
		return true;

	case 0x2add1d2: //DnaComponent.ranged
		TypeInfo<bool >::parseFromBinaryStream(&ranged, stream);
		return true;

	case 0xe6a04868: //DnaComponent.quality
		TypeInfo<int >::parseFromBinaryStream(&quality, stream);
		return true;

	case 0x82a47260: //DnaComponent.armorRating
		TypeInfo<int >::parseFromBinaryStream(&armorRating, stream);
		return true;

	case 0x73708b36: //DnaComponent.kinResist
		TypeInfo<float >::parseFromBinaryStream(&kinResist, stream);
		return true;

	case 0x9817b856: //DnaComponent.energyResist
		TypeInfo<float >::parseFromBinaryStream(&energyResist, stream);
		return true;

	case 0x3510d3f8: //DnaComponent.blastResist
		TypeInfo<float >::parseFromBinaryStream(&blastResist, stream);
		return true;

	case 0xe82e7169: //DnaComponent.coldResist
		TypeInfo<float >::parseFromBinaryStream(&coldResist, stream);
		return true;

	case 0x17442b7a: //DnaComponent.heatResist
		TypeInfo<float >::parseFromBinaryStream(&heatResist, stream);
		return true;

	case 0x938671cb: //DnaComponent.elecResist
		TypeInfo<float >::parseFromBinaryStream(&elecResist, stream);
		return true;

	case 0x972a1231: //DnaComponent.acidResist
		TypeInfo<float >::parseFromBinaryStream(&acidResist, stream);
		return true;

	case 0x8c896caf: //DnaComponent.stunResist
		TypeInfo<float >::parseFromBinaryStream(&stunResist, stream);
		return true;

	case 0x37c50636: //DnaComponent.saberResist
		TypeInfo<float >::parseFromBinaryStream(&saberResist, stream);
		return true;

	}

	return false;
}

void DnaComponentImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = DnaComponentImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int DnaComponentImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ComponentImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x537315ca; //DnaComponent.cleverness
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&cleverness, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xf4af7fae; //DnaComponent.endurance
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&endurance, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xf43f9d83; //DnaComponent.fierceness
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&fierceness, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xefc2f678; //DnaComponent.power
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&power, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xa2aa299c; //DnaComponent.intelligence
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&intelligence, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xbf786897; //DnaComponent.courage
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&courage, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x65db69d9; //DnaComponent.dependency
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&dependency, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x3de40934; //DnaComponent.dexterity
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&dexterity, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x8fefaa2b; //DnaComponent.fortitude
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&fortitude, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x4583898d; //DnaComponent.hardiness
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&hardiness, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x7e2ce408; //DnaComponent.source
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&source, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x951debae; //DnaComponent.special1
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&special1, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x985ecd77; //DnaComponent.special2
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&special2, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x2add1d2; //DnaComponent.ranged
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&ranged, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xe6a04868; //DnaComponent.quality
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&quality, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x82a47260; //DnaComponent.armorRating
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&armorRating, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x73708b36; //DnaComponent.kinResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&kinResist, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x9817b856; //DnaComponent.energyResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&energyResist, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x3510d3f8; //DnaComponent.blastResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&blastResist, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xe82e7169; //DnaComponent.coldResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&coldResist, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x17442b7a; //DnaComponent.heatResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&heatResist, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x938671cb; //DnaComponent.elecResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&elecResist, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x972a1231; //DnaComponent.acidResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&acidResist, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x8c896caf; //DnaComponent.stunResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&stunResist, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x37c50636; //DnaComponent.saberResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&saberResist, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 25;
}

DnaComponentImplementation::DnaComponentImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		Logger.setLoggingName("DnaComponent");
	Logger::setLoggingName("DnaComponent");
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		cleverness = 0;
	cleverness = 0;
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		endurance = 0;
	endurance = 0;
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		fierceness = 0;
	fierceness = 0;
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		power = 0;
	power = 0;
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		intelligence = 0;
	intelligence = 0;
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		courage = 0;
	courage = 0;
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		dependency = 0;
	dependency = 0;
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		dexterity = 0;
	dexterity = 0;
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		fortitude = 0;
	fortitude = 0;
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		hardiness = 0;
	hardiness = 0;
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		source = "unknown";
	source = "unknown";
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		special1 = "none";
	special1 = "none";
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		special2 = "none";
	special2 = "none";
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		ranged = false;
	ranged = false;
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		quality = 7;
	quality = 7;
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		armorRating = 0;
	armorRating = 0;
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		kinResist = 0;
	kinResist = 0;
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		energyResist = 0;
	energyResist = 0;
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		blastResist = 0;
	blastResist = 0;
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		coldResist = 0;
	coldResist = 0;
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		heatResist = 0;
	heatResist = 0;
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		elecResist = 0;
	elecResist = 0;
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		acidResist = 0;
	acidResist = 0;
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		stunResist = 0;
	stunResist = 0;
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		saberResist = -1;
	saberResist = -1;
}

void DnaComponentImplementation::setStats(unsigned int cle, unsigned int end, unsigned int fie, unsigned int pow, unsigned int ite, unsigned int cou, unsigned int dep, unsigned int dex, unsigned int frt, unsigned int har) {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		cleverness = cle;
	cleverness = cle;
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		endurance = end;
	endurance = end;
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		fierceness = fie;
	fierceness = fie;
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		power = pow;
	power = pow;
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		intelligence = ite;
	intelligence = ite;
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		courage = cou;
	courage = cou;
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		dependency = dep;
	dependency = dep;
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		fortitude = frt;
	fortitude = frt;
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		hardiness = har;
	hardiness = har;
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		dexterity = dex;
	dexterity = dex;
}

void DnaComponentImplementation::setCleverness(unsigned int value) {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		cleverness = value;
	cleverness = value;
}

unsigned int DnaComponentImplementation::getCleverness() {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		return cleverness;
	return cleverness;
}

void DnaComponentImplementation::setEndurance(unsigned int value) {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		endurance = value;
	endurance = value;
}

unsigned int DnaComponentImplementation::getEndurance() {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		return endurance;
	return endurance;
}

void DnaComponentImplementation::setFierceness(unsigned int value) {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		fierceness = value;
	fierceness = value;
}

unsigned int DnaComponentImplementation::getFierceness() {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		return fierceness;
	return fierceness;
}

void DnaComponentImplementation::setPower(unsigned int value) {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		power = value;
	power = value;
}

unsigned int DnaComponentImplementation::getPower() {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		return power;
	return power;
}

void DnaComponentImplementation::setIntellect(unsigned int value) {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		intelligence = value;
	intelligence = value;
}

unsigned int DnaComponentImplementation::getIntellect() {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		return intelligence;
	return intelligence;
}

void DnaComponentImplementation::setCourage(unsigned int value) {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		courage = value;
	courage = value;
}

unsigned int DnaComponentImplementation::getCourage() {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		return courage;
	return courage;
}

void DnaComponentImplementation::setDependency(unsigned int value) {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		dependency = value;
	dependency = value;
}

unsigned int DnaComponentImplementation::getDependency() {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		return dependency;
	return dependency;
}

void DnaComponentImplementation::setDexterity(unsigned int value) {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		dexterity = value;
	dexterity = value;
}

unsigned int DnaComponentImplementation::getDexterity() {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		return dexterity;
	return dexterity;
}

void DnaComponentImplementation::setFortitude(unsigned int value) {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		fortitude = value;
	fortitude = value;
}

unsigned int DnaComponentImplementation::getForititude() {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		return fortitude;
	return fortitude;
}

void DnaComponentImplementation::setHardiness(unsigned int value) {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		hardiness = value;
	hardiness = value;
}

unsigned int DnaComponentImplementation::getHardiness() {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		return hardiness;
	return hardiness;
}

void DnaComponentImplementation::setEnergy(float value) {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		energyResist = value;
	energyResist = value;
}

float DnaComponentImplementation::getEnergy() {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		return energyResist;
	return energyResist;
}

void DnaComponentImplementation::setBlast(float value) {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		blastResist = value;
	blastResist = value;
}

float DnaComponentImplementation::getBlast() {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		return blastResist;
	return blastResist;
}

void DnaComponentImplementation::setCold(float value) {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		coldResist = value;
	coldResist = value;
}

float DnaComponentImplementation::getCold() {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		return coldResist;
	return coldResist;
}

void DnaComponentImplementation::setHeat(float value) {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		heatResist = value;
	heatResist = value;
}

float DnaComponentImplementation::getHeat() {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		return heatResist;
	return heatResist;
}

void DnaComponentImplementation::setElectric(float value) {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		elecResist = value;
	elecResist = value;
}

float DnaComponentImplementation::getElectric() {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		return elecResist;
	return elecResist;
}

void DnaComponentImplementation::setAcid(float value) {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		acidResist = value;
	acidResist = value;
}

float DnaComponentImplementation::getAcid() {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		return acidResist;
	return acidResist;
}

void DnaComponentImplementation::setStun(float value) {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		stunResist = value;
	stunResist = value;
}

float DnaComponentImplementation::getStun() {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		return stunResist;
	return stunResist;
}

void DnaComponentImplementation::setSaber(float value) {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		saberResist = value;
	saberResist = value;
}

float DnaComponentImplementation::getSaber() {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		return saberResist;
	return saberResist;
}

void DnaComponentImplementation::setArmorRating(int rating) {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		armorRating = rating;
	armorRating = rating;
}

void DnaComponentImplementation::setKinetic(float value) {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		kinResist = value;
	kinResist = value;
}

float DnaComponentImplementation::getKinetic() {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		return kinResist;
	return kinResist;
}

void DnaComponentImplementation::setSource(const String& src) {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		source = src;
	source = src;
}

void DnaComponentImplementation::setSpecialAttackOne(const String& atk) {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		special1 = atk;
	special1 = atk;
}

String DnaComponentImplementation::getSpecialAttackOne() {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		return special1;
	return special1;
}

void DnaComponentImplementation::setSpecialAttackTwo(const String& atk) {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		special2 = atk;
	special2 = atk;
}

String DnaComponentImplementation::getSpecialAttackTwo() {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		return special2;
	return special2;
}

void DnaComponentImplementation::setRanged(bool b) {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		ranged = b;
	ranged = b;
}

bool DnaComponentImplementation::isRanged() {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		return ranged;
	return ranged;
}

void DnaComponentImplementation::setQuality(int qual) {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		quality = qual;
	quality = qual;
}

unsigned int DnaComponentImplementation::getQuality() {
	// server/zone/objects/tangible/component/dna/DnaComponent.idl():  		return quality;
	return quality;
}

/*
 *	DnaComponentAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


DnaComponentAdapter::DnaComponentAdapter(DnaComponent* obj) : ComponentAdapter(obj) {
}

void DnaComponentAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_SETSTATS__INT_INT_INT_INT_INT_INT_INT_INT_INT_INT_:
		{
			setStats(inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter());
		}
		break;
	case RPC_SETCLEVERNESS__INT_:
		{
			setCleverness(inv->getUnsignedIntParameter());
		}
		break;
	case RPC_GETCLEVERNESS__:
		{
			resp->insertInt(getCleverness());
		}
		break;
	case RPC_SETENDURANCE__INT_:
		{
			setEndurance(inv->getUnsignedIntParameter());
		}
		break;
	case RPC_GETENDURANCE__:
		{
			resp->insertInt(getEndurance());
		}
		break;
	case RPC_SETFIERCENESS__INT_:
		{
			setFierceness(inv->getUnsignedIntParameter());
		}
		break;
	case RPC_GETFIERCENESS__:
		{
			resp->insertInt(getFierceness());
		}
		break;
	case RPC_SETPOWER__INT_:
		{
			setPower(inv->getUnsignedIntParameter());
		}
		break;
	case RPC_GETPOWER__:
		{
			resp->insertInt(getPower());
		}
		break;
	case RPC_SETINTELLECT__INT_:
		{
			setIntellect(inv->getUnsignedIntParameter());
		}
		break;
	case RPC_GETINTELLECT__:
		{
			resp->insertInt(getIntellect());
		}
		break;
	case RPC_SETCOURAGE__INT_:
		{
			setCourage(inv->getUnsignedIntParameter());
		}
		break;
	case RPC_GETCOURAGE__:
		{
			resp->insertInt(getCourage());
		}
		break;
	case RPC_SETDEPENDENCY__INT_:
		{
			setDependency(inv->getUnsignedIntParameter());
		}
		break;
	case RPC_GETDEPENDENCY__:
		{
			resp->insertInt(getDependency());
		}
		break;
	case RPC_SETDEXTERITY__INT_:
		{
			setDexterity(inv->getUnsignedIntParameter());
		}
		break;
	case RPC_GETDEXTERITY__:
		{
			resp->insertInt(getDexterity());
		}
		break;
	case RPC_SETFORTITUDE__INT_:
		{
			setFortitude(inv->getUnsignedIntParameter());
		}
		break;
	case RPC_GETFORITITUDE__:
		{
			resp->insertInt(getForititude());
		}
		break;
	case RPC_SETHARDINESS__INT_:
		{
			setHardiness(inv->getUnsignedIntParameter());
		}
		break;
	case RPC_GETHARDINESS__:
		{
			resp->insertInt(getHardiness());
		}
		break;
	case RPC_SETENERGY__FLOAT_:
		{
			setEnergy(inv->getFloatParameter());
		}
		break;
	case RPC_GETENERGY__:
		{
			resp->insertFloat(getEnergy());
		}
		break;
	case RPC_SETBLAST__FLOAT_:
		{
			setBlast(inv->getFloatParameter());
		}
		break;
	case RPC_GETBLAST__:
		{
			resp->insertFloat(getBlast());
		}
		break;
	case RPC_SETCOLD__FLOAT_:
		{
			setCold(inv->getFloatParameter());
		}
		break;
	case RPC_GETCOLD__:
		{
			resp->insertFloat(getCold());
		}
		break;
	case RPC_SETHEAT__FLOAT_:
		{
			setHeat(inv->getFloatParameter());
		}
		break;
	case RPC_GETHEAT__:
		{
			resp->insertFloat(getHeat());
		}
		break;
	case RPC_SETELECTRIC__FLOAT_:
		{
			setElectric(inv->getFloatParameter());
		}
		break;
	case RPC_GETELECTRIC__:
		{
			resp->insertFloat(getElectric());
		}
		break;
	case RPC_SETACID__FLOAT_:
		{
			setAcid(inv->getFloatParameter());
		}
		break;
	case RPC_GETACID__:
		{
			resp->insertFloat(getAcid());
		}
		break;
	case RPC_SETSTUN__FLOAT_:
		{
			setStun(inv->getFloatParameter());
		}
		break;
	case RPC_GETSTUN__:
		{
			resp->insertFloat(getStun());
		}
		break;
	case RPC_SETSABER__FLOAT_:
		{
			setSaber(inv->getFloatParameter());
		}
		break;
	case RPC_GETSABER__:
		{
			resp->insertFloat(getSaber());
		}
		break;
	case RPC_SETARMORRATING__INT_:
		{
			setArmorRating(inv->getSignedIntParameter());
		}
		break;
	case RPC_SETKINETIC__FLOAT_:
		{
			setKinetic(inv->getFloatParameter());
		}
		break;
	case RPC_GETKINETIC__:
		{
			resp->insertFloat(getKinetic());
		}
		break;
	case RPC_SETSOURCE__STRING_:
		{
			String src; 
			setSource(inv->getAsciiParameter(src));
		}
		break;
	case RPC_SETSPECIALATTACKONE__STRING_:
		{
			String atk; 
			setSpecialAttackOne(inv->getAsciiParameter(atk));
		}
		break;
	case RPC_GETSPECIALATTACKONE__:
		{
			resp->insertAscii(getSpecialAttackOne());
		}
		break;
	case RPC_SETSPECIALATTACKTWO__STRING_:
		{
			String atk; 
			setSpecialAttackTwo(inv->getAsciiParameter(atk));
		}
		break;
	case RPC_GETSPECIALATTACKTWO__:
		{
			resp->insertAscii(getSpecialAttackTwo());
		}
		break;
	case RPC_SETRANGED__BOOL_:
		{
			setRanged(inv->getBooleanParameter());
		}
		break;
	case RPC_ISRANGED__:
		{
			resp->insertBoolean(isRanged());
		}
		break;
	case RPC_SETQUALITY__INT_:
		{
			setQuality(inv->getSignedIntParameter());
		}
		break;
	case RPC_GETQUALITY__:
		{
			resp->insertInt(getQuality());
		}
		break;
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			initializeTransientMembers();
		}
		break;
	case RPC_CONVERTSPECIALATTACK__STRING_:
		{
			String attackName; 
			resp->insertAscii(convertSpecialAttack(inv->getAsciiParameter(attackName)));
		}
		break;
	case RPC_RESISTVALUE__FLOAT_:
		{
			resp->insertAscii(resistValue(inv->getFloatParameter()));
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void DnaComponentAdapter::setStats(unsigned int cle, unsigned int end, unsigned int fie, unsigned int pow, unsigned int ite, unsigned int cou, unsigned int dep, unsigned int dex, unsigned int frt, unsigned int har) {
	(static_cast<DnaComponent*>(stub))->setStats(cle, end, fie, pow, ite, cou, dep, dex, frt, har);
}

void DnaComponentAdapter::setCleverness(unsigned int value) {
	(static_cast<DnaComponent*>(stub))->setCleverness(value);
}

unsigned int DnaComponentAdapter::getCleverness() {
	return (static_cast<DnaComponent*>(stub))->getCleverness();
}

void DnaComponentAdapter::setEndurance(unsigned int value) {
	(static_cast<DnaComponent*>(stub))->setEndurance(value);
}

unsigned int DnaComponentAdapter::getEndurance() {
	return (static_cast<DnaComponent*>(stub))->getEndurance();
}

void DnaComponentAdapter::setFierceness(unsigned int value) {
	(static_cast<DnaComponent*>(stub))->setFierceness(value);
}

unsigned int DnaComponentAdapter::getFierceness() {
	return (static_cast<DnaComponent*>(stub))->getFierceness();
}

void DnaComponentAdapter::setPower(unsigned int value) {
	(static_cast<DnaComponent*>(stub))->setPower(value);
}

unsigned int DnaComponentAdapter::getPower() {
	return (static_cast<DnaComponent*>(stub))->getPower();
}

void DnaComponentAdapter::setIntellect(unsigned int value) {
	(static_cast<DnaComponent*>(stub))->setIntellect(value);
}

unsigned int DnaComponentAdapter::getIntellect() {
	return (static_cast<DnaComponent*>(stub))->getIntellect();
}

void DnaComponentAdapter::setCourage(unsigned int value) {
	(static_cast<DnaComponent*>(stub))->setCourage(value);
}

unsigned int DnaComponentAdapter::getCourage() {
	return (static_cast<DnaComponent*>(stub))->getCourage();
}

void DnaComponentAdapter::setDependency(unsigned int value) {
	(static_cast<DnaComponent*>(stub))->setDependency(value);
}

unsigned int DnaComponentAdapter::getDependency() {
	return (static_cast<DnaComponent*>(stub))->getDependency();
}

void DnaComponentAdapter::setDexterity(unsigned int value) {
	(static_cast<DnaComponent*>(stub))->setDexterity(value);
}

unsigned int DnaComponentAdapter::getDexterity() {
	return (static_cast<DnaComponent*>(stub))->getDexterity();
}

void DnaComponentAdapter::setFortitude(unsigned int value) {
	(static_cast<DnaComponent*>(stub))->setFortitude(value);
}

unsigned int DnaComponentAdapter::getForititude() {
	return (static_cast<DnaComponent*>(stub))->getForititude();
}

void DnaComponentAdapter::setHardiness(unsigned int value) {
	(static_cast<DnaComponent*>(stub))->setHardiness(value);
}

unsigned int DnaComponentAdapter::getHardiness() {
	return (static_cast<DnaComponent*>(stub))->getHardiness();
}

void DnaComponentAdapter::setEnergy(float value) {
	(static_cast<DnaComponent*>(stub))->setEnergy(value);
}

float DnaComponentAdapter::getEnergy() {
	return (static_cast<DnaComponent*>(stub))->getEnergy();
}

void DnaComponentAdapter::setBlast(float value) {
	(static_cast<DnaComponent*>(stub))->setBlast(value);
}

float DnaComponentAdapter::getBlast() {
	return (static_cast<DnaComponent*>(stub))->getBlast();
}

void DnaComponentAdapter::setCold(float value) {
	(static_cast<DnaComponent*>(stub))->setCold(value);
}

float DnaComponentAdapter::getCold() {
	return (static_cast<DnaComponent*>(stub))->getCold();
}

void DnaComponentAdapter::setHeat(float value) {
	(static_cast<DnaComponent*>(stub))->setHeat(value);
}

float DnaComponentAdapter::getHeat() {
	return (static_cast<DnaComponent*>(stub))->getHeat();
}

void DnaComponentAdapter::setElectric(float value) {
	(static_cast<DnaComponent*>(stub))->setElectric(value);
}

float DnaComponentAdapter::getElectric() {
	return (static_cast<DnaComponent*>(stub))->getElectric();
}

void DnaComponentAdapter::setAcid(float value) {
	(static_cast<DnaComponent*>(stub))->setAcid(value);
}

float DnaComponentAdapter::getAcid() {
	return (static_cast<DnaComponent*>(stub))->getAcid();
}

void DnaComponentAdapter::setStun(float value) {
	(static_cast<DnaComponent*>(stub))->setStun(value);
}

float DnaComponentAdapter::getStun() {
	return (static_cast<DnaComponent*>(stub))->getStun();
}

void DnaComponentAdapter::setSaber(float value) {
	(static_cast<DnaComponent*>(stub))->setSaber(value);
}

float DnaComponentAdapter::getSaber() {
	return (static_cast<DnaComponent*>(stub))->getSaber();
}

void DnaComponentAdapter::setArmorRating(int rating) {
	(static_cast<DnaComponent*>(stub))->setArmorRating(rating);
}

void DnaComponentAdapter::setKinetic(float value) {
	(static_cast<DnaComponent*>(stub))->setKinetic(value);
}

float DnaComponentAdapter::getKinetic() {
	return (static_cast<DnaComponent*>(stub))->getKinetic();
}

void DnaComponentAdapter::setSource(const String& src) {
	(static_cast<DnaComponent*>(stub))->setSource(src);
}

void DnaComponentAdapter::setSpecialAttackOne(const String& atk) {
	(static_cast<DnaComponent*>(stub))->setSpecialAttackOne(atk);
}

String DnaComponentAdapter::getSpecialAttackOne() {
	return (static_cast<DnaComponent*>(stub))->getSpecialAttackOne();
}

void DnaComponentAdapter::setSpecialAttackTwo(const String& atk) {
	(static_cast<DnaComponent*>(stub))->setSpecialAttackTwo(atk);
}

String DnaComponentAdapter::getSpecialAttackTwo() {
	return (static_cast<DnaComponent*>(stub))->getSpecialAttackTwo();
}

void DnaComponentAdapter::setRanged(bool b) {
	(static_cast<DnaComponent*>(stub))->setRanged(b);
}

bool DnaComponentAdapter::isRanged() {
	return (static_cast<DnaComponent*>(stub))->isRanged();
}

void DnaComponentAdapter::setQuality(int qual) {
	(static_cast<DnaComponent*>(stub))->setQuality(qual);
}

unsigned int DnaComponentAdapter::getQuality() {
	return (static_cast<DnaComponent*>(stub))->getQuality();
}

void DnaComponentAdapter::initializeTransientMembers() {
	(static_cast<DnaComponent*>(stub))->initializeTransientMembers();
}

String DnaComponentAdapter::convertSpecialAttack(String& attackName) {
	return (static_cast<DnaComponent*>(stub))->convertSpecialAttack(attackName);
}

String DnaComponentAdapter::resistValue(float input) {
	return (static_cast<DnaComponent*>(stub))->resistValue(input);
}

/*
 *	DnaComponentHelper
 */

DnaComponentHelper* DnaComponentHelper::staticInitializer = DnaComponentHelper::instance();

DnaComponentHelper::DnaComponentHelper() {
	className = "DnaComponent";

	Core::getObjectBroker()->registerClass(className, this);
}

void DnaComponentHelper::finalizeHelper() {
	DnaComponentHelper::finalize();
}

DistributedObject* DnaComponentHelper::instantiateObject() {
	return new DnaComponent(DummyConstructorParameter::instance());
}

DistributedObjectServant* DnaComponentHelper::instantiateServant() {
	return new DnaComponentImplementation();
}

DistributedObjectAdapter* DnaComponentHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new DnaComponentAdapter(static_cast<DnaComponent*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

