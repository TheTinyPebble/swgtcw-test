/*
 *	server/zone/objects/tangible/component/ShipComponent.cpp generated by engine3 IDL compiler 0.55
 */

#include "ShipComponent.h"

#include "ShipComponentImplementation.h"

#include "../../player/Player.h"

#include "../TangibleObject.h"

/*
 *	ShipComponentStub
 */

ShipComponent::ShipComponent(Player* player, unsigned int tempCRC, const UnicodeString& n, const String& tempn) : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new ShipComponentImplementation(player, tempCRC, n, tempn);
	_impl->_setStub(this);
}

ShipComponent::ShipComponent(DummyConstructorParameter* param) : TangibleObject(param) {
}

ShipComponent::~ShipComponent() {
}

void ShipComponent::erase() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((ShipComponentImplementation*) _impl)->erase();
}

int ShipComponent::useObject(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return ((ShipComponentImplementation*) _impl)->useObject(player);
}

unsigned int ShipComponent::getComponentCrc() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((ShipComponentImplementation*) _impl)->getComponentCrc();
}

void ShipComponent::setComponentCrc(unsigned int tcc) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addUnsignedIntParameter(tcc);

		method.executeWithVoidReturn();
	} else
		((ShipComponentImplementation*) _impl)->setComponentCrc(tcc);
}

float ShipComponent::getCurArmor() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		return method.executeWithFloatReturn();
	} else
		return ((ShipComponentImplementation*) _impl)->getCurArmor();
}

void ShipComponent::setCurArmor(float tca) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addFloatParameter(tca);

		method.executeWithVoidReturn();
	} else
		((ShipComponentImplementation*) _impl)->setCurArmor(tca);
}

float ShipComponent::getMaxArmor() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		return method.executeWithFloatReturn();
	} else
		return ((ShipComponentImplementation*) _impl)->getMaxArmor();
}

void ShipComponent::setMaxArmor(float tma) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addFloatParameter(tma);

		method.executeWithVoidReturn();
	} else
		((ShipComponentImplementation*) _impl)->setMaxArmor(tma);
}

float ShipComponent::getCurHitpoints() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		return method.executeWithFloatReturn();
	} else
		return ((ShipComponentImplementation*) _impl)->getCurHitpoints();
}

void ShipComponent::setCurHitpoints(float tch) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addFloatParameter(tch);

		method.executeWithVoidReturn();
	} else
		((ShipComponentImplementation*) _impl)->setCurHitpoints(tch);
}

float ShipComponent::getMaxHitpoints() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		return method.executeWithFloatReturn();
	} else
		return ((ShipComponentImplementation*) _impl)->getMaxHitpoints();
}

void ShipComponent::setMaxHitpoints(float tmh) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addFloatParameter(tmh);

		method.executeWithVoidReturn();
	} else
		((ShipComponentImplementation*) _impl)->setMaxHitpoints(tmh);
}

float ShipComponent::getEnergyDrain() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		return method.executeWithFloatReturn();
	} else
		return ((ShipComponentImplementation*) _impl)->getEnergyDrain();
}

void ShipComponent::setEnergyDrain(float ted) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addFloatParameter(ted);

		method.executeWithVoidReturn();
	} else
		((ShipComponentImplementation*) _impl)->setEnergyDrain(ted);
}

float ShipComponent::getMass() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);

		return method.executeWithFloatReturn();
	} else
		return ((ShipComponentImplementation*) _impl)->getMass();
}

void ShipComponent::setMass(float tm) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addFloatParameter(tm);

		method.executeWithVoidReturn();
	} else
		((ShipComponentImplementation*) _impl)->setMass(tm);
}

void ShipComponent::setCompType(int tct) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);
		method.addSignedIntParameter(tct);

		method.executeWithVoidReturn();
	} else
		((ShipComponentImplementation*) _impl)->setCompType(tct);
}

bool ShipComponent::getCompType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);

		return method.executeWithBooleanReturn();
	} else
		return ((ShipComponentImplementation*) _impl)->getCompType();
}

/*
 *	ShipComponentAdapter
 */

ShipComponentAdapter::ShipComponentAdapter(ShipComponentImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* ShipComponentAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		erase();
		break;
	case 7:
		resp->insertSignedInt(useObject((Player*) inv->getObjectParameter()));
		break;
	case 8:
		resp->insertInt(getComponentCrc());
		break;
	case 9:
		setComponentCrc(inv->getUnsignedIntParameter());
		break;
	case 10:
		resp->insertFloat(getCurArmor());
		break;
	case 11:
		setCurArmor(inv->getFloatParameter());
		break;
	case 12:
		resp->insertFloat(getMaxArmor());
		break;
	case 13:
		setMaxArmor(inv->getFloatParameter());
		break;
	case 14:
		resp->insertFloat(getCurHitpoints());
		break;
	case 15:
		setCurHitpoints(inv->getFloatParameter());
		break;
	case 16:
		resp->insertFloat(getMaxHitpoints());
		break;
	case 17:
		setMaxHitpoints(inv->getFloatParameter());
		break;
	case 18:
		resp->insertFloat(getEnergyDrain());
		break;
	case 19:
		setEnergyDrain(inv->getFloatParameter());
		break;
	case 20:
		resp->insertFloat(getMass());
		break;
	case 21:
		setMass(inv->getFloatParameter());
		break;
	case 22:
		setCompType(inv->getSignedIntParameter());
		break;
	case 23:
		resp->insertBoolean(getCompType());
		break;
	default:
		return NULL;
	}

	return resp;
}

void ShipComponentAdapter::erase() {
	return ((ShipComponentImplementation*) impl)->erase();
}

int ShipComponentAdapter::useObject(Player* player) {
	return ((ShipComponentImplementation*) impl)->useObject(player);
}

unsigned int ShipComponentAdapter::getComponentCrc() {
	return ((ShipComponentImplementation*) impl)->getComponentCrc();
}

void ShipComponentAdapter::setComponentCrc(unsigned int tcc) {
	return ((ShipComponentImplementation*) impl)->setComponentCrc(tcc);
}

float ShipComponentAdapter::getCurArmor() {
	return ((ShipComponentImplementation*) impl)->getCurArmor();
}

void ShipComponentAdapter::setCurArmor(float tca) {
	return ((ShipComponentImplementation*) impl)->setCurArmor(tca);
}

float ShipComponentAdapter::getMaxArmor() {
	return ((ShipComponentImplementation*) impl)->getMaxArmor();
}

void ShipComponentAdapter::setMaxArmor(float tma) {
	return ((ShipComponentImplementation*) impl)->setMaxArmor(tma);
}

float ShipComponentAdapter::getCurHitpoints() {
	return ((ShipComponentImplementation*) impl)->getCurHitpoints();
}

void ShipComponentAdapter::setCurHitpoints(float tch) {
	return ((ShipComponentImplementation*) impl)->setCurHitpoints(tch);
}

float ShipComponentAdapter::getMaxHitpoints() {
	return ((ShipComponentImplementation*) impl)->getMaxHitpoints();
}

void ShipComponentAdapter::setMaxHitpoints(float tmh) {
	return ((ShipComponentImplementation*) impl)->setMaxHitpoints(tmh);
}

float ShipComponentAdapter::getEnergyDrain() {
	return ((ShipComponentImplementation*) impl)->getEnergyDrain();
}

void ShipComponentAdapter::setEnergyDrain(float ted) {
	return ((ShipComponentImplementation*) impl)->setEnergyDrain(ted);
}

float ShipComponentAdapter::getMass() {
	return ((ShipComponentImplementation*) impl)->getMass();
}

void ShipComponentAdapter::setMass(float tm) {
	return ((ShipComponentImplementation*) impl)->setMass(tm);
}

void ShipComponentAdapter::setCompType(int tct) {
	return ((ShipComponentImplementation*) impl)->setCompType(tct);
}

bool ShipComponentAdapter::getCompType() {
	return ((ShipComponentImplementation*) impl)->getCompType();
}

/*
 *	ShipComponentHelper
 */

ShipComponentHelper* ShipComponentHelper::staticInitializer = ShipComponentHelper::instance();

ShipComponentHelper::ShipComponentHelper() {
	className = "ShipComponent";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void ShipComponentHelper::finalizeHelper() {
	ShipComponentHelper::finalize();
}

DistributedObject* ShipComponentHelper::instantiateObject() {
	return new ShipComponent(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ShipComponentHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ShipComponentAdapter((ShipComponentImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	ShipComponentServant
 */

ShipComponentServant::ShipComponentServant(unsigned long long oid, int tp) : TangibleObjectImplementation(oid, tp) {
	_classHelper = ShipComponentHelper::instance();
}

ShipComponentServant::~ShipComponentServant() {
}

void ShipComponentServant::_setStub(DistributedObjectStub* stub) {
	_this = (ShipComponent*) stub;
	TangibleObjectServant::_setStub(stub);
}

DistributedObjectStub* ShipComponentServant::_getStub() {
	return _this;
}

