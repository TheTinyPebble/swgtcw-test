/*
 *	server/zone/objects/tangible/pharmaceutical/CurePack.h generated by engine3 IDL compiler 0.55
 */

#ifndef CUREPACK_H_
#define CUREPACK_H_

#include "engine/orb/DistributedObjectBroker.h"

class SceneObject;

class CreatureObject;

class Player;

class TangibleObject;

class Pharmaceutical;

#include "Pharmaceutical.h"

class CurePack : public Pharmaceutical {
public:
	CurePack(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn);

	CurePack(CreatureObject* creature, unsigned int tempCRC, const UnicodeString& n, const String& tempn);

	void generateAttributes(SceneObject* obj);

	void setEffectiveness(float eff);

	void setState(unsigned long long condition);

	float getEffectiveness();

	unsigned long long getState();

	void setArea(float ar);

	float getArea();

	int calculatePower(CreatureObject* creature);

protected:
	CurePack(DummyConstructorParameter* param);

	virtual ~CurePack();

	friend class CurePackHelper;
};

class CurePackImplementation;

class CurePackAdapter : public PharmaceuticalAdapter {
public:
	CurePackAdapter(CurePackImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void generateAttributes(SceneObject* obj);

	void setEffectiveness(float eff);

	void setState(unsigned long long condition);

	float getEffectiveness();

	unsigned long long getState();

	void setArea(float ar);

	float getArea();

	int calculatePower(CreatureObject* creature);

};

class CurePackHelper : public DistributedObjectClassHelper, public Singleton<CurePackHelper> {
	static CurePackHelper* staticInitializer;

public:
	CurePackHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<CurePackHelper>;
};

#include "PharmaceuticalImplementation.h"

class CurePackServant : public PharmaceuticalImplementation {
public:
	CurePack* _this;

public:
	CurePackServant(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int mptype);
	CurePackServant(CreatureObject* creature, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int mptype);
	virtual ~CurePackServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*CUREPACK_H_*/
