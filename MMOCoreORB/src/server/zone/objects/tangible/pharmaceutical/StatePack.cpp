/*
 *	server/zone/objects/tangible/pharmaceutical/StatePack.cpp generated by engine3 IDL compiler 0.60
 */

#include "StatePack.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/Zone.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/objects/manufactureschematic/ManufactureSchematic.h"

/*
 *	StatePackStub
 */

StatePack::StatePack() : PharmaceuticalObject(DummyConstructorParameter::instance()) {
	StatePackImplementation* _implementation = new StatePackImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

StatePack::StatePack(DummyConstructorParameter* param) : PharmaceuticalObject(param) {
}

StatePack::~StatePack() {
}


void StatePack::updateCraftingValues(ManufactureSchematic* schematic) {
	StatePackImplementation* _implementation = (StatePackImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->updateCraftingValues(schematic);
}

void StatePack::loadTemplateData(SharedObjectTemplate* templateData) {
	StatePackImplementation* _implementation = (StatePackImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->loadTemplateData(templateData);
}

int StatePack::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	StatePackImplementation* _implementation = (StatePackImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->handleObjectMenuSelect(player, selectedID);
}

void StatePack::fillAttributeList(AttributeListMessage* msg, PlayerCreature* object) {
	StatePackImplementation* _implementation = (StatePackImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->fillAttributeList(msg, object);
}

unsigned long long StatePack::getState() {
	StatePackImplementation* _implementation = (StatePackImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		return method.executeWithUnsignedLongReturn();
	} else
		return _implementation->getState();
}

bool StatePack::isStatePack() {
	StatePackImplementation* _implementation = (StatePackImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isStatePack();
}

DistributedObjectServant* StatePack::_getImplementation() {

	_updated = true;
	return _impl;
}

void StatePack::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	StatePackImplementation
 */

StatePackImplementation::StatePackImplementation(DummyConstructorParameter* param) : PharmaceuticalObjectImplementation(param) {
	_initializeImplementation();
}


StatePackImplementation::~StatePackImplementation() {
}


void StatePackImplementation::finalize() {
}

void StatePackImplementation::_initializeImplementation() {
	_setClassHelper(StatePackHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void StatePackImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (StatePack*) stub;
	PharmaceuticalObjectImplementation::_setStub(stub);
}

DistributedObjectStub* StatePackImplementation::_getStub() {
	return _this;
}

StatePackImplementation::operator const StatePack*() {
	return _this;
}

void StatePackImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void StatePackImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void StatePackImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void StatePackImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void StatePackImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void StatePackImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void StatePackImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void StatePackImplementation::_serializationHelperMethod() {
	PharmaceuticalObjectImplementation::_serializationHelperMethod();

	_setClassName("StatePack");

}

void StatePackImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(StatePackImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool StatePackImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (PharmaceuticalObjectImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "state") {
		TypeInfo<unsigned long long >::parseFromBinaryStream(&state, stream);
		return true;
	}


	return false;
}

void StatePackImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = StatePackImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int StatePackImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "state";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned long long >::toBinaryStream(&state, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 1 + PharmaceuticalObjectImplementation::writeObjectMembers(stream);
}

StatePackImplementation::StatePackImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/pharmaceutical/StatePack.idl(65):  		setLoggingName("StatePack");
	setLoggingName("StatePack");
	// server/zone/objects/tangible/pharmaceutical/StatePack.idl(67):  		state = 0;
	state = 0;
}

void StatePackImplementation::updateCraftingValues(ManufactureSchematic* schematic) {
	// server/zone/objects/tangible/pharmaceutical/StatePack.idl(72):  		CraftingValues craftingValues = schematic.getCraftingValues();
	CraftingValues* craftingValues = schematic->getCraftingValues();
	// server/zone/objects/tangible/pharmaceutical/StatePack.idl(74):  		craftingValues.setHidden("power");
	craftingValues->setHidden("power");
	// server/zone/objects/tangible/pharmaceutical/StatePack.idl(75):  		craftingValues.setHidden("range");
	craftingValues->setHidden("range");
	// server/zone/objects/tangible/pharmaceutical/StatePack.idl(77):  		super.medicineUseRequired = craftingValues.getCurrentValue("skillmodmin");
	PharmaceuticalObjectImplementation::medicineUseRequired = craftingValues->getCurrentValue("skillmodmin");
	// server/zone/objects/tangible/pharmaceutical/StatePack.idl(78):  		setUseCount(craftingValues.getCurrentValue("charges"));
	setUseCount(craftingValues->getCurrentValue("charges"));
}

void StatePackImplementation::loadTemplateData(SharedObjectTemplate* templateData) {
	// server/zone/objects/tangible/pharmaceutical/StatePack.idl(89):  		super.loadTemplateData(templateData);
	PharmaceuticalObjectImplementation::loadTemplateData(templateData);
	// server/zone/objects/tangible/pharmaceutical/StatePack.idl(91):  		StatePackTemplate 
	if (!templateData->isStatePackTemplate())	// server/zone/objects/tangible/pharmaceutical/StatePack.idl(92):  			return;
	return;
	// server/zone/objects/tangible/pharmaceutical/StatePack.idl(94):  stimPackTemplate = (StatePackTemplate) templateData;
	StatePackTemplate* stimPackTemplate = (StatePackTemplate*) templateData;
	// server/zone/objects/tangible/pharmaceutical/StatePack.idl(96):  		state = stimPackTemplate.getState();
	state = stimPackTemplate->getState();
	// server/zone/objects/tangible/pharmaceutical/StatePack.idl(97):  		super.medicineUseRequired = stimPackTemplate.getMedicineUse();
	PharmaceuticalObjectImplementation::medicineUseRequired = stimPackTemplate->getMedicineUse();
}

int StatePackImplementation::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	// server/zone/objects/tangible/pharmaceutical/StatePack.idl(109):  		if 
	if (selectedID != 20)	// server/zone/objects/tangible/pharmaceutical/StatePack.idl(110):  			return 1;
	return 1;
	// server/zone/objects/tangible/pharmaceutical/StatePack.idl(112):  
	if (player->getSkillMod("healing_ability") < PharmaceuticalObjectImplementation::medicineUseRequired){
	// server/zone/objects/tangible/pharmaceutical/StatePack.idl(113):  			player.sendSystemMessage("error_message", "insufficient_skill");
	player->sendSystemMessage("error_message", "insufficient_skill");
	// server/zone/objects/tangible/pharmaceutical/StatePack.idl(115):  			return 0;
	return 0;
}

	else {
	// server/zone/objects/tangible/pharmaceutical/StatePack.idl(117):  			string command = "/healstate ";
	String command = "/healstate ";
	// server/zone/objects/tangible/pharmaceutical/StatePack.idl(118):  			command = command + CreatureState.getName(state);
	command = command + CreatureState::getName(state);
	// server/zone/objects/tangible/pharmaceutical/StatePack.idl(119):  			command = command + "|";
	command = command + "|";
	// server/zone/objects/tangible/pharmaceutical/StatePack.idl(120):  			command = command + String.valueOf(super.getObjectID());
	command = command + String::valueOf(PharmaceuticalObjectImplementation::getObjectID());
	// server/zone/objects/tangible/pharmaceutical/StatePack.idl(122):  			player.sendExecuteConsoleCommand(command);
	player->sendExecuteConsoleCommand(command);
	// server/zone/objects/tangible/pharmaceutical/StatePack.idl(124):  			return 0;
	return 0;
}
}

void StatePackImplementation::fillAttributeList(AttributeListMessage* msg, PlayerCreature* object) {
	// server/zone/objects/tangible/pharmaceutical/StatePack.idl(138):  		super.fillAttributeList(msg, object);
	PharmaceuticalObjectImplementation::fillAttributeList(msg, object);
	// server/zone/objects/tangible/pharmaceutical/StatePack.idl(140):  		string attributeName = CreatureState.getName(state);
	String attributeName = CreatureState::getName(state);
	// server/zone/objects/tangible/pharmaceutical/StatePack.idl(141):  		string enhace = "@obj_attr_n:state_type_" + attributeName;
	String enhace = "@obj_attr_n:state_type_" + attributeName;
	// server/zone/objects/tangible/pharmaceutical/StatePack.idl(143):  		msg.insertAttribute("examine_heal_state", enhace);
	msg->insertAttribute("examine_heal_state", enhace);
	// server/zone/objects/tangible/pharmaceutical/StatePack.idl(145):  		msg.insertAttribute("healing_ability", super.medicineUseRequired);
	msg->insertAttribute("healing_ability", PharmaceuticalObjectImplementation::medicineUseRequired);
}

unsigned long long StatePackImplementation::getState() {
	// server/zone/objects/tangible/pharmaceutical/StatePack.idl(149):  		return state;
	return state;
}

bool StatePackImplementation::isStatePack() {
	// server/zone/objects/tangible/pharmaceutical/StatePack.idl(153):  		return true;
	return true;
}

/*
 *	StatePackAdapter
 */

StatePackAdapter::StatePackAdapter(StatePackImplementation* obj) : PharmaceuticalObjectAdapter(obj) {
}

Packet* StatePackAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertSignedInt(handleObjectMenuSelect((PlayerCreature*) inv->getObjectParameter(), inv->getByteParameter()));
		break;
	case 7:
		resp->insertLong(getState());
		break;
	case 8:
		resp->insertBoolean(isStatePack());
		break;
	default:
		return NULL;
	}

	return resp;
}

int StatePackAdapter::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	return ((StatePackImplementation*) impl)->handleObjectMenuSelect(player, selectedID);
}

unsigned long long StatePackAdapter::getState() {
	return ((StatePackImplementation*) impl)->getState();
}

bool StatePackAdapter::isStatePack() {
	return ((StatePackImplementation*) impl)->isStatePack();
}

/*
 *	StatePackHelper
 */

StatePackHelper* StatePackHelper::staticInitializer = StatePackHelper::instance();

StatePackHelper::StatePackHelper() {
	className = "StatePack";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void StatePackHelper::finalizeHelper() {
	StatePackHelper::finalize();
}

DistributedObject* StatePackHelper::instantiateObject() {
	return new StatePack(DummyConstructorParameter::instance());
}

DistributedObjectServant* StatePackHelper::instantiateServant() {
	return new StatePackImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* StatePackHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new StatePackAdapter((StatePackImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

