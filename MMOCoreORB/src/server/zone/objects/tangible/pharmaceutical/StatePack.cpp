/*
 *	server/zone/objects/tangible/pharmaceutical/StatePack.cpp generated by engine3 IDL compiler 0.55
 */

#include "StatePack.h"

#include "StatePackImplementation.h"

#include "../../scene/SceneObject.h"

#include "../../creature/CreatureObject.h"

#include "../../player/Player.h"

#include "../TangibleObject.h"

#include "Pharmaceutical.h"

/*
 *	StatePackStub
 */

StatePack::StatePack(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn) : Pharmaceutical(DummyConstructorParameter::instance()) {
	_impl = new StatePackImplementation(oid, tempCRC, n, tempn);
	_impl->_setStub(this);
}

StatePack::StatePack(CreatureObject* creature, unsigned int tempCRC, const UnicodeString& n, const String& tempn) : Pharmaceutical(DummyConstructorParameter::instance()) {
	_impl = new StatePackImplementation(creature, tempCRC, n, tempn);
	_impl->_setStub(this);
}

StatePack::StatePack(DummyConstructorParameter* param) : Pharmaceutical(param) {
}

StatePack::~StatePack() {
}

void StatePack::generateAttributes(SceneObject* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((StatePackImplementation*) _impl)->generateAttributes(obj);
}

void StatePack::setState(unsigned long long value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addUnsignedLongParameter(value);

		method.executeWithVoidReturn();
	} else
		((StatePackImplementation*) _impl)->setState(value);
}

unsigned long long StatePack::getState() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((StatePackImplementation*) _impl)->getState();
}

/*
 *	StatePackAdapter
 */

StatePackAdapter::StatePackAdapter(StatePackImplementation* obj) : PharmaceuticalAdapter(obj) {
}

Packet* StatePackAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		generateAttributes((SceneObject*) inv->getObjectParameter());
		break;
	case 7:
		setState(inv->getUnsignedLongParameter());
		break;
	case 8:
		resp->insertLong(getState());
		break;
	default:
		return NULL;
	}

	return resp;
}

void StatePackAdapter::generateAttributes(SceneObject* obj) {
	return ((StatePackImplementation*) impl)->generateAttributes(obj);
}

void StatePackAdapter::setState(unsigned long long value) {
	return ((StatePackImplementation*) impl)->setState(value);
}

unsigned long long StatePackAdapter::getState() {
	return ((StatePackImplementation*) impl)->getState();
}

/*
 *	StatePackHelper
 */

StatePackHelper* StatePackHelper::staticInitializer = StatePackHelper::instance();

StatePackHelper::StatePackHelper() {
	className = "StatePack";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void StatePackHelper::finalizeHelper() {
	StatePackHelper::finalize();
}

DistributedObject* StatePackHelper::instantiateObject() {
	return new StatePack(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* StatePackHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new StatePackAdapter((StatePackImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	StatePackServant
 */

StatePackServant::StatePackServant(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int mptype) : PharmaceuticalImplementation(oid, tempCRC, n, tempn, mptype) {
	_classHelper = StatePackHelper::instance();
}

StatePackServant::StatePackServant(CreatureObject* creature, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int mptype) : PharmaceuticalImplementation(creature, tempCRC, n, tempn, mptype) {
	_classHelper = StatePackHelper::instance();
}

StatePackServant::~StatePackServant() {
}

void StatePackServant::_setStub(DistributedObjectStub* stub) {
	_this = (StatePack*) stub;
	PharmaceuticalServant::_setStub(stub);
}

DistributedObjectStub* StatePackServant::_getStub() {
	return _this;
}

