/*
 *	server/zone/objects/tangible/pharmaceutical/WoundPack.cpp generated by engine3 IDL compiler 0.55
 */

#include "WoundPack.h"

#include "WoundPackImplementation.h"

#include "../../scene/SceneObject.h"

#include "../../creature/CreatureObject.h"

#include "../../player/Player.h"

#include "../TangibleObject.h"

#include "Pharmaceutical.h"

/*
 *	WoundPackStub
 */

WoundPack::WoundPack(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn) : Pharmaceutical(DummyConstructorParameter::instance()) {
	_impl = new WoundPackImplementation(oid, tempCRC, n, tempn);
	_impl->_setStub(this);
}

WoundPack::WoundPack(CreatureObject* creature, unsigned int tempCRC, const UnicodeString& n, const String& tempn) : Pharmaceutical(DummyConstructorParameter::instance()) {
	_impl = new WoundPackImplementation(creature, tempCRC, n, tempn);
	_impl->_setStub(this);
}

WoundPack::WoundPack(DummyConstructorParameter* param) : Pharmaceutical(param) {
}

WoundPack::~WoundPack() {
}

void WoundPack::generateAttributes(SceneObject* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((WoundPackImplementation*) _impl)->generateAttributes(obj);
}

unsigned int WoundPack::calculatePower(CreatureObject* healer, CreatureObject* patient, bool applyBattleFatigue) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(healer);
		method.addObjectParameter(patient);
		method.addBooleanParameter(applyBattleFatigue);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((WoundPackImplementation*) _impl)->calculatePower(healer, patient, applyBattleFatigue);
}

void WoundPack::setEffectiveness(float eff) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addFloatParameter(eff);

		method.executeWithVoidReturn();
	} else
		((WoundPackImplementation*) _impl)->setEffectiveness(eff);
}

void WoundPack::setAttribute(unsigned char value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addUnsignedCharParameter(value);

		method.executeWithVoidReturn();
	} else
		((WoundPackImplementation*) _impl)->setAttribute(value);
}

float WoundPack::getEffectiveness() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		return method.executeWithFloatReturn();
	} else
		return ((WoundPackImplementation*) _impl)->getEffectiveness();
}

unsigned char WoundPack::getAttribute() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		return method.executeWithUnsignedCharReturn();
	} else
		return ((WoundPackImplementation*) _impl)->getAttribute();
}

/*
 *	WoundPackAdapter
 */

WoundPackAdapter::WoundPackAdapter(WoundPackImplementation* obj) : PharmaceuticalAdapter(obj) {
}

Packet* WoundPackAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		generateAttributes((SceneObject*) inv->getObjectParameter());
		break;
	case 7:
		resp->insertInt(calculatePower((CreatureObject*) inv->getObjectParameter(), (CreatureObject*) inv->getObjectParameter(), inv->getBooleanParameter()));
		break;
	case 8:
		setEffectiveness(inv->getFloatParameter());
		break;
	case 9:
		setAttribute(inv->getUnsignedCharParameter());
		break;
	case 10:
		resp->insertFloat(getEffectiveness());
		break;
	case 11:
		resp->insertByte(getAttribute());
		break;
	default:
		return NULL;
	}

	return resp;
}

void WoundPackAdapter::generateAttributes(SceneObject* obj) {
	return ((WoundPackImplementation*) impl)->generateAttributes(obj);
}

unsigned int WoundPackAdapter::calculatePower(CreatureObject* healer, CreatureObject* patient, bool applyBattleFatigue) {
	return ((WoundPackImplementation*) impl)->calculatePower(healer, patient, applyBattleFatigue);
}

void WoundPackAdapter::setEffectiveness(float eff) {
	return ((WoundPackImplementation*) impl)->setEffectiveness(eff);
}

void WoundPackAdapter::setAttribute(unsigned char value) {
	return ((WoundPackImplementation*) impl)->setAttribute(value);
}

float WoundPackAdapter::getEffectiveness() {
	return ((WoundPackImplementation*) impl)->getEffectiveness();
}

unsigned char WoundPackAdapter::getAttribute() {
	return ((WoundPackImplementation*) impl)->getAttribute();
}

/*
 *	WoundPackHelper
 */

WoundPackHelper* WoundPackHelper::staticInitializer = WoundPackHelper::instance();

WoundPackHelper::WoundPackHelper() {
	className = "WoundPack";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void WoundPackHelper::finalizeHelper() {
	WoundPackHelper::finalize();
}

DistributedObject* WoundPackHelper::instantiateObject() {
	return new WoundPack(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* WoundPackHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new WoundPackAdapter((WoundPackImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	WoundPackServant
 */

WoundPackServant::WoundPackServant(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int mptype) : PharmaceuticalImplementation(oid, tempCRC, n, tempn, mptype) {
	_classHelper = WoundPackHelper::instance();
}

WoundPackServant::WoundPackServant(CreatureObject* creature, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int mptype) : PharmaceuticalImplementation(creature, tempCRC, n, tempn, mptype) {
	_classHelper = WoundPackHelper::instance();
}

WoundPackServant::~WoundPackServant() {
}

void WoundPackServant::_setStub(DistributedObjectStub* stub) {
	_this = (WoundPack*) stub;
	PharmaceuticalServant::_setStub(stub);
}

DistributedObjectStub* WoundPackServant::_getStub() {
	return _this;
}

