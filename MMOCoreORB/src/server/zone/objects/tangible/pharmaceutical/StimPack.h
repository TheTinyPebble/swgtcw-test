/*
 *	server/zone/objects/tangible/pharmaceutical/StimPack.h generated by engine3 IDL compiler 0.55
 */

#ifndef STIMPACK_H_
#define STIMPACK_H_

#include "engine/orb/DistributedObjectBroker.h"

class SceneObject;

class CreatureObject;

class Player;

class TangibleObject;

class Pharmaceutical;

#include "Pharmaceutical.h"

class StimPack : public Pharmaceutical {
public:
	StimPack(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn);

	StimPack(CreatureObject* creature, unsigned int tempCRC, const UnicodeString& n, const String& tempn);

	void generateAttributes(SceneObject* obj);

	unsigned int calculatePower(CreatureObject* healer, CreatureObject* patient, bool applyBattleFatigue = true);

	void setEffectiveness(float eff);

	float getEffectiveness();

protected:
	StimPack(DummyConstructorParameter* param);

	virtual ~StimPack();

	friend class StimPackHelper;
};

class StimPackImplementation;

class StimPackAdapter : public PharmaceuticalAdapter {
public:
	StimPackAdapter(StimPackImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void generateAttributes(SceneObject* obj);

	unsigned int calculatePower(CreatureObject* healer, CreatureObject* patient, bool applyBattleFatigue);

	void setEffectiveness(float eff);

	float getEffectiveness();

};

class StimPackHelper : public DistributedObjectClassHelper, public Singleton<StimPackHelper> {
	static StimPackHelper* staticInitializer;

public:
	StimPackHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<StimPackHelper>;
};

#include "PharmaceuticalImplementation.h"

class StimPackServant : public PharmaceuticalImplementation {
public:
	StimPack* _this;

public:
	StimPackServant(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int mptype);
	StimPackServant(CreatureObject* creature, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int mptype);
	virtual ~StimPackServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*STIMPACK_H_*/
