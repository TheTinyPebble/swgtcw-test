/*
 *	server/zone/objects/tangible/pharmaceutical/EnhancePack.cpp generated by engine3 IDL compiler 0.55
 */

#include "EnhancePack.h"

#include "EnhancePackImplementation.h"

#include "../../scene/SceneObject.h"

#include "../../creature/CreatureObject.h"

#include "../../player/Player.h"

#include "../TangibleObject.h"

#include "Pharmaceutical.h"

/*
 *	EnhancePackStub
 */

EnhancePack::EnhancePack(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn) : Pharmaceutical(DummyConstructorParameter::instance()) {
	_impl = new EnhancePackImplementation(oid, tempCRC, n, tempn);
	_impl->_setStub(this);
}

EnhancePack::EnhancePack(CreatureObject* creature, unsigned int tempCRC, const UnicodeString& n, const String& tempn) : Pharmaceutical(DummyConstructorParameter::instance()) {
	_impl = new EnhancePackImplementation(creature, tempCRC, n, tempn);
	_impl->_setStub(this);
}

EnhancePack::EnhancePack(DummyConstructorParameter* param) : Pharmaceutical(param) {
}

EnhancePack::~EnhancePack() {
}

void EnhancePack::generateAttributes(SceneObject* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((EnhancePackImplementation*) _impl)->generateAttributes(obj);
}

unsigned int EnhancePack::calculatePower(CreatureObject* enhancer, CreatureObject* patient, bool applyBattleFatigue) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(enhancer);
		method.addObjectParameter(patient);
		method.addBooleanParameter(applyBattleFatigue);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((EnhancePackImplementation*) _impl)->calculatePower(enhancer, patient, applyBattleFatigue);
}

void EnhancePack::setEffectiveness(float eff) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addFloatParameter(eff);

		method.executeWithVoidReturn();
	} else
		((EnhancePackImplementation*) _impl)->setEffectiveness(eff);
}

void EnhancePack::setDuration(float dur) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addFloatParameter(dur);

		method.executeWithVoidReturn();
	} else
		((EnhancePackImplementation*) _impl)->setDuration(dur);
}

void EnhancePack::setAttribute(unsigned char value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addUnsignedCharParameter(value);

		method.executeWithVoidReturn();
	} else
		((EnhancePackImplementation*) _impl)->setAttribute(value);
}

float EnhancePack::getEffectiveness() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		return method.executeWithFloatReturn();
	} else
		return ((EnhancePackImplementation*) _impl)->getEffectiveness();
}

float EnhancePack::getDuration() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		return method.executeWithFloatReturn();
	} else
		return ((EnhancePackImplementation*) _impl)->getDuration();
}

unsigned char EnhancePack::getAttribute() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		return method.executeWithUnsignedCharReturn();
	} else
		return ((EnhancePackImplementation*) _impl)->getAttribute();
}

/*
 *	EnhancePackAdapter
 */

EnhancePackAdapter::EnhancePackAdapter(EnhancePackImplementation* obj) : PharmaceuticalAdapter(obj) {
}

Packet* EnhancePackAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		generateAttributes((SceneObject*) inv->getObjectParameter());
		break;
	case 7:
		resp->insertInt(calculatePower((CreatureObject*) inv->getObjectParameter(), (CreatureObject*) inv->getObjectParameter(), inv->getBooleanParameter()));
		break;
	case 8:
		setEffectiveness(inv->getFloatParameter());
		break;
	case 9:
		setDuration(inv->getFloatParameter());
		break;
	case 10:
		setAttribute(inv->getUnsignedCharParameter());
		break;
	case 11:
		resp->insertFloat(getEffectiveness());
		break;
	case 12:
		resp->insertFloat(getDuration());
		break;
	case 13:
		resp->insertByte(getAttribute());
		break;
	default:
		return NULL;
	}

	return resp;
}

void EnhancePackAdapter::generateAttributes(SceneObject* obj) {
	return ((EnhancePackImplementation*) impl)->generateAttributes(obj);
}

unsigned int EnhancePackAdapter::calculatePower(CreatureObject* enhancer, CreatureObject* patient, bool applyBattleFatigue) {
	return ((EnhancePackImplementation*) impl)->calculatePower(enhancer, patient, applyBattleFatigue);
}

void EnhancePackAdapter::setEffectiveness(float eff) {
	return ((EnhancePackImplementation*) impl)->setEffectiveness(eff);
}

void EnhancePackAdapter::setDuration(float dur) {
	return ((EnhancePackImplementation*) impl)->setDuration(dur);
}

void EnhancePackAdapter::setAttribute(unsigned char value) {
	return ((EnhancePackImplementation*) impl)->setAttribute(value);
}

float EnhancePackAdapter::getEffectiveness() {
	return ((EnhancePackImplementation*) impl)->getEffectiveness();
}

float EnhancePackAdapter::getDuration() {
	return ((EnhancePackImplementation*) impl)->getDuration();
}

unsigned char EnhancePackAdapter::getAttribute() {
	return ((EnhancePackImplementation*) impl)->getAttribute();
}

/*
 *	EnhancePackHelper
 */

EnhancePackHelper* EnhancePackHelper::staticInitializer = EnhancePackHelper::instance();

EnhancePackHelper::EnhancePackHelper() {
	className = "EnhancePack";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void EnhancePackHelper::finalizeHelper() {
	EnhancePackHelper::finalize();
}

DistributedObject* EnhancePackHelper::instantiateObject() {
	return new EnhancePack(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* EnhancePackHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new EnhancePackAdapter((EnhancePackImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	EnhancePackServant
 */

EnhancePackServant::EnhancePackServant(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int mptype) : PharmaceuticalImplementation(oid, tempCRC, n, tempn, mptype) {
	_classHelper = EnhancePackHelper::instance();
}

EnhancePackServant::EnhancePackServant(CreatureObject* creature, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int mptype) : PharmaceuticalImplementation(creature, tempCRC, n, tempn, mptype) {
	_classHelper = EnhancePackHelper::instance();
}

EnhancePackServant::~EnhancePackServant() {
}

void EnhancePackServant::_setStub(DistributedObjectStub* stub) {
	_this = (EnhancePack*) stub;
	PharmaceuticalServant::_setStub(stub);
}

DistributedObjectStub* EnhancePackServant::_getStub() {
	return _this;
}

