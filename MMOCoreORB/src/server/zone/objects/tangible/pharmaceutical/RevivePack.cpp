/*
 *	server/zone/objects/tangible/pharmaceutical/RevivePack.cpp generated by engine3 IDL compiler 0.55
 */

#include "RevivePack.h"

#include "RevivePackImplementation.h"

#include "../../scene/SceneObject.h"

#include "../../creature/CreatureObject.h"

#include "../../player/Player.h"

#include "../TangibleObject.h"

#include "Pharmaceutical.h"

/*
 *	RevivePackStub
 */

RevivePack::RevivePack(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn) : Pharmaceutical(DummyConstructorParameter::instance()) {
	_impl = new RevivePackImplementation(oid, tempCRC, n, tempn);
	_impl->_setStub(this);
}

RevivePack::RevivePack(CreatureObject* creature, unsigned int tempCRC, const UnicodeString& n, const String& tempn) : Pharmaceutical(DummyConstructorParameter::instance()) {
	_impl = new RevivePackImplementation(creature, tempCRC, n, tempn);
	_impl->_setStub(this);
}

RevivePack::RevivePack(DummyConstructorParameter* param) : Pharmaceutical(param) {
}

RevivePack::~RevivePack() {
}

void RevivePack::generateAttributes(SceneObject* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((RevivePackImplementation*) _impl)->generateAttributes(obj);
}

void RevivePack::setHealthWoundHealed(float eff) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addFloatParameter(eff);

		method.executeWithVoidReturn();
	} else
		((RevivePackImplementation*) _impl)->setHealthWoundHealed(eff);
}

void RevivePack::setHealthHealed(float eff) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addFloatParameter(eff);

		method.executeWithVoidReturn();
	} else
		((RevivePackImplementation*) _impl)->setHealthHealed(eff);
}

void RevivePack::setActionWoundHealed(float eff) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addFloatParameter(eff);

		method.executeWithVoidReturn();
	} else
		((RevivePackImplementation*) _impl)->setActionWoundHealed(eff);
}

void RevivePack::setActionHealed(float eff) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addFloatParameter(eff);

		method.executeWithVoidReturn();
	} else
		((RevivePackImplementation*) _impl)->setActionHealed(eff);
}

void RevivePack::setMindWoundHealed(float eff) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addFloatParameter(eff);

		method.executeWithVoidReturn();
	} else
		((RevivePackImplementation*) _impl)->setMindWoundHealed(eff);
}

void RevivePack::setMindHealed(float eff) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addFloatParameter(eff);

		method.executeWithVoidReturn();
	} else
		((RevivePackImplementation*) _impl)->setMindHealed(eff);
}

float RevivePack::getHealthWoundHealed() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		return method.executeWithFloatReturn();
	} else
		return ((RevivePackImplementation*) _impl)->getHealthWoundHealed();
}

float RevivePack::getHealthHealed() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		return method.executeWithFloatReturn();
	} else
		return ((RevivePackImplementation*) _impl)->getHealthHealed();
}

float RevivePack::getActionWoundHealed() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		return method.executeWithFloatReturn();
	} else
		return ((RevivePackImplementation*) _impl)->getActionWoundHealed();
}

float RevivePack::getActionHealed() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		return method.executeWithFloatReturn();
	} else
		return ((RevivePackImplementation*) _impl)->getActionHealed();
}

float RevivePack::getMindWoundHealed() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);

		return method.executeWithFloatReturn();
	} else
		return ((RevivePackImplementation*) _impl)->getMindWoundHealed();
}

float RevivePack::getMindHealed() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		return method.executeWithFloatReturn();
	} else
		return ((RevivePackImplementation*) _impl)->getMindHealed();
}

/*
 *	RevivePackAdapter
 */

RevivePackAdapter::RevivePackAdapter(RevivePackImplementation* obj) : PharmaceuticalAdapter(obj) {
}

Packet* RevivePackAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		generateAttributes((SceneObject*) inv->getObjectParameter());
		break;
	case 7:
		setHealthWoundHealed(inv->getFloatParameter());
		break;
	case 8:
		setHealthHealed(inv->getFloatParameter());
		break;
	case 9:
		setActionWoundHealed(inv->getFloatParameter());
		break;
	case 10:
		setActionHealed(inv->getFloatParameter());
		break;
	case 11:
		setMindWoundHealed(inv->getFloatParameter());
		break;
	case 12:
		setMindHealed(inv->getFloatParameter());
		break;
	case 13:
		resp->insertFloat(getHealthWoundHealed());
		break;
	case 14:
		resp->insertFloat(getHealthHealed());
		break;
	case 15:
		resp->insertFloat(getActionWoundHealed());
		break;
	case 16:
		resp->insertFloat(getActionHealed());
		break;
	case 17:
		resp->insertFloat(getMindWoundHealed());
		break;
	case 18:
		resp->insertFloat(getMindHealed());
		break;
	default:
		return NULL;
	}

	return resp;
}

void RevivePackAdapter::generateAttributes(SceneObject* obj) {
	return ((RevivePackImplementation*) impl)->generateAttributes(obj);
}

void RevivePackAdapter::setHealthWoundHealed(float eff) {
	return ((RevivePackImplementation*) impl)->setHealthWoundHealed(eff);
}

void RevivePackAdapter::setHealthHealed(float eff) {
	return ((RevivePackImplementation*) impl)->setHealthHealed(eff);
}

void RevivePackAdapter::setActionWoundHealed(float eff) {
	return ((RevivePackImplementation*) impl)->setActionWoundHealed(eff);
}

void RevivePackAdapter::setActionHealed(float eff) {
	return ((RevivePackImplementation*) impl)->setActionHealed(eff);
}

void RevivePackAdapter::setMindWoundHealed(float eff) {
	return ((RevivePackImplementation*) impl)->setMindWoundHealed(eff);
}

void RevivePackAdapter::setMindHealed(float eff) {
	return ((RevivePackImplementation*) impl)->setMindHealed(eff);
}

float RevivePackAdapter::getHealthWoundHealed() {
	return ((RevivePackImplementation*) impl)->getHealthWoundHealed();
}

float RevivePackAdapter::getHealthHealed() {
	return ((RevivePackImplementation*) impl)->getHealthHealed();
}

float RevivePackAdapter::getActionWoundHealed() {
	return ((RevivePackImplementation*) impl)->getActionWoundHealed();
}

float RevivePackAdapter::getActionHealed() {
	return ((RevivePackImplementation*) impl)->getActionHealed();
}

float RevivePackAdapter::getMindWoundHealed() {
	return ((RevivePackImplementation*) impl)->getMindWoundHealed();
}

float RevivePackAdapter::getMindHealed() {
	return ((RevivePackImplementation*) impl)->getMindHealed();
}

/*
 *	RevivePackHelper
 */

RevivePackHelper* RevivePackHelper::staticInitializer = RevivePackHelper::instance();

RevivePackHelper::RevivePackHelper() {
	className = "RevivePack";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void RevivePackHelper::finalizeHelper() {
	RevivePackHelper::finalize();
}

DistributedObject* RevivePackHelper::instantiateObject() {
	return new RevivePack(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* RevivePackHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new RevivePackAdapter((RevivePackImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	RevivePackServant
 */

RevivePackServant::RevivePackServant(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int mptype) : PharmaceuticalImplementation(oid, tempCRC, n, tempn, mptype) {
	_classHelper = RevivePackHelper::instance();
}

RevivePackServant::RevivePackServant(CreatureObject* creature, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int mptype) : PharmaceuticalImplementation(creature, tempCRC, n, tempn, mptype) {
	_classHelper = RevivePackHelper::instance();
}

RevivePackServant::~RevivePackServant() {
}

void RevivePackServant::_setStub(DistributedObjectStub* stub) {
	_this = (RevivePack*) stub;
	PharmaceuticalServant::_setStub(stub);
}

DistributedObjectStub* RevivePackServant::_getStub() {
	return _this;
}

