/*
 *	server/zone/objects/tangible/pharmaceutical/RangedStimPack.cpp generated by engine3 IDL compiler 0.55
 */

#include "RangedStimPack.h"

#include "RangedStimPackImplementation.h"

#include "../../scene/SceneObject.h"

#include "../../creature/CreatureObject.h"

#include "../../player/Player.h"

#include "../TangibleObject.h"

#include "StimPack.h"

/*
 *	RangedStimPackStub
 */

RangedStimPack::RangedStimPack(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn) : StimPack(DummyConstructorParameter::instance()) {
	_impl = new RangedStimPackImplementation(oid, tempCRC, n, tempn);
	_impl->_setStub(this);
}

RangedStimPack::RangedStimPack(CreatureObject* creature, unsigned int tempCRC, const UnicodeString& n, const String& tempn) : StimPack(DummyConstructorParameter::instance()) {
	_impl = new RangedStimPackImplementation(creature, tempCRC, n, tempn);
	_impl->_setStub(this);
}

RangedStimPack::RangedStimPack(DummyConstructorParameter* param) : StimPack(param) {
}

RangedStimPack::~RangedStimPack() {
}

void RangedStimPack::generateAttributes(SceneObject* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((RangedStimPackImplementation*) _impl)->generateAttributes(obj);
}

unsigned int RangedStimPack::calculatePower(CreatureObject* healer, CreatureObject* patient, bool applyBattleFatigue) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(healer);
		method.addObjectParameter(patient);
		method.addBooleanParameter(applyBattleFatigue);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((RangedStimPackImplementation*) _impl)->calculatePower(healer, patient, applyBattleFatigue);
}

void RangedStimPack::setEffectiveness(float eff) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addFloatParameter(eff);

		method.executeWithVoidReturn();
	} else
		((RangedStimPackImplementation*) _impl)->setEffectiveness(eff);
}

float RangedStimPack::getEffectiveness() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return method.executeWithFloatReturn();
	} else
		return ((RangedStimPackImplementation*) _impl)->getEffectiveness();
}

void RangedStimPack::setRange(float rng) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addFloatParameter(rng);

		method.executeWithVoidReturn();
	} else
		((RangedStimPackImplementation*) _impl)->setRange(rng);
}

float RangedStimPack::getRange(CreatureObject* creature) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addObjectParameter(creature);

		return method.executeWithFloatReturn();
	} else
		return ((RangedStimPackImplementation*) _impl)->getRange(creature);
}

void RangedStimPack::setArea(float ar) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addFloatParameter(ar);

		method.executeWithVoidReturn();
	} else
		((RangedStimPackImplementation*) _impl)->setArea(ar);
}

float RangedStimPack::getArea() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		return method.executeWithFloatReturn();
	} else
		return ((RangedStimPackImplementation*) _impl)->getArea();
}

/*
 *	RangedStimPackAdapter
 */

RangedStimPackAdapter::RangedStimPackAdapter(RangedStimPackImplementation* obj) : StimPackAdapter(obj) {
}

Packet* RangedStimPackAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		generateAttributes((SceneObject*) inv->getObjectParameter());
		break;
	case 7:
		resp->insertInt(calculatePower((CreatureObject*) inv->getObjectParameter(), (CreatureObject*) inv->getObjectParameter(), inv->getBooleanParameter()));
		break;
	case 8:
		setEffectiveness(inv->getFloatParameter());
		break;
	case 9:
		resp->insertFloat(getEffectiveness());
		break;
	case 10:
		setRange(inv->getFloatParameter());
		break;
	case 11:
		resp->insertFloat(getRange((CreatureObject*) inv->getObjectParameter()));
		break;
	case 12:
		setArea(inv->getFloatParameter());
		break;
	case 13:
		resp->insertFloat(getArea());
		break;
	default:
		return NULL;
	}

	return resp;
}

void RangedStimPackAdapter::generateAttributes(SceneObject* obj) {
	return ((RangedStimPackImplementation*) impl)->generateAttributes(obj);
}

unsigned int RangedStimPackAdapter::calculatePower(CreatureObject* healer, CreatureObject* patient, bool applyBattleFatigue) {
	return ((RangedStimPackImplementation*) impl)->calculatePower(healer, patient, applyBattleFatigue);
}

void RangedStimPackAdapter::setEffectiveness(float eff) {
	return ((RangedStimPackImplementation*) impl)->setEffectiveness(eff);
}

float RangedStimPackAdapter::getEffectiveness() {
	return ((RangedStimPackImplementation*) impl)->getEffectiveness();
}

void RangedStimPackAdapter::setRange(float rng) {
	return ((RangedStimPackImplementation*) impl)->setRange(rng);
}

float RangedStimPackAdapter::getRange(CreatureObject* creature) {
	return ((RangedStimPackImplementation*) impl)->getRange(creature);
}

void RangedStimPackAdapter::setArea(float ar) {
	return ((RangedStimPackImplementation*) impl)->setArea(ar);
}

float RangedStimPackAdapter::getArea() {
	return ((RangedStimPackImplementation*) impl)->getArea();
}

/*
 *	RangedStimPackHelper
 */

RangedStimPackHelper* RangedStimPackHelper::staticInitializer = RangedStimPackHelper::instance();

RangedStimPackHelper::RangedStimPackHelper() {
	className = "RangedStimPack";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void RangedStimPackHelper::finalizeHelper() {
	RangedStimPackHelper::finalize();
}

DistributedObject* RangedStimPackHelper::instantiateObject() {
	return new RangedStimPack(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* RangedStimPackHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new RangedStimPackAdapter((RangedStimPackImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	RangedStimPackServant
 */

RangedStimPackServant::RangedStimPackServant(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn) : StimPackImplementation(oid, tempCRC, n, tempn) {
	_classHelper = RangedStimPackHelper::instance();
}

RangedStimPackServant::RangedStimPackServant(CreatureObject* creature, unsigned int tempCRC, const UnicodeString& n, const String& tempn) : StimPackImplementation(creature, tempCRC, n, tempn) {
	_classHelper = RangedStimPackHelper::instance();
}

RangedStimPackServant::~RangedStimPackServant() {
}

void RangedStimPackServant::_setStub(DistributedObjectStub* stub) {
	_this = (RangedStimPack*) stub;
	StimPackServant::_setStub(stub);
}

DistributedObjectStub* RangedStimPackServant::_getStub() {
	return _this;
}

