/*
 *	server/zone/objects/tangible/pharmaceutical/RangedStimPack.cpp generated by engine3 IDL compiler 0.60
 */

#include "RangedStimPack.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/Zone.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/objects/manufactureschematic/ManufactureSchematic.h"

/*
 *	RangedStimPackStub
 */

RangedStimPack::RangedStimPack() : StimPack(DummyConstructorParameter::instance()) {
	RangedStimPackImplementation* _implementation = new RangedStimPackImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

RangedStimPack::RangedStimPack(DummyConstructorParameter* param) : StimPack(param) {
}

RangedStimPack::~RangedStimPack() {
}


void RangedStimPack::updateCraftingValues(ManufactureSchematic* schematic) {
	RangedStimPackImplementation* _implementation = (RangedStimPackImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->updateCraftingValues(schematic);
}

void RangedStimPack::fillAttributeList(AttributeListMessage* msg, PlayerCreature* object) {
	RangedStimPackImplementation* _implementation = (RangedStimPackImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->fillAttributeList(msg, object);
}

int RangedStimPack::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	RangedStimPackImplementation* _implementation = (RangedStimPackImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->handleObjectMenuSelect(player, selectedID);
}

void RangedStimPack::loadTemplateData(SharedObjectTemplate* templateData) {
	RangedStimPackImplementation* _implementation = (RangedStimPackImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->loadTemplateData(templateData);
}

unsigned int RangedStimPack::calculatePower(CreatureObject* healer, CreatureObject* patient, bool applyBattleFatigue) {
	RangedStimPackImplementation* _implementation = (RangedStimPackImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(healer);
		method.addObjectParameter(patient);
		method.addBooleanParameter(applyBattleFatigue);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->calculatePower(healer, patient, applyBattleFatigue);
}

float RangedStimPack::getRange(CreatureObject* creature) {
	RangedStimPackImplementation* _implementation = (RangedStimPackImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(creature);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getRange(creature);
}

float RangedStimPack::getEffectiveness() {
	RangedStimPackImplementation* _implementation = (RangedStimPackImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getEffectiveness();
}

float RangedStimPack::getArea() {
	RangedStimPackImplementation* _implementation = (RangedStimPackImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getArea();
}

bool RangedStimPack::isArea() {
	RangedStimPackImplementation* _implementation = (RangedStimPackImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isArea();
}

float RangedStimPack::getRangeMod() {
	RangedStimPackImplementation* _implementation = (RangedStimPackImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getRangeMod();
}

bool RangedStimPack::isRangedStimPack() {
	RangedStimPackImplementation* _implementation = (RangedStimPackImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isRangedStimPack();
}

DistributedObjectServant* RangedStimPack::_getImplementation() {

	_updated = true;
	return _impl;
}

void RangedStimPack::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	RangedStimPackImplementation
 */

RangedStimPackImplementation::RangedStimPackImplementation(DummyConstructorParameter* param) : StimPackImplementation(param) {
	_initializeImplementation();
}


RangedStimPackImplementation::~RangedStimPackImplementation() {
}


void RangedStimPackImplementation::finalize() {
}

void RangedStimPackImplementation::_initializeImplementation() {
	_setClassHelper(RangedStimPackHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void RangedStimPackImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (RangedStimPack*) stub;
	StimPackImplementation::_setStub(stub);
}

DistributedObjectStub* RangedStimPackImplementation::_getStub() {
	return _this;
}

RangedStimPackImplementation::operator const RangedStimPack*() {
	return _this;
}

void RangedStimPackImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void RangedStimPackImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void RangedStimPackImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void RangedStimPackImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void RangedStimPackImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void RangedStimPackImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void RangedStimPackImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void RangedStimPackImplementation::_serializationHelperMethod() {
	StimPackImplementation::_serializationHelperMethod();

	_setClassName("RangedStimPack");

}

void RangedStimPackImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(RangedStimPackImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool RangedStimPackImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (StimPackImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "range") {
		TypeInfo<float >::parseFromBinaryStream(&range, stream);
		return true;
	}

	if (_name == "area") {
		TypeInfo<float >::parseFromBinaryStream(&area, stream);
		return true;
	}

	if (_name == "rangeMod") {
		TypeInfo<float >::parseFromBinaryStream(&rangeMod, stream);
		return true;
	}


	return false;
}

void RangedStimPackImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = RangedStimPackImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int RangedStimPackImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "range";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<float >::toBinaryStream(&range, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "area";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<float >::toBinaryStream(&area, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "rangeMod";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<float >::toBinaryStream(&rangeMod, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 3 + StimPackImplementation::writeObjectMembers(stream);
}

RangedStimPackImplementation::RangedStimPackImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(67):  		setLoggingName("RangedStimPack");
	setLoggingName("RangedStimPack");
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(69):  		area = 0;
	area = 0;
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(70):  		range = 0;
	range = 0;
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(71):  		rangeMod = 0;
	rangeMod = 0;
}

void RangedStimPackImplementation::updateCraftingValues(ManufactureSchematic* schematic) {
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(76):  		CraftingValues craftingValues = schematic.getCraftingValues();
	CraftingValues* craftingValues = schematic->getCraftingValues();
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(78):  		super.effectiveness = craftingValues.getCurrentValue("power");
	StimPackImplementation::effectiveness = craftingValues->getCurrentValue("power");
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(79):  		super.medicineUseRequired = craftingValues.getCurrentValue("skillmodmin");
	StimPackImplementation::medicineUseRequired = craftingValues->getCurrentValue("skillmodmin");
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(80):  		setUseCount(craftingValues.getCurrentValue("charges"));
	setUseCount(craftingValues->getCurrentValue("charges"));
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(82):  		range = craftingValues.getCurrentValue("range");
	range = craftingValues->getCurrentValue("range");
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(84):  	}
	if (craftingValues->hasProperty("area")){
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(85):  			area = craftingValues.getCurrentValue("area");
	area = craftingValues->getCurrentValue("area");
}
}

void RangedStimPackImplementation::fillAttributeList(AttributeListMessage* msg, PlayerCreature* object) {
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(98):  		msg.insertAttribute("examine_heal_damage_health", Math.getPrecision(super.effectiveness, 0));
	msg->insertAttribute("examine_heal_damage_health", Math::getPrecision(StimPackImplementation::effectiveness, 0));
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(99):  		msg.insertAttribute("examine_heal_damage_action", Math.getPrecision(super.effectiveness, 0));
	msg->insertAttribute("examine_heal_damage_action", Math::getPrecision(StimPackImplementation::effectiveness, 0));
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(100):  		msg.insertAttribute("examine_heal_range", Math.getPrecision(range, 0));
	msg->insertAttribute("examine_heal_range", Math::getPrecision(range, 0));
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(102):  
	if (isArea()){
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(103):  			msg.insertAttribute("examine_heal_area", Math.getPrecision(area, 0));
	msg->insertAttribute("examine_heal_area", Math::getPrecision(area, 0));
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(104):  			msg.insertAttribute("combat_healing_ability", super.medicineUseRequired);
	msg->insertAttribute("combat_healing_ability", StimPackImplementation::medicineUseRequired);
}

	else {
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(106):  			msg.insertAttribute("combat_healing_ability", super.medicineUseRequired);
	msg->insertAttribute("combat_healing_ability", StimPackImplementation::medicineUseRequired);
}
}

int RangedStimPackImplementation::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(119):  		if 
	if (selectedID != 20)	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(120):  			return 1;
	return 1;
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(122):  
	if (player->getSkillMod("combat_healing_ability") < StimPackImplementation::medicineUseRequired){
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(123):  			player.sendSystemMessage("error_message", "insufficient_skill");
	player->sendSystemMessage("error_message", "insufficient_skill");
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(125):  			return 0;
	return 0;
}

	else {
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(127):  			string command = "/healdamage ";
	String command = "/healdamage ";
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(128):  			player.sendExecuteConsoleCommand(command + String.valueOf(super.getObjectID()));
	player->sendExecuteConsoleCommand(command + String::valueOf(StimPackImplementation::getObjectID()));
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(130):  			return 0;
	return 0;
}
}

void RangedStimPackImplementation::loadTemplateData(SharedObjectTemplate* templateData) {
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(143):  		super.loadTemplateData(templateData);
	StimPackImplementation::loadTemplateData(templateData);
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(145):  		RangedStimPackTemplate 
	if (!templateData->isRangedStimPackTemplate())	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(146):  			return;
	return;
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(148):  stimPackTemplate = (RangedStimPackTemplate) templateData;
	RangedStimPackTemplate* stimPackTemplate = (RangedStimPackTemplate*) templateData;
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(150):  		super.effectiveness = stimPackTemplate.getEffectiveness();
	StimPackImplementation::effectiveness = stimPackTemplate->getEffectiveness();
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(151):  		super.medicineUseRequired = stimPackTemplate.getMedicineUse();
	StimPackImplementation::medicineUseRequired = stimPackTemplate->getMedicineUse();
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(152):  		area = stimPackTemplate.getArea();
	area = stimPackTemplate->getArea();
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(153):  		range = stimPackTemplate.getRange();
	range = stimPackTemplate->getRange();
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(154):  		rangeMod = stimPackTemplate.getRangeMod();
	rangeMod = stimPackTemplate->getRangeMod();
}

unsigned int RangedStimPackImplementation::calculatePower(CreatureObject* healer, CreatureObject* patient, bool applyBattleFatigue) {
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(158):  		float power = getEffectiveness();
	float power = getEffectiveness();
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(160):  		float 
	if (applyBattleFatigue){
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(161):  			power = power - power * patient.calculateBFRatio();
	power = power - power * patient->calculateBFRatio();
}
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(164):  modSkill = (float) healer.getSkillMod("combat_medic_effectiveness");
	float modSkill = (float) healer->getSkillMod("combat_medic_effectiveness");
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(166):  		return (100 + modSkill) / 100 * power;
	return (100 + modSkill) / 100 * power;
}

float RangedStimPackImplementation::getRange(CreatureObject* creature) {
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(170):  		float modSkill = 0;
	float modSkill = 0;
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(172):  		float 
	if (creature != NULL){
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(173):  			modSkill = creature.getSkillMod("healing_range");
	modSkill = creature->getSkillMod("healing_range");
}
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(176):  value = (100 + rangeMod * modSkill) / 100 * range;
	float value = (100 + rangeMod * modSkill) / 100 * range;
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(178):  		return value;
	return value;
}

float RangedStimPackImplementation::getEffectiveness() {
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(182):  		return super.effectiveness;
	return StimPackImplementation::effectiveness;
}

float RangedStimPackImplementation::getArea() {
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(186):  		return area;
	return area;
}

bool RangedStimPackImplementation::isArea() {
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(190):  		return area != 0;
	return area != 0;
}

float RangedStimPackImplementation::getRangeMod() {
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(194):  		return rangeMod;
	return rangeMod;
}

bool RangedStimPackImplementation::isRangedStimPack() {
	// server/zone/objects/tangible/pharmaceutical/RangedStimPack.idl(198):  		return true;
	return true;
}

/*
 *	RangedStimPackAdapter
 */

RangedStimPackAdapter::RangedStimPackAdapter(RangedStimPackImplementation* obj) : StimPackAdapter(obj) {
}

Packet* RangedStimPackAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertSignedInt(handleObjectMenuSelect((PlayerCreature*) inv->getObjectParameter(), inv->getByteParameter()));
		break;
	case 7:
		resp->insertInt(calculatePower((CreatureObject*) inv->getObjectParameter(), (CreatureObject*) inv->getObjectParameter(), inv->getBooleanParameter()));
		break;
	case 8:
		resp->insertFloat(getRange((CreatureObject*) inv->getObjectParameter()));
		break;
	case 9:
		resp->insertFloat(getEffectiveness());
		break;
	case 10:
		resp->insertFloat(getArea());
		break;
	case 11:
		resp->insertBoolean(isArea());
		break;
	case 12:
		resp->insertFloat(getRangeMod());
		break;
	case 13:
		resp->insertBoolean(isRangedStimPack());
		break;
	default:
		return NULL;
	}

	return resp;
}

int RangedStimPackAdapter::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	return ((RangedStimPackImplementation*) impl)->handleObjectMenuSelect(player, selectedID);
}

unsigned int RangedStimPackAdapter::calculatePower(CreatureObject* healer, CreatureObject* patient, bool applyBattleFatigue) {
	return ((RangedStimPackImplementation*) impl)->calculatePower(healer, patient, applyBattleFatigue);
}

float RangedStimPackAdapter::getRange(CreatureObject* creature) {
	return ((RangedStimPackImplementation*) impl)->getRange(creature);
}

float RangedStimPackAdapter::getEffectiveness() {
	return ((RangedStimPackImplementation*) impl)->getEffectiveness();
}

float RangedStimPackAdapter::getArea() {
	return ((RangedStimPackImplementation*) impl)->getArea();
}

bool RangedStimPackAdapter::isArea() {
	return ((RangedStimPackImplementation*) impl)->isArea();
}

float RangedStimPackAdapter::getRangeMod() {
	return ((RangedStimPackImplementation*) impl)->getRangeMod();
}

bool RangedStimPackAdapter::isRangedStimPack() {
	return ((RangedStimPackImplementation*) impl)->isRangedStimPack();
}

/*
 *	RangedStimPackHelper
 */

RangedStimPackHelper* RangedStimPackHelper::staticInitializer = RangedStimPackHelper::instance();

RangedStimPackHelper::RangedStimPackHelper() {
	className = "RangedStimPack";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void RangedStimPackHelper::finalizeHelper() {
	RangedStimPackHelper::finalize();
}

DistributedObject* RangedStimPackHelper::instantiateObject() {
	return new RangedStimPack(DummyConstructorParameter::instance());
}

DistributedObjectServant* RangedStimPackHelper::instantiateServant() {
	return new RangedStimPackImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* RangedStimPackHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new RangedStimPackAdapter((RangedStimPackImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

