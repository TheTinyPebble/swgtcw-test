/*
 *	server/zone/objects/tangible/attachment/Attachment.cpp generated by engine3 IDL compiler 0.55
 */

#include "Attachment.h"

#include "AttachmentImplementation.h"

#include "../TangibleObject.h"

#include "../../creature/CreatureObject.h"

#include "../../player/Player.h"

#include "../wearables/Wearable.h"

/*
 *	AttachmentStub
 */

Attachment::Attachment(unsigned long long objID, int attachmentType) : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new AttachmentImplementation(objID, attachmentType);
	_impl->_setStub(this);
}

Attachment::Attachment(DummyConstructorParameter* param) : TangibleObject(param) {
}

Attachment::~Attachment() {
}

void Attachment::addSkillMod(String& skillModType, int skillModValue) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addAsciiParameter(skillModType);
		method.addSignedIntParameter(skillModValue);

		method.executeWithVoidReturn();
	} else
		((AttachmentImplementation*) _impl)->addSkillMod(skillModType, skillModValue);
}

void Attachment::setSkillModCount(int modifier) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addSignedIntParameter(modifier);

		method.executeWithVoidReturn();
	} else
		((AttachmentImplementation*) _impl)->setSkillModCount(modifier);
}

void Attachment::generateSkillMods(Player* player, int modifier) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(player);
		method.addSignedIntParameter(modifier);

		method.executeWithVoidReturn();
	} else
		((AttachmentImplementation*) _impl)->generateSkillMods(player, modifier);
}

void Attachment::remove(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((AttachmentImplementation*) _impl)->remove(player);
}

int Attachment::getRandomModValue(int luck, int modifier) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addSignedIntParameter(luck);
		method.addSignedIntParameter(modifier);

		return method.executeWithSignedIntReturn();
	} else
		return ((AttachmentImplementation*) _impl)->getRandomModValue(luck, modifier);
}

String& Attachment::getSkillModName(int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addSignedIntParameter(index);

		method.executeWithAsciiReturn(_return_getSkillModName);
		return _return_getSkillModName;
	} else
		return ((AttachmentImplementation*) _impl)->getSkillModName(index);
}

int Attachment::getSkillModValue(int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addSignedIntParameter(index);

		return method.executeWithSignedIntReturn();
	} else
		return ((AttachmentImplementation*) _impl)->getSkillModValue(index);
}

int Attachment::getSkillModValue(String& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addAsciiParameter(name);

		return method.executeWithSignedIntReturn();
	} else
		return ((AttachmentImplementation*) _impl)->getSkillModValue(name);
}

int Attachment::getSkillModCount() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		return method.executeWithSignedIntReturn();
	} else
		return ((AttachmentImplementation*) _impl)->getSkillModCount();
}

int Attachment::getAttachmentType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		return method.executeWithSignedIntReturn();
	} else
		return ((AttachmentImplementation*) _impl)->getAttachmentType();
}

/*
 *	AttachmentAdapter
 */

AttachmentAdapter::AttachmentAdapter(AttachmentImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* AttachmentAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		addSkillMod(inv->getAsciiParameter(_param0_addSkillMod__String_int_), inv->getSignedIntParameter());
		break;
	case 7:
		setSkillModCount(inv->getSignedIntParameter());
		break;
	case 8:
		generateSkillMods((Player*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case 9:
		remove((Player*) inv->getObjectParameter());
		break;
	case 10:
		resp->insertSignedInt(getRandomModValue(inv->getSignedIntParameter(), inv->getSignedIntParameter()));
		break;
	case 11:
		resp->insertAscii(getSkillModName(inv->getSignedIntParameter()));
		break;
	case 12:
		resp->insertSignedInt(getSkillModValue(inv->getSignedIntParameter()));
		break;
	case 13:
		resp->insertSignedInt(getSkillModValue(inv->getAsciiParameter(_param0_getSkillModValue__String_)));
		break;
	case 14:
		resp->insertSignedInt(getSkillModCount());
		break;
	case 15:
		resp->insertSignedInt(getAttachmentType());
		break;
	default:
		return NULL;
	}

	return resp;
}

void AttachmentAdapter::addSkillMod(String& skillModType, int skillModValue) {
	return ((AttachmentImplementation*) impl)->addSkillMod(skillModType, skillModValue);
}

void AttachmentAdapter::setSkillModCount(int modifier) {
	return ((AttachmentImplementation*) impl)->setSkillModCount(modifier);
}

void AttachmentAdapter::generateSkillMods(Player* player, int modifier) {
	return ((AttachmentImplementation*) impl)->generateSkillMods(player, modifier);
}

void AttachmentAdapter::remove(Player* player) {
	return ((AttachmentImplementation*) impl)->remove(player);
}

int AttachmentAdapter::getRandomModValue(int luck, int modifier) {
	return ((AttachmentImplementation*) impl)->getRandomModValue(luck, modifier);
}

String& AttachmentAdapter::getSkillModName(int index) {
	return ((AttachmentImplementation*) impl)->getSkillModName(index);
}

int AttachmentAdapter::getSkillModValue(int index) {
	return ((AttachmentImplementation*) impl)->getSkillModValue(index);
}

int AttachmentAdapter::getSkillModValue(String& name) {
	return ((AttachmentImplementation*) impl)->getSkillModValue(name);
}

int AttachmentAdapter::getSkillModCount() {
	return ((AttachmentImplementation*) impl)->getSkillModCount();
}

int AttachmentAdapter::getAttachmentType() {
	return ((AttachmentImplementation*) impl)->getAttachmentType();
}

/*
 *	AttachmentHelper
 */

AttachmentHelper* AttachmentHelper::staticInitializer = AttachmentHelper::instance();

AttachmentHelper::AttachmentHelper() {
	className = "Attachment";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void AttachmentHelper::finalizeHelper() {
	AttachmentHelper::finalize();
}

DistributedObject* AttachmentHelper::instantiateObject() {
	return new Attachment(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* AttachmentHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new AttachmentAdapter((AttachmentImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	AttachmentServant
 */

AttachmentServant::AttachmentServant(unsigned long long objID, int attachmentType) : TangibleObjectImplementation(objID, attachmentType) {
	_classHelper = AttachmentHelper::instance();
}

AttachmentServant::~AttachmentServant() {
}

void AttachmentServant::_setStub(DistributedObjectStub* stub) {
	_this = (Attachment*) stub;
	TangibleObjectServant::_setStub(stub);
}

DistributedObjectStub* AttachmentServant::_getStub() {
	return _this;
}

