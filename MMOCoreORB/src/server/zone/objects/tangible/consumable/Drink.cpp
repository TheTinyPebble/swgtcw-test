/*
 *	server/zone/objects/tangible/consumable/Drink.cpp generated by engine3 IDL compiler 0.60
 */

#include "Drink.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/Zone.h"


// Imported class dependencies

#include "server/zone/objects/area/ActiveArea.h"

#include "engine/util/Quaternion.h"

#include "server/zone/managers/object/ObjectMap.h"

#include "server/zone/objects/scene/ObserverEventMap.h"

#include "system/util/SortedVector.h"

#include "server/zone/managers/creature/CreatureManager.h"

#include "server/zone/objects/scene/variables/CustomizationVariables.h"

#include "system/lang/Time.h"

#include "server/zone/Zone.h"

#include "server/zone/ZoneProcessServerImplementation.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "server/zone/objects/scene/variables/DeltaVector.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/managers/planet/HeightMap.h"

#include "server/zone/managers/planet/PlanetManager.h"

#include "system/util/VectorMap.h"

#include "server/zone/objects/scene/variables/StringId.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "system/util/Vector.h"

#include "server/zone/managers/planet/MapLocationTable.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

/*
 *	DrinkStub
 */

Drink::Drink() : Consumable(DummyConstructorParameter::instance()) {
	ManagedObject::_setImplementation(new DrinkImplementation());
	ManagedObject::_getImplementation()->_setStub(this);
}

Drink::Drink(DummyConstructorParameter* param) : Consumable(param) {
}

Drink::~Drink() {
}


void Drink::initializeTransientMembers() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((DrinkImplementation*) _getImplementation())->initializeTransientMembers();
}

void Drink::initializePrivateData() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		((DrinkImplementation*) _getImplementation())->initializePrivateData();
}

/*
 *	DrinkImplementation
 */

DrinkImplementation::DrinkImplementation(DummyConstructorParameter* param) : ConsumableImplementation(param) {
	_initializeImplementation();
}


DrinkImplementation::~DrinkImplementation() {
}


void DrinkImplementation::finalize() {
}

void DrinkImplementation::_initializeImplementation() {
	_setClassHelper(DrinkHelper::instance());

	_serializationHelperMethod();
}

void DrinkImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (Drink*) stub;
	ConsumableImplementation::_setStub(stub);
}

DistributedObjectStub* DrinkImplementation::_getStub() {
	return _this;
}

DrinkImplementation::operator const Drink*() {
	return _this;
}

TransactionalObject* DrinkImplementation::clone() {
	return (TransactionalObject*) new DrinkImplementation(*this);
}


void DrinkImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void DrinkImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void DrinkImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void DrinkImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void DrinkImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void DrinkImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void DrinkImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void DrinkImplementation::_serializationHelperMethod() {
	ConsumableImplementation::_serializationHelperMethod();

	_setClassName("Drink");

}

DrinkImplementation::DrinkImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/consumable/Drink.idl(54):  		Logger.setLoggingName("Drink");
	Logger::setLoggingName("Drink");
	// server/zone/objects/tangible/consumable/Drink.idl(56):  		initializePrivateData();
	initializePrivateData();
}

void DrinkImplementation::initializeTransientMembers() {
	// server/zone/objects/tangible/consumable/Drink.idl(60):  		super.initializeTransientMembers();
	ConsumableImplementation::initializeTransientMembers();
	// server/zone/objects/tangible/consumable/Drink.idl(62):  		Logger.setLoggingName("Drink");
	Logger::setLoggingName("Drink");
}

void DrinkImplementation::initializePrivateData() {
	// server/zone/objects/tangible/consumable/Drink.idl(66):  		super.consumableType = super.DRINK;
	ConsumableImplementation::consumableType = ConsumableImplementation::DRINK;
}

/*
 *	DrinkAdapter
 */

DrinkAdapter::DrinkAdapter(DrinkImplementation* obj) : ConsumableAdapter(obj) {
}

Packet* DrinkAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initializeTransientMembers();
		break;
	case 7:
		initializePrivateData();
		break;
	default:
		return NULL;
	}

	return resp;
}

void DrinkAdapter::initializeTransientMembers() {
	((DrinkImplementation*) impl)->initializeTransientMembers();
}

void DrinkAdapter::initializePrivateData() {
	((DrinkImplementation*) impl)->initializePrivateData();
}

/*
 *	DrinkHelper
 */

DrinkHelper* DrinkHelper::staticInitializer = DrinkHelper::instance();

DrinkHelper::DrinkHelper() {
	className = "Drink";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void DrinkHelper::finalizeHelper() {
	DrinkHelper::finalize();
}

DistributedObject* DrinkHelper::instantiateObject() {
	return new Drink(DummyConstructorParameter::instance());
}

DistributedObjectServant* DrinkHelper::instantiateServant() {
	return new DrinkImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* DrinkHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new DrinkAdapter((DrinkImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

