/*
 *	server/zone/objects/tangible/consumable/Food.cpp generated by engine3 IDL compiler 0.60
 */

#include "Food.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/Zone.h"


// Imported class dependencies

#include "server/zone/objects/scene/variables/DeltaVector.h"

#include "system/lang/Time.h"

#include "engine/util/Quaternion.h"

#include "system/util/VectorMap.h"

#include "server/zone/managers/planet/MapLocationTable.h"

#include "server/zone/objects/scene/ObserverEventMap.h"

#include "server/zone/managers/object/ObjectMap.h"

#include "system/util/Vector.h"

#include "server/zone/managers/creature/CreatureManager.h"

#include "server/zone/ZoneProcessServerImplementation.h"

#include "server/zone/Zone.h"

#include "server/zone/managers/planet/HeightMap.h"

#include "engine/util/QuadTree.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "system/util/SortedVector.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "server/zone/objects/scene/variables/CustomizationVariables.h"

#include "server/zone/managers/planet/PlanetManager.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

#include "server/zone/objects/scene/variables/StringId.h"

/*
 *	FoodStub
 */

Food::Food() : Consumable(DummyConstructorParameter::instance()) {
	FoodImplementation* _implementation = new FoodImplementation();
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

Food::Food(DummyConstructorParameter* param) : Consumable(param) {
}

Food::~Food() {
}


void Food::initializeTransientMembers() {
	FoodImplementation* _implementation = (FoodImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void Food::initializePrivateData() {
	FoodImplementation* _implementation = (FoodImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		_implementation->initializePrivateData();
}

DistributedObjectServant* Food::_getImplementation() {
	return getForUpdate();}

void Food::_setImplementation(DistributedObjectServant* servant) {
	setObject((ManagedObjectImplementation*) servant);}

/*
 *	FoodImplementation
 */

FoodImplementation::FoodImplementation(DummyConstructorParameter* param) : ConsumableImplementation(param) {
	_initializeImplementation();
}


FoodImplementation::~FoodImplementation() {
}


void FoodImplementation::finalize() {
}

void FoodImplementation::_initializeImplementation() {
	_setClassHelper(FoodHelper::instance());

	_serializationHelperMethod();
}

void FoodImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (Food*) stub;
	ConsumableImplementation::_setStub(stub);
}

DistributedObjectStub* FoodImplementation::_getStub() {
	return _this;
}

FoodImplementation::operator const Food*() {
	return _this;
}

TransactionalObject* FoodImplementation::clone() {
	return (TransactionalObject*) new FoodImplementation(*this);
}


void FoodImplementation::lock(bool doLock) {
}

void FoodImplementation::lock(ManagedObject* obj) {
}

void FoodImplementation::rlock(bool doLock) {
}

void FoodImplementation::wlock(bool doLock) {
}

void FoodImplementation::wlock(ManagedObject* obj) {
}

void FoodImplementation::unlock(bool doLock) {
}

void FoodImplementation::runlock(bool doLock) {
}

void FoodImplementation::_serializationHelperMethod() {
	ConsumableImplementation::_serializationHelperMethod();

	_setClassName("Food");

}

FoodImplementation::FoodImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/consumable/Food.idl(54):  		Logger.setLoggingName("Food");
	Logger::setLoggingName("Food");
	// server/zone/objects/tangible/consumable/Food.idl(56):  		initializePrivateData();
	initializePrivateData();
}

void FoodImplementation::initializeTransientMembers() {
	// server/zone/objects/tangible/consumable/Food.idl(60):  		super.initializeTransientMembers();
	ConsumableImplementation::initializeTransientMembers();
	// server/zone/objects/tangible/consumable/Food.idl(62):  		Logger.setLoggingName("Food");
	Logger::setLoggingName("Food");
}

void FoodImplementation::initializePrivateData() {
	// server/zone/objects/tangible/consumable/Food.idl(66):  		super.consumableType = super.FOOD;
	ConsumableImplementation::consumableType = ConsumableImplementation::FOOD;
}

/*
 *	FoodAdapter
 */

FoodAdapter::FoodAdapter(FoodImplementation* obj) : ConsumableAdapter(obj) {
}

Packet* FoodAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initializeTransientMembers();
		break;
	case 7:
		initializePrivateData();
		break;
	default:
		return NULL;
	}

	return resp;
}

void FoodAdapter::initializeTransientMembers() {
	((FoodImplementation*) impl)->initializeTransientMembers();
}

void FoodAdapter::initializePrivateData() {
	((FoodImplementation*) impl)->initializePrivateData();
}

/*
 *	FoodHelper
 */

FoodHelper* FoodHelper::staticInitializer = FoodHelper::instance();

FoodHelper::FoodHelper() {
	className = "Food";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void FoodHelper::finalizeHelper() {
	FoodHelper::finalize();
}

DistributedObject* FoodHelper::instantiateObject() {
	return new Food(DummyConstructorParameter::instance());
}

DistributedObjectServant* FoodHelper::instantiateServant() {
	return new FoodImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* FoodHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new FoodAdapter((FoodImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

