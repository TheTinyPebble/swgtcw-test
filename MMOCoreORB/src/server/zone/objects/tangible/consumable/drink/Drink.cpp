/*
 *	server/zone/objects/tangible/consumable/drink/Drink.cpp generated by engine3 IDL compiler 0.55
 */

#include "Drink.h"

#include "DrinkImplementation.h"

#include "../../../scene/SceneObject.h"

#include "../../../creature/CreatureObject.h"

#include "../../../player/Player.h"

#include "../../TangibleObject.h"

#include "../Consumable.h"

/*
 *	DrinkStub
 */

Drink::Drink(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn) : Consumable(DummyConstructorParameter::instance()) {
	_impl = new DrinkImplementation(oid, tempCRC, n, tempn);
	_impl->_setStub(this);
}

Drink::Drink(CreatureObject* creature, unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn) : Consumable(DummyConstructorParameter::instance()) {
	_impl = new DrinkImplementation(creature, oid, tempCRC, n, tempn);
	_impl->_setStub(this);
}

Drink::Drink(DummyConstructorParameter* param) : Consumable(param) {
}

Drink::~Drink() {
}

int Drink::useObject(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return ((DrinkImplementation*) _impl)->useObject(player);
}

void Drink::generateAttributes(SceneObject* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((DrinkImplementation*) _impl)->generateAttributes(obj);
}

void Drink::setNutrition(int n) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addSignedIntParameter(n);

		method.executeWithVoidReturn();
	} else
		((DrinkImplementation*) _impl)->setNutrition(n);
}

void Drink::setFlavor(int f) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addSignedIntParameter(f);

		method.executeWithVoidReturn();
	} else
		((DrinkImplementation*) _impl)->setFlavor(f);
}

void Drink::setQuantity(int q) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addSignedIntParameter(q);

		method.executeWithVoidReturn();
	} else
		((DrinkImplementation*) _impl)->setQuantity(q);
}

void Drink::setFilling(int f) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addSignedIntParameter(f);

		method.executeWithVoidReturn();
	} else
		((DrinkImplementation*) _impl)->setFilling(f);
}

int Drink::getNutrition() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		return method.executeWithSignedIntReturn();
	} else
		return ((DrinkImplementation*) _impl)->getNutrition();
}

int Drink::getFlavor() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		return method.executeWithSignedIntReturn();
	} else
		return ((DrinkImplementation*) _impl)->getFlavor();
}

int Drink::getQuantity() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		return method.executeWithSignedIntReturn();
	} else
		return ((DrinkImplementation*) _impl)->getQuantity();
}

int Drink::getFilling() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		return method.executeWithSignedIntReturn();
	} else
		return ((DrinkImplementation*) _impl)->getFilling();
}

/*
 *	DrinkAdapter
 */

DrinkAdapter::DrinkAdapter(DrinkImplementation* obj) : ConsumableAdapter(obj) {
}

Packet* DrinkAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertSignedInt(useObject((Player*) inv->getObjectParameter()));
		break;
	case 7:
		generateAttributes((SceneObject*) inv->getObjectParameter());
		break;
	case 8:
		setNutrition(inv->getSignedIntParameter());
		break;
	case 9:
		setFlavor(inv->getSignedIntParameter());
		break;
	case 10:
		setQuantity(inv->getSignedIntParameter());
		break;
	case 11:
		setFilling(inv->getSignedIntParameter());
		break;
	case 12:
		resp->insertSignedInt(getNutrition());
		break;
	case 13:
		resp->insertSignedInt(getFlavor());
		break;
	case 14:
		resp->insertSignedInt(getQuantity());
		break;
	case 15:
		resp->insertSignedInt(getFilling());
		break;
	default:
		return NULL;
	}

	return resp;
}

int DrinkAdapter::useObject(Player* player) {
	return ((DrinkImplementation*) impl)->useObject(player);
}

void DrinkAdapter::generateAttributes(SceneObject* obj) {
	return ((DrinkImplementation*) impl)->generateAttributes(obj);
}

void DrinkAdapter::setNutrition(int n) {
	return ((DrinkImplementation*) impl)->setNutrition(n);
}

void DrinkAdapter::setFlavor(int f) {
	return ((DrinkImplementation*) impl)->setFlavor(f);
}

void DrinkAdapter::setQuantity(int q) {
	return ((DrinkImplementation*) impl)->setQuantity(q);
}

void DrinkAdapter::setFilling(int f) {
	return ((DrinkImplementation*) impl)->setFilling(f);
}

int DrinkAdapter::getNutrition() {
	return ((DrinkImplementation*) impl)->getNutrition();
}

int DrinkAdapter::getFlavor() {
	return ((DrinkImplementation*) impl)->getFlavor();
}

int DrinkAdapter::getQuantity() {
	return ((DrinkImplementation*) impl)->getQuantity();
}

int DrinkAdapter::getFilling() {
	return ((DrinkImplementation*) impl)->getFilling();
}

/*
 *	DrinkHelper
 */

DrinkHelper* DrinkHelper::staticInitializer = DrinkHelper::instance();

DrinkHelper::DrinkHelper() {
	className = "Drink";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void DrinkHelper::finalizeHelper() {
	DrinkHelper::finalize();
}

DistributedObject* DrinkHelper::instantiateObject() {
	return new Drink(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* DrinkHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new DrinkAdapter((DrinkImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	DrinkServant
 */

DrinkServant::DrinkServant(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int type) : ConsumableImplementation(oid, tempCRC, n, tempn, type) {
	_classHelper = DrinkHelper::instance();
}

DrinkServant::DrinkServant(CreatureObject* creature, unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int type) : ConsumableImplementation(creature, oid, tempCRC, n, tempn, type) {
	_classHelper = DrinkHelper::instance();
}

DrinkServant::~DrinkServant() {
}

void DrinkServant::_setStub(DistributedObjectStub* stub) {
	_this = (Drink*) stub;
	ConsumableServant::_setStub(stub);
}

DistributedObjectStub* DrinkServant::_getStub() {
	return _this;
}

