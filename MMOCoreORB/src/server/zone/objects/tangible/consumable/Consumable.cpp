/*
 *	server/zone/objects/tangible/consumable/Consumable.cpp generated by engine3 IDL compiler 0.55
 */

#include "Consumable.h"

#include "ConsumableImplementation.h"

#include "../../scene/SceneObject.h"

#include "../../creature/CreatureObject.h"

#include "../../player/Player.h"

#include "../TangibleObject.h"

/*
 *	ConsumableStub
 */

Consumable::Consumable(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int mptype) : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new ConsumableImplementation(oid, tempCRC, n, tempn, mptype);
	_impl->_setStub(this);
}

Consumable::Consumable(CreatureObject* creature, unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int mptype) : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new ConsumableImplementation(creature, oid, tempCRC, n, tempn, mptype);
	_impl->_setStub(this);
}

Consumable::Consumable(CreatureObject* creature, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int mptype) : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new ConsumableImplementation(creature, tempCRC, n, tempn, mptype);
	_impl->_setStub(this);
}

Consumable::Consumable(DummyConstructorParameter* param) : TangibleObject(param) {
}

Consumable::~Consumable() {
}

void Consumable::generateAttributes(SceneObject* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((ConsumableImplementation*) _impl)->generateAttributes(obj);
}

/*
 *	ConsumableAdapter
 */

ConsumableAdapter::ConsumableAdapter(ConsumableImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* ConsumableAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		generateAttributes((SceneObject*) inv->getObjectParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void ConsumableAdapter::generateAttributes(SceneObject* obj) {
	return ((ConsumableImplementation*) impl)->generateAttributes(obj);
}

/*
 *	ConsumableHelper
 */

ConsumableHelper* ConsumableHelper::staticInitializer = ConsumableHelper::instance();

ConsumableHelper::ConsumableHelper() {
	className = "Consumable";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void ConsumableHelper::finalizeHelper() {
	ConsumableHelper::finalize();
}

DistributedObject* ConsumableHelper::instantiateObject() {
	return new Consumable(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ConsumableHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ConsumableAdapter((ConsumableImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	ConsumableServant
 */

ConsumableServant::ConsumableServant(unsigned long long oid, int tp) : TangibleObjectImplementation(oid, tp) {
	_classHelper = ConsumableHelper::instance();
}

ConsumableServant::~ConsumableServant() {
}

void ConsumableServant::_setStub(DistributedObjectStub* stub) {
	_this = (Consumable*) stub;
	TangibleObjectServant::_setStub(stub);
}

DistributedObjectStub* ConsumableServant::_getStub() {
	return _this;
}

