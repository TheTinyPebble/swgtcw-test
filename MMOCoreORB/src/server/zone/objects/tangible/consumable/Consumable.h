/*
 *	server/zone/objects/tangible/consumable/Consumable.h generated by engine3 IDL compiler 0.55
 */

#ifndef CONSUMABLE_H_
#define CONSUMABLE_H_

#include "engine/orb/DistributedObjectBroker.h"

class SceneObject;

class CreatureObject;

class Player;

class TangibleObject;

#include "../TangibleObject.h"

class Consumable : public TangibleObject {
public:
	Consumable(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int mptype);

	Consumable(CreatureObject* creature, unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int mptype);

	Consumable(CreatureObject* creature, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int mptype);

	void generateAttributes(SceneObject* obj);

protected:
	Consumable(DummyConstructorParameter* param);

	virtual ~Consumable();

	friend class ConsumableHelper;
};

class ConsumableImplementation;

class ConsumableAdapter : public TangibleObjectAdapter {
public:
	ConsumableAdapter(ConsumableImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void generateAttributes(SceneObject* obj);

};

class ConsumableHelper : public DistributedObjectClassHelper, public Singleton<ConsumableHelper> {
	static ConsumableHelper* staticInitializer;

public:
	ConsumableHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<ConsumableHelper>;
};

#include "../TangibleObjectImplementation.h"

class ConsumableServant : public TangibleObjectImplementation {
public:
	Consumable* _this;

public:
	ConsumableServant(unsigned long long oid, int tp);
	virtual ~ConsumableServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*CONSUMABLE_H_*/
