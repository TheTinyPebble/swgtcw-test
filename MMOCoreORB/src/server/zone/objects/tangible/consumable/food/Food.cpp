/*
 *	server/zone/objects/tangible/consumable/food/Food.cpp generated by engine3 IDL compiler 0.55
 */

#include "Food.h"

#include "FoodImplementation.h"

#include "../../../scene/SceneObject.h"

#include "../../../creature/CreatureObject.h"

#include "../../../player/Player.h"

#include "../../TangibleObject.h"

#include "../Consumable.h"

/*
 *	FoodStub
 */

Food::Food(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn) : Consumable(DummyConstructorParameter::instance()) {
	_impl = new FoodImplementation(oid, tempCRC, n, tempn);
	_impl->_setStub(this);
}

Food::Food(CreatureObject* creature, unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn) : Consumable(DummyConstructorParameter::instance()) {
	_impl = new FoodImplementation(creature, oid, tempCRC, n, tempn);
	_impl->_setStub(this);
}

Food::Food(DummyConstructorParameter* param) : Consumable(param) {
}

Food::~Food() {
}

int Food::useObject(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return ((FoodImplementation*) _impl)->useObject(player);
}

void Food::generateAttributes(SceneObject* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((FoodImplementation*) _impl)->generateAttributes(obj);
}

void Food::setNutrition(int n) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addSignedIntParameter(n);

		method.executeWithVoidReturn();
	} else
		((FoodImplementation*) _impl)->setNutrition(n);
}

void Food::setFlavor(int f) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addSignedIntParameter(f);

		method.executeWithVoidReturn();
	} else
		((FoodImplementation*) _impl)->setFlavor(f);
}

void Food::setQuantity(int q) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addSignedIntParameter(q);

		method.executeWithVoidReturn();
	} else
		((FoodImplementation*) _impl)->setQuantity(q);
}

void Food::setFilling(int f) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addSignedIntParameter(f);

		method.executeWithVoidReturn();
	} else
		((FoodImplementation*) _impl)->setFilling(f);
}

int Food::getNutrition() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		return method.executeWithSignedIntReturn();
	} else
		return ((FoodImplementation*) _impl)->getNutrition();
}

int Food::getFlavor() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		return method.executeWithSignedIntReturn();
	} else
		return ((FoodImplementation*) _impl)->getFlavor();
}

int Food::getQuantity() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		return method.executeWithSignedIntReturn();
	} else
		return ((FoodImplementation*) _impl)->getQuantity();
}

int Food::getFilling() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		return method.executeWithSignedIntReturn();
	} else
		return ((FoodImplementation*) _impl)->getFilling();
}

/*
 *	FoodAdapter
 */

FoodAdapter::FoodAdapter(FoodImplementation* obj) : ConsumableAdapter(obj) {
}

Packet* FoodAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertSignedInt(useObject((Player*) inv->getObjectParameter()));
		break;
	case 7:
		generateAttributes((SceneObject*) inv->getObjectParameter());
		break;
	case 8:
		setNutrition(inv->getSignedIntParameter());
		break;
	case 9:
		setFlavor(inv->getSignedIntParameter());
		break;
	case 10:
		setQuantity(inv->getSignedIntParameter());
		break;
	case 11:
		setFilling(inv->getSignedIntParameter());
		break;
	case 12:
		resp->insertSignedInt(getNutrition());
		break;
	case 13:
		resp->insertSignedInt(getFlavor());
		break;
	case 14:
		resp->insertSignedInt(getQuantity());
		break;
	case 15:
		resp->insertSignedInt(getFilling());
		break;
	default:
		return NULL;
	}

	return resp;
}

int FoodAdapter::useObject(Player* player) {
	return ((FoodImplementation*) impl)->useObject(player);
}

void FoodAdapter::generateAttributes(SceneObject* obj) {
	return ((FoodImplementation*) impl)->generateAttributes(obj);
}

void FoodAdapter::setNutrition(int n) {
	return ((FoodImplementation*) impl)->setNutrition(n);
}

void FoodAdapter::setFlavor(int f) {
	return ((FoodImplementation*) impl)->setFlavor(f);
}

void FoodAdapter::setQuantity(int q) {
	return ((FoodImplementation*) impl)->setQuantity(q);
}

void FoodAdapter::setFilling(int f) {
	return ((FoodImplementation*) impl)->setFilling(f);
}

int FoodAdapter::getNutrition() {
	return ((FoodImplementation*) impl)->getNutrition();
}

int FoodAdapter::getFlavor() {
	return ((FoodImplementation*) impl)->getFlavor();
}

int FoodAdapter::getQuantity() {
	return ((FoodImplementation*) impl)->getQuantity();
}

int FoodAdapter::getFilling() {
	return ((FoodImplementation*) impl)->getFilling();
}

/*
 *	FoodHelper
 */

FoodHelper* FoodHelper::staticInitializer = FoodHelper::instance();

FoodHelper::FoodHelper() {
	className = "Food";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void FoodHelper::finalizeHelper() {
	FoodHelper::finalize();
}

DistributedObject* FoodHelper::instantiateObject() {
	return new Food(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* FoodHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new FoodAdapter((FoodImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	FoodServant
 */

FoodServant::FoodServant(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int type) : ConsumableImplementation(oid, tempCRC, n, tempn, type) {
	_classHelper = FoodHelper::instance();
}

FoodServant::FoodServant(CreatureObject* creature, unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int type) : ConsumableImplementation(creature, oid, tempCRC, n, tempn, type) {
	_classHelper = FoodHelper::instance();
}

FoodServant::~FoodServant() {
}

void FoodServant::_setStub(DistributedObjectStub* stub) {
	_this = (Food*) stub;
	ConsumableServant::_setStub(stub);
}

DistributedObjectStub* FoodServant::_getStub() {
	return _this;
}

