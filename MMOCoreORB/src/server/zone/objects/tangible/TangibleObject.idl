/*
Copyright (C) 2007 <SWGEmu>

This File is part of Core3.

This program is free software; you can redistribute
it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software
Foundation; either version 2 of the License,
or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for
more details.

You should have received a copy of the GNU Lesser General
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Linking Engine3 statically or dynamically with other modules
is making a combined work based on Engine3.
Thus, the terms and conditions of the GNU Lesser General Public License
cover the whole combination.

In addition, as a special exception, the copyright holders of Engine3
give you permission to combine Engine3 program with free software
programs or libraries that are released under the GNU LGPL and with
code included in the standard release of Core3 under the GNU LGPL
license (or modified versions of such code, with unchanged license).
You may copy and distribute such a system following the terms of the
GNU LGPL for Engine3 and the licenses of the other code concerned,
provided that you include the source code of that other code when
and as the GNU LGPL requires distribution of source code.

Note that people who make modified versions of Engine3 are not obligated
to grant this special exception for their modified versions;
it is their choice whether to do so. The GNU Lesser General Public License
gives permission to release a modified version without this exception;
this exception also makes it possible to release a modified version
which carries forward this exception.
*/

include "engine/service/Message";

import "../../Zone";

import "../scene/SceneObject";

import "../creature/CreatureObject";

import "../player/Player";

import "../draftschematic/DraftSchematic";

import "../intangible/IntangibleObject";

interface TangibleObject implements SceneObject {
	TangibleObject(unsigned long oid, int tp = 0);

	TangibleObject(unsigned long oid, unsigned int tempCRC, const UnicodeString n, const String tempname, int tp = 0) {
		super(oid, int type);
	}

	TangibleObject(CreatureObject creature, unsigned int tempCRC, const UnicodeString n, const String tempname, int tp = 0);

	void updateCraftingValues(DraftSchematic draftSchematic);

	void close(Player player);

	void setEquipped(boolean eqp);

	void sendTo(Player player, boolean doClose = true);

	void sendDeltas(Player player);

	void repairItem(Player player);

	void setObjectName(Player player);

	// getters

	unsigned int getDefenderUpdateCounter();
	unsigned int getNewDefenderUpdateCounter(int cnt);

	char getUnknownByte();

	float getComplexity();

	int getVolume();

	boolean isEquipped();

	boolean isWeapon();
	boolean isArmor();
	boolean isClothing();

	//General handler
	boolean isContainer();

	//More different handle
	boolean isWearableContainer();
	boolean isContainer1();
	boolean isContainer2();

	boolean isInstrument();

	boolean isAttachment();

	boolean isDestroyed();
	boolean isAttackable();
	boolean isAttackableBy(CreatureObject creature);

	boolean isResource();
	boolean isTicket();
	boolean isTicketCollector();
	boolean isTerminal();
	boolean isTool();
	boolean isSurveyTool();
	boolean isPharmaceutical();

	boolean isGenericItem();

	boolean isLair();

	boolean isDeed();

	boolean isInstallation();

	boolean isCraftingStation();

	boolean isCraftingTool();

	boolean isFactoryCrate();

	boolean isComponent();
	boolean isTrap();
	boolean isGrenade();
	boolean isThrowable();

	boolean isWeaponPowerup();
	boolean isCamoKit();
	boolean isCampKit();
	boolean isLoot();

	boolean isInsured();
	boolean isInsurable();
	boolean isDecayable();

	boolean isSlicable();
	boolean isSliced();
	boolean isBeingSliced();

	unsigned long getSlicerID();
	void setSlicerID(unsigned long id);

	void setSlicable(boolean value);

	void setCraftersName(String n);
	void setCraftedSerial(String s);

	void setPlayerUseMask(unsigned int mask);
	unsigned int getPlayerUseMask();

	void setOptionsBitmask(unsigned int mask);
	unsigned int getOptionsBitmask();

	int getObjectSubType();

	unsigned int getTemplateID();

	int getObjectCount();

	float getConditionDamage();
	int getMaxCondition();
	int getCondition();

	void doDamage(int damage, SceneObject attacker);

	String getCraftersName();
	String getCraftedSerial();

	String getMisoAsocKey();

	// setters
	void setLoot(boolean l);
	void setMaxCondition(int maxCond);

	void setObjectSubType(const int type);

	void setConditionDamage(int damage);

	void setObjectCount(const int count);

	void setMisoAsocKey(const String tma);

	//Sending of Messages
	void updateOptionsBitmask(Player player);
	void updateInsurance(Player player, boolean insure);

	//Event Handlers
	void onBroken();
	void onSlicingFailure(Player slicer);
	void onEquip(Player player);
    void onUnequip(Player player);

	//Actions
	void decay(float decayRate);
	void slice(Player slicer);
}
