/*
Copyright (C) 2007 <SWGEmu>

This File is part of Core3.

This program is free software; you can redistribute
it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software
Foundation; either version 2 of the License,
or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for
more details.

You should have received a copy of the GNU Lesser General
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Linking Engine3 statically or dynamically with other modules
is making a combined work based on Engine3.
Thus, the terms and conditions of the GNU Lesser General Public License
cover the whole combination.

In addition, as a special exception, the copyright holders of Engine3
give you permission to combine Engine3 program with free software
programs or libraries that are released under the GNU LGPL and with
code included in the standard release of Core3 under the GNU LGPL
license (or modified versions of such code, with unchanged license).
You may copy and distribute such a system following the terms of the
GNU LGPL for Engine3 and the licenses of the other code concerned,
provided that you include the source code of that other code when
and as the GNU LGPL requires distribution of source code.

Note that people who make modified versions of Engine3 are not obligated
to grant this special exception for their modified versions;
it is their choice whether to do so. The GNU Lesser General Public License
gives permission to release a modified version without this exception;
this exception also makes it possible to release a modified version
which carries forward this exception.
*/

package server.zone.objects.tangible;

import server.zone.objects.scene.SceneObject;
import engine.lua.LuaObject;
import system.util.Vector;
import engine.log.Logger;

include server.zone.objects.scene.variables.CustomizationVariables;

include server.zone.objects.scene.variables.DeltaVector;

class TangibleObject extends SceneObject {
	protected boolean targetable;
	
	protected float complexity;
	protected int volume;
	
	@dereferenced
	protected CustomizationVariables customizationVariables;
	
	protected int conditionDamage;
	protected int maxCondition;
	protected int objectCount;
	
	protected unsigned int optionsBitmask;
	protected unsigned int pvpStatusBitmask;
	
	protected byte unknownByte;
	
	@dereferenced
	protected DeltaVector<SceneObject> defenderList;
	
	/**
	 * TangibleObject constructor, used to initialized the object
	 * @pre { templateData is a valid SharedTangibleObjectTemplate LuaObject that contains the necessary values to initialize CreatureObject }
	 * @post { TangibleObject is initialized } 
	 * @param templateData templateData points to the SharedTangibleObjectTemplate LuaObject that is used to initialize TangibleObject members
	 */
	public TangibleObject(LuaObject templateData) {
		super(templateData);
		
		Logger.setLoggingName("TangibleObject");

		loadTemplateData(templateData);
	}
	
	/**
	 * Reads and sets the template data from a SharedTangibleObjectTemplate LuaObject
	 * @pre { templateData is a valid pointer }
	 * @post { TangibleObject members are initialized }
	 * @param templateData templateData points to the SharedTangibleObjectTemplate LuaObject that is used to initialize the TangibleObject members
	 */
	@local
	public native void loadTemplateData(LuaObject templateData);
	
	/**
	 * Initializes the transient members of SceneObject, must call the inherited object method first.
	 * @pre {Êtransient members are not initialized }
	 * @post { transient members are initialized }
	 */
	public native void initializeTransientMembers();
	
	/**
	 * Sends the TANO baseline messages of this object to the specified player
	 * @pre { this object is locked }
	 * @post { this object is locked, player received the baseline messages }
	 * @param player SceneObject that will receive the baselines 
	 */
	public native abstract void sendBaselinesTo(SceneObject player);
	
	/**
	 * Sets the active defender
	 * @pre { this object is locked }
	 * @post { this object is locked, defender is active }
	 * @param defender SceneObject to set as the active defender
	 */
	public native abstract void setDefender(SceneObject defender);
	
	/**
	 * Adds a SceneObject to the defender vector
	 * @pre { this object is locked }
	 * @post { this object is locked, defender is in the defender vector }
	 * @param defender SceneObject to add to the defender vector
	 */
	public native abstract void addDefender(SceneObject defender);
	
	/**
	 * Removes the specified defender from the defender vector
	 * @pre { this object is locked }
	 * @post { this object is locked, defender is not in the defender vector }
	 * @param defender SceneObject to remove from the defender vector
	 */
	public native abstract void removeDefender(SceneObject defender);
	
	/**
	 * Removes all the defenders from the defender vector
	 * @pre { this object is locked }
	 * @post { this object is locked, defender vector is empty }
	 */
	public native abstract void removeDefenders();
	
	/**
	 * Sets the combat state, needs to be overriden
	 * @pre { this object is locked }
	 * @post { this object is locked, this object is in a combat state }
	 */
	public abstract void setCombatState() {
		
	}
	
	/**
	 * Cleares the combat state
	 * @pre { this object is locked }
	 * @post { this object is locked, this object is not in a combat state }
	 * @param clearDefenders if true the defender vector willl be emptied
	 */
	public abstract void clearCombatState(boolean clearDefenders = true) {
		if (clearDefenders)
			removeDefenders();
	}
	
	/**
	 * Evaluates if this object contains the specified defender
	 * @pre { this object is locked }
	 * @post { this object is locked }
	 * @return returns true if SceneObject defender exists in the defender vector
	 */
	public boolean hasDefender(SceneObject defender) {
		for (int i = 0; i < defenderList.size(); ++i) {
			if (defenderList.get(i) == defender)
				return true;
		}
		
		return false;
	}
	
	public byte getUnknownByte() {
		return unknownByte;
	}
	
	
	@local
	public CustomizationVariables getCustomizationVariables() {
		return customizationVariables;
	}
	
	public int getObjectCount() {
		return objectCount;
	}
	
	public int getMaxCondition() {
		return maxCondition;
	}
	
	public int getConditionDamage() {
		return conditionDamage;
	}
	
	public int getVolume() {
		return volume;
	}
	
	public float getComplexity() {
		return complexity;
	}
	
	public unsigned int getOptionsBitmask() {
		return optionsBitmask;
	}
	
	public unsigned int getPvpStatusBitmask() {
		return pvpStatusBitmask;
	}
	
	public void getCustomizationString(string variables) {
		customizationVariables.getData(variables);
	}
	
	@local
	public DeltaVector<SceneObject> getDefenderList() {
		return defenderList;
	}
	
	public void setCustomizationString(final string vars) {
		customizationVariables.parseFromClientString(vars);
	}
}







