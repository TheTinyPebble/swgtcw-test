/*
 *	server/zone/objects/tangible/camp/CampKit.cpp generated by engine3 IDL compiler 0.60
 */

#include "CampKit.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/Zone.h"

#include "server/zone/templates/SharedObjectTemplate.h"

/*
 *	CampKitStub
 */

CampKit::CampKit() : TangibleObject(DummyConstructorParameter::instance()) {
	CampKitImplementation* _implementation = new CampKitImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

CampKit::CampKit(DummyConstructorParameter* param) : TangibleObject(param) {
}

CampKit::~CampKit() {
}


void CampKit::loadTemplateData(SharedObjectTemplate* templateData) {
	CampKitImplementation* _implementation = (CampKitImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->loadTemplateData(templateData);
}

bool CampKit::isCampKitOject() {
	CampKitImplementation* _implementation = (CampKitImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isCampKitOject();
}

DistributedObjectServant* CampKit::_getImplementation() {

	_updated = true;
	return _impl;
}

void CampKit::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;}

/*
 *	CampKitImplementation
 */

CampKitImplementation::CampKitImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
	_initializeImplementation();
}


CampKitImplementation::~CampKitImplementation() {
}


void CampKitImplementation::finalize() {
}

void CampKitImplementation::_initializeImplementation() {
	_setClassHelper(CampKitHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void CampKitImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (CampKit*) stub;
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* CampKitImplementation::_getStub() {
	return _this;
}

CampKitImplementation::operator const CampKit*() {
	return _this;
}

void CampKitImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void CampKitImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void CampKitImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void CampKitImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void CampKitImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void CampKitImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void CampKitImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void CampKitImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("CampKit");

}

void CampKitImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(CampKitImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool CampKitImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (TangibleObjectImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "exp") {
		TypeInfo<unsigned short >::parseFromBinaryStream(&exp, stream);
		return true;
	}

	if (_name == "duration") {
		TypeInfo<unsigned short >::parseFromBinaryStream(&duration, stream);
		return true;
	}

	if (_name == "campType") {
		TypeInfo<unsigned short >::parseFromBinaryStream(&campType, stream);
		return true;
	}


	return false;
}

void CampKitImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = CampKitImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int CampKitImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "exp";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned short >::toBinaryStream(&exp, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "duration";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned short >::toBinaryStream(&duration, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "campType";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned short >::toBinaryStream(&campType, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 3 + TangibleObjectImplementation::writeObjectMembers(stream);
}

CampKitImplementation::CampKitImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/camp/CampKit.idl(61):  		exp = 0;
	exp = 0;
	// server/zone/objects/tangible/camp/CampKit.idl(62):  		duration = 0;
	duration = 0;
	// server/zone/objects/tangible/camp/CampKit.idl(63):  		campType = 0;
	campType = 0;
	// server/zone/objects/tangible/camp/CampKit.idl(65):  		Logger.setLoggingName("CampKit");
	Logger::setLoggingName("CampKit");
}

void CampKitImplementation::loadTemplateData(SharedObjectTemplate* templateData) {
	// server/zone/objects/tangible/camp/CampKit.idl(70):  		super.loadTemplateData(templateData);
	TangibleObjectImplementation::loadTemplateData(templateData);
	// server/zone/objects/tangible/camp/CampKit.idl(72):  		CampKitTemplate 
	if (!templateData->isCampKitTemplate())	// server/zone/objects/tangible/camp/CampKit.idl(73):  			return;
	return;
	// server/zone/objects/tangible/camp/CampKit.idl(75):  campTemplate = (CampKitTemplate) templateData;
	CampKitTemplate* campTemplate = (CampKitTemplate*) templateData;
	// server/zone/objects/tangible/camp/CampKit.idl(77):  		exp = campTemplate.getExp();
	exp = campTemplate->getExp();
	// server/zone/objects/tangible/camp/CampKit.idl(78):  		duration = campTemplate.getDuration();
	duration = campTemplate->getDuration();
	// server/zone/objects/tangible/camp/CampKit.idl(79):  		campType = campTemplate.getCampType();
	campType = campTemplate->getCampType();
}

bool CampKitImplementation::isCampKitOject() {
	// server/zone/objects/tangible/camp/CampKit.idl(83):  		return true;
	return true;
}

/*
 *	CampKitAdapter
 */

CampKitAdapter::CampKitAdapter(CampKitImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* CampKitAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertBoolean(isCampKitOject());
		break;
	default:
		return NULL;
	}

	return resp;
}

bool CampKitAdapter::isCampKitOject() {
	return ((CampKitImplementation*) impl)->isCampKitOject();
}

/*
 *	CampKitHelper
 */

CampKitHelper* CampKitHelper::staticInitializer = CampKitHelper::instance();

CampKitHelper::CampKitHelper() {
	className = "CampKit";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void CampKitHelper::finalizeHelper() {
	CampKitHelper::finalize();
}

DistributedObject* CampKitHelper::instantiateObject() {
	return new CampKit(DummyConstructorParameter::instance());
}

DistributedObjectServant* CampKitHelper::instantiateServant() {
	return new CampKitImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* CampKitHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new CampKitAdapter((CampKitImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

