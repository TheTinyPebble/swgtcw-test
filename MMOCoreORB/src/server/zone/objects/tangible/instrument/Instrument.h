/*
 *	server/zone/objects/tangible/instrument/Instrument.h generated by engine3 IDL compiler 0.55
 */

#ifndef INSTRUMENT_H_
#define INSTRUMENT_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/service/Message.h"

class Player;

class TangibleObject;

#include "../TangibleObject.h"

class Instrument : public TangibleObject {
public:
	Instrument(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int insttype);

	Instrument(Player* player, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int insttype);

	int useObject(Player* player);

	int getInstrumentType();

	void setInstrumentType(const int type);

protected:
	Instrument(DummyConstructorParameter* param);

	virtual ~Instrument();

	friend class InstrumentHelper;
};

class InstrumentImplementation;

class InstrumentAdapter : public TangibleObjectAdapter {
public:
	InstrumentAdapter(InstrumentImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	int useObject(Player* player);

	int getInstrumentType();

	void setInstrumentType(const int type);

};

class InstrumentHelper : public DistributedObjectClassHelper, public Singleton<InstrumentHelper> {
	static InstrumentHelper* staticInitializer;

public:
	InstrumentHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<InstrumentHelper>;
};

#include "../TangibleObjectImplementation.h"

class InstrumentServant : public TangibleObjectImplementation {
public:
	Instrument* _this;

public:
	InstrumentServant(unsigned long long oid, int tp);
	virtual ~InstrumentServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*INSTRUMENT_H_*/
