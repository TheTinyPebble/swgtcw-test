/*
 *	server/zone/objects/tangible/camokits/CamoKit.cpp generated by engine3 IDL compiler 0.55
 */

#include "CamoKit.h"

#include "CamoKitImplementation.h"

#include "../../scene/SceneObject.h"

#include "../../player/Player.h"

#include "../TangibleObject.h"

/*
 *	CamoKitStub
 */

CamoKit::CamoKit(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn) : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new CamoKitImplementation(oid, tempCRC, n, tempn);
	_impl->_setStub(this);
}

CamoKit::CamoKit(Player* player, unsigned int tempCRC, const UnicodeString& n, const String& tempn) : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new CamoKitImplementation(player, tempCRC, n, tempn);
	_impl->_setStub(this);
}

CamoKit::CamoKit(DummyConstructorParameter* param) : TangibleObject(param) {
}

CamoKit::~CamoKit() {
}

void CamoKit::useCharge(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((CamoKitImplementation*) _impl)->useCharge(player);
}

int CamoKit::getPlanet() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		return method.executeWithSignedIntReturn();
	} else
		return ((CamoKitImplementation*) _impl)->getPlanet();
}

int CamoKit::getUsesRemaining() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		return method.executeWithSignedIntReturn();
	} else
		return ((CamoKitImplementation*) _impl)->getUsesRemaining();
}

int CamoKit::getConcealMin() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return method.executeWithSignedIntReturn();
	} else
		return ((CamoKitImplementation*) _impl)->getConcealMin();
}

void CamoKit::setPlanet(const int tp) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addSignedIntParameter(tp);

		method.executeWithVoidReturn();
	} else
		((CamoKitImplementation*) _impl)->setPlanet(tp);
}

void CamoKit::setUsesRemaining(const int us) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addSignedIntParameter(us);

		method.executeWithVoidReturn();
	} else
		((CamoKitImplementation*) _impl)->setUsesRemaining(us);
}

void CamoKit::setConcealMin(const int min) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addSignedIntParameter(min);

		method.executeWithVoidReturn();
	} else
		((CamoKitImplementation*) _impl)->setConcealMin(min);
}

void CamoKit::remove(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((CamoKitImplementation*) _impl)->remove(player);
}

void CamoKit::sendDeltas(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((CamoKitImplementation*) _impl)->sendDeltas(player);
}

void CamoKit::generateAttributes(SceneObject* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((CamoKitImplementation*) _impl)->generateAttributes(obj);
}

void CamoKit::parseItemAttributes() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		method.executeWithVoidReturn();
	} else
		((CamoKitImplementation*) _impl)->parseItemAttributes();
}

/*
 *	CamoKitAdapter
 */

CamoKitAdapter::CamoKitAdapter(CamoKitImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* CamoKitAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		useCharge((Player*) inv->getObjectParameter());
		break;
	case 7:
		resp->insertSignedInt(getPlanet());
		break;
	case 8:
		resp->insertSignedInt(getUsesRemaining());
		break;
	case 9:
		resp->insertSignedInt(getConcealMin());
		break;
	case 10:
		setPlanet(inv->getSignedIntParameter());
		break;
	case 11:
		setUsesRemaining(inv->getSignedIntParameter());
		break;
	case 12:
		setConcealMin(inv->getSignedIntParameter());
		break;
	case 13:
		remove((Player*) inv->getObjectParameter());
		break;
	case 14:
		sendDeltas((Player*) inv->getObjectParameter());
		break;
	case 15:
		generateAttributes((SceneObject*) inv->getObjectParameter());
		break;
	case 16:
		parseItemAttributes();
		break;
	default:
		return NULL;
	}

	return resp;
}

void CamoKitAdapter::useCharge(Player* player) {
	return ((CamoKitImplementation*) impl)->useCharge(player);
}

int CamoKitAdapter::getPlanet() {
	return ((CamoKitImplementation*) impl)->getPlanet();
}

int CamoKitAdapter::getUsesRemaining() {
	return ((CamoKitImplementation*) impl)->getUsesRemaining();
}

int CamoKitAdapter::getConcealMin() {
	return ((CamoKitImplementation*) impl)->getConcealMin();
}

void CamoKitAdapter::setPlanet(const int tp) {
	return ((CamoKitImplementation*) impl)->setPlanet(tp);
}

void CamoKitAdapter::setUsesRemaining(const int us) {
	return ((CamoKitImplementation*) impl)->setUsesRemaining(us);
}

void CamoKitAdapter::setConcealMin(const int min) {
	return ((CamoKitImplementation*) impl)->setConcealMin(min);
}

void CamoKitAdapter::remove(Player* player) {
	return ((CamoKitImplementation*) impl)->remove(player);
}

void CamoKitAdapter::sendDeltas(Player* player) {
	return ((CamoKitImplementation*) impl)->sendDeltas(player);
}

void CamoKitAdapter::generateAttributes(SceneObject* obj) {
	return ((CamoKitImplementation*) impl)->generateAttributes(obj);
}

void CamoKitAdapter::parseItemAttributes() {
	return ((CamoKitImplementation*) impl)->parseItemAttributes();
}

/*
 *	CamoKitHelper
 */

CamoKitHelper* CamoKitHelper::staticInitializer = CamoKitHelper::instance();

CamoKitHelper::CamoKitHelper() {
	className = "CamoKit";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void CamoKitHelper::finalizeHelper() {
	CamoKitHelper::finalize();
}

DistributedObject* CamoKitHelper::instantiateObject() {
	return new CamoKit(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* CamoKitHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new CamoKitAdapter((CamoKitImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	CamoKitServant
 */

CamoKitServant::CamoKitServant(unsigned long long oid, int tp) : TangibleObjectImplementation(oid, tp) {
	_classHelper = CamoKitHelper::instance();
}

CamoKitServant::~CamoKitServant() {
}

void CamoKitServant::_setStub(DistributedObjectStub* stub) {
	_this = (CamoKit*) stub;
	TangibleObjectServant::_setStub(stub);
}

DistributedObjectStub* CamoKitServant::_getStub() {
	return _this;
}

