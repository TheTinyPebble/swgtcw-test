/*
 *	server/zone/objects/tangible/ticket/Ticket.cpp generated by engine3 IDL compiler 0.55
 */

#include "Ticket.h"

#include "TicketImplementation.h"

#include "../../player/Player.h"

#include "../TangibleObject.h"

/*
 *	TicketStub
 */

Ticket::Ticket(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn) : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new TicketImplementation(oid, tempCRC, n, tempn);
	_impl->_setStub(this);
}

Ticket::Ticket(Player* player, unsigned int tempCRC, const UnicodeString& n, const String& tempn, const String& dpPlanet, const String& dpPoint, const String& arPlanet, const String& arPoint) : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new TicketImplementation(player, tempCRC, n, tempn, dpPlanet, dpPoint, arPlanet, arPoint);
	_impl->_setStub(this);
}

Ticket::Ticket(DummyConstructorParameter* param) : TangibleObject(param) {
}

Ticket::~Ticket() {
}

int Ticket::useObject(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return ((TicketImplementation*) _impl)->useObject(player);
}

String& Ticket::getDeparturePlanet() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithAsciiReturn(_return_getDeparturePlanet);
		return _return_getDeparturePlanet;
	} else
		return ((TicketImplementation*) _impl)->getDeparturePlanet();
}

String& Ticket::getDeparturePoint() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		method.executeWithAsciiReturn(_return_getDeparturePoint);
		return _return_getDeparturePoint;
	} else
		return ((TicketImplementation*) _impl)->getDeparturePoint();
}

String& Ticket::getArrivalPlanet() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		method.executeWithAsciiReturn(_return_getArrivalPlanet);
		return _return_getArrivalPlanet;
	} else
		return ((TicketImplementation*) _impl)->getArrivalPlanet();
}

String& Ticket::getArrivalPoint() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		method.executeWithAsciiReturn(_return_getArrivalPoint);
		return _return_getArrivalPoint;
	} else
		return ((TicketImplementation*) _impl)->getArrivalPoint();
}

/*
 *	TicketAdapter
 */

TicketAdapter::TicketAdapter(TicketImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* TicketAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertSignedInt(useObject((Player*) inv->getObjectParameter()));
		break;
	case 7:
		resp->insertAscii(getDeparturePlanet());
		break;
	case 8:
		resp->insertAscii(getDeparturePoint());
		break;
	case 9:
		resp->insertAscii(getArrivalPlanet());
		break;
	case 10:
		resp->insertAscii(getArrivalPoint());
		break;
	default:
		return NULL;
	}

	return resp;
}

int TicketAdapter::useObject(Player* player) {
	return ((TicketImplementation*) impl)->useObject(player);
}

String& TicketAdapter::getDeparturePlanet() {
	return ((TicketImplementation*) impl)->getDeparturePlanet();
}

String& TicketAdapter::getDeparturePoint() {
	return ((TicketImplementation*) impl)->getDeparturePoint();
}

String& TicketAdapter::getArrivalPlanet() {
	return ((TicketImplementation*) impl)->getArrivalPlanet();
}

String& TicketAdapter::getArrivalPoint() {
	return ((TicketImplementation*) impl)->getArrivalPoint();
}

/*
 *	TicketHelper
 */

TicketHelper* TicketHelper::staticInitializer = TicketHelper::instance();

TicketHelper::TicketHelper() {
	className = "Ticket";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void TicketHelper::finalizeHelper() {
	TicketHelper::finalize();
}

DistributedObject* TicketHelper::instantiateObject() {
	return new Ticket(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* TicketHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new TicketAdapter((TicketImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	TicketServant
 */

TicketServant::TicketServant(unsigned long long oid, int tp) : TangibleObjectImplementation(oid, tp) {
	_classHelper = TicketHelper::instance();
}

TicketServant::~TicketServant() {
}

void TicketServant::_setStub(DistributedObjectStub* stub) {
	_this = (Ticket*) stub;
	TangibleObjectServant::_setStub(stub);
}

DistributedObjectStub* TicketServant::_getStub() {
	return _this;
}

