/*
 *	server/zone/objects/tangible/ticket/TicketObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "TicketObject.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/Zone.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

/*
 *	TicketObjectStub
 */

enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 6,RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_,RPC_SETDEPARTUREPLANET__STRING_,RPC_SETDEPARTUREPOINT__STRING_,RPC_SETARRIVALPLANET__STRING_,RPC_SETARRIVALPOINT__STRING_,RPC_GETDEPARTUREPLANET__,RPC_GETDEPARTUREPOINT__,RPC_GETARRIVALPLANET__,RPC_GETARRIVALPOINT__,RPC_ISTICKETOBJECT__};

TicketObject::TicketObject() : TangibleObject(DummyConstructorParameter::instance()) {
	TicketObjectImplementation* _implementation = new TicketObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("TicketObject");
}

TicketObject::TicketObject(DummyConstructorParameter* param) : TangibleObject(param) {
	_setClassName("TicketObject");
}

TicketObject::~TicketObject() {
}



void TicketObject::initializeTransientMembers() {
	TicketObjectImplementation* _implementation = static_cast<TicketObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void TicketObject::fillAttributeList(AttributeListMessage* msg, CreatureObject* object) {
	TicketObjectImplementation* _implementation = static_cast<TicketObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->fillAttributeList(msg, object);
}

int TicketObject::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	TicketObjectImplementation* _implementation = static_cast<TicketObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->handleObjectMenuSelect(player, selectedID);
}

void TicketObject::setDeparturePlanet(const String& departureplanet) {
	TicketObjectImplementation* _implementation = static_cast<TicketObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETDEPARTUREPLANET__STRING_);
		method.addAsciiParameter(departureplanet);

		method.executeWithVoidReturn();
	} else
		_implementation->setDeparturePlanet(departureplanet);
}

void TicketObject::setDeparturePoint(const String& departurepoint) {
	TicketObjectImplementation* _implementation = static_cast<TicketObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETDEPARTUREPOINT__STRING_);
		method.addAsciiParameter(departurepoint);

		method.executeWithVoidReturn();
	} else
		_implementation->setDeparturePoint(departurepoint);
}

void TicketObject::setArrivalPlanet(const String& arrival) {
	TicketObjectImplementation* _implementation = static_cast<TicketObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETARRIVALPLANET__STRING_);
		method.addAsciiParameter(arrival);

		method.executeWithVoidReturn();
	} else
		_implementation->setArrivalPlanet(arrival);
}

void TicketObject::setArrivalPoint(const String& arrival) {
	TicketObjectImplementation* _implementation = static_cast<TicketObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETARRIVALPOINT__STRING_);
		method.addAsciiParameter(arrival);

		method.executeWithVoidReturn();
	} else
		_implementation->setArrivalPoint(arrival);
}

String TicketObject::getDeparturePlanet() {
	TicketObjectImplementation* _implementation = static_cast<TicketObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDEPARTUREPLANET__);

		String _return_getDeparturePlanet;
		method.executeWithAsciiReturn(_return_getDeparturePlanet);
		return _return_getDeparturePlanet;
	} else
		return _implementation->getDeparturePlanet();
}

String TicketObject::getDeparturePoint() {
	TicketObjectImplementation* _implementation = static_cast<TicketObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDEPARTUREPOINT__);

		String _return_getDeparturePoint;
		method.executeWithAsciiReturn(_return_getDeparturePoint);
		return _return_getDeparturePoint;
	} else
		return _implementation->getDeparturePoint();
}

String TicketObject::getArrivalPlanet() {
	TicketObjectImplementation* _implementation = static_cast<TicketObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETARRIVALPLANET__);

		String _return_getArrivalPlanet;
		method.executeWithAsciiReturn(_return_getArrivalPlanet);
		return _return_getArrivalPlanet;
	} else
		return _implementation->getArrivalPlanet();
}

String TicketObject::getArrivalPoint() {
	TicketObjectImplementation* _implementation = static_cast<TicketObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETARRIVALPOINT__);

		String _return_getArrivalPoint;
		method.executeWithAsciiReturn(_return_getArrivalPoint);
		return _return_getArrivalPoint;
	} else
		return _implementation->getArrivalPoint();
}

bool TicketObject::isTicketObject() {
	TicketObjectImplementation* _implementation = static_cast<TicketObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISTICKETOBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isTicketObject();
}

DistributedObjectServant* TicketObject::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* TicketObject::_getImplementationForRead() {
	return _impl;
}

void TicketObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	TicketObjectImplementation
 */

TicketObjectImplementation::TicketObjectImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
	_initializeImplementation();
}


TicketObjectImplementation::~TicketObjectImplementation() {
}


void TicketObjectImplementation::finalize() {
}

void TicketObjectImplementation::_initializeImplementation() {
	_setClassHelper(TicketObjectHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void TicketObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<TicketObject*>(stub);
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* TicketObjectImplementation::_getStub() {
	return _this.get();
}

TicketObjectImplementation::operator const TicketObject*() {
	return _this.get();
}

void TicketObjectImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void TicketObjectImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void TicketObjectImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void TicketObjectImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void TicketObjectImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void TicketObjectImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void TicketObjectImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void TicketObjectImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("TicketObject");

}

void TicketObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(TicketObjectImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool TicketObjectImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (TangibleObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x84d97799: //TicketObject.departurePlanet
		TypeInfo<String >::parseFromBinaryStream(&departurePlanet, stream);
		return true;

	case 0xf6b51586: //TicketObject.departurePoint
		TypeInfo<String >::parseFromBinaryStream(&departurePoint, stream);
		return true;

	case 0x1dd9757f: //TicketObject.arrivalPlanet
		TypeInfo<String >::parseFromBinaryStream(&arrivalPlanet, stream);
		return true;

	case 0x2f1f473f: //TicketObject.arrivalPoint
		TypeInfo<String >::parseFromBinaryStream(&arrivalPoint, stream);
		return true;

	}

	return false;
}

void TicketObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = TicketObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int TicketObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = TangibleObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x84d97799; //TicketObject.departurePlanet
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&departurePlanet, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xf6b51586; //TicketObject.departurePoint
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&departurePoint, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x1dd9757f; //TicketObject.arrivalPlanet
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&arrivalPlanet, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x2f1f473f; //TicketObject.arrivalPoint
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&arrivalPoint, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 4;
}

TicketObjectImplementation::TicketObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/ticket/TicketObject.idl():  		Logger.setLoggingName("TicketObject");
	Logger::setLoggingName("TicketObject");
}

void TicketObjectImplementation::initializeTransientMembers() {
	// server/zone/objects/tangible/ticket/TicketObject.idl():  		super.initializeTransientMembers();
	TangibleObjectImplementation::initializeTransientMembers();
	// server/zone/objects/tangible/ticket/TicketObject.idl():  		Logger.setLoggingName("TicketObject");
	Logger::setLoggingName("TicketObject");
}

void TicketObjectImplementation::setDeparturePlanet(const String& departureplanet) {
	// server/zone/objects/tangible/ticket/TicketObject.idl():  		departurePlanet = departureplanet;
	departurePlanet = departureplanet;
}

void TicketObjectImplementation::setDeparturePoint(const String& departurepoint) {
	// server/zone/objects/tangible/ticket/TicketObject.idl():  		departurePoint = departurepoint;
	departurePoint = departurepoint;
}

void TicketObjectImplementation::setArrivalPlanet(const String& arrival) {
	// server/zone/objects/tangible/ticket/TicketObject.idl():  		arrivalPlanet = arrival;
	arrivalPlanet = arrival;
}

void TicketObjectImplementation::setArrivalPoint(const String& arrival) {
	// server/zone/objects/tangible/ticket/TicketObject.idl():  		arrivalPoint = arrival;
	arrivalPoint = arrival;
}

String TicketObjectImplementation::getDeparturePlanet() {
	// server/zone/objects/tangible/ticket/TicketObject.idl():  		return departurePlanet;
	return departurePlanet;
}

String TicketObjectImplementation::getDeparturePoint() {
	// server/zone/objects/tangible/ticket/TicketObject.idl():  		return departurePoint;
	return departurePoint;
}

String TicketObjectImplementation::getArrivalPlanet() {
	// server/zone/objects/tangible/ticket/TicketObject.idl():  		return arrivalPlanet;
	return arrivalPlanet;
}

String TicketObjectImplementation::getArrivalPoint() {
	// server/zone/objects/tangible/ticket/TicketObject.idl():  		return arrivalPoint;
	return arrivalPoint;
}

bool TicketObjectImplementation::isTicketObject() {
	// server/zone/objects/tangible/ticket/TicketObject.idl():  		return true;
	return true;
}

/*
 *	TicketObjectAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


TicketObjectAdapter::TicketObjectAdapter(TicketObject* obj) : TangibleObjectAdapter(obj) {
}

void TicketObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			initializeTransientMembers();
		}
		break;
	case RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_:
		{
			resp->insertSignedInt(handleObjectMenuSelect(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getByteParameter()));
		}
		break;
	case RPC_SETDEPARTUREPLANET__STRING_:
		{
			String departureplanet; 
			setDeparturePlanet(inv->getAsciiParameter(departureplanet));
		}
		break;
	case RPC_SETDEPARTUREPOINT__STRING_:
		{
			String departurepoint; 
			setDeparturePoint(inv->getAsciiParameter(departurepoint));
		}
		break;
	case RPC_SETARRIVALPLANET__STRING_:
		{
			String arrival; 
			setArrivalPlanet(inv->getAsciiParameter(arrival));
		}
		break;
	case RPC_SETARRIVALPOINT__STRING_:
		{
			String arrival; 
			setArrivalPoint(inv->getAsciiParameter(arrival));
		}
		break;
	case RPC_GETDEPARTUREPLANET__:
		{
			resp->insertAscii(getDeparturePlanet());
		}
		break;
	case RPC_GETDEPARTUREPOINT__:
		{
			resp->insertAscii(getDeparturePoint());
		}
		break;
	case RPC_GETARRIVALPLANET__:
		{
			resp->insertAscii(getArrivalPlanet());
		}
		break;
	case RPC_GETARRIVALPOINT__:
		{
			resp->insertAscii(getArrivalPoint());
		}
		break;
	case RPC_ISTICKETOBJECT__:
		{
			resp->insertBoolean(isTicketObject());
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void TicketObjectAdapter::initializeTransientMembers() {
	(static_cast<TicketObject*>(stub))->initializeTransientMembers();
}

int TicketObjectAdapter::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	return (static_cast<TicketObject*>(stub))->handleObjectMenuSelect(player, selectedID);
}

void TicketObjectAdapter::setDeparturePlanet(const String& departureplanet) {
	(static_cast<TicketObject*>(stub))->setDeparturePlanet(departureplanet);
}

void TicketObjectAdapter::setDeparturePoint(const String& departurepoint) {
	(static_cast<TicketObject*>(stub))->setDeparturePoint(departurepoint);
}

void TicketObjectAdapter::setArrivalPlanet(const String& arrival) {
	(static_cast<TicketObject*>(stub))->setArrivalPlanet(arrival);
}

void TicketObjectAdapter::setArrivalPoint(const String& arrival) {
	(static_cast<TicketObject*>(stub))->setArrivalPoint(arrival);
}

String TicketObjectAdapter::getDeparturePlanet() {
	return (static_cast<TicketObject*>(stub))->getDeparturePlanet();
}

String TicketObjectAdapter::getDeparturePoint() {
	return (static_cast<TicketObject*>(stub))->getDeparturePoint();
}

String TicketObjectAdapter::getArrivalPlanet() {
	return (static_cast<TicketObject*>(stub))->getArrivalPlanet();
}

String TicketObjectAdapter::getArrivalPoint() {
	return (static_cast<TicketObject*>(stub))->getArrivalPoint();
}

bool TicketObjectAdapter::isTicketObject() {
	return (static_cast<TicketObject*>(stub))->isTicketObject();
}

/*
 *	TicketObjectHelper
 */

TicketObjectHelper* TicketObjectHelper::staticInitializer = TicketObjectHelper::instance();

TicketObjectHelper::TicketObjectHelper() {
	className = "TicketObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void TicketObjectHelper::finalizeHelper() {
	TicketObjectHelper::finalize();
}

DistributedObject* TicketObjectHelper::instantiateObject() {
	return new TicketObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* TicketObjectHelper::instantiateServant() {
	return new TicketObjectImplementation();
}

DistributedObjectAdapter* TicketObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new TicketObjectAdapter(static_cast<TicketObject*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

