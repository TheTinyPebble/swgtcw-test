/*
 *	server/zone/objects/tangible/TangibleObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "TangibleObject.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/manufactureschematic/ManufactureSchematic.h"

#include "server/zone/objects/factorycrate/FactoryCrate.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

/*
 *	TangibleObjectStub
 */

TangibleObject::TangibleObject() : SceneObject(DummyConstructorParameter::instance()) {
	TangibleObjectImplementation* _implementation = new TangibleObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

TangibleObject::TangibleObject(DummyConstructorParameter* param) : SceneObject(param) {
}

TangibleObject::~TangibleObject() {
}


void TangibleObject::initializeMembers() {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeMembers();
}

void TangibleObject::loadTemplateData(SharedObjectTemplate* templateData) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->loadTemplateData(templateData);
}

void TangibleObject::initializeTransientMembers() {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void TangibleObject::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->fillObjectMenuResponse(menuResponse, player);
}

int TangibleObject::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->handleObjectMenuSelect(player, selectedID);
}

void TangibleObject::setCustomObjectName(const UnicodeString& name, bool notifyClient) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addUnicodeParameter(name);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setCustomObjectName(name, notifyClient);
}

void TangibleObject::sendBaselinesTo(SceneObject* player) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendBaselinesTo(player);
}

void TangibleObject::synchronizedUIListen(SceneObject* player, int value) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addObjectParameter(player);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->synchronizedUIListen(player, value);
}

void TangibleObject::synchronizedUIStopListen(SceneObject* player, int value) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addObjectParameter(player);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->synchronizedUIStopListen(player, value);
}

void TangibleObject::setDefender(SceneObject* defender) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addObjectParameter(defender);

		method.executeWithVoidReturn();
	} else
		_implementation->setDefender(defender);
}

void TangibleObject::addDefender(SceneObject* defender) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addObjectParameter(defender);

		method.executeWithVoidReturn();
	} else
		_implementation->addDefender(defender);
}

void TangibleObject::removeDefender(SceneObject* defender) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addObjectParameter(defender);

		method.executeWithVoidReturn();
	} else
		_implementation->removeDefender(defender);
}

void TangibleObject::removeDefenders() {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		method.executeWithVoidReturn();
	} else
		_implementation->removeDefenders();
}

void TangibleObject::setCombatState() {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);

		method.executeWithVoidReturn();
	} else
		_implementation->setCombatState();
}

void TangibleObject::setUseCount(unsigned int newUseCount, bool notifyClient) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addUnsignedIntParameter(newUseCount);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setUseCount(newUseCount, notifyClient);
}

void TangibleObject::decreaseUseCount(PlayerCreature* player) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->decreaseUseCount(player);
}

void TangibleObject::fillAttributeList(AttributeListMessage* msg, PlayerCreature* object) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->fillAttributeList(msg, object);
}

void TangibleObject::clearCombatState(bool clearDefenders) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addBooleanParameter(clearDefenders);

		method.executeWithVoidReturn();
	} else
		_implementation->clearCombatState(clearDefenders);
}

bool TangibleObject::hasDefender(SceneObject* defender) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addObjectParameter(defender);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasDefender(defender);
}

bool TangibleObject::isAttackableBy(CreatureObject* object) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);
		method.addObjectParameter(object);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isAttackableBy(object);
}

bool TangibleObject::isAggressiveTo(PlayerCreature* object) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);
		method.addObjectParameter(object);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isAggressiveTo(object);
}

void TangibleObject::sendPvpStatusTo(PlayerCreature* player) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendPvpStatusTo(player);
}

int TangibleObject::inflictDamage(TangibleObject* attacker, int damageType, int damage, bool destroy, bool notifyClient) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);
		method.addObjectParameter(attacker);
		method.addSignedIntParameter(damageType);
		method.addSignedIntParameter(damage);
		method.addBooleanParameter(destroy);
		method.addBooleanParameter(notifyClient);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->inflictDamage(attacker, damageType, damage, destroy, notifyClient);
}

int TangibleObject::healDamage(TangibleObject* healer, int damageType, int damageToHeal, bool notifyClient) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);
		method.addObjectParameter(healer);
		method.addSignedIntParameter(damageType);
		method.addSignedIntParameter(damageToHeal);
		method.addBooleanParameter(notifyClient);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->healDamage(healer, damageType, damageToHeal, notifyClient);
}

void TangibleObject::setConditionDamage(int condDamage, bool notifyClient) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);
		method.addSignedIntParameter(condDamage);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setConditionDamage(condDamage, notifyClient);
}

void TangibleObject::setCustomizationVariable(byte type, byte value, bool notifyClient) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);
		method.addByteParameter(type);
		method.addByteParameter(value);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setCustomizationVariable(type, value, notifyClient);
}

void TangibleObject::setCustomizationVariable(const String& type, byte value, bool notifyClient) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);
		method.addAsciiParameter(type);
		method.addByteParameter(value);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setCustomizationVariable(type, value, notifyClient);
}

void TangibleObject::setOptionsBitmask(unsigned int bitmask, bool notifyClient) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);
		method.addUnsignedIntParameter(bitmask);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setOptionsBitmask(bitmask, notifyClient);
}

void TangibleObject::updateCraftingValues(ManufactureSchematic* schematic) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->updateCraftingValues(schematic);
}

int TangibleObject::notifyObjectDestructionObservers(TangibleObject* attacker, int condition) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);
		method.addObjectParameter(attacker);
		method.addSignedIntParameter(condition);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyObjectDestructionObservers(attacker, condition);
}

byte TangibleObject::getUnknownByte() {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);

		return method.executeWithByteReturn();
	} else
		return _implementation->getUnknownByte();
}

bool TangibleObject::isTicketCollector() {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isTicketCollector();
}

bool TangibleObject::isTicketObject() {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isTicketObject();
}

CustomizationVariables* TangibleObject::getCustomizationVariables() {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getCustomizationVariables();
}

int TangibleObject::getUseCount() {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getUseCount();
}

int TangibleObject::getMaxCondition() {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 36);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getMaxCondition();
}

void TangibleObject::setMaxCondition(int maxCond) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 37);
		method.addSignedIntParameter(maxCond);

		method.executeWithVoidReturn();
	} else
		_implementation->setMaxCondition(maxCond);
}

int TangibleObject::getConditionDamage() {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 38);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getConditionDamage();
}

int TangibleObject::getVolume() {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 39);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getVolume();
}

float TangibleObject::getComplexity() {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 40);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getComplexity();
}

unsigned int TangibleObject::getOptionsBitmask() {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 41);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getOptionsBitmask();
}

int TangibleObject::getLevel() {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 42);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getLevel();
}

unsigned int TangibleObject::getPvpStatusBitmask() {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 43);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getPvpStatusBitmask();
}

bool TangibleObject::isTangibleObject() {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 44);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isTangibleObject();
}

void TangibleObject::getCustomizationString(String& variables) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 45);
		method.addAsciiParameter(variables);

		method.executeWithVoidReturn();
	} else
		_implementation->getCustomizationString(variables);
}

DeltaVector<ManagedReference<SceneObject* > >* TangibleObject::getDefenderList() {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getDefenderList();
}

SceneObject* TangibleObject::getMainDefender() {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 46);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return _implementation->getMainDefender();
}

bool TangibleObject::isDestroyed() {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 47);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isDestroyed();
}

unsigned int TangibleObject::getPlayerUseMask() {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 48);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getPlayerUseMask();
}

void TangibleObject::setFaction(unsigned int crc) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 49);
		method.addUnsignedIntParameter(crc);

		method.executeWithVoidReturn();
	} else
		_implementation->setFaction(crc);
}

int TangibleObject::getFaction() {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 50);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getFaction();
}

bool TangibleObject::isRebel() {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 51);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isRebel();
}

bool TangibleObject::isImperial() {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 52);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isImperial();
}

bool TangibleObject::isNeutral() {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 53);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isNeutral();
}

bool TangibleObject::isSliceable() {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 54);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isSliceable();
}

bool TangibleObject::isSliced() {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 55);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isSliced();
}

void TangibleObject::setSliceable(bool val) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 56);
		method.addBooleanParameter(val);

		method.executeWithVoidReturn();
	} else
		_implementation->setSliceable(val);
}

void TangibleObject::setSliced(bool slice) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 57);
		method.addBooleanParameter(slice);

		method.executeWithVoidReturn();
	} else
		_implementation->setSliced(slice);
}

bool TangibleObject::isPharmaceuticalObject() {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 58);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isPharmaceuticalObject();
}

void TangibleObject::setCustomizationString(const String& vars) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 59);
		method.addAsciiParameter(vars);

		method.executeWithVoidReturn();
	} else
		_implementation->setCustomizationString(vars);
}

void TangibleObject::setPvpStatusBitmask(int bitmask) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 60);
		method.addSignedIntParameter(bitmask);

		method.executeWithVoidReturn();
	} else
		_implementation->setPvpStatusBitmask(bitmask);
}

void TangibleObject::setCraftersName(String& name) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 61);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		_implementation->setCraftersName(name);
}

String TangibleObject::getCraftersName() {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 62);

		method.executeWithAsciiReturn(_return_getCraftersName);
		return _return_getCraftersName;
	} else
		return _implementation->getCraftersName();
}

void TangibleObject::setCraftersSerial(String& serial) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 63);
		method.addAsciiParameter(serial);

		method.executeWithVoidReturn();
	} else
		_implementation->setCraftersSerial(serial);
}

void TangibleObject::setLevel(int lev) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 64);
		method.addSignedIntParameter(lev);

		method.executeWithVoidReturn();
	} else
		_implementation->setLevel(lev);
}

String TangibleObject::getCraftersSerial() {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 65);

		method.executeWithAsciiReturn(_return_getCraftersSerial);
		return _return_getCraftersSerial;
	} else
		return _implementation->getCraftersSerial();
}

bool TangibleObject::isFromFactoryCrate() {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 66);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isFromFactoryCrate();
}

void TangibleObject::setInitialCraftingValues(ManufactureSchematic* manufactureSchematic, int assemblySuccess) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 67);
		method.addObjectParameter(manufactureSchematic);
		method.addSignedIntParameter(assemblySuccess);

		method.executeWithVoidReturn();
	} else
		_implementation->setInitialCraftingValues(manufactureSchematic, assemblySuccess);
}

bool TangibleObject::applyComponentStats(ManufactureSchematic* manufactureSchematic) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 68);
		method.addObjectParameter(manufactureSchematic);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->applyComponentStats(manufactureSchematic);
}

FactoryCrate* TangibleObject::createFactoryCrate(bool insertSelf) {
	TangibleObjectImplementation* _implementation = (TangibleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 69);
		method.addBooleanParameter(insertSelf);

		return (FactoryCrate*) method.executeWithObjectReturn();
	} else
		return _implementation->createFactoryCrate(insertSelf);
}

DistributedObjectServant* TangibleObject::_getImplementation() {

	_updated = true;
	return _impl;
}

void TangibleObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	TangibleObjectImplementation
 */

TangibleObjectImplementation::TangibleObjectImplementation(DummyConstructorParameter* param) : SceneObjectImplementation(param) {
	_initializeImplementation();
}


TangibleObjectImplementation::~TangibleObjectImplementation() {
}


void TangibleObjectImplementation::finalize() {
}

void TangibleObjectImplementation::_initializeImplementation() {
	_setClassHelper(TangibleObjectHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void TangibleObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (TangibleObject*) stub;
	SceneObjectImplementation::_setStub(stub);
}

DistributedObjectStub* TangibleObjectImplementation::_getStub() {
	return _this;
}

TangibleObjectImplementation::operator const TangibleObject*() {
	return _this;
}

void TangibleObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void TangibleObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void TangibleObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void TangibleObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void TangibleObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void TangibleObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void TangibleObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void TangibleObjectImplementation::_serializationHelperMethod() {
	SceneObjectImplementation::_serializationHelperMethod();

	_setClassName("TangibleObject");

}

void TangibleObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(TangibleObjectImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool TangibleObjectImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (SceneObjectImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "targetable") {
		TypeInfo<bool >::parseFromBinaryStream(&targetable, stream);
		return true;
	}

	if (_name == "complexity") {
		TypeInfo<float >::parseFromBinaryStream(&complexity, stream);
		return true;
	}

	if (_name == "volume") {
		TypeInfo<int >::parseFromBinaryStream(&volume, stream);
		return true;
	}

	if (_name == "faction") {
		TypeInfo<int >::parseFromBinaryStream(&faction, stream);
		return true;
	}

	if (_name == "customizationVariables") {
		TypeInfo<CustomizationVariables >::parseFromBinaryStream(&customizationVariables, stream);
		return true;
	}

	if (_name == "conditionDamage") {
		TypeInfo<int >::parseFromBinaryStream(&conditionDamage, stream);
		return true;
	}

	if (_name == "maxCondition") {
		TypeInfo<int >::parseFromBinaryStream(&maxCondition, stream);
		return true;
	}

	if (_name == "useCount") {
		TypeInfo<int >::parseFromBinaryStream(&useCount, stream);
		return true;
	}

	if (_name == "level") {
		TypeInfo<short >::parseFromBinaryStream(&level, stream);
		return true;
	}

	if (_name == "optionsBitmask") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&optionsBitmask, stream);
		return true;
	}

	if (_name == "pvpStatusBitmask") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&pvpStatusBitmask, stream);
		return true;
	}

	if (_name == "unknownByte") {
		TypeInfo<byte >::parseFromBinaryStream(&unknownByte, stream);
		return true;
	}

	if (_name == "craftersName") {
		TypeInfo<String >::parseFromBinaryStream(&craftersName, stream);
		return true;
	}

	if (_name == "craftersSerial") {
		TypeInfo<String >::parseFromBinaryStream(&craftersSerial, stream);
		return true;
	}

	if (_name == "defenderList") {
		TypeInfo<DeltaVector<ManagedReference<SceneObject* > > >::parseFromBinaryStream(&defenderList, stream);
		return true;
	}

	if (_name == "playerUseMask") {
		TypeInfo<unsigned short >::parseFromBinaryStream(&playerUseMask, stream);
		return true;
	}

	if (_name == "sliceable") {
		TypeInfo<bool >::parseFromBinaryStream(&sliceable, stream);
		return true;
	}

	if (_name == "sliced") {
		TypeInfo<bool >::parseFromBinaryStream(&sliced, stream);
		return true;
	}


	return false;
}

void TangibleObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = TangibleObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int TangibleObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "targetable";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<bool >::toBinaryStream(&targetable, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "complexity";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<float >::toBinaryStream(&complexity, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "volume";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&volume, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "faction";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&faction, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "customizationVariables";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<CustomizationVariables >::toBinaryStream(&customizationVariables, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "conditionDamage";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&conditionDamage, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "maxCondition";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&maxCondition, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "useCount";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&useCount, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "level";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<short >::toBinaryStream(&level, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "optionsBitmask";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned int >::toBinaryStream(&optionsBitmask, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "pvpStatusBitmask";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned int >::toBinaryStream(&pvpStatusBitmask, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "unknownByte";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<byte >::toBinaryStream(&unknownByte, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "craftersName";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<String >::toBinaryStream(&craftersName, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "craftersSerial";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<String >::toBinaryStream(&craftersSerial, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "defenderList";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<DeltaVector<ManagedReference<SceneObject* > > >::toBinaryStream(&defenderList, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "playerUseMask";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned short >::toBinaryStream(&playerUseMask, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "sliceable";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<bool >::toBinaryStream(&sliceable, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "sliced";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<bool >::toBinaryStream(&sliced, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 18 + SceneObjectImplementation::writeObjectMembers(stream);
}

TangibleObjectImplementation::TangibleObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/TangibleObject.idl():  		Logger.setLoggingName("TangibleObject");
	Logger::setLoggingName("TangibleObject");
	// server/zone/objects/tangible/TangibleObject.idl():  		initializeMembers();
	initializeMembers();
}

void TangibleObjectImplementation::initializeMembers() {
	// server/zone/objects/tangible/TangibleObject.idl():  		faction = 0;
	faction = 0;
	// server/zone/objects/tangible/TangibleObject.idl():  		level = 1;
	level = 1;
	// server/zone/objects/tangible/TangibleObject.idl():  		useCount = 1;
	useCount = 1;
	// server/zone/objects/tangible/TangibleObject.idl():  		complexity = 100.f;
	complexity = 100.f;
	// server/zone/objects/tangible/TangibleObject.idl():  		volume = 1;
	volume = 1;
	// server/zone/objects/tangible/TangibleObject.idl():  		unknownByte = 1;
	unknownByte = 1;
	// server/zone/objects/tangible/TangibleObject.idl():  		useCount = 1;
	useCount = 1;
	// server/zone/objects/tangible/TangibleObject.idl():  		conditionDamage = 0;
	conditionDamage = 0;
	// server/zone/objects/tangible/TangibleObject.idl():  		sliceable = false;
	sliceable = false;
	// server/zone/objects/tangible/TangibleObject.idl():  		sliced = false;
	sliced = false;
}

void TangibleObjectImplementation::setCombatState() {
}

void TangibleObjectImplementation::clearCombatState(bool clearDefenders) {
	// server/zone/objects/tangible/TangibleObject.idl():  	}
	if (clearDefenders)	// server/zone/objects/tangible/TangibleObject.idl():  			removeDefenders();
	removeDefenders();
}

bool TangibleObjectImplementation::hasDefender(SceneObject* defender) {
	// server/zone/objects/tangible/TangibleObject.idl():  		}
	for (	// server/zone/objects/tangible/TangibleObject.idl():  		for (int i = 0;
	int i = 0;
	i < (&defenderList)->size();
 ++i) {
	// server/zone/objects/tangible/TangibleObject.idl():  		}
	if ((&defenderList)->get(i) == defender)	// server/zone/objects/tangible/TangibleObject.idl():  				return true;
	return true;
}
	// server/zone/objects/tangible/TangibleObject.idl():  		return false;
	return false;
}

bool TangibleObjectImplementation::isAttackableBy(CreatureObject* object) {
	// server/zone/objects/tangible/TangibleObject.idl():  		return false;
	return false;
}

bool TangibleObjectImplementation::isAggressiveTo(PlayerCreature* object) {
	// server/zone/objects/tangible/TangibleObject.idl():  		return false;
	return false;
}

void TangibleObjectImplementation::updateCraftingValues(ManufactureSchematic* schematic) {
	// server/zone/objects/tangible/TangibleObject.idl():  		error("Unhandled updateCraftingValues for this object type");
	error("Unhandled updateCraftingValues for this object type");
}

byte TangibleObjectImplementation::getUnknownByte() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return unknownByte;
	return unknownByte;
}

bool TangibleObjectImplementation::isTicketCollector() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return false;
	return false;
}

bool TangibleObjectImplementation::isTicketObject() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return false;
	return false;
}

CustomizationVariables* TangibleObjectImplementation::getCustomizationVariables() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return customizationVariables;
	return (&customizationVariables);
}

int TangibleObjectImplementation::getUseCount() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return useCount;
	return useCount;
}

int TangibleObjectImplementation::getMaxCondition() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return maxCondition;
	return maxCondition;
}

void TangibleObjectImplementation::setMaxCondition(int maxCond) {
	// server/zone/objects/tangible/TangibleObject.idl():  		maxCondition = maxCond;
	maxCondition = maxCond;
}

int TangibleObjectImplementation::getConditionDamage() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return conditionDamage;
	return conditionDamage;
}

int TangibleObjectImplementation::getVolume() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return volume;
	return volume;
}

float TangibleObjectImplementation::getComplexity() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return complexity;
	return complexity;
}

unsigned int TangibleObjectImplementation::getOptionsBitmask() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return optionsBitmask;
	return optionsBitmask;
}

int TangibleObjectImplementation::getLevel() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return level;
	return level;
}

unsigned int TangibleObjectImplementation::getPvpStatusBitmask() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return pvpStatusBitmask;
	return pvpStatusBitmask;
}

bool TangibleObjectImplementation::isTangibleObject() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return true;
	return true;
}

void TangibleObjectImplementation::getCustomizationString(String& variables) {
	// server/zone/objects/tangible/TangibleObject.idl():  		customizationVariables.getData(variables);
	(&customizationVariables)->getData(variables);
}

DeltaVector<ManagedReference<SceneObject* > >* TangibleObjectImplementation::getDefenderList() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return defenderList;
	return (&defenderList);
}

SceneObject* TangibleObjectImplementation::getMainDefender() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return defenderList.get(0);
	return (&defenderList)->get(0);
}

bool TangibleObjectImplementation::isDestroyed() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return conditionDamage > maxCondition;
	return conditionDamage > maxCondition;
}

unsigned int TangibleObjectImplementation::getPlayerUseMask() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return playerUseMask;
	return playerUseMask;
}

void TangibleObjectImplementation::setFaction(unsigned int crc) {
	// server/zone/objects/tangible/TangibleObject.idl():  		faction = crc;
	faction = crc;
}

int TangibleObjectImplementation::getFaction() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return faction;
	return faction;
}

bool TangibleObjectImplementation::isRebel() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return faction == 0x16148850;
	return faction == 0x16148850;
}

bool TangibleObjectImplementation::isImperial() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return faction == 0xDB4ACC54;
	return faction == 0xDB4ACC54;
}

bool TangibleObjectImplementation::isNeutral() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return faction == 0;
	return faction == 0;
}

bool TangibleObjectImplementation::isSliceable() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return 
	if (sliced)	// server/zone/objects/tangible/TangibleObject.idl():  			return false;
	return false;

	else 	// server/zone/objects/tangible/TangibleObject.idl():  		return 
	if (isContainerObject())	// server/zone/objects/tangible/TangibleObject.idl():  			return sliceable;
	return sliceable;

	else 	// server/zone/objects/tangible/TangibleObject.idl():  		return 
	if (isMissionTerminal())	// server/zone/objects/tangible/TangibleObject.idl():  			return sliceable;
	return sliceable;

	else 	// server/zone/objects/tangible/TangibleObject.idl():  		return 
	if (isWeaponObject())	// server/zone/objects/tangible/TangibleObject.idl():  			return sliceable;
	return sliceable;

	else 	// server/zone/objects/tangible/TangibleObject.idl():  		return 
	if (isArmorObject())	// server/zone/objects/tangible/TangibleObject.idl():  			return sliceable;
	return sliceable;

	else 	// server/zone/objects/tangible/TangibleObject.idl():  		return 
	if (SceneObjectImplementation::gameObjectType == SceneObjectImplementation::PLAYERLOOTCRATE)	// server/zone/objects/tangible/TangibleObject.idl():  			return sliceable;
	return sliceable;
	// server/zone/objects/tangible/TangibleObject.idl():  		return false;
	return false;
}

bool TangibleObjectImplementation::isSliced() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return sliced;
	return sliced;
}

void TangibleObjectImplementation::setSliceable(bool val) {
	// server/zone/objects/tangible/TangibleObject.idl():  		sliceable = val;
	sliceable = val;
}

void TangibleObjectImplementation::setSliced(bool slice) {
	// server/zone/objects/tangible/TangibleObject.idl():  		sliced = slice;
	sliced = slice;
}

bool TangibleObjectImplementation::isPharmaceuticalObject() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return false;
	return false;
}

void TangibleObjectImplementation::setCustomizationString(const String& vars) {
	// server/zone/objects/tangible/TangibleObject.idl():  		customizationVariables.parseFromClientString(vars);
	(&customizationVariables)->parseFromClientString(vars);
}

void TangibleObjectImplementation::setPvpStatusBitmask(int bitmask) {
	// server/zone/objects/tangible/TangibleObject.idl():  		pvpStatusBitmask = bitmask;
	pvpStatusBitmask = bitmask;
}

void TangibleObjectImplementation::setCraftersName(String& name) {
	// server/zone/objects/tangible/TangibleObject.idl():  		craftersName = name;
	craftersName = name;
}

String TangibleObjectImplementation::getCraftersName() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return craftersName;
	return craftersName;
}

void TangibleObjectImplementation::setCraftersSerial(String& serial) {
	// server/zone/objects/tangible/TangibleObject.idl():  		craftersSerial = serial;
	craftersSerial = serial;
}

void TangibleObjectImplementation::setLevel(int lev) {
	// server/zone/objects/tangible/TangibleObject.idl():  		level = lev;
	level = lev;
}

String TangibleObjectImplementation::getCraftersSerial() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return craftersSerial;
	return craftersSerial;
}

bool TangibleObjectImplementation::isFromFactoryCrate() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return optionsBitmask & 0x2100;
	return optionsBitmask & 0x2100;
}

/*
 *	TangibleObjectAdapter
 */

TangibleObjectAdapter::TangibleObjectAdapter(TangibleObjectImplementation* obj) : SceneObjectAdapter(obj) {
}

enum {RPC_INITIALIZEMEMBERS__ = 6,RPC_INITIALIZETRANSIENTMEMBERS__,RPC_HANDLEOBJECTMENUSELECT__PLAYERCREATURE_BYTE_,RPC_SETCUSTOMOBJECTNAME__UNICODESTRING_BOOL_,RPC_SENDBASELINESTO__SCENEOBJECT_,RPC_SYNCHRONIZEDUILISTEN__SCENEOBJECT_INT_,RPC_SYNCHRONIZEDUISTOPLISTEN__SCENEOBJECT_INT_,RPC_SETDEFENDER__SCENEOBJECT_,RPC_ADDDEFENDER__SCENEOBJECT_,RPC_REMOVEDEFENDER__SCENEOBJECT_,RPC_REMOVEDEFENDERS__,RPC_SETCOMBATSTATE__,RPC_SETUSECOUNT__INT_BOOL_,RPC_DECREASEUSECOUNT__PLAYERCREATURE_,RPC_CLEARCOMBATSTATE__BOOL_,RPC_HASDEFENDER__SCENEOBJECT_,RPC_ISATTACKABLEBY__CREATUREOBJECT_,RPC_ISAGGRESSIVETO__PLAYERCREATURE_,RPC_SENDPVPSTATUSTO__PLAYERCREATURE_,RPC_INFLICTDAMAGE__TANGIBLEOBJECT_INT_INT_BOOL_BOOL_,RPC_HEALDAMAGE__TANGIBLEOBJECT_INT_INT_BOOL_,RPC_SETCONDITIONDAMAGE__INT_BOOL_,RPC_SETCUSTOMIZATIONVARIABLE__BYTE_BYTE_BOOL_,RPC_SETCUSTOMIZATIONVARIABLE__STRING_BYTE_BOOL_,RPC_SETOPTIONSBITMASK__INT_BOOL_,RPC_NOTIFYOBJECTDESTRUCTIONOBSERVERS__TANGIBLEOBJECT_INT_,RPC_GETUNKNOWNBYTE__,RPC_ISTICKETCOLLECTOR__,RPC_ISTICKETOBJECT__,RPC_GETUSECOUNT__,RPC_GETMAXCONDITION__,RPC_SETMAXCONDITION__INT_,RPC_GETCONDITIONDAMAGE__,RPC_GETVOLUME__,RPC_GETCOMPLEXITY__,RPC_GETOPTIONSBITMASK__,RPC_GETLEVEL__,RPC_GETPVPSTATUSBITMASK__,RPC_ISTANGIBLEOBJECT__,RPC_GETCUSTOMIZATIONSTRING__STRING_,RPC_GETMAINDEFENDER__,RPC_ISDESTROYED__,RPC_GETPLAYERUSEMASK__,RPC_SETFACTION__INT_,RPC_GETFACTION__,RPC_ISREBEL__,RPC_ISIMPERIAL__,RPC_ISNEUTRAL__,RPC_ISSLICEABLE__,RPC_ISSLICED__,RPC_SETSLICEABLE__BOOL_,RPC_SETSLICED__BOOL_,RPC_ISPHARMACEUTICALOBJECT__,RPC_SETCUSTOMIZATIONSTRING__STRING_,RPC_SETPVPSTATUSBITMASK__INT_,RPC_SETCRAFTERSNAME__STRING_,RPC_GETCRAFTERSNAME__,RPC_SETCRAFTERSSERIAL__STRING_,RPC_SETLEVEL__INT_,RPC_GETCRAFTERSSERIAL__,RPC_ISFROMFACTORYCRATE__,RPC_SETINITIALCRAFTINGVALUES__MANUFACTURESCHEMATIC_INT_,RPC_APPLYCOMPONENTSTATS__MANUFACTURESCHEMATIC_,RPC_CREATEFACTORYCRATE__BOOL_};

Packet* TangibleObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_INITIALIZEMEMBERS__:
		initializeMembers();
		break;
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		initializeTransientMembers();
		break;
	case RPC_HANDLEOBJECTMENUSELECT__PLAYERCREATURE_BYTE_:
		resp->insertSignedInt(handleObjectMenuSelect((PlayerCreature*) inv->getObjectParameter(), inv->getByteParameter()));
		break;
	case RPC_SETCUSTOMOBJECTNAME__UNICODESTRING_BOOL_:
		setCustomObjectName(inv->getUnicodeParameter(_param0_setCustomObjectName__UnicodeString_bool_), inv->getBooleanParameter());
		break;
	case RPC_SENDBASELINESTO__SCENEOBJECT_:
		sendBaselinesTo((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_SYNCHRONIZEDUILISTEN__SCENEOBJECT_INT_:
		synchronizedUIListen((SceneObject*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case RPC_SYNCHRONIZEDUISTOPLISTEN__SCENEOBJECT_INT_:
		synchronizedUIStopListen((SceneObject*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case RPC_SETDEFENDER__SCENEOBJECT_:
		setDefender((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_ADDDEFENDER__SCENEOBJECT_:
		addDefender((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_REMOVEDEFENDER__SCENEOBJECT_:
		removeDefender((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_REMOVEDEFENDERS__:
		removeDefenders();
		break;
	case RPC_SETCOMBATSTATE__:
		setCombatState();
		break;
	case RPC_SETUSECOUNT__INT_BOOL_:
		setUseCount(inv->getUnsignedIntParameter(), inv->getBooleanParameter());
		break;
	case RPC_DECREASEUSECOUNT__PLAYERCREATURE_:
		decreaseUseCount((PlayerCreature*) inv->getObjectParameter());
		break;
	case RPC_CLEARCOMBATSTATE__BOOL_:
		clearCombatState(inv->getBooleanParameter());
		break;
	case RPC_HASDEFENDER__SCENEOBJECT_:
		resp->insertBoolean(hasDefender((SceneObject*) inv->getObjectParameter()));
		break;
	case RPC_ISATTACKABLEBY__CREATUREOBJECT_:
		resp->insertBoolean(isAttackableBy((CreatureObject*) inv->getObjectParameter()));
		break;
	case RPC_ISAGGRESSIVETO__PLAYERCREATURE_:
		resp->insertBoolean(isAggressiveTo((PlayerCreature*) inv->getObjectParameter()));
		break;
	case RPC_SENDPVPSTATUSTO__PLAYERCREATURE_:
		sendPvpStatusTo((PlayerCreature*) inv->getObjectParameter());
		break;
	case RPC_INFLICTDAMAGE__TANGIBLEOBJECT_INT_INT_BOOL_BOOL_:
		resp->insertSignedInt(inflictDamage((TangibleObject*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter(), inv->getBooleanParameter()));
		break;
	case RPC_HEALDAMAGE__TANGIBLEOBJECT_INT_INT_BOOL_:
		resp->insertSignedInt(healDamage((TangibleObject*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case RPC_SETCONDITIONDAMAGE__INT_BOOL_:
		setConditionDamage(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case RPC_SETCUSTOMIZATIONVARIABLE__BYTE_BYTE_BOOL_:
		setCustomizationVariable(inv->getByteParameter(), inv->getByteParameter(), inv->getBooleanParameter());
		break;
	case RPC_SETCUSTOMIZATIONVARIABLE__STRING_BYTE_BOOL_:
		setCustomizationVariable(inv->getAsciiParameter(_param0_setCustomizationVariable__String_byte_bool_), inv->getByteParameter(), inv->getBooleanParameter());
		break;
	case RPC_SETOPTIONSBITMASK__INT_BOOL_:
		setOptionsBitmask(inv->getUnsignedIntParameter(), inv->getBooleanParameter());
		break;
	case RPC_NOTIFYOBJECTDESTRUCTIONOBSERVERS__TANGIBLEOBJECT_INT_:
		resp->insertSignedInt(notifyObjectDestructionObservers((TangibleObject*) inv->getObjectParameter(), inv->getSignedIntParameter()));
		break;
	case RPC_GETUNKNOWNBYTE__:
		resp->insertByte(getUnknownByte());
		break;
	case RPC_ISTICKETCOLLECTOR__:
		resp->insertBoolean(isTicketCollector());
		break;
	case RPC_ISTICKETOBJECT__:
		resp->insertBoolean(isTicketObject());
		break;
	case RPC_GETUSECOUNT__:
		resp->insertSignedInt(getUseCount());
		break;
	case RPC_GETMAXCONDITION__:
		resp->insertSignedInt(getMaxCondition());
		break;
	case RPC_SETMAXCONDITION__INT_:
		setMaxCondition(inv->getSignedIntParameter());
		break;
	case RPC_GETCONDITIONDAMAGE__:
		resp->insertSignedInt(getConditionDamage());
		break;
	case RPC_GETVOLUME__:
		resp->insertSignedInt(getVolume());
		break;
	case RPC_GETCOMPLEXITY__:
		resp->insertFloat(getComplexity());
		break;
	case RPC_GETOPTIONSBITMASK__:
		resp->insertInt(getOptionsBitmask());
		break;
	case RPC_GETLEVEL__:
		resp->insertSignedInt(getLevel());
		break;
	case RPC_GETPVPSTATUSBITMASK__:
		resp->insertInt(getPvpStatusBitmask());
		break;
	case RPC_ISTANGIBLEOBJECT__:
		resp->insertBoolean(isTangibleObject());
		break;
	case RPC_GETCUSTOMIZATIONSTRING__STRING_:
		getCustomizationString(inv->getAsciiParameter(_param0_getCustomizationString__String_));
		break;
	case RPC_GETMAINDEFENDER__:
		resp->insertLong(getMainDefender()->_getObjectID());
		break;
	case RPC_ISDESTROYED__:
		resp->insertBoolean(isDestroyed());
		break;
	case RPC_GETPLAYERUSEMASK__:
		resp->insertInt(getPlayerUseMask());
		break;
	case RPC_SETFACTION__INT_:
		setFaction(inv->getUnsignedIntParameter());
		break;
	case RPC_GETFACTION__:
		resp->insertSignedInt(getFaction());
		break;
	case RPC_ISREBEL__:
		resp->insertBoolean(isRebel());
		break;
	case RPC_ISIMPERIAL__:
		resp->insertBoolean(isImperial());
		break;
	case RPC_ISNEUTRAL__:
		resp->insertBoolean(isNeutral());
		break;
	case RPC_ISSLICEABLE__:
		resp->insertBoolean(isSliceable());
		break;
	case RPC_ISSLICED__:
		resp->insertBoolean(isSliced());
		break;
	case RPC_SETSLICEABLE__BOOL_:
		setSliceable(inv->getBooleanParameter());
		break;
	case RPC_SETSLICED__BOOL_:
		setSliced(inv->getBooleanParameter());
		break;
	case RPC_ISPHARMACEUTICALOBJECT__:
		resp->insertBoolean(isPharmaceuticalObject());
		break;
	case RPC_SETCUSTOMIZATIONSTRING__STRING_:
		setCustomizationString(inv->getAsciiParameter(_param0_setCustomizationString__String_));
		break;
	case RPC_SETPVPSTATUSBITMASK__INT_:
		setPvpStatusBitmask(inv->getSignedIntParameter());
		break;
	case RPC_SETCRAFTERSNAME__STRING_:
		setCraftersName(inv->getAsciiParameter(_param0_setCraftersName__String_));
		break;
	case RPC_GETCRAFTERSNAME__:
		resp->insertAscii(getCraftersName());
		break;
	case RPC_SETCRAFTERSSERIAL__STRING_:
		setCraftersSerial(inv->getAsciiParameter(_param0_setCraftersSerial__String_));
		break;
	case RPC_SETLEVEL__INT_:
		setLevel(inv->getSignedIntParameter());
		break;
	case RPC_GETCRAFTERSSERIAL__:
		resp->insertAscii(getCraftersSerial());
		break;
	case RPC_ISFROMFACTORYCRATE__:
		resp->insertBoolean(isFromFactoryCrate());
		break;
	case RPC_SETINITIALCRAFTINGVALUES__MANUFACTURESCHEMATIC_INT_:
		setInitialCraftingValues((ManufactureSchematic*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case RPC_APPLYCOMPONENTSTATS__MANUFACTURESCHEMATIC_:
		resp->insertBoolean(applyComponentStats((ManufactureSchematic*) inv->getObjectParameter()));
		break;
	case RPC_CREATEFACTORYCRATE__BOOL_:
		resp->insertLong(createFactoryCrate(inv->getBooleanParameter())->_getObjectID());
		break;
	default:
		return NULL;
	}

	return resp;
}

void TangibleObjectAdapter::initializeMembers() {
	((TangibleObjectImplementation*) impl)->initializeMembers();
}

void TangibleObjectAdapter::initializeTransientMembers() {
	((TangibleObjectImplementation*) impl)->initializeTransientMembers();
}

int TangibleObjectAdapter::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	return ((TangibleObjectImplementation*) impl)->handleObjectMenuSelect(player, selectedID);
}

void TangibleObjectAdapter::setCustomObjectName(const UnicodeString& name, bool notifyClient) {
	((TangibleObjectImplementation*) impl)->setCustomObjectName(name, notifyClient);
}

void TangibleObjectAdapter::sendBaselinesTo(SceneObject* player) {
	((TangibleObjectImplementation*) impl)->sendBaselinesTo(player);
}

void TangibleObjectAdapter::synchronizedUIListen(SceneObject* player, int value) {
	((TangibleObjectImplementation*) impl)->synchronizedUIListen(player, value);
}

void TangibleObjectAdapter::synchronizedUIStopListen(SceneObject* player, int value) {
	((TangibleObjectImplementation*) impl)->synchronizedUIStopListen(player, value);
}

void TangibleObjectAdapter::setDefender(SceneObject* defender) {
	((TangibleObjectImplementation*) impl)->setDefender(defender);
}

void TangibleObjectAdapter::addDefender(SceneObject* defender) {
	((TangibleObjectImplementation*) impl)->addDefender(defender);
}

void TangibleObjectAdapter::removeDefender(SceneObject* defender) {
	((TangibleObjectImplementation*) impl)->removeDefender(defender);
}

void TangibleObjectAdapter::removeDefenders() {
	((TangibleObjectImplementation*) impl)->removeDefenders();
}

void TangibleObjectAdapter::setCombatState() {
	((TangibleObjectImplementation*) impl)->setCombatState();
}

void TangibleObjectAdapter::setUseCount(unsigned int newUseCount, bool notifyClient) {
	((TangibleObjectImplementation*) impl)->setUseCount(newUseCount, notifyClient);
}

void TangibleObjectAdapter::decreaseUseCount(PlayerCreature* player) {
	((TangibleObjectImplementation*) impl)->decreaseUseCount(player);
}

void TangibleObjectAdapter::clearCombatState(bool clearDefenders) {
	((TangibleObjectImplementation*) impl)->clearCombatState(clearDefenders);
}

bool TangibleObjectAdapter::hasDefender(SceneObject* defender) {
	return ((TangibleObjectImplementation*) impl)->hasDefender(defender);
}

bool TangibleObjectAdapter::isAttackableBy(CreatureObject* object) {
	return ((TangibleObjectImplementation*) impl)->isAttackableBy(object);
}

bool TangibleObjectAdapter::isAggressiveTo(PlayerCreature* object) {
	return ((TangibleObjectImplementation*) impl)->isAggressiveTo(object);
}

void TangibleObjectAdapter::sendPvpStatusTo(PlayerCreature* player) {
	((TangibleObjectImplementation*) impl)->sendPvpStatusTo(player);
}

int TangibleObjectAdapter::inflictDamage(TangibleObject* attacker, int damageType, int damage, bool destroy, bool notifyClient) {
	return ((TangibleObjectImplementation*) impl)->inflictDamage(attacker, damageType, damage, destroy, notifyClient);
}

int TangibleObjectAdapter::healDamage(TangibleObject* healer, int damageType, int damageToHeal, bool notifyClient) {
	return ((TangibleObjectImplementation*) impl)->healDamage(healer, damageType, damageToHeal, notifyClient);
}

void TangibleObjectAdapter::setConditionDamage(int condDamage, bool notifyClient) {
	((TangibleObjectImplementation*) impl)->setConditionDamage(condDamage, notifyClient);
}

void TangibleObjectAdapter::setCustomizationVariable(byte type, byte value, bool notifyClient) {
	((TangibleObjectImplementation*) impl)->setCustomizationVariable(type, value, notifyClient);
}

void TangibleObjectAdapter::setCustomizationVariable(const String& type, byte value, bool notifyClient) {
	((TangibleObjectImplementation*) impl)->setCustomizationVariable(type, value, notifyClient);
}

void TangibleObjectAdapter::setOptionsBitmask(unsigned int bitmask, bool notifyClient) {
	((TangibleObjectImplementation*) impl)->setOptionsBitmask(bitmask, notifyClient);
}

int TangibleObjectAdapter::notifyObjectDestructionObservers(TangibleObject* attacker, int condition) {
	return ((TangibleObjectImplementation*) impl)->notifyObjectDestructionObservers(attacker, condition);
}

byte TangibleObjectAdapter::getUnknownByte() {
	return ((TangibleObjectImplementation*) impl)->getUnknownByte();
}

bool TangibleObjectAdapter::isTicketCollector() {
	return ((TangibleObjectImplementation*) impl)->isTicketCollector();
}

bool TangibleObjectAdapter::isTicketObject() {
	return ((TangibleObjectImplementation*) impl)->isTicketObject();
}

int TangibleObjectAdapter::getUseCount() {
	return ((TangibleObjectImplementation*) impl)->getUseCount();
}

int TangibleObjectAdapter::getMaxCondition() {
	return ((TangibleObjectImplementation*) impl)->getMaxCondition();
}

void TangibleObjectAdapter::setMaxCondition(int maxCond) {
	((TangibleObjectImplementation*) impl)->setMaxCondition(maxCond);
}

int TangibleObjectAdapter::getConditionDamage() {
	return ((TangibleObjectImplementation*) impl)->getConditionDamage();
}

int TangibleObjectAdapter::getVolume() {
	return ((TangibleObjectImplementation*) impl)->getVolume();
}

float TangibleObjectAdapter::getComplexity() {
	return ((TangibleObjectImplementation*) impl)->getComplexity();
}

unsigned int TangibleObjectAdapter::getOptionsBitmask() {
	return ((TangibleObjectImplementation*) impl)->getOptionsBitmask();
}

int TangibleObjectAdapter::getLevel() {
	return ((TangibleObjectImplementation*) impl)->getLevel();
}

unsigned int TangibleObjectAdapter::getPvpStatusBitmask() {
	return ((TangibleObjectImplementation*) impl)->getPvpStatusBitmask();
}

bool TangibleObjectAdapter::isTangibleObject() {
	return ((TangibleObjectImplementation*) impl)->isTangibleObject();
}

void TangibleObjectAdapter::getCustomizationString(String& variables) {
	((TangibleObjectImplementation*) impl)->getCustomizationString(variables);
}

SceneObject* TangibleObjectAdapter::getMainDefender() {
	return ((TangibleObjectImplementation*) impl)->getMainDefender();
}

bool TangibleObjectAdapter::isDestroyed() {
	return ((TangibleObjectImplementation*) impl)->isDestroyed();
}

unsigned int TangibleObjectAdapter::getPlayerUseMask() {
	return ((TangibleObjectImplementation*) impl)->getPlayerUseMask();
}

void TangibleObjectAdapter::setFaction(unsigned int crc) {
	((TangibleObjectImplementation*) impl)->setFaction(crc);
}

int TangibleObjectAdapter::getFaction() {
	return ((TangibleObjectImplementation*) impl)->getFaction();
}

bool TangibleObjectAdapter::isRebel() {
	return ((TangibleObjectImplementation*) impl)->isRebel();
}

bool TangibleObjectAdapter::isImperial() {
	return ((TangibleObjectImplementation*) impl)->isImperial();
}

bool TangibleObjectAdapter::isNeutral() {
	return ((TangibleObjectImplementation*) impl)->isNeutral();
}

bool TangibleObjectAdapter::isSliceable() {
	return ((TangibleObjectImplementation*) impl)->isSliceable();
}

bool TangibleObjectAdapter::isSliced() {
	return ((TangibleObjectImplementation*) impl)->isSliced();
}

void TangibleObjectAdapter::setSliceable(bool val) {
	((TangibleObjectImplementation*) impl)->setSliceable(val);
}

void TangibleObjectAdapter::setSliced(bool slice) {
	((TangibleObjectImplementation*) impl)->setSliced(slice);
}

bool TangibleObjectAdapter::isPharmaceuticalObject() {
	return ((TangibleObjectImplementation*) impl)->isPharmaceuticalObject();
}

void TangibleObjectAdapter::setCustomizationString(const String& vars) {
	((TangibleObjectImplementation*) impl)->setCustomizationString(vars);
}

void TangibleObjectAdapter::setPvpStatusBitmask(int bitmask) {
	((TangibleObjectImplementation*) impl)->setPvpStatusBitmask(bitmask);
}

void TangibleObjectAdapter::setCraftersName(String& name) {
	((TangibleObjectImplementation*) impl)->setCraftersName(name);
}

String TangibleObjectAdapter::getCraftersName() {
	return ((TangibleObjectImplementation*) impl)->getCraftersName();
}

void TangibleObjectAdapter::setCraftersSerial(String& serial) {
	((TangibleObjectImplementation*) impl)->setCraftersSerial(serial);
}

void TangibleObjectAdapter::setLevel(int lev) {
	((TangibleObjectImplementation*) impl)->setLevel(lev);
}

String TangibleObjectAdapter::getCraftersSerial() {
	return ((TangibleObjectImplementation*) impl)->getCraftersSerial();
}

bool TangibleObjectAdapter::isFromFactoryCrate() {
	return ((TangibleObjectImplementation*) impl)->isFromFactoryCrate();
}

void TangibleObjectAdapter::setInitialCraftingValues(ManufactureSchematic* manufactureSchematic, int assemblySuccess) {
	((TangibleObjectImplementation*) impl)->setInitialCraftingValues(manufactureSchematic, assemblySuccess);
}

bool TangibleObjectAdapter::applyComponentStats(ManufactureSchematic* manufactureSchematic) {
	return ((TangibleObjectImplementation*) impl)->applyComponentStats(manufactureSchematic);
}

FactoryCrate* TangibleObjectAdapter::createFactoryCrate(bool insertSelf) {
	return ((TangibleObjectImplementation*) impl)->createFactoryCrate(insertSelf);
}

/*
 *	TangibleObjectHelper
 */

TangibleObjectHelper* TangibleObjectHelper::staticInitializer = TangibleObjectHelper::instance();

TangibleObjectHelper::TangibleObjectHelper() {
	className = "TangibleObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void TangibleObjectHelper::finalizeHelper() {
	TangibleObjectHelper::finalize();
}

DistributedObject* TangibleObjectHelper::instantiateObject() {
	return new TangibleObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* TangibleObjectHelper::instantiateServant() {
	return new TangibleObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* TangibleObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new TangibleObjectAdapter((TangibleObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

