/*
 *	server/zone/objects/tangible/TangibleObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "TangibleObject.h"

#include "TangibleObjectImplementation.h"

#include "../../Zone.h"

#include "../scene/SceneObject.h"

#include "../creature/CreatureObject.h"

#include "../player/Player.h"

#include "../draftschematic/DraftSchematic.h"

#include "../intangible/IntangibleObject.h"

/*
 *	TangibleObjectStub
 */

TangibleObject::TangibleObject(unsigned long long oid, int tp) : SceneObject(DummyConstructorParameter::instance()) {
	_impl = new TangibleObjectImplementation(oid, tp);
	_impl->_setStub(this);
}

TangibleObject::TangibleObject(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempname, int tp) : SceneObject(DummyConstructorParameter::instance()) {
	_impl = new TangibleObjectImplementation(oid, tempCRC, n, tempname, tp);
	_impl->_setStub(this);
}

TangibleObject::TangibleObject(CreatureObject* creature, unsigned int tempCRC, const UnicodeString& n, const String& tempname, int tp) : SceneObject(DummyConstructorParameter::instance()) {
	_impl = new TangibleObjectImplementation(creature, tempCRC, n, tempname, tp);
	_impl->_setStub(this);
}

TangibleObject::TangibleObject(DummyConstructorParameter* param) : SceneObject(param) {
}

TangibleObject::~TangibleObject() {
}

void TangibleObject::updateCraftingValues(DraftSchematic* draftSchematic) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(draftSchematic);

		method.executeWithVoidReturn();
	} else
		((TangibleObjectImplementation*) _impl)->updateCraftingValues(draftSchematic);
}

void TangibleObject::close(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((TangibleObjectImplementation*) _impl)->close(player);
}

void TangibleObject::setEquipped(bool eqp) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addBooleanParameter(eqp);

		method.executeWithVoidReturn();
	} else
		((TangibleObjectImplementation*) _impl)->setEquipped(eqp);
}

void TangibleObject::sendTo(Player* player, bool doClose) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(player);
		method.addBooleanParameter(doClose);

		method.executeWithVoidReturn();
	} else
		((TangibleObjectImplementation*) _impl)->sendTo(player, doClose);
}

void TangibleObject::sendDeltas(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((TangibleObjectImplementation*) _impl)->sendDeltas(player);
}

void TangibleObject::repairItem(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((TangibleObjectImplementation*) _impl)->repairItem(player);
}

void TangibleObject::setObjectName(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((TangibleObjectImplementation*) _impl)->setObjectName(player);
}

unsigned int TangibleObject::getDefenderUpdateCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->getDefenderUpdateCounter();
}

unsigned int TangibleObject::getNewDefenderUpdateCounter(int cnt) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addSignedIntParameter(cnt);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->getNewDefenderUpdateCounter(cnt);
}

char TangibleObject::getUnknownByte() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		return method.executeWithSignedCharReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->getUnknownByte();
}

float TangibleObject::getComplexity() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		return method.executeWithFloatReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->getComplexity();
}

int TangibleObject::getVolume() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);

		return method.executeWithSignedIntReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->getVolume();
}

bool TangibleObject::isEquipped() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isEquipped();
}

bool TangibleObject::isWeapon() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isWeapon();
}

bool TangibleObject::isArmor() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isArmor();
}

bool TangibleObject::isClothing() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isClothing();
}

bool TangibleObject::isContainer() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isContainer();
}

bool TangibleObject::isWearableContainer() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isWearableContainer();
}

bool TangibleObject::isContainer1() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isContainer1();
}

bool TangibleObject::isContainer2() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isContainer2();
}

bool TangibleObject::isWearable() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isWearable();
}

bool TangibleObject::isInstrument() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isInstrument();
}

bool TangibleObject::isAttachment() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isAttachment();
}

bool TangibleObject::isDestroyed() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isDestroyed();
}

bool TangibleObject::isAttackable() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isAttackable();
}

bool TangibleObject::isAttackableBy(CreatureObject* creature) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);
		method.addObjectParameter(creature);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isAttackableBy(creature);
}

bool TangibleObject::isResource() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isResource();
}

bool TangibleObject::isTicket() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isTicket();
}

bool TangibleObject::isTicketCollector() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isTicketCollector();
}

bool TangibleObject::isTerminal() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isTerminal();
}

bool TangibleObject::isTool() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 36);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isTool();
}

bool TangibleObject::isSurveyTool() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 37);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isSurveyTool();
}

bool TangibleObject::isPharmaceutical() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 38);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isPharmaceutical();
}

bool TangibleObject::isConsumable() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 39);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isConsumable();
}

bool TangibleObject::isFurniture() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 40);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isFurniture();
}

bool TangibleObject::isElectronics() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 41);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isElectronics();
}

bool TangibleObject::isGenericItem() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 42);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isGenericItem();
}

bool TangibleObject::isLair() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 43);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isLair();
}

bool TangibleObject::isDeed() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 44);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isDeed();
}

bool TangibleObject::isInstallation() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 45);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isInstallation();
}

bool TangibleObject::isCraftingStation() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 46);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isCraftingStation();
}

bool TangibleObject::isCraftingTool() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 47);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isCraftingTool();
}

bool TangibleObject::isFactoryCrate() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 48);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isFactoryCrate();
}

bool TangibleObject::isComponent() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 49);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isComponent();
}

bool TangibleObject::isTrap() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 50);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isTrap();
}

bool TangibleObject::isGrenade() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 51);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isGrenade();
}

bool TangibleObject::isThrowable() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 52);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isThrowable();
}

bool TangibleObject::isWeaponPowerup() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 53);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isWeaponPowerup();
}

bool TangibleObject::isCamoKit() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 54);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isCamoKit();
}

bool TangibleObject::isCampKit() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 55);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isCampKit();
}

bool TangibleObject::isLoot() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 56);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isLoot();
}

bool TangibleObject::isInsured() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 57);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isInsured();
}

bool TangibleObject::isInsurable() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 58);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isInsurable();
}

bool TangibleObject::isDecayable() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 59);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isDecayable();
}

bool TangibleObject::isSlicable() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 60);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isSlicable();
}

bool TangibleObject::isSliced() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 61);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isSliced();
}

bool TangibleObject::isBeingSliced() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 62);

		return method.executeWithBooleanReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->isBeingSliced();
}

unsigned long long TangibleObject::getSlicerID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 63);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->getSlicerID();
}

void TangibleObject::setSlicerID(unsigned long long id) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 64);
		method.addUnsignedLongParameter(id);

		method.executeWithVoidReturn();
	} else
		((TangibleObjectImplementation*) _impl)->setSlicerID(id);
}

void TangibleObject::setSlicable(bool value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 65);
		method.addBooleanParameter(value);

		method.executeWithVoidReturn();
	} else
		((TangibleObjectImplementation*) _impl)->setSlicable(value);
}

void TangibleObject::setCraftersName(String& n) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 66);
		method.addAsciiParameter(n);

		method.executeWithVoidReturn();
	} else
		((TangibleObjectImplementation*) _impl)->setCraftersName(n);
}

void TangibleObject::setCraftedSerial(String& s) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 67);
		method.addAsciiParameter(s);

		method.executeWithVoidReturn();
	} else
		((TangibleObjectImplementation*) _impl)->setCraftedSerial(s);
}

void TangibleObject::setPlayerUseMask(unsigned int mask) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 68);
		method.addUnsignedIntParameter(mask);

		method.executeWithVoidReturn();
	} else
		((TangibleObjectImplementation*) _impl)->setPlayerUseMask(mask);
}

unsigned int TangibleObject::getPlayerUseMask() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 69);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->getPlayerUseMask();
}

void TangibleObject::setOptionsBitmask(unsigned int mask) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 70);
		method.addUnsignedIntParameter(mask);

		method.executeWithVoidReturn();
	} else
		((TangibleObjectImplementation*) _impl)->setOptionsBitmask(mask);
}

unsigned int TangibleObject::getOptionsBitmask() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 71);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->getOptionsBitmask();
}

int TangibleObject::getObjectSubType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 72);

		return method.executeWithSignedIntReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->getObjectSubType();
}

unsigned int TangibleObject::getTemplateID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 73);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->getTemplateID();
}

int TangibleObject::getObjectCount() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 74);

		return method.executeWithSignedIntReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->getObjectCount();
}

float TangibleObject::getConditionDamage() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 75);

		return method.executeWithFloatReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->getConditionDamage();
}

int TangibleObject::getMaxCondition() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 76);

		return method.executeWithSignedIntReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->getMaxCondition();
}

int TangibleObject::getCondition() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 77);

		return method.executeWithSignedIntReturn();
	} else
		return ((TangibleObjectImplementation*) _impl)->getCondition();
}

void TangibleObject::doDamage(int damage, SceneObject* attacker) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 78);
		method.addSignedIntParameter(damage);
		method.addObjectParameter(attacker);

		method.executeWithVoidReturn();
	} else
		((TangibleObjectImplementation*) _impl)->doDamage(damage, attacker);
}

String& TangibleObject::getCraftersName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 79);

		method.executeWithAsciiReturn(_return_getCraftersName);
		return _return_getCraftersName;
	} else
		return ((TangibleObjectImplementation*) _impl)->getCraftersName();
}

String& TangibleObject::getCraftedSerial() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 80);

		method.executeWithAsciiReturn(_return_getCraftedSerial);
		return _return_getCraftedSerial;
	} else
		return ((TangibleObjectImplementation*) _impl)->getCraftedSerial();
}

String& TangibleObject::getMisoAsocKey() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 81);

		method.executeWithAsciiReturn(_return_getMisoAsocKey);
		return _return_getMisoAsocKey;
	} else
		return ((TangibleObjectImplementation*) _impl)->getMisoAsocKey();
}

void TangibleObject::setLoot(bool l) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 82);
		method.addBooleanParameter(l);

		method.executeWithVoidReturn();
	} else
		((TangibleObjectImplementation*) _impl)->setLoot(l);
}

void TangibleObject::setMaxCondition(int maxCond) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 83);
		method.addSignedIntParameter(maxCond);

		method.executeWithVoidReturn();
	} else
		((TangibleObjectImplementation*) _impl)->setMaxCondition(maxCond);
}

void TangibleObject::setObjectSubType(const int type) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 84);
		method.addSignedIntParameter(type);

		method.executeWithVoidReturn();
	} else
		((TangibleObjectImplementation*) _impl)->setObjectSubType(type);
}

void TangibleObject::setConditionDamage(int damage) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 85);
		method.addSignedIntParameter(damage);

		method.executeWithVoidReturn();
	} else
		((TangibleObjectImplementation*) _impl)->setConditionDamage(damage);
}

void TangibleObject::setObjectCount(const int count) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 86);
		method.addSignedIntParameter(count);

		method.executeWithVoidReturn();
	} else
		((TangibleObjectImplementation*) _impl)->setObjectCount(count);
}

void TangibleObject::setMisoAsocKey(const String& tma) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 87);
		method.addAsciiParameter(tma);

		method.executeWithVoidReturn();
	} else
		((TangibleObjectImplementation*) _impl)->setMisoAsocKey(tma);
}

void TangibleObject::updateOptionsBitmask(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 88);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((TangibleObjectImplementation*) _impl)->updateOptionsBitmask(player);
}

void TangibleObject::updateInsurance(Player* player, bool insure) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 89);
		method.addObjectParameter(player);
		method.addBooleanParameter(insure);

		method.executeWithVoidReturn();
	} else
		((TangibleObjectImplementation*) _impl)->updateInsurance(player, insure);
}

void TangibleObject::onBroken() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 90);

		method.executeWithVoidReturn();
	} else
		((TangibleObjectImplementation*) _impl)->onBroken();
}

void TangibleObject::onSlicingFailure(Player* slicer) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 91);
		method.addObjectParameter(slicer);

		method.executeWithVoidReturn();
	} else
		((TangibleObjectImplementation*) _impl)->onSlicingFailure(slicer);
}

void TangibleObject::onEquip(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 92);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((TangibleObjectImplementation*) _impl)->onEquip(player);
}

void TangibleObject::onUnequip(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 93);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((TangibleObjectImplementation*) _impl)->onUnequip(player);
}

void TangibleObject::decay(float decayRate) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 94);
		method.addFloatParameter(decayRate);

		method.executeWithVoidReturn();
	} else
		((TangibleObjectImplementation*) _impl)->decay(decayRate);
}

void TangibleObject::slice(Player* slicer) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 95);
		method.addObjectParameter(slicer);

		method.executeWithVoidReturn();
	} else
		((TangibleObjectImplementation*) _impl)->slice(slicer);
}

/*
 *	TangibleObjectAdapter
 */

TangibleObjectAdapter::TangibleObjectAdapter(TangibleObjectImplementation* obj) : SceneObjectAdapter(obj) {
}

Packet* TangibleObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		updateCraftingValues((DraftSchematic*) inv->getObjectParameter());
		break;
	case 7:
		close((Player*) inv->getObjectParameter());
		break;
	case 8:
		setEquipped(inv->getBooleanParameter());
		break;
	case 9:
		sendTo((Player*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 10:
		sendDeltas((Player*) inv->getObjectParameter());
		break;
	case 11:
		repairItem((Player*) inv->getObjectParameter());
		break;
	case 12:
		setObjectName((Player*) inv->getObjectParameter());
		break;
	case 13:
		resp->insertInt(getDefenderUpdateCounter());
		break;
	case 14:
		resp->insertInt(getNewDefenderUpdateCounter(inv->getSignedIntParameter()));
		break;
	case 15:
		resp->insertSignedByte(getUnknownByte());
		break;
	case 16:
		resp->insertFloat(getComplexity());
		break;
	case 17:
		resp->insertSignedInt(getVolume());
		break;
	case 18:
		resp->insertBoolean(isEquipped());
		break;
	case 19:
		resp->insertBoolean(isWeapon());
		break;
	case 20:
		resp->insertBoolean(isArmor());
		break;
	case 21:
		resp->insertBoolean(isClothing());
		break;
	case 22:
		resp->insertBoolean(isContainer());
		break;
	case 23:
		resp->insertBoolean(isWearableContainer());
		break;
	case 24:
		resp->insertBoolean(isContainer1());
		break;
	case 25:
		resp->insertBoolean(isContainer2());
		break;
	case 26:
		resp->insertBoolean(isWearable());
		break;
	case 27:
		resp->insertBoolean(isInstrument());
		break;
	case 28:
		resp->insertBoolean(isAttachment());
		break;
	case 29:
		resp->insertBoolean(isDestroyed());
		break;
	case 30:
		resp->insertBoolean(isAttackable());
		break;
	case 31:
		resp->insertBoolean(isAttackableBy((CreatureObject*) inv->getObjectParameter()));
		break;
	case 32:
		resp->insertBoolean(isResource());
		break;
	case 33:
		resp->insertBoolean(isTicket());
		break;
	case 34:
		resp->insertBoolean(isTicketCollector());
		break;
	case 35:
		resp->insertBoolean(isTerminal());
		break;
	case 36:
		resp->insertBoolean(isTool());
		break;
	case 37:
		resp->insertBoolean(isSurveyTool());
		break;
	case 38:
		resp->insertBoolean(isPharmaceutical());
		break;
	case 39:
		resp->insertBoolean(isConsumable());
		break;
	case 40:
		resp->insertBoolean(isFurniture());
		break;
	case 41:
		resp->insertBoolean(isElectronics());
		break;
	case 42:
		resp->insertBoolean(isGenericItem());
		break;
	case 43:
		resp->insertBoolean(isLair());
		break;
	case 44:
		resp->insertBoolean(isDeed());
		break;
	case 45:
		resp->insertBoolean(isInstallation());
		break;
	case 46:
		resp->insertBoolean(isCraftingStation());
		break;
	case 47:
		resp->insertBoolean(isCraftingTool());
		break;
	case 48:
		resp->insertBoolean(isFactoryCrate());
		break;
	case 49:
		resp->insertBoolean(isComponent());
		break;
	case 50:
		resp->insertBoolean(isTrap());
		break;
	case 51:
		resp->insertBoolean(isGrenade());
		break;
	case 52:
		resp->insertBoolean(isThrowable());
		break;
	case 53:
		resp->insertBoolean(isWeaponPowerup());
		break;
	case 54:
		resp->insertBoolean(isCamoKit());
		break;
	case 55:
		resp->insertBoolean(isCampKit());
		break;
	case 56:
		resp->insertBoolean(isLoot());
		break;
	case 57:
		resp->insertBoolean(isInsured());
		break;
	case 58:
		resp->insertBoolean(isInsurable());
		break;
	case 59:
		resp->insertBoolean(isDecayable());
		break;
	case 60:
		resp->insertBoolean(isSlicable());
		break;
	case 61:
		resp->insertBoolean(isSliced());
		break;
	case 62:
		resp->insertBoolean(isBeingSliced());
		break;
	case 63:
		resp->insertLong(getSlicerID());
		break;
	case 64:
		setSlicerID(inv->getUnsignedLongParameter());
		break;
	case 65:
		setSlicable(inv->getBooleanParameter());
		break;
	case 66:
		setCraftersName(inv->getAsciiParameter(_param0_setCraftersName__String_));
		break;
	case 67:
		setCraftedSerial(inv->getAsciiParameter(_param0_setCraftedSerial__String_));
		break;
	case 68:
		setPlayerUseMask(inv->getUnsignedIntParameter());
		break;
	case 69:
		resp->insertInt(getPlayerUseMask());
		break;
	case 70:
		setOptionsBitmask(inv->getUnsignedIntParameter());
		break;
	case 71:
		resp->insertInt(getOptionsBitmask());
		break;
	case 72:
		resp->insertSignedInt(getObjectSubType());
		break;
	case 73:
		resp->insertInt(getTemplateID());
		break;
	case 74:
		resp->insertSignedInt(getObjectCount());
		break;
	case 75:
		resp->insertFloat(getConditionDamage());
		break;
	case 76:
		resp->insertSignedInt(getMaxCondition());
		break;
	case 77:
		resp->insertSignedInt(getCondition());
		break;
	case 78:
		doDamage(inv->getSignedIntParameter(), (SceneObject*) inv->getObjectParameter());
		break;
	case 79:
		resp->insertAscii(getCraftersName());
		break;
	case 80:
		resp->insertAscii(getCraftedSerial());
		break;
	case 81:
		resp->insertAscii(getMisoAsocKey());
		break;
	case 82:
		setLoot(inv->getBooleanParameter());
		break;
	case 83:
		setMaxCondition(inv->getSignedIntParameter());
		break;
	case 84:
		setObjectSubType(inv->getSignedIntParameter());
		break;
	case 85:
		setConditionDamage(inv->getSignedIntParameter());
		break;
	case 86:
		setObjectCount(inv->getSignedIntParameter());
		break;
	case 87:
		setMisoAsocKey(inv->getAsciiParameter(_param0_setMisoAsocKey__String_));
		break;
	case 88:
		updateOptionsBitmask((Player*) inv->getObjectParameter());
		break;
	case 89:
		updateInsurance((Player*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 90:
		onBroken();
		break;
	case 91:
		onSlicingFailure((Player*) inv->getObjectParameter());
		break;
	case 92:
		onEquip((Player*) inv->getObjectParameter());
		break;
	case 93:
		onUnequip((Player*) inv->getObjectParameter());
		break;
	case 94:
		decay(inv->getFloatParameter());
		break;
	case 95:
		slice((Player*) inv->getObjectParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void TangibleObjectAdapter::updateCraftingValues(DraftSchematic* draftSchematic) {
	return ((TangibleObjectImplementation*) impl)->updateCraftingValues(draftSchematic);
}

void TangibleObjectAdapter::close(Player* player) {
	return ((TangibleObjectImplementation*) impl)->close(player);
}

void TangibleObjectAdapter::setEquipped(bool eqp) {
	return ((TangibleObjectImplementation*) impl)->setEquipped(eqp);
}

void TangibleObjectAdapter::sendTo(Player* player, bool doClose) {
	return ((TangibleObjectImplementation*) impl)->sendTo(player, doClose);
}

void TangibleObjectAdapter::sendDeltas(Player* player) {
	return ((TangibleObjectImplementation*) impl)->sendDeltas(player);
}

void TangibleObjectAdapter::repairItem(Player* player) {
	return ((TangibleObjectImplementation*) impl)->repairItem(player);
}

void TangibleObjectAdapter::setObjectName(Player* player) {
	return ((TangibleObjectImplementation*) impl)->setObjectName(player);
}

unsigned int TangibleObjectAdapter::getDefenderUpdateCounter() {
	return ((TangibleObjectImplementation*) impl)->getDefenderUpdateCounter();
}

unsigned int TangibleObjectAdapter::getNewDefenderUpdateCounter(int cnt) {
	return ((TangibleObjectImplementation*) impl)->getNewDefenderUpdateCounter(cnt);
}

char TangibleObjectAdapter::getUnknownByte() {
	return ((TangibleObjectImplementation*) impl)->getUnknownByte();
}

float TangibleObjectAdapter::getComplexity() {
	return ((TangibleObjectImplementation*) impl)->getComplexity();
}

int TangibleObjectAdapter::getVolume() {
	return ((TangibleObjectImplementation*) impl)->getVolume();
}

bool TangibleObjectAdapter::isEquipped() {
	return ((TangibleObjectImplementation*) impl)->isEquipped();
}

bool TangibleObjectAdapter::isWeapon() {
	return ((TangibleObjectImplementation*) impl)->isWeapon();
}

bool TangibleObjectAdapter::isArmor() {
	return ((TangibleObjectImplementation*) impl)->isArmor();
}

bool TangibleObjectAdapter::isClothing() {
	return ((TangibleObjectImplementation*) impl)->isClothing();
}

bool TangibleObjectAdapter::isContainer() {
	return ((TangibleObjectImplementation*) impl)->isContainer();
}

bool TangibleObjectAdapter::isWearableContainer() {
	return ((TangibleObjectImplementation*) impl)->isWearableContainer();
}

bool TangibleObjectAdapter::isContainer1() {
	return ((TangibleObjectImplementation*) impl)->isContainer1();
}

bool TangibleObjectAdapter::isContainer2() {
	return ((TangibleObjectImplementation*) impl)->isContainer2();
}

bool TangibleObjectAdapter::isWearable() {
	return ((TangibleObjectImplementation*) impl)->isWearable();
}

bool TangibleObjectAdapter::isInstrument() {
	return ((TangibleObjectImplementation*) impl)->isInstrument();
}

bool TangibleObjectAdapter::isAttachment() {
	return ((TangibleObjectImplementation*) impl)->isAttachment();
}

bool TangibleObjectAdapter::isDestroyed() {
	return ((TangibleObjectImplementation*) impl)->isDestroyed();
}

bool TangibleObjectAdapter::isAttackable() {
	return ((TangibleObjectImplementation*) impl)->isAttackable();
}

bool TangibleObjectAdapter::isAttackableBy(CreatureObject* creature) {
	return ((TangibleObjectImplementation*) impl)->isAttackableBy(creature);
}

bool TangibleObjectAdapter::isResource() {
	return ((TangibleObjectImplementation*) impl)->isResource();
}

bool TangibleObjectAdapter::isTicket() {
	return ((TangibleObjectImplementation*) impl)->isTicket();
}

bool TangibleObjectAdapter::isTicketCollector() {
	return ((TangibleObjectImplementation*) impl)->isTicketCollector();
}

bool TangibleObjectAdapter::isTerminal() {
	return ((TangibleObjectImplementation*) impl)->isTerminal();
}

bool TangibleObjectAdapter::isTool() {
	return ((TangibleObjectImplementation*) impl)->isTool();
}

bool TangibleObjectAdapter::isSurveyTool() {
	return ((TangibleObjectImplementation*) impl)->isSurveyTool();
}

bool TangibleObjectAdapter::isPharmaceutical() {
	return ((TangibleObjectImplementation*) impl)->isPharmaceutical();
}

bool TangibleObjectAdapter::isConsumable() {
	return ((TangibleObjectImplementation*) impl)->isConsumable();
}

bool TangibleObjectAdapter::isFurniture() {
	return ((TangibleObjectImplementation*) impl)->isFurniture();
}

bool TangibleObjectAdapter::isElectronics() {
	return ((TangibleObjectImplementation*) impl)->isElectronics();
}

bool TangibleObjectAdapter::isGenericItem() {
	return ((TangibleObjectImplementation*) impl)->isGenericItem();
}

bool TangibleObjectAdapter::isLair() {
	return ((TangibleObjectImplementation*) impl)->isLair();
}

bool TangibleObjectAdapter::isDeed() {
	return ((TangibleObjectImplementation*) impl)->isDeed();
}

bool TangibleObjectAdapter::isInstallation() {
	return ((TangibleObjectImplementation*) impl)->isInstallation();
}

bool TangibleObjectAdapter::isCraftingStation() {
	return ((TangibleObjectImplementation*) impl)->isCraftingStation();
}

bool TangibleObjectAdapter::isCraftingTool() {
	return ((TangibleObjectImplementation*) impl)->isCraftingTool();
}

bool TangibleObjectAdapter::isFactoryCrate() {
	return ((TangibleObjectImplementation*) impl)->isFactoryCrate();
}

bool TangibleObjectAdapter::isComponent() {
	return ((TangibleObjectImplementation*) impl)->isComponent();
}

bool TangibleObjectAdapter::isTrap() {
	return ((TangibleObjectImplementation*) impl)->isTrap();
}

bool TangibleObjectAdapter::isGrenade() {
	return ((TangibleObjectImplementation*) impl)->isGrenade();
}

bool TangibleObjectAdapter::isThrowable() {
	return ((TangibleObjectImplementation*) impl)->isThrowable();
}

bool TangibleObjectAdapter::isWeaponPowerup() {
	return ((TangibleObjectImplementation*) impl)->isWeaponPowerup();
}

bool TangibleObjectAdapter::isCamoKit() {
	return ((TangibleObjectImplementation*) impl)->isCamoKit();
}

bool TangibleObjectAdapter::isCampKit() {
	return ((TangibleObjectImplementation*) impl)->isCampKit();
}

bool TangibleObjectAdapter::isLoot() {
	return ((TangibleObjectImplementation*) impl)->isLoot();
}

bool TangibleObjectAdapter::isInsured() {
	return ((TangibleObjectImplementation*) impl)->isInsured();
}

bool TangibleObjectAdapter::isInsurable() {
	return ((TangibleObjectImplementation*) impl)->isInsurable();
}

bool TangibleObjectAdapter::isDecayable() {
	return ((TangibleObjectImplementation*) impl)->isDecayable();
}

bool TangibleObjectAdapter::isSlicable() {
	return ((TangibleObjectImplementation*) impl)->isSlicable();
}

bool TangibleObjectAdapter::isSliced() {
	return ((TangibleObjectImplementation*) impl)->isSliced();
}

bool TangibleObjectAdapter::isBeingSliced() {
	return ((TangibleObjectImplementation*) impl)->isBeingSliced();
}

unsigned long long TangibleObjectAdapter::getSlicerID() {
	return ((TangibleObjectImplementation*) impl)->getSlicerID();
}

void TangibleObjectAdapter::setSlicerID(unsigned long long id) {
	return ((TangibleObjectImplementation*) impl)->setSlicerID(id);
}

void TangibleObjectAdapter::setSlicable(bool value) {
	return ((TangibleObjectImplementation*) impl)->setSlicable(value);
}

void TangibleObjectAdapter::setCraftersName(String& n) {
	return ((TangibleObjectImplementation*) impl)->setCraftersName(n);
}

void TangibleObjectAdapter::setCraftedSerial(String& s) {
	return ((TangibleObjectImplementation*) impl)->setCraftedSerial(s);
}

void TangibleObjectAdapter::setPlayerUseMask(unsigned int mask) {
	return ((TangibleObjectImplementation*) impl)->setPlayerUseMask(mask);
}

unsigned int TangibleObjectAdapter::getPlayerUseMask() {
	return ((TangibleObjectImplementation*) impl)->getPlayerUseMask();
}

void TangibleObjectAdapter::setOptionsBitmask(unsigned int mask) {
	return ((TangibleObjectImplementation*) impl)->setOptionsBitmask(mask);
}

unsigned int TangibleObjectAdapter::getOptionsBitmask() {
	return ((TangibleObjectImplementation*) impl)->getOptionsBitmask();
}

int TangibleObjectAdapter::getObjectSubType() {
	return ((TangibleObjectImplementation*) impl)->getObjectSubType();
}

unsigned int TangibleObjectAdapter::getTemplateID() {
	return ((TangibleObjectImplementation*) impl)->getTemplateID();
}

int TangibleObjectAdapter::getObjectCount() {
	return ((TangibleObjectImplementation*) impl)->getObjectCount();
}

float TangibleObjectAdapter::getConditionDamage() {
	return ((TangibleObjectImplementation*) impl)->getConditionDamage();
}

int TangibleObjectAdapter::getMaxCondition() {
	return ((TangibleObjectImplementation*) impl)->getMaxCondition();
}

int TangibleObjectAdapter::getCondition() {
	return ((TangibleObjectImplementation*) impl)->getCondition();
}

void TangibleObjectAdapter::doDamage(int damage, SceneObject* attacker) {
	return ((TangibleObjectImplementation*) impl)->doDamage(damage, attacker);
}

String& TangibleObjectAdapter::getCraftersName() {
	return ((TangibleObjectImplementation*) impl)->getCraftersName();
}

String& TangibleObjectAdapter::getCraftedSerial() {
	return ((TangibleObjectImplementation*) impl)->getCraftedSerial();
}

String& TangibleObjectAdapter::getMisoAsocKey() {
	return ((TangibleObjectImplementation*) impl)->getMisoAsocKey();
}

void TangibleObjectAdapter::setLoot(bool l) {
	return ((TangibleObjectImplementation*) impl)->setLoot(l);
}

void TangibleObjectAdapter::setMaxCondition(int maxCond) {
	return ((TangibleObjectImplementation*) impl)->setMaxCondition(maxCond);
}

void TangibleObjectAdapter::setObjectSubType(const int type) {
	return ((TangibleObjectImplementation*) impl)->setObjectSubType(type);
}

void TangibleObjectAdapter::setConditionDamage(int damage) {
	return ((TangibleObjectImplementation*) impl)->setConditionDamage(damage);
}

void TangibleObjectAdapter::setObjectCount(const int count) {
	return ((TangibleObjectImplementation*) impl)->setObjectCount(count);
}

void TangibleObjectAdapter::setMisoAsocKey(const String& tma) {
	return ((TangibleObjectImplementation*) impl)->setMisoAsocKey(tma);
}

void TangibleObjectAdapter::updateOptionsBitmask(Player* player) {
	return ((TangibleObjectImplementation*) impl)->updateOptionsBitmask(player);
}

void TangibleObjectAdapter::updateInsurance(Player* player, bool insure) {
	return ((TangibleObjectImplementation*) impl)->updateInsurance(player, insure);
}

void TangibleObjectAdapter::onBroken() {
	return ((TangibleObjectImplementation*) impl)->onBroken();
}

void TangibleObjectAdapter::onSlicingFailure(Player* slicer) {
	return ((TangibleObjectImplementation*) impl)->onSlicingFailure(slicer);
}

void TangibleObjectAdapter::onEquip(Player* player) {
	return ((TangibleObjectImplementation*) impl)->onEquip(player);
}

void TangibleObjectAdapter::onUnequip(Player* player) {
	return ((TangibleObjectImplementation*) impl)->onUnequip(player);
}

void TangibleObjectAdapter::decay(float decayRate) {
	return ((TangibleObjectImplementation*) impl)->decay(decayRate);
}

void TangibleObjectAdapter::slice(Player* slicer) {
	return ((TangibleObjectImplementation*) impl)->slice(slicer);
}

/*
 *	TangibleObjectHelper
 */

TangibleObjectHelper* TangibleObjectHelper::staticInitializer = TangibleObjectHelper::instance();

TangibleObjectHelper::TangibleObjectHelper() {
	className = "TangibleObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void TangibleObjectHelper::finalizeHelper() {
	TangibleObjectHelper::finalize();
}

DistributedObject* TangibleObjectHelper::instantiateObject() {
	return new TangibleObject(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* TangibleObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new TangibleObjectAdapter((TangibleObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	TangibleObjectServant
 */

TangibleObjectServant::TangibleObjectServant() : SceneObjectImplementation() {
	_classHelper = TangibleObjectHelper::instance();
}

TangibleObjectServant::TangibleObjectServant(unsigned long long oid, int type) : SceneObjectImplementation(oid, type) {
	_classHelper = TangibleObjectHelper::instance();
}

TangibleObjectServant::~TangibleObjectServant() {
}

void TangibleObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (TangibleObject*) stub;
	SceneObjectServant::_setStub(stub);
}

DistributedObjectStub* TangibleObjectServant::_getStub() {
	return _this;
}

