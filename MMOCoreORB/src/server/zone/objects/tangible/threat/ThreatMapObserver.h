/*
 *	server/zone/objects/tangible/threat/ThreatMapObserver.h generated by engine3 IDL compiler 0.60
 */

#ifndef THREATMAPOBSERVER_H_
#define THREATMAPOBSERVER_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {

class TangibleObject;

} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible;

#include "engine/core/ManagedObject.h"

#include "server/zone/objects/scene/ObserverEventType.h"

#include "engine/log/Logger.h"

#include "engine/core/ManagedReference.h"

#include "system/lang/ref/Reference.h"

#include "engine/core/Task.h"

#include "engine/util/Observer.h"

#include "engine/util/Observable.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace threat {

class ThreatMapObserver : public Observer {
public:
	ThreatMapObserver(TangibleObject* me);

	int notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2);

	DistributedObjectServant* _getImplementation();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	ThreatMapObserver(DummyConstructorParameter* param);

	virtual ~ThreatMapObserver();

	friend class ThreatMapObserverHelper;
};

} // namespace threat
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::threat;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace threat {

class ThreatMapObserverImplementation : public ObserverImplementation {
protected:
	ManagedWeakReference<TangibleObject* > self;

public:
	ThreatMapObserverImplementation(TangibleObject* me);

	ThreatMapObserverImplementation(DummyConstructorParameter* param);

	int notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2);

	WeakReference<ThreatMapObserver*> _this;

	operator const ThreatMapObserver*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~ThreatMapObserverImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const String& name);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class ThreatMapObserver;
};

class ThreatMapObserverAdapter : public ObserverAdapter {
public:
	ThreatMapObserverAdapter(ThreatMapObserver* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	int notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2);

};

class ThreatMapObserverHelper : public DistributedObjectClassHelper, public Singleton<ThreatMapObserverHelper> {
	static ThreatMapObserverHelper* staticInitializer;

public:
	ThreatMapObserverHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<ThreatMapObserverHelper>;
};

} // namespace threat
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::threat;

#endif /*THREATMAPOBSERVER_H_*/
