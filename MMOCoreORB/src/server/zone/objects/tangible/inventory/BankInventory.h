/*
 *	server/zone/objects/tangible/inventory/BankInventory.h generated by engine3 IDL compiler 0.55
 */

#ifndef BANKINVENTORY_H_
#define BANKINVENTORY_H_

#include "engine/orb/DistributedObjectBroker.h"

class CreatureObject;

class Container;

#include "../Container.h"

class BankInventory : public Container {
public:
	BankInventory(CreatureObject* creature);

	void setBankIsLoaded();

	bool getBankIsLoaded();

protected:
	BankInventory(DummyConstructorParameter* param);

	virtual ~BankInventory();

	friend class BankInventoryHelper;
};

class BankInventoryImplementation;

class BankInventoryAdapter : public ContainerAdapter {
public:
	BankInventoryAdapter(BankInventoryImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void setBankIsLoaded();

	bool getBankIsLoaded();

};

class BankInventoryHelper : public DistributedObjectClassHelper, public Singleton<BankInventoryHelper> {
	static BankInventoryHelper* staticInitializer;

public:
	BankInventoryHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<BankInventoryHelper>;
};

#include "../ContainerImplementation.h"

class BankInventoryServant : public ContainerImplementation {
public:
	BankInventory* _this;

public:
	BankInventoryServant(unsigned long long oid);
	virtual ~BankInventoryServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*BANKINVENTORY_H_*/
