/*
 *	server/zone/objects/tangible/inventory/BankInventory.cpp generated by engine3 IDL compiler 0.55
 */

#include "BankInventory.h"

#include "BankInventoryImplementation.h"

#include "../../creature/CreatureObject.h"

#include "../Container.h"

/*
 *	BankInventoryStub
 */

BankInventory::BankInventory(CreatureObject* creature) : Container(DummyConstructorParameter::instance()) {
	_impl = new BankInventoryImplementation(creature);
	_impl->_setStub(this);
}

BankInventory::BankInventory(DummyConstructorParameter* param) : Container(param) {
}

BankInventory::~BankInventory() {
}

void BankInventory::setBankIsLoaded() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((BankInventoryImplementation*) _impl)->setBankIsLoaded();
}

bool BankInventory::getBankIsLoaded() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		return method.executeWithBooleanReturn();
	} else
		return ((BankInventoryImplementation*) _impl)->getBankIsLoaded();
}

/*
 *	BankInventoryAdapter
 */

BankInventoryAdapter::BankInventoryAdapter(BankInventoryImplementation* obj) : ContainerAdapter(obj) {
}

Packet* BankInventoryAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		setBankIsLoaded();
		break;
	case 7:
		resp->insertBoolean(getBankIsLoaded());
		break;
	default:
		return NULL;
	}

	return resp;
}

void BankInventoryAdapter::setBankIsLoaded() {
	return ((BankInventoryImplementation*) impl)->setBankIsLoaded();
}

bool BankInventoryAdapter::getBankIsLoaded() {
	return ((BankInventoryImplementation*) impl)->getBankIsLoaded();
}

/*
 *	BankInventoryHelper
 */

BankInventoryHelper* BankInventoryHelper::staticInitializer = BankInventoryHelper::instance();

BankInventoryHelper::BankInventoryHelper() {
	className = "BankInventory";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void BankInventoryHelper::finalizeHelper() {
	BankInventoryHelper::finalize();
}

DistributedObject* BankInventoryHelper::instantiateObject() {
	return new BankInventory(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* BankInventoryHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new BankInventoryAdapter((BankInventoryImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	BankInventoryServant
 */

BankInventoryServant::BankInventoryServant(unsigned long long oid) : ContainerImplementation(oid) {
	_classHelper = BankInventoryHelper::instance();
}

BankInventoryServant::~BankInventoryServant() {
}

void BankInventoryServant::_setStub(DistributedObjectStub* stub) {
	_this = (BankInventory*) stub;
	ContainerServant::_setStub(stub);
}

DistributedObjectStub* BankInventoryServant::_getStub() {
	return _this;
}

