/*
 *	server/zone/objects/tangible/lair/LairObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "LairObject.h"

#include "LairObjectImplementation.h"

#include "../TangibleObject.h"

/*
 *	LairObjectStub
 */

LairObject::LairObject(unsigned int objcrc, unsigned long long oid) : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new LairObjectImplementation(objcrc, oid);
	_impl->_setStub(this);
}

LairObject::LairObject(DummyConstructorParameter* param) : TangibleObject(param) {
}

LairObject::~LairObject() {
}

void LairObject::setCreatureCRC(unsigned int crc) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addUnsignedIntParameter(crc);

		method.executeWithVoidReturn();
	} else
		((LairObjectImplementation*) _impl)->setCreatureCRC(crc);
}

void LairObject::setSpawnSize(int size) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addSignedIntParameter(size);

		method.executeWithVoidReturn();
	} else
		((LairObjectImplementation*) _impl)->setSpawnSize(size);
}

void LairObject::setBabiesPerMillion(int babies) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addSignedIntParameter(babies);

		method.executeWithVoidReturn();
	} else
		((LairObjectImplementation*) _impl)->setBabiesPerMillion(babies);
}

void LairObject::spawnCreatures(bool lockCreatureManager) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addBooleanParameter(lockCreatureManager);

		method.executeWithVoidReturn();
	} else
		((LairObjectImplementation*) _impl)->spawnCreatures(lockCreatureManager);
}

String& LairObject::getTemplateDetailName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		method.executeWithAsciiReturn(_return_getTemplateDetailName);
		return _return_getTemplateDetailName;
	} else
		return ((LairObjectImplementation*) _impl)->getTemplateDetailName();
}

String& LairObject::getTemplateDetail() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		method.executeWithAsciiReturn(_return_getTemplateDetail);
		return _return_getTemplateDetail;
	} else
		return ((LairObjectImplementation*) _impl)->getTemplateDetail();
}

int LairObject::getLevel() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		return method.executeWithSignedIntReturn();
	} else
		return ((LairObjectImplementation*) _impl)->getLevel();
}

void LairObject::setLevel(int lev) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addSignedIntParameter(lev);

		method.executeWithVoidReturn();
	} else
		((LairObjectImplementation*) _impl)->setLevel(lev);
}

/*
 *	LairObjectAdapter
 */

LairObjectAdapter::LairObjectAdapter(LairObjectImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* LairObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		setCreatureCRC(inv->getUnsignedIntParameter());
		break;
	case 7:
		setSpawnSize(inv->getSignedIntParameter());
		break;
	case 8:
		setBabiesPerMillion(inv->getSignedIntParameter());
		break;
	case 9:
		spawnCreatures(inv->getBooleanParameter());
		break;
	case 10:
		resp->insertAscii(getTemplateDetailName());
		break;
	case 11:
		resp->insertAscii(getTemplateDetail());
		break;
	case 12:
		resp->insertSignedInt(getLevel());
		break;
	case 13:
		setLevel(inv->getSignedIntParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void LairObjectAdapter::setCreatureCRC(unsigned int crc) {
	return ((LairObjectImplementation*) impl)->setCreatureCRC(crc);
}

void LairObjectAdapter::setSpawnSize(int size) {
	return ((LairObjectImplementation*) impl)->setSpawnSize(size);
}

void LairObjectAdapter::setBabiesPerMillion(int babies) {
	return ((LairObjectImplementation*) impl)->setBabiesPerMillion(babies);
}

void LairObjectAdapter::spawnCreatures(bool lockCreatureManager) {
	return ((LairObjectImplementation*) impl)->spawnCreatures(lockCreatureManager);
}

String& LairObjectAdapter::getTemplateDetailName() {
	return ((LairObjectImplementation*) impl)->getTemplateDetailName();
}

String& LairObjectAdapter::getTemplateDetail() {
	return ((LairObjectImplementation*) impl)->getTemplateDetail();
}

int LairObjectAdapter::getLevel() {
	return ((LairObjectImplementation*) impl)->getLevel();
}

void LairObjectAdapter::setLevel(int lev) {
	return ((LairObjectImplementation*) impl)->setLevel(lev);
}

/*
 *	LairObjectHelper
 */

LairObjectHelper* LairObjectHelper::staticInitializer = LairObjectHelper::instance();

LairObjectHelper::LairObjectHelper() {
	className = "LairObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void LairObjectHelper::finalizeHelper() {
	LairObjectHelper::finalize();
}

DistributedObject* LairObjectHelper::instantiateObject() {
	return new LairObject(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* LairObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new LairObjectAdapter((LairObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	LairObjectServant
 */

LairObjectServant::LairObjectServant(unsigned long long oid) : TangibleObjectImplementation(oid) {
	_classHelper = LairObjectHelper::instance();
}

LairObjectServant::~LairObjectServant() {
}

void LairObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (LairObject*) stub;
	TangibleObjectServant::_setStub(stub);
}

DistributedObjectStub* LairObjectServant::_getStub() {
	return _this;
}

