/*
 *	server/zone/objects/tangible/TangibleObject.h generated by engine3 IDL compiler 0.60
 */

#ifndef TANGIBLEOBJECT_H_
#define TANGIBLEOBJECT_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace packets {
namespace scene {

class AttributeListMessage;

} // namespace scene
} // namespace packets
} // namespace zone
} // namespace server

using namespace server::zone::packets::scene;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {

class Zone;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace player {

class PlayerObject;

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

namespace server {
namespace zone {
namespace objects {
namespace manufactureschematic {

class ManufactureSchematic;

} // namespace manufactureschematic
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::manufactureschematic;

namespace server {
namespace zone {
namespace objects {
namespace factorycrate {

class FactoryCrate;

} // namespace factorycrate
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::factorycrate;

namespace server {
namespace zone {
namespace templates {

class SharedObjectTemplate;

} // namespace templates
} // namespace zone
} // namespace server

using namespace server::zone::templates;

namespace server {
namespace zone {
namespace packets {
namespace object {

class ObjectMenuResponse;

} // namespace object
} // namespace packets
} // namespace zone
} // namespace server

using namespace server::zone::packets::object;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace threat {

class ThreatMap;

} // namespace threat
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::threat;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace weapon {

class WeaponObject;

} // namespace weapon
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::weapon;

#include "server/zone/objects/tangible/variables/SkillModMap.h"

#include "server/zone/objects/creature/CreatureFlag.h"

#include "server/zone/objects/tangible/OptionBitmask.h"

#include "server/zone/objects/scene/SceneObjectType.h"

#include "server/zone/objects/scene/variables/CustomizationVariables.h"

#include "server/zone/objects/scene/variables/DeltaVector.h"

#include "server/zone/objects/manufactureschematic/craftingvalues/CraftingValues.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "engine/lua/LuaObject.h"

#include "system/util/Vector.h"

#include "system/util/SortedVector.h"

#include "engine/log/Logger.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {

class TangibleObject : public SceneObject {
public:
	/**
	 * TangibleObject constructor, used to initialized the object
	 * @pre { templateData is a valid SharedTangibleObjectTemplate LuaObject that contains the necessary values to initialize CreatureObject }
	 * @post { TangibleObject is initialized } 
	 * @param templateData templateData points to the SharedTangibleObjectTemplate LuaObject that is used to initialize TangibleObject members
	 */
	TangibleObject();

	void initializeMembers();

	/**
	 * Adds this object's skill mod map to the target object's skill mod map
	 * @param targetObject The targeted object containing the SkillModMap which will be affected.
	 */
	void addTemplateSkillMods(TangibleObject* targetObject);

	void applySkillModsTo(CreatureObject* creature, bool doCheck = true);

	void removeSkillModsFrom(CreatureObject* creature);

	void addSkillMod(const int skillType, const String& skillMod, int value, bool notifyClient = true);

	void removeSkillMod(const int skillType, const String& skillMod, int value, bool notifyClient = true);

	void removeAllSkillModsOfType(const int skillType, bool notifyClient = true);

	/**
	 * Removes this object's skill mod map from the target object's skill mod map
	 * @param targetObject the targeted object containing the SkillModMap which will be affected.
	 */
	void removeTemplateSkillMods(TangibleObject* tangibleObject);

	VectorMap<String, int>* getTemplateSkillMods();

	/**
	 * Reads and sets the template data from a SharedTangibleObjectTemplate LuaObject
	 * @pre { templateData is a valid pointer }
	 * @post { TangibleObject members are initialized }
	 * @param templateData templateData points to the SharedTangibleObjectTemplate LuaObject that is used to initialize the TangibleObject members
	 */
	void loadTemplateData(SharedObjectTemplate* templateData);

	/**
	 * Initializes the transient members of SceneObject, must call the inherited object method first.
	 * @pre {transient members are not initialized }
	 * @post { transient members are initialized }
	 */
	void initializeTransientMembers();

	/**
	 * Updates the custom name of the object
	 * @pre { this locked }
	 * @post { this locked }
	 */
	void setCustomObjectName(const UnicodeString& name, bool notifyClient);

	/**
	 * Sends the TANO baseline messages of this object to the specified player
	 * @pre { this object is locked }
	 * @post { this object is locked, player received the baseline messages }
	 * @param player SceneObject that will receive the baselines 
	 */
	void sendBaselinesTo(SceneObject* player);

	/**
	 * Calls the appropriate UI Listener Function
	 * @pre { this object is locked, object is locked }
	 * @post {this object is locked, object is locked }
	 * @param player CreatureObject using the item
	 * @param value value from packet
	 */
	void synchronizedUIListen(SceneObject* player, int value);

	/**
	 * Calls the appropriate UI Stop Listener Function
	 * @pre { this object is locked, object is locked }
	 * @post {this object is locked, object is locked }
	 * @param player CreatureObject using the item
	 * @param value value from packet
	 */
	void synchronizedUIStopListen(SceneObject* player, int value);

	/**
	 * Sets the active defender
	 * @pre { this object is locked }
	 * @post { this object is locked, defender is active }
	 * @param defender SceneObject to set as the active defender
	 */
	void setDefender(SceneObject* defender);

	/**
	 * Adds a SceneObject to the defender vector
	 * @pre { this object is locked }
	 * @post { this object is locked, defender is in the defender vector }
	 * @param defender SceneObject to add to the defender vector
	 */
	void addDefender(SceneObject* defender);

	/**
	 * Removes the specified defender from the defender vector
	 * @pre { this object is locked }
	 * @post { this object is locked, defender is not in the defender vector }
	 * @param defender SceneObject to remove from the defender vector
	 */
	void removeDefender(SceneObject* defender);

	/**
	 * Removes all the defenders from the defender vector
	 * @pre { this object is locked }
	 * @post { this object is locked, defender vector is empty }
	 */
	void removeDefenders();

	/**
	 * Sets the combat state, needs to be overriden
	 * @pre { this object is locked }
	 * @post { this object is locked, this object is in a combat state }
	 */
	void setCombatState();

	/**
	 * Updates the object count delta
	 * @pre { this object is locked }
	 * @post { this object is locked }
	 * @param newUseCount new value to update
	 */
	void setUseCount(unsigned int newUseCount, bool notifyClient = true);

	void setCountdownTimer(unsigned int newCount, bool notifyClient = true);

	/**
	 * Decreases use count, when reaches 0 destroys itself
	 */
	void decreaseUseCount();

	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	void fillAttributeList(AttributeListMessage* msg, CreatureObject* object);

	/**
	 * Cleares the combat state
	 * @pre { this object is locked }
	 * @post { this object is locked, this object is not in a combat state }
	 * @param clearDefenders if true the defender vector willl be emptied
	 */
	void clearCombatState(bool clearDefenders = true);

	/**
	 * Evaluates if this object contains the specified defender
	 * @pre { this object is locked }
	 * @post { this object is locked }
	 * @return returns true if SceneObject defender exists in the defender vector
	 */
	bool hasDefender(SceneObject* defender);

	/**
	 * Evaluates if this object can be attacket by the passed creature object
	 * @pre { this object is locked }
	 * @post { this object is locked}
	 * @return returns true if the creature object can attack this 
	 */
	bool isAttackableBy(CreatureObject* object);

	/**
	 * Evaluates if this creature is aggresive to the object
	 * @pre { }
	 * @post { }
	 * @return returns true if its aggressive
	 */
	bool isAggressiveTo(CreatureObject* object);

	bool isHealableBy(CreatureObject* object);

	/**
	 * Sends the pvp options bitmask
	 * @pre { this object is locked}
	 * @post { this object is locked }
	 */
	void sendPvpStatusTo(CreatureObject* player);

	/**
	 * Inflicts damage into the object
	 * @pre { attacker, this object is locked }
	 * @post { attacker, this object is locked }
	 * @return unused for now
	 */
	int inflictDamage(TangibleObject* attacker, int damageType, float damage, bool destroy, bool notifyClient = true);

	int inflictDamage(TangibleObject* attacker, int damageType, float damage, bool destroy, const String& xp, bool notifyClient = true);

	/**
	 * Heals damage
	 * @pre { this, healer locked }
	 * @post { this, healer locked }
	 * @return returns total health healed
	 */
	int healDamage(TangibleObject* healer, int damageType, float damageToHeal, bool notifyClient = true);

	/**
	 * Sets the condition damage variable
	 * @pre { this object is locked }
	 * @post { this object is locked }
	 * @param condDamage new condition damage
	 */
	void setConditionDamage(float condDamage, bool notifyClient = true);

	/**
	 * Updates a customization variable
	 */
	void setCustomizationVariable(byte type, short value, bool notifyClient = true);

	void setCustomizationVariable(const String& type, short value, bool notifyClient = true);

	void setOptionsBitmask(unsigned int bitmask, bool notifyClient = true);

	void updateCraftingValues(CraftingValues* values, bool firstUpdate);

	int notifyObjectDestructionObservers(TangibleObject* attacker, int condition);

	void dropFromDefenderLists(TangibleObject* destructor);

	byte getUnknownByte();

	bool isKiller();

	bool isTicketCollector();

	bool isTicketObject();

	CustomizationVariables* getCustomizationVariables();

	int getUseCount();

	int getDisplayedUseCount();

	int getMaxCondition();

	void setMaxCondition(int maxCond, bool notifyClient = true);

	int getConditionDamage();

	int getVolume();

	void setComplexity(float value);

	float getComplexity();

	unsigned int getOptionsBitmask();

	int getLevel();

	unsigned int getPvpStatusBitmask();

	bool isTangibleObject();

	void getCustomizationString(String& variables);

	DeltaVector<ManagedReference<SceneObject* > >* getDefenderList();

	SceneObject* getMainDefender();

	bool isDestroyed();

	void setFaction(unsigned int crc);

	unsigned int getFaction();

	bool isRebel();

	bool isImperial();

	bool isNeutral();

	bool isSliceable();

	bool isSliced();

	void setSliceable(bool val);

	void setSliced(bool slice);

	bool isPharmaceuticalObject();

	void setCustomizationString(const String& vars);

	void setPvpStatusBitmask(int bitmask, bool notifyClient = true);

	void setCraftersName(String& name);

	String getCraftersName();

	void setJunkDealerNeeded(int jdNeeded);

	int getJunkDealerNeeded();

	void setJunkValue(int jValue);

	int getJunkValue();

	void setSerialNumber(const String& serial);

	void setLevel(int lev);

	String getSerialNumber();

	ThreatMap* getThreatMap();

	Reference<FactoryCrate* > createFactoryCrate(bool insertSelf = false);

	bool canRepair(CreatureObject* player);

	void repair(CreatureObject* player);

	String repairAttempt(int repairChance);

	bool isBroken();

	float getHitChance();

	void broadcastPvpStatusBitmask();

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	TangibleObject(DummyConstructorParameter* param);

	virtual ~TangibleObject();

	friend class TangibleObjectHelper;
};

} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible;

namespace server {
namespace zone {
namespace objects {
namespace tangible {

class TangibleObjectImplementation : public SceneObjectImplementation {
protected:
	bool targetable;

	float complexity;

	int volume;

	unsigned int faction;

	CustomizationVariables customizationVariables;

	float conditionDamage;

	int maxCondition;

	int useCount;

	short level;

	unsigned int optionsBitmask;

	unsigned int pvpStatusBitmask;

	byte unknownByte;

	String craftersName;

	int junkDealerNeeded;

	int junkValue;

	String objectSerial;

	Reference<ThreatMap* > threatMap;

	DeltaVector<ManagedReference<SceneObject* > > defenderList;

	bool sliceable;

	bool sliced;

public:
	TangibleObjectImplementation();

	TangibleObjectImplementation(DummyConstructorParameter* param);

	void initializeMembers();

	/**
	 * Adds this object's skill mod map to the target object's skill mod map
	 * @param targetObject The targeted object containing the SkillModMap which will be affected.
	 */
	virtual void addTemplateSkillMods(TangibleObject* targetObject);

	virtual void applySkillModsTo(CreatureObject* creature, bool doCheck = true);

	virtual void removeSkillModsFrom(CreatureObject* creature);

	virtual void addSkillMod(const int skillType, const String& skillMod, int value, bool notifyClient = true);

	virtual void removeSkillMod(const int skillType, const String& skillMod, int value, bool notifyClient = true);

	virtual void removeAllSkillModsOfType(const int skillType, bool notifyClient = true);

	/**
	 * Removes this object's skill mod map from the target object's skill mod map
	 * @param targetObject the targeted object containing the SkillModMap which will be affected.
	 */
	virtual void removeTemplateSkillMods(TangibleObject* tangibleObject);

	VectorMap<String, int>* getTemplateSkillMods();

	/**
	 * Reads and sets the template data from a SharedTangibleObjectTemplate LuaObject
	 * @pre { templateData is a valid pointer }
	 * @post { TangibleObject members are initialized }
	 * @param templateData templateData points to the SharedTangibleObjectTemplate LuaObject that is used to initialize the TangibleObject members
	 */
	void loadTemplateData(SharedObjectTemplate* templateData);

	/**
	 * Initializes the transient members of SceneObject, must call the inherited object method first.
	 * @pre {transient members are not initialized }
	 * @post { transient members are initialized }
	 */
	void initializeTransientMembers();

	/**
	 * Updates the custom name of the object
	 * @pre { this locked }
	 * @post { this locked }
	 */
	void setCustomObjectName(const UnicodeString& name, bool notifyClient);

	/**
	 * Sends the TANO baseline messages of this object to the specified player
	 * @pre { this object is locked }
	 * @post { this object is locked, player received the baseline messages }
	 * @param player SceneObject that will receive the baselines 
	 */
	virtual void sendBaselinesTo(SceneObject* player);

	/**
	 * Calls the appropriate UI Listener Function
	 * @pre { this object is locked, object is locked }
	 * @post {this object is locked, object is locked }
	 * @param player CreatureObject using the item
	 * @param value value from packet
	 */
	virtual void synchronizedUIListen(SceneObject* player, int value);

	/**
	 * Calls the appropriate UI Stop Listener Function
	 * @pre { this object is locked, object is locked }
	 * @post {this object is locked, object is locked }
	 * @param player CreatureObject using the item
	 * @param value value from packet
	 */
	virtual void synchronizedUIStopListen(SceneObject* player, int value);

	/**
	 * Sets the active defender
	 * @pre { this object is locked }
	 * @post { this object is locked, defender is active }
	 * @param defender SceneObject to set as the active defender
	 */
	virtual void setDefender(SceneObject* defender);

	/**
	 * Adds a SceneObject to the defender vector
	 * @pre { this object is locked }
	 * @post { this object is locked, defender is in the defender vector }
	 * @param defender SceneObject to add to the defender vector
	 */
	virtual void addDefender(SceneObject* defender);

	/**
	 * Removes the specified defender from the defender vector
	 * @pre { this object is locked }
	 * @post { this object is locked, defender is not in the defender vector }
	 * @param defender SceneObject to remove from the defender vector
	 */
	virtual void removeDefender(SceneObject* defender);

	/**
	 * Removes all the defenders from the defender vector
	 * @pre { this object is locked }
	 * @post { this object is locked, defender vector is empty }
	 */
	virtual void removeDefenders();

	/**
	 * Sets the combat state, needs to be overriden
	 * @pre { this object is locked }
	 * @post { this object is locked, this object is in a combat state }
	 */
	virtual void setCombatState();

	/**
	 * Updates the object count delta
	 * @pre { this object is locked }
	 * @post { this object is locked }
	 * @param newUseCount new value to update
	 */
	virtual void setUseCount(unsigned int newUseCount, bool notifyClient = true);

	void setCountdownTimer(unsigned int newCount, bool notifyClient = true);

	/**
	 * Decreases use count, when reaches 0 destroys itself
	 */
	void decreaseUseCount();

	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	void fillAttributeList(AttributeListMessage* msg, CreatureObject* object);

	/**
	 * Cleares the combat state
	 * @pre { this object is locked }
	 * @post { this object is locked, this object is not in a combat state }
	 * @param clearDefenders if true the defender vector willl be emptied
	 */
	virtual void clearCombatState(bool clearDefenders = true);

	/**
	 * Evaluates if this object contains the specified defender
	 * @pre { this object is locked }
	 * @post { this object is locked }
	 * @return returns true if SceneObject defender exists in the defender vector
	 */
	bool hasDefender(SceneObject* defender);

	/**
	 * Evaluates if this object can be attacket by the passed creature object
	 * @pre { this object is locked }
	 * @post { this object is locked}
	 * @return returns true if the creature object can attack this 
	 */
	virtual bool isAttackableBy(CreatureObject* object);

	/**
	 * Evaluates if this creature is aggresive to the object
	 * @pre { }
	 * @post { }
	 * @return returns true if its aggressive
	 */
	virtual bool isAggressiveTo(CreatureObject* object);

	virtual bool isHealableBy(CreatureObject* object);

	/**
	 * Sends the pvp options bitmask
	 * @pre { this object is locked}
	 * @post { this object is locked }
	 */
	virtual void sendPvpStatusTo(CreatureObject* player);

	/**
	 * Inflicts damage into the object
	 * @pre { attacker, this object is locked }
	 * @post { attacker, this object is locked }
	 * @return unused for now
	 */
	virtual int inflictDamage(TangibleObject* attacker, int damageType, float damage, bool destroy, bool notifyClient = true);

	virtual int inflictDamage(TangibleObject* attacker, int damageType, float damage, bool destroy, const String& xp, bool notifyClient = true);

	/**
	 * Heals damage
	 * @pre { this, healer locked }
	 * @post { this, healer locked }
	 * @return returns total health healed
	 */
	virtual int healDamage(TangibleObject* healer, int damageType, float damageToHeal, bool notifyClient = true);

	/**
	 * Sets the condition damage variable
	 * @pre { this object is locked }
	 * @post { this object is locked }
	 * @param condDamage new condition damage
	 */
	void setConditionDamage(float condDamage, bool notifyClient = true);

	/**
	 * Updates a customization variable
	 */
	void setCustomizationVariable(byte type, short value, bool notifyClient = true);

	void setCustomizationVariable(const String& type, short value, bool notifyClient = true);

	void setOptionsBitmask(unsigned int bitmask, bool notifyClient = true);

	virtual void updateCraftingValues(CraftingValues* values, bool firstUpdate);

	virtual int notifyObjectDestructionObservers(TangibleObject* attacker, int condition);

	void dropFromDefenderLists(TangibleObject* destructor);

	byte getUnknownByte();

	virtual bool isKiller();

	virtual bool isTicketCollector();

	virtual bool isTicketObject();

	CustomizationVariables* getCustomizationVariables();

	virtual int getUseCount();

	virtual int getDisplayedUseCount();

	int getMaxCondition();

	void setMaxCondition(int maxCond, bool notifyClient = true);

	int getConditionDamage();

	int getVolume();

	void setComplexity(float value);

	float getComplexity();

	unsigned int getOptionsBitmask();

	int getLevel();

	unsigned int getPvpStatusBitmask();

	bool isTangibleObject();

	void getCustomizationString(String& variables);

	DeltaVector<ManagedReference<SceneObject* > >* getDefenderList();

	SceneObject* getMainDefender();

	bool isDestroyed();

	void setFaction(unsigned int crc);

	unsigned int getFaction();

	bool isRebel();

	bool isImperial();

	bool isNeutral();

	bool isSliceable();

	bool isSliced();

	void setSliceable(bool val);

	void setSliced(bool slice);

	virtual bool isPharmaceuticalObject();

	void setCustomizationString(const String& vars);

	void setPvpStatusBitmask(int bitmask, bool notifyClient = true);

	void setCraftersName(String& name);

	virtual String getCraftersName();

	void setJunkDealerNeeded(int jdNeeded);

	virtual int getJunkDealerNeeded();

	void setJunkValue(int jValue);

	virtual int getJunkValue();

	void setSerialNumber(const String& serial);

	virtual void setLevel(int lev);

	virtual String getSerialNumber();

	ThreatMap* getThreatMap();

	Reference<FactoryCrate* > createFactoryCrate(bool insertSelf = false);

	bool canRepair(CreatureObject* player);

	void repair(CreatureObject* player);

	virtual String repairAttempt(int repairChance);

	bool isBroken();

protected:
	float getConditionReduction(float value);

public:
	virtual float getHitChance();

	void broadcastPvpStatusBitmask();

	WeakReference<TangibleObject*> _this;

	operator const TangibleObject*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~TangibleObjectImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class TangibleObject;
};

class TangibleObjectAdapter : public SceneObjectAdapter {
public:
	TangibleObjectAdapter(TangibleObject* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initializeMembers();

	void applySkillModsTo(CreatureObject* creature, bool doCheck);

	void removeSkillModsFrom(CreatureObject* creature);

	void addSkillMod(const int skillType, const String& skillMod, int value, bool notifyClient);

	void removeSkillMod(const int skillType, const String& skillMod, int value, bool notifyClient);

	void removeAllSkillModsOfType(const int skillType, bool notifyClient);

	void initializeTransientMembers();

	void setCustomObjectName(const UnicodeString& name, bool notifyClient);

	void sendBaselinesTo(SceneObject* player);

	void synchronizedUIListen(SceneObject* player, int value);

	void synchronizedUIStopListen(SceneObject* player, int value);

	void setDefender(SceneObject* defender);

	void addDefender(SceneObject* defender);

	void removeDefender(SceneObject* defender);

	void removeDefenders();

	void setCombatState();

	void setUseCount(unsigned int newUseCount, bool notifyClient);

	void setCountdownTimer(unsigned int newCount, bool notifyClient);

	void decreaseUseCount();

	void clearCombatState(bool clearDefenders);

	bool hasDefender(SceneObject* defender);

	bool isAttackableBy(CreatureObject* object);

	bool isAggressiveTo(CreatureObject* object);

	bool isHealableBy(CreatureObject* object);

	void sendPvpStatusTo(CreatureObject* player);

	int inflictDamage(TangibleObject* attacker, int damageType, float damage, bool destroy, bool notifyClient);

	int inflictDamage(TangibleObject* attacker, int damageType, float damage, bool destroy, const String& xp, bool notifyClient);

	int healDamage(TangibleObject* healer, int damageType, float damageToHeal, bool notifyClient);

	void setConditionDamage(float condDamage, bool notifyClient);

	void setCustomizationVariable(byte type, short value, bool notifyClient);

	void setCustomizationVariable(const String& type, short value, bool notifyClient);

	void setOptionsBitmask(unsigned int bitmask, bool notifyClient);

	int notifyObjectDestructionObservers(TangibleObject* attacker, int condition);

	void dropFromDefenderLists(TangibleObject* destructor);

	byte getUnknownByte();

	bool isKiller();

	bool isTicketCollector();

	bool isTicketObject();

	int getUseCount();

	int getDisplayedUseCount();

	int getMaxCondition();

	void setMaxCondition(int maxCond, bool notifyClient);

	int getConditionDamage();

	int getVolume();

	void setComplexity(float value);

	float getComplexity();

	unsigned int getOptionsBitmask();

	int getLevel();

	unsigned int getPvpStatusBitmask();

	bool isTangibleObject();

	void getCustomizationString(String& variables);

	SceneObject* getMainDefender();

	bool isDestroyed();

	void setFaction(unsigned int crc);

	unsigned int getFaction();

	bool isRebel();

	bool isImperial();

	bool isNeutral();

	bool isSliceable();

	bool isSliced();

	void setSliceable(bool val);

	void setSliced(bool slice);

	bool isPharmaceuticalObject();

	void setCustomizationString(const String& vars);

	void setPvpStatusBitmask(int bitmask, bool notifyClient);

	void setCraftersName(String& name);

	String getCraftersName();

	void setJunkDealerNeeded(int jdNeeded);

	int getJunkDealerNeeded();

	void setJunkValue(int jValue);

	int getJunkValue();

	void setSerialNumber(const String& serial);

	void setLevel(int lev);

	String getSerialNumber();

	Reference<FactoryCrate* > createFactoryCrate(bool insertSelf);

	bool canRepair(CreatureObject* player);

	void repair(CreatureObject* player);

	String repairAttempt(int repairChance);

	bool isBroken();

	float getHitChance();

	void broadcastPvpStatusBitmask();

};

class TangibleObjectHelper : public DistributedObjectClassHelper, public Singleton<TangibleObjectHelper> {
	static TangibleObjectHelper* staticInitializer;

public:
	TangibleObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<TangibleObjectHelper>;
};

} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible;

#endif /*TANGIBLEOBJECT_H_*/
