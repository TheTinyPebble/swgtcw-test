/*
 *	server/zone/objects/tangible/terminal/travel/TravelTerminal.h generated by engine3 IDL compiler 0.60
 */

#ifndef TRAVELTERMINAL_H_
#define TRAVELTERMINAL_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {

class Zone;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace ticket {

class TicketObject;

} // namespace ticket
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::ticket;

namespace server {
namespace zone {
namespace managers {
namespace planet {

class PlanetManager;

} // namespace planet
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::planet;

namespace server {
namespace zone {
namespace objects {
namespace area {

class ActiveArea;

} // namespace area
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::area;

#include "server/zone/managers/planet/PlanetTravelPoint.h"

#include "server/zone/objects/tangible/terminal/Terminal.h"

#include "engine/lua/LuaObject.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace terminal {
namespace travel {

class TravelTerminal : public Terminal {
public:
	TravelTerminal();

	void initializeTransientMembers();

	void notifyInsertToZone(Zone* zone);

	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	PlanetTravelPoint* getPlanetTravelPoint();

	DistributedObjectServant* _getImplementation();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	TravelTerminal(DummyConstructorParameter* param);

	virtual ~TravelTerminal();

	friend class TravelTerminalHelper;
};

} // namespace travel
} // namespace terminal
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::terminal::travel;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace terminal {
namespace travel {

class TravelTerminalImplementation : public TerminalImplementation {
	Reference<PlanetTravelPoint* > planetTravelPoint;

public:
	TravelTerminalImplementation();

	TravelTerminalImplementation(DummyConstructorParameter* param);

	void initializeTransientMembers();

	void notifyInsertToZone(Zone* zone);

	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	PlanetTravelPoint* getPlanetTravelPoint();

	WeakReference<TravelTerminal*> _this;

	operator const TravelTerminal*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~TravelTerminalImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const String& name);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class TravelTerminal;
};

class TravelTerminalAdapter : public TerminalAdapter {
public:
	TravelTerminalAdapter(TravelTerminal* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initializeTransientMembers();

	void notifyInsertToZone(Zone* zone);

	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

};

class TravelTerminalHelper : public DistributedObjectClassHelper, public Singleton<TravelTerminalHelper> {
	static TravelTerminalHelper* staticInitializer;

public:
	TravelTerminalHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<TravelTerminalHelper>;
};

} // namespace travel
} // namespace terminal
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::terminal::travel;

#endif /*TRAVELTERMINAL_H_*/
