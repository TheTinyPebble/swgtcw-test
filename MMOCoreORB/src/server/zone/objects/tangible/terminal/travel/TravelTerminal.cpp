/*
 *	server/zone/objects/tangible/terminal/travel/TravelTerminal.cpp generated by engine3 IDL compiler 0.60
 */

#include "TravelTerminal.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/tangible/ticket/TicketObject.h"

#include "server/zone/managers/planet/PlanetManager.h"

#include "server/zone/objects/area/ActiveArea.h"

/*
 *	TravelTerminalStub
 */

enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 6,RPC_NOTIFYINSERTTOZONE__ZONE_,RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_,};

TravelTerminal::TravelTerminal() : Terminal(DummyConstructorParameter::instance()) {
	TravelTerminalImplementation* _implementation = new TravelTerminalImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("TravelTerminal");
}

TravelTerminal::TravelTerminal(DummyConstructorParameter* param) : Terminal(param) {
	_setClassName("TravelTerminal");
}

TravelTerminal::~TravelTerminal() {
}



void TravelTerminal::initializeTransientMembers() {
	TravelTerminalImplementation* _implementation = static_cast<TravelTerminalImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void TravelTerminal::notifyInsertToZone(Zone* zone) {
	TravelTerminalImplementation* _implementation = static_cast<TravelTerminalImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYINSERTTOZONE__ZONE_);
		method.addObjectParameter(zone);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyInsertToZone(zone);
}

int TravelTerminal::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	TravelTerminalImplementation* _implementation = static_cast<TravelTerminalImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->handleObjectMenuSelect(player, selectedID);
}

PlanetTravelPoint* TravelTerminal::getPlanetTravelPoint() {
	TravelTerminalImplementation* _implementation = static_cast<TravelTerminalImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getPlanetTravelPoint();
}

DistributedObjectServant* TravelTerminal::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

void TravelTerminal::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	TravelTerminalImplementation
 */

TravelTerminalImplementation::TravelTerminalImplementation(DummyConstructorParameter* param) : TerminalImplementation(param) {
	_initializeImplementation();
}


TravelTerminalImplementation::~TravelTerminalImplementation() {
}


void TravelTerminalImplementation::finalize() {
}

void TravelTerminalImplementation::_initializeImplementation() {
	_setClassHelper(TravelTerminalHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void TravelTerminalImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<TravelTerminal*>(stub);
	TerminalImplementation::_setStub(stub);
}

DistributedObjectStub* TravelTerminalImplementation::_getStub() {
	return _this.get();
}

TravelTerminalImplementation::operator const TravelTerminal*() {
	return _this.get();
}

void TravelTerminalImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void TravelTerminalImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void TravelTerminalImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void TravelTerminalImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void TravelTerminalImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void TravelTerminalImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void TravelTerminalImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void TravelTerminalImplementation::_serializationHelperMethod() {
	TerminalImplementation::_serializationHelperMethod();

	_setClassName("TravelTerminal");

}

void TravelTerminalImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(TravelTerminalImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool TravelTerminalImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (TerminalImplementation::readObjectMember(stream, _name))
		return true;


	return false;
}

void TravelTerminalImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = TravelTerminalImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int TravelTerminalImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = TerminalImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;

	return _count + 0;
}

TravelTerminalImplementation::TravelTerminalImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/terminal/travel/TravelTerminal.idl():  		Logger.setLoggingName("TravelTerminal");
	Logger::setLoggingName("TravelTerminal");
	// server/zone/objects/tangible/terminal/travel/TravelTerminal.idl():  		planetTravelPoint == null;
	planetTravelPoint == NULL;
}

void TravelTerminalImplementation::initializeTransientMembers() {
	// server/zone/objects/tangible/terminal/travel/TravelTerminal.idl():  		super.initializeTransientMembers();
	TerminalImplementation::initializeTransientMembers();
	// server/zone/objects/tangible/terminal/travel/TravelTerminal.idl():  		Logger.setLoggingName("TravelTerminal");
	Logger::setLoggingName("TravelTerminal");
}

PlanetTravelPoint* TravelTerminalImplementation::getPlanetTravelPoint() {
	// server/zone/objects/tangible/terminal/travel/TravelTerminal.idl():  		planetTravelPoint 
	if (planetTravelPoint != NULL)	// server/zone/objects/tangible/terminal/travel/TravelTerminal.idl():  		 return planetTravelPoint;
	return planetTravelPoint;
	// server/zone/objects/tangible/terminal/travel/TravelTerminal.idl():  		planetTravelPoint = getZone().getPlanetManager().getNearestPlanetTravelPoint(this);
	planetTravelPoint = getZone()->getPlanetManager()->getNearestPlanetTravelPoint(_this.get());
	// server/zone/objects/tangible/terminal/travel/TravelTerminal.idl():  		return planetTravelPoint;
	return planetTravelPoint;
}

/*
 *	TravelTerminalAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


TravelTerminalAdapter::TravelTerminalAdapter(TravelTerminal* obj) : TerminalAdapter(obj) {
}

void TravelTerminalAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			initializeTransientMembers();
		}
		break;
	case RPC_NOTIFYINSERTTOZONE__ZONE_:
		{
			notifyInsertToZone(static_cast<Zone*>(inv->getObjectParameter()));
		}
		break;
	case RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_:
		{
			resp->insertSignedInt(handleObjectMenuSelect(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getByteParameter()));
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void TravelTerminalAdapter::initializeTransientMembers() {
	(static_cast<TravelTerminal*>(stub))->initializeTransientMembers();
}

void TravelTerminalAdapter::notifyInsertToZone(Zone* zone) {
	(static_cast<TravelTerminal*>(stub))->notifyInsertToZone(zone);
}

int TravelTerminalAdapter::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	return (static_cast<TravelTerminal*>(stub))->handleObjectMenuSelect(player, selectedID);
}

/*
 *	TravelTerminalHelper
 */

TravelTerminalHelper* TravelTerminalHelper::staticInitializer = TravelTerminalHelper::instance();

TravelTerminalHelper::TravelTerminalHelper() {
	className = "TravelTerminal";

	Core::getObjectBroker()->registerClass(className, this);
}

void TravelTerminalHelper::finalizeHelper() {
	TravelTerminalHelper::finalize();
}

DistributedObject* TravelTerminalHelper::instantiateObject() {
	return new TravelTerminal(DummyConstructorParameter::instance());
}

DistributedObjectServant* TravelTerminalHelper::instantiateServant() {
	return new TravelTerminalImplementation();
}

DistributedObjectAdapter* TravelTerminalHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new TravelTerminalAdapter(static_cast<TravelTerminal*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

