/*
 *	server/zone/objects/tangible/terminal/bazaar/BazaarTerminal.h generated by engine3 IDL compiler 0.60
 */

#ifndef BAZAARTERMINAL_H_
#define BAZAARTERMINAL_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "server/zone/objects/tangible/terminal/Terminal.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace terminal {
namespace bazaar {

class BazaarTerminal : public Terminal {
public:
	BazaarTerminal();

	bool isBazaarTerminal();

	DistributedObjectServant* _getImplementation();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	BazaarTerminal(DummyConstructorParameter* param);

	virtual ~BazaarTerminal();

	friend class BazaarTerminalHelper;
};

} // namespace bazaar
} // namespace terminal
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::terminal::bazaar;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace terminal {
namespace bazaar {

class BazaarTerminalImplementation : public TerminalImplementation {

public:
	BazaarTerminalImplementation();

	BazaarTerminalImplementation(DummyConstructorParameter* param);

	virtual bool isBazaarTerminal();

	WeakReference<BazaarTerminal*> _this;

	operator const BazaarTerminal*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~BazaarTerminalImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const String& name);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class BazaarTerminal;
};

class BazaarTerminalAdapter : public TerminalAdapter {
public:
	BazaarTerminalAdapter(BazaarTerminal* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	bool isBazaarTerminal();

};

class BazaarTerminalHelper : public DistributedObjectClassHelper, public Singleton<BazaarTerminalHelper> {
	static BazaarTerminalHelper* staticInitializer;

public:
	BazaarTerminalHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<BazaarTerminalHelper>;
};

} // namespace bazaar
} // namespace terminal
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::terminal::bazaar;

#endif /*BAZAARTERMINAL_H_*/
