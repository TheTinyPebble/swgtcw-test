/*
 *	server/zone/objects/tangible/terminal/vendor/VendorTerminal.cpp generated by engine3 IDL compiler 0.55
 */

#include "VendorTerminal.h"

#include "VendorTerminalImplementation.h"

#include "server/zone/managers/bazaar/BazaarManager.h"

#include "../../../player/Player.h"

#include "../Terminal.h"

/*
 *	VendorTerminalStub
 */

VendorTerminal::VendorTerminal(BazaarManager* bazaarmanager, unsigned long long objid, float x, float z, float y) : Terminal(DummyConstructorParameter::instance()) {
	_impl = new VendorTerminalImplementation(bazaarmanager, objid, x, z, y);
	_impl->_setStub(this);
}

VendorTerminal::VendorTerminal(DummyConstructorParameter* param) : Terminal(param) {
}

VendorTerminal::~VendorTerminal() {
}

int VendorTerminal::useObject(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return ((VendorTerminalImplementation*) _impl)->useObject(player);
}

/*
 *	VendorTerminalAdapter
 */

VendorTerminalAdapter::VendorTerminalAdapter(VendorTerminalImplementation* obj) : TerminalAdapter(obj) {
}

Packet* VendorTerminalAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertSignedInt(useObject((Player*) inv->getObjectParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

int VendorTerminalAdapter::useObject(Player* player) {
	return ((VendorTerminalImplementation*) impl)->useObject(player);
}

/*
 *	VendorTerminalHelper
 */

VendorTerminalHelper* VendorTerminalHelper::staticInitializer = VendorTerminalHelper::instance();

VendorTerminalHelper::VendorTerminalHelper() {
	className = "VendorTerminal";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void VendorTerminalHelper::finalizeHelper() {
	VendorTerminalHelper::finalize();
}

DistributedObject* VendorTerminalHelper::instantiateObject() {
	return new VendorTerminal(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* VendorTerminalHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new VendorTerminalAdapter((VendorTerminalImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	VendorTerminalServant
 */

VendorTerminalServant::VendorTerminalServant(unsigned int objCRC, unsigned long long objid, const UnicodeString& n, const String& tempn, float x, float z, float y, unsigned char terminaltype) : TerminalImplementation(objCRC, objid, n, tempn, x, z, y, terminaltype) {
	_classHelper = VendorTerminalHelper::instance();
}

VendorTerminalServant::~VendorTerminalServant() {
}

void VendorTerminalServant::_setStub(DistributedObjectStub* stub) {
	_this = (VendorTerminal*) stub;
	TerminalServant::_setStub(stub);
}

DistributedObjectStub* VendorTerminalServant::_getStub() {
	return _this;
}

