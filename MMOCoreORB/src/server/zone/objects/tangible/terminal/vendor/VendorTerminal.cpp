/*
 *	server/zone/objects/tangible/terminal/vendor/VendorTerminal.cpp generated by engine3 IDL compiler 0.60
 */

#include "VendorTerminal.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/managers/planet/PlanetManager.h"

#include "server/zone/objects/area/ActiveArea.h"

/*
 *	VendorTerminalStub
 */

enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 6,RPC_FINALIZE__,RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_,RPC_DESTROYOBJECTFROMDATABASE__BOOL_,RPC_ADDVENDORTOMAP__,RPC_SETOWNERID__LONG_,RPC_ISVENDOR__,RPC_ISVENDORTERMINAL__};

VendorTerminal::VendorTerminal() : Terminal(DummyConstructorParameter::instance()) {
	VendorTerminalImplementation* _implementation = new VendorTerminalImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("VendorTerminal");
}

VendorTerminal::VendorTerminal(DummyConstructorParameter* param) : Terminal(param) {
	_setClassName("VendorTerminal");
}

VendorTerminal::~VendorTerminal() {
}



void VendorTerminal::initializeTransientMembers() {
	VendorTerminalImplementation* _implementation = static_cast<VendorTerminalImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void VendorTerminal::loadTemplateData(SharedObjectTemplate* templateData) {
	VendorTerminalImplementation* _implementation = static_cast<VendorTerminalImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->loadTemplateData(templateData);
}

void VendorTerminal::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player) {
	VendorTerminalImplementation* _implementation = static_cast<VendorTerminalImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->fillObjectMenuResponse(menuResponse, player);
}

int VendorTerminal::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	VendorTerminalImplementation* _implementation = static_cast<VendorTerminalImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->handleObjectMenuSelect(player, selectedID);
}

void VendorTerminal::destroyObjectFromDatabase(bool destroyContainedObjects) {
	VendorTerminalImplementation* _implementation = static_cast<VendorTerminalImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DESTROYOBJECTFROMDATABASE__BOOL_);
		method.addBooleanParameter(destroyContainedObjects);

		method.executeWithVoidReturn();
	} else
		_implementation->destroyObjectFromDatabase(destroyContainedObjects);
}

void VendorTerminal::addVendorToMap() {
	VendorTerminalImplementation* _implementation = static_cast<VendorTerminalImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDVENDORTOMAP__);

		method.executeWithVoidReturn();
	} else
		_implementation->addVendorToMap();
}

void VendorTerminal::setOwnerID(unsigned long long ownerID) {
	VendorTerminalImplementation* _implementation = static_cast<VendorTerminalImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETOWNERID__LONG_);
		method.addUnsignedLongParameter(ownerID);

		method.executeWithVoidReturn();
	} else
		_implementation->setOwnerID(ownerID);
}

Vendor* VendorTerminal::getVendor() {
	VendorTerminalImplementation* _implementation = static_cast<VendorTerminalImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getVendor();
}

bool VendorTerminal::isVendor() {
	VendorTerminalImplementation* _implementation = static_cast<VendorTerminalImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISVENDOR__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isVendor();
}

bool VendorTerminal::isVendorTerminal() {
	VendorTerminalImplementation* _implementation = static_cast<VendorTerminalImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISVENDORTERMINAL__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isVendorTerminal();
}

DistributedObjectServant* VendorTerminal::_getImplementation() {

	_updated = true;
	return _impl;
}

void VendorTerminal::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	VendorTerminalImplementation
 */

VendorTerminalImplementation::VendorTerminalImplementation(DummyConstructorParameter* param) : TerminalImplementation(param) {
	_initializeImplementation();
}


VendorTerminalImplementation::~VendorTerminalImplementation() {
	VendorTerminalImplementation::finalize();
}


void VendorTerminalImplementation::_initializeImplementation() {
	_setClassHelper(VendorTerminalHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void VendorTerminalImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<VendorTerminal*>(stub);
	TerminalImplementation::_setStub(stub);
}

DistributedObjectStub* VendorTerminalImplementation::_getStub() {
	return _this.get();
}

VendorTerminalImplementation::operator const VendorTerminal*() {
	return _this.get();
}

void VendorTerminalImplementation::lock(bool doLock) {
	_this.get()->lock(doLock);
}

void VendorTerminalImplementation::lock(ManagedObject* obj) {
	_this.get()->lock(obj);
}

void VendorTerminalImplementation::rlock(bool doLock) {
	_this.get()->rlock(doLock);
}

void VendorTerminalImplementation::wlock(bool doLock) {
	_this.get()->wlock(doLock);
}

void VendorTerminalImplementation::wlock(ManagedObject* obj) {
	_this.get()->wlock(obj);
}

void VendorTerminalImplementation::unlock(bool doLock) {
	_this.get()->unlock(doLock);
}

void VendorTerminalImplementation::runlock(bool doLock) {
	_this.get()->runlock(doLock);
}

void VendorTerminalImplementation::_serializationHelperMethod() {
	TerminalImplementation::_serializationHelperMethod();

	_setClassName("VendorTerminal");

}

void VendorTerminalImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(VendorTerminalImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool VendorTerminalImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (TerminalImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "VendorTerminal.vendor") {
		TypeInfo<Vendor >::parseFromBinaryStream(&vendor, stream);
		return true;
	}


	return false;
}

void VendorTerminalImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = VendorTerminalImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int VendorTerminalImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = TerminalImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;
	_name = "VendorTerminal.vendor";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vendor >::toBinaryStream(&vendor, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 1;
}

VendorTerminalImplementation::VendorTerminalImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/terminal/vendor/VendorTerminal.idl():  		Logger.setLoggingName("VendorTerminal");
	Logger::setLoggingName("VendorTerminal");
	// server/zone/objects/tangible/terminal/vendor/VendorTerminal.idl():  		storedOid = 0;
	storedOid = 0;
	// server/zone/objects/tangible/terminal/vendor/VendorTerminal.idl():  		super.getContainerPermissions().setInheritPermissionsFromParent(false);
	TerminalImplementation::getContainerPermissions()->setInheritPermissionsFromParent(false);
}

void VendorTerminalImplementation::setOwnerID(unsigned long long ownerID) {
	// server/zone/objects/tangible/terminal/vendor/VendorTerminal.idl():  		vendor.setOwnerID(ownerID);
	(&vendor)->setOwnerID(ownerID);
}

Vendor* VendorTerminalImplementation::getVendor() {
	// server/zone/objects/tangible/terminal/vendor/VendorTerminal.idl():  		return vendor;
	return (&vendor);
}

bool VendorTerminalImplementation::isVendor() {
	// server/zone/objects/tangible/terminal/vendor/VendorTerminal.idl():  		return true;
	return true;
}

bool VendorTerminalImplementation::isVendorTerminal() {
	// server/zone/objects/tangible/terminal/vendor/VendorTerminal.idl():  		return true;
	return true;
}

/*
 *	VendorTerminalAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


VendorTerminalAdapter::VendorTerminalAdapter(VendorTerminal* obj) : TerminalAdapter(obj) {
}

void VendorTerminalAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			initializeTransientMembers();
		}
		break;
	case RPC_FINALIZE__:
		{
			finalize();
		}
		break;
	case RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_:
		{
			resp->insertSignedInt(handleObjectMenuSelect(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getByteParameter()));
		}
		break;
	case RPC_DESTROYOBJECTFROMDATABASE__BOOL_:
		{
			destroyObjectFromDatabase(inv->getBooleanParameter());
		}
		break;
	case RPC_ADDVENDORTOMAP__:
		{
			addVendorToMap();
		}
		break;
	case RPC_SETOWNERID__LONG_:
		{
			setOwnerID(inv->getUnsignedLongParameter());
		}
		break;
	case RPC_ISVENDOR__:
		{
			resp->insertBoolean(isVendor());
		}
		break;
	case RPC_ISVENDORTERMINAL__:
		{
			resp->insertBoolean(isVendorTerminal());
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void VendorTerminalAdapter::initializeTransientMembers() {
	(static_cast<VendorTerminal*>(stub))->initializeTransientMembers();
}

void VendorTerminalAdapter::finalize() {
	(static_cast<VendorTerminal*>(stub))->finalize();
}

int VendorTerminalAdapter::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	return (static_cast<VendorTerminal*>(stub))->handleObjectMenuSelect(player, selectedID);
}

void VendorTerminalAdapter::destroyObjectFromDatabase(bool destroyContainedObjects) {
	(static_cast<VendorTerminal*>(stub))->destroyObjectFromDatabase(destroyContainedObjects);
}

void VendorTerminalAdapter::addVendorToMap() {
	(static_cast<VendorTerminal*>(stub))->addVendorToMap();
}

void VendorTerminalAdapter::setOwnerID(unsigned long long ownerID) {
	(static_cast<VendorTerminal*>(stub))->setOwnerID(ownerID);
}

bool VendorTerminalAdapter::isVendor() {
	return (static_cast<VendorTerminal*>(stub))->isVendor();
}

bool VendorTerminalAdapter::isVendorTerminal() {
	return (static_cast<VendorTerminal*>(stub))->isVendorTerminal();
}

/*
 *	VendorTerminalHelper
 */

VendorTerminalHelper* VendorTerminalHelper::staticInitializer = VendorTerminalHelper::instance();

VendorTerminalHelper::VendorTerminalHelper() {
	className = "VendorTerminal";

	Core::getObjectBroker()->registerClass(className, this);
}

void VendorTerminalHelper::finalizeHelper() {
	VendorTerminalHelper::finalize();
}

DistributedObject* VendorTerminalHelper::instantiateObject() {
	return new VendorTerminal(DummyConstructorParameter::instance());
}

DistributedObjectServant* VendorTerminalHelper::instantiateServant() {
	return new VendorTerminalImplementation();
}

DistributedObjectAdapter* VendorTerminalHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new VendorTerminalAdapter(static_cast<VendorTerminal*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

