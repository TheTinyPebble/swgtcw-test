/*
 *	server/zone/objects/tangible/terminal/Terminal.cpp generated by engine3 IDL compiler 0.55
 */

#include "Terminal.h"

#include "TerminalImplementation.h"

#include "../../player/Player.h"

#include "../TangibleObject.h"

/*
 *	TerminalStub
 */

Terminal::Terminal(unsigned int objCRC, unsigned long long oid, const UnicodeString& n, const String& tempn, float x, float z, float y, unsigned char terminaltype) : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new TerminalImplementation(objCRC, oid, n, tempn, x, z, y, terminaltype);
	_impl->_setStub(this);
}

Terminal::Terminal(DummyConstructorParameter* param) : TangibleObject(param) {
}

Terminal::~Terminal() {
}

int Terminal::useObject(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return ((TerminalImplementation*) _impl)->useObject(player);
}

unsigned char Terminal::getTerminalType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		return method.executeWithUnsignedCharReturn();
	} else
		return ((TerminalImplementation*) _impl)->getTerminalType();
}

bool Terminal::isTravelTerminal() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		return method.executeWithBooleanReturn();
	} else
		return ((TerminalImplementation*) _impl)->isTravelTerminal();
}

bool Terminal::isGuildTerminal() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return method.executeWithBooleanReturn();
	} else
		return ((TerminalImplementation*) _impl)->isGuildTerminal();
}

bool Terminal::isMissionTerminal() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		return method.executeWithBooleanReturn();
	} else
		return ((TerminalImplementation*) _impl)->isMissionTerminal();
}

bool Terminal::isCloningTerminal() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		return method.executeWithBooleanReturn();
	} else
		return ((TerminalImplementation*) _impl)->isCloningTerminal();
}

bool Terminal::isInsuranceTerminal() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		return method.executeWithBooleanReturn();
	} else
		return ((TerminalImplementation*) _impl)->isInsuranceTerminal();
}

bool Terminal::isBazaarTerminal() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		return method.executeWithBooleanReturn();
	} else
		return ((TerminalImplementation*) _impl)->isBazaarTerminal();
}

bool Terminal::isBankTerminal() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		return method.executeWithBooleanReturn();
	} else
		return ((TerminalImplementation*) _impl)->isBankTerminal();
}

bool Terminal::isStartingLocationTerminal() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		return method.executeWithBooleanReturn();
	} else
		return ((TerminalImplementation*) _impl)->isStartingLocationTerminal();
}

bool Terminal::isPlayerStructureTerminal() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		return method.executeWithBooleanReturn();
	} else
		return ((TerminalImplementation*) _impl)->isPlayerStructureTerminal();
}

/*
 *	TerminalAdapter
 */

TerminalAdapter::TerminalAdapter(TerminalImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* TerminalAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertSignedInt(useObject((Player*) inv->getObjectParameter()));
		break;
	case 7:
		resp->insertByte(getTerminalType());
		break;
	case 8:
		resp->insertBoolean(isTravelTerminal());
		break;
	case 9:
		resp->insertBoolean(isGuildTerminal());
		break;
	case 10:
		resp->insertBoolean(isMissionTerminal());
		break;
	case 11:
		resp->insertBoolean(isCloningTerminal());
		break;
	case 12:
		resp->insertBoolean(isInsuranceTerminal());
		break;
	case 13:
		resp->insertBoolean(isBazaarTerminal());
		break;
	case 14:
		resp->insertBoolean(isBankTerminal());
		break;
	case 15:
		resp->insertBoolean(isStartingLocationTerminal());
		break;
	case 16:
		resp->insertBoolean(isPlayerStructureTerminal());
		break;
	default:
		return NULL;
	}

	return resp;
}

int TerminalAdapter::useObject(Player* player) {
	return ((TerminalImplementation*) impl)->useObject(player);
}

unsigned char TerminalAdapter::getTerminalType() {
	return ((TerminalImplementation*) impl)->getTerminalType();
}

bool TerminalAdapter::isTravelTerminal() {
	return ((TerminalImplementation*) impl)->isTravelTerminal();
}

bool TerminalAdapter::isGuildTerminal() {
	return ((TerminalImplementation*) impl)->isGuildTerminal();
}

bool TerminalAdapter::isMissionTerminal() {
	return ((TerminalImplementation*) impl)->isMissionTerminal();
}

bool TerminalAdapter::isCloningTerminal() {
	return ((TerminalImplementation*) impl)->isCloningTerminal();
}

bool TerminalAdapter::isInsuranceTerminal() {
	return ((TerminalImplementation*) impl)->isInsuranceTerminal();
}

bool TerminalAdapter::isBazaarTerminal() {
	return ((TerminalImplementation*) impl)->isBazaarTerminal();
}

bool TerminalAdapter::isBankTerminal() {
	return ((TerminalImplementation*) impl)->isBankTerminal();
}

bool TerminalAdapter::isStartingLocationTerminal() {
	return ((TerminalImplementation*) impl)->isStartingLocationTerminal();
}

bool TerminalAdapter::isPlayerStructureTerminal() {
	return ((TerminalImplementation*) impl)->isPlayerStructureTerminal();
}

/*
 *	TerminalHelper
 */

TerminalHelper* TerminalHelper::staticInitializer = TerminalHelper::instance();

TerminalHelper::TerminalHelper() {
	className = "Terminal";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void TerminalHelper::finalizeHelper() {
	TerminalHelper::finalize();
}

DistributedObject* TerminalHelper::instantiateObject() {
	return new Terminal(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* TerminalHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new TerminalAdapter((TerminalImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	TerminalServant
 */

TerminalServant::TerminalServant(unsigned long long oid, int tp) : TangibleObjectImplementation(oid, tp) {
	_classHelper = TerminalHelper::instance();
}

TerminalServant::~TerminalServant() {
}

void TerminalServant::_setStub(DistributedObjectStub* stub) {
	_this = (Terminal*) stub;
	TangibleObjectServant::_setStub(stub);
}

DistributedObjectStub* TerminalServant::_getStub() {
	return _this;
}

