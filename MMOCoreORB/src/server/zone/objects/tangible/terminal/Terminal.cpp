/*
 *	server/zone/objects/tangible/terminal/Terminal.cpp generated by engine3 IDL compiler 0.60
 */

#include "Terminal.h"

/*
 *	TerminalStub
 */

Terminal::Terminal(LuaObject* templateData) : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new TerminalImplementation(templateData);
	_impl->_setStub(this);

	((TerminalImplementation*) _impl)->_serializationHelperMethod();
}

Terminal::Terminal(DummyConstructorParameter* param) : TangibleObject(param) {
}

Terminal::~Terminal() {
}

/*
 *	TerminalImplementation
 */

TerminalImplementation::~TerminalImplementation() {
}

void TerminalImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (Terminal*) stub;
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* TerminalImplementation::_getStub() {
	return _this;
}

TerminalImplementation::operator const Terminal*() {
	return _this;
}

void TerminalImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

}

/*
 *	TerminalAdapter
 */

TerminalAdapter::TerminalAdapter(TerminalImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* TerminalAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	default:
		return NULL;
	}

	return resp;
}

/*
 *	TerminalHelper
 */

TerminalHelper* TerminalHelper::staticInitializer = TerminalHelper::instance();

TerminalHelper::TerminalHelper() {
	className = "Terminal";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void TerminalHelper::finalizeHelper() {
	TerminalHelper::finalize();
}

DistributedObject* TerminalHelper::instantiateObject() {
	return new Terminal(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* TerminalHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new TerminalAdapter((TerminalImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

