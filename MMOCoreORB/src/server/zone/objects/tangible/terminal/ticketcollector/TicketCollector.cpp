/*
 *	server/zone/objects/tangible/terminal/ticketcollector/TicketCollector.cpp generated by engine3 IDL compiler 0.60
 */

#include "TicketCollector.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/tangible/ticket/TicketObject.h"

#include "server/zone/objects/creature/shuttle/ShuttleCreature.h"

/*
 *	TicketCollectorStub
 */

TicketCollector::TicketCollector() : Terminal(DummyConstructorParameter::instance()) {
	TicketCollectorImplementation* _implementation = new TicketCollectorImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

TicketCollector::TicketCollector(DummyConstructorParameter* param) : Terminal(param) {
}

TicketCollector::~TicketCollector() {
}


void TicketCollector::initializeTransientMembers() {
	TicketCollectorImplementation* _implementation = (TicketCollectorImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

int TicketCollector::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	TicketCollectorImplementation* _implementation = (TicketCollectorImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->handleObjectMenuSelect(player, selectedID);
}

void TicketCollector::useTicket(PlayerCreature* player, TicketObject* ticket) {
	TicketCollectorImplementation* _implementation = (TicketCollectorImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(player);
		method.addObjectParameter(ticket);

		method.executeWithVoidReturn();
	} else
		_implementation->useTicket(player, ticket);
}

bool TicketCollector::checkTime(ShuttleCreature* shuttle, PlayerCreature* player) {
	TicketCollectorImplementation* _implementation = (TicketCollectorImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(shuttle);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->checkTime(shuttle, player);
}

bool TicketCollector::isTicketCollector() {
	TicketCollectorImplementation* _implementation = (TicketCollectorImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isTicketCollector();
}

void TicketCollector::setShuttle(ShuttleCreature* shut) {
	TicketCollectorImplementation* _implementation = (TicketCollectorImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addObjectParameter(shut);

		method.executeWithVoidReturn();
	} else
		_implementation->setShuttle(shut);
}

DistributedObjectServant* TicketCollector::_getImplementation() {

	_updated = true;
	return _impl;
}

void TicketCollector::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	TicketCollectorImplementation
 */

TicketCollectorImplementation::TicketCollectorImplementation(DummyConstructorParameter* param) : TerminalImplementation(param) {
	_initializeImplementation();
}


TicketCollectorImplementation::~TicketCollectorImplementation() {
}


void TicketCollectorImplementation::finalize() {
}

void TicketCollectorImplementation::_initializeImplementation() {
	_setClassHelper(TicketCollectorHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void TicketCollectorImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (TicketCollector*) stub;
	TerminalImplementation::_setStub(stub);
}

DistributedObjectStub* TicketCollectorImplementation::_getStub() {
	return _this;
}

TicketCollectorImplementation::operator const TicketCollector*() {
	return _this;
}

void TicketCollectorImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void TicketCollectorImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void TicketCollectorImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void TicketCollectorImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void TicketCollectorImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void TicketCollectorImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void TicketCollectorImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void TicketCollectorImplementation::_serializationHelperMethod() {
	TerminalImplementation::_serializationHelperMethod();

	_setClassName("TicketCollector");

}

void TicketCollectorImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(TicketCollectorImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool TicketCollectorImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (TerminalImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "shuttle") {
		TypeInfo<ManagedReference<ShuttleCreature* > >::parseFromBinaryStream(&shuttle, stream);
		return true;
	}


	return false;
}

void TicketCollectorImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = TicketCollectorImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int TicketCollectorImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "shuttle";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<ShuttleCreature* > >::toBinaryStream(&shuttle, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 1 + TerminalImplementation::writeObjectMembers(stream);
}

TicketCollectorImplementation::TicketCollectorImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/terminal/ticketcollector/TicketCollector.idl():  		Logger.setLoggingName("TicketCollector");
	Logger::setLoggingName("TicketCollector");
}

void TicketCollectorImplementation::initializeTransientMembers() {
	// server/zone/objects/tangible/terminal/ticketcollector/TicketCollector.idl():  		super.initializeTransientMembers();
	TerminalImplementation::initializeTransientMembers();
	// server/zone/objects/tangible/terminal/ticketcollector/TicketCollector.idl():  		Logger.setLoggingName("TicketCollector");
	Logger::setLoggingName("TicketCollector");
}

bool TicketCollectorImplementation::isTicketCollector() {
	// server/zone/objects/tangible/terminal/ticketcollector/TicketCollector.idl():  		return true;
	return true;
}

void TicketCollectorImplementation::setShuttle(ShuttleCreature* shut) {
	// server/zone/objects/tangible/terminal/ticketcollector/TicketCollector.idl():  		shuttle = shut;
	shuttle = shut;
}

/*
 *	TicketCollectorAdapter
 */

TicketCollectorAdapter::TicketCollectorAdapter(TicketCollectorImplementation* obj) : TerminalAdapter(obj) {
}

enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 6,RPC_HANDLEOBJECTMENUSELECT__PLAYERCREATURE_BYTE_,RPC_USETICKET__PLAYERCREATURE_TICKETOBJECT_,RPC_CHECKTIME__SHUTTLECREATURE_PLAYERCREATURE_,RPC_ISTICKETCOLLECTOR__,RPC_SETSHUTTLE__SHUTTLECREATURE_};

Packet* TicketCollectorAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		initializeTransientMembers();
		break;
	case RPC_HANDLEOBJECTMENUSELECT__PLAYERCREATURE_BYTE_:
		resp->insertSignedInt(handleObjectMenuSelect((PlayerCreature*) inv->getObjectParameter(), inv->getByteParameter()));
		break;
	case RPC_USETICKET__PLAYERCREATURE_TICKETOBJECT_:
		useTicket((PlayerCreature*) inv->getObjectParameter(), (TicketObject*) inv->getObjectParameter());
		break;
	case RPC_CHECKTIME__SHUTTLECREATURE_PLAYERCREATURE_:
		resp->insertBoolean(checkTime((ShuttleCreature*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter()));
		break;
	case RPC_ISTICKETCOLLECTOR__:
		resp->insertBoolean(isTicketCollector());
		break;
	case RPC_SETSHUTTLE__SHUTTLECREATURE_:
		setShuttle((ShuttleCreature*) inv->getObjectParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void TicketCollectorAdapter::initializeTransientMembers() {
	((TicketCollectorImplementation*) impl)->initializeTransientMembers();
}

int TicketCollectorAdapter::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	return ((TicketCollectorImplementation*) impl)->handleObjectMenuSelect(player, selectedID);
}

void TicketCollectorAdapter::useTicket(PlayerCreature* player, TicketObject* ticket) {
	((TicketCollectorImplementation*) impl)->useTicket(player, ticket);
}

bool TicketCollectorAdapter::checkTime(ShuttleCreature* shuttle, PlayerCreature* player) {
	return ((TicketCollectorImplementation*) impl)->checkTime(shuttle, player);
}

bool TicketCollectorAdapter::isTicketCollector() {
	return ((TicketCollectorImplementation*) impl)->isTicketCollector();
}

void TicketCollectorAdapter::setShuttle(ShuttleCreature* shut) {
	((TicketCollectorImplementation*) impl)->setShuttle(shut);
}

/*
 *	TicketCollectorHelper
 */

TicketCollectorHelper* TicketCollectorHelper::staticInitializer = TicketCollectorHelper::instance();

TicketCollectorHelper::TicketCollectorHelper() {
	className = "TicketCollector";

	Core::getObjectBroker()->registerClass(className, this);
}

void TicketCollectorHelper::finalizeHelper() {
	TicketCollectorHelper::finalize();
}

DistributedObject* TicketCollectorHelper::instantiateObject() {
	return new TicketCollector(DummyConstructorParameter::instance());
}

DistributedObjectServant* TicketCollectorHelper::instantiateServant() {
	return new TicketCollectorImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* TicketCollectorHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new TicketCollectorAdapter((TicketCollectorImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

