/*
 *	server/zone/objects/tangible/terminal/elevator/ElevatorTerminal.cpp generated by engine3 IDL compiler 0.60
 */

#include "ElevatorTerminal.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/Zone.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

/*
 *	ElevatorTerminalStub
 */

enum {RPC_FILLOBJECTMENURESPONSE__OBJECTMENURESPONSE_CREATUREOBJECT_,RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_,RPC_ISELEVATORTERMINAL__,RPC_SETELEVATORUP__ELEVATORTERMINAL_,RPC_SETELEVATORDOWN__ELEVATORTERMINAL_,RPC_GETELEVATORUP__,RPC_GETELEVATORDOWN__};

ElevatorTerminal::ElevatorTerminal() : Terminal(DummyConstructorParameter::instance()) {
	ElevatorTerminalImplementation* _implementation = new ElevatorTerminalImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("ElevatorTerminal");
}

ElevatorTerminal::ElevatorTerminal(DummyConstructorParameter* param) : Terminal(param) {
	_setClassName("ElevatorTerminal");
}

ElevatorTerminal::~ElevatorTerminal() {
}



void ElevatorTerminal::notifyInsert(QuadTreeEntry* obj) {
	ElevatorTerminalImplementation* _implementation = static_cast<ElevatorTerminalImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->notifyInsert(obj);
}

void ElevatorTerminal::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player) {
	ElevatorTerminalImplementation* _implementation = static_cast<ElevatorTerminalImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_FILLOBJECTMENURESPONSE__OBJECTMENURESPONSE_CREATUREOBJECT_);
		method.addObjectParameter(menuResponse);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->fillObjectMenuResponse(menuResponse, player);
}

int ElevatorTerminal::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	ElevatorTerminalImplementation* _implementation = static_cast<ElevatorTerminalImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->handleObjectMenuSelect(player, selectedID);
}

bool ElevatorTerminal::isElevatorTerminal() {
	ElevatorTerminalImplementation* _implementation = static_cast<ElevatorTerminalImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISELEVATORTERMINAL__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isElevatorTerminal();
}

void ElevatorTerminal::setElevatorUp(ElevatorTerminal* term) {
	ElevatorTerminalImplementation* _implementation = static_cast<ElevatorTerminalImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETELEVATORUP__ELEVATORTERMINAL_);
		method.addObjectParameter(term);

		method.executeWithVoidReturn();
	} else
		_implementation->setElevatorUp(term);
}

void ElevatorTerminal::setElevatorDown(ElevatorTerminal* term) {
	ElevatorTerminalImplementation* _implementation = static_cast<ElevatorTerminalImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETELEVATORDOWN__ELEVATORTERMINAL_);
		method.addObjectParameter(term);

		method.executeWithVoidReturn();
	} else
		_implementation->setElevatorDown(term);
}

ElevatorTerminal* ElevatorTerminal::getElevatorUp() {
	ElevatorTerminalImplementation* _implementation = static_cast<ElevatorTerminalImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETELEVATORUP__);

		return static_cast<ElevatorTerminal*>(method.executeWithObjectReturn());
	} else
		return _implementation->getElevatorUp();
}

ElevatorTerminal* ElevatorTerminal::getElevatorDown() {
	ElevatorTerminalImplementation* _implementation = static_cast<ElevatorTerminalImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETELEVATORDOWN__);

		return static_cast<ElevatorTerminal*>(method.executeWithObjectReturn());
	} else
		return _implementation->getElevatorDown();
}

DistributedObjectServant* ElevatorTerminal::_getImplementation() {

	_updated = true;
	return _impl;
}

void ElevatorTerminal::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	ElevatorTerminalImplementation
 */

ElevatorTerminalImplementation::ElevatorTerminalImplementation(DummyConstructorParameter* param) : TerminalImplementation(param) {
	_initializeImplementation();
}


ElevatorTerminalImplementation::~ElevatorTerminalImplementation() {
}


void ElevatorTerminalImplementation::finalize() {
}

void ElevatorTerminalImplementation::_initializeImplementation() {
	_setClassHelper(ElevatorTerminalHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void ElevatorTerminalImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<ElevatorTerminal*>(stub);
	TerminalImplementation::_setStub(stub);
}

DistributedObjectStub* ElevatorTerminalImplementation::_getStub() {
	return _this.get();
}

ElevatorTerminalImplementation::operator const ElevatorTerminal*() {
	return _this.get();
}

void ElevatorTerminalImplementation::lock(bool doLock) {
	_this.get()->lock(doLock);
}

void ElevatorTerminalImplementation::lock(ManagedObject* obj) {
	_this.get()->lock(obj);
}

void ElevatorTerminalImplementation::rlock(bool doLock) {
	_this.get()->rlock(doLock);
}

void ElevatorTerminalImplementation::wlock(bool doLock) {
	_this.get()->wlock(doLock);
}

void ElevatorTerminalImplementation::wlock(ManagedObject* obj) {
	_this.get()->wlock(obj);
}

void ElevatorTerminalImplementation::unlock(bool doLock) {
	_this.get()->unlock(doLock);
}

void ElevatorTerminalImplementation::runlock(bool doLock) {
	_this.get()->runlock(doLock);
}

void ElevatorTerminalImplementation::_serializationHelperMethod() {
	TerminalImplementation::_serializationHelperMethod();

	_setClassName("ElevatorTerminal");

}

void ElevatorTerminalImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(ElevatorTerminalImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ElevatorTerminalImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (TerminalImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "ElevatorTerminal.elevatorUp") {
		TypeInfo<ManagedReference<ElevatorTerminal* > >::parseFromBinaryStream(&elevatorUp, stream);
		return true;
	}

	if (_name == "ElevatorTerminal.elevatorDown") {
		TypeInfo<ManagedReference<ElevatorTerminal* > >::parseFromBinaryStream(&elevatorDown, stream);
		return true;
	}


	return false;
}

void ElevatorTerminalImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ElevatorTerminalImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ElevatorTerminalImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = TerminalImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;
	_name = "ElevatorTerminal.elevatorUp";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<ElevatorTerminal* > >::toBinaryStream(&elevatorUp, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "ElevatorTerminal.elevatorDown";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<ElevatorTerminal* > >::toBinaryStream(&elevatorDown, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 2;
}

ElevatorTerminalImplementation::ElevatorTerminalImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/terminal/elevator/ElevatorTerminal.idl():  		Logger.setLoggingName("ElevatorTerminal");
	Logger::setLoggingName("ElevatorTerminal");
	// server/zone/objects/tangible/terminal/elevator/ElevatorTerminal.idl():  		elevatorUp = null;
	elevatorUp = NULL;
	// server/zone/objects/tangible/terminal/elevator/ElevatorTerminal.idl():  		elevatorDown = null;
	elevatorDown = NULL;
}

bool ElevatorTerminalImplementation::isElevatorTerminal() {
	// server/zone/objects/tangible/terminal/elevator/ElevatorTerminal.idl():  		return true;
	return true;
}

void ElevatorTerminalImplementation::setElevatorUp(ElevatorTerminal* term) {
	// server/zone/objects/tangible/terminal/elevator/ElevatorTerminal.idl():  		elevatorUp = term;
	elevatorUp = term;
}

void ElevatorTerminalImplementation::setElevatorDown(ElevatorTerminal* term) {
	// server/zone/objects/tangible/terminal/elevator/ElevatorTerminal.idl():  		elevatorDown = term;
	elevatorDown = term;
}

ElevatorTerminal* ElevatorTerminalImplementation::getElevatorUp() {
	// server/zone/objects/tangible/terminal/elevator/ElevatorTerminal.idl():  		return elevatorUp;
	return elevatorUp;
}

ElevatorTerminal* ElevatorTerminalImplementation::getElevatorDown() {
	// server/zone/objects/tangible/terminal/elevator/ElevatorTerminal.idl():  		return elevatorDown;
	return elevatorDown;
}

/*
 *	ElevatorTerminalAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


ElevatorTerminalAdapter::ElevatorTerminalAdapter(ElevatorTerminal* obj) : TerminalAdapter(obj) {
}

void ElevatorTerminalAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_FILLOBJECTMENURESPONSE__OBJECTMENURESPONSE_CREATUREOBJECT_:
		{
			fillObjectMenuResponse(static_cast<ObjectMenuResponse*>(inv->getObjectParameter()), static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_:
		{
			resp->insertSignedInt(handleObjectMenuSelect(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getByteParameter()));
		}
		break;
	case RPC_ISELEVATORTERMINAL__:
		{
			resp->insertBoolean(isElevatorTerminal());
		}
		break;
	case RPC_SETELEVATORUP__ELEVATORTERMINAL_:
		{
			setElevatorUp(static_cast<ElevatorTerminal*>(inv->getObjectParameter()));
		}
		break;
	case RPC_SETELEVATORDOWN__ELEVATORTERMINAL_:
		{
			setElevatorDown(static_cast<ElevatorTerminal*>(inv->getObjectParameter()));
		}
		break;
	case RPC_GETELEVATORUP__:
		{
			resp->insertLong(getElevatorUp()->_getObjectID());
		}
		break;
	case RPC_GETELEVATORDOWN__:
		{
			resp->insertLong(getElevatorDown()->_getObjectID());
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void ElevatorTerminalAdapter::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player) {
	(static_cast<ElevatorTerminal*>(stub))->fillObjectMenuResponse(menuResponse, player);
}

int ElevatorTerminalAdapter::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	return (static_cast<ElevatorTerminal*>(stub))->handleObjectMenuSelect(player, selectedID);
}

bool ElevatorTerminalAdapter::isElevatorTerminal() {
	return (static_cast<ElevatorTerminal*>(stub))->isElevatorTerminal();
}

void ElevatorTerminalAdapter::setElevatorUp(ElevatorTerminal* term) {
	(static_cast<ElevatorTerminal*>(stub))->setElevatorUp(term);
}

void ElevatorTerminalAdapter::setElevatorDown(ElevatorTerminal* term) {
	(static_cast<ElevatorTerminal*>(stub))->setElevatorDown(term);
}

ElevatorTerminal* ElevatorTerminalAdapter::getElevatorUp() {
	return (static_cast<ElevatorTerminal*>(stub))->getElevatorUp();
}

ElevatorTerminal* ElevatorTerminalAdapter::getElevatorDown() {
	return (static_cast<ElevatorTerminal*>(stub))->getElevatorDown();
}

/*
 *	ElevatorTerminalHelper
 */

ElevatorTerminalHelper* ElevatorTerminalHelper::staticInitializer = ElevatorTerminalHelper::instance();

ElevatorTerminalHelper::ElevatorTerminalHelper() {
	className = "ElevatorTerminal";

	Core::getObjectBroker()->registerClass(className, this);
}

void ElevatorTerminalHelper::finalizeHelper() {
	ElevatorTerminalHelper::finalize();
}

DistributedObject* ElevatorTerminalHelper::instantiateObject() {
	return new ElevatorTerminal(DummyConstructorParameter::instance());
}

DistributedObjectServant* ElevatorTerminalHelper::instantiateServant() {
	return new ElevatorTerminalImplementation();
}

DistributedObjectAdapter* ElevatorTerminalHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ElevatorTerminalAdapter(static_cast<ElevatorTerminal*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

