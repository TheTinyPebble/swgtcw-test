/*
 *	server/zone/objects/tangible/terminal/guild/GuildTerminal.cpp generated by engine3 IDL compiler 0.60
 */

#include "GuildTerminal.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/Zone.h"


// Imported class dependencies

#include "system/lang/Time.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/managers/planet/MapLocationTable.h"

#include "server/zone/objects/scene/ObserverEventMap.h"

#include "system/util/Vector.h"

#include "server/zone/managers/creature/CreatureManager.h"

#include "server/zone/ZoneClientSession.h"

#include "server/zone/objects/player/events/PlayerRecoveryEvent.h"

#include "server/zone/ZoneProcessServerImplementation.h"

#include "engine/util/QuadTree.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "server/zone/objects/scene/variables/CustomizationVariables.h"

#include "server/zone/objects/scene/variables/StringId.h"

#include "server/zone/objects/scene/variables/DeltaVector.h"

#include "engine/util/Quaternion.h"

#include "server/zone/objects/player/TradeContainer.h"

#include "server/zone/objects/tangible/tool/CraftingTool.h"

#include "system/util/VectorMap.h"

#include "server/zone/objects/tangible/tool/SurveyTool.h"

#include "server/zone/objects/player/events/PlayerDisconnectEvent.h"

#include "server/zone/managers/object/ObjectMap.h"

#include "server/zone/objects/player/badges/Badges.h"

#include "server/zone/Zone.h"

#include "server/zone/managers/planet/HeightMap.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "system/util/SortedVector.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/managers/planet/PlanetManager.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

/*
 *	GuildTerminalStub
 */

GuildTerminal::GuildTerminal() : Terminal(DummyConstructorParameter::instance()) {
	GuildTerminalImplementation* _implementation = new GuildTerminalImplementation();
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

GuildTerminal::GuildTerminal(DummyConstructorParameter* param) : Terminal(param) {
}

GuildTerminal::~GuildTerminal() {
}


void GuildTerminal::initializeTransientMembers() {
	GuildTerminalImplementation* _implementation = (GuildTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void GuildTerminal::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player) {
	GuildTerminalImplementation* _implementation = (GuildTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(menuResponse);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->fillObjectMenuResponse(menuResponse, player);
}

int GuildTerminal::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	GuildTerminalImplementation* _implementation = (GuildTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->handleObjectMenuSelect(player, selectedID);
}

bool GuildTerminal::isGuildTerminal() {
	GuildTerminalImplementation* _implementation = (GuildTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isGuildTerminal();
}

DistributedObjectServant* GuildTerminal::_getImplementation() {
	return getForUpdate();}

void GuildTerminal::_setImplementation(DistributedObjectServant* servant) {
	setObject((ManagedObjectImplementation*) servant);}

/*
 *	GuildTerminalImplementation
 */

GuildTerminalImplementation::GuildTerminalImplementation(DummyConstructorParameter* param) : TerminalImplementation(param) {
	_initializeImplementation();
}


GuildTerminalImplementation::~GuildTerminalImplementation() {
}


void GuildTerminalImplementation::finalize() {
}

void GuildTerminalImplementation::_initializeImplementation() {
	_setClassHelper(GuildTerminalHelper::instance());

	_serializationHelperMethod();
}

void GuildTerminalImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (GuildTerminal*) stub;
	TerminalImplementation::_setStub(stub);
}

DistributedObjectStub* GuildTerminalImplementation::_getStub() {
	return _this;
}

GuildTerminalImplementation::operator const GuildTerminal*() {
	return _this;
}

TransactionalObject* GuildTerminalImplementation::clone() {
	return (TransactionalObject*) new GuildTerminalImplementation(*this);
}


void GuildTerminalImplementation::lock(bool doLock) {
}

void GuildTerminalImplementation::lock(ManagedObject* obj) {
}

void GuildTerminalImplementation::rlock(bool doLock) {
}

void GuildTerminalImplementation::wlock(bool doLock) {
}

void GuildTerminalImplementation::wlock(ManagedObject* obj) {
}

void GuildTerminalImplementation::unlock(bool doLock) {
}

void GuildTerminalImplementation::runlock(bool doLock) {
}

void GuildTerminalImplementation::_serializationHelperMethod() {
	TerminalImplementation::_serializationHelperMethod();

	_setClassName("GuildTerminal");

}

GuildTerminalImplementation::GuildTerminalImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/terminal/guild/GuildTerminal.idl(56):  		Logger.setLoggingName("GuildTerminal");
	Logger::setLoggingName("GuildTerminal");
}

void GuildTerminalImplementation::initializeTransientMembers() {
	// server/zone/objects/tangible/terminal/guild/GuildTerminal.idl(59):  		super.initializeTransientMembers();
	TerminalImplementation::initializeTransientMembers();
	// server/zone/objects/tangible/terminal/guild/GuildTerminal.idl(61):  		Logger.setLoggingName("GuildTerminal");
	Logger::setLoggingName("GuildTerminal");
}

bool GuildTerminalImplementation::isGuildTerminal() {
	// server/zone/objects/tangible/terminal/guild/GuildTerminal.idl(69):  		return true;
	return true;
}

/*
 *	GuildTerminalAdapter
 */

GuildTerminalAdapter::GuildTerminalAdapter(GuildTerminalImplementation* obj) : TerminalAdapter(obj) {
}

Packet* GuildTerminalAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initializeTransientMembers();
		break;
	case 7:
		fillObjectMenuResponse((ObjectMenuResponse*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter());
		break;
	case 8:
		resp->insertSignedInt(handleObjectMenuSelect((PlayerCreature*) inv->getObjectParameter(), inv->getByteParameter()));
		break;
	case 9:
		resp->insertBoolean(isGuildTerminal());
		break;
	default:
		return NULL;
	}

	return resp;
}

void GuildTerminalAdapter::initializeTransientMembers() {
	((GuildTerminalImplementation*) impl)->initializeTransientMembers();
}

void GuildTerminalAdapter::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player) {
	((GuildTerminalImplementation*) impl)->fillObjectMenuResponse(menuResponse, player);
}

int GuildTerminalAdapter::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	return ((GuildTerminalImplementation*) impl)->handleObjectMenuSelect(player, selectedID);
}

bool GuildTerminalAdapter::isGuildTerminal() {
	return ((GuildTerminalImplementation*) impl)->isGuildTerminal();
}

/*
 *	GuildTerminalHelper
 */

GuildTerminalHelper* GuildTerminalHelper::staticInitializer = GuildTerminalHelper::instance();

GuildTerminalHelper::GuildTerminalHelper() {
	className = "GuildTerminal";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void GuildTerminalHelper::finalizeHelper() {
	GuildTerminalHelper::finalize();
}

DistributedObject* GuildTerminalHelper::instantiateObject() {
	return new GuildTerminal(DummyConstructorParameter::instance());
}

DistributedObjectServant* GuildTerminalHelper::instantiateServant() {
	return new GuildTerminalImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* GuildTerminalHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new GuildTerminalAdapter((GuildTerminalImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

