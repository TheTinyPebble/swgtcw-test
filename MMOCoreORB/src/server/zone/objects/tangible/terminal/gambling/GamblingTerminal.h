/*
 *	server/zone/objects/tangible/terminal/gambling/GamblingTerminal.h generated by engine3 IDL compiler 0.60
 */

#ifndef GAMBLINGTERMINAL_H_
#define GAMBLINGTERMINAL_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace packets {
namespace object {

class ObjectMenuResponse;

} // namespace object
} // namespace packets
} // namespace zone
} // namespace server

using namespace server::zone::packets::object;

namespace server {
namespace zone {

class Zone;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {
namespace managers {
namespace minigames {

class GamblingBet;

} // namespace minigames
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::minigames;

namespace server {
namespace zone {
namespace managers {
namespace minigames {
namespace events {

class GamblingEvent;

} // namespace events
} // namespace minigames
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::minigames::events;

namespace server {
namespace chat {

class StringIdChatParameter;

} // namespace chat
} // namespace server

using namespace server::chat;

#include "server/zone/templates/tangible/GamblingTerminalTemplate.h"

#include "server/zone/objects/player/sui/SuiWindowType.h"

#include "server/zone/objects/tangible/terminal/Terminal.h"

#include "engine/lua/LuaObject.h"

#include "system/util/Vector.h"

#include "system/util/VectorMap.h"

#include "system/lang/ref/Reference.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace terminal {
namespace gambling {

class GamblingTerminal : public Terminal {
public:
	static const int ROULETTEMACHINE = 0;

	static const int SLOTMACHINE = 1;

	static const int JOINTERMINAL = 20;

	static const int LEAVETERMINAL = 21;

	static const int NOGAMERUNNING = 0;

	static const int GAMESTARTING = 1;

	static const int GAMESTARTED = 2;

	static const int TWOLEFT = 3;

	static const int ONELEFT = 4;

	static const int END = 5;

	static const int SLOTGAMEENDED = 6;

	static const int NINETY = 2;

	static const int SIXTY = 3;

	static const int THIRTY = 4;

	static const int TWENTY = 5;

	static const int FIFTEEN = 6;

	static const int TEN = 7;

	static const int FIVE = 8;

	static const int WHEELSTART = 9;

	static const int WHEELBEGINSLOW = 10;

	static const int WHEELSLOW = 11;

	static const int WHEELSTOP = 12;

	static const int WHEELPAYOUT = 12;

	GamblingTerminal();

	void initializeTransientMembers();

	void reset();

	Vector<GamblingBet*>* getBets();

	VectorMap<ManagedReference<CreatureObject* >, unsigned int>* getPlayersWindows();

	VectorMap<ManagedReference<CreatureObject* >, int>* getWinnings();

	int getFirst();

	int getSecond();

	int getThird();

	void setFirst(int value);

	void setSecond(int value);

	void setThird(int value);

	int getMinBet();

	int getMaxBet();

	int getState();

	void setState(int value);

	int getMachineType();

	GamblingEvent* getEvent();

	void setEvent(GamblingEvent* event);

	void incGameCount();

	int getGameCount();

	bool isGoneEmpty();

	String getMachineTypeText();

	/**
	 * Reads and sets the template data from a SharedTangibleObjectTemplate LuaObject
	 * @pre { templateData is a valid pointer }
	 * @post { TangibleObject members are initialized }
	 * @param templateData templateData points to the SharedTangibleObjectTemplate LuaObject that is used to initialize the TangibleObject members
	 */
	void loadTemplateData(SharedObjectTemplate* templateData);

	/**
	 * Returns stf string for Radial Menu
	 * Based on whether the player is joined to the station this method returns the stf string to fill in the Radial menu
	 * @pre { this object is locked }
	 * @post { this object is locked }
	 * @param player CreatureObject for which to check whether joined 
	 * @return { String of stf }
	 */
	String getText(CreatureObject* player);

	/**
	 * Fills the radial options
	 * @pre { this object is locked }
	 * @post { this object is locked, menuResponse is complete}
	 * @param menuResponse ObjectMenuResponse that will be sent to the client
	 */
	void fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player);

	/**
	 * Handles the radial selection sent by the client
	 * @pre { this object is locked, player is locked }
	 * @post { this object is locked, player is locked }
	 * @returns 0 if successfull
	 */
	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	void setGamblingRegion(const String& region);

	String getGamblingRegion();

	bool gameRunning();

	/**
	 * Notifies other Players
	 * This method sends the argument text to every Player joined to the Terminal except the Player provided
	 * @pre { this object is locked }
	 * @post { this object is locked }
	 * @param player CreatureObject who won't receive the text
	 * @param text Message to send to players 
	 */
	void notifyOthers(CreatureObject* player, StringIdChatParameter* text);

	/**
	 * Notifies all Players
	 * This method sends the argument text to every Player joined to the Terminal
	 * @pre { this object is locked }
	 * @post { this object is locked }
	 * @param text Message to send to players 
	 */
	void notifyAll(StringIdChatParameter* text);

	/**
	 * Checks whether Player is allowed to join
	 * This method checks for certain conditions depending on machineType
	 * and sends a SystemMessage to the Player in case he cannot join describing the reason.
	 * @pre { this object is locked }
	 * @post { this object is locked }
	 * @param player CreatureObject for which to check whether he can join 
	 * @return { true if Player may join }
	 */
	bool checkJoin(CreatureObject* player);

	/**
	 * Join Terminal
	 * This method handles the radial command to join a Terminal, creating Windows and adding the Player
	 * to playersWindows if checkJoin returns true. Whether the game is being started already depends on the machineType
	 * @pre { this object is locked }
	 * @post { this object is locked }
	 * @param player CreatureObject who wants to join the Terminal 
	 */
	void joinTerminal(CreatureObject* player);

	/**
	 * Leave Terminal
	 * This method handles the radial command to leave a Terminal, closing Windows and stopping running games.
	 * @pre { this object is locked }
	 * @post { this object is locked }
	 * @param player CreatureObject who wants to leave the Terminal 
	 */
	void leaveTerminal(CreatureObject* player);

	/**
	 * Close a Menu
	 * This method closes a menu, but won't drop it from playersWindows, so the list of players remains intact if further needed
	 * @pre { this object is locked }
	 * @post { this object is locked }
	 * @param player CreatureObject who wants to join the Terminal
	 * @param payout If true, the SuiSlotMachineBox's payoutBoxID reference is called and that menu closed aswell to clean the player's screen. 
	 */
	void closeMenu(CreatureObject* player, bool payout);

	/**
	 * Close all Menus
	 * This method closes all players' menus, but won't drop it from playersWindows, so the list of players remains intact if further needed
	 * @pre { this object is locked }
	 * @post { this object is locked } 
	 */
	void closeAllMenus();

	/**
	 * Notifiy Players of the current status
	 * This method handles all game-related messages based on the event that is happening
	 * @pre { this object is locked }
	 * @post { this object is locked }
	 * @param player Protagonist of the event, may be set to NULL for a variety of events
	 * @param event The switch argument to decide what needs to be sent 
	 */
	void statusUpdate(CreatureObject* player, int event);

	/**
	 * Calls statusUpdate for the Players
	 * This method calls statusUpdate(player,event); for each Player joined to the Terminal
	 * @pre { this object is locked }
	 * @post { this object is locked }
	 * @param event The switch argument to decide what needs to be sent in statusUpdate(player,event) 
	 */
	void statusUpdate(int event);

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	GamblingTerminal(DummyConstructorParameter* param);

	virtual ~GamblingTerminal();

	friend class GamblingTerminalHelper;
};

} // namespace gambling
} // namespace terminal
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::terminal::gambling;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace terminal {
namespace gambling {

class GamblingTerminalImplementation : public TerminalImplementation {
protected:
	String gamblingRegion;

	int machineType;

	VectorMap<ManagedReference<CreatureObject* >, unsigned int> playersWindows;

	Reference<GamblingEvent* > event;

	VectorMap<ManagedReference<CreatureObject* >, int> winnings;

	int gameCount;

	int first;

	int second;

	int third;

	int minBet;

	int maxBet;

	int state;

	Vector<GamblingBet*> bets;

public:
	static const int ROULETTEMACHINE = 0;

	static const int SLOTMACHINE = 1;

	static const int JOINTERMINAL = 20;

	static const int LEAVETERMINAL = 21;

	static const int NOGAMERUNNING = 0;

	static const int GAMESTARTING = 1;

	static const int GAMESTARTED = 2;

	static const int TWOLEFT = 3;

	static const int ONELEFT = 4;

	static const int END = 5;

	static const int SLOTGAMEENDED = 6;

	static const int NINETY = 2;

	static const int SIXTY = 3;

	static const int THIRTY = 4;

	static const int TWENTY = 5;

	static const int FIFTEEN = 6;

	static const int TEN = 7;

	static const int FIVE = 8;

	static const int WHEELSTART = 9;

	static const int WHEELBEGINSLOW = 10;

	static const int WHEELSLOW = 11;

	static const int WHEELSTOP = 12;

	static const int WHEELPAYOUT = 12;

	GamblingTerminalImplementation();

	GamblingTerminalImplementation(DummyConstructorParameter* param);

	void initializeTransientMembers();

	void reset();

	Vector<GamblingBet*>* getBets();

	VectorMap<ManagedReference<CreatureObject* >, unsigned int>* getPlayersWindows();

	VectorMap<ManagedReference<CreatureObject* >, int>* getWinnings();

	int getFirst();

	int getSecond();

	int getThird();

	void setFirst(int value);

	void setSecond(int value);

	void setThird(int value);

	int getMinBet();

	int getMaxBet();

	int getState();

	void setState(int value);

	int getMachineType();

	GamblingEvent* getEvent();

	void setEvent(GamblingEvent* event);

	void incGameCount();

	int getGameCount();

	bool isGoneEmpty();

	String getMachineTypeText();

	/**
	 * Reads and sets the template data from a SharedTangibleObjectTemplate LuaObject
	 * @pre { templateData is a valid pointer }
	 * @post { TangibleObject members are initialized }
	 * @param templateData templateData points to the SharedTangibleObjectTemplate LuaObject that is used to initialize the TangibleObject members
	 */
	void loadTemplateData(SharedObjectTemplate* templateData);

	/**
	 * Returns stf string for Radial Menu
	 * Based on whether the player is joined to the station this method returns the stf string to fill in the Radial menu
	 * @pre { this object is locked }
	 * @post { this object is locked }
	 * @param player CreatureObject for which to check whether joined 
	 * @return { String of stf }
	 */
	String getText(CreatureObject* player);

	/**
	 * Fills the radial options
	 * @pre { this object is locked }
	 * @post { this object is locked, menuResponse is complete}
	 * @param menuResponse ObjectMenuResponse that will be sent to the client
	 */
	void fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player);

	/**
	 * Handles the radial selection sent by the client
	 * @pre { this object is locked, player is locked }
	 * @post { this object is locked, player is locked }
	 * @returns 0 if successfull
	 */
	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	void setGamblingRegion(const String& region);

	String getGamblingRegion();

	bool gameRunning();

	/**
	 * Notifies other Players
	 * This method sends the argument text to every Player joined to the Terminal except the Player provided
	 * @pre { this object is locked }
	 * @post { this object is locked }
	 * @param player CreatureObject who won't receive the text
	 * @param text Message to send to players 
	 */
	void notifyOthers(CreatureObject* player, StringIdChatParameter* text);

	/**
	 * Notifies all Players
	 * This method sends the argument text to every Player joined to the Terminal
	 * @pre { this object is locked }
	 * @post { this object is locked }
	 * @param text Message to send to players 
	 */
	void notifyAll(StringIdChatParameter* text);

	/**
	 * Checks whether Player is allowed to join
	 * This method checks for certain conditions depending on machineType
	 * and sends a SystemMessage to the Player in case he cannot join describing the reason.
	 * @pre { this object is locked }
	 * @post { this object is locked }
	 * @param player CreatureObject for which to check whether he can join 
	 * @return { true if Player may join }
	 */
	bool checkJoin(CreatureObject* player);

	/**
	 * Join Terminal
	 * This method handles the radial command to join a Terminal, creating Windows and adding the Player
	 * to playersWindows if checkJoin returns true. Whether the game is being started already depends on the machineType
	 * @pre { this object is locked }
	 * @post { this object is locked }
	 * @param player CreatureObject who wants to join the Terminal 
	 */
	void joinTerminal(CreatureObject* player);

	/**
	 * Leave Terminal
	 * This method handles the radial command to leave a Terminal, closing Windows and stopping running games.
	 * @pre { this object is locked }
	 * @post { this object is locked }
	 * @param player CreatureObject who wants to leave the Terminal 
	 */
	void leaveTerminal(CreatureObject* player);

	/**
	 * Close a Menu
	 * This method closes a menu, but won't drop it from playersWindows, so the list of players remains intact if further needed
	 * @pre { this object is locked }
	 * @post { this object is locked }
	 * @param player CreatureObject who wants to join the Terminal
	 * @param payout If true, the SuiSlotMachineBox's payoutBoxID reference is called and that menu closed aswell to clean the player's screen. 
	 */
	void closeMenu(CreatureObject* player, bool payout);

	/**
	 * Close all Menus
	 * This method closes all players' menus, but won't drop it from playersWindows, so the list of players remains intact if further needed
	 * @pre { this object is locked }
	 * @post { this object is locked } 
	 */
	void closeAllMenus();

	/**
	 * Notifiy Players of the current status
	 * This method handles all game-related messages based on the event that is happening
	 * @pre { this object is locked }
	 * @post { this object is locked }
	 * @param player Protagonist of the event, may be set to NULL for a variety of events
	 * @param event The switch argument to decide what needs to be sent 
	 */
	void statusUpdate(CreatureObject* player, int event);

	/**
	 * Calls statusUpdate for the Players
	 * This method calls statusUpdate(player,event); for each Player joined to the Terminal
	 * @pre { this object is locked }
	 * @post { this object is locked }
	 * @param event The switch argument to decide what needs to be sent in statusUpdate(player,event) 
	 */
	void statusUpdate(int event);

protected:
	bool invalidPosture(CreatureObject* player);

public:
	WeakReference<GamblingTerminal*> _this;

	operator const GamblingTerminal*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~GamblingTerminalImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class GamblingTerminal;
};

class GamblingTerminalAdapter : public TerminalAdapter {
public:
	GamblingTerminalAdapter(GamblingTerminal* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initializeTransientMembers();

	void reset();

	int getFirst();

	int getSecond();

	int getThird();

	void setFirst(int value);

	void setSecond(int value);

	void setThird(int value);

	int getMinBet();

	int getMaxBet();

	int getState();

	void setState(int value);

	int getMachineType();

	void incGameCount();

	int getGameCount();

	bool isGoneEmpty();

	String getMachineTypeText();

	String getText(CreatureObject* player);

	void fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player);

	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	void setGamblingRegion(const String& region);

	String getGamblingRegion();

	bool gameRunning();

	bool checkJoin(CreatureObject* player);

	void joinTerminal(CreatureObject* player);

	void leaveTerminal(CreatureObject* player);

	void closeMenu(CreatureObject* player, bool payout);

	void closeAllMenus();

	void statusUpdate(CreatureObject* player, int event);

	void statusUpdate(int event);

};

class GamblingTerminalHelper : public DistributedObjectClassHelper, public Singleton<GamblingTerminalHelper> {
	static GamblingTerminalHelper* staticInitializer;

public:
	GamblingTerminalHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<GamblingTerminalHelper>;
};

} // namespace gambling
} // namespace terminal
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::terminal::gambling;

#endif /*GAMBLINGTERMINAL_H_*/
