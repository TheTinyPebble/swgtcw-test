/*
 *	server/zone/objects/tangible/terminal/gambling/GamblingTerminal.cpp generated by engine3 IDL compiler 0.60
 */

#include "GamblingTerminal.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/Zone.h"

#include "server/zone/managers/minigames/GamblingBet.h"

#include "server/zone/managers/minigames/events/GamblingEvent.h"

#include "server/chat/StringIdChatParameter.h"

/*
 *	GamblingTerminalStub
 */

GamblingTerminal::GamblingTerminal() : Terminal(DummyConstructorParameter::instance()) {
	GamblingTerminalImplementation* _implementation = new GamblingTerminalImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

GamblingTerminal::GamblingTerminal(DummyConstructorParameter* param) : Terminal(param) {
}

GamblingTerminal::~GamblingTerminal() {
}


void GamblingTerminal::initializeTransientMembers() {
	GamblingTerminalImplementation* _implementation = (GamblingTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void GamblingTerminal::reset() {
	GamblingTerminalImplementation* _implementation = (GamblingTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		_implementation->reset();
}

Vector<GamblingBet*>* GamblingTerminal::getBets() {
	GamblingTerminalImplementation* _implementation = (GamblingTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getBets();
}

VectorMap<ManagedReference<PlayerCreature* >, unsigned int>* GamblingTerminal::getPlayersWindows() {
	GamblingTerminalImplementation* _implementation = (GamblingTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getPlayersWindows();
}

VectorMap<ManagedReference<PlayerCreature* >, int>* GamblingTerminal::getWinnings() {
	GamblingTerminalImplementation* _implementation = (GamblingTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getWinnings();
}

int GamblingTerminal::getFirst() {
	GamblingTerminalImplementation* _implementation = (GamblingTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getFirst();
}

int GamblingTerminal::getSecond() {
	GamblingTerminalImplementation* _implementation = (GamblingTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getSecond();
}

int GamblingTerminal::getThird() {
	GamblingTerminalImplementation* _implementation = (GamblingTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getThird();
}

void GamblingTerminal::setFirst(int value) {
	GamblingTerminalImplementation* _implementation = (GamblingTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setFirst(value);
}

void GamblingTerminal::setSecond(int value) {
	GamblingTerminalImplementation* _implementation = (GamblingTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setSecond(value);
}

void GamblingTerminal::setThird(int value) {
	GamblingTerminalImplementation* _implementation = (GamblingTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setThird(value);
}

int GamblingTerminal::getMinBet() {
	GamblingTerminalImplementation* _implementation = (GamblingTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getMinBet();
}

int GamblingTerminal::getMaxBet() {
	GamblingTerminalImplementation* _implementation = (GamblingTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getMaxBet();
}

int GamblingTerminal::getState() {
	GamblingTerminalImplementation* _implementation = (GamblingTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getState();
}

void GamblingTerminal::setState(int value) {
	GamblingTerminalImplementation* _implementation = (GamblingTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setState(value);
}

int GamblingTerminal::getMachineType() {
	GamblingTerminalImplementation* _implementation = (GamblingTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getMachineType();
}

GamblingEvent* GamblingTerminal::getEvent() {
	GamblingTerminalImplementation* _implementation = (GamblingTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getEvent();
}

void GamblingTerminal::setEvent(GamblingEvent* event) {
	GamblingTerminalImplementation* _implementation = (GamblingTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->setEvent(event);
}

void GamblingTerminal::incGameCount() {
	GamblingTerminalImplementation* _implementation = (GamblingTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);

		method.executeWithVoidReturn();
	} else
		_implementation->incGameCount();
}

int GamblingTerminal::getGameCount() {
	GamblingTerminalImplementation* _implementation = (GamblingTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getGameCount();
}

bool GamblingTerminal::isGoneEmpty() {
	GamblingTerminalImplementation* _implementation = (GamblingTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isGoneEmpty();
}

String GamblingTerminal::getMachineTypeText() {
	GamblingTerminalImplementation* _implementation = (GamblingTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);

		method.executeWithAsciiReturn(_return_getMachineTypeText);
		return _return_getMachineTypeText;
	} else
		return _implementation->getMachineTypeText();
}

void GamblingTerminal::loadTemplateData(SharedObjectTemplate* templateData) {
	GamblingTerminalImplementation* _implementation = (GamblingTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->loadTemplateData(templateData);
}

String GamblingTerminal::getText(PlayerCreature* player) {
	GamblingTerminalImplementation* _implementation = (GamblingTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);
		method.addObjectParameter(player);

		method.executeWithAsciiReturn(_return_getText);
		return _return_getText;
	} else
		return _implementation->getText(player);
}

void GamblingTerminal::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player) {
	GamblingTerminalImplementation* _implementation = (GamblingTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);
		method.addObjectParameter(menuResponse);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->fillObjectMenuResponse(menuResponse, player);
}

int GamblingTerminal::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	GamblingTerminalImplementation* _implementation = (GamblingTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->handleObjectMenuSelect(player, selectedID);
}

void GamblingTerminal::setGamblingRegion(const String& region) {
	GamblingTerminalImplementation* _implementation = (GamblingTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);
		method.addAsciiParameter(region);

		method.executeWithVoidReturn();
	} else
		_implementation->setGamblingRegion(region);
}

String GamblingTerminal::getGamblingRegion() {
	GamblingTerminalImplementation* _implementation = (GamblingTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);

		method.executeWithAsciiReturn(_return_getGamblingRegion);
		return _return_getGamblingRegion;
	} else
		return _implementation->getGamblingRegion();
}

bool GamblingTerminal::gameRunning() {
	GamblingTerminalImplementation* _implementation = (GamblingTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->gameRunning();
}

void GamblingTerminal::notifyOthers(PlayerCreature* player, StringIdChatParameter* text) {
	GamblingTerminalImplementation* _implementation = (GamblingTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->notifyOthers(player, text);
}

void GamblingTerminal::notifyAll(StringIdChatParameter* text) {
	GamblingTerminalImplementation* _implementation = (GamblingTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->notifyAll(text);
}

bool GamblingTerminal::checkJoin(PlayerCreature* player) {
	GamblingTerminalImplementation* _implementation = (GamblingTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->checkJoin(player);
}

void GamblingTerminal::joinTerminal(PlayerCreature* player) {
	GamblingTerminalImplementation* _implementation = (GamblingTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->joinTerminal(player);
}

void GamblingTerminal::leaveTerminal(PlayerCreature* player) {
	GamblingTerminalImplementation* _implementation = (GamblingTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->leaveTerminal(player);
}

void GamblingTerminal::closeMenu(PlayerCreature* player, bool payout) {
	GamblingTerminalImplementation* _implementation = (GamblingTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);
		method.addObjectParameter(player);
		method.addBooleanParameter(payout);

		method.executeWithVoidReturn();
	} else
		_implementation->closeMenu(player, payout);
}

void GamblingTerminal::closeAllMenus() {
	GamblingTerminalImplementation* _implementation = (GamblingTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);

		method.executeWithVoidReturn();
	} else
		_implementation->closeAllMenus();
}

void GamblingTerminal::statusUpdate(PlayerCreature* player, int event) {
	GamblingTerminalImplementation* _implementation = (GamblingTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);
		method.addObjectParameter(player);
		method.addSignedIntParameter(event);

		method.executeWithVoidReturn();
	} else
		_implementation->statusUpdate(player, event);
}

void GamblingTerminal::statusUpdate(int event) {
	GamblingTerminalImplementation* _implementation = (GamblingTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);
		method.addSignedIntParameter(event);

		method.executeWithVoidReturn();
	} else
		_implementation->statusUpdate(event);
}

DistributedObjectServant* GamblingTerminal::_getImplementation() {

	_updated = true;
	return _impl;
}

void GamblingTerminal::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	GamblingTerminalImplementation
 */

GamblingTerminalImplementation::GamblingTerminalImplementation(DummyConstructorParameter* param) : TerminalImplementation(param) {
	_initializeImplementation();
}


GamblingTerminalImplementation::~GamblingTerminalImplementation() {
}


void GamblingTerminalImplementation::finalize() {
}

void GamblingTerminalImplementation::_initializeImplementation() {
	_setClassHelper(GamblingTerminalHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void GamblingTerminalImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (GamblingTerminal*) stub;
	TerminalImplementation::_setStub(stub);
}

DistributedObjectStub* GamblingTerminalImplementation::_getStub() {
	return _this;
}

GamblingTerminalImplementation::operator const GamblingTerminal*() {
	return _this;
}

void GamblingTerminalImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void GamblingTerminalImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void GamblingTerminalImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void GamblingTerminalImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void GamblingTerminalImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void GamblingTerminalImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void GamblingTerminalImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void GamblingTerminalImplementation::_serializationHelperMethod() {
	TerminalImplementation::_serializationHelperMethod();

	_setClassName("GamblingTerminal");

}

void GamblingTerminalImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(GamblingTerminalImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool GamblingTerminalImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (TerminalImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "gamblingRegion") {
		TypeInfo<String >::parseFromBinaryStream(&gamblingRegion, stream);
		return true;
	}

	if (_name == "machineType") {
		TypeInfo<int >::parseFromBinaryStream(&machineType, stream);
		return true;
	}

	if (_name == "playersWindows") {
		TypeInfo<VectorMap<ManagedReference<PlayerCreature* >, unsigned int> >::parseFromBinaryStream(&playersWindows, stream);
		return true;
	}

	if (_name == "winnings") {
		TypeInfo<VectorMap<ManagedReference<PlayerCreature* >, int> >::parseFromBinaryStream(&winnings, stream);
		return true;
	}

	if (_name == "gameCount") {
		TypeInfo<int >::parseFromBinaryStream(&gameCount, stream);
		return true;
	}

	if (_name == "first") {
		TypeInfo<int >::parseFromBinaryStream(&first, stream);
		return true;
	}

	if (_name == "second") {
		TypeInfo<int >::parseFromBinaryStream(&second, stream);
		return true;
	}

	if (_name == "third") {
		TypeInfo<int >::parseFromBinaryStream(&third, stream);
		return true;
	}

	if (_name == "minBet") {
		TypeInfo<int >::parseFromBinaryStream(&minBet, stream);
		return true;
	}

	if (_name == "maxBet") {
		TypeInfo<int >::parseFromBinaryStream(&maxBet, stream);
		return true;
	}

	if (_name == "state") {
		TypeInfo<int >::parseFromBinaryStream(&state, stream);
		return true;
	}

	if (_name == "bets") {
		TypeInfo<Vector<GamblingBet*> >::parseFromBinaryStream(&bets, stream);
		return true;
	}


	return false;
}

void GamblingTerminalImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = GamblingTerminalImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int GamblingTerminalImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "gamblingRegion";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<String >::toBinaryStream(&gamblingRegion, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "machineType";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&machineType, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "playersWindows";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<VectorMap<ManagedReference<PlayerCreature* >, unsigned int> >::toBinaryStream(&playersWindows, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "winnings";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<VectorMap<ManagedReference<PlayerCreature* >, int> >::toBinaryStream(&winnings, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "gameCount";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&gameCount, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "first";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&first, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "second";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&second, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "third";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&third, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "minBet";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&minBet, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "maxBet";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&maxBet, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "state";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&state, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "bets";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<Vector<GamblingBet*> >::toBinaryStream(&bets, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 12 + TerminalImplementation::writeObjectMembers(stream);
}

GamblingTerminalImplementation::GamblingTerminalImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		state = NOGAMERUNNING;
	state = NOGAMERUNNING;
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		first = 0;
	first = 0;
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		second = 0;
	second = 0;
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		third = 0;
	third = 0;
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		gameCount = 0;
	gameCount = 0;
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		minBet = 1;
	minBet = 1;
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		maxBet = 10000;
	maxBet = 10000;
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		Logger.setLoggingName("GamblingTerminal");
	Logger::setLoggingName("GamblingTerminal");
}

void GamblingTerminalImplementation::initializeTransientMembers() {
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		super.initializeTransientMembers();
	TerminalImplementation::initializeTransientMembers();
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		Logger.setLoggingName("GamblingTerminal");
	Logger::setLoggingName("GamblingTerminal");
}

void GamblingTerminalImplementation::reset() {
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		state = NOGAMERUNNING;
	state = NOGAMERUNNING;
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		first = 0;
	first = 0;
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		second = 0;
	second = 0;
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		third = 0;
	third = 0;
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		playersWindows.removeAll();
	(&playersWindows)->removeAll();
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		winnings.removeAll();
	(&winnings)->removeAll();
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		bets.removeAll();
	(&bets)->removeAll();
}

Vector<GamblingBet*>* GamblingTerminalImplementation::getBets() {
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		return bets;
	return (&bets);
}

VectorMap<ManagedReference<PlayerCreature* >, unsigned int>* GamblingTerminalImplementation::getPlayersWindows() {
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		return playersWindows;
	return (&playersWindows);
}

VectorMap<ManagedReference<PlayerCreature* >, int>* GamblingTerminalImplementation::getWinnings() {
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		return winnings;
	return (&winnings);
}

int GamblingTerminalImplementation::getFirst() {
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		return first;
	return first;
}

int GamblingTerminalImplementation::getSecond() {
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		return second;
	return second;
}

int GamblingTerminalImplementation::getThird() {
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		return third;
	return third;
}

void GamblingTerminalImplementation::setFirst(int value) {
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		first = value;
	first = value;
}

void GamblingTerminalImplementation::setSecond(int value) {
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		second = value;
	second = value;
}

void GamblingTerminalImplementation::setThird(int value) {
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		third = value;
	third = value;
}

int GamblingTerminalImplementation::getMinBet() {
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		return minBet;
	return minBet;
}

int GamblingTerminalImplementation::getMaxBet() {
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		return maxBet;
	return maxBet;
}

int GamblingTerminalImplementation::getState() {
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		return state;
	return state;
}

void GamblingTerminalImplementation::setState(int value) {
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		state = value;
	state = value;
}

int GamblingTerminalImplementation::getMachineType() {
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		return machineType;
	return machineType;
}

GamblingEvent* GamblingTerminalImplementation::getEvent() {
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		return event.get();
	return (&event)->get();
}

void GamblingTerminalImplementation::incGameCount() {
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		gameCount = gameCount + 1;
	gameCount = gameCount + 1;
}

int GamblingTerminalImplementation::getGameCount() {
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		return gameCount;
	return gameCount;
}

bool GamblingTerminalImplementation::isGoneEmpty() {
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		return 
	if ((&playersWindows)->size() == 0)	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  			return true;
	return true;
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		return false;
	return false;
}

String GamblingTerminalImplementation::getMachineTypeText() {
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  			return "Sabacc";
	if (machineType == ROULETTEMACHINE)	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  			return "@gambling/game_n:roulette";
	return "@gambling/game_n:roulette";

	else 	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  			return "Sabacc";
	if (machineType == SLOTMACHINE)	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  			return "@gambling/game_n:slot_standard";
	return "@gambling/game_n:slot_standard";

	else 	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  			return "Sabacc";
	return "Sabacc";
}

void GamblingTerminalImplementation::loadTemplateData(SharedObjectTemplate* templateData) {
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		super.loadTemplateData(templateData);
	TerminalImplementation::loadTemplateData(templateData);
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		GamblingTerminalTemplate 
	if (!templateData->isGamblingTerminalTemplate()){
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  			error("critical error");
	error("critical error");
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  			return;
	return;
}
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		GamblingTerminalTemplate templ = (GamblingTerminalTemplate) templateData;
	GamblingTerminalTemplate* templ = (GamblingTerminalTemplate*) templateData;
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		machineType = templ.getMachineType();
	machineType = templ->getMachineType();
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  	}
	if (machineType == SLOTMACHINE){
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  			maxBet = 3;
	maxBet = 3;
}
}

String GamblingTerminalImplementation::getText(PlayerCreature* player) {
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		return 
	if ((&playersWindows)->contains(player))	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  			return "@gambling/default_interface:mnu_leave";
	return "@gambling/default_interface:mnu_leave";
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		return "@gambling/default_interface:mnu_join";
	return "@gambling/default_interface:mnu_join";
}

void GamblingTerminalImplementation::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player) {
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		string text = getText(player);
	String text = getText(player);
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		menuResponse.addRadialMenuItem(245, 3, text);
	menuResponse->addRadialMenuItem(245, 3, text);
}

void GamblingTerminalImplementation::setGamblingRegion(const String& region) {
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		gamblingRegion = region;
	gamblingRegion = region;
}

String GamblingTerminalImplementation::getGamblingRegion() {
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		return gamblingRegion;
	return gamblingRegion;
}

bool GamblingTerminalImplementation::gameRunning() {
	// server/zone/objects/tangible/terminal/gambling/GamblingTerminal.idl():  		return state != NOGAMERUNNING;
	return state != NOGAMERUNNING;
}

/*
 *	GamblingTerminalAdapter
 */

GamblingTerminalAdapter::GamblingTerminalAdapter(GamblingTerminalImplementation* obj) : TerminalAdapter(obj) {
}

enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 6,RPC_RESET__,RPC_GETFIRST__,RPC_GETSECOND__,RPC_GETTHIRD__,RPC_SETFIRST__INT_,RPC_SETSECOND__INT_,RPC_SETTHIRD__INT_,RPC_GETMINBET__,RPC_GETMAXBET__,RPC_GETSTATE__,RPC_SETSTATE__INT_,RPC_GETMACHINETYPE__,RPC_INCGAMECOUNT__,RPC_GETGAMECOUNT__,RPC_ISGONEEMPTY__,RPC_GETMACHINETYPETEXT__,RPC_GETTEXT__PLAYERCREATURE_,RPC_FILLOBJECTMENURESPONSE__OBJECTMENURESPONSE_PLAYERCREATURE_,RPC_HANDLEOBJECTMENUSELECT__PLAYERCREATURE_BYTE_,RPC_SETGAMBLINGREGION__STRING_,RPC_GETGAMBLINGREGION__,RPC_GAMERUNNING__,RPC_CHECKJOIN__PLAYERCREATURE_,RPC_JOINTERMINAL__PLAYERCREATURE_,RPC_LEAVETERMINAL__PLAYERCREATURE_,RPC_CLOSEMENU__PLAYERCREATURE_BOOL_,RPC_CLOSEALLMENUS__,RPC_STATUSUPDATE__PLAYERCREATURE_INT_,RPC_STATUSUPDATE__INT_,};

Packet* GamblingTerminalAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		initializeTransientMembers();
		break;
	case RPC_RESET__:
		reset();
		break;
	case RPC_GETFIRST__:
		resp->insertSignedInt(getFirst());
		break;
	case RPC_GETSECOND__:
		resp->insertSignedInt(getSecond());
		break;
	case RPC_GETTHIRD__:
		resp->insertSignedInt(getThird());
		break;
	case RPC_SETFIRST__INT_:
		setFirst(inv->getSignedIntParameter());
		break;
	case RPC_SETSECOND__INT_:
		setSecond(inv->getSignedIntParameter());
		break;
	case RPC_SETTHIRD__INT_:
		setThird(inv->getSignedIntParameter());
		break;
	case RPC_GETMINBET__:
		resp->insertSignedInt(getMinBet());
		break;
	case RPC_GETMAXBET__:
		resp->insertSignedInt(getMaxBet());
		break;
	case RPC_GETSTATE__:
		resp->insertSignedInt(getState());
		break;
	case RPC_SETSTATE__INT_:
		setState(inv->getSignedIntParameter());
		break;
	case RPC_GETMACHINETYPE__:
		resp->insertSignedInt(getMachineType());
		break;
	case RPC_INCGAMECOUNT__:
		incGameCount();
		break;
	case RPC_GETGAMECOUNT__:
		resp->insertSignedInt(getGameCount());
		break;
	case RPC_ISGONEEMPTY__:
		resp->insertBoolean(isGoneEmpty());
		break;
	case RPC_GETMACHINETYPETEXT__:
		resp->insertAscii(getMachineTypeText());
		break;
	case RPC_GETTEXT__PLAYERCREATURE_:
		resp->insertAscii(getText((PlayerCreature*) inv->getObjectParameter()));
		break;
	case RPC_FILLOBJECTMENURESPONSE__OBJECTMENURESPONSE_PLAYERCREATURE_:
		fillObjectMenuResponse((ObjectMenuResponse*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter());
		break;
	case RPC_HANDLEOBJECTMENUSELECT__PLAYERCREATURE_BYTE_:
		resp->insertSignedInt(handleObjectMenuSelect((PlayerCreature*) inv->getObjectParameter(), inv->getByteParameter()));
		break;
	case RPC_SETGAMBLINGREGION__STRING_:
		setGamblingRegion(inv->getAsciiParameter(_param0_setGamblingRegion__String_));
		break;
	case RPC_GETGAMBLINGREGION__:
		resp->insertAscii(getGamblingRegion());
		break;
	case RPC_GAMERUNNING__:
		resp->insertBoolean(gameRunning());
		break;
	case RPC_CHECKJOIN__PLAYERCREATURE_:
		resp->insertBoolean(checkJoin((PlayerCreature*) inv->getObjectParameter()));
		break;
	case RPC_JOINTERMINAL__PLAYERCREATURE_:
		joinTerminal((PlayerCreature*) inv->getObjectParameter());
		break;
	case RPC_LEAVETERMINAL__PLAYERCREATURE_:
		leaveTerminal((PlayerCreature*) inv->getObjectParameter());
		break;
	case RPC_CLOSEMENU__PLAYERCREATURE_BOOL_:
		closeMenu((PlayerCreature*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case RPC_CLOSEALLMENUS__:
		closeAllMenus();
		break;
	case RPC_STATUSUPDATE__PLAYERCREATURE_INT_:
		statusUpdate((PlayerCreature*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case RPC_STATUSUPDATE__INT_:
		statusUpdate(inv->getSignedIntParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void GamblingTerminalAdapter::initializeTransientMembers() {
	((GamblingTerminalImplementation*) impl)->initializeTransientMembers();
}

void GamblingTerminalAdapter::reset() {
	((GamblingTerminalImplementation*) impl)->reset();
}

int GamblingTerminalAdapter::getFirst() {
	return ((GamblingTerminalImplementation*) impl)->getFirst();
}

int GamblingTerminalAdapter::getSecond() {
	return ((GamblingTerminalImplementation*) impl)->getSecond();
}

int GamblingTerminalAdapter::getThird() {
	return ((GamblingTerminalImplementation*) impl)->getThird();
}

void GamblingTerminalAdapter::setFirst(int value) {
	((GamblingTerminalImplementation*) impl)->setFirst(value);
}

void GamblingTerminalAdapter::setSecond(int value) {
	((GamblingTerminalImplementation*) impl)->setSecond(value);
}

void GamblingTerminalAdapter::setThird(int value) {
	((GamblingTerminalImplementation*) impl)->setThird(value);
}

int GamblingTerminalAdapter::getMinBet() {
	return ((GamblingTerminalImplementation*) impl)->getMinBet();
}

int GamblingTerminalAdapter::getMaxBet() {
	return ((GamblingTerminalImplementation*) impl)->getMaxBet();
}

int GamblingTerminalAdapter::getState() {
	return ((GamblingTerminalImplementation*) impl)->getState();
}

void GamblingTerminalAdapter::setState(int value) {
	((GamblingTerminalImplementation*) impl)->setState(value);
}

int GamblingTerminalAdapter::getMachineType() {
	return ((GamblingTerminalImplementation*) impl)->getMachineType();
}

void GamblingTerminalAdapter::incGameCount() {
	((GamblingTerminalImplementation*) impl)->incGameCount();
}

int GamblingTerminalAdapter::getGameCount() {
	return ((GamblingTerminalImplementation*) impl)->getGameCount();
}

bool GamblingTerminalAdapter::isGoneEmpty() {
	return ((GamblingTerminalImplementation*) impl)->isGoneEmpty();
}

String GamblingTerminalAdapter::getMachineTypeText() {
	return ((GamblingTerminalImplementation*) impl)->getMachineTypeText();
}

String GamblingTerminalAdapter::getText(PlayerCreature* player) {
	return ((GamblingTerminalImplementation*) impl)->getText(player);
}

void GamblingTerminalAdapter::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player) {
	((GamblingTerminalImplementation*) impl)->fillObjectMenuResponse(menuResponse, player);
}

int GamblingTerminalAdapter::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	return ((GamblingTerminalImplementation*) impl)->handleObjectMenuSelect(player, selectedID);
}

void GamblingTerminalAdapter::setGamblingRegion(const String& region) {
	((GamblingTerminalImplementation*) impl)->setGamblingRegion(region);
}

String GamblingTerminalAdapter::getGamblingRegion() {
	return ((GamblingTerminalImplementation*) impl)->getGamblingRegion();
}

bool GamblingTerminalAdapter::gameRunning() {
	return ((GamblingTerminalImplementation*) impl)->gameRunning();
}

bool GamblingTerminalAdapter::checkJoin(PlayerCreature* player) {
	return ((GamblingTerminalImplementation*) impl)->checkJoin(player);
}

void GamblingTerminalAdapter::joinTerminal(PlayerCreature* player) {
	((GamblingTerminalImplementation*) impl)->joinTerminal(player);
}

void GamblingTerminalAdapter::leaveTerminal(PlayerCreature* player) {
	((GamblingTerminalImplementation*) impl)->leaveTerminal(player);
}

void GamblingTerminalAdapter::closeMenu(PlayerCreature* player, bool payout) {
	((GamblingTerminalImplementation*) impl)->closeMenu(player, payout);
}

void GamblingTerminalAdapter::closeAllMenus() {
	((GamblingTerminalImplementation*) impl)->closeAllMenus();
}

void GamblingTerminalAdapter::statusUpdate(PlayerCreature* player, int event) {
	((GamblingTerminalImplementation*) impl)->statusUpdate(player, event);
}

void GamblingTerminalAdapter::statusUpdate(int event) {
	((GamblingTerminalImplementation*) impl)->statusUpdate(event);
}

/*
 *	GamblingTerminalHelper
 */

GamblingTerminalHelper* GamblingTerminalHelper::staticInitializer = GamblingTerminalHelper::instance();

GamblingTerminalHelper::GamblingTerminalHelper() {
	className = "GamblingTerminal";

	Core::getObjectBroker()->registerClass(className, this);
}

void GamblingTerminalHelper::finalizeHelper() {
	GamblingTerminalHelper::finalize();
}

DistributedObject* GamblingTerminalHelper::instantiateObject() {
	return new GamblingTerminal(DummyConstructorParameter::instance());
}

DistributedObjectServant* GamblingTerminalHelper::instantiateServant() {
	return new GamblingTerminalImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* GamblingTerminalHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new GamblingTerminalAdapter((GamblingTerminalImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

