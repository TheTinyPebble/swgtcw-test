/*
 *	server/zone/objects/tangible/terminal/structure/StructureTerminal.cpp generated by engine3 IDL compiler 0.60
 */

#include "StructureTerminal.h"

#include "server/zone/objects/structure/StructureObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/Zone.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

/*
 *	StructureTerminalStub
 */

enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 6,RPC_HANDLEOBJECTMENUSELECT__PLAYERCREATURE_BYTE_,};

StructureTerminal::StructureTerminal() : Terminal(DummyConstructorParameter::instance()) {
	StructureTerminalImplementation* _implementation = new StructureTerminalImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

StructureTerminal::StructureTerminal(DummyConstructorParameter* param) : Terminal(param) {
}

StructureTerminal::~StructureTerminal() {
}


void StructureTerminal::initializeTransientMembers() {
	StructureTerminalImplementation* _implementation = (StructureTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

int StructureTerminal::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	StructureTerminalImplementation* _implementation = (StructureTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEOBJECTMENUSELECT__PLAYERCREATURE_BYTE_);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->handleObjectMenuSelect(player, selectedID);
}

void StructureTerminal::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player) {
	StructureTerminalImplementation* _implementation = (StructureTerminalImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->fillObjectMenuResponse(menuResponse, player);
}

DistributedObjectServant* StructureTerminal::_getImplementation() {

	_updated = true;
	return _impl;
}

void StructureTerminal::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	StructureTerminalImplementation
 */

StructureTerminalImplementation::StructureTerminalImplementation(DummyConstructorParameter* param) : TerminalImplementation(param) {
	_initializeImplementation();
}


StructureTerminalImplementation::~StructureTerminalImplementation() {
}


void StructureTerminalImplementation::finalize() {
}

void StructureTerminalImplementation::_initializeImplementation() {
	_setClassHelper(StructureTerminalHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void StructureTerminalImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (StructureTerminal*) stub;
	TerminalImplementation::_setStub(stub);
}

DistributedObjectStub* StructureTerminalImplementation::_getStub() {
	return _this;
}

StructureTerminalImplementation::operator const StructureTerminal*() {
	return _this;
}

void StructureTerminalImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void StructureTerminalImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void StructureTerminalImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void StructureTerminalImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void StructureTerminalImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void StructureTerminalImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void StructureTerminalImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void StructureTerminalImplementation::_serializationHelperMethod() {
	TerminalImplementation::_serializationHelperMethod();

	_setClassName("StructureTerminal");

}

void StructureTerminalImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(StructureTerminalImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool StructureTerminalImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (TerminalImplementation::readObjectMember(stream, _name))
		return true;


	return false;
}

void StructureTerminalImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = StructureTerminalImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int StructureTerminalImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;

	return 0 + TerminalImplementation::writeObjectMembers(stream);
}

StructureTerminalImplementation::StructureTerminalImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/terminal/structure/StructureTerminal.idl():  		Logger.setLoggingName("StructureTerminal");
	Logger::setLoggingName("StructureTerminal");
}

void StructureTerminalImplementation::initializeTransientMembers() {
	// server/zone/objects/tangible/terminal/structure/StructureTerminal.idl():  		super.initializeTransientMembers();
	TerminalImplementation::initializeTransientMembers();
	// server/zone/objects/tangible/terminal/structure/StructureTerminal.idl():  		Logger.setLoggingName("StructureTerminal");
	Logger::setLoggingName("StructureTerminal");
}

/*
 *	StructureTerminalAdapter
 */

StructureTerminalAdapter::StructureTerminalAdapter(StructureTerminalImplementation* obj) : TerminalAdapter(obj) {
}

Packet* StructureTerminalAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		initializeTransientMembers();
		break;
	case RPC_HANDLEOBJECTMENUSELECT__PLAYERCREATURE_BYTE_:
		resp->insertSignedInt(handleObjectMenuSelect((PlayerCreature*) inv->getObjectParameter(), inv->getByteParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

void StructureTerminalAdapter::initializeTransientMembers() {
	((StructureTerminalImplementation*) impl)->initializeTransientMembers();
}

int StructureTerminalAdapter::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	return ((StructureTerminalImplementation*) impl)->handleObjectMenuSelect(player, selectedID);
}

/*
 *	StructureTerminalHelper
 */

StructureTerminalHelper* StructureTerminalHelper::staticInitializer = StructureTerminalHelper::instance();

StructureTerminalHelper::StructureTerminalHelper() {
	className = "StructureTerminal";

	Core::getObjectBroker()->registerClass(className, this);
}

void StructureTerminalHelper::finalizeHelper() {
	StructureTerminalHelper::finalize();
}

DistributedObject* StructureTerminalHelper::instantiateObject() {
	return new StructureTerminal(DummyConstructorParameter::instance());
}

DistributedObjectServant* StructureTerminalHelper::instantiateServant() {
	return new StructureTerminalImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* StructureTerminalHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new StructureTerminalAdapter((StructureTerminalImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

