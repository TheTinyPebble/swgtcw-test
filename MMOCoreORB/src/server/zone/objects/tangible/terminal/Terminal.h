/*
 *	server/zone/objects/tangible/terminal/Terminal.h generated by engine3 IDL compiler 0.60
 */

#ifndef TERMINAL_H_
#define TERMINAL_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

namespace server {
namespace zone {

class Zone;

} // namespace zone
} // namespace server

using namespace server::zone;

#include "engine/lua/LuaObject.h"

#include "server/zone/objects/tangible/TangibleObject.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace terminal {

class Terminal : public TangibleObject {
public:
	Terminal();

	void initializeTransientMembers();

	void notifyDissapear(QuadTreeEntry* obj);

	bool isTerminal();

	bool isGuildTerminal();

	void setControlledObject(SceneObject* obj);

	SceneObject* getControlledObject();

	bool isElevatorTerminal();

	DistributedObjectServant* _getImplementation();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	Terminal(DummyConstructorParameter* param);

	virtual ~Terminal();

	friend class TerminalHelper;
};

} // namespace terminal
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::terminal;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace terminal {

class TerminalImplementation : public TangibleObjectImplementation {
protected:
	ManagedReference<SceneObject* > controlledObject;

public:
	TerminalImplementation();

	TerminalImplementation(DummyConstructorParameter* param);

	void initializeTransientMembers();

	void notifyDissapear(QuadTreeEntry* obj);

	bool isTerminal();

	virtual bool isGuildTerminal();

	void setControlledObject(SceneObject* obj);

	SceneObject* getControlledObject();

	virtual bool isElevatorTerminal();

	Terminal* _this;

	operator const Terminal*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~TerminalImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();

	friend class Terminal;
};

class TerminalAdapter : public TangibleObjectAdapter {
public:
	TerminalAdapter(TerminalImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initializeTransientMembers();

	bool isTerminal();

	bool isGuildTerminal();

	void setControlledObject(SceneObject* obj);

	SceneObject* getControlledObject();

	bool isElevatorTerminal();

};

class TerminalHelper : public DistributedObjectClassHelper, public Singleton<TerminalHelper> {
	static TerminalHelper* staticInitializer;

public:
	TerminalHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<TerminalHelper>;
};

} // namespace terminal
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::terminal;

#endif /*TERMINAL_H_*/
