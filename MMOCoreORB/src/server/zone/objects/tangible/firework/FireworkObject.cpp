/*
 *	server/zone/objects/tangible/firework/FireworkObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "FireworkObject.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/Zone.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/ZoneServer.h"

/*
 *	FireworkObjectStub
 */

enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 6,RPC_HANDLEOBJECTMENUSELECT__PLAYERCREATURE_BYTE_,RPC_LAUNCH__PLAYERCREATURE_};

FireworkObject::FireworkObject() : TangibleObject(DummyConstructorParameter::instance()) {
	FireworkObjectImplementation* _implementation = new FireworkObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

FireworkObject::FireworkObject(DummyConstructorParameter* param) : TangibleObject(param) {
}

FireworkObject::~FireworkObject() {
}


void FireworkObject::initializeTransientMembers() {
	FireworkObjectImplementation* _implementation = (FireworkObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

int FireworkObject::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	FireworkObjectImplementation* _implementation = (FireworkObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEOBJECTMENUSELECT__PLAYERCREATURE_BYTE_);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->handleObjectMenuSelect(player, selectedID);
}

void FireworkObject::loadTemplateData(SharedObjectTemplate* templateData) {
	FireworkObjectImplementation* _implementation = (FireworkObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->loadTemplateData(templateData);
}

void FireworkObject::launch(PlayerCreature* player) {
	FireworkObjectImplementation* _implementation = (FireworkObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_LAUNCH__PLAYERCREATURE_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->launch(player);
}

DistributedObjectServant* FireworkObject::_getImplementation() {

	_updated = true;
	return _impl;
}

void FireworkObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	FireworkObjectImplementation
 */

FireworkObjectImplementation::FireworkObjectImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
	_initializeImplementation();
}


FireworkObjectImplementation::~FireworkObjectImplementation() {
}


void FireworkObjectImplementation::finalize() {
}

void FireworkObjectImplementation::_initializeImplementation() {
	_setClassHelper(FireworkObjectHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void FireworkObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (FireworkObject*) stub;
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* FireworkObjectImplementation::_getStub() {
	return _this;
}

FireworkObjectImplementation::operator const FireworkObject*() {
	return _this;
}

void FireworkObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void FireworkObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void FireworkObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void FireworkObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void FireworkObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void FireworkObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void FireworkObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void FireworkObjectImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("FireworkObject");

}

void FireworkObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(FireworkObjectImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool FireworkObjectImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (TangibleObjectImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "fireworkObject") {
		TypeInfo<String >::parseFromBinaryStream(&fireworkObject, stream);
		return true;
	}


	return false;
}

void FireworkObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = FireworkObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int FireworkObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "fireworkObject";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<String >::toBinaryStream(&fireworkObject, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 1 + TangibleObjectImplementation::writeObjectMembers(stream);
}

FireworkObjectImplementation::FireworkObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/firework/FireworkObject.idl():  		Logger.setLoggingName("FireworkObject");
	Logger::setLoggingName("FireworkObject");
	// server/zone/objects/tangible/firework/FireworkObject.idl():  		fireworkObject = "object/static/firework/fx_01.iff";
	fireworkObject = "object/static/firework/fx_01.iff";
}

void FireworkObjectImplementation::initializeTransientMembers() {
	// server/zone/objects/tangible/firework/FireworkObject.idl():  		super.initializeTransientMembers();
	TangibleObjectImplementation::initializeTransientMembers();
	// server/zone/objects/tangible/firework/FireworkObject.idl():  		Logger.setLoggingName("FireworkObject");
	Logger::setLoggingName("FireworkObject");
}

void FireworkObjectImplementation::loadTemplateData(SharedObjectTemplate* templateData) {
	// server/zone/objects/tangible/firework/FireworkObject.idl():  		super.loadTemplateData(templateData);
	TangibleObjectImplementation::loadTemplateData(templateData);
	// server/zone/objects/tangible/firework/FireworkObject.idl():  		FireworkObjectTemplate 
	if (!templateData->isFireworkObjectTemplate()){
	// server/zone/objects/tangible/firework/FireworkObject.idl():  			error("critical error");
	error("critical error");
	// server/zone/objects/tangible/firework/FireworkObject.idl():  			return;
	return;
}
	// server/zone/objects/tangible/firework/FireworkObject.idl():  		FireworkObjectTemplate templ = (FireworkObjectTemplate) templateData;
	FireworkObjectTemplate* templ = (FireworkObjectTemplate*) templateData;
	// server/zone/objects/tangible/firework/FireworkObject.idl():  		fireworkObject 
	if (templ == NULL)	// server/zone/objects/tangible/firework/FireworkObject.idl():  			return;
	return;
	// server/zone/objects/tangible/firework/FireworkObject.idl():  		fireworkObject = templ.getFireworkObject();
	fireworkObject = templ->getFireworkObject();
}

/*
 *	FireworkObjectAdapter
 */

FireworkObjectAdapter::FireworkObjectAdapter(FireworkObjectImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* FireworkObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		initializeTransientMembers();
		break;
	case RPC_HANDLEOBJECTMENUSELECT__PLAYERCREATURE_BYTE_:
		resp->insertSignedInt(handleObjectMenuSelect((PlayerCreature*) inv->getObjectParameter(), inv->getByteParameter()));
		break;
	case RPC_LAUNCH__PLAYERCREATURE_:
		launch((PlayerCreature*) inv->getObjectParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void FireworkObjectAdapter::initializeTransientMembers() {
	((FireworkObjectImplementation*) impl)->initializeTransientMembers();
}

int FireworkObjectAdapter::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	return ((FireworkObjectImplementation*) impl)->handleObjectMenuSelect(player, selectedID);
}

void FireworkObjectAdapter::launch(PlayerCreature* player) {
	((FireworkObjectImplementation*) impl)->launch(player);
}

/*
 *	FireworkObjectHelper
 */

FireworkObjectHelper* FireworkObjectHelper::staticInitializer = FireworkObjectHelper::instance();

FireworkObjectHelper::FireworkObjectHelper() {
	className = "FireworkObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void FireworkObjectHelper::finalizeHelper() {
	FireworkObjectHelper::finalize();
}

DistributedObject* FireworkObjectHelper::instantiateObject() {
	return new FireworkObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* FireworkObjectHelper::instantiateServant() {
	return new FireworkObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* FireworkObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new FireworkObjectAdapter((FireworkObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

