/*
 *	server/zone/objects/tangible/crafting/CraftingStation.cpp generated by engine3 IDL compiler 0.55
 */

#include "CraftingStation.h"

#include "CraftingStationImplementation.h"

#include "../../player/Player.h"

#include "../../creature/CreatureObject.h"

#include "../TangibleObject.h"

/*
 *	CraftingStationStub
 */

CraftingStation::CraftingStation(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn) : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new CraftingStationImplementation(oid, tempCRC, n, tempn);
	_impl->_setStub(this);
}

CraftingStation::CraftingStation(CreatureObject* creature, unsigned int tempCRC, const UnicodeString& n, const String& tempn) : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new CraftingStationImplementation(creature, tempCRC, n, tempn);
	_impl->_setStub(this);
}

CraftingStation::CraftingStation(DummyConstructorParameter* param) : TangibleObject(param) {
}

CraftingStation::~CraftingStation() {
}

void CraftingStation::generateAttributes(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((CraftingStationImplementation*) _impl)->generateAttributes(player);
}

int CraftingStation::useObject(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return ((CraftingStationImplementation*) _impl)->useObject(player);
}

void CraftingStation::setEffectiveness(float eff) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addFloatParameter(eff);

		method.executeWithVoidReturn();
	} else
		((CraftingStationImplementation*) _impl)->setEffectiveness(eff);
}

void CraftingStation::setComplexityLevel(float comp) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addFloatParameter(comp);

		method.executeWithVoidReturn();
	} else
		((CraftingStationImplementation*) _impl)->setComplexityLevel(comp);
}

float CraftingStation::getEffectiveness() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		return method.executeWithFloatReturn();
	} else
		return ((CraftingStationImplementation*) _impl)->getEffectiveness();
}

float CraftingStation::getComplexityLevel() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		return method.executeWithFloatReturn();
	} else
		return ((CraftingStationImplementation*) _impl)->getComplexityLevel();
}

int CraftingStation::getStationType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		return method.executeWithSignedIntReturn();
	} else
		return ((CraftingStationImplementation*) _impl)->getStationType();
}

/*
 *	CraftingStationAdapter
 */

CraftingStationAdapter::CraftingStationAdapter(CraftingStationImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* CraftingStationAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		generateAttributes((Player*) inv->getObjectParameter());
		break;
	case 7:
		resp->insertSignedInt(useObject((Player*) inv->getObjectParameter()));
		break;
	case 8:
		setEffectiveness(inv->getFloatParameter());
		break;
	case 9:
		setComplexityLevel(inv->getFloatParameter());
		break;
	case 10:
		resp->insertFloat(getEffectiveness());
		break;
	case 11:
		resp->insertFloat(getComplexityLevel());
		break;
	case 12:
		resp->insertSignedInt(getStationType());
		break;
	default:
		return NULL;
	}

	return resp;
}

void CraftingStationAdapter::generateAttributes(Player* player) {
	return ((CraftingStationImplementation*) impl)->generateAttributes(player);
}

int CraftingStationAdapter::useObject(Player* player) {
	return ((CraftingStationImplementation*) impl)->useObject(player);
}

void CraftingStationAdapter::setEffectiveness(float eff) {
	return ((CraftingStationImplementation*) impl)->setEffectiveness(eff);
}

void CraftingStationAdapter::setComplexityLevel(float comp) {
	return ((CraftingStationImplementation*) impl)->setComplexityLevel(comp);
}

float CraftingStationAdapter::getEffectiveness() {
	return ((CraftingStationImplementation*) impl)->getEffectiveness();
}

float CraftingStationAdapter::getComplexityLevel() {
	return ((CraftingStationImplementation*) impl)->getComplexityLevel();
}

int CraftingStationAdapter::getStationType() {
	return ((CraftingStationImplementation*) impl)->getStationType();
}

/*
 *	CraftingStationHelper
 */

CraftingStationHelper* CraftingStationHelper::staticInitializer = CraftingStationHelper::instance();

CraftingStationHelper::CraftingStationHelper() {
	className = "CraftingStation";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void CraftingStationHelper::finalizeHelper() {
	CraftingStationHelper::finalize();
}

DistributedObject* CraftingStationHelper::instantiateObject() {
	return new CraftingStation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* CraftingStationHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new CraftingStationAdapter((CraftingStationImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	CraftingStationServant
 */

CraftingStationServant::CraftingStationServant(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int tp) : TangibleObjectImplementation(oid, tempCRC, n, tempn, tp) {
	_classHelper = CraftingStationHelper::instance();
}

CraftingStationServant::CraftingStationServant(CreatureObject* creature, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int tp) : TangibleObjectImplementation(creature, tempCRC, n, tempn, tp) {
	_classHelper = CraftingStationHelper::instance();
}

CraftingStationServant::~CraftingStationServant() {
}

void CraftingStationServant::_setStub(DistributedObjectStub* stub) {
	_this = (CraftingStation*) stub;
	TangibleObjectServant::_setStub(stub);
}

DistributedObjectStub* CraftingStationServant::_getStub() {
	return _this;
}

