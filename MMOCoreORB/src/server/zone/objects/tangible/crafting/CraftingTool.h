/*
 *	server/zone/objects/tangible/crafting/CraftingTool.h generated by engine3 IDL compiler 0.55
 */

#ifndef CRAFTINGTOOL_H_
#define CRAFTINGTOOL_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/service/Message.h"

class CreatureObject;

class Player;

class TangibleObject;

class SceneObject;

class Container;

class packets;

class Player;

class DraftSchematic;

class CraftingStation;

#include "../TangibleObject.h"

class CraftingTool : public TangibleObject {
public:
	CraftingTool(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn);

	CraftingTool(CreatureObject* creature, unsigned int tempCRC, const UnicodeString& n, const String& tempn);

	void sendTo(Player* player, bool doClose = true);

	void generateAttributes(SceneObject* obj);

	void resetSlots();

	void retriveHopperItem(Player* player);

	void cleanUp(Player* player);

	int useObject(Player* player);

	void sendToolStart(Player* player);

	void sendToolStartFailure(Player* player, const String& stfFile, const String& stfValue);

	bool hasAllRequiredResources(DraftSchematic* draftSchematic);

	void setToolEffectiveness(float eff);

	void setCraftingState(int s);

	void setWorkingTano(TangibleObject* tano);

	void setWorkingDraftSchematic(DraftSchematic* draftSchematic);

	void setInsertCount(int count);

	void setStatusReady();

	void setStatusWorking();

	void setStatusFinished();

	void setAssemblyResults(int results);

	void setRecoverResources(bool in);

	void setToolType(int in);

	void increaseInsertCount();

	bool addIngredientToSlot(int slot, TangibleObject* tano);

	void clearIngredientInSlot(int slot);

	void addTempIngredient(TangibleObject* tano);

	void clearWorkingTano();

	float getToolEffectiveness();

	int getCraftingState();

	TangibleObject* getWorkingTano();

	DraftSchematic* getWorkingDraftSchematic();

	int getInsertCount();

	TangibleObject* getIngredientInSlot(int slot);

	int getIngredientInSlotQuantity(int slot);

	int getSlotCount();

	Container* getHopper(Player* player);

	int getAssemblyResults();

	float getCraftingToolModifier();

	int getToolType();

	DraftSchematic* getCurrentDraftSchematic(int slot);

	bool isExperimenting();

	bool isReady();

	bool isFinished();

	bool isWorking();

protected:
	CraftingTool(DummyConstructorParameter* param);

	virtual ~CraftingTool();

	friend class CraftingToolHelper;
};

class CraftingToolImplementation;

class CraftingToolAdapter : public TangibleObjectAdapter {
public:
	CraftingToolAdapter(CraftingToolImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void sendTo(Player* player, bool doClose);

	void generateAttributes(SceneObject* obj);

	void resetSlots();

	void retriveHopperItem(Player* player);

	void cleanUp(Player* player);

	int useObject(Player* player);

	void sendToolStart(Player* player);

	void sendToolStartFailure(Player* player, const String& stfFile, const String& stfValue);

	bool hasAllRequiredResources(DraftSchematic* draftSchematic);

	void setToolEffectiveness(float eff);

	void setCraftingState(int s);

	void setWorkingTano(TangibleObject* tano);

	void setWorkingDraftSchematic(DraftSchematic* draftSchematic);

	void setInsertCount(int count);

	void setStatusReady();

	void setStatusWorking();

	void setStatusFinished();

	void setAssemblyResults(int results);

	void setRecoverResources(bool in);

	void setToolType(int in);

	void increaseInsertCount();

	bool addIngredientToSlot(int slot, TangibleObject* tano);

	void clearIngredientInSlot(int slot);

	void addTempIngredient(TangibleObject* tano);

	void clearWorkingTano();

	float getToolEffectiveness();

	int getCraftingState();

	TangibleObject* getWorkingTano();

	DraftSchematic* getWorkingDraftSchematic();

	int getInsertCount();

	TangibleObject* getIngredientInSlot(int slot);

	int getIngredientInSlotQuantity(int slot);

	int getSlotCount();

	Container* getHopper(Player* player);

	int getAssemblyResults();

	float getCraftingToolModifier();

	int getToolType();

	DraftSchematic* getCurrentDraftSchematic(int slot);

	bool isExperimenting();

	bool isReady();

	bool isFinished();

	bool isWorking();

protected:
	String _param1_sendToolStartFailure__Player_String_String_;
	String _param2_sendToolStartFailure__Player_String_String_;
};

class CraftingToolHelper : public DistributedObjectClassHelper, public Singleton<CraftingToolHelper> {
	static CraftingToolHelper* staticInitializer;

public:
	CraftingToolHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<CraftingToolHelper>;
};

#include "../TangibleObjectImplementation.h"

class CraftingToolServant : public TangibleObjectImplementation {
public:
	CraftingTool* _this;

public:
	CraftingToolServant(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int type);
	CraftingToolServant(CreatureObject* creature, unsigned int tempCRC, const UnicodeString& n, const String& tempn, int type);
	virtual ~CraftingToolServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*CRAFTINGTOOL_H_*/
