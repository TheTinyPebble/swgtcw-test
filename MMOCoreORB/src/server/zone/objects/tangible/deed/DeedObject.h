/*
 *	server/zone/objects/tangible/deed/DeedObject.h generated by engine3 IDL compiler 0.55
 */

#ifndef DEEDOBJECT_H_
#define DEEDOBJECT_H_

#include "engine/orb/DistributedObjectBroker.h"

class TangibleObject;

class Player;

class CreatureObject;

class SceneObject;

#include "../TangibleObject.h"

class DeedObject : public TangibleObject {
public:
	DeedObject(CreatureObject* creature, unsigned int objcrc, const UnicodeString& customname, const String& stfname);

	DeedObject(unsigned long long objid, unsigned int objcrc, const UnicodeString& customname, const String& stfname);

	DeedObject(unsigned long long objid);

	int useObject(Player* player);

	SceneObject* generateObject(Player* player);

	void parseItemAttributes();

	void setTargetStfFile(const String& stffile);

	void setTargetStfName(const String& stfname);

	void setTargetObjectFile(const String& objfile);

	void setTargetCustomName(const UnicodeString& customname);

	void setTargetObjectSubType(unsigned int subtype);

	String& getTargetStfFile();

	String& getTargetStfName();

	String& getTargetObjectFile();

	UnicodeString& getTargetCustomName();

	unsigned int getTargetObjectCRC();

	unsigned int getTargetObjectSubType();

	bool isInstallationDeed();

	bool isBuildingDeed();

	bool isPetDeed();

	bool isDroidDeed();

	bool isVehicleDeed();

	bool isResourceDeed();

	unsigned char getLotSize();

	unsigned int getTargetConstructionObjectCRC();

protected:
	DeedObject(DummyConstructorParameter* param);

	virtual ~DeedObject();

	String _return_getTargetObjectFile;
	String _return_getTargetStfFile;
	String _return_getTargetStfName;

	UnicodeString _return_getTargetCustomName;

	friend class DeedObjectHelper;
};

class DeedObjectImplementation;

class DeedObjectAdapter : public TangibleObjectAdapter {
public:
	DeedObjectAdapter(DeedObjectImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	int useObject(Player* player);

	SceneObject* generateObject(Player* player);

	void parseItemAttributes();

	void setTargetStfFile(const String& stffile);

	void setTargetStfName(const String& stfname);

	void setTargetObjectFile(const String& objfile);

	void setTargetCustomName(const UnicodeString& customname);

	void setTargetObjectSubType(unsigned int subtype);

	String& getTargetStfFile();

	String& getTargetStfName();

	String& getTargetObjectFile();

	UnicodeString& getTargetCustomName();

	unsigned int getTargetObjectCRC();

	unsigned int getTargetObjectSubType();

	bool isInstallationDeed();

	bool isBuildingDeed();

	bool isPetDeed();

	bool isDroidDeed();

	bool isVehicleDeed();

	bool isResourceDeed();

	unsigned char getLotSize();

	unsigned int getTargetConstructionObjectCRC();

protected:
	String _param0_setTargetStfFile__String_;
	String _param0_setTargetStfName__String_;
	String _param0_setTargetObjectFile__String_;
	UnicodeString _param0_setTargetCustomName__UnicodeString_;
};

class DeedObjectHelper : public DistributedObjectClassHelper, public Singleton<DeedObjectHelper> {
	static DeedObjectHelper* staticInitializer;

public:
	DeedObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<DeedObjectHelper>;
};

#include "../TangibleObjectImplementation.h"

class DeedObjectServant : public TangibleObjectImplementation {
public:
	DeedObject* _this;

public:
	DeedObjectServant(CreatureObject* creature, unsigned int objcrc, const UnicodeString& customname, const String& stfname, int tp);
	DeedObjectServant(unsigned long long objid, unsigned int objcrc, const UnicodeString& customname, const String& stfname, int tp);
	DeedObjectServant(unsigned long long objid, int tp);
	virtual ~DeedObjectServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*DEEDOBJECT_H_*/
