/*
 *	server/zone/objects/tangible/deed/DeedObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "DeedObject.h"

#include "DeedObjectImplementation.h"

#include "../TangibleObject.h"

#include "../../player/Player.h"

#include "../../creature/CreatureObject.h"

#include "../../scene/SceneObject.h"

/*
 *	DeedObjectStub
 */

DeedObject::DeedObject(CreatureObject* creature, unsigned int objcrc, const UnicodeString& customname, const String& stfname) : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new DeedObjectImplementation(creature, objcrc, customname, stfname);
	_impl->_setStub(this);
}

DeedObject::DeedObject(unsigned long long objid, unsigned int objcrc, const UnicodeString& customname, const String& stfname) : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new DeedObjectImplementation(objid, objcrc, customname, stfname);
	_impl->_setStub(this);
}

DeedObject::DeedObject(unsigned long long objid) : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new DeedObjectImplementation(objid);
	_impl->_setStub(this);
}

DeedObject::DeedObject(DummyConstructorParameter* param) : TangibleObject(param) {
}

DeedObject::~DeedObject() {
}

int DeedObject::useObject(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return ((DeedObjectImplementation*) _impl)->useObject(player);
}

SceneObject* DeedObject::generateObject(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((DeedObjectImplementation*) _impl)->generateObject(player);
}

void DeedObject::parseItemAttributes() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		method.executeWithVoidReturn();
	} else
		((DeedObjectImplementation*) _impl)->parseItemAttributes();
}

void DeedObject::setTargetStfFile(const String& stffile) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addAsciiParameter(stffile);

		method.executeWithVoidReturn();
	} else
		((DeedObjectImplementation*) _impl)->setTargetStfFile(stffile);
}

void DeedObject::setTargetStfName(const String& stfname) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addAsciiParameter(stfname);

		method.executeWithVoidReturn();
	} else
		((DeedObjectImplementation*) _impl)->setTargetStfName(stfname);
}

void DeedObject::setTargetObjectFile(const String& objfile) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addAsciiParameter(objfile);

		method.executeWithVoidReturn();
	} else
		((DeedObjectImplementation*) _impl)->setTargetObjectFile(objfile);
}

void DeedObject::setTargetCustomName(const UnicodeString& customname) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addUnicodeParameter(customname);

		method.executeWithVoidReturn();
	} else
		((DeedObjectImplementation*) _impl)->setTargetCustomName(customname);
}

void DeedObject::setTargetObjectSubType(unsigned int subtype) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addUnsignedIntParameter(subtype);

		method.executeWithVoidReturn();
	} else
		((DeedObjectImplementation*) _impl)->setTargetObjectSubType(subtype);
}

String& DeedObject::getTargetStfFile() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		method.executeWithAsciiReturn(_return_getTargetStfFile);
		return _return_getTargetStfFile;
	} else
		return ((DeedObjectImplementation*) _impl)->getTargetStfFile();
}

String& DeedObject::getTargetStfName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		method.executeWithAsciiReturn(_return_getTargetStfName);
		return _return_getTargetStfName;
	} else
		return ((DeedObjectImplementation*) _impl)->getTargetStfName();
}

String& DeedObject::getTargetObjectFile() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		method.executeWithAsciiReturn(_return_getTargetObjectFile);
		return _return_getTargetObjectFile;
	} else
		return ((DeedObjectImplementation*) _impl)->getTargetObjectFile();
}

UnicodeString& DeedObject::getTargetCustomName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);

		method.executeWithUnicodeReturn(_return_getTargetCustomName);
		return _return_getTargetCustomName;
	} else
		return ((DeedObjectImplementation*) _impl)->getTargetCustomName();
}

unsigned int DeedObject::getTargetObjectCRC() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((DeedObjectImplementation*) _impl)->getTargetObjectCRC();
}

unsigned int DeedObject::getTargetObjectSubType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((DeedObjectImplementation*) _impl)->getTargetObjectSubType();
}

bool DeedObject::isInstallationDeed() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);

		return method.executeWithBooleanReturn();
	} else
		return ((DeedObjectImplementation*) _impl)->isInstallationDeed();
}

bool DeedObject::isBuildingDeed() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);

		return method.executeWithBooleanReturn();
	} else
		return ((DeedObjectImplementation*) _impl)->isBuildingDeed();
}

bool DeedObject::isPetDeed() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);

		return method.executeWithBooleanReturn();
	} else
		return ((DeedObjectImplementation*) _impl)->isPetDeed();
}

bool DeedObject::isDroidDeed() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);

		return method.executeWithBooleanReturn();
	} else
		return ((DeedObjectImplementation*) _impl)->isDroidDeed();
}

bool DeedObject::isVehicleDeed() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);

		return method.executeWithBooleanReturn();
	} else
		return ((DeedObjectImplementation*) _impl)->isVehicleDeed();
}

bool DeedObject::isResourceDeed() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);

		return method.executeWithBooleanReturn();
	} else
		return ((DeedObjectImplementation*) _impl)->isResourceDeed();
}

unsigned char DeedObject::getLotSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);

		return method.executeWithUnsignedCharReturn();
	} else
		return ((DeedObjectImplementation*) _impl)->getLotSize();
}

unsigned int DeedObject::getTargetConstructionObjectCRC() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((DeedObjectImplementation*) _impl)->getTargetConstructionObjectCRC();
}

/*
 *	DeedObjectAdapter
 */

DeedObjectAdapter::DeedObjectAdapter(DeedObjectImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* DeedObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertSignedInt(useObject((Player*) inv->getObjectParameter()));
		break;
	case 7:
		resp->insertLong(generateObject((Player*) inv->getObjectParameter())->_getObjectID());
		break;
	case 8:
		parseItemAttributes();
		break;
	case 9:
		setTargetStfFile(inv->getAsciiParameter(_param0_setTargetStfFile__String_));
		break;
	case 10:
		setTargetStfName(inv->getAsciiParameter(_param0_setTargetStfName__String_));
		break;
	case 11:
		setTargetObjectFile(inv->getAsciiParameter(_param0_setTargetObjectFile__String_));
		break;
	case 12:
		setTargetCustomName(inv->getUnicodeParameter(_param0_setTargetCustomName__UnicodeString_));
		break;
	case 13:
		setTargetObjectSubType(inv->getUnsignedIntParameter());
		break;
	case 14:
		resp->insertAscii(getTargetStfFile());
		break;
	case 15:
		resp->insertAscii(getTargetStfName());
		break;
	case 16:
		resp->insertAscii(getTargetObjectFile());
		break;
	case 17:
		resp->insertUnicode(getTargetCustomName());
		break;
	case 18:
		resp->insertInt(getTargetObjectCRC());
		break;
	case 19:
		resp->insertInt(getTargetObjectSubType());
		break;
	case 20:
		resp->insertBoolean(isInstallationDeed());
		break;
	case 21:
		resp->insertBoolean(isBuildingDeed());
		break;
	case 22:
		resp->insertBoolean(isPetDeed());
		break;
	case 23:
		resp->insertBoolean(isDroidDeed());
		break;
	case 24:
		resp->insertBoolean(isVehicleDeed());
		break;
	case 25:
		resp->insertBoolean(isResourceDeed());
		break;
	case 26:
		resp->insertByte(getLotSize());
		break;
	case 27:
		resp->insertInt(getTargetConstructionObjectCRC());
		break;
	default:
		return NULL;
	}

	return resp;
}

int DeedObjectAdapter::useObject(Player* player) {
	return ((DeedObjectImplementation*) impl)->useObject(player);
}

SceneObject* DeedObjectAdapter::generateObject(Player* player) {
	return ((DeedObjectImplementation*) impl)->generateObject(player);
}

void DeedObjectAdapter::parseItemAttributes() {
	return ((DeedObjectImplementation*) impl)->parseItemAttributes();
}

void DeedObjectAdapter::setTargetStfFile(const String& stffile) {
	return ((DeedObjectImplementation*) impl)->setTargetStfFile(stffile);
}

void DeedObjectAdapter::setTargetStfName(const String& stfname) {
	return ((DeedObjectImplementation*) impl)->setTargetStfName(stfname);
}

void DeedObjectAdapter::setTargetObjectFile(const String& objfile) {
	return ((DeedObjectImplementation*) impl)->setTargetObjectFile(objfile);
}

void DeedObjectAdapter::setTargetCustomName(const UnicodeString& customname) {
	return ((DeedObjectImplementation*) impl)->setTargetCustomName(customname);
}

void DeedObjectAdapter::setTargetObjectSubType(unsigned int subtype) {
	return ((DeedObjectImplementation*) impl)->setTargetObjectSubType(subtype);
}

String& DeedObjectAdapter::getTargetStfFile() {
	return ((DeedObjectImplementation*) impl)->getTargetStfFile();
}

String& DeedObjectAdapter::getTargetStfName() {
	return ((DeedObjectImplementation*) impl)->getTargetStfName();
}

String& DeedObjectAdapter::getTargetObjectFile() {
	return ((DeedObjectImplementation*) impl)->getTargetObjectFile();
}

UnicodeString& DeedObjectAdapter::getTargetCustomName() {
	return ((DeedObjectImplementation*) impl)->getTargetCustomName();
}

unsigned int DeedObjectAdapter::getTargetObjectCRC() {
	return ((DeedObjectImplementation*) impl)->getTargetObjectCRC();
}

unsigned int DeedObjectAdapter::getTargetObjectSubType() {
	return ((DeedObjectImplementation*) impl)->getTargetObjectSubType();
}

bool DeedObjectAdapter::isInstallationDeed() {
	return ((DeedObjectImplementation*) impl)->isInstallationDeed();
}

bool DeedObjectAdapter::isBuildingDeed() {
	return ((DeedObjectImplementation*) impl)->isBuildingDeed();
}

bool DeedObjectAdapter::isPetDeed() {
	return ((DeedObjectImplementation*) impl)->isPetDeed();
}

bool DeedObjectAdapter::isDroidDeed() {
	return ((DeedObjectImplementation*) impl)->isDroidDeed();
}

bool DeedObjectAdapter::isVehicleDeed() {
	return ((DeedObjectImplementation*) impl)->isVehicleDeed();
}

bool DeedObjectAdapter::isResourceDeed() {
	return ((DeedObjectImplementation*) impl)->isResourceDeed();
}

unsigned char DeedObjectAdapter::getLotSize() {
	return ((DeedObjectImplementation*) impl)->getLotSize();
}

unsigned int DeedObjectAdapter::getTargetConstructionObjectCRC() {
	return ((DeedObjectImplementation*) impl)->getTargetConstructionObjectCRC();
}

/*
 *	DeedObjectHelper
 */

DeedObjectHelper* DeedObjectHelper::staticInitializer = DeedObjectHelper::instance();

DeedObjectHelper::DeedObjectHelper() {
	className = "DeedObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void DeedObjectHelper::finalizeHelper() {
	DeedObjectHelper::finalize();
}

DistributedObject* DeedObjectHelper::instantiateObject() {
	return new DeedObject(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* DeedObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new DeedObjectAdapter((DeedObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	DeedObjectServant
 */

DeedObjectServant::DeedObjectServant(CreatureObject* creature, unsigned int objcrc, const UnicodeString& customname, const String& stfname, int tp) : TangibleObjectImplementation(creature, objcrc, customname, stfname, tp) {
	_classHelper = DeedObjectHelper::instance();
}

DeedObjectServant::DeedObjectServant(unsigned long long objid, unsigned int objcrc, const UnicodeString& customname, const String& stfname, int tp) : TangibleObjectImplementation(objid, objcrc, customname, stfname, tp) {
	_classHelper = DeedObjectHelper::instance();
}

DeedObjectServant::DeedObjectServant(unsigned long long objid, int tp) : TangibleObjectImplementation(objid, tp) {
	_classHelper = DeedObjectHelper::instance();
}

DeedObjectServant::~DeedObjectServant() {
}

void DeedObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (DeedObject*) stub;
	TangibleObjectServant::_setStub(stub);
}

DistributedObjectStub* DeedObjectServant::_getStub() {
	return _this;
}

