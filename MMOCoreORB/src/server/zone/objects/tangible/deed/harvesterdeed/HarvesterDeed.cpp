/*
 *	server/zone/objects/tangible/deed/harvesterdeed/HarvesterDeed.cpp generated by engine3 IDL compiler 0.55
 */

#include "HarvesterDeed.h"

#include "HarvesterDeedImplementation.h"

#include "../DeedObject.h"

#include "../../../installation/harvester/HarvesterObject.h"

#include "../../TangibleObject.h"

#include "../../../../packets.h"

#include "../../../player/Player.h"

#include "../../../creature/CreatureObject.h"

/*
 *	HarvesterDeedStub
 */

HarvesterDeed::HarvesterDeed(CreatureObject* creature, int tempCRC, const UnicodeString& n, const String& tempn) : DeedObject(DummyConstructorParameter::instance()) {
	_impl = new HarvesterDeedImplementation(creature, tempCRC, n, tempn);
	_impl->_setStub(this);
}

HarvesterDeed::HarvesterDeed(unsigned long long oid, int tempCRC, const UnicodeString& n, const String& tempn) : DeedObject(DummyConstructorParameter::instance()) {
	_impl = new HarvesterDeedImplementation(oid, tempCRC, n, tempn);
	_impl->_setStub(this);
}

HarvesterDeed::HarvesterDeed(CreatureObject* creature, HarvesterObject* hino) : DeedObject(DummyConstructorParameter::instance()) {
	_impl = new HarvesterDeedImplementation(creature, hino);
	_impl->_setStub(this);
}

HarvesterDeed::HarvesterDeed(DummyConstructorParameter* param) : DeedObject(param) {
}

HarvesterDeed::~HarvesterDeed() {
}

void HarvesterDeed::parseItemAttributes() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((HarvesterDeedImplementation*) _impl)->parseItemAttributes();
}

void HarvesterDeed::setSurplusMaintenance(int maint) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addSignedIntParameter(maint);

		method.executeWithVoidReturn();
	} else
		((HarvesterDeedImplementation*) _impl)->setSurplusMaintenance(maint);
}

void HarvesterDeed::setMaintenanceRate(float rate) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addFloatParameter(rate);

		method.executeWithVoidReturn();
	} else
		((HarvesterDeedImplementation*) _impl)->setMaintenanceRate(rate);
}

void HarvesterDeed::setSurplusPower(int pow) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addSignedIntParameter(pow);

		method.executeWithVoidReturn();
	} else
		((HarvesterDeedImplementation*) _impl)->setSurplusPower(pow);
}

void HarvesterDeed::setPowerRate(float rate) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addFloatParameter(rate);

		method.executeWithVoidReturn();
	} else
		((HarvesterDeedImplementation*) _impl)->setPowerRate(rate);
}

void HarvesterDeed::setExtractionRate(float rate) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addFloatParameter(rate);

		method.executeWithVoidReturn();
	} else
		((HarvesterDeedImplementation*) _impl)->setExtractionRate(rate);
}

void HarvesterDeed::setHopperSize(float size) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addFloatParameter(size);

		method.executeWithVoidReturn();
	} else
		((HarvesterDeedImplementation*) _impl)->setHopperSize(size);
}

void HarvesterDeed::setLotSize(int size) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addSignedIntParameter(size);

		method.executeWithVoidReturn();
	} else
		((HarvesterDeedImplementation*) _impl)->setLotSize(size);
}

int HarvesterDeed::getSurplusMaintenance() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		return method.executeWithSignedIntReturn();
	} else
		return ((HarvesterDeedImplementation*) _impl)->getSurplusMaintenance();
}

float HarvesterDeed::getMaintenanceRate() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		return method.executeWithFloatReturn();
	} else
		return ((HarvesterDeedImplementation*) _impl)->getMaintenanceRate();
}

int HarvesterDeed::getSurplusPower() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		return method.executeWithSignedIntReturn();
	} else
		return ((HarvesterDeedImplementation*) _impl)->getSurplusPower();
}

float HarvesterDeed::getPowerRate() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);

		return method.executeWithFloatReturn();
	} else
		return ((HarvesterDeedImplementation*) _impl)->getPowerRate();
}

float HarvesterDeed::getExtractionRate() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		return method.executeWithFloatReturn();
	} else
		return ((HarvesterDeedImplementation*) _impl)->getExtractionRate();
}

float HarvesterDeed::getHopperSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);

		return method.executeWithFloatReturn();
	} else
		return ((HarvesterDeedImplementation*) _impl)->getHopperSize();
}

int HarvesterDeed::getLotSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);

		return method.executeWithSignedIntReturn();
	} else
		return ((HarvesterDeedImplementation*) _impl)->getLotSize();
}

int HarvesterDeed::getSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);

		return method.executeWithSignedIntReturn();
	} else
		return ((HarvesterDeedImplementation*) _impl)->getSize();
}

/*
 *	HarvesterDeedAdapter
 */

HarvesterDeedAdapter::HarvesterDeedAdapter(HarvesterDeedImplementation* obj) : DeedObjectAdapter(obj) {
}

Packet* HarvesterDeedAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		parseItemAttributes();
		break;
	case 7:
		setSurplusMaintenance(inv->getSignedIntParameter());
		break;
	case 8:
		setMaintenanceRate(inv->getFloatParameter());
		break;
	case 9:
		setSurplusPower(inv->getSignedIntParameter());
		break;
	case 10:
		setPowerRate(inv->getFloatParameter());
		break;
	case 11:
		setExtractionRate(inv->getFloatParameter());
		break;
	case 12:
		setHopperSize(inv->getFloatParameter());
		break;
	case 13:
		setLotSize(inv->getSignedIntParameter());
		break;
	case 14:
		resp->insertSignedInt(getSurplusMaintenance());
		break;
	case 15:
		resp->insertFloat(getMaintenanceRate());
		break;
	case 16:
		resp->insertSignedInt(getSurplusPower());
		break;
	case 17:
		resp->insertFloat(getPowerRate());
		break;
	case 18:
		resp->insertFloat(getExtractionRate());
		break;
	case 19:
		resp->insertFloat(getHopperSize());
		break;
	case 20:
		resp->insertSignedInt(getLotSize());
		break;
	case 21:
		resp->insertSignedInt(getSize());
		break;
	default:
		return NULL;
	}

	return resp;
}

void HarvesterDeedAdapter::parseItemAttributes() {
	return ((HarvesterDeedImplementation*) impl)->parseItemAttributes();
}

void HarvesterDeedAdapter::setSurplusMaintenance(int maint) {
	return ((HarvesterDeedImplementation*) impl)->setSurplusMaintenance(maint);
}

void HarvesterDeedAdapter::setMaintenanceRate(float rate) {
	return ((HarvesterDeedImplementation*) impl)->setMaintenanceRate(rate);
}

void HarvesterDeedAdapter::setSurplusPower(int pow) {
	return ((HarvesterDeedImplementation*) impl)->setSurplusPower(pow);
}

void HarvesterDeedAdapter::setPowerRate(float rate) {
	return ((HarvesterDeedImplementation*) impl)->setPowerRate(rate);
}

void HarvesterDeedAdapter::setExtractionRate(float rate) {
	return ((HarvesterDeedImplementation*) impl)->setExtractionRate(rate);
}

void HarvesterDeedAdapter::setHopperSize(float size) {
	return ((HarvesterDeedImplementation*) impl)->setHopperSize(size);
}

void HarvesterDeedAdapter::setLotSize(int size) {
	return ((HarvesterDeedImplementation*) impl)->setLotSize(size);
}

int HarvesterDeedAdapter::getSurplusMaintenance() {
	return ((HarvesterDeedImplementation*) impl)->getSurplusMaintenance();
}

float HarvesterDeedAdapter::getMaintenanceRate() {
	return ((HarvesterDeedImplementation*) impl)->getMaintenanceRate();
}

int HarvesterDeedAdapter::getSurplusPower() {
	return ((HarvesterDeedImplementation*) impl)->getSurplusPower();
}

float HarvesterDeedAdapter::getPowerRate() {
	return ((HarvesterDeedImplementation*) impl)->getPowerRate();
}

float HarvesterDeedAdapter::getExtractionRate() {
	return ((HarvesterDeedImplementation*) impl)->getExtractionRate();
}

float HarvesterDeedAdapter::getHopperSize() {
	return ((HarvesterDeedImplementation*) impl)->getHopperSize();
}

int HarvesterDeedAdapter::getLotSize() {
	return ((HarvesterDeedImplementation*) impl)->getLotSize();
}

int HarvesterDeedAdapter::getSize() {
	return ((HarvesterDeedImplementation*) impl)->getSize();
}

/*
 *	HarvesterDeedHelper
 */

HarvesterDeedHelper* HarvesterDeedHelper::staticInitializer = HarvesterDeedHelper::instance();

HarvesterDeedHelper::HarvesterDeedHelper() {
	className = "HarvesterDeed";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void HarvesterDeedHelper::finalizeHelper() {
	HarvesterDeedHelper::finalize();
}

DistributedObject* HarvesterDeedHelper::instantiateObject() {
	return new HarvesterDeed(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* HarvesterDeedHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new HarvesterDeedAdapter((HarvesterDeedImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	HarvesterDeedServant
 */

HarvesterDeedServant::HarvesterDeedServant(CreatureObject* creature, int tempCRC, const UnicodeString& n, const String& tempn, int tp) : DeedObjectImplementation(creature, tempCRC, n, tempn, tp) {
	_classHelper = HarvesterDeedHelper::instance();
}

HarvesterDeedServant::HarvesterDeedServant(unsigned long long oid, int tempCRC, const UnicodeString& n, const String& tempn, int tp) : DeedObjectImplementation(oid, tempCRC, n, tempn, tp) {
	_classHelper = HarvesterDeedHelper::instance();
}

HarvesterDeedServant::HarvesterDeedServant(unsigned long long oid, int tp) : DeedObjectImplementation(oid, tp) {
	_classHelper = HarvesterDeedHelper::instance();
}

HarvesterDeedServant::~HarvesterDeedServant() {
}

void HarvesterDeedServant::_setStub(DistributedObjectStub* stub) {
	_this = (HarvesterDeed*) stub;
	DeedObjectServant::_setStub(stub);
}

DistributedObjectStub* HarvesterDeedServant::_getStub() {
	return _this;
}

