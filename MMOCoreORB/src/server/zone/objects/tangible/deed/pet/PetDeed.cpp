/*
 *	server/zone/objects/tangible/deed/pet/PetDeed.cpp generated by engine3 IDL compiler 0.60
 */

#include "PetDeed.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/Zone.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/templates/SharedObjectTemplate.h"

/*
 *	PetDeedStub
 */

enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 6,RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_,RPC_ISPETDEEDOBJECT__};

PetDeed::PetDeed() : Deed(DummyConstructorParameter::instance()) {
	PetDeedImplementation* _implementation = new PetDeedImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("PetDeed");
}

PetDeed::PetDeed(DummyConstructorParameter* param) : Deed(param) {
	_setClassName("PetDeed");
}

PetDeed::~PetDeed() {
}



void PetDeed::initializeTransientMembers() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void PetDeed::loadTemplateData(SharedObjectTemplate* templateData) {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->loadTemplateData(templateData);
}

void PetDeed::fillAttributeList(AttributeListMessage* alm, CreatureObject* object) {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->fillAttributeList(alm, object);
}

void PetDeed::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player) {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->fillObjectMenuResponse(menuResponse, player);
}

int PetDeed::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->handleObjectMenuSelect(player, selectedID);
}

void PetDeed::updateCraftingValues(CraftingValues* values, bool firstUpdate) {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->updateCraftingValues(values, firstUpdate);
}

bool PetDeed::isPetDeedObject() {
	PetDeedImplementation* _implementation = static_cast<PetDeedImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISPETDEEDOBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isPetDeedObject();
}

DistributedObjectServant* PetDeed::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* PetDeed::_getImplementationForRead() {
	return _impl;
}

void PetDeed::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	PetDeedImplementation
 */

PetDeedImplementation::PetDeedImplementation(DummyConstructorParameter* param) : DeedImplementation(param) {
	_initializeImplementation();
}


PetDeedImplementation::~PetDeedImplementation() {
}


void PetDeedImplementation::finalize() {
}

void PetDeedImplementation::_initializeImplementation() {
	_setClassHelper(PetDeedHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void PetDeedImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<PetDeed*>(stub);
	DeedImplementation::_setStub(stub);
}

DistributedObjectStub* PetDeedImplementation::_getStub() {
	return _this.get();
}

PetDeedImplementation::operator const PetDeed*() {
	return _this.get();
}

void PetDeedImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void PetDeedImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void PetDeedImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void PetDeedImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void PetDeedImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void PetDeedImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void PetDeedImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void PetDeedImplementation::_serializationHelperMethod() {
	DeedImplementation::_serializationHelperMethod();

	_setClassName("PetDeed");

}

void PetDeedImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(PetDeedImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool PetDeedImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (DeedImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xea192f6: //PetDeed.hitPoints
		TypeInfo<int >::parseFromBinaryStream(&hitPoints, stream);
		return true;

	case 0x5fe2df88: //PetDeed.controlDeviceObjectTemplate
		TypeInfo<String >::parseFromBinaryStream(&controlDeviceObjectTemplate, stream);
		return true;

	}

	return false;
}

void PetDeedImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = PetDeedImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int PetDeedImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = DeedImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0xea192f6; //PetDeed.hitPoints
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&hitPoints, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x5fe2df88; //PetDeed.controlDeviceObjectTemplate
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&controlDeviceObjectTemplate, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 2;
}

PetDeedImplementation::PetDeedImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		Logger.setLoggingName("PetDeed");
	Logger::setLoggingName("PetDeed");
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		hitPoints = 1500;
	hitPoints = 1500;
}

bool PetDeedImplementation::isPetDeedObject() {
	// server/zone/objects/tangible/deed/pet/PetDeed.idl():  		return true;
	return true;
}

/*
 *	PetDeedAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


PetDeedAdapter::PetDeedAdapter(PetDeed* obj) : DeedAdapter(obj) {
}

void PetDeedAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			initializeTransientMembers();
		}
		break;
	case RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_:
		{
			resp->insertSignedInt(handleObjectMenuSelect(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getByteParameter()));
		}
		break;
	case RPC_ISPETDEEDOBJECT__:
		{
			resp->insertBoolean(isPetDeedObject());
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void PetDeedAdapter::initializeTransientMembers() {
	(static_cast<PetDeed*>(stub))->initializeTransientMembers();
}

int PetDeedAdapter::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	return (static_cast<PetDeed*>(stub))->handleObjectMenuSelect(player, selectedID);
}

bool PetDeedAdapter::isPetDeedObject() {
	return (static_cast<PetDeed*>(stub))->isPetDeedObject();
}

/*
 *	PetDeedHelper
 */

PetDeedHelper* PetDeedHelper::staticInitializer = PetDeedHelper::instance();

PetDeedHelper::PetDeedHelper() {
	className = "PetDeed";

	Core::getObjectBroker()->registerClass(className, this);
}

void PetDeedHelper::finalizeHelper() {
	PetDeedHelper::finalize();
}

DistributedObject* PetDeedHelper::instantiateObject() {
	return new PetDeed(DummyConstructorParameter::instance());
}

DistributedObjectServant* PetDeedHelper::instantiateServant() {
	return new PetDeedImplementation();
}

DistributedObjectAdapter* PetDeedHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new PetDeedAdapter(static_cast<PetDeed*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

