/*
 *	server/zone/objects/tangible/deed/playerhouse/PlayerHouseDeed.cpp generated by engine3 IDL compiler 0.60
 */

#include "PlayerHouseDeed.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/player/PlayerCreature.h"

/*
 *	PlayerHouseDeedStub
 */

PlayerHouseDeed::PlayerHouseDeed() : Deed(DummyConstructorParameter::instance()) {
	_impl = new PlayerHouseDeedImplementation();
	_impl->_setStub(this);
}

PlayerHouseDeed::PlayerHouseDeed(DummyConstructorParameter* param) : Deed(param) {
}

PlayerHouseDeed::~PlayerHouseDeed() {
}


void PlayerHouseDeed::initializeTransientMembers() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((PlayerHouseDeedImplementation*) _impl)->initializeTransientMembers();
}

int PlayerHouseDeed::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerHouseDeedImplementation*) _impl)->handleObjectMenuSelect(player, selectedID);
}

/*
 *	PlayerHouseDeedImplementation
 */

PlayerHouseDeedImplementation::PlayerHouseDeedImplementation(DummyConstructorParameter* param) : DeedImplementation(param) {
	_initializeImplementation();
}

PlayerHouseDeedImplementation::~PlayerHouseDeedImplementation() {
}


void PlayerHouseDeedImplementation::finalize() {
}

void PlayerHouseDeedImplementation::_initializeImplementation() {
	_setClassHelper(PlayerHouseDeedHelper::instance());

	_serializationHelperMethod();
}

void PlayerHouseDeedImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (PlayerHouseDeed*) stub;
	DeedImplementation::_setStub(stub);
}

DistributedObjectStub* PlayerHouseDeedImplementation::_getStub() {
	return _this;
}

PlayerHouseDeedImplementation::operator const PlayerHouseDeed*() {
	return _this;
}

void PlayerHouseDeedImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void PlayerHouseDeedImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void PlayerHouseDeedImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void PlayerHouseDeedImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void PlayerHouseDeedImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void PlayerHouseDeedImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void PlayerHouseDeedImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void PlayerHouseDeedImplementation::_serializationHelperMethod() {
	DeedImplementation::_serializationHelperMethod();

	_setClassName("PlayerHouseDeed");

}

PlayerHouseDeedImplementation::PlayerHouseDeedImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/deed/playerhouse/PlayerHouseDeed.idl(56):  		Logger.setLoggingName("PlayerHouseDeed");
	Logger::setLoggingName("PlayerHouseDeed");
}

/*
 *	PlayerHouseDeedAdapter
 */

PlayerHouseDeedAdapter::PlayerHouseDeedAdapter(PlayerHouseDeedImplementation* obj) : DeedAdapter(obj) {
}

Packet* PlayerHouseDeedAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initializeTransientMembers();
		break;
	case 7:
		resp->insertSignedInt(handleObjectMenuSelect((PlayerCreature*) inv->getObjectParameter(), inv->getByteParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

void PlayerHouseDeedAdapter::initializeTransientMembers() {
	((PlayerHouseDeedImplementation*) impl)->initializeTransientMembers();
}

int PlayerHouseDeedAdapter::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	return ((PlayerHouseDeedImplementation*) impl)->handleObjectMenuSelect(player, selectedID);
}

/*
 *	PlayerHouseDeedHelper
 */

PlayerHouseDeedHelper* PlayerHouseDeedHelper::staticInitializer = PlayerHouseDeedHelper::instance();

PlayerHouseDeedHelper::PlayerHouseDeedHelper() {
	className = "PlayerHouseDeed";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void PlayerHouseDeedHelper::finalizeHelper() {
	PlayerHouseDeedHelper::finalize();
}

DistributedObject* PlayerHouseDeedHelper::instantiateObject() {
	return new PlayerHouseDeed(DummyConstructorParameter::instance());
}

DistributedObjectServant* PlayerHouseDeedHelper::instantiateServant() {
	return new PlayerHouseDeedImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* PlayerHouseDeedHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new PlayerHouseDeedAdapter((PlayerHouseDeedImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

