/*
 *	server/zone/objects/tangible/deed/generatordeed/GeneratorDeed.cpp generated by engine3 IDL compiler 0.55
 */

#include "GeneratorDeed.h"

#include "GeneratorDeedImplementation.h"

#include "../DeedObject.h"

#include "../../TangibleObject.h"

#include "../../../../packets.h"

#include "../../../player/Player.h"

#include "../../../creature/CreatureObject.h"

/*
 *	GeneratorDeedStub
 */

GeneratorDeed::GeneratorDeed(CreatureObject* creature, int tempCRC, const UnicodeString& n, const String& tempn) : DeedObject(DummyConstructorParameter::instance()) {
	_impl = new GeneratorDeedImplementation(creature, tempCRC, n, tempn);
	_impl->_setStub(this);
}

GeneratorDeed::GeneratorDeed(unsigned long long oid, int tempCRC, const UnicodeString& n, const String& tempn) : DeedObject(DummyConstructorParameter::instance()) {
	_impl = new GeneratorDeedImplementation(oid, tempCRC, n, tempn);
	_impl->_setStub(this);
}

GeneratorDeed::GeneratorDeed(DummyConstructorParameter* param) : DeedObject(param) {
}

GeneratorDeed::~GeneratorDeed() {
}

void GeneratorDeed::parseItemAttributes() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((GeneratorDeedImplementation*) _impl)->parseItemAttributes();
}

void GeneratorDeed::setSurplusMaintenance(int maint) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addSignedIntParameter(maint);

		method.executeWithVoidReturn();
	} else
		((GeneratorDeedImplementation*) _impl)->setSurplusMaintenance(maint);
}

void GeneratorDeed::setMaintenanceRate(float rate) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addFloatParameter(rate);

		method.executeWithVoidReturn();
	} else
		((GeneratorDeedImplementation*) _impl)->setMaintenanceRate(rate);
}

void GeneratorDeed::setExtractionRate(float rate) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addFloatParameter(rate);

		method.executeWithVoidReturn();
	} else
		((GeneratorDeedImplementation*) _impl)->setExtractionRate(rate);
}

void GeneratorDeed::setHopperSize(float size) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addFloatParameter(size);

		method.executeWithVoidReturn();
	} else
		((GeneratorDeedImplementation*) _impl)->setHopperSize(size);
}

void GeneratorDeed::setLotSize(int size) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addSignedIntParameter(size);

		method.executeWithVoidReturn();
	} else
		((GeneratorDeedImplementation*) _impl)->setLotSize(size);
}

int GeneratorDeed::getSurplusMaintenance() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		return method.executeWithSignedIntReturn();
	} else
		return ((GeneratorDeedImplementation*) _impl)->getSurplusMaintenance();
}

float GeneratorDeed::getMaintenanceRate() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		return method.executeWithFloatReturn();
	} else
		return ((GeneratorDeedImplementation*) _impl)->getMaintenanceRate();
}

float GeneratorDeed::getExtractionRate() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		return method.executeWithFloatReturn();
	} else
		return ((GeneratorDeedImplementation*) _impl)->getExtractionRate();
}

float GeneratorDeed::getHopperSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		return method.executeWithFloatReturn();
	} else
		return ((GeneratorDeedImplementation*) _impl)->getHopperSize();
}

int GeneratorDeed::getLotSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		return method.executeWithSignedIntReturn();
	} else
		return ((GeneratorDeedImplementation*) _impl)->getLotSize();
}

/*
 *	GeneratorDeedAdapter
 */

GeneratorDeedAdapter::GeneratorDeedAdapter(GeneratorDeedImplementation* obj) : DeedObjectAdapter(obj) {
}

Packet* GeneratorDeedAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		parseItemAttributes();
		break;
	case 7:
		setSurplusMaintenance(inv->getSignedIntParameter());
		break;
	case 8:
		setMaintenanceRate(inv->getFloatParameter());
		break;
	case 9:
		setExtractionRate(inv->getFloatParameter());
		break;
	case 10:
		setHopperSize(inv->getFloatParameter());
		break;
	case 11:
		setLotSize(inv->getSignedIntParameter());
		break;
	case 12:
		resp->insertSignedInt(getSurplusMaintenance());
		break;
	case 13:
		resp->insertFloat(getMaintenanceRate());
		break;
	case 14:
		resp->insertFloat(getExtractionRate());
		break;
	case 15:
		resp->insertFloat(getHopperSize());
		break;
	case 16:
		resp->insertSignedInt(getLotSize());
		break;
	default:
		return NULL;
	}

	return resp;
}

void GeneratorDeedAdapter::parseItemAttributes() {
	return ((GeneratorDeedImplementation*) impl)->parseItemAttributes();
}

void GeneratorDeedAdapter::setSurplusMaintenance(int maint) {
	return ((GeneratorDeedImplementation*) impl)->setSurplusMaintenance(maint);
}

void GeneratorDeedAdapter::setMaintenanceRate(float rate) {
	return ((GeneratorDeedImplementation*) impl)->setMaintenanceRate(rate);
}

void GeneratorDeedAdapter::setExtractionRate(float rate) {
	return ((GeneratorDeedImplementation*) impl)->setExtractionRate(rate);
}

void GeneratorDeedAdapter::setHopperSize(float size) {
	return ((GeneratorDeedImplementation*) impl)->setHopperSize(size);
}

void GeneratorDeedAdapter::setLotSize(int size) {
	return ((GeneratorDeedImplementation*) impl)->setLotSize(size);
}

int GeneratorDeedAdapter::getSurplusMaintenance() {
	return ((GeneratorDeedImplementation*) impl)->getSurplusMaintenance();
}

float GeneratorDeedAdapter::getMaintenanceRate() {
	return ((GeneratorDeedImplementation*) impl)->getMaintenanceRate();
}

float GeneratorDeedAdapter::getExtractionRate() {
	return ((GeneratorDeedImplementation*) impl)->getExtractionRate();
}

float GeneratorDeedAdapter::getHopperSize() {
	return ((GeneratorDeedImplementation*) impl)->getHopperSize();
}

int GeneratorDeedAdapter::getLotSize() {
	return ((GeneratorDeedImplementation*) impl)->getLotSize();
}

/*
 *	GeneratorDeedHelper
 */

GeneratorDeedHelper* GeneratorDeedHelper::staticInitializer = GeneratorDeedHelper::instance();

GeneratorDeedHelper::GeneratorDeedHelper() {
	className = "GeneratorDeed";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void GeneratorDeedHelper::finalizeHelper() {
	GeneratorDeedHelper::finalize();
}

DistributedObject* GeneratorDeedHelper::instantiateObject() {
	return new GeneratorDeed(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* GeneratorDeedHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new GeneratorDeedAdapter((GeneratorDeedImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	GeneratorDeedServant
 */

GeneratorDeedServant::GeneratorDeedServant(CreatureObject* creature, int tempCRC, const UnicodeString& n, const String& tempn, int tp) : DeedObjectImplementation(creature, tempCRC, n, tempn, tp) {
	_classHelper = GeneratorDeedHelper::instance();
}

GeneratorDeedServant::GeneratorDeedServant(unsigned long long oid, int tempCRC, const UnicodeString& n, const String& tempn, int tp) : DeedObjectImplementation(oid, tempCRC, n, tempn, tp) {
	_classHelper = GeneratorDeedHelper::instance();
}

GeneratorDeedServant::~GeneratorDeedServant() {
}

void GeneratorDeedServant::_setStub(DistributedObjectStub* stub) {
	_this = (GeneratorDeed*) stub;
	DeedObjectServant::_setStub(stub);
}

DistributedObjectStub* GeneratorDeedServant::_getStub() {
	return _this;
}

