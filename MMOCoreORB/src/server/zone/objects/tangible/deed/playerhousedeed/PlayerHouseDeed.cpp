/*
 *	server/zone/objects/tangible/deed/playerhousedeed/PlayerHouseDeed.cpp generated by engine3 IDL compiler 0.55
 */

#include "PlayerHouseDeed.h"

#include "PlayerHouseDeedImplementation.h"

#include "../DeedObject.h"

#include "../../TangibleObject.h"

#include "../../../../packets.h"

#include "../../../player/Player.h"

#include "../../../creature/CreatureObject.h"

/*
 *	PlayerHouseDeedStub
 */

PlayerHouseDeed::PlayerHouseDeed(CreatureObject* creature, int tempCRC, const UnicodeString& n, const String& tempn) : DeedObject(DummyConstructorParameter::instance()) {
	_impl = new PlayerHouseDeedImplementation(creature, tempCRC, n, tempn);
	_impl->_setStub(this);
}

PlayerHouseDeed::PlayerHouseDeed(unsigned long long oid, int tempCRC, const UnicodeString& n, const String& tempn) : DeedObject(DummyConstructorParameter::instance()) {
	_impl = new PlayerHouseDeedImplementation(oid, tempCRC, n, tempn);
	_impl->_setStub(this);
}

PlayerHouseDeed::PlayerHouseDeed(DummyConstructorParameter* param) : DeedObject(param) {
}

PlayerHouseDeed::~PlayerHouseDeed() {
}

int PlayerHouseDeed::getCellCount() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		return method.executeWithSignedIntReturn();
	} else
		return ((PlayerHouseDeedImplementation*) _impl)->getCellCount();
}

/*
 *	PlayerHouseDeedAdapter
 */

PlayerHouseDeedAdapter::PlayerHouseDeedAdapter(PlayerHouseDeedImplementation* obj) : DeedObjectAdapter(obj) {
}

Packet* PlayerHouseDeedAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertSignedInt(getCellCount());
		break;
	default:
		return NULL;
	}

	return resp;
}

int PlayerHouseDeedAdapter::getCellCount() {
	return ((PlayerHouseDeedImplementation*) impl)->getCellCount();
}

/*
 *	PlayerHouseDeedHelper
 */

PlayerHouseDeedHelper* PlayerHouseDeedHelper::staticInitializer = PlayerHouseDeedHelper::instance();

PlayerHouseDeedHelper::PlayerHouseDeedHelper() {
	className = "PlayerHouseDeed";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void PlayerHouseDeedHelper::finalizeHelper() {
	PlayerHouseDeedHelper::finalize();
}

DistributedObject* PlayerHouseDeedHelper::instantiateObject() {
	return new PlayerHouseDeed(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* PlayerHouseDeedHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new PlayerHouseDeedAdapter((PlayerHouseDeedImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	PlayerHouseDeedServant
 */

PlayerHouseDeedServant::PlayerHouseDeedServant(CreatureObject* creature, int tempCRC, const UnicodeString& n, const String& tempn, int tp) : DeedObjectImplementation(creature, tempCRC, n, tempn, tp) {
	_classHelper = PlayerHouseDeedHelper::instance();
}

PlayerHouseDeedServant::PlayerHouseDeedServant(unsigned long long oid, int tempCRC, const UnicodeString& n, const String& tempn, int tp) : DeedObjectImplementation(oid, tempCRC, n, tempn, tp) {
	_classHelper = PlayerHouseDeedHelper::instance();
}

PlayerHouseDeedServant::~PlayerHouseDeedServant() {
}

void PlayerHouseDeedServant::_setStub(DistributedObjectStub* stub) {
	_this = (PlayerHouseDeed*) stub;
	DeedObjectServant::_setStub(stub);
}

DistributedObjectStub* PlayerHouseDeedServant::_getStub() {
	return _this;
}

