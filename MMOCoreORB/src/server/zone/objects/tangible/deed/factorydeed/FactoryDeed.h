/*
 *	server/zone/objects/tangible/deed/factorydeed/FactoryDeed.h generated by engine3 IDL compiler 0.55
 */

#ifndef FACTORYDEED_H_
#define FACTORYDEED_H_

#include "engine/orb/DistributedObjectBroker.h"

class DeedObject;

class FactoryObject;

class TangibleObject;

class packets;

class Player;

class CreatureObject;

#include "../DeedObject.h"

class FactoryDeed : public DeedObject {
public:
	FactoryDeed(CreatureObject* creature, int tempCRC, const UnicodeString& n, const String& tempn);

	FactoryDeed(unsigned long long oid, int tempCRC, const UnicodeString& n, const String& tempn);

	FactoryDeed(CreatureObject* creature, FactoryObject* fact);

	void parseItemAttributes();

	void setSurplusMaintenance(int maint);

	void setMaintenanceRate(float rate);

	void setSurplusPower(int pow);

	void setPowerRate(float rate);

	void setHopperSize(float size);

	void setLotSize(int size);

	void setBuildRate(float rate);

	int getSurplusMaintenance();

	float getMaintenanceRate();

	int getSurplusPower();

	float getPowerRate();

	float getHopperSize();

	int getLotSize();

	float getBuildRate();

protected:
	FactoryDeed(DummyConstructorParameter* param);

	virtual ~FactoryDeed();

	friend class FactoryDeedHelper;
};

class FactoryDeedImplementation;

class FactoryDeedAdapter : public DeedObjectAdapter {
public:
	FactoryDeedAdapter(FactoryDeedImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void parseItemAttributes();

	void setSurplusMaintenance(int maint);

	void setMaintenanceRate(float rate);

	void setSurplusPower(int pow);

	void setPowerRate(float rate);

	void setHopperSize(float size);

	void setLotSize(int size);

	void setBuildRate(float rate);

	int getSurplusMaintenance();

	float getMaintenanceRate();

	int getSurplusPower();

	float getPowerRate();

	float getHopperSize();

	int getLotSize();

	float getBuildRate();

};

class FactoryDeedHelper : public DistributedObjectClassHelper, public Singleton<FactoryDeedHelper> {
	static FactoryDeedHelper* staticInitializer;

public:
	FactoryDeedHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<FactoryDeedHelper>;
};

#include "../DeedObjectImplementation.h"

class FactoryDeedServant : public DeedObjectImplementation {
public:
	FactoryDeed* _this;

public:
	FactoryDeedServant(CreatureObject* creature, int tempCRC, const UnicodeString& n, const String& tempn, int tp);
	FactoryDeedServant(unsigned long long oid, int tempCRC, const UnicodeString& n, const String& tempn, int tp);
	FactoryDeedServant(unsigned long long oid, int tp);
	virtual ~FactoryDeedServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*FACTORYDEED_H_*/
