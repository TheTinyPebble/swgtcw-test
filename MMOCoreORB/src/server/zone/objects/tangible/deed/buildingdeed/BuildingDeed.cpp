/*
 *	server/zone/objects/tangible/deed/buildingdeed/BuildingDeed.cpp generated by engine3 IDL compiler 0.55
 */

#include "BuildingDeed.h"

#include "BuildingDeedImplementation.h"

#include "../DeedObject.h"

#include "../../../creature/CreatureObject.h"

#include "../../../player/Player.h"

#include "../../../scene/SceneObject.h"

/*
 *	BuildingDeedStub
 */

BuildingDeed::BuildingDeed(CreatureObject* creature, unsigned int objcrc, const UnicodeString& customname, const String& stfname) : DeedObject(DummyConstructorParameter::instance()) {
	_impl = new BuildingDeedImplementation(creature, objcrc, customname, stfname);
	_impl->_setStub(this);
}

BuildingDeed::BuildingDeed(unsigned long long objid, unsigned int objcrc, const UnicodeString& customname, const String& stfname) : DeedObject(DummyConstructorParameter::instance()) {
	_impl = new BuildingDeedImplementation(objid, objcrc, customname, stfname);
	_impl->_setStub(this);
}

BuildingDeed::BuildingDeed(DummyConstructorParameter* param) : DeedObject(param) {
}

BuildingDeed::~BuildingDeed() {
}

int BuildingDeed::useObject(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return ((BuildingDeedImplementation*) _impl)->useObject(player);
}

SceneObject* BuildingDeed::generateObject(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((BuildingDeedImplementation*) _impl)->generateObject(player);
}

void BuildingDeed::parseItemAttributes() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		method.executeWithVoidReturn();
	} else
		((BuildingDeedImplementation*) _impl)->parseItemAttributes();
}

void BuildingDeed::setReclaimFee(unsigned int fee) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addUnsignedIntParameter(fee);

		method.executeWithVoidReturn();
	} else
		((BuildingDeedImplementation*) _impl)->setReclaimFee(fee);
}

void BuildingDeed::setMaintenanceRate(float rate) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addFloatParameter(rate);

		method.executeWithVoidReturn();
	} else
		((BuildingDeedImplementation*) _impl)->setMaintenanceRate(rate);
}

void BuildingDeed::setSurplusMaintenance(unsigned int maint) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addUnsignedIntParameter(maint);

		method.executeWithVoidReturn();
	} else
		((BuildingDeedImplementation*) _impl)->setSurplusMaintenance(maint);
}

void BuildingDeed::setTargetConstructionObjectCRC(unsigned int objcrc) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addUnsignedIntParameter(objcrc);

		method.executeWithVoidReturn();
	} else
		((BuildingDeedImplementation*) _impl)->setTargetConstructionObjectCRC(objcrc);
}

void BuildingDeed::setTargetConditionMax(unsigned int condmax) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addUnsignedIntParameter(condmax);

		method.executeWithVoidReturn();
	} else
		((BuildingDeedImplementation*) _impl)->setTargetConditionMax(condmax);
}

void BuildingDeed::setLotSize(unsigned char lotsize) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addUnsignedCharParameter(lotsize);

		method.executeWithVoidReturn();
	} else
		((BuildingDeedImplementation*) _impl)->setLotSize(lotsize);
}

void BuildingDeed::setCellCount(unsigned int cellcount) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addUnsignedIntParameter(cellcount);

		method.executeWithVoidReturn();
	} else
		((BuildingDeedImplementation*) _impl)->setCellCount(cellcount);
}

float BuildingDeed::getMaintenanceRate() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		return method.executeWithFloatReturn();
	} else
		return ((BuildingDeedImplementation*) _impl)->getMaintenanceRate();
}

unsigned int BuildingDeed::getSurplusMaintenance() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((BuildingDeedImplementation*) _impl)->getSurplusMaintenance();
}

unsigned int BuildingDeed::getTargetConstructionObjectCRC() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((BuildingDeedImplementation*) _impl)->getTargetConstructionObjectCRC();
}

unsigned int BuildingDeed::getCellCount() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((BuildingDeedImplementation*) _impl)->getCellCount();
}

unsigned int BuildingDeed::getReclaimFee() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((BuildingDeedImplementation*) _impl)->getReclaimFee();
}

bool BuildingDeed::isMaintenanceEmpty() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);

		return method.executeWithBooleanReturn();
	} else
		return ((BuildingDeedImplementation*) _impl)->isMaintenanceEmpty();
}

/*
 *	BuildingDeedAdapter
 */

BuildingDeedAdapter::BuildingDeedAdapter(BuildingDeedImplementation* obj) : DeedObjectAdapter(obj) {
}

Packet* BuildingDeedAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertSignedInt(useObject((Player*) inv->getObjectParameter()));
		break;
	case 7:
		resp->insertLong(generateObject((Player*) inv->getObjectParameter())->_getObjectID());
		break;
	case 8:
		parseItemAttributes();
		break;
	case 9:
		setReclaimFee(inv->getUnsignedIntParameter());
		break;
	case 10:
		setMaintenanceRate(inv->getFloatParameter());
		break;
	case 11:
		setSurplusMaintenance(inv->getUnsignedIntParameter());
		break;
	case 12:
		setTargetConstructionObjectCRC(inv->getUnsignedIntParameter());
		break;
	case 13:
		setTargetConditionMax(inv->getUnsignedIntParameter());
		break;
	case 14:
		setLotSize(inv->getUnsignedCharParameter());
		break;
	case 15:
		setCellCount(inv->getUnsignedIntParameter());
		break;
	case 16:
		resp->insertFloat(getMaintenanceRate());
		break;
	case 17:
		resp->insertInt(getSurplusMaintenance());
		break;
	case 18:
		resp->insertInt(getTargetConstructionObjectCRC());
		break;
	case 19:
		resp->insertInt(getCellCount());
		break;
	case 20:
		resp->insertInt(getReclaimFee());
		break;
	case 21:
		resp->insertBoolean(isMaintenanceEmpty());
		break;
	default:
		return NULL;
	}

	return resp;
}

int BuildingDeedAdapter::useObject(Player* player) {
	return ((BuildingDeedImplementation*) impl)->useObject(player);
}

SceneObject* BuildingDeedAdapter::generateObject(Player* player) {
	return ((BuildingDeedImplementation*) impl)->generateObject(player);
}

void BuildingDeedAdapter::parseItemAttributes() {
	return ((BuildingDeedImplementation*) impl)->parseItemAttributes();
}

void BuildingDeedAdapter::setReclaimFee(unsigned int fee) {
	return ((BuildingDeedImplementation*) impl)->setReclaimFee(fee);
}

void BuildingDeedAdapter::setMaintenanceRate(float rate) {
	return ((BuildingDeedImplementation*) impl)->setMaintenanceRate(rate);
}

void BuildingDeedAdapter::setSurplusMaintenance(unsigned int maint) {
	return ((BuildingDeedImplementation*) impl)->setSurplusMaintenance(maint);
}

void BuildingDeedAdapter::setTargetConstructionObjectCRC(unsigned int objcrc) {
	return ((BuildingDeedImplementation*) impl)->setTargetConstructionObjectCRC(objcrc);
}

void BuildingDeedAdapter::setTargetConditionMax(unsigned int condmax) {
	return ((BuildingDeedImplementation*) impl)->setTargetConditionMax(condmax);
}

void BuildingDeedAdapter::setLotSize(unsigned char lotsize) {
	return ((BuildingDeedImplementation*) impl)->setLotSize(lotsize);
}

void BuildingDeedAdapter::setCellCount(unsigned int cellcount) {
	return ((BuildingDeedImplementation*) impl)->setCellCount(cellcount);
}

float BuildingDeedAdapter::getMaintenanceRate() {
	return ((BuildingDeedImplementation*) impl)->getMaintenanceRate();
}

unsigned int BuildingDeedAdapter::getSurplusMaintenance() {
	return ((BuildingDeedImplementation*) impl)->getSurplusMaintenance();
}

unsigned int BuildingDeedAdapter::getTargetConstructionObjectCRC() {
	return ((BuildingDeedImplementation*) impl)->getTargetConstructionObjectCRC();
}

unsigned int BuildingDeedAdapter::getCellCount() {
	return ((BuildingDeedImplementation*) impl)->getCellCount();
}

unsigned int BuildingDeedAdapter::getReclaimFee() {
	return ((BuildingDeedImplementation*) impl)->getReclaimFee();
}

bool BuildingDeedAdapter::isMaintenanceEmpty() {
	return ((BuildingDeedImplementation*) impl)->isMaintenanceEmpty();
}

/*
 *	BuildingDeedHelper
 */

BuildingDeedHelper* BuildingDeedHelper::staticInitializer = BuildingDeedHelper::instance();

BuildingDeedHelper::BuildingDeedHelper() {
	className = "BuildingDeed";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void BuildingDeedHelper::finalizeHelper() {
	BuildingDeedHelper::finalize();
}

DistributedObject* BuildingDeedHelper::instantiateObject() {
	return new BuildingDeed(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* BuildingDeedHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new BuildingDeedAdapter((BuildingDeedImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	BuildingDeedServant
 */

BuildingDeedServant::BuildingDeedServant(CreatureObject* creature, unsigned int objcrc, const UnicodeString& customname, const String& stfname) : DeedObjectImplementation(creature, objcrc, customname, stfname) {
	_classHelper = BuildingDeedHelper::instance();
}

BuildingDeedServant::BuildingDeedServant(unsigned long long objid, unsigned int objcrc, const UnicodeString& customname, const String& stfname) : DeedObjectImplementation(objid, objcrc, customname, stfname) {
	_classHelper = BuildingDeedHelper::instance();
}

BuildingDeedServant::~BuildingDeedServant() {
}

void BuildingDeedServant::_setStub(DistributedObjectStub* stub) {
	_this = (BuildingDeed*) stub;
	DeedObjectServant::_setStub(stub);
}

DistributedObjectStub* BuildingDeedServant::_getStub() {
	return _this;
}

