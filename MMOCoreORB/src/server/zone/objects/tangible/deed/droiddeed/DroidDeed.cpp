/*
 *	server/zone/objects/tangible/deed/droiddeed/DroidDeed.cpp generated by engine3 IDL compiler 0.55
 */

#include "DroidDeed.h"

#include "DroidDeedImplementation.h"

#include "../DeedObject.h"

#include "../../../creature/CreatureObject.h"

#include "../../../player/Player.h"

#include "../../../scene/SceneObject.h"

/*
 *	DroidDeedStub
 */

DroidDeed::DroidDeed(CreatureObject* creature, unsigned int objcrc, const UnicodeString& customname, const String& stfname) : DeedObject(DummyConstructorParameter::instance()) {
	_impl = new DroidDeedImplementation(creature, objcrc, customname, stfname);
	_impl->_setStub(this);
}

DroidDeed::DroidDeed(unsigned long long objid, unsigned int objcrc, const UnicodeString& customname, const String& stfname) : DeedObject(DummyConstructorParameter::instance()) {
	_impl = new DroidDeedImplementation(objid, objcrc, customname, stfname);
	_impl->_setStub(this);
}

DroidDeed::DroidDeed(DummyConstructorParameter* param) : DeedObject(param) {
}

DroidDeed::~DroidDeed() {
}

int DroidDeed::useObject(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return ((DroidDeedImplementation*) _impl)->useObject(player);
}

SceneObject* DroidDeed::generateObject(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((DroidDeedImplementation*) _impl)->generateObject(player);
}

void DroidDeed::parseItemAttributes() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		method.executeWithVoidReturn();
	} else
		((DroidDeedImplementation*) _impl)->parseItemAttributes();
}

/*
 *	DroidDeedAdapter
 */

DroidDeedAdapter::DroidDeedAdapter(DroidDeedImplementation* obj) : DeedObjectAdapter(obj) {
}

Packet* DroidDeedAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertSignedInt(useObject((Player*) inv->getObjectParameter()));
		break;
	case 7:
		resp->insertLong(generateObject((Player*) inv->getObjectParameter())->_getObjectID());
		break;
	case 8:
		parseItemAttributes();
		break;
	default:
		return NULL;
	}

	return resp;
}

int DroidDeedAdapter::useObject(Player* player) {
	return ((DroidDeedImplementation*) impl)->useObject(player);
}

SceneObject* DroidDeedAdapter::generateObject(Player* player) {
	return ((DroidDeedImplementation*) impl)->generateObject(player);
}

void DroidDeedAdapter::parseItemAttributes() {
	return ((DroidDeedImplementation*) impl)->parseItemAttributes();
}

/*
 *	DroidDeedHelper
 */

DroidDeedHelper* DroidDeedHelper::staticInitializer = DroidDeedHelper::instance();

DroidDeedHelper::DroidDeedHelper() {
	className = "DroidDeed";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void DroidDeedHelper::finalizeHelper() {
	DroidDeedHelper::finalize();
}

DistributedObject* DroidDeedHelper::instantiateObject() {
	return new DroidDeed(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* DroidDeedHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new DroidDeedAdapter((DroidDeedImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	DroidDeedServant
 */

DroidDeedServant::DroidDeedServant(CreatureObject* creature, unsigned int objcrc, const UnicodeString& customname, const String& stfname) : DeedObjectImplementation(creature, objcrc, customname, stfname) {
	_classHelper = DroidDeedHelper::instance();
}

DroidDeedServant::DroidDeedServant(unsigned long long objid, unsigned int objcrc, const UnicodeString& customname, const String& stfname) : DeedObjectImplementation(objid, objcrc, customname, stfname) {
	_classHelper = DroidDeedHelper::instance();
}

DroidDeedServant::~DroidDeedServant() {
}

void DroidDeedServant::_setStub(DistributedObjectStub* stub) {
	_this = (DroidDeed*) stub;
	DeedObjectServant::_setStub(stub);
}

DistributedObjectStub* DroidDeedServant::_getStub() {
	return _this;
}

