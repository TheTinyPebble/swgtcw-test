/*
 *	server/zone/objects/tangible/deed/installation/InstallationDeed.cpp generated by engine3 IDL compiler 0.60
 */

#include "InstallationDeed.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/objects/area/ActiveArea.h"

/*
 *	InstallationDeedStub
 */

enum {RPC_INITIALIZETRANSIENTMEMBERS__,RPC_HANDLEOBJECTMENUSELECT__PLAYERCREATURE_BYTE_,RPC_SETSURPLUSMAINTENANCE__INT_,RPC_GETSURPLUSMAINTENANCE__,RPC_GETSURPLUSPOWER__,RPC_SETSURPLUSPOWER__INT_,RPC_ISINSTALLATIONDEED__};

InstallationDeed::InstallationDeed() : Deed(DummyConstructorParameter::instance()) {
	InstallationDeedImplementation* _implementation = new InstallationDeedImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

InstallationDeed::InstallationDeed(DummyConstructorParameter* param) : Deed(param) {
}

InstallationDeed::~InstallationDeed() {
}


void InstallationDeed::fillAttributeList(AttributeListMessage* alm, PlayerCreature* object) {
	InstallationDeedImplementation* _implementation = (InstallationDeedImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->fillAttributeList(alm, object);
}

void InstallationDeed::initializeTransientMembers() {
	InstallationDeedImplementation* _implementation = (InstallationDeedImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

int InstallationDeed::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	InstallationDeedImplementation* _implementation = (InstallationDeedImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEOBJECTMENUSELECT__PLAYERCREATURE_BYTE_);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->handleObjectMenuSelect(player, selectedID);
}

void InstallationDeed::setSurplusMaintenance(unsigned int surplusMaint) {
	InstallationDeedImplementation* _implementation = (InstallationDeedImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSURPLUSMAINTENANCE__INT_);
		method.addUnsignedIntParameter(surplusMaint);

		method.executeWithVoidReturn();
	} else
		_implementation->setSurplusMaintenance(surplusMaint);
}

unsigned int InstallationDeed::getSurplusMaintenance() {
	InstallationDeedImplementation* _implementation = (InstallationDeedImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSURPLUSMAINTENANCE__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getSurplusMaintenance();
}

unsigned int InstallationDeed::getSurplusPower() {
	InstallationDeedImplementation* _implementation = (InstallationDeedImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSURPLUSPOWER__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getSurplusPower();
}

void InstallationDeed::setSurplusPower(unsigned int power) {
	InstallationDeedImplementation* _implementation = (InstallationDeedImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSURPLUSPOWER__INT_);
		method.addUnsignedIntParameter(power);

		method.executeWithVoidReturn();
	} else
		_implementation->setSurplusPower(power);
}

bool InstallationDeed::isInstallationDeed() {
	InstallationDeedImplementation* _implementation = (InstallationDeedImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISINSTALLATIONDEED__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isInstallationDeed();
}

DistributedObjectServant* InstallationDeed::_getImplementation() {

	_updated = true;
	return _impl;
}

void InstallationDeed::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	InstallationDeedImplementation
 */

InstallationDeedImplementation::InstallationDeedImplementation(DummyConstructorParameter* param) : DeedImplementation(param) {
	_initializeImplementation();
}


InstallationDeedImplementation::~InstallationDeedImplementation() {
}


void InstallationDeedImplementation::finalize() {
}

void InstallationDeedImplementation::_initializeImplementation() {
	_setClassHelper(InstallationDeedHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void InstallationDeedImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (InstallationDeed*) stub;
	DeedImplementation::_setStub(stub);
}

DistributedObjectStub* InstallationDeedImplementation::_getStub() {
	return _this;
}

InstallationDeedImplementation::operator const InstallationDeed*() {
	return _this;
}

void InstallationDeedImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void InstallationDeedImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void InstallationDeedImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void InstallationDeedImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void InstallationDeedImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void InstallationDeedImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void InstallationDeedImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void InstallationDeedImplementation::_serializationHelperMethod() {
	DeedImplementation::_serializationHelperMethod();

	_setClassName("InstallationDeed");

}

void InstallationDeedImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(InstallationDeedImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool InstallationDeedImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (DeedImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "surplusMaintenance") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&surplusMaintenance, stream);
		return true;
	}

	if (_name == "surplusPower") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&surplusPower, stream);
		return true;
	}


	return false;
}

void InstallationDeedImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = InstallationDeedImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int InstallationDeedImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "surplusMaintenance";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned int >::toBinaryStream(&surplusMaintenance, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "surplusPower";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned int >::toBinaryStream(&surplusPower, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 2 + DeedImplementation::writeObjectMembers(stream);
}

InstallationDeedImplementation::InstallationDeedImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/deed/installation/InstallationDeed.idl():  		Logger.setLoggingName("InstallationDeed");
	Logger::setLoggingName("InstallationDeed");
	// server/zone/objects/tangible/deed/installation/InstallationDeed.idl():  		surplusMaintenance = 0;
	surplusMaintenance = 0;
	// server/zone/objects/tangible/deed/installation/InstallationDeed.idl():  		surplusPower = 0;
	surplusPower = 0;
}

void InstallationDeedImplementation::setSurplusMaintenance(unsigned int surplusMaint) {
	// server/zone/objects/tangible/deed/installation/InstallationDeed.idl():  		surplusMaintenance = surplusMaint;
	surplusMaintenance = surplusMaint;
}

unsigned int InstallationDeedImplementation::getSurplusMaintenance() {
	// server/zone/objects/tangible/deed/installation/InstallationDeed.idl():  		return surplusMaintenance;
	return surplusMaintenance;
}

unsigned int InstallationDeedImplementation::getSurplusPower() {
	// server/zone/objects/tangible/deed/installation/InstallationDeed.idl():  		return surplusPower;
	return surplusPower;
}

void InstallationDeedImplementation::setSurplusPower(unsigned int power) {
	// server/zone/objects/tangible/deed/installation/InstallationDeed.idl():  		surplusPower = power;
	surplusPower = power;
}

bool InstallationDeedImplementation::isInstallationDeed() {
	// server/zone/objects/tangible/deed/installation/InstallationDeed.idl():  		return true;
	return true;
}

/*
 *	InstallationDeedAdapter
 */

InstallationDeedAdapter::InstallationDeedAdapter(InstallationDeedImplementation* obj) : DeedAdapter(obj) {
}

Packet* InstallationDeedAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		initializeTransientMembers();
		break;
	case RPC_HANDLEOBJECTMENUSELECT__PLAYERCREATURE_BYTE_:
		resp->insertSignedInt(handleObjectMenuSelect((PlayerCreature*) inv->getObjectParameter(), inv->getByteParameter()));
		break;
	case RPC_SETSURPLUSMAINTENANCE__INT_:
		setSurplusMaintenance(inv->getUnsignedIntParameter());
		break;
	case RPC_GETSURPLUSMAINTENANCE__:
		resp->insertInt(getSurplusMaintenance());
		break;
	case RPC_GETSURPLUSPOWER__:
		resp->insertInt(getSurplusPower());
		break;
	case RPC_SETSURPLUSPOWER__INT_:
		setSurplusPower(inv->getUnsignedIntParameter());
		break;
	case RPC_ISINSTALLATIONDEED__:
		resp->insertBoolean(isInstallationDeed());
		break;
	default:
		return NULL;
	}

	return resp;
}

void InstallationDeedAdapter::initializeTransientMembers() {
	((InstallationDeedImplementation*) impl)->initializeTransientMembers();
}

int InstallationDeedAdapter::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	return ((InstallationDeedImplementation*) impl)->handleObjectMenuSelect(player, selectedID);
}

void InstallationDeedAdapter::setSurplusMaintenance(unsigned int surplusMaint) {
	((InstallationDeedImplementation*) impl)->setSurplusMaintenance(surplusMaint);
}

unsigned int InstallationDeedAdapter::getSurplusMaintenance() {
	return ((InstallationDeedImplementation*) impl)->getSurplusMaintenance();
}

unsigned int InstallationDeedAdapter::getSurplusPower() {
	return ((InstallationDeedImplementation*) impl)->getSurplusPower();
}

void InstallationDeedAdapter::setSurplusPower(unsigned int power) {
	((InstallationDeedImplementation*) impl)->setSurplusPower(power);
}

bool InstallationDeedAdapter::isInstallationDeed() {
	return ((InstallationDeedImplementation*) impl)->isInstallationDeed();
}

/*
 *	InstallationDeedHelper
 */

InstallationDeedHelper* InstallationDeedHelper::staticInitializer = InstallationDeedHelper::instance();

InstallationDeedHelper::InstallationDeedHelper() {
	className = "InstallationDeed";

	Core::getObjectBroker()->registerClass(className, this);
}

void InstallationDeedHelper::finalizeHelper() {
	InstallationDeedHelper::finalize();
}

DistributedObject* InstallationDeedHelper::instantiateObject() {
	return new InstallationDeed(DummyConstructorParameter::instance());
}

DistributedObjectServant* InstallationDeedHelper::instantiateServant() {
	return new InstallationDeedImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* InstallationDeedHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new InstallationDeedAdapter((InstallationDeedImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

