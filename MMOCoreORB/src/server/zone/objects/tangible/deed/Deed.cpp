/*
 *	server/zone/objects/tangible/deed/Deed.cpp generated by engine3 IDL compiler 0.60
 */

#include "Deed.h"

#include "server/zone/Zone.h"

/*
 *	DeedStub
 */

Deed::Deed() : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new DeedImplementation();
	_impl->_setStub(this);
}

Deed::Deed(DummyConstructorParameter* param) : TangibleObject(param) {
}

Deed::~Deed() {
}


/*
 *	DeedImplementation
 */

DeedImplementation::DeedImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
	_initializeImplementation();
}

DeedImplementation::~DeedImplementation() {
}


void DeedImplementation::finalize() {
}

void DeedImplementation::_initializeImplementation() {
	_setClassHelper(DeedHelper::instance());

	_serializationHelperMethod();
}

void DeedImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (Deed*) stub;
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* DeedImplementation::_getStub() {
	return _this;
}

DeedImplementation::operator const Deed*() {
	return _this;
}

void DeedImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void DeedImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void DeedImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void DeedImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void DeedImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void DeedImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void DeedImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void DeedImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("Deed");

}

DeedImplementation::DeedImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/deed/Deed.idl(54):  		Logger.setLoggingName("Deed");
	Logger::setLoggingName("Deed");
}

/*
 *	DeedAdapter
 */

DeedAdapter::DeedAdapter(DeedImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* DeedAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	default:
		return NULL;
	}

	return resp;
}

/*
 *	DeedHelper
 */

DeedHelper* DeedHelper::staticInitializer = DeedHelper::instance();

DeedHelper::DeedHelper() {
	className = "Deed";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void DeedHelper::finalizeHelper() {
	DeedHelper::finalize();
}

DistributedObject* DeedHelper::instantiateObject() {
	return new Deed(DummyConstructorParameter::instance());
}

DistributedObjectServant* DeedHelper::instantiateServant() {
	return new DeedImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* DeedHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new DeedAdapter((DeedImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

