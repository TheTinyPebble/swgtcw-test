/*
 *	server/zone/objects/tangible/campkit/CampKit.cpp generated by engine3 IDL compiler 0.55
 */

#include "CampKit.h"

#include "CampKitImplementation.h"

#include "../../scene/SceneObject.h"

#include "../../player/Player.h"

#include "../TangibleObject.h"

#include "../../building/BuildingObject.h"

#include "../../area/CampActiveArea.h"

/*
 *	CampKitStub
 */

CampKit::CampKit(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn) : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new CampKitImplementation(oid, tempCRC, n, tempn);
	_impl->_setStub(this);
}

CampKit::CampKit(Player* player, unsigned int tempCRC, const UnicodeString& n, const String& tempn) : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new CampKitImplementation(player, tempCRC, n, tempn);
	_impl->_setStub(this);
}

CampKit::CampKit(DummyConstructorParameter* param) : TangibleObject(param) {
}

CampKit::~CampKit() {
}

void CampKit::useCharge(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((CampKitImplementation*) _impl)->useCharge(player);
}

int CampKit::getUsesRemaining() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		return method.executeWithSignedIntReturn();
	} else
		return ((CampKitImplementation*) _impl)->getUsesRemaining();
}

int CampKit::getXP() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		return method.executeWithSignedIntReturn();
	} else
		return ((CampKitImplementation*) _impl)->getXP();
}

int CampKit::getDuration() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return method.executeWithSignedIntReturn();
	} else
		return ((CampKitImplementation*) _impl)->getDuration();
}

int CampKit::getCampType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		return method.executeWithSignedIntReturn();
	} else
		return ((CampKitImplementation*) _impl)->getCampType();
}

void CampKit::setUsesRemaining(const int us) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addSignedIntParameter(us);

		method.executeWithVoidReturn();
	} else
		((CampKitImplementation*) _impl)->setUsesRemaining(us);
}

void CampKit::setXP(const int xp) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addSignedIntParameter(xp);

		method.executeWithVoidReturn();
	} else
		((CampKitImplementation*) _impl)->setXP(xp);
}

void CampKit::setDuration(const int duration) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addSignedIntParameter(duration);

		method.executeWithVoidReturn();
	} else
		((CampKitImplementation*) _impl)->setDuration(duration);
}

void CampKit::setCampType(const int crc) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addSignedIntParameter(crc);

		method.executeWithVoidReturn();
	} else
		((CampKitImplementation*) _impl)->setCampType(crc);
}

void CampKit::sendDeltas(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((CampKitImplementation*) _impl)->sendDeltas(player);
}

void CampKit::generateAttributes(SceneObject* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((CampKitImplementation*) _impl)->generateAttributes(obj);
}

void CampKit::parseItemAttributes() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);

		method.executeWithVoidReturn();
	} else
		((CampKitImplementation*) _impl)->parseItemAttributes();
}

/*
 *	CampKitAdapter
 */

CampKitAdapter::CampKitAdapter(CampKitImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* CampKitAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		useCharge((Player*) inv->getObjectParameter());
		break;
	case 7:
		resp->insertSignedInt(getUsesRemaining());
		break;
	case 8:
		resp->insertSignedInt(getXP());
		break;
	case 9:
		resp->insertSignedInt(getDuration());
		break;
	case 10:
		resp->insertSignedInt(getCampType());
		break;
	case 11:
		setUsesRemaining(inv->getSignedIntParameter());
		break;
	case 12:
		setXP(inv->getSignedIntParameter());
		break;
	case 13:
		setDuration(inv->getSignedIntParameter());
		break;
	case 14:
		setCampType(inv->getSignedIntParameter());
		break;
	case 15:
		sendDeltas((Player*) inv->getObjectParameter());
		break;
	case 16:
		generateAttributes((SceneObject*) inv->getObjectParameter());
		break;
	case 17:
		parseItemAttributes();
		break;
	default:
		return NULL;
	}

	return resp;
}

void CampKitAdapter::useCharge(Player* player) {
	return ((CampKitImplementation*) impl)->useCharge(player);
}

int CampKitAdapter::getUsesRemaining() {
	return ((CampKitImplementation*) impl)->getUsesRemaining();
}

int CampKitAdapter::getXP() {
	return ((CampKitImplementation*) impl)->getXP();
}

int CampKitAdapter::getDuration() {
	return ((CampKitImplementation*) impl)->getDuration();
}

int CampKitAdapter::getCampType() {
	return ((CampKitImplementation*) impl)->getCampType();
}

void CampKitAdapter::setUsesRemaining(const int us) {
	return ((CampKitImplementation*) impl)->setUsesRemaining(us);
}

void CampKitAdapter::setXP(const int xp) {
	return ((CampKitImplementation*) impl)->setXP(xp);
}

void CampKitAdapter::setDuration(const int duration) {
	return ((CampKitImplementation*) impl)->setDuration(duration);
}

void CampKitAdapter::setCampType(const int crc) {
	return ((CampKitImplementation*) impl)->setCampType(crc);
}

void CampKitAdapter::sendDeltas(Player* player) {
	return ((CampKitImplementation*) impl)->sendDeltas(player);
}

void CampKitAdapter::generateAttributes(SceneObject* obj) {
	return ((CampKitImplementation*) impl)->generateAttributes(obj);
}

void CampKitAdapter::parseItemAttributes() {
	return ((CampKitImplementation*) impl)->parseItemAttributes();
}

/*
 *	CampKitHelper
 */

CampKitHelper* CampKitHelper::staticInitializer = CampKitHelper::instance();

CampKitHelper::CampKitHelper() {
	className = "CampKit";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void CampKitHelper::finalizeHelper() {
	CampKitHelper::finalize();
}

DistributedObject* CampKitHelper::instantiateObject() {
	return new CampKit(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* CampKitHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new CampKitAdapter((CampKitImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	CampKitServant
 */

CampKitServant::CampKitServant(unsigned long long oid, int tp) : TangibleObjectImplementation(oid, tp) {
	_classHelper = CampKitHelper::instance();
}

CampKitServant::~CampKitServant() {
}

void CampKitServant::_setStub(DistributedObjectStub* stub) {
	_this = (CampKit*) stub;
	TangibleObjectServant::_setStub(stub);
}

DistributedObjectStub* CampKitServant::_getStub() {
	return _this;
}

