/*
 *	server/zone/objects/tangible/campkit/campsite/CampSite.h generated by engine3 IDL compiler 0.55
 */

#ifndef CAMPSITE_H_
#define CAMPSITE_H_

#include "engine/orb/DistributedObjectBroker.h"

class TangibleObject;

class CreatureObject;

class SceneObject;

class Player;

class CampKit;

class Zone;

#include "engine/service/Message.h"

#include "../../TangibleObject.h"

class CampSite : public TangibleObject {
public:
	CampSite(Player* player, unsigned long long oid, CampKit* campKit);

	Player* getOwner();

	UnicodeString& getName();

	String& getDefaultName();

	void setOwner(Player* player);

	void sendTo(Player* player, bool doClose = true);

	void createCampArea();

	void removeCampArea();

	void spawnCampItems();

	SceneObject* getCampObject(int num);

	void disbandCamp();

	void abandonCamp();

	void abortAbandonPhase();

	bool isAbandoned();

	void removeCampRecoveryEvent(Player* player);

	void enterNotification(Player* player);

	void exitNotificaton(Player* player);

	void reactivateRecovery(Player* player);

protected:
	CampSite(DummyConstructorParameter* param);

	virtual ~CampSite();

	String _return_getDefaultName;

	UnicodeString _return_getName;

	friend class CampSiteHelper;
};

class CampSiteImplementation;

class CampSiteAdapter : public TangibleObjectAdapter {
public:
	CampSiteAdapter(CampSiteImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	Player* getOwner();

	UnicodeString& getName();

	String& getDefaultName();

	void setOwner(Player* player);

	void sendTo(Player* player, bool doClose);

	void createCampArea();

	void removeCampArea();

	void spawnCampItems();

	SceneObject* getCampObject(int num);

	void disbandCamp();

	void abandonCamp();

	void abortAbandonPhase();

	bool isAbandoned();

	void removeCampRecoveryEvent(Player* player);

	void enterNotification(Player* player);

	void exitNotificaton(Player* player);

	void reactivateRecovery(Player* player);

};

class CampSiteHelper : public DistributedObjectClassHelper, public Singleton<CampSiteHelper> {
	static CampSiteHelper* staticInitializer;

public:
	CampSiteHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<CampSiteHelper>;
};

#include "../../TangibleObjectImplementation.h"

class CampSiteServant : public TangibleObjectImplementation {
public:
	CampSite* _this;

public:
	CampSiteServant(unsigned long long oid, int type);
	virtual ~CampSiteServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*CAMPSITE_H_*/
