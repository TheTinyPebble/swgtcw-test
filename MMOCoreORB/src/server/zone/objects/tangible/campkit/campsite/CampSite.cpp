/*
 *	server/zone/objects/tangible/campkit/campsite/CampSite.cpp generated by engine3 IDL compiler 0.55
 */

#include "CampSite.h"

#include "CampSiteImplementation.h"

#include "../../TangibleObject.h"

#include "../../../creature/CreatureObject.h"

#include "../../../scene/SceneObject.h"

#include "../../../player/Player.h"

#include "../CampKit.h"

#include "../../../../Zone.h"

/*
 *	CampSiteStub
 */

CampSite::CampSite(Player* player, unsigned long long oid, CampKit* campKit) : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new CampSiteImplementation(player, oid, campKit);
	_impl->_setStub(this);
}

CampSite::CampSite(DummyConstructorParameter* param) : TangibleObject(param) {
}

CampSite::~CampSite() {
}

Player* CampSite::getOwner() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		return (Player*) method.executeWithObjectReturn();
	} else
		return ((CampSiteImplementation*) _impl)->getOwner();
}

UnicodeString& CampSite::getName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithUnicodeReturn(_return_getName);
		return _return_getName;
	} else
		return ((CampSiteImplementation*) _impl)->getName();
}

String& CampSite::getDefaultName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		method.executeWithAsciiReturn(_return_getDefaultName);
		return _return_getDefaultName;
	} else
		return ((CampSiteImplementation*) _impl)->getDefaultName();
}

void CampSite::setOwner(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((CampSiteImplementation*) _impl)->setOwner(player);
}

void CampSite::sendTo(Player* player, bool doClose) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(player);
		method.addBooleanParameter(doClose);

		method.executeWithVoidReturn();
	} else
		((CampSiteImplementation*) _impl)->sendTo(player, doClose);
}

void CampSite::createCampArea() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		method.executeWithVoidReturn();
	} else
		((CampSiteImplementation*) _impl)->createCampArea();
}

void CampSite::removeCampArea() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		method.executeWithVoidReturn();
	} else
		((CampSiteImplementation*) _impl)->removeCampArea();
}

void CampSite::spawnCampItems() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		method.executeWithVoidReturn();
	} else
		((CampSiteImplementation*) _impl)->spawnCampItems();
}

SceneObject* CampSite::getCampObject(int num) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addSignedIntParameter(num);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((CampSiteImplementation*) _impl)->getCampObject(num);
}

void CampSite::disbandCamp() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		method.executeWithVoidReturn();
	} else
		((CampSiteImplementation*) _impl)->disbandCamp();
}

void CampSite::abandonCamp() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		method.executeWithVoidReturn();
	} else
		((CampSiteImplementation*) _impl)->abandonCamp();
}

void CampSite::abortAbandonPhase() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);

		method.executeWithVoidReturn();
	} else
		((CampSiteImplementation*) _impl)->abortAbandonPhase();
}

bool CampSite::isAbandoned() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		return method.executeWithBooleanReturn();
	} else
		return ((CampSiteImplementation*) _impl)->isAbandoned();
}

void CampSite::removeCampRecoveryEvent(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((CampSiteImplementation*) _impl)->removeCampRecoveryEvent(player);
}

void CampSite::enterNotification(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((CampSiteImplementation*) _impl)->enterNotification(player);
}

void CampSite::exitNotificaton(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((CampSiteImplementation*) _impl)->exitNotificaton(player);
}

void CampSite::reactiveRecovery(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((CampSiteImplementation*) _impl)->reactiveRecovery(player);
}

/*
 *	CampSiteAdapter
 */

CampSiteAdapter::CampSiteAdapter(CampSiteImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* CampSiteAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertLong(getOwner()->_getObjectID());
		break;
	case 7:
		resp->insertUnicode(getName());
		break;
	case 8:
		resp->insertAscii(getDefaultName());
		break;
	case 9:
		setOwner((Player*) inv->getObjectParameter());
		break;
	case 10:
		sendTo((Player*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 11:
		createCampArea();
		break;
	case 12:
		removeCampArea();
		break;
	case 13:
		spawnCampItems();
		break;
	case 14:
		resp->insertLong(getCampObject(inv->getSignedIntParameter())->_getObjectID());
		break;
	case 15:
		disbandCamp();
		break;
	case 16:
		abandonCamp();
		break;
	case 17:
		abortAbandonPhase();
		break;
	case 18:
		resp->insertBoolean(isAbandoned());
		break;
	case 19:
		removeCampRecoveryEvent((Player*) inv->getObjectParameter());
		break;
	case 20:
		enterNotification((Player*) inv->getObjectParameter());
		break;
	case 21:
		exitNotificaton((Player*) inv->getObjectParameter());
		break;
	case 22:
		reactiveRecovery((Player*) inv->getObjectParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

Player* CampSiteAdapter::getOwner() {
	return ((CampSiteImplementation*) impl)->getOwner();
}

UnicodeString& CampSiteAdapter::getName() {
	return ((CampSiteImplementation*) impl)->getName();
}

String& CampSiteAdapter::getDefaultName() {
	return ((CampSiteImplementation*) impl)->getDefaultName();
}

void CampSiteAdapter::setOwner(Player* player) {
	return ((CampSiteImplementation*) impl)->setOwner(player);
}

void CampSiteAdapter::sendTo(Player* player, bool doClose) {
	return ((CampSiteImplementation*) impl)->sendTo(player, doClose);
}

void CampSiteAdapter::createCampArea() {
	return ((CampSiteImplementation*) impl)->createCampArea();
}

void CampSiteAdapter::removeCampArea() {
	return ((CampSiteImplementation*) impl)->removeCampArea();
}

void CampSiteAdapter::spawnCampItems() {
	return ((CampSiteImplementation*) impl)->spawnCampItems();
}

SceneObject* CampSiteAdapter::getCampObject(int num) {
	return ((CampSiteImplementation*) impl)->getCampObject(num);
}

void CampSiteAdapter::disbandCamp() {
	return ((CampSiteImplementation*) impl)->disbandCamp();
}

void CampSiteAdapter::abandonCamp() {
	return ((CampSiteImplementation*) impl)->abandonCamp();
}

void CampSiteAdapter::abortAbandonPhase() {
	return ((CampSiteImplementation*) impl)->abortAbandonPhase();
}

bool CampSiteAdapter::isAbandoned() {
	return ((CampSiteImplementation*) impl)->isAbandoned();
}

void CampSiteAdapter::removeCampRecoveryEvent(Player* player) {
	return ((CampSiteImplementation*) impl)->removeCampRecoveryEvent(player);
}

void CampSiteAdapter::enterNotification(Player* player) {
	return ((CampSiteImplementation*) impl)->enterNotification(player);
}

void CampSiteAdapter::exitNotificaton(Player* player) {
	return ((CampSiteImplementation*) impl)->exitNotificaton(player);
}

void CampSiteAdapter::reactiveRecovery(Player* player) {
	return ((CampSiteImplementation*) impl)->reactiveRecovery(player);
}

/*
 *	CampSiteHelper
 */

CampSiteHelper* CampSiteHelper::staticInitializer = CampSiteHelper::instance();

CampSiteHelper::CampSiteHelper() {
	className = "CampSite";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void CampSiteHelper::finalizeHelper() {
	CampSiteHelper::finalize();
}

DistributedObject* CampSiteHelper::instantiateObject() {
	return new CampSite(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* CampSiteHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new CampSiteAdapter((CampSiteImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	CampSiteServant
 */

CampSiteServant::CampSiteServant(unsigned long long oid, int type) : TangibleObjectImplementation(oid, type) {
	_classHelper = CampSiteHelper::instance();
}

CampSiteServant::~CampSiteServant() {
}

void CampSiteServant::_setStub(DistributedObjectStub* stub) {
	_this = (CampSite*) stub;
	TangibleObjectServant::_setStub(stub);
}

DistributedObjectStub* CampSiteServant::_getStub() {
	return _this;
}

