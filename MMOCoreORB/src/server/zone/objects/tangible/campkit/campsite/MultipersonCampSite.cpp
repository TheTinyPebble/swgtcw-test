/*
 *	server/zone/objects/tangible/campkit/campsite/MultipersonCampSite.cpp generated by engine3 IDL compiler 0.55
 */

#include "MultipersonCampSite.h"

#include "MultipersonCampSiteImplementation.h"

#include "../campsite/CampSite.h"

#include "../CampKit.h"

#include "../../../player/Player.h"

/*
 *	MultipersonCampSiteStub
 */

MultipersonCampSite::MultipersonCampSite(Player* player, unsigned long long oid, CampKit* campKit) : CampSite(DummyConstructorParameter::instance()) {
	_impl = new MultipersonCampSiteImplementation(player, oid, campKit);
	_impl->_setStub(this);
}

MultipersonCampSite::MultipersonCampSite(DummyConstructorParameter* param) : CampSite(param) {
}

MultipersonCampSite::~MultipersonCampSite() {
}

void MultipersonCampSite::spawnCampItems() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((MultipersonCampSiteImplementation*) _impl)->spawnCampItems();
}

/*
 *	MultipersonCampSiteAdapter
 */

MultipersonCampSiteAdapter::MultipersonCampSiteAdapter(MultipersonCampSiteImplementation* obj) : CampSiteAdapter(obj) {
}

Packet* MultipersonCampSiteAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		spawnCampItems();
		break;
	default:
		return NULL;
	}

	return resp;
}

void MultipersonCampSiteAdapter::spawnCampItems() {
	return ((MultipersonCampSiteImplementation*) impl)->spawnCampItems();
}

/*
 *	MultipersonCampSiteHelper
 */

MultipersonCampSiteHelper* MultipersonCampSiteHelper::staticInitializer = MultipersonCampSiteHelper::instance();

MultipersonCampSiteHelper::MultipersonCampSiteHelper() {
	className = "MultipersonCampSite";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void MultipersonCampSiteHelper::finalizeHelper() {
	MultipersonCampSiteHelper::finalize();
}

DistributedObject* MultipersonCampSiteHelper::instantiateObject() {
	return new MultipersonCampSite(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* MultipersonCampSiteHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new MultipersonCampSiteAdapter((MultipersonCampSiteImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	MultipersonCampSiteServant
 */

MultipersonCampSiteServant::MultipersonCampSiteServant(Player* player, unsigned long long oid, CampKit* campKit) : CampSiteImplementation(player, oid, campKit) {
	_classHelper = MultipersonCampSiteHelper::instance();
}

MultipersonCampSiteServant::~MultipersonCampSiteServant() {
}

void MultipersonCampSiteServant::_setStub(DistributedObjectStub* stub) {
	_this = (MultipersonCampSite*) stub;
	CampSiteServant::_setStub(stub);
}

DistributedObjectStub* MultipersonCampSiteServant::_getStub() {
	return _this;
}

