/*
 *	server/zone/objects/tangible/tools/Tool.h generated by engine3 IDL compiler 0.55
 */

#ifndef TOOL_H_
#define TOOL_H_

#include "engine/orb/DistributedObjectBroker.h"

class TangibleObject;

#include "../TangibleObject.h"

class Tool : public TangibleObject {
public:
	Tool(unsigned long long oid, unsigned int tooltype);

	Tool(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn, unsigned int tooltype);

	void setToolType(unsigned int value);

	void setEffectiveness(float value);

	unsigned int getToolType();

	float getEffectiveness();

	bool isPrecisionLaserKnife();

	bool isFlowAnalyzerNode();

	bool isMolecularClamp();

	bool isUpgradeKit();

protected:
	Tool(DummyConstructorParameter* param);

	virtual ~Tool();

	friend class ToolHelper;
};

class ToolImplementation;

class ToolAdapter : public TangibleObjectAdapter {
public:
	ToolAdapter(ToolImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void setToolType(unsigned int value);

	void setEffectiveness(float value);

	unsigned int getToolType();

	float getEffectiveness();

	bool isPrecisionLaserKnife();

	bool isFlowAnalyzerNode();

	bool isMolecularClamp();

	bool isUpgradeKit();

};

class ToolHelper : public DistributedObjectClassHelper, public Singleton<ToolHelper> {
	static ToolHelper* staticInitializer;

public:
	ToolHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<ToolHelper>;
};

#include "../TangibleObjectImplementation.h"

class ToolServant : public TangibleObjectImplementation {
public:
	Tool* _this;

public:
	ToolServant(unsigned long long oid, int type);
	virtual ~ToolServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*TOOL_H_*/
