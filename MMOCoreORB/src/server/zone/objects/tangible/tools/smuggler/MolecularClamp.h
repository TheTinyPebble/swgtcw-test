/*
 *	server/zone/objects/tangible/tools/smuggler/MolecularClamp.h generated by engine3 IDL compiler 0.55
 */

#ifndef MOLECULARCLAMP_H_
#define MOLECULARCLAMP_H_

#include "engine/orb/DistributedObjectBroker.h"

class FlowAnalyzerNode;

#include "FlowAnalyzerNode.h"

class MolecularClamp : public FlowAnalyzerNode {
public:
	MolecularClamp(unsigned long long oid);

	MolecularClamp(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn);

	bool calculateSuccess();

protected:
	MolecularClamp(DummyConstructorParameter* param);

	virtual ~MolecularClamp();

	friend class MolecularClampHelper;
};

class MolecularClampImplementation;

class MolecularClampAdapter : public FlowAnalyzerNodeAdapter {
public:
	MolecularClampAdapter(MolecularClampImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	bool calculateSuccess();

};

class MolecularClampHelper : public DistributedObjectClassHelper, public Singleton<MolecularClampHelper> {
	static MolecularClampHelper* staticInitializer;

public:
	MolecularClampHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<MolecularClampHelper>;
};

#include "FlowAnalyzerNodeImplementation.h"

class MolecularClampServant : public FlowAnalyzerNodeImplementation {
public:
	MolecularClamp* _this;

public:
	MolecularClampServant(unsigned long long oid);
	MolecularClampServant(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn);
	virtual ~MolecularClampServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*MOLECULARCLAMP_H_*/
