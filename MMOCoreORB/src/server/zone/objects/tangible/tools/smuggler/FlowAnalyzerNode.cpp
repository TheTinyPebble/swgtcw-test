/*
 *	server/zone/objects/tangible/tools/smuggler/FlowAnalyzerNode.cpp generated by engine3 IDL compiler 0.55
 */

#include "FlowAnalyzerNode.h"

#include "FlowAnalyzerNodeImplementation.h"

#include "../Tool.h"

/*
 *	FlowAnalyzerNodeStub
 */

FlowAnalyzerNode::FlowAnalyzerNode(unsigned long long oid) : Tool(DummyConstructorParameter::instance()) {
	_impl = new FlowAnalyzerNodeImplementation(oid);
	_impl->_setStub(this);
}

FlowAnalyzerNode::FlowAnalyzerNode(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn) : Tool(DummyConstructorParameter::instance()) {
	_impl = new FlowAnalyzerNodeImplementation(oid, tempCRC, n, tempn);
	_impl->_setStub(this);
}

FlowAnalyzerNode::FlowAnalyzerNode(DummyConstructorParameter* param) : Tool(param) {
}

FlowAnalyzerNode::~FlowAnalyzerNode() {
}

bool FlowAnalyzerNode::calculateSuccess() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		return method.executeWithBooleanReturn();
	} else
		return ((FlowAnalyzerNodeImplementation*) _impl)->calculateSuccess();
}

/*
 *	FlowAnalyzerNodeAdapter
 */

FlowAnalyzerNodeAdapter::FlowAnalyzerNodeAdapter(FlowAnalyzerNodeImplementation* obj) : ToolAdapter(obj) {
}

Packet* FlowAnalyzerNodeAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertBoolean(calculateSuccess());
		break;
	default:
		return NULL;
	}

	return resp;
}

bool FlowAnalyzerNodeAdapter::calculateSuccess() {
	return ((FlowAnalyzerNodeImplementation*) impl)->calculateSuccess();
}

/*
 *	FlowAnalyzerNodeHelper
 */

FlowAnalyzerNodeHelper* FlowAnalyzerNodeHelper::staticInitializer = FlowAnalyzerNodeHelper::instance();

FlowAnalyzerNodeHelper::FlowAnalyzerNodeHelper() {
	className = "FlowAnalyzerNode";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void FlowAnalyzerNodeHelper::finalizeHelper() {
	FlowAnalyzerNodeHelper::finalize();
}

DistributedObject* FlowAnalyzerNodeHelper::instantiateObject() {
	return new FlowAnalyzerNode(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* FlowAnalyzerNodeHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new FlowAnalyzerNodeAdapter((FlowAnalyzerNodeImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	FlowAnalyzerNodeServant
 */

FlowAnalyzerNodeServant::FlowAnalyzerNodeServant(unsigned long long oid, unsigned int type) : ToolImplementation(oid, type) {
	_classHelper = FlowAnalyzerNodeHelper::instance();
}

FlowAnalyzerNodeServant::~FlowAnalyzerNodeServant() {
}

void FlowAnalyzerNodeServant::_setStub(DistributedObjectStub* stub) {
	_this = (FlowAnalyzerNode*) stub;
	ToolServant::_setStub(stub);
}

DistributedObjectStub* FlowAnalyzerNodeServant::_getStub() {
	return _this;
}

