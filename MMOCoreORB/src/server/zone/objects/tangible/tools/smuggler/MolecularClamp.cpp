/*
 *	server/zone/objects/tangible/tools/smuggler/MolecularClamp.cpp generated by engine3 IDL compiler 0.55
 */

#include "MolecularClamp.h"

#include "MolecularClampImplementation.h"

#include "FlowAnalyzerNode.h"

/*
 *	MolecularClampStub
 */

MolecularClamp::MolecularClamp(unsigned long long oid) : FlowAnalyzerNode(DummyConstructorParameter::instance()) {
	_impl = new MolecularClampImplementation(oid);
	_impl->_setStub(this);
}

MolecularClamp::MolecularClamp(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn) : FlowAnalyzerNode(DummyConstructorParameter::instance()) {
	_impl = new MolecularClampImplementation(oid, tempCRC, n, tempn);
	_impl->_setStub(this);
}

MolecularClamp::MolecularClamp(DummyConstructorParameter* param) : FlowAnalyzerNode(param) {
}

MolecularClamp::~MolecularClamp() {
}

bool MolecularClamp::calculateSuccess() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		return method.executeWithBooleanReturn();
	} else
		return ((MolecularClampImplementation*) _impl)->calculateSuccess();
}

/*
 *	MolecularClampAdapter
 */

MolecularClampAdapter::MolecularClampAdapter(MolecularClampImplementation* obj) : FlowAnalyzerNodeAdapter(obj) {
}

Packet* MolecularClampAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertBoolean(calculateSuccess());
		break;
	default:
		return NULL;
	}

	return resp;
}

bool MolecularClampAdapter::calculateSuccess() {
	return ((MolecularClampImplementation*) impl)->calculateSuccess();
}

/*
 *	MolecularClampHelper
 */

MolecularClampHelper* MolecularClampHelper::staticInitializer = MolecularClampHelper::instance();

MolecularClampHelper::MolecularClampHelper() {
	className = "MolecularClamp";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void MolecularClampHelper::finalizeHelper() {
	MolecularClampHelper::finalize();
}

DistributedObject* MolecularClampHelper::instantiateObject() {
	return new MolecularClamp(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* MolecularClampHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new MolecularClampAdapter((MolecularClampImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	MolecularClampServant
 */

MolecularClampServant::MolecularClampServant(unsigned long long oid) : FlowAnalyzerNodeImplementation(oid) {
	_classHelper = MolecularClampHelper::instance();
}

MolecularClampServant::MolecularClampServant(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn) : FlowAnalyzerNodeImplementation(oid, tempCRC, n, tempn) {
	_classHelper = MolecularClampHelper::instance();
}

MolecularClampServant::~MolecularClampServant() {
}

void MolecularClampServant::_setStub(DistributedObjectStub* stub) {
	_this = (MolecularClamp*) stub;
	FlowAnalyzerNodeServant::_setStub(stub);
}

DistributedObjectStub* MolecularClampServant::_getStub() {
	return _this;
}

