/*
 *	server/zone/objects/tangible/tools/smuggler/FlowAnalyzerNode.h generated by engine3 IDL compiler 0.55
 */

#ifndef FLOWANALYZERNODE_H_
#define FLOWANALYZERNODE_H_

#include "engine/orb/DistributedObjectBroker.h"

class Tool;

#include "../Tool.h"

class FlowAnalyzerNode : public Tool {
public:
	FlowAnalyzerNode(unsigned long long oid);

	FlowAnalyzerNode(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn);

	bool calculateSuccess();

protected:
	FlowAnalyzerNode(DummyConstructorParameter* param);

	virtual ~FlowAnalyzerNode();

	friend class FlowAnalyzerNodeHelper;
};

class FlowAnalyzerNodeImplementation;

class FlowAnalyzerNodeAdapter : public ToolAdapter {
public:
	FlowAnalyzerNodeAdapter(FlowAnalyzerNodeImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	bool calculateSuccess();

};

class FlowAnalyzerNodeHelper : public DistributedObjectClassHelper, public Singleton<FlowAnalyzerNodeHelper> {
	static FlowAnalyzerNodeHelper* staticInitializer;

public:
	FlowAnalyzerNodeHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<FlowAnalyzerNodeHelper>;
};

#include "../ToolImplementation.h"

class FlowAnalyzerNodeServant : public ToolImplementation {
public:
	FlowAnalyzerNode* _this;

public:
	FlowAnalyzerNodeServant(unsigned long long oid, unsigned int type);
	virtual ~FlowAnalyzerNodeServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*FLOWANALYZERNODE_H_*/
