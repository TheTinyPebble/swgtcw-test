/*
 *	server/zone/objects/tangible/tools/repairtool/RepairTool.cpp generated by engine3 IDL compiler 0.55
 */

#include "RepairTool.h"

#include "RepairToolImplementation.h"

#include "../Tool.h"

#include "../../../scene/SceneObject.h"

#include "../../../creature/CreatureObject.h"

#include "../../../player/Player.h"

/*
 *	RepairToolStub
 */

RepairTool::RepairTool(unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn) : Tool(DummyConstructorParameter::instance()) {
	_impl = new RepairToolImplementation(oid, tempCRC, n, tempn);
	_impl->_setStub(this);
}

RepairTool::RepairTool(CreatureObject* creature, unsigned long long oid, unsigned int tempCRC, const UnicodeString& n, const String& tempn) : Tool(DummyConstructorParameter::instance()) {
	_impl = new RepairToolImplementation(creature, oid, tempCRC, n, tempn);
	_impl->_setStub(this);
}

RepairTool::RepairTool(DummyConstructorParameter* param) : Tool(param) {
}

RepairTool::~RepairTool() {
}

void RepairTool::generateAttributes(SceneObject* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((RepairToolImplementation*) _impl)->generateAttributes(obj);
}

int RepairTool::useObject(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return ((RepairToolImplementation*) _impl)->useObject(player);
}

void RepairTool::setQuality(int q) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addSignedIntParameter(q);

		method.executeWithVoidReturn();
	} else
		((RepairToolImplementation*) _impl)->setQuality(q);
}

int RepairTool::getQuality() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return method.executeWithSignedIntReturn();
	} else
		return ((RepairToolImplementation*) _impl)->getQuality();
}

/*
 *	RepairToolAdapter
 */

RepairToolAdapter::RepairToolAdapter(RepairToolImplementation* obj) : ToolAdapter(obj) {
}

Packet* RepairToolAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		generateAttributes((SceneObject*) inv->getObjectParameter());
		break;
	case 7:
		resp->insertSignedInt(useObject((Player*) inv->getObjectParameter()));
		break;
	case 8:
		setQuality(inv->getSignedIntParameter());
		break;
	case 9:
		resp->insertSignedInt(getQuality());
		break;
	default:
		return NULL;
	}

	return resp;
}

void RepairToolAdapter::generateAttributes(SceneObject* obj) {
	return ((RepairToolImplementation*) impl)->generateAttributes(obj);
}

int RepairToolAdapter::useObject(Player* player) {
	return ((RepairToolImplementation*) impl)->useObject(player);
}

void RepairToolAdapter::setQuality(int q) {
	return ((RepairToolImplementation*) impl)->setQuality(q);
}

int RepairToolAdapter::getQuality() {
	return ((RepairToolImplementation*) impl)->getQuality();
}

/*
 *	RepairToolHelper
 */

RepairToolHelper* RepairToolHelper::staticInitializer = RepairToolHelper::instance();

RepairToolHelper::RepairToolHelper() {
	className = "RepairTool";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void RepairToolHelper::finalizeHelper() {
	RepairToolHelper::finalize();
}

DistributedObject* RepairToolHelper::instantiateObject() {
	return new RepairTool(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* RepairToolHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new RepairToolAdapter((RepairToolImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	RepairToolServant
 */

RepairToolServant::RepairToolServant(unsigned long long oid, unsigned int type) : ToolImplementation(oid, type) {
	_classHelper = RepairToolHelper::instance();
}

RepairToolServant::~RepairToolServant() {
}

void RepairToolServant::_setStub(DistributedObjectStub* stub) {
	_this = (RepairTool*) stub;
	ToolServant::_setStub(stub);
}

DistributedObjectStub* RepairToolServant::_getStub() {
	return _this;
}

