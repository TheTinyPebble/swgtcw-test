/*
 *	server/zone/objects/tangible/MissionBag.cpp generated by engine3 IDL compiler 0.55
 */

#include "MissionBag.h"

#include "MissionBagImplementation.h"

#include "Container.h"

#include "../creature/CreatureObject.h"

/*
 *	MissionBagStub
 */

MissionBag::MissionBag(CreatureObject* creature) : Container(DummyConstructorParameter::instance()) {
	_impl = new MissionBagImplementation(creature);
	_impl->_setStub(this);
}

MissionBag::MissionBag(DummyConstructorParameter* param) : Container(param) {
}

MissionBag::~MissionBag() {
}

/*
 *	MissionBagAdapter
 */

MissionBagAdapter::MissionBagAdapter(MissionBagImplementation* obj) : ContainerAdapter(obj) {
}

Packet* MissionBagAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	default:
		return NULL;
	}

	return resp;
}

/*
 *	MissionBagHelper
 */

MissionBagHelper* MissionBagHelper::staticInitializer = MissionBagHelper::instance();

MissionBagHelper::MissionBagHelper() {
	className = "MissionBag";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void MissionBagHelper::finalizeHelper() {
	MissionBagHelper::finalize();
}

DistributedObject* MissionBagHelper::instantiateObject() {
	return new MissionBag(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* MissionBagHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new MissionBagAdapter((MissionBagImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	MissionBagServant
 */

MissionBagServant::MissionBagServant(unsigned long long oid) : ContainerImplementation(oid) {
	_classHelper = MissionBagHelper::instance();
}

MissionBagServant::~MissionBagServant() {
}

void MissionBagServant::_setStub(DistributedObjectStub* stub) {
	_this = (MissionBag*) stub;
	ContainerServant::_setStub(stub);
}

DistributedObjectStub* MissionBagServant::_getStub() {
	return _this;
}

