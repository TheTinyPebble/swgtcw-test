/*
 *	server/zone/objects/tangible/Container.cpp generated by engine3 IDL compiler 0.60
 */

#include "Container.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/Zone.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

/*
 *	ContainerStub
 */

enum {RPC_INITIALIZETRANSIENTMEMBERS__,RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_,RPC_CANADDOBJECT__SCENEOBJECT_INT_STRING_,RPC_ISCONTAINEROBJECT__,RPC_ISCONTAINERLOCKED__,RPC_SETLOCKEDSTATUS__BOOL_};

Container::Container() : TangibleObject(DummyConstructorParameter::instance()) {
	ContainerImplementation* _implementation = new ContainerImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("Container");
}

Container::Container(DummyConstructorParameter* param) : TangibleObject(param) {
	_setClassName("Container");
}

Container::~Container() {
}



void Container::loadTemplateData(SharedObjectTemplate* templateData) {
	ContainerImplementation* _implementation = static_cast<ContainerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->loadTemplateData(templateData);
}

void Container::initializeTransientMembers() {
	ContainerImplementation* _implementation = static_cast<ContainerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void Container::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player) {
	ContainerImplementation* _implementation = static_cast<ContainerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->fillObjectMenuResponse(menuResponse, player);
}

int Container::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	ContainerImplementation* _implementation = static_cast<ContainerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->handleObjectMenuSelect(player, selectedID);
}

int Container::canAddObject(SceneObject* object, int containmentType, String& errorDescription) {
	ContainerImplementation* _implementation = static_cast<ContainerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CANADDOBJECT__SCENEOBJECT_INT_STRING_);
		method.addObjectParameter(object);
		method.addSignedIntParameter(containmentType);
		method.addAsciiParameter(errorDescription);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->canAddObject(object, containmentType, errorDescription);
}

bool Container::isContainerObject() {
	ContainerImplementation* _implementation = static_cast<ContainerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCONTAINEROBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isContainerObject();
}

bool Container::isContainerLocked() {
	ContainerImplementation* _implementation = static_cast<ContainerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCONTAINERLOCKED__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isContainerLocked();
}

void Container::setLockedStatus(bool lock) {
	ContainerImplementation* _implementation = static_cast<ContainerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETLOCKEDSTATUS__BOOL_);
		method.addBooleanParameter(lock);

		method.executeWithVoidReturn();
	} else
		_implementation->setLockedStatus(lock);
}

DistributedObjectServant* Container::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

void Container::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	ContainerImplementation
 */

ContainerImplementation::ContainerImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
	_initializeImplementation();
}


ContainerImplementation::~ContainerImplementation() {
}


void ContainerImplementation::finalize() {
}

void ContainerImplementation::_initializeImplementation() {
	_setClassHelper(ContainerHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void ContainerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<Container*>(stub);
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* ContainerImplementation::_getStub() {
	return _this.get();
}

ContainerImplementation::operator const Container*() {
	return _this.get();
}

void ContainerImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void ContainerImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void ContainerImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void ContainerImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void ContainerImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void ContainerImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void ContainerImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void ContainerImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("Container");

}

void ContainerImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(ContainerImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ContainerImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (TangibleObjectImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "Container.locked") {
		TypeInfo<bool >::parseFromBinaryStream(&locked, stream);
		return true;
	}


	return false;
}

void ContainerImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ContainerImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ContainerImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = TangibleObjectImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;
	_name = "Container.locked";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&locked, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 1;
}

ContainerImplementation::ContainerImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/Container.idl():  		Logger.setLoggingName("Container");
	Logger::setLoggingName("Container");
	// server/zone/objects/tangible/Container.idl():  		locked = false;
	locked = false;
}

bool ContainerImplementation::isContainerObject() {
	// server/zone/objects/tangible/Container.idl():  		return true;
	return true;
}

bool ContainerImplementation::isContainerLocked() {
	// server/zone/objects/tangible/Container.idl():  		return locked;
	return locked;
}

void ContainerImplementation::setLockedStatus(bool lock) {
	// server/zone/objects/tangible/Container.idl():  		locked = lock;
	locked = lock;
}

/*
 *	ContainerAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


ContainerAdapter::ContainerAdapter(Container* obj) : TangibleObjectAdapter(obj) {
}

void ContainerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			initializeTransientMembers();
		}
		break;
	case RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_:
		{
			resp->insertSignedInt(handleObjectMenuSelect(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getByteParameter()));
		}
		break;
	case RPC_CANADDOBJECT__SCENEOBJECT_INT_STRING_:
		{
			String errorDescription; 
			resp->insertSignedInt(canAddObject(static_cast<SceneObject*>(inv->getObjectParameter()), inv->getSignedIntParameter(), inv->getAsciiParameter(errorDescription)));
		}
		break;
	case RPC_ISCONTAINEROBJECT__:
		{
			resp->insertBoolean(isContainerObject());
		}
		break;
	case RPC_ISCONTAINERLOCKED__:
		{
			resp->insertBoolean(isContainerLocked());
		}
		break;
	case RPC_SETLOCKEDSTATUS__BOOL_:
		{
			setLockedStatus(inv->getBooleanParameter());
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void ContainerAdapter::initializeTransientMembers() {
	(static_cast<Container*>(stub))->initializeTransientMembers();
}

int ContainerAdapter::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	return (static_cast<Container*>(stub))->handleObjectMenuSelect(player, selectedID);
}

int ContainerAdapter::canAddObject(SceneObject* object, int containmentType, String& errorDescription) {
	return (static_cast<Container*>(stub))->canAddObject(object, containmentType, errorDescription);
}

bool ContainerAdapter::isContainerObject() {
	return (static_cast<Container*>(stub))->isContainerObject();
}

bool ContainerAdapter::isContainerLocked() {
	return (static_cast<Container*>(stub))->isContainerLocked();
}

void ContainerAdapter::setLockedStatus(bool lock) {
	(static_cast<Container*>(stub))->setLockedStatus(lock);
}

/*
 *	ContainerHelper
 */

ContainerHelper* ContainerHelper::staticInitializer = ContainerHelper::instance();

ContainerHelper::ContainerHelper() {
	className = "Container";

	Core::getObjectBroker()->registerClass(className, this);
}

void ContainerHelper::finalizeHelper() {
	ContainerHelper::finalize();
}

DistributedObject* ContainerHelper::instantiateObject() {
	return new Container(DummyConstructorParameter::instance());
}

DistributedObjectServant* ContainerHelper::instantiateServant() {
	return new ContainerImplementation();
}

DistributedObjectAdapter* ContainerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ContainerAdapter(static_cast<Container*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

