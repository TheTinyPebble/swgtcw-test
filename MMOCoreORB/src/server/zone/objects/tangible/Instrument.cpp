/*
 *	server/zone/objects/tangible/Instrument.cpp generated by engine3 IDL compiler 0.60
 */

#include "Instrument.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/Zone.h"


// Imported class dependencies

#include "server/zone/objects/scene/variables/DeltaVector.h"

#include "system/lang/Time.h"

#include "engine/util/Quaternion.h"

#include "system/util/VectorMap.h"

#include "server/zone/managers/planet/MapLocationTable.h"

#include "server/zone/objects/scene/ObserverEventMap.h"

#include "server/zone/managers/object/ObjectMap.h"

#include "system/util/Vector.h"

#include "server/zone/managers/creature/CreatureManager.h"

#include "server/zone/ZoneProcessServerImplementation.h"

#include "server/zone/Zone.h"

#include "server/zone/managers/planet/HeightMap.h"

#include "engine/util/QuadTree.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "system/util/SortedVector.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "server/zone/managers/planet/PlanetManager.h"

#include "server/zone/objects/scene/variables/CustomizationVariables.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

#include "server/zone/objects/scene/variables/StringId.h"

/*
 *	InstrumentStub
 */

Instrument::Instrument() : TangibleObject(DummyConstructorParameter::instance()) {
	InstrumentImplementation* _implementation = new InstrumentImplementation();
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

Instrument::Instrument(DummyConstructorParameter* param) : TangibleObject(param) {
}

Instrument::~Instrument() {
}


void Instrument::initializeTransientMembers() {
	InstrumentImplementation* _implementation = (InstrumentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void Instrument::loadTemplateData(SharedObjectTemplate* templateData) {
	InstrumentImplementation* _implementation = (InstrumentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->loadTemplateData(templateData);
}

int Instrument::getInstrumentType() {
	InstrumentImplementation* _implementation = (InstrumentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getInstrumentType();
}

DistributedObjectServant* Instrument::_getImplementation() {
	return getForUpdate();}

void Instrument::_setImplementation(DistributedObjectServant* servant) {
	setObject((ManagedObjectImplementation*) servant);}

/*
 *	InstrumentImplementation
 */

InstrumentImplementation::InstrumentImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
	_initializeImplementation();
}


InstrumentImplementation::~InstrumentImplementation() {
}


void InstrumentImplementation::finalize() {
}

void InstrumentImplementation::_initializeImplementation() {
	_setClassHelper(InstrumentHelper::instance());

	_serializationHelperMethod();
}

void InstrumentImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (Instrument*) stub;
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* InstrumentImplementation::_getStub() {
	return _this;
}

InstrumentImplementation::operator const Instrument*() {
	return _this;
}

TransactionalObject* InstrumentImplementation::clone() {
	return (TransactionalObject*) new InstrumentImplementation(*this);
}


void InstrumentImplementation::lock(bool doLock) {
}

void InstrumentImplementation::lock(ManagedObject* obj) {
}

void InstrumentImplementation::rlock(bool doLock) {
}

void InstrumentImplementation::wlock(bool doLock) {
}

void InstrumentImplementation::wlock(ManagedObject* obj) {
}

void InstrumentImplementation::unlock(bool doLock) {
}

void InstrumentImplementation::runlock(bool doLock) {
}

void InstrumentImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("Instrument");

	addSerializableVariable("instrumentType", &instrumentType);
}

InstrumentImplementation::InstrumentImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/Instrument.idl(83):  		instrumentType = 0;
	instrumentType = 0;
	// server/zone/objects/tangible/Instrument.idl(85):  		Logger.setLoggingName("Instrument");
	Logger::setLoggingName("Instrument");
}

void InstrumentImplementation::initializeTransientMembers() {
	// server/zone/objects/tangible/Instrument.idl(89):  		super.initializeTransientMembers();
	TangibleObjectImplementation::initializeTransientMembers();
	// server/zone/objects/tangible/Instrument.idl(91):  		Logger.setLoggingName("Instrument");
	Logger::setLoggingName("Instrument");
}

void InstrumentImplementation::loadTemplateData(SharedObjectTemplate* templateData) {
	// server/zone/objects/tangible/Instrument.idl(96):  		super.loadTemplateData(templateData);
	TangibleObjectImplementation::loadTemplateData(templateData);
	// server/zone/objects/tangible/Instrument.idl(98):  		InstrumentObjectTemplate 
	if (!templateData->isInstrumentObjectTemplate())	// server/zone/objects/tangible/Instrument.idl(99):  			return;
	return;
	// server/zone/objects/tangible/Instrument.idl(101):  templ = (InstrumentObjectTemplate) templateData;
	InstrumentObjectTemplate* templ = (InstrumentObjectTemplate*) templateData;
	// server/zone/objects/tangible/Instrument.idl(103):  		instrumentType = templ.getInstrumentType();
	instrumentType = templ->getInstrumentType();
}

int InstrumentImplementation::getInstrumentType() {
	// server/zone/objects/tangible/Instrument.idl(107):  		return instrumentType;
	return instrumentType;
}

/*
 *	InstrumentAdapter
 */

InstrumentAdapter::InstrumentAdapter(InstrumentImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* InstrumentAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initializeTransientMembers();
		break;
	case 7:
		resp->insertSignedInt(getInstrumentType());
		break;
	default:
		return NULL;
	}

	return resp;
}

void InstrumentAdapter::initializeTransientMembers() {
	((InstrumentImplementation*) impl)->initializeTransientMembers();
}

int InstrumentAdapter::getInstrumentType() {
	return ((InstrumentImplementation*) impl)->getInstrumentType();
}

/*
 *	InstrumentHelper
 */

InstrumentHelper* InstrumentHelper::staticInitializer = InstrumentHelper::instance();

InstrumentHelper::InstrumentHelper() {
	className = "Instrument";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void InstrumentHelper::finalizeHelper() {
	InstrumentHelper::finalize();
}

DistributedObject* InstrumentHelper::instantiateObject() {
	return new Instrument(DummyConstructorParameter::instance());
}

DistributedObjectServant* InstrumentHelper::instantiateServant() {
	return new InstrumentImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* InstrumentHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new InstrumentAdapter((InstrumentImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

