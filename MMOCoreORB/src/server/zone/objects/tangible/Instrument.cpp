/*
 *	server/zone/objects/tangible/Instrument.cpp generated by engine3 IDL compiler 0.60
 */

#include "Instrument.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/Zone.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/managers/object/ObjectManager.h"

#include "server/zone/objects/tangible/InstrumentObserver.h"

/*
 *	InstrumentStub
 */

Instrument::Instrument() : TangibleObject(DummyConstructorParameter::instance()) {
	InstrumentImplementation* _implementation = new InstrumentImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

Instrument::Instrument(DummyConstructorParameter* param) : TangibleObject(param) {
}

Instrument::~Instrument() {
}


void Instrument::initializeTransientMembers() {
	InstrumentImplementation* _implementation = (InstrumentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void Instrument::notifyLoadFromDatabase() {
	InstrumentImplementation* _implementation = (InstrumentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyLoadFromDatabase();
}

void Instrument::loadTemplateData(SharedObjectTemplate* templateData) {
	InstrumentImplementation* _implementation = (InstrumentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->loadTemplateData(templateData);
}

void Instrument::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player) {
	InstrumentImplementation* _implementation = (InstrumentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->fillObjectMenuResponse(menuResponse, player);
}

int Instrument::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	InstrumentImplementation* _implementation = (InstrumentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->handleObjectMenuSelect(player, selectedID);
}

void Instrument::spawnInForeignCell(PlayerCreature* spawner) {
	InstrumentImplementation* _implementation = (InstrumentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(spawner);

		method.executeWithVoidReturn();
	} else
		_implementation->spawnInForeignCell(spawner);
}

void Instrument::spawnInAdminCell(PlayerCreature* spawner) {
	InstrumentImplementation* _implementation = (InstrumentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(spawner);

		method.executeWithVoidReturn();
	} else
		_implementation->spawnInAdminCell(spawner);
}

void Instrument::spawnOutside(PlayerCreature* spawner) {
	InstrumentImplementation* _implementation = (InstrumentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addObjectParameter(spawner);

		method.executeWithVoidReturn();
	} else
		_implementation->spawnOutside(spawner);
}

int Instrument::getInstrumentType() {
	InstrumentImplementation* _implementation = (InstrumentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getInstrumentType();
}

PlayerCreature* Instrument::getSpawnerPlayer() {
	InstrumentImplementation* _implementation = (InstrumentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		return (PlayerCreature*) method.executeWithObjectReturn();
	} else
		return _implementation->getSpawnerPlayer();
}

void Instrument::setSpawnerPlayer(PlayerCreature* pla) {
	InstrumentImplementation* _implementation = (InstrumentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addObjectParameter(pla);

		method.executeWithVoidReturn();
	} else
		_implementation->setSpawnerPlayer(pla);
}

bool Instrument::isBeingUsed() {
	InstrumentImplementation* _implementation = (InstrumentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isBeingUsed();
}

void Instrument::setBeingUsed(bool val) {
	InstrumentImplementation* _implementation = (InstrumentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addBooleanParameter(val);

		method.executeWithVoidReturn();
	} else
		_implementation->setBeingUsed(val);
}

DistributedObjectServant* Instrument::_getImplementation() {
	return _impl;}

void Instrument::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;}

/*
 *	InstrumentImplementation
 */

InstrumentImplementation::InstrumentImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
	_initializeImplementation();
}


InstrumentImplementation::~InstrumentImplementation() {
}


void InstrumentImplementation::finalize() {
}

void InstrumentImplementation::_initializeImplementation() {
	_setClassHelper(InstrumentHelper::instance());

	_serializationHelperMethod();
}

void InstrumentImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (Instrument*) stub;
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* InstrumentImplementation::_getStub() {
	return _this;
}

InstrumentImplementation::operator const Instrument*() {
	return _this;
}

void InstrumentImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void InstrumentImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void InstrumentImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void InstrumentImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void InstrumentImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void InstrumentImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void InstrumentImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void InstrumentImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("Instrument");

	addSerializableVariable("instrumentType", &instrumentType);
	addSerializableVariable("beingUsed", &beingUsed);
	addSerializableVariable("spawnedObject", &spawnedObject);
	addSerializableVariable("spawnerPlayer", &spawnerPlayer);
}

InstrumentImplementation::InstrumentImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/Instrument.idl(94):  		instrumentType = 0;
	instrumentType = 0;
	// server/zone/objects/tangible/Instrument.idl(96):  		beingUsed = false;
	beingUsed = false;
	// server/zone/objects/tangible/Instrument.idl(98):  		Logger.setLoggingName("Instrument");
	Logger::setLoggingName("Instrument");
}

void InstrumentImplementation::initializeTransientMembers() {
	// server/zone/objects/tangible/Instrument.idl(102):  		super.initializeTransientMembers();
	TangibleObjectImplementation::initializeTransientMembers();
	// server/zone/objects/tangible/Instrument.idl(104):  		Logger.setLoggingName("Instrument");
	Logger::setLoggingName("Instrument");
}

void InstrumentImplementation::notifyLoadFromDatabase() {
	// server/zone/objects/tangible/Instrument.idl(108):  		super.notifyLoadFromDatabase();
	TangibleObjectImplementation::notifyLoadFromDatabase();
	// server/zone/objects/tangible/Instrument.idl(110):  		beingUsed = false;
	beingUsed = false;
}

void InstrumentImplementation::loadTemplateData(SharedObjectTemplate* templateData) {
	// server/zone/objects/tangible/Instrument.idl(115):  		super.loadTemplateData(templateData);
	TangibleObjectImplementation::loadTemplateData(templateData);
	// server/zone/objects/tangible/Instrument.idl(117):  		InstrumentObjectTemplate 
	if (!templateData->isInstrumentObjectTemplate())	// server/zone/objects/tangible/Instrument.idl(118):  			return;
	return;
	// server/zone/objects/tangible/Instrument.idl(120):  templ = (InstrumentObjectTemplate) templateData;
	InstrumentObjectTemplate* templ = (InstrumentObjectTemplate*) templateData;
	// server/zone/objects/tangible/Instrument.idl(122):  		instrumentType = templ.getInstrumentType();
	instrumentType = templ->getInstrumentType();
}

void InstrumentImplementation::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player) {
	// server/zone/objects/tangible/Instrument.idl(133):  		super.fillObjectMenuResponse(menuResponse, player);
	TangibleObjectImplementation::fillObjectMenuResponse(menuResponse, player);
	// server/zone/objects/tangible/Instrument.idl(135):  		if 
	if (instrumentType != OMNIBOX && instrumentType != NALARGON){
	// server/zone/objects/tangible/Instrument.idl(136):  			return;
	return;
}
	// server/zone/objects/tangible/Instrument.idl(139):  
	if (beingUsed){
	// server/zone/objects/tangible/Instrument.idl(140):  			return;
	return;
}

	else 	// server/zone/objects/tangible/Instrument.idl(141):  	}
	if (!isInQuadTree()){
	// server/zone/objects/tangible/Instrument.idl(142):  			menuResponse.addRadialMenuItem(69, 3, "@radial_performance:play_instrument");
	menuResponse->addRadialMenuItem(69, 3, "@radial_performance:play_instrument");
}
}

int InstrumentImplementation::getInstrumentType() {
	// server/zone/objects/tangible/Instrument.idl(161):  		return instrumentType;
	return instrumentType;
}

PlayerCreature* InstrumentImplementation::getSpawnerPlayer() {
	// server/zone/objects/tangible/Instrument.idl(165):  		return spawnerPlayer;
	return spawnerPlayer;
}

void InstrumentImplementation::setSpawnerPlayer(PlayerCreature* pla) {
	// server/zone/objects/tangible/Instrument.idl(169):  		spawnerPlayer = pla;
	spawnerPlayer = pla;
}

bool InstrumentImplementation::isBeingUsed() {
	// server/zone/objects/tangible/Instrument.idl(173):  		return beingUsed;
	return beingUsed;
}

void InstrumentImplementation::setBeingUsed(bool val) {
	// server/zone/objects/tangible/Instrument.idl(177):  		beingUsed = val;
	beingUsed = val;
}

/*
 *	InstrumentAdapter
 */

InstrumentAdapter::InstrumentAdapter(InstrumentImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* InstrumentAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initializeTransientMembers();
		break;
	case 7:
		notifyLoadFromDatabase();
		break;
	case 8:
		resp->insertSignedInt(handleObjectMenuSelect((PlayerCreature*) inv->getObjectParameter(), inv->getByteParameter()));
		break;
	case 9:
		spawnInForeignCell((PlayerCreature*) inv->getObjectParameter());
		break;
	case 10:
		spawnInAdminCell((PlayerCreature*) inv->getObjectParameter());
		break;
	case 11:
		spawnOutside((PlayerCreature*) inv->getObjectParameter());
		break;
	case 12:
		resp->insertSignedInt(getInstrumentType());
		break;
	case 13:
		resp->insertLong(getSpawnerPlayer()->_getObjectID());
		break;
	case 14:
		setSpawnerPlayer((PlayerCreature*) inv->getObjectParameter());
		break;
	case 15:
		resp->insertBoolean(isBeingUsed());
		break;
	case 16:
		setBeingUsed(inv->getBooleanParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void InstrumentAdapter::initializeTransientMembers() {
	((InstrumentImplementation*) impl)->initializeTransientMembers();
}

void InstrumentAdapter::notifyLoadFromDatabase() {
	((InstrumentImplementation*) impl)->notifyLoadFromDatabase();
}

int InstrumentAdapter::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	return ((InstrumentImplementation*) impl)->handleObjectMenuSelect(player, selectedID);
}

void InstrumentAdapter::spawnInForeignCell(PlayerCreature* spawner) {
	((InstrumentImplementation*) impl)->spawnInForeignCell(spawner);
}

void InstrumentAdapter::spawnInAdminCell(PlayerCreature* spawner) {
	((InstrumentImplementation*) impl)->spawnInAdminCell(spawner);
}

void InstrumentAdapter::spawnOutside(PlayerCreature* spawner) {
	((InstrumentImplementation*) impl)->spawnOutside(spawner);
}

int InstrumentAdapter::getInstrumentType() {
	return ((InstrumentImplementation*) impl)->getInstrumentType();
}

PlayerCreature* InstrumentAdapter::getSpawnerPlayer() {
	return ((InstrumentImplementation*) impl)->getSpawnerPlayer();
}

void InstrumentAdapter::setSpawnerPlayer(PlayerCreature* pla) {
	((InstrumentImplementation*) impl)->setSpawnerPlayer(pla);
}

bool InstrumentAdapter::isBeingUsed() {
	return ((InstrumentImplementation*) impl)->isBeingUsed();
}

void InstrumentAdapter::setBeingUsed(bool val) {
	((InstrumentImplementation*) impl)->setBeingUsed(val);
}

/*
 *	InstrumentHelper
 */

InstrumentHelper* InstrumentHelper::staticInitializer = InstrumentHelper::instance();

InstrumentHelper::InstrumentHelper() {
	className = "Instrument";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void InstrumentHelper::finalizeHelper() {
	InstrumentHelper::finalize();
}

DistributedObject* InstrumentHelper::instantiateObject() {
	return new Instrument(DummyConstructorParameter::instance());
}

DistributedObjectServant* InstrumentHelper::instantiateServant() {
	return new InstrumentImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* InstrumentHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new InstrumentAdapter((InstrumentImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

