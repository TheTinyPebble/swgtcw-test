/*
 *	server/zone/objects/waypoint/WaypointObject.h generated by engine3 IDL compiler 0.60
 */

#ifndef WAYPOINTOBJECT_H_
#define WAYPOINTOBJECT_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedObject.h"

#include "server/zone/objects/intangible/IntangibleObject.h"

#include "engine/lua/LuaObject.h"

namespace server {
namespace zone {
namespace objects {
namespace waypoint {

class WaypointObject : public IntangibleObject {
public:
	WaypointObject(LuaObject* templateData);

	void changeStatus(bool status);

	void switchStatus();

	bool getStatus();

	void setInternalNote(const String& message);

	void setPlanetName(const String& planet);

	unsigned int getPlanetCRC();

	String getInternalNote();

	String getPlanetName();

protected:
	WaypointObject(DummyConstructorParameter* param);

	virtual ~WaypointObject();

	String _return_getInternalNote;
	String _return_getPlanetName;

	friend class WaypointObjectHelper;
};

} // namespace waypoint
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::waypoint;

namespace server {
namespace zone {
namespace objects {
namespace waypoint {

class WaypointObjectImplementation : public IntangibleObjectImplementation {
	String internalNote;

	String planetName;

	bool active;

public:
	WaypointObjectImplementation(LuaObject* templateData);

	WaypointObjectImplementation(DummyConstructorParameter* param);

	void changeStatus(bool status);

	void switchStatus();

	bool getStatus();

	void setInternalNote(const String& message);

	void setPlanetName(const String& planet);

	unsigned int getPlanetCRC();

	String getInternalNote();

	String getPlanetName();

	WaypointObject* _this;

	operator const WaypointObject*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~WaypointObjectImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();

	friend class WaypointObject;
};

class WaypointObjectAdapter : public IntangibleObjectAdapter {
public:
	WaypointObjectAdapter(WaypointObjectImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void changeStatus(bool status);

	void switchStatus();

	bool getStatus();

	void setInternalNote(const String& message);

	void setPlanetName(const String& planet);

	unsigned int getPlanetCRC();

	String getInternalNote();

	String getPlanetName();

protected:
	String _param0_setInternalNote__String_;
	String _param0_setPlanetName__String_;
};

class WaypointObjectHelper : public DistributedObjectClassHelper, public Singleton<WaypointObjectHelper> {
	static WaypointObjectHelper* staticInitializer;

public:
	WaypointObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<WaypointObjectHelper>;
};

} // namespace waypoint
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::waypoint;

#endif /*WAYPOINTOBJECT_H_*/
