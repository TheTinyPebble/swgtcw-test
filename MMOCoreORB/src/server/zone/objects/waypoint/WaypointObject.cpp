/*
 *	server/zone/objects/waypoint/WaypointObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "WaypointObject.h"

#include "server/zone/Zone.h"

#include "server/zone/templates/SharedObjectTemplate.h"

/*
 *	WaypointObjectStub
 */

WaypointObject::WaypointObject() : IntangibleObject(DummyConstructorParameter::instance()) {
	WaypointObjectImplementation* _implementation = new WaypointObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

WaypointObject::WaypointObject(DummyConstructorParameter* param) : IntangibleObject(param) {
}

WaypointObject::~WaypointObject() {
}


void WaypointObject::loadTemplateData(SharedObjectTemplate* templateData) {
	WaypointObjectImplementation* _implementation = (WaypointObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->loadTemplateData(templateData);
}

void WaypointObject::insertToMessage(BaseMessage* msg) {
	WaypointObjectImplementation* _implementation = (WaypointObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->insertToMessage(msg);
}

void WaypointObject::setCellID(unsigned int id) {
	WaypointObjectImplementation* _implementation = (WaypointObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addUnsignedIntParameter(id);

		method.executeWithVoidReturn();
	} else
		_implementation->setCellID(id);
}

void WaypointObject::setPlanetCRC(unsigned int crc) {
	WaypointObjectImplementation* _implementation = (WaypointObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addUnsignedIntParameter(crc);

		method.executeWithVoidReturn();
	} else
		_implementation->setPlanetCRC(crc);
}

unsigned int WaypointObject::getPlanetCRC() {
	WaypointObjectImplementation* _implementation = (WaypointObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getPlanetCRC();
}

void WaypointObject::setCustomName(const UnicodeString& name) {
	WaypointObjectImplementation* _implementation = (WaypointObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addUnicodeParameter(name);

		method.executeWithVoidReturn();
	} else
		_implementation->setCustomName(name);
}

UnicodeString WaypointObject::getCustomName() {
	WaypointObjectImplementation* _implementation = (WaypointObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		method.executeWithUnicodeReturn(_return_getCustomName);
		return _return_getCustomName;
	} else
		return _implementation->getCustomName();
}

void WaypointObject::setColor(byte newColor) {
	WaypointObjectImplementation* _implementation = (WaypointObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addByteParameter(newColor);

		method.executeWithVoidReturn();
	} else
		_implementation->setColor(newColor);
}

void WaypointObject::setActive(byte newStatus) {
	WaypointObjectImplementation* _implementation = (WaypointObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addByteParameter(newStatus);

		method.executeWithVoidReturn();
	} else
		_implementation->setActive(newStatus);
}

void WaypointObject::setUnknown(unsigned long long id) {
	WaypointObjectImplementation* _implementation = (WaypointObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addUnsignedLongParameter(id);

		method.executeWithVoidReturn();
	} else
		_implementation->setUnknown(id);
}

void WaypointObject::setSpecialTypeID(int id) {
	WaypointObjectImplementation* _implementation = (WaypointObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addSignedIntParameter(id);

		method.executeWithVoidReturn();
	} else
		_implementation->setSpecialTypeID(id);
}

int WaypointObject::getSpecialTypeID() {
	WaypointObjectImplementation* _implementation = (WaypointObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getSpecialTypeID();
}

void WaypointObject::toggleStatus() {
	WaypointObjectImplementation* _implementation = (WaypointObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		method.executeWithVoidReturn();
	} else
		_implementation->toggleStatus();
}

bool WaypointObject::isActive() {
	WaypointObjectImplementation* _implementation = (WaypointObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isActive();
}

byte WaypointObject::getColor() {
	WaypointObjectImplementation* _implementation = (WaypointObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		return method.executeWithByteReturn();
	} else
		return _implementation->getColor();
}

DistributedObjectServant* WaypointObject::_getImplementation() {

	_updated = true;
	return _impl;
}

void WaypointObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	WaypointObjectImplementation
 */

WaypointObjectImplementation::WaypointObjectImplementation(DummyConstructorParameter* param) : IntangibleObjectImplementation(param) {
	_initializeImplementation();
}


WaypointObjectImplementation::~WaypointObjectImplementation() {
}


void WaypointObjectImplementation::finalize() {
}

void WaypointObjectImplementation::_initializeImplementation() {
	_setClassHelper(WaypointObjectHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void WaypointObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (WaypointObject*) stub;
	IntangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* WaypointObjectImplementation::_getStub() {
	return _this;
}

WaypointObjectImplementation::operator const WaypointObject*() {
	return _this;
}

void WaypointObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void WaypointObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void WaypointObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void WaypointObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void WaypointObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void WaypointObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void WaypointObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void WaypointObjectImplementation::_serializationHelperMethod() {
	IntangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("WaypointObject");

}

void WaypointObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(WaypointObjectImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool WaypointObjectImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (IntangibleObjectImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "cellID") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&cellID, stream);
		return true;
	}

	if (_name == "unknown") {
		TypeInfo<unsigned long long >::parseFromBinaryStream(&unknown, stream);
		return true;
	}

	if (_name == "planetCRC") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&planetCRC, stream);
		return true;
	}

	if (_name == "customName") {
		TypeInfo<UnicodeString >::parseFromBinaryStream(&customName, stream);
		return true;
	}

	if (_name == "color") {
		TypeInfo<byte >::parseFromBinaryStream(&color, stream);
		return true;
	}

	if (_name == "active") {
		TypeInfo<byte >::parseFromBinaryStream(&active, stream);
		return true;
	}

	if (_name == "specialTypeID") {
		TypeInfo<int >::parseFromBinaryStream(&specialTypeID, stream);
		return true;
	}


	return false;
}

void WaypointObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = WaypointObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int WaypointObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "cellID";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned int >::toBinaryStream(&cellID, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "unknown";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned long long >::toBinaryStream(&unknown, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "planetCRC";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned int >::toBinaryStream(&planetCRC, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "customName";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<UnicodeString >::toBinaryStream(&customName, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "color";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<byte >::toBinaryStream(&color, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "active";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<byte >::toBinaryStream(&active, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "specialTypeID";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&specialTypeID, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 7 + IntangibleObjectImplementation::writeObjectMembers(stream);
}

WaypointObjectImplementation::WaypointObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/waypoint/WaypointObject.idl(38):  		Logger.setLoggingName("WaypointObject");
	Logger::setLoggingName("WaypointObject");
}

void WaypointObjectImplementation::setCellID(unsigned int id) {
	// server/zone/objects/waypoint/WaypointObject.idl(48):  		cellID = id;
	cellID = id;
}

void WaypointObjectImplementation::setPlanetCRC(unsigned int crc) {
	// server/zone/objects/waypoint/WaypointObject.idl(52):  		planetCRC = crc;
	planetCRC = crc;
}

unsigned int WaypointObjectImplementation::getPlanetCRC() {
	// server/zone/objects/waypoint/WaypointObject.idl(56):  		return planetCRC;
	return planetCRC;
}

void WaypointObjectImplementation::setCustomName(const UnicodeString& name) {
	// server/zone/objects/waypoint/WaypointObject.idl(60):  		customName = name;
	customName = name;
}

UnicodeString WaypointObjectImplementation::getCustomName() {
	// server/zone/objects/waypoint/WaypointObject.idl(64):  		return customName;
	return customName;
}

void WaypointObjectImplementation::setColor(byte newColor) {
	// server/zone/objects/waypoint/WaypointObject.idl(68):  		color = newColor;
	color = newColor;
}

void WaypointObjectImplementation::setActive(byte newStatus) {
	// server/zone/objects/waypoint/WaypointObject.idl(72):  		active = newStatus;
	active = newStatus;
}

void WaypointObjectImplementation::setUnknown(unsigned long long id) {
	// server/zone/objects/waypoint/WaypointObject.idl(76):  		unknown = id;
	unknown = id;
}

void WaypointObjectImplementation::setSpecialTypeID(int id) {
	// server/zone/objects/waypoint/WaypointObject.idl(80):  		specialTypeID = id;
	specialTypeID = id;
}

int WaypointObjectImplementation::getSpecialTypeID() {
	// server/zone/objects/waypoint/WaypointObject.idl(84):  		return specialTypeID;
	return specialTypeID;
}

void WaypointObjectImplementation::toggleStatus() {
	// server/zone/objects/waypoint/WaypointObject.idl(88):  		active = !active;
	active = !active;
}

bool WaypointObjectImplementation::isActive() {
	// server/zone/objects/waypoint/WaypointObject.idl(92):  		return active;
	return active;
}

byte WaypointObjectImplementation::getColor() {
	// server/zone/objects/waypoint/WaypointObject.idl(96):  		return color;
	return color;
}

/*
 *	WaypointObjectAdapter
 */

WaypointObjectAdapter::WaypointObjectAdapter(WaypointObjectImplementation* obj) : IntangibleObjectAdapter(obj) {
}

Packet* WaypointObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		setCellID(inv->getUnsignedIntParameter());
		break;
	case 7:
		setPlanetCRC(inv->getUnsignedIntParameter());
		break;
	case 8:
		resp->insertInt(getPlanetCRC());
		break;
	case 9:
		setCustomName(inv->getUnicodeParameter(_param0_setCustomName__UnicodeString_));
		break;
	case 10:
		resp->insertUnicode(getCustomName());
		break;
	case 11:
		setColor(inv->getByteParameter());
		break;
	case 12:
		setActive(inv->getByteParameter());
		break;
	case 13:
		setUnknown(inv->getUnsignedLongParameter());
		break;
	case 14:
		setSpecialTypeID(inv->getSignedIntParameter());
		break;
	case 15:
		resp->insertSignedInt(getSpecialTypeID());
		break;
	case 16:
		toggleStatus();
		break;
	case 17:
		resp->insertBoolean(isActive());
		break;
	case 18:
		resp->insertByte(getColor());
		break;
	default:
		return NULL;
	}

	return resp;
}

void WaypointObjectAdapter::setCellID(unsigned int id) {
	((WaypointObjectImplementation*) impl)->setCellID(id);
}

void WaypointObjectAdapter::setPlanetCRC(unsigned int crc) {
	((WaypointObjectImplementation*) impl)->setPlanetCRC(crc);
}

unsigned int WaypointObjectAdapter::getPlanetCRC() {
	return ((WaypointObjectImplementation*) impl)->getPlanetCRC();
}

void WaypointObjectAdapter::setCustomName(const UnicodeString& name) {
	((WaypointObjectImplementation*) impl)->setCustomName(name);
}

UnicodeString WaypointObjectAdapter::getCustomName() {
	return ((WaypointObjectImplementation*) impl)->getCustomName();
}

void WaypointObjectAdapter::setColor(byte newColor) {
	((WaypointObjectImplementation*) impl)->setColor(newColor);
}

void WaypointObjectAdapter::setActive(byte newStatus) {
	((WaypointObjectImplementation*) impl)->setActive(newStatus);
}

void WaypointObjectAdapter::setUnknown(unsigned long long id) {
	((WaypointObjectImplementation*) impl)->setUnknown(id);
}

void WaypointObjectAdapter::setSpecialTypeID(int id) {
	((WaypointObjectImplementation*) impl)->setSpecialTypeID(id);
}

int WaypointObjectAdapter::getSpecialTypeID() {
	return ((WaypointObjectImplementation*) impl)->getSpecialTypeID();
}

void WaypointObjectAdapter::toggleStatus() {
	((WaypointObjectImplementation*) impl)->toggleStatus();
}

bool WaypointObjectAdapter::isActive() {
	return ((WaypointObjectImplementation*) impl)->isActive();
}

byte WaypointObjectAdapter::getColor() {
	return ((WaypointObjectImplementation*) impl)->getColor();
}

/*
 *	WaypointObjectHelper
 */

WaypointObjectHelper* WaypointObjectHelper::staticInitializer = WaypointObjectHelper::instance();

WaypointObjectHelper::WaypointObjectHelper() {
	className = "WaypointObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void WaypointObjectHelper::finalizeHelper() {
	WaypointObjectHelper::finalize();
}

DistributedObject* WaypointObjectHelper::instantiateObject() {
	return new WaypointObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* WaypointObjectHelper::instantiateServant() {
	return new WaypointObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* WaypointObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new WaypointObjectAdapter((WaypointObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

