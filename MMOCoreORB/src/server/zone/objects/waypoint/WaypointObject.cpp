/*
 *	server/zone/objects/waypoint/WaypointObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "WaypointObject.h"

#include "WaypointObjectImplementation.h"

#include "../scene/SceneObject.h"

#include "../player/Player.h"

/*
 *	WaypointObjectStub
 */

WaypointObject::WaypointObject(Player* player, unsigned long long oid) : SceneObject(DummyConstructorParameter::instance()) {
	_impl = new WaypointObjectImplementation(player, oid);
	_impl->_setStub(this);
}

WaypointObject::WaypointObject(DummyConstructorParameter* param) : SceneObject(param) {
}

WaypointObject::~WaypointObject() {
}

void WaypointObject::changeStatus(bool status) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addBooleanParameter(status);

		method.executeWithVoidReturn();
	} else
		((WaypointObjectImplementation*) _impl)->changeStatus(status);
}

void WaypointObject::setName(const String& Name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addAsciiParameter(Name);

		method.executeWithVoidReturn();
	} else
		((WaypointObjectImplementation*) _impl)->setName(Name);
}

void WaypointObject::setInternalNote(const String& message) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addAsciiParameter(message);

		method.executeWithVoidReturn();
	} else
		((WaypointObjectImplementation*) _impl)->setInternalNote(message);
}

void WaypointObject::setPlanetName(const String& planet) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addAsciiParameter(planet);

		method.executeWithVoidReturn();
	} else
		((WaypointObjectImplementation*) _impl)->setPlanetName(planet);
}

void WaypointObject::switchStatus() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		method.executeWithVoidReturn();
	} else
		((WaypointObjectImplementation*) _impl)->switchStatus();
}

unsigned int WaypointObject::getPlanetCRC() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((WaypointObjectImplementation*) _impl)->getPlanetCRC();
}

bool WaypointObject::getStatus() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		return method.executeWithBooleanReturn();
	} else
		return ((WaypointObjectImplementation*) _impl)->getStatus();
}

String& WaypointObject::getName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		method.executeWithAsciiReturn(_return_getName);
		return _return_getName;
	} else
		return ((WaypointObjectImplementation*) _impl)->getName();
}

String& WaypointObject::getPlanetName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		method.executeWithAsciiReturn(_return_getPlanetName);
		return _return_getPlanetName;
	} else
		return ((WaypointObjectImplementation*) _impl)->getPlanetName();
}

String& WaypointObject::getInternalNote() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		method.executeWithAsciiReturn(_return_getInternalNote);
		return _return_getInternalNote;
	} else
		return ((WaypointObjectImplementation*) _impl)->getInternalNote();
}

/*
 *	WaypointObjectAdapter
 */

WaypointObjectAdapter::WaypointObjectAdapter(WaypointObjectImplementation* obj) : SceneObjectAdapter(obj) {
}

Packet* WaypointObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		changeStatus(inv->getBooleanParameter());
		break;
	case 7:
		setName(inv->getAsciiParameter(_param0_setName__String_));
		break;
	case 8:
		setInternalNote(inv->getAsciiParameter(_param0_setInternalNote__String_));
		break;
	case 9:
		setPlanetName(inv->getAsciiParameter(_param0_setPlanetName__String_));
		break;
	case 10:
		switchStatus();
		break;
	case 11:
		resp->insertInt(getPlanetCRC());
		break;
	case 12:
		resp->insertBoolean(getStatus());
		break;
	case 13:
		resp->insertAscii(getName());
		break;
	case 14:
		resp->insertAscii(getPlanetName());
		break;
	case 15:
		resp->insertAscii(getInternalNote());
		break;
	default:
		return NULL;
	}

	return resp;
}

void WaypointObjectAdapter::changeStatus(bool status) {
	return ((WaypointObjectImplementation*) impl)->changeStatus(status);
}

void WaypointObjectAdapter::setName(const String& Name) {
	return ((WaypointObjectImplementation*) impl)->setName(Name);
}

void WaypointObjectAdapter::setInternalNote(const String& message) {
	return ((WaypointObjectImplementation*) impl)->setInternalNote(message);
}

void WaypointObjectAdapter::setPlanetName(const String& planet) {
	return ((WaypointObjectImplementation*) impl)->setPlanetName(planet);
}

void WaypointObjectAdapter::switchStatus() {
	return ((WaypointObjectImplementation*) impl)->switchStatus();
}

unsigned int WaypointObjectAdapter::getPlanetCRC() {
	return ((WaypointObjectImplementation*) impl)->getPlanetCRC();
}

bool WaypointObjectAdapter::getStatus() {
	return ((WaypointObjectImplementation*) impl)->getStatus();
}

String& WaypointObjectAdapter::getName() {
	return ((WaypointObjectImplementation*) impl)->getName();
}

String& WaypointObjectAdapter::getPlanetName() {
	return ((WaypointObjectImplementation*) impl)->getPlanetName();
}

String& WaypointObjectAdapter::getInternalNote() {
	return ((WaypointObjectImplementation*) impl)->getInternalNote();
}

/*
 *	WaypointObjectHelper
 */

WaypointObjectHelper* WaypointObjectHelper::staticInitializer = WaypointObjectHelper::instance();

WaypointObjectHelper::WaypointObjectHelper() {
	className = "WaypointObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void WaypointObjectHelper::finalizeHelper() {
	WaypointObjectHelper::finalize();
}

DistributedObject* WaypointObjectHelper::instantiateObject() {
	return new WaypointObject(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* WaypointObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new WaypointObjectAdapter((WaypointObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	WaypointObjectServant
 */

WaypointObjectServant::WaypointObjectServant(unsigned long long oid, int type) : SceneObjectImplementation(oid, type) {
	_classHelper = WaypointObjectHelper::instance();
}

WaypointObjectServant::~WaypointObjectServant() {
}

void WaypointObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (WaypointObject*) stub;
	SceneObjectServant::_setStub(stub);
}

DistributedObjectStub* WaypointObjectServant::_getStub() {
	return _this;
}

