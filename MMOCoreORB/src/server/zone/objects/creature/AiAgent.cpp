/*
 *	server/zone/objects/creature/AiAgent.cpp generated by engine3 IDL compiler 0.60
 */

#include "AiAgent.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/creature/events/AiThinkEvent.h"

#include "server/zone/objects/creature/events/AiMoveEvent.h"

#include "server/zone/objects/creature/events/AiWaitEvent.h"

#include "server/zone/objects/creature/events/AiAwarenessEvent.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/tangible/weapon/WeaponObject.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/objects/tangible/weapon/WeaponObject.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/managers/creature/CreatureTemplate.h"

#include "server/zone/objects/creature/events/DespawnCreatureOnPlayerDissappear.h"

#include "server/zone/objects/creature/commands/QueueCommand.h"

#include "server/zone/objects/creature/AiObserver.h"

/*
 *	AiAgentStub
 */

AiAgent::AiAgent() : CreatureObject(DummyConstructorParameter::instance()) {
	AiAgentImplementation* _implementation = new AiAgentImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

AiAgent::AiAgent(DummyConstructorParameter* param) : CreatureObject(param) {
}

AiAgent::~AiAgent() {
}


void AiAgent::initializeTransientMembers() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void AiAgent::activateRecovery() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		_implementation->activateRecovery();
}

void AiAgent::activateMovementEvent() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		method.executeWithVoidReturn();
	} else
		_implementation->activateMovementEvent();
}

void AiAgent::activateWaitEvent() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		method.executeWithVoidReturn();
	} else
		_implementation->activateWaitEvent();
}

void AiAgent::activateAwarenessEvent(CreatureObject* target) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(target);

		method.executeWithVoidReturn();
	} else
		_implementation->activateAwarenessEvent(target);
}

bool AiAgent::tryRetreat() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->tryRetreat();
}

void AiAgent::doRecovery() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		method.executeWithVoidReturn();
	} else
		_implementation->doRecovery();
}

void AiAgent::doMovement() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		method.executeWithVoidReturn();
	} else
		_implementation->doMovement();
}

void AiAgent::doAwarenessCheck(Coordinate& start, unsigned long long time, CreatureObject* target) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->doAwarenessCheck(start, time, target);
}

void AiAgent::checkNewAngle() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		method.executeWithVoidReturn();
	} else
		_implementation->checkNewAngle();
}

void AiAgent::fillAttributeList(AttributeListMessage* msg, PlayerCreature* object) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addObjectParameter(msg);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		_implementation->fillAttributeList(msg, object);
}

void AiAgent::setNextPosition(float x, float z, float y, SceneObject* cell) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addFloatParameter(x);
		method.addFloatParameter(z);
		method.addFloatParameter(y);
		method.addObjectParameter(cell);

		method.executeWithVoidReturn();
	} else
		_implementation->setNextPosition(x, z, y, cell);
}

void AiAgent::updateCurrentPosition(PatrolPoint* point) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->updateCurrentPosition(point);
}

void AiAgent::broadcastNextPositionUpdate(PatrolPoint* point) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->broadcastNextPositionUpdate(point);
}

void AiAgent::clearPatrolPoints() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);

		method.executeWithVoidReturn();
	} else
		_implementation->clearPatrolPoints();
}

void AiAgent::notifyInsert(QuadTreeEntry* entry) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->notifyInsert(entry);
}

void AiAgent::notifyDissapear(QuadTreeEntry* entry) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->notifyDissapear(entry);
}

void AiAgent::loadTemplateData(SharedObjectTemplate* templateData) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->loadTemplateData(templateData);
}

void AiAgent::loadTemplateData(CreatureTemplate* templateData) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->loadTemplateData(templateData);
}

int AiAgent::inflictDamage(TangibleObject* attacker, int damageType, int damage, bool destroy, bool notifyClient) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addObjectParameter(attacker);
		method.addSignedIntParameter(damageType);
		method.addSignedIntParameter(damage);
		method.addBooleanParameter(destroy);
		method.addBooleanParameter(notifyClient);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->inflictDamage(attacker, damageType, damage, destroy, notifyClient);
}

void AiAgent::sendConversationStartTo(SceneObject* player) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendConversationStartTo(player);
}

void AiAgent::sendDefaultConversationTo(SceneObject* player) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendDefaultConversationTo(player);
}

void AiAgent::selectConversationOption(int option, SceneObject* obj) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addSignedIntParameter(option);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		_implementation->selectConversationOption(option, obj);
}

int AiAgent::notifyObjectDestructionObservers(TangibleObject* attacker, int condition) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);
		method.addObjectParameter(attacker);
		method.addSignedIntParameter(condition);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyObjectDestructionObservers(attacker, condition);
}

int AiAgent::notifyConverseObservers(CreatureObject* converser) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);
		method.addObjectParameter(converser);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyConverseObservers(converser);
}

int AiAgent::notifyAttack(Observable* observable) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);
		method.addObjectParameter(observable);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyAttack(observable);
}

int AiAgent::notifyCallForHelp(Observable* observable, ManagedObject* arg1) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);
		method.addObjectParameter(observable);
		method.addObjectParameter(arg1);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyCallForHelp(observable, arg1);
}

void AiAgent::activatePostureRecovery() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);

		method.executeWithVoidReturn();
	} else
		_implementation->activatePostureRecovery();
}

void AiAgent::clearCombatState(bool clearDefenders) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);
		method.addBooleanParameter(clearDefenders);

		method.executeWithVoidReturn();
	} else
		_implementation->clearCombatState(clearDefenders);
}

void AiAgent::setDefender(SceneObject* defender) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);
		method.addObjectParameter(defender);

		method.executeWithVoidReturn();
	} else
		_implementation->setDefender(defender);
}

void AiAgent::addDefender(SceneObject* defender) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);
		method.addObjectParameter(defender);

		method.executeWithVoidReturn();
	} else
		_implementation->addDefender(defender);
}

void AiAgent::removeDefender(SceneObject* defender) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);
		method.addObjectParameter(defender);

		method.executeWithVoidReturn();
	} else
		_implementation->removeDefender(defender);
}

void AiAgent::setDespawnOnNoPlayerInRange(bool val) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);
		method.addBooleanParameter(val);

		method.executeWithVoidReturn();
	} else
		_implementation->setDespawnOnNoPlayerInRange(val);
}

void AiAgent::notifyDespawn(Zone* zone) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);
		method.addObjectParameter(zone);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyDespawn(zone);
}

void AiAgent::scheduleDespawn() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);

		method.executeWithVoidReturn();
	} else
		_implementation->scheduleDespawn();
}

void AiAgent::respawn(Zone* zone, int level) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);
		method.addObjectParameter(zone);
		method.addSignedIntParameter(level);

		method.executeWithVoidReturn();
	} else
		_implementation->respawn(zone, level);
}

void AiAgent::addPatrolPoint(PatrolPoint& point) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->addPatrolPoint(point);
}

void AiAgent::setHomeLocation(float x, float z, float y, SceneObject* cell) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);
		method.addFloatParameter(x);
		method.addFloatParameter(z);
		method.addFloatParameter(y);
		method.addObjectParameter(cell);

		method.executeWithVoidReturn();
	} else
		_implementation->setHomeLocation(x, z, y, cell);
}

void AiAgent::setRespawnTimer(float resp) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 36);
		method.addFloatParameter(resp);

		method.executeWithVoidReturn();
	} else
		_implementation->setRespawnTimer(resp);
}

bool AiAgent::isAttackableBy(CreatureObject* object) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 37);
		method.addObjectParameter(object);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isAttackableBy(object);
}

bool AiAgent::isAggressiveTo(CreatureObject* object) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 38);
		method.addObjectParameter(object);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isAggressiveTo(object);
}

void AiAgent::setOblivious() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 39);

		method.executeWithVoidReturn();
	} else
		_implementation->setOblivious();
}

void AiAgent::setWatchObject(SceneObject* obj) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 40);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		_implementation->setWatchObject(obj);
}

void AiAgent::setStalkObject(SceneObject* obj) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 41);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		_implementation->setStalkObject(obj);
}

void AiAgent::setFollowObject(SceneObject* obj) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 42);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		_implementation->setFollowObject(obj);
}

void AiAgent::setTargetObject(SceneObject* obj) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 43);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		_implementation->setTargetObject(obj);
}

void AiAgent::selectWeapon() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 44);

		method.executeWithVoidReturn();
	} else
		_implementation->selectWeapon();
}

bool AiAgent::validateStateAttack(CreatureObject* target, String& args) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 45);
		method.addObjectParameter(target);
		method.addAsciiParameter(args);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->validateStateAttack(target, args);
}

bool AiAgent::isRetreating() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 46);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isRetreating();
}

bool AiAgent::isFleeing() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 47);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isFleeing();
}

void AiAgent::clearDespawnEvent() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 48);

		method.executeWithVoidReturn();
	} else
		_implementation->clearDespawnEvent();
}

float AiAgent::getKinetic() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 49);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getKinetic();
}

float AiAgent::getEnergy() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 50);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getEnergy();
}

float AiAgent::getElectricity() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 51);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getElectricity();
}

float AiAgent::getStun() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 52);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getStun();
}

float AiAgent::getBlast() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 53);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getBlast();
}

float AiAgent::getHeat() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 54);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getHeat();
}

float AiAgent::getCold() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 55);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getCold();
}

float AiAgent::getAcid() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 56);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getAcid();
}

float AiAgent::getLightSaber() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 57);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getLightSaber();
}

bool AiAgent::isStalker() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 58);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isStalker();
}

bool AiAgent::isKiller() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 59);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isKiller();
}

unsigned int AiAgent::getFerocity() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 60);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getFerocity();
}

unsigned int AiAgent::getArmor() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 61);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getArmor();
}

bool AiAgent::getDespawnOnNoPlayerInRange() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 62);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->getDespawnOnNoPlayerInRange();
}

int AiAgent::getNumberOfPlayersInRange() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 63);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getNumberOfPlayersInRange();
}

DamageMap* AiAgent::getDamageMap() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getDamageMap();
}

String AiAgent::getFactionString() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 64);

		method.executeWithAsciiReturn(_return_getFactionString);
		return _return_getFactionString;
	} else
		return _implementation->getFactionString();
}

String AiAgent::getSocialGroup() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 65);

		method.executeWithAsciiReturn(_return_getSocialGroup);
		return _return_getSocialGroup;
	} else
		return _implementation->getSocialGroup();
}

float AiAgent::getChanceHit() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 66);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getChanceHit();
}

int AiAgent::getDamageMin() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 67);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getDamageMin();
}

int AiAgent::getDamageMax() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 68);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getDamageMax();
}

int AiAgent::getBaseXp() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 69);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getBaseXp();
}

unsigned int AiAgent::getDiet() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 70);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getDiet();
}

CreatureAttackMap* AiAgent::getAttackMap() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getAttackMap();
}

float AiAgent::getRespawnTimer() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 71);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getRespawnTimer();
}

PatrolPoint* AiAgent::getHomeLocation() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getHomeLocation();
}

bool AiAgent::isAiAgent() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 72);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isAiAgent();
}

void AiAgent::setLootOwner(CreatureObject* owner) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 73);
		method.addObjectParameter(owner);

		method.executeWithVoidReturn();
	} else
		_implementation->setLootOwner(owner);
}

CreatureObject* AiAgent::getLootOwner() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 74);

		return (CreatureObject*) method.executeWithObjectReturn();
	} else
		return _implementation->getLootOwner();
}

bool AiAgent::hasLoot() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 75);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasLoot();
}

DistributedObjectServant* AiAgent::_getImplementation() {

	_updated = true;
	return _impl;
}

void AiAgent::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	AiAgentImplementation
 */

AiAgentImplementation::AiAgentImplementation(DummyConstructorParameter* param) : CreatureObjectImplementation(param) {
	_initializeImplementation();
}


AiAgentImplementation::~AiAgentImplementation() {
	AiAgentImplementation::finalize();
}


void AiAgentImplementation::_initializeImplementation() {
	_setClassHelper(AiAgentHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void AiAgentImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (AiAgent*) stub;
	CreatureObjectImplementation::_setStub(stub);
}

DistributedObjectStub* AiAgentImplementation::_getStub() {
	return _this;
}

AiAgentImplementation::operator const AiAgent*() {
	return _this;
}

void AiAgentImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void AiAgentImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void AiAgentImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void AiAgentImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void AiAgentImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void AiAgentImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void AiAgentImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void AiAgentImplementation::_serializationHelperMethod() {
	CreatureObjectImplementation::_serializationHelperMethod();

	_setClassName("AiAgent");

}

void AiAgentImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(AiAgentImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool AiAgentImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (CreatureObjectImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "skillCommands") {
		TypeInfo<Vector<String> >::parseFromBinaryStream(&skillCommands, stream);
		return true;
	}

	if (_name == "patrolPoints") {
		TypeInfo<PatrolPointsVector >::parseFromBinaryStream(&patrolPoints, stream);
		return true;
	}

	if (_name == "homeLocation") {
		TypeInfo<PatrolPoint >::parseFromBinaryStream(&homeLocation, stream);
		return true;
	}

	if (_name == "nextStepPosition") {
		TypeInfo<PatrolPoint >::parseFromBinaryStream(&nextStepPosition, stream);
		return true;
	}

	if (_name == "damageMap") {
		TypeInfo<DamageMap >::parseFromBinaryStream(&damageMap, stream);
		return true;
	}

	if (_name == "aiObserverMap") {
		TypeInfo<SortedVector<ManagedReference<AiObserver* > > >::parseFromBinaryStream(&aiObserverMap, stream);
		return true;
	}

	if (_name == "weapons") {
		TypeInfo<Vector<ManagedReference<WeaponObject* > > >::parseFromBinaryStream(&weapons, stream);
		return true;
	}

	if (_name == "baby") {
		TypeInfo<bool >::parseFromBinaryStream(&baby, stream);
		return true;
	}

	if (_name == "currentSpeed") {
		TypeInfo<float >::parseFromBinaryStream(&currentSpeed, stream);
		return true;
	}

	if (_name == "despawnOnNoPlayerInRange") {
		TypeInfo<bool >::parseFromBinaryStream(&despawnOnNoPlayerInRange, stream);
		return true;
	}

	if (_name == "followObject") {
		TypeInfo<ManagedWeakReference<SceneObject* > >::parseFromBinaryStream(&followObject, stream);
		return true;
	}

	if (_name == "followState") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&followState, stream);
		return true;
	}

	if (_name == "fleeing") {
		TypeInfo<bool >::parseFromBinaryStream(&fleeing, stream);
		return true;
	}

	if (_name == "respawnTimer") {
		TypeInfo<float >::parseFromBinaryStream(&respawnTimer, stream);
		return true;
	}

	if (_name == "numberOfPlayersInRange") {
		TypeInfo<int >::parseFromBinaryStream(&numberOfPlayersInRange, stream);
		return true;
	}


	return false;
}

void AiAgentImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = AiAgentImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int AiAgentImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "skillCommands";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<Vector<String> >::toBinaryStream(&skillCommands, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "patrolPoints";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<PatrolPointsVector >::toBinaryStream(&patrolPoints, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "homeLocation";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<PatrolPoint >::toBinaryStream(&homeLocation, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "nextStepPosition";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<PatrolPoint >::toBinaryStream(&nextStepPosition, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "damageMap";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<DamageMap >::toBinaryStream(&damageMap, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "aiObserverMap";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<SortedVector<ManagedReference<AiObserver* > > >::toBinaryStream(&aiObserverMap, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "weapons";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<Vector<ManagedReference<WeaponObject* > > >::toBinaryStream(&weapons, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "baby";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<bool >::toBinaryStream(&baby, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "currentSpeed";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<float >::toBinaryStream(&currentSpeed, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "despawnOnNoPlayerInRange";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<bool >::toBinaryStream(&despawnOnNoPlayerInRange, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "followObject";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedWeakReference<SceneObject* > >::toBinaryStream(&followObject, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "followState";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned int >::toBinaryStream(&followState, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "fleeing";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<bool >::toBinaryStream(&fleeing, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "respawnTimer";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<float >::toBinaryStream(&respawnTimer, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "numberOfPlayersInRange";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&numberOfPlayersInRange, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 15 + CreatureObjectImplementation::writeObjectMembers(stream);
}

AiAgentImplementation::AiAgentImplementation() {
	_initializeImplementation();
	// server/zone/objects/creature/AiAgent.idl():  		baby = false;
	baby = false;
	// server/zone/objects/creature/AiAgent.idl():  		followState = OBLIVIOUS;
	followState = OBLIVIOUS;
	// server/zone/objects/creature/AiAgent.idl():  		currentSpeed = 0;
	currentSpeed = 0;
	// server/zone/objects/creature/AiAgent.idl():  		respawnTimer = 0;
	respawnTimer = 0;
	// server/zone/objects/creature/AiAgent.idl():  		despawnOnNoPlayerInRange = true;
	despawnOnNoPlayerInRange = true;
	// server/zone/objects/creature/AiAgent.idl():  		numberOfPlayersInRange = 0;
	numberOfPlayersInRange = 0;
	// server/zone/objects/creature/AiAgent.idl():  		objectTemplate = null;
	objectTemplate = NULL;
	// server/zone/objects/creature/AiAgent.idl():  		npcTemplate = null;
	npcTemplate = NULL;
	// server/zone/objects/creature/AiAgent.idl():  		lootOwner = null;
	lootOwner = NULL;
	// server/zone/objects/creature/AiAgent.idl():  		Logger.setLoggingName("AiAgent");
	Logger::setLoggingName("AiAgent");
	// server/zone/objects/creature/AiAgent.idl():  		Logger.setLogging(false);
	Logger::setLogging(false);
	// server/zone/objects/creature/AiAgent.idl():  		Logger.setGlobalLogging(true);
	Logger::setGlobalLogging(true);
}

void AiAgentImplementation::finalize() {
	// server/zone/objects/creature/AiAgent.idl():  		Logger.info("deleting from ram", true);
	Logger::info("deleting from ram", true);
}

void AiAgentImplementation::doAwarenessCheck(Coordinate& start, unsigned long long time, CreatureObject* target) {
}

void AiAgentImplementation::clearPatrolPoints() {
	// server/zone/objects/creature/AiAgent.idl():  		patrolPoints.removeAll();
	(&patrolPoints)->removeAll();
}

void AiAgentImplementation::addPatrolPoint(PatrolPoint& point) {
	// server/zone/objects/creature/AiAgent.idl():  		patrolPoints.add(point);
	(&patrolPoints)->add(point);
}

void AiAgentImplementation::setHomeLocation(float x, float z, float y, SceneObject* cell) {
	// server/zone/objects/creature/AiAgent.idl():  		homeLocation.setPosition(x, z, y);
	(&homeLocation)->setPosition(x, z, y);
	// server/zone/objects/creature/AiAgent.idl():  		homeLocation.setCell(cell);
	(&homeLocation)->setCell(cell);
	// server/zone/objects/creature/AiAgent.idl():  		homeLocation.setReached(true);
	(&homeLocation)->setReached(true);
}

void AiAgentImplementation::setRespawnTimer(float resp) {
	// server/zone/objects/creature/AiAgent.idl():  		respawnTimer = resp;
	respawnTimer = resp;
}

bool AiAgentImplementation::isAttackableBy(CreatureObject* object) {
	// server/zone/objects/creature/AiAgent.idl():  		if 
	if (object == _this)	// server/zone/objects/creature/AiAgent.idl():  			return false;
	return false;
	// server/zone/objects/creature/AiAgent.idl():  		if 
	if (CreatureObjectImplementation::pvpStatusBitmask == 0)	// server/zone/objects/creature/AiAgent.idl():  			return false;
	return false;
	// server/zone/objects/creature/AiAgent.idl():  		if 
	if (_this->isRetreating())	// server/zone/objects/creature/AiAgent.idl():  			return false;
	return false;
	// server/zone/objects/creature/AiAgent.idl():  		return 
	if (_this->isDead())	// server/zone/objects/creature/AiAgent.idl():  			return false;
	return false;
	// server/zone/objects/creature/AiAgent.idl():  		return true;
	return true;
}

bool AiAgentImplementation::isAggressiveTo(CreatureObject* object) {
	// server/zone/objects/creature/AiAgent.idl():  		if 
	if (!isAttackableBy(object))	// server/zone/objects/creature/AiAgent.idl():  			return false;
	return false;
	// server/zone/objects/creature/AiAgent.idl():  		return 
	if (CreatureObjectImplementation::pvpStatusBitmask & CreatureFlag::AGGRESSIVE)	// server/zone/objects/creature/AiAgent.idl():  			return true;
	return true;
	// server/zone/objects/creature/AiAgent.idl():  		return false;
	return false;
}

void AiAgentImplementation::setOblivious() {
	// server/zone/objects/creature/AiAgent.idl():  		followState = OBLIVIOUS;
	followState = OBLIVIOUS;
	// server/zone/objects/creature/AiAgent.idl():  		setTargetObject(null);
	setTargetObject(NULL);
	// server/zone/objects/creature/AiAgent.idl():  		activateMovementEvent();
	activateMovementEvent();
}

void AiAgentImplementation::setWatchObject(SceneObject* obj) {
	// server/zone/objects/creature/AiAgent.idl():  		followState 
	if (_this->isRetreating())	// server/zone/objects/creature/AiAgent.idl():  			return;
	return;
	// server/zone/objects/creature/AiAgent.idl():  		followState = WATCHING;
	followState = WATCHING;
	// server/zone/objects/creature/AiAgent.idl():  		setTargetObject(obj);
	setTargetObject(obj);
	// server/zone/objects/creature/AiAgent.idl():  		activateMovementEvent();
	activateMovementEvent();
}

void AiAgentImplementation::setStalkObject(SceneObject* obj) {
	// server/zone/objects/creature/AiAgent.idl():  		followState 
	if (_this->isRetreating())	// server/zone/objects/creature/AiAgent.idl():  			return;
	return;
	// server/zone/objects/creature/AiAgent.idl():  		followState = STALKING;
	followState = STALKING;
	// server/zone/objects/creature/AiAgent.idl():  		setTargetObject(obj);
	setTargetObject(obj);
	// server/zone/objects/creature/AiAgent.idl():  		activateMovementEvent();
	activateMovementEvent();
}

void AiAgentImplementation::setFollowObject(SceneObject* obj) {
	// server/zone/objects/creature/AiAgent.idl():  		followState 
	if (_this->isRetreating())	// server/zone/objects/creature/AiAgent.idl():  			return;
	return;
	// server/zone/objects/creature/AiAgent.idl():  		followState = FOLLOWING;
	followState = FOLLOWING;
	// server/zone/objects/creature/AiAgent.idl():  		setTargetObject(obj);
	setTargetObject(obj);
	// server/zone/objects/creature/AiAgent.idl():  		activateMovementEvent();
	activateMovementEvent();
}

void AiAgentImplementation::setTargetObject(SceneObject* obj) {
	// server/zone/objects/creature/AiAgent.idl():  	}
	if (followObject != obj){
	// server/zone/objects/creature/AiAgent.idl():  			clearPatrolPoints();
	clearPatrolPoints();
	// server/zone/objects/creature/AiAgent.idl():  			followObject = obj;
	followObject = obj;
}
}

bool AiAgentImplementation::isRetreating() {
	// server/zone/objects/creature/AiAgent.idl():  		return !homeLocation.isReached();
	return !(&homeLocation)->isReached();
}

bool AiAgentImplementation::isFleeing() {
	// server/zone/objects/creature/AiAgent.idl():  		return fleeing;
	return fleeing;
}

float AiAgentImplementation::getKinetic() {
	// server/zone/objects/creature/AiAgent.idl():  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl():  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl():  		return npcTemplate.getKinetic();
	return npcTemplate->getKinetic();
}

float AiAgentImplementation::getEnergy() {
	// server/zone/objects/creature/AiAgent.idl():  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl():  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl():  		return npcTemplate.getEnergy();
	return npcTemplate->getEnergy();
}

float AiAgentImplementation::getElectricity() {
	// server/zone/objects/creature/AiAgent.idl():  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl():  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl():  		return npcTemplate.getElectricity();
	return npcTemplate->getElectricity();
}

float AiAgentImplementation::getStun() {
	// server/zone/objects/creature/AiAgent.idl():  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl():  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl():  		return npcTemplate.getStun();
	return npcTemplate->getStun();
}

float AiAgentImplementation::getBlast() {
	// server/zone/objects/creature/AiAgent.idl():  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl():  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl():  		return npcTemplate.getBlast();
	return npcTemplate->getBlast();
}

float AiAgentImplementation::getHeat() {
	// server/zone/objects/creature/AiAgent.idl():  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl():  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl():  		return npcTemplate.getHeat();
	return npcTemplate->getHeat();
}

float AiAgentImplementation::getCold() {
	// server/zone/objects/creature/AiAgent.idl():  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl():  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl():  		return npcTemplate.getCold();
	return npcTemplate->getCold();
}

float AiAgentImplementation::getAcid() {
	// server/zone/objects/creature/AiAgent.idl():  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl():  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl():  		return npcTemplate.getAcid();
	return npcTemplate->getAcid();
}

float AiAgentImplementation::getLightSaber() {
	// server/zone/objects/creature/AiAgent.idl():  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl():  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl():  		return npcTemplate.getLightSaber();
	return npcTemplate->getLightSaber();
}

bool AiAgentImplementation::isStalker() {
	// server/zone/objects/creature/AiAgent.idl():  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl():  			return false;
	return false;
	// server/zone/objects/creature/AiAgent.idl():  		return npcTemplate.isStalker();
	return npcTemplate->isStalker();
}

bool AiAgentImplementation::isKiller() {
	// server/zone/objects/creature/AiAgent.idl():  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl():  			return false;
	return false;
	// server/zone/objects/creature/AiAgent.idl():  		return npcTemplate.isKiller();
	return npcTemplate->isKiller();
}

unsigned int AiAgentImplementation::getFerocity() {
	// server/zone/objects/creature/AiAgent.idl():  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl():  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl():  		return npcTemplate.getFerocity();
	return npcTemplate->getFerocity();
}

unsigned int AiAgentImplementation::getArmor() {
	// server/zone/objects/creature/AiAgent.idl():  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl():  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl():  		return npcTemplate.getArmor();
	return npcTemplate->getArmor();
}

bool AiAgentImplementation::getDespawnOnNoPlayerInRange() {
	// server/zone/objects/creature/AiAgent.idl():  		return despawnOnNoPlayerInRange;
	return despawnOnNoPlayerInRange;
}

int AiAgentImplementation::getNumberOfPlayersInRange() {
	// server/zone/objects/creature/AiAgent.idl():  		return numberOfPlayersInRange;
	return numberOfPlayersInRange;
}

DamageMap* AiAgentImplementation::getDamageMap() {
	// server/zone/objects/creature/AiAgent.idl():  		return damageMap;
	return (&damageMap);
}

String AiAgentImplementation::getFactionString() {
	// server/zone/objects/creature/AiAgent.idl():  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl():  			return "";
	return "";
	// server/zone/objects/creature/AiAgent.idl():  		return npcTemplate.getFaction();
	return npcTemplate->getFaction();
}

String AiAgentImplementation::getSocialGroup() {
	// server/zone/objects/creature/AiAgent.idl():  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl():  			return "";
	return "";
	// server/zone/objects/creature/AiAgent.idl():  		return npcTemplate.getSocialGroup();
	return npcTemplate->getSocialGroup();
}

float AiAgentImplementation::getChanceHit() {
	// server/zone/objects/creature/AiAgent.idl():  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl():  			return false;
	return false;
	// server/zone/objects/creature/AiAgent.idl():  		return npcTemplate.getChanceHit();
	return npcTemplate->getChanceHit();
}

int AiAgentImplementation::getDamageMin() {
	// server/zone/objects/creature/AiAgent.idl():  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl():  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl():  		return npcTemplate.getDamageMin();
	return npcTemplate->getDamageMin();
}

int AiAgentImplementation::getDamageMax() {
	// server/zone/objects/creature/AiAgent.idl():  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl():  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl():  		return npcTemplate.getDamageMax();
	return npcTemplate->getDamageMax();
}

int AiAgentImplementation::getBaseXp() {
	// server/zone/objects/creature/AiAgent.idl():  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl():  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl():  		return npcTemplate.getBaseXp();
	return npcTemplate->getBaseXp();
}

unsigned int AiAgentImplementation::getDiet() {
	// server/zone/objects/creature/AiAgent.idl():  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl():  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl():  		return npcTemplate.getDiet();
	return npcTemplate->getDiet();
}

CreatureAttackMap* AiAgentImplementation::getAttackMap() {
	// server/zone/objects/creature/AiAgent.idl():  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl():  			return null;
	return NULL;
	// server/zone/objects/creature/AiAgent.idl():  		return npcTemplate.getAttacks();
	return npcTemplate->getAttacks();
}

float AiAgentImplementation::getRespawnTimer() {
	// server/zone/objects/creature/AiAgent.idl():  		return respawnTimer;
	return respawnTimer;
}

PatrolPoint* AiAgentImplementation::getHomeLocation() {
	// server/zone/objects/creature/AiAgent.idl():  		return homeLocation;
	return (&homeLocation);
}

bool AiAgentImplementation::isAiAgent() {
	// server/zone/objects/creature/AiAgent.idl():  		return true;
	return true;
}

void AiAgentImplementation::setLootOwner(CreatureObject* owner) {
	// server/zone/objects/creature/AiAgent.idl():  		lootOwner = owner;
	lootOwner = owner;
}

CreatureObject* AiAgentImplementation::getLootOwner() {
	// server/zone/objects/creature/AiAgent.idl():  		return lootOwner;
	return lootOwner;
}

bool AiAgentImplementation::hasLoot() {
	// server/zone/objects/creature/AiAgent.idl():  		return false;
	return false;
}

/*
 *	AiAgentAdapter
 */

AiAgentAdapter::AiAgentAdapter(AiAgentImplementation* obj) : CreatureObjectAdapter(obj) {
}

enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 6,RPC_FINALIZE__,RPC_ACTIVATERECOVERY__,RPC_ACTIVATEMOVEMENTEVENT__,RPC_ACTIVATEWAITEVENT__,RPC_ACTIVATEAWARENESSEVENT__CREATUREOBJECT_,RPC_TRYRETREAT__,RPC_DORECOVERY__,RPC_DOMOVEMENT__,RPC_CHECKNEWANGLE__,RPC_FILLATTRIBUTELIST__ATTRIBUTELISTMESSAGE_PLAYERCREATURE_,RPC_SETNEXTPOSITION__FLOAT_FLOAT_FLOAT_SCENEOBJECT_,RPC_CLEARPATROLPOINTS__,RPC_INFLICTDAMAGE__TANGIBLEOBJECT_INT_INT_BOOL_BOOL_,RPC_SENDCONVERSATIONSTARTTO__SCENEOBJECT_,RPC_SENDDEFAULTCONVERSATIONTO__SCENEOBJECT_,RPC_SELECTCONVERSATIONOPTION__INT_SCENEOBJECT_,RPC_NOTIFYOBJECTDESTRUCTIONOBSERVERS__TANGIBLEOBJECT_INT_,RPC_NOTIFYCONVERSEOBSERVERS__CREATUREOBJECT_,RPC_NOTIFYATTACK__OBSERVABLE_,RPC_NOTIFYCALLFORHELP__OBSERVABLE_MANAGEDOBJECT_,RPC_ACTIVATEPOSTURERECOVERY__,RPC_CLEARCOMBATSTATE__BOOL_,RPC_SETDEFENDER__SCENEOBJECT_,RPC_ADDDEFENDER__SCENEOBJECT_,RPC_REMOVEDEFENDER__SCENEOBJECT_,RPC_SETDESPAWNONNOPLAYERINRANGE__BOOL_,RPC_NOTIFYDESPAWN__ZONE_,RPC_SCHEDULEDESPAWN__,RPC_RESPAWN__ZONE_INT_,RPC_SETHOMELOCATION__FLOAT_FLOAT_FLOAT_SCENEOBJECT_,RPC_SETRESPAWNTIMER__FLOAT_,RPC_ISATTACKABLEBY__CREATUREOBJECT_,RPC_ISAGGRESSIVETO__CREATUREOBJECT_,RPC_SETOBLIVIOUS__,RPC_SETWATCHOBJECT__SCENEOBJECT_,RPC_SETSTALKOBJECT__SCENEOBJECT_,RPC_SETFOLLOWOBJECT__SCENEOBJECT_,RPC_SETTARGETOBJECT__SCENEOBJECT_,RPC_SELECTWEAPON__,RPC_VALIDATESTATEATTACK__CREATUREOBJECT_STRING_,RPC_ISRETREATING__,RPC_ISFLEEING__,RPC_CLEARDESPAWNEVENT__,RPC_GETKINETIC__,RPC_GETENERGY__,RPC_GETELECTRICITY__,RPC_GETSTUN__,RPC_GETBLAST__,RPC_GETHEAT__,RPC_GETCOLD__,RPC_GETACID__,RPC_GETLIGHTSABER__,RPC_ISSTALKER__,RPC_ISKILLER__,RPC_GETFEROCITY__,RPC_GETARMOR__,RPC_GETDESPAWNONNOPLAYERINRANGE__,RPC_GETNUMBEROFPLAYERSINRANGE__,RPC_GETFACTIONSTRING__,RPC_GETSOCIALGROUP__,RPC_GETCHANCEHIT__,RPC_GETDAMAGEMIN__,RPC_GETDAMAGEMAX__,RPC_GETBASEXP__,RPC_GETDIET__,RPC_GETRESPAWNTIMER__,RPC_ISAIAGENT__,RPC_SETLOOTOWNER__CREATUREOBJECT_,RPC_GETLOOTOWNER__,RPC_HASLOOT__};

Packet* AiAgentAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		initializeTransientMembers();
		break;
	case RPC_FINALIZE__:
		finalize();
		break;
	case RPC_ACTIVATERECOVERY__:
		activateRecovery();
		break;
	case RPC_ACTIVATEMOVEMENTEVENT__:
		activateMovementEvent();
		break;
	case RPC_ACTIVATEWAITEVENT__:
		activateWaitEvent();
		break;
	case RPC_ACTIVATEAWARENESSEVENT__CREATUREOBJECT_:
		activateAwarenessEvent((CreatureObject*) inv->getObjectParameter());
		break;
	case RPC_TRYRETREAT__:
		resp->insertBoolean(tryRetreat());
		break;
	case RPC_DORECOVERY__:
		doRecovery();
		break;
	case RPC_DOMOVEMENT__:
		doMovement();
		break;
	case RPC_CHECKNEWANGLE__:
		checkNewAngle();
		break;
	case RPC_FILLATTRIBUTELIST__ATTRIBUTELISTMESSAGE_PLAYERCREATURE_:
		fillAttributeList((AttributeListMessage*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter());
		break;
	case RPC_SETNEXTPOSITION__FLOAT_FLOAT_FLOAT_SCENEOBJECT_:
		setNextPosition(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), (SceneObject*) inv->getObjectParameter());
		break;
	case RPC_CLEARPATROLPOINTS__:
		clearPatrolPoints();
		break;
	case RPC_INFLICTDAMAGE__TANGIBLEOBJECT_INT_INT_BOOL_BOOL_:
		resp->insertSignedInt(inflictDamage((TangibleObject*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter(), inv->getBooleanParameter()));
		break;
	case RPC_SENDCONVERSATIONSTARTTO__SCENEOBJECT_:
		sendConversationStartTo((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_SENDDEFAULTCONVERSATIONTO__SCENEOBJECT_:
		sendDefaultConversationTo((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_SELECTCONVERSATIONOPTION__INT_SCENEOBJECT_:
		selectConversationOption(inv->getSignedIntParameter(), (SceneObject*) inv->getObjectParameter());
		break;
	case RPC_NOTIFYOBJECTDESTRUCTIONOBSERVERS__TANGIBLEOBJECT_INT_:
		resp->insertSignedInt(notifyObjectDestructionObservers((TangibleObject*) inv->getObjectParameter(), inv->getSignedIntParameter()));
		break;
	case RPC_NOTIFYCONVERSEOBSERVERS__CREATUREOBJECT_:
		resp->insertSignedInt(notifyConverseObservers((CreatureObject*) inv->getObjectParameter()));
		break;
	case RPC_NOTIFYATTACK__OBSERVABLE_:
		resp->insertSignedInt(notifyAttack((Observable*) inv->getObjectParameter()));
		break;
	case RPC_NOTIFYCALLFORHELP__OBSERVABLE_MANAGEDOBJECT_:
		resp->insertSignedInt(notifyCallForHelp((Observable*) inv->getObjectParameter(), (ManagedObject*) inv->getObjectParameter()));
		break;
	case RPC_ACTIVATEPOSTURERECOVERY__:
		activatePostureRecovery();
		break;
	case RPC_CLEARCOMBATSTATE__BOOL_:
		clearCombatState(inv->getBooleanParameter());
		break;
	case RPC_SETDEFENDER__SCENEOBJECT_:
		setDefender((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_ADDDEFENDER__SCENEOBJECT_:
		addDefender((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_REMOVEDEFENDER__SCENEOBJECT_:
		removeDefender((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_SETDESPAWNONNOPLAYERINRANGE__BOOL_:
		setDespawnOnNoPlayerInRange(inv->getBooleanParameter());
		break;
	case RPC_NOTIFYDESPAWN__ZONE_:
		notifyDespawn((Zone*) inv->getObjectParameter());
		break;
	case RPC_SCHEDULEDESPAWN__:
		scheduleDespawn();
		break;
	case RPC_RESPAWN__ZONE_INT_:
		respawn((Zone*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case RPC_SETHOMELOCATION__FLOAT_FLOAT_FLOAT_SCENEOBJECT_:
		setHomeLocation(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), (SceneObject*) inv->getObjectParameter());
		break;
	case RPC_SETRESPAWNTIMER__FLOAT_:
		setRespawnTimer(inv->getFloatParameter());
		break;
	case RPC_ISATTACKABLEBY__CREATUREOBJECT_:
		resp->insertBoolean(isAttackableBy((CreatureObject*) inv->getObjectParameter()));
		break;
	case RPC_ISAGGRESSIVETO__CREATUREOBJECT_:
		resp->insertBoolean(isAggressiveTo((CreatureObject*) inv->getObjectParameter()));
		break;
	case RPC_SETOBLIVIOUS__:
		setOblivious();
		break;
	case RPC_SETWATCHOBJECT__SCENEOBJECT_:
		setWatchObject((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_SETSTALKOBJECT__SCENEOBJECT_:
		setStalkObject((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_SETFOLLOWOBJECT__SCENEOBJECT_:
		setFollowObject((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_SETTARGETOBJECT__SCENEOBJECT_:
		setTargetObject((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_SELECTWEAPON__:
		selectWeapon();
		break;
	case RPC_VALIDATESTATEATTACK__CREATUREOBJECT_STRING_:
		resp->insertBoolean(validateStateAttack((CreatureObject*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_validateStateAttack__CreatureObject_String_)));
		break;
	case RPC_ISRETREATING__:
		resp->insertBoolean(isRetreating());
		break;
	case RPC_ISFLEEING__:
		resp->insertBoolean(isFleeing());
		break;
	case RPC_CLEARDESPAWNEVENT__:
		clearDespawnEvent();
		break;
	case RPC_GETKINETIC__:
		resp->insertFloat(getKinetic());
		break;
	case RPC_GETENERGY__:
		resp->insertFloat(getEnergy());
		break;
	case RPC_GETELECTRICITY__:
		resp->insertFloat(getElectricity());
		break;
	case RPC_GETSTUN__:
		resp->insertFloat(getStun());
		break;
	case RPC_GETBLAST__:
		resp->insertFloat(getBlast());
		break;
	case RPC_GETHEAT__:
		resp->insertFloat(getHeat());
		break;
	case RPC_GETCOLD__:
		resp->insertFloat(getCold());
		break;
	case RPC_GETACID__:
		resp->insertFloat(getAcid());
		break;
	case RPC_GETLIGHTSABER__:
		resp->insertFloat(getLightSaber());
		break;
	case RPC_ISSTALKER__:
		resp->insertBoolean(isStalker());
		break;
	case RPC_ISKILLER__:
		resp->insertBoolean(isKiller());
		break;
	case RPC_GETFEROCITY__:
		resp->insertInt(getFerocity());
		break;
	case RPC_GETARMOR__:
		resp->insertInt(getArmor());
		break;
	case RPC_GETDESPAWNONNOPLAYERINRANGE__:
		resp->insertBoolean(getDespawnOnNoPlayerInRange());
		break;
	case RPC_GETNUMBEROFPLAYERSINRANGE__:
		resp->insertSignedInt(getNumberOfPlayersInRange());
		break;
	case RPC_GETFACTIONSTRING__:
		resp->insertAscii(getFactionString());
		break;
	case RPC_GETSOCIALGROUP__:
		resp->insertAscii(getSocialGroup());
		break;
	case RPC_GETCHANCEHIT__:
		resp->insertFloat(getChanceHit());
		break;
	case RPC_GETDAMAGEMIN__:
		resp->insertSignedInt(getDamageMin());
		break;
	case RPC_GETDAMAGEMAX__:
		resp->insertSignedInt(getDamageMax());
		break;
	case RPC_GETBASEXP__:
		resp->insertSignedInt(getBaseXp());
		break;
	case RPC_GETDIET__:
		resp->insertInt(getDiet());
		break;
	case RPC_GETRESPAWNTIMER__:
		resp->insertFloat(getRespawnTimer());
		break;
	case RPC_ISAIAGENT__:
		resp->insertBoolean(isAiAgent());
		break;
	case RPC_SETLOOTOWNER__CREATUREOBJECT_:
		setLootOwner((CreatureObject*) inv->getObjectParameter());
		break;
	case RPC_GETLOOTOWNER__:
		resp->insertLong(getLootOwner()->_getObjectID());
		break;
	case RPC_HASLOOT__:
		resp->insertBoolean(hasLoot());
		break;
	default:
		return NULL;
	}

	return resp;
}

void AiAgentAdapter::initializeTransientMembers() {
	((AiAgentImplementation*) impl)->initializeTransientMembers();
}

void AiAgentAdapter::finalize() {
	((AiAgentImplementation*) impl)->finalize();
}

void AiAgentAdapter::activateRecovery() {
	((AiAgentImplementation*) impl)->activateRecovery();
}

void AiAgentAdapter::activateMovementEvent() {
	((AiAgentImplementation*) impl)->activateMovementEvent();
}

void AiAgentAdapter::activateWaitEvent() {
	((AiAgentImplementation*) impl)->activateWaitEvent();
}

void AiAgentAdapter::activateAwarenessEvent(CreatureObject* target) {
	((AiAgentImplementation*) impl)->activateAwarenessEvent(target);
}

bool AiAgentAdapter::tryRetreat() {
	return ((AiAgentImplementation*) impl)->tryRetreat();
}

void AiAgentAdapter::doRecovery() {
	((AiAgentImplementation*) impl)->doRecovery();
}

void AiAgentAdapter::doMovement() {
	((AiAgentImplementation*) impl)->doMovement();
}

void AiAgentAdapter::checkNewAngle() {
	((AiAgentImplementation*) impl)->checkNewAngle();
}

void AiAgentAdapter::fillAttributeList(AttributeListMessage* msg, PlayerCreature* object) {
	((AiAgentImplementation*) impl)->fillAttributeList(msg, object);
}

void AiAgentAdapter::setNextPosition(float x, float z, float y, SceneObject* cell) {
	((AiAgentImplementation*) impl)->setNextPosition(x, z, y, cell);
}

void AiAgentAdapter::clearPatrolPoints() {
	((AiAgentImplementation*) impl)->clearPatrolPoints();
}

int AiAgentAdapter::inflictDamage(TangibleObject* attacker, int damageType, int damage, bool destroy, bool notifyClient) {
	return ((AiAgentImplementation*) impl)->inflictDamage(attacker, damageType, damage, destroy, notifyClient);
}

void AiAgentAdapter::sendConversationStartTo(SceneObject* player) {
	((AiAgentImplementation*) impl)->sendConversationStartTo(player);
}

void AiAgentAdapter::sendDefaultConversationTo(SceneObject* player) {
	((AiAgentImplementation*) impl)->sendDefaultConversationTo(player);
}

void AiAgentAdapter::selectConversationOption(int option, SceneObject* obj) {
	((AiAgentImplementation*) impl)->selectConversationOption(option, obj);
}

int AiAgentAdapter::notifyObjectDestructionObservers(TangibleObject* attacker, int condition) {
	return ((AiAgentImplementation*) impl)->notifyObjectDestructionObservers(attacker, condition);
}

int AiAgentAdapter::notifyConverseObservers(CreatureObject* converser) {
	return ((AiAgentImplementation*) impl)->notifyConverseObservers(converser);
}

int AiAgentAdapter::notifyAttack(Observable* observable) {
	return ((AiAgentImplementation*) impl)->notifyAttack(observable);
}

int AiAgentAdapter::notifyCallForHelp(Observable* observable, ManagedObject* arg1) {
	return ((AiAgentImplementation*) impl)->notifyCallForHelp(observable, arg1);
}

void AiAgentAdapter::activatePostureRecovery() {
	((AiAgentImplementation*) impl)->activatePostureRecovery();
}

void AiAgentAdapter::clearCombatState(bool clearDefenders) {
	((AiAgentImplementation*) impl)->clearCombatState(clearDefenders);
}

void AiAgentAdapter::setDefender(SceneObject* defender) {
	((AiAgentImplementation*) impl)->setDefender(defender);
}

void AiAgentAdapter::addDefender(SceneObject* defender) {
	((AiAgentImplementation*) impl)->addDefender(defender);
}

void AiAgentAdapter::removeDefender(SceneObject* defender) {
	((AiAgentImplementation*) impl)->removeDefender(defender);
}

void AiAgentAdapter::setDespawnOnNoPlayerInRange(bool val) {
	((AiAgentImplementation*) impl)->setDespawnOnNoPlayerInRange(val);
}

void AiAgentAdapter::notifyDespawn(Zone* zone) {
	((AiAgentImplementation*) impl)->notifyDespawn(zone);
}

void AiAgentAdapter::scheduleDespawn() {
	((AiAgentImplementation*) impl)->scheduleDespawn();
}

void AiAgentAdapter::respawn(Zone* zone, int level) {
	((AiAgentImplementation*) impl)->respawn(zone, level);
}

void AiAgentAdapter::setHomeLocation(float x, float z, float y, SceneObject* cell) {
	((AiAgentImplementation*) impl)->setHomeLocation(x, z, y, cell);
}

void AiAgentAdapter::setRespawnTimer(float resp) {
	((AiAgentImplementation*) impl)->setRespawnTimer(resp);
}

bool AiAgentAdapter::isAttackableBy(CreatureObject* object) {
	return ((AiAgentImplementation*) impl)->isAttackableBy(object);
}

bool AiAgentAdapter::isAggressiveTo(CreatureObject* object) {
	return ((AiAgentImplementation*) impl)->isAggressiveTo(object);
}

void AiAgentAdapter::setOblivious() {
	((AiAgentImplementation*) impl)->setOblivious();
}

void AiAgentAdapter::setWatchObject(SceneObject* obj) {
	((AiAgentImplementation*) impl)->setWatchObject(obj);
}

void AiAgentAdapter::setStalkObject(SceneObject* obj) {
	((AiAgentImplementation*) impl)->setStalkObject(obj);
}

void AiAgentAdapter::setFollowObject(SceneObject* obj) {
	((AiAgentImplementation*) impl)->setFollowObject(obj);
}

void AiAgentAdapter::setTargetObject(SceneObject* obj) {
	((AiAgentImplementation*) impl)->setTargetObject(obj);
}

void AiAgentAdapter::selectWeapon() {
	((AiAgentImplementation*) impl)->selectWeapon();
}

bool AiAgentAdapter::validateStateAttack(CreatureObject* target, String& args) {
	return ((AiAgentImplementation*) impl)->validateStateAttack(target, args);
}

bool AiAgentAdapter::isRetreating() {
	return ((AiAgentImplementation*) impl)->isRetreating();
}

bool AiAgentAdapter::isFleeing() {
	return ((AiAgentImplementation*) impl)->isFleeing();
}

void AiAgentAdapter::clearDespawnEvent() {
	((AiAgentImplementation*) impl)->clearDespawnEvent();
}

float AiAgentAdapter::getKinetic() {
	return ((AiAgentImplementation*) impl)->getKinetic();
}

float AiAgentAdapter::getEnergy() {
	return ((AiAgentImplementation*) impl)->getEnergy();
}

float AiAgentAdapter::getElectricity() {
	return ((AiAgentImplementation*) impl)->getElectricity();
}

float AiAgentAdapter::getStun() {
	return ((AiAgentImplementation*) impl)->getStun();
}

float AiAgentAdapter::getBlast() {
	return ((AiAgentImplementation*) impl)->getBlast();
}

float AiAgentAdapter::getHeat() {
	return ((AiAgentImplementation*) impl)->getHeat();
}

float AiAgentAdapter::getCold() {
	return ((AiAgentImplementation*) impl)->getCold();
}

float AiAgentAdapter::getAcid() {
	return ((AiAgentImplementation*) impl)->getAcid();
}

float AiAgentAdapter::getLightSaber() {
	return ((AiAgentImplementation*) impl)->getLightSaber();
}

bool AiAgentAdapter::isStalker() {
	return ((AiAgentImplementation*) impl)->isStalker();
}

bool AiAgentAdapter::isKiller() {
	return ((AiAgentImplementation*) impl)->isKiller();
}

unsigned int AiAgentAdapter::getFerocity() {
	return ((AiAgentImplementation*) impl)->getFerocity();
}

unsigned int AiAgentAdapter::getArmor() {
	return ((AiAgentImplementation*) impl)->getArmor();
}

bool AiAgentAdapter::getDespawnOnNoPlayerInRange() {
	return ((AiAgentImplementation*) impl)->getDespawnOnNoPlayerInRange();
}

int AiAgentAdapter::getNumberOfPlayersInRange() {
	return ((AiAgentImplementation*) impl)->getNumberOfPlayersInRange();
}

String AiAgentAdapter::getFactionString() {
	return ((AiAgentImplementation*) impl)->getFactionString();
}

String AiAgentAdapter::getSocialGroup() {
	return ((AiAgentImplementation*) impl)->getSocialGroup();
}

float AiAgentAdapter::getChanceHit() {
	return ((AiAgentImplementation*) impl)->getChanceHit();
}

int AiAgentAdapter::getDamageMin() {
	return ((AiAgentImplementation*) impl)->getDamageMin();
}

int AiAgentAdapter::getDamageMax() {
	return ((AiAgentImplementation*) impl)->getDamageMax();
}

int AiAgentAdapter::getBaseXp() {
	return ((AiAgentImplementation*) impl)->getBaseXp();
}

unsigned int AiAgentAdapter::getDiet() {
	return ((AiAgentImplementation*) impl)->getDiet();
}

float AiAgentAdapter::getRespawnTimer() {
	return ((AiAgentImplementation*) impl)->getRespawnTimer();
}

bool AiAgentAdapter::isAiAgent() {
	return ((AiAgentImplementation*) impl)->isAiAgent();
}

void AiAgentAdapter::setLootOwner(CreatureObject* owner) {
	((AiAgentImplementation*) impl)->setLootOwner(owner);
}

CreatureObject* AiAgentAdapter::getLootOwner() {
	return ((AiAgentImplementation*) impl)->getLootOwner();
}

bool AiAgentAdapter::hasLoot() {
	return ((AiAgentImplementation*) impl)->hasLoot();
}

/*
 *	AiAgentHelper
 */

AiAgentHelper* AiAgentHelper::staticInitializer = AiAgentHelper::instance();

AiAgentHelper::AiAgentHelper() {
	className = "AiAgent";

	Core::getObjectBroker()->registerClass(className, this);
}

void AiAgentHelper::finalizeHelper() {
	AiAgentHelper::finalize();
}

DistributedObject* AiAgentHelper::instantiateObject() {
	return new AiAgent(DummyConstructorParameter::instance());
}

DistributedObjectServant* AiAgentHelper::instantiateServant() {
	return new AiAgentImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* AiAgentHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new AiAgentAdapter((AiAgentImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

