/*
 *	server/zone/objects/creature/AiAgent.cpp generated by engine3 IDL compiler 0.61
 */

#include "AiAgent.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/creature/events/AiThinkEvent.h"

#include "server/zone/objects/creature/events/AiMoveEvent.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/tangible/weapon/WeaponObject.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/objects/tangible/weapon/WeaponObject.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/managers/creature/CreatureTemplate.h"

#include "server/zone/objects/creature/events/DespawnCreatureOnPlayerDissappear.h"

/*
 *	AiAgentStub
 */

AiAgent::AiAgent() : CreatureObject(DummyConstructorParameter::instance()) {
	AiAgentImplementation* _implementation = new AiAgentImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

AiAgent::AiAgent(DummyConstructorParameter* param) : CreatureObject(param) {
}

AiAgent::~AiAgent() {
}


void AiAgent::initializeTransientMembers() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void AiAgent::activateRecovery() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		_implementation->activateRecovery();
}

void AiAgent::activateMovementEvent() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		method.executeWithVoidReturn();
	} else
		_implementation->activateMovementEvent();
}

bool AiAgent::tryRetreat() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->tryRetreat();
}

void AiAgent::doRecovery() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		method.executeWithVoidReturn();
	} else
		_implementation->doRecovery();
}

void AiAgent::doMovement() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		method.executeWithVoidReturn();
	} else
		_implementation->doMovement();
}

void AiAgent::checkNewAngle() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		method.executeWithVoidReturn();
	} else
		_implementation->checkNewAngle();
}

void AiAgent::fillAttributeList(AttributeListMessage* msg, PlayerCreature* object) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addObjectParameter(msg);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		_implementation->fillAttributeList(msg, object);
}

void AiAgent::setNextPosition(float x, float z, float y, SceneObject* cell) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addFloatParameter(x);
		method.addFloatParameter(z);
		method.addFloatParameter(y);
		method.addObjectParameter(cell);

		method.executeWithVoidReturn();
	} else
		_implementation->setNextPosition(x, z, y, cell);
}

void AiAgent::updateCurrentPosition(PatrolPoint* point) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->updateCurrentPosition(point);
}

void AiAgent::broadcastNextPositionUpdate(PatrolPoint* point) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->broadcastNextPositionUpdate(point);
}

void AiAgent::clearPatrolPoints() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		method.executeWithVoidReturn();
	} else
		_implementation->clearPatrolPoints();
}

void AiAgent::notifyInsert(QuadTreeEntry* entry) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->notifyInsert(entry);
}

void AiAgent::notifyDissapear(QuadTreeEntry* entry) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->notifyDissapear(entry);
}

void AiAgent::notifyPositionUpdate(QuadTreeEntry* obj) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->notifyPositionUpdate(obj);
}

void AiAgent::loadTemplateData(SharedObjectTemplate* templateData) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->loadTemplateData(templateData);
}

void AiAgent::loadTemplateData(CreatureTemplate* templateData) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->loadTemplateData(templateData);
}

int AiAgent::inflictDamage(TangibleObject* attacker, int damageType, int damage, bool destroy, bool notifyClient) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addObjectParameter(attacker);
		method.addSignedIntParameter(damageType);
		method.addSignedIntParameter(damage);
		method.addBooleanParameter(destroy);
		method.addBooleanParameter(notifyClient);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->inflictDamage(attacker, damageType, damage, destroy, notifyClient);
}

void AiAgent::sendConversationStartTo(SceneObject* player) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendConversationStartTo(player);
}

void AiAgent::sendDefaultConversationTo(SceneObject* player) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendDefaultConversationTo(player);
}

void AiAgent::selectConversationOption(int option, SceneObject* obj) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addSignedIntParameter(option);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		_implementation->selectConversationOption(option, obj);
}

int AiAgent::notifyObjectDestructionObservers(TangibleObject* attacker, int condition) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addObjectParameter(attacker);
		method.addSignedIntParameter(condition);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyObjectDestructionObservers(attacker, condition);
}

int AiAgent::notifyConverseObservers(CreatureObject* converser) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addObjectParameter(converser);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyConverseObservers(converser);
}

void AiAgent::activatePostureRecovery() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);

		method.executeWithVoidReturn();
	} else
		_implementation->activatePostureRecovery();
}

void AiAgent::clearCombatState(bool clearDefenders) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);
		method.addBooleanParameter(clearDefenders);

		method.executeWithVoidReturn();
	} else
		_implementation->clearCombatState(clearDefenders);
}

void AiAgent::setDefender(SceneObject* defender) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);
		method.addObjectParameter(defender);

		method.executeWithVoidReturn();
	} else
		_implementation->setDefender(defender);
}

void AiAgent::addDefender(SceneObject* defender) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);
		method.addObjectParameter(defender);

		method.executeWithVoidReturn();
	} else
		_implementation->addDefender(defender);
}

void AiAgent::removeDefender(SceneObject* defender) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);
		method.addObjectParameter(defender);

		method.executeWithVoidReturn();
	} else
		_implementation->removeDefender(defender);
}

void AiAgent::setDespawnOnNoPlayerInRange(bool val) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);
		method.addBooleanParameter(val);

		method.executeWithVoidReturn();
	} else
		_implementation->setDespawnOnNoPlayerInRange(val);
}

void AiAgent::notifyDespawn(Zone* zone) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);
		method.addObjectParameter(zone);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyDespawn(zone);
}

void AiAgent::scheduleDespawn() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);

		method.executeWithVoidReturn();
	} else
		_implementation->scheduleDespawn();
}

void AiAgent::respawn(Zone* zone, int level) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);
		method.addObjectParameter(zone);
		method.addSignedIntParameter(level);

		method.executeWithVoidReturn();
	} else
		_implementation->respawn(zone, level);
}

void AiAgent::setHomeLocation(float x, float z, float y, SceneObject* cell) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);
		method.addFloatParameter(x);
		method.addFloatParameter(z);
		method.addFloatParameter(y);
		method.addObjectParameter(cell);

		method.executeWithVoidReturn();
	} else
		_implementation->setHomeLocation(x, z, y, cell);
}

void AiAgent::setRespawnTimer(float resp) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);
		method.addFloatParameter(resp);

		method.executeWithVoidReturn();
	} else
		_implementation->setRespawnTimer(resp);
}

bool AiAgent::isAttackableBy(CreatureObject* object) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);
		method.addObjectParameter(object);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isAttackableBy(object);
}

void AiAgent::setFollowObject(SceneObject* obj) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		_implementation->setFollowObject(obj);
}

bool AiAgent::isRetreating() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isRetreating();
}

void AiAgent::clearDespawnEvent() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 36);

		method.executeWithVoidReturn();
	} else
		_implementation->clearDespawnEvent();
}

float AiAgent::getKinetic() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 37);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getKinetic();
}

float AiAgent::getEnergy() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 38);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getEnergy();
}

float AiAgent::getElectricity() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 39);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getElectricity();
}

float AiAgent::getStun() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 40);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getStun();
}

float AiAgent::getBlast() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 41);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getBlast();
}

float AiAgent::getHeat() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 42);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getHeat();
}

float AiAgent::getCold() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 43);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getCold();
}

float AiAgent::getAcid() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 44);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getAcid();
}

float AiAgent::getLightSaber() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 45);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getLightSaber();
}

bool AiAgent::isStalker() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 46);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isStalker();
}

bool AiAgent::isKiller() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 47);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isKiller();
}

unsigned int AiAgent::getFerocity() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 48);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getFerocity();
}

unsigned int AiAgent::getArmor() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 49);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getArmor();
}

bool AiAgent::getDespawnOnNoPlayerInRange() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 50);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->getDespawnOnNoPlayerInRange();
}

int AiAgent::getNumberOfPlayersInRange() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 51);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getNumberOfPlayersInRange();
}

DamageMap* AiAgent::getDamageMap() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getDamageMap();
}

String AiAgent::getFactionString() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 52);

		method.executeWithAsciiReturn(_return_getFactionString);
		return _return_getFactionString;
	} else
		return _implementation->getFactionString();
}

String AiAgent::getSocialGroup() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 53);

		method.executeWithAsciiReturn(_return_getSocialGroup);
		return _return_getSocialGroup;
	} else
		return _implementation->getSocialGroup();
}

float AiAgent::getChanceHit() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 54);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getChanceHit();
}

int AiAgent::getDamageMin() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 55);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getDamageMin();
}

int AiAgent::getDamageMax() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 56);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getDamageMax();
}

int AiAgent::getBaseXp() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 57);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getBaseXp();
}

unsigned int AiAgent::getDiet() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 58);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getDiet();
}

CreatureAttackMap* AiAgent::getAttackMap() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getAttackMap();
}

float AiAgent::getRespawnTimer() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 59);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getRespawnTimer();
}

PatrolPoint* AiAgent::getHomeLocation() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getHomeLocation();
}

bool AiAgent::isAiAgent() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 60);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isAiAgent();
}

void AiAgent::setLootOwner(CreatureObject* owner) {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 61);
		method.addObjectParameter(owner);

		method.executeWithVoidReturn();
	} else
		_implementation->setLootOwner(owner);
}

CreatureObject* AiAgent::getLootOwner() {
	AiAgentImplementation* _implementation = (AiAgentImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 62);

		return (CreatureObject*) method.executeWithObjectReturn();
	} else
		return _implementation->getLootOwner();
}

DistributedObjectServant* AiAgent::_getImplementation() {
	return _impl;}

void AiAgent::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;}

/*
 *	AiAgentImplementation
 */

AiAgentImplementation::AiAgentImplementation(DummyConstructorParameter* param) : CreatureObjectImplementation(param) {
	_initializeImplementation();
}


AiAgentImplementation::~AiAgentImplementation() {
}


void AiAgentImplementation::finalize() {
}

void AiAgentImplementation::_initializeImplementation() {
	_setClassHelper(AiAgentHelper::instance());

	_serializationHelperMethod();
}

void AiAgentImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (AiAgent*) stub;
	CreatureObjectImplementation::_setStub(stub);
}

DistributedObjectStub* AiAgentImplementation::_getStub() {
	return _this;
}

AiAgentImplementation::operator const AiAgent*() {
	return _this;
}

void AiAgentImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void AiAgentImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void AiAgentImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void AiAgentImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void AiAgentImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void AiAgentImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void AiAgentImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void AiAgentImplementation::_serializationHelperMethod() {
	CreatureObjectImplementation::_serializationHelperMethod();

	_setClassName("AiAgent");

	addSerializableVariable("skillCommands", &skillCommands);
	addSerializableVariable("patrolPoints", &patrolPoints);
	addSerializableVariable("homeLocation", &homeLocation);
	addSerializableVariable("nextStepPosition", &nextStepPosition);
	addSerializableVariable("damageMap", &damageMap);
	addSerializableVariable("weapons", &weapons);
	addSerializableVariable("baby", &baby);
	addSerializableVariable("currentSpeed", &currentSpeed);
	addSerializableVariable("despawnOnNoPlayerInRange", &despawnOnNoPlayerInRange);
	addSerializableVariable("followObject", &followObject);
	addSerializableVariable("respawnTimer", &respawnTimer);
	addSerializableVariable("numberOfPlayersInRange", &numberOfPlayersInRange);
}

AiAgentImplementation::AiAgentImplementation() {
	_initializeImplementation();
	// server/zone/objects/creature/AiAgent.idl(118):  		baby = false;
	baby = false;
	// server/zone/objects/creature/AiAgent.idl(120):  		currentSpeed = 0;
	currentSpeed = 0;
	// server/zone/objects/creature/AiAgent.idl(121):  		respawnTimer = 0;
	respawnTimer = 0;
	// server/zone/objects/creature/AiAgent.idl(123):  		despawnOnNoPlayerInRange = true;
	despawnOnNoPlayerInRange = true;
	// server/zone/objects/creature/AiAgent.idl(124):  		numberOfPlayersInRange = 0;
	numberOfPlayersInRange = 0;
	// server/zone/objects/creature/AiAgent.idl(126):  		objectTemplate = null;
	objectTemplate = NULL;
	// server/zone/objects/creature/AiAgent.idl(127):  		npcTemplate = null;
	npcTemplate = NULL;
	// server/zone/objects/creature/AiAgent.idl(128):  		lootOwner = null;
	lootOwner = NULL;
	// server/zone/objects/creature/AiAgent.idl(130):  		Logger.setLoggingName("AiAgent");
	Logger::setLoggingName("AiAgent");
	// server/zone/objects/creature/AiAgent.idl(131):  		Logger.setLogging(false);
	Logger::setLogging(false);
	// server/zone/objects/creature/AiAgent.idl(132):  		Logger.setGlobalLogging(true);
	Logger::setGlobalLogging(true);
}

void AiAgentImplementation::clearPatrolPoints() {
	// server/zone/objects/creature/AiAgent.idl(165):  		patrolPoints.removeAll();
	(&patrolPoints)->removeAll();
}

void AiAgentImplementation::setHomeLocation(float x, float z, float y, SceneObject* cell) {
	// server/zone/objects/creature/AiAgent.idl(281):  		homeLocation.setPosition(x, z, y);
	(&homeLocation)->setPosition(x, z, y);
	// server/zone/objects/creature/AiAgent.idl(282):  		homeLocation.setCell(cell);
	(&homeLocation)->setCell(cell);
	// server/zone/objects/creature/AiAgent.idl(283):  		homeLocation.setReached(true);
	(&homeLocation)->setReached(true);
}

void AiAgentImplementation::setRespawnTimer(float resp) {
	// server/zone/objects/creature/AiAgent.idl(287):  		respawnTimer = resp;
	respawnTimer = resp;
}

bool AiAgentImplementation::isAttackableBy(CreatureObject* object) {
	// server/zone/objects/creature/AiAgent.idl(297):  		if 
	if (object == _this)	// server/zone/objects/creature/AiAgent.idl(298):  			return false;
	return false;
	// server/zone/objects/creature/AiAgent.idl(300):  		if 
	if (CreatureObjectImplementation::pvpStatusBitmask == 0)	// server/zone/objects/creature/AiAgent.idl(301):  			return false;
	return false;
	// server/zone/objects/creature/AiAgent.idl(303):  		if 
	if (_this->isRetreating())	// server/zone/objects/creature/AiAgent.idl(304):  			return false;
	return false;
	// server/zone/objects/creature/AiAgent.idl(306):  		return 
	if (_this->isDead())	// server/zone/objects/creature/AiAgent.idl(307):  			return false;
	return false;
	// server/zone/objects/creature/AiAgent.idl(309):  true;
	return true;
}

void AiAgentImplementation::setFollowObject(SceneObject* obj) {
	// server/zone/objects/creature/AiAgent.idl(313):  		if 
	if (_this->isRetreating())	// server/zone/objects/creature/AiAgent.idl(314):  			return;
	return;
	// server/zone/objects/creature/AiAgent.idl(316):  	}
	if (followObject != obj){
	// server/zone/objects/creature/AiAgent.idl(317):  			clearPatrolPoints();
	clearPatrolPoints();
	// server/zone/objects/creature/AiAgent.idl(319):  			followObject = obj;
	followObject = obj;
	// server/zone/objects/creature/AiAgent.idl(321):  			activateMovementEvent();
	activateMovementEvent();
}
}

bool AiAgentImplementation::isRetreating() {
	// server/zone/objects/creature/AiAgent.idl(326):  		return !homeLocation.isReached();
	return !(&homeLocation)->isReached();
}

float AiAgentImplementation::getKinetic() {
	// server/zone/objects/creature/AiAgent.idl(332):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(333):  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl(335):  npcTemplate.getKinetic();
	return npcTemplate->getKinetic();
}

float AiAgentImplementation::getEnergy() {
	// server/zone/objects/creature/AiAgent.idl(339):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(340):  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl(342):  npcTemplate.getEnergy();
	return npcTemplate->getEnergy();
}

float AiAgentImplementation::getElectricity() {
	// server/zone/objects/creature/AiAgent.idl(346):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(347):  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl(349):  npcTemplate.getElectricity();
	return npcTemplate->getElectricity();
}

float AiAgentImplementation::getStun() {
	// server/zone/objects/creature/AiAgent.idl(353):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(354):  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl(356):  npcTemplate.getStun();
	return npcTemplate->getStun();
}

float AiAgentImplementation::getBlast() {
	// server/zone/objects/creature/AiAgent.idl(360):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(361):  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl(363):  npcTemplate.getBlast();
	return npcTemplate->getBlast();
}

float AiAgentImplementation::getHeat() {
	// server/zone/objects/creature/AiAgent.idl(367):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(368):  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl(370):  npcTemplate.getHeat();
	return npcTemplate->getHeat();
}

float AiAgentImplementation::getCold() {
	// server/zone/objects/creature/AiAgent.idl(374):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(375):  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl(377):  npcTemplate.getCold();
	return npcTemplate->getCold();
}

float AiAgentImplementation::getAcid() {
	// server/zone/objects/creature/AiAgent.idl(381):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(382):  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl(384):  npcTemplate.getAcid();
	return npcTemplate->getAcid();
}

float AiAgentImplementation::getLightSaber() {
	// server/zone/objects/creature/AiAgent.idl(388):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(389):  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl(391):  npcTemplate.getLightSaber();
	return npcTemplate->getLightSaber();
}

bool AiAgentImplementation::isStalker() {
	// server/zone/objects/creature/AiAgent.idl(395):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(396):  			return false;
	return false;
	// server/zone/objects/creature/AiAgent.idl(398):  npcTemplate.isStalker();
	return npcTemplate->isStalker();
}

bool AiAgentImplementation::isKiller() {
	// server/zone/objects/creature/AiAgent.idl(402):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(403):  			return false;
	return false;
	// server/zone/objects/creature/AiAgent.idl(405):  npcTemplate.isKiller();
	return npcTemplate->isKiller();
}

unsigned int AiAgentImplementation::getFerocity() {
	// server/zone/objects/creature/AiAgent.idl(409):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(410):  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl(412):  npcTemplate.getFerocity();
	return npcTemplate->getFerocity();
}

unsigned int AiAgentImplementation::getArmor() {
	// server/zone/objects/creature/AiAgent.idl(416):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(417):  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl(419):  npcTemplate.getArmor();
	return npcTemplate->getArmor();
}

bool AiAgentImplementation::getDespawnOnNoPlayerInRange() {
	// server/zone/objects/creature/AiAgent.idl(423):  		return despawnOnNoPlayerInRange;
	return despawnOnNoPlayerInRange;
}

int AiAgentImplementation::getNumberOfPlayersInRange() {
	// server/zone/objects/creature/AiAgent.idl(427):  		return numberOfPlayersInRange;
	return numberOfPlayersInRange;
}

DamageMap* AiAgentImplementation::getDamageMap() {
	// server/zone/objects/creature/AiAgent.idl(432):  		return damageMap;
	return (&damageMap);
}

String AiAgentImplementation::getFactionString() {
	// server/zone/objects/creature/AiAgent.idl(436):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(437):  			return "";
	return "";
	// server/zone/objects/creature/AiAgent.idl(439):  npcTemplate.getFaction();
	return npcTemplate->getFaction();
}

String AiAgentImplementation::getSocialGroup() {
	// server/zone/objects/creature/AiAgent.idl(443):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(444):  			return "";
	return "";
	// server/zone/objects/creature/AiAgent.idl(446):  npcTemplate.getSocialGroup();
	return npcTemplate->getSocialGroup();
}

float AiAgentImplementation::getChanceHit() {
	// server/zone/objects/creature/AiAgent.idl(450):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(451):  			return false;
	return false;
	// server/zone/objects/creature/AiAgent.idl(453):  npcTemplate.getChanceHit();
	return npcTemplate->getChanceHit();
}

int AiAgentImplementation::getDamageMin() {
	// server/zone/objects/creature/AiAgent.idl(457):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(458):  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl(460):  npcTemplate.getDamageMin();
	return npcTemplate->getDamageMin();
}

int AiAgentImplementation::getDamageMax() {
	// server/zone/objects/creature/AiAgent.idl(464):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(465):  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl(467):  npcTemplate.getDamageMax();
	return npcTemplate->getDamageMax();
}

int AiAgentImplementation::getBaseXp() {
	// server/zone/objects/creature/AiAgent.idl(471):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(472):  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl(474):  npcTemplate.getBaseXp();
	return npcTemplate->getBaseXp();
}

unsigned int AiAgentImplementation::getDiet() {
	// server/zone/objects/creature/AiAgent.idl(478):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(479):  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl(481):  npcTemplate.getDiet();
	return npcTemplate->getDiet();
}

CreatureAttackMap* AiAgentImplementation::getAttackMap() {
	// server/zone/objects/creature/AiAgent.idl(486):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(487):  			return null;
	return NULL;
	// server/zone/objects/creature/AiAgent.idl(489):  npcTemplate.getAttacks();
	return npcTemplate->getAttacks();
}

float AiAgentImplementation::getRespawnTimer() {
	// server/zone/objects/creature/AiAgent.idl(493):  		return respawnTimer;
	return respawnTimer;
}

PatrolPoint* AiAgentImplementation::getHomeLocation() {
	// server/zone/objects/creature/AiAgent.idl(498):  		return homeLocation;
	return (&homeLocation);
}

bool AiAgentImplementation::isAiAgent() {
	// server/zone/objects/creature/AiAgent.idl(502):  		return true;
	return true;
}

void AiAgentImplementation::setLootOwner(CreatureObject* owner) {
	// server/zone/objects/creature/AiAgent.idl(506):  		lootOwner = owner;
	lootOwner = owner;
}

CreatureObject* AiAgentImplementation::getLootOwner() {
	// server/zone/objects/creature/AiAgent.idl(510):  		return lootOwner;
	return lootOwner;
}

/*
 *	AiAgentAdapter
 */

AiAgentAdapter::AiAgentAdapter(AiAgentImplementation* obj) : CreatureObjectAdapter(obj) {
}

Packet* AiAgentAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initializeTransientMembers();
		break;
	case 7:
		activateRecovery();
		break;
	case 8:
		activateMovementEvent();
		break;
	case 9:
		resp->insertBoolean(tryRetreat());
		break;
	case 10:
		doRecovery();
		break;
	case 11:
		doMovement();
		break;
	case 12:
		checkNewAngle();
		break;
	case 13:
		fillAttributeList((AttributeListMessage*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter());
		break;
	case 14:
		setNextPosition(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), (SceneObject*) inv->getObjectParameter());
		break;
	case 15:
		clearPatrolPoints();
		break;
	case 16:
		resp->insertSignedInt(inflictDamage((TangibleObject*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter(), inv->getBooleanParameter()));
		break;
	case 17:
		sendConversationStartTo((SceneObject*) inv->getObjectParameter());
		break;
	case 18:
		sendDefaultConversationTo((SceneObject*) inv->getObjectParameter());
		break;
	case 19:
		selectConversationOption(inv->getSignedIntParameter(), (SceneObject*) inv->getObjectParameter());
		break;
	case 20:
		resp->insertSignedInt(notifyObjectDestructionObservers((TangibleObject*) inv->getObjectParameter(), inv->getSignedIntParameter()));
		break;
	case 21:
		resp->insertSignedInt(notifyConverseObservers((CreatureObject*) inv->getObjectParameter()));
		break;
	case 22:
		activatePostureRecovery();
		break;
	case 23:
		clearCombatState(inv->getBooleanParameter());
		break;
	case 24:
		setDefender((SceneObject*) inv->getObjectParameter());
		break;
	case 25:
		addDefender((SceneObject*) inv->getObjectParameter());
		break;
	case 26:
		removeDefender((SceneObject*) inv->getObjectParameter());
		break;
	case 27:
		setDespawnOnNoPlayerInRange(inv->getBooleanParameter());
		break;
	case 28:
		notifyDespawn((Zone*) inv->getObjectParameter());
		break;
	case 29:
		scheduleDespawn();
		break;
	case 30:
		respawn((Zone*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case 31:
		setHomeLocation(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), (SceneObject*) inv->getObjectParameter());
		break;
	case 32:
		setRespawnTimer(inv->getFloatParameter());
		break;
	case 33:
		resp->insertBoolean(isAttackableBy((CreatureObject*) inv->getObjectParameter()));
		break;
	case 34:
		setFollowObject((SceneObject*) inv->getObjectParameter());
		break;
	case 35:
		resp->insertBoolean(isRetreating());
		break;
	case 36:
		clearDespawnEvent();
		break;
	case 37:
		resp->insertFloat(getKinetic());
		break;
	case 38:
		resp->insertFloat(getEnergy());
		break;
	case 39:
		resp->insertFloat(getElectricity());
		break;
	case 40:
		resp->insertFloat(getStun());
		break;
	case 41:
		resp->insertFloat(getBlast());
		break;
	case 42:
		resp->insertFloat(getHeat());
		break;
	case 43:
		resp->insertFloat(getCold());
		break;
	case 44:
		resp->insertFloat(getAcid());
		break;
	case 45:
		resp->insertFloat(getLightSaber());
		break;
	case 46:
		resp->insertBoolean(isStalker());
		break;
	case 47:
		resp->insertBoolean(isKiller());
		break;
	case 48:
		resp->insertInt(getFerocity());
		break;
	case 49:
		resp->insertInt(getArmor());
		break;
	case 50:
		resp->insertBoolean(getDespawnOnNoPlayerInRange());
		break;
	case 51:
		resp->insertSignedInt(getNumberOfPlayersInRange());
		break;
	case 52:
		resp->insertAscii(getFactionString());
		break;
	case 53:
		resp->insertAscii(getSocialGroup());
		break;
	case 54:
		resp->insertFloat(getChanceHit());
		break;
	case 55:
		resp->insertSignedInt(getDamageMin());
		break;
	case 56:
		resp->insertSignedInt(getDamageMax());
		break;
	case 57:
		resp->insertSignedInt(getBaseXp());
		break;
	case 58:
		resp->insertInt(getDiet());
		break;
	case 59:
		resp->insertFloat(getRespawnTimer());
		break;
	case 60:
		resp->insertBoolean(isAiAgent());
		break;
	case 61:
		setLootOwner((CreatureObject*) inv->getObjectParameter());
		break;
	case 62:
		resp->insertLong(getLootOwner()->_getObjectID());
		break;
	default:
		return NULL;
	}

	return resp;
}

void AiAgentAdapter::initializeTransientMembers() {
	((AiAgentImplementation*) impl)->initializeTransientMembers();
}

void AiAgentAdapter::activateRecovery() {
	((AiAgentImplementation*) impl)->activateRecovery();
}

void AiAgentAdapter::activateMovementEvent() {
	((AiAgentImplementation*) impl)->activateMovementEvent();
}

bool AiAgentAdapter::tryRetreat() {
	return ((AiAgentImplementation*) impl)->tryRetreat();
}

void AiAgentAdapter::doRecovery() {
	((AiAgentImplementation*) impl)->doRecovery();
}

void AiAgentAdapter::doMovement() {
	((AiAgentImplementation*) impl)->doMovement();
}

void AiAgentAdapter::checkNewAngle() {
	((AiAgentImplementation*) impl)->checkNewAngle();
}

void AiAgentAdapter::fillAttributeList(AttributeListMessage* msg, PlayerCreature* object) {
	((AiAgentImplementation*) impl)->fillAttributeList(msg, object);
}

void AiAgentAdapter::setNextPosition(float x, float z, float y, SceneObject* cell) {
	((AiAgentImplementation*) impl)->setNextPosition(x, z, y, cell);
}

void AiAgentAdapter::clearPatrolPoints() {
	((AiAgentImplementation*) impl)->clearPatrolPoints();
}

int AiAgentAdapter::inflictDamage(TangibleObject* attacker, int damageType, int damage, bool destroy, bool notifyClient) {
	return ((AiAgentImplementation*) impl)->inflictDamage(attacker, damageType, damage, destroy, notifyClient);
}

void AiAgentAdapter::sendConversationStartTo(SceneObject* player) {
	((AiAgentImplementation*) impl)->sendConversationStartTo(player);
}

void AiAgentAdapter::sendDefaultConversationTo(SceneObject* player) {
	((AiAgentImplementation*) impl)->sendDefaultConversationTo(player);
}

void AiAgentAdapter::selectConversationOption(int option, SceneObject* obj) {
	((AiAgentImplementation*) impl)->selectConversationOption(option, obj);
}

int AiAgentAdapter::notifyObjectDestructionObservers(TangibleObject* attacker, int condition) {
	return ((AiAgentImplementation*) impl)->notifyObjectDestructionObservers(attacker, condition);
}

int AiAgentAdapter::notifyConverseObservers(CreatureObject* converser) {
	return ((AiAgentImplementation*) impl)->notifyConverseObservers(converser);
}

void AiAgentAdapter::activatePostureRecovery() {
	((AiAgentImplementation*) impl)->activatePostureRecovery();
}

void AiAgentAdapter::clearCombatState(bool clearDefenders) {
	((AiAgentImplementation*) impl)->clearCombatState(clearDefenders);
}

void AiAgentAdapter::setDefender(SceneObject* defender) {
	((AiAgentImplementation*) impl)->setDefender(defender);
}

void AiAgentAdapter::addDefender(SceneObject* defender) {
	((AiAgentImplementation*) impl)->addDefender(defender);
}

void AiAgentAdapter::removeDefender(SceneObject* defender) {
	((AiAgentImplementation*) impl)->removeDefender(defender);
}

void AiAgentAdapter::setDespawnOnNoPlayerInRange(bool val) {
	((AiAgentImplementation*) impl)->setDespawnOnNoPlayerInRange(val);
}

void AiAgentAdapter::notifyDespawn(Zone* zone) {
	((AiAgentImplementation*) impl)->notifyDespawn(zone);
}

void AiAgentAdapter::scheduleDespawn() {
	((AiAgentImplementation*) impl)->scheduleDespawn();
}

void AiAgentAdapter::respawn(Zone* zone, int level) {
	((AiAgentImplementation*) impl)->respawn(zone, level);
}

void AiAgentAdapter::setHomeLocation(float x, float z, float y, SceneObject* cell) {
	((AiAgentImplementation*) impl)->setHomeLocation(x, z, y, cell);
}

void AiAgentAdapter::setRespawnTimer(float resp) {
	((AiAgentImplementation*) impl)->setRespawnTimer(resp);
}

bool AiAgentAdapter::isAttackableBy(CreatureObject* object) {
	return ((AiAgentImplementation*) impl)->isAttackableBy(object);
}

void AiAgentAdapter::setFollowObject(SceneObject* obj) {
	((AiAgentImplementation*) impl)->setFollowObject(obj);
}

bool AiAgentAdapter::isRetreating() {
	return ((AiAgentImplementation*) impl)->isRetreating();
}

void AiAgentAdapter::clearDespawnEvent() {
	((AiAgentImplementation*) impl)->clearDespawnEvent();
}

float AiAgentAdapter::getKinetic() {
	return ((AiAgentImplementation*) impl)->getKinetic();
}

float AiAgentAdapter::getEnergy() {
	return ((AiAgentImplementation*) impl)->getEnergy();
}

float AiAgentAdapter::getElectricity() {
	return ((AiAgentImplementation*) impl)->getElectricity();
}

float AiAgentAdapter::getStun() {
	return ((AiAgentImplementation*) impl)->getStun();
}

float AiAgentAdapter::getBlast() {
	return ((AiAgentImplementation*) impl)->getBlast();
}

float AiAgentAdapter::getHeat() {
	return ((AiAgentImplementation*) impl)->getHeat();
}

float AiAgentAdapter::getCold() {
	return ((AiAgentImplementation*) impl)->getCold();
}

float AiAgentAdapter::getAcid() {
	return ((AiAgentImplementation*) impl)->getAcid();
}

float AiAgentAdapter::getLightSaber() {
	return ((AiAgentImplementation*) impl)->getLightSaber();
}

bool AiAgentAdapter::isStalker() {
	return ((AiAgentImplementation*) impl)->isStalker();
}

bool AiAgentAdapter::isKiller() {
	return ((AiAgentImplementation*) impl)->isKiller();
}

unsigned int AiAgentAdapter::getFerocity() {
	return ((AiAgentImplementation*) impl)->getFerocity();
}

unsigned int AiAgentAdapter::getArmor() {
	return ((AiAgentImplementation*) impl)->getArmor();
}

bool AiAgentAdapter::getDespawnOnNoPlayerInRange() {
	return ((AiAgentImplementation*) impl)->getDespawnOnNoPlayerInRange();
}

int AiAgentAdapter::getNumberOfPlayersInRange() {
	return ((AiAgentImplementation*) impl)->getNumberOfPlayersInRange();
}

String AiAgentAdapter::getFactionString() {
	return ((AiAgentImplementation*) impl)->getFactionString();
}

String AiAgentAdapter::getSocialGroup() {
	return ((AiAgentImplementation*) impl)->getSocialGroup();
}

float AiAgentAdapter::getChanceHit() {
	return ((AiAgentImplementation*) impl)->getChanceHit();
}

int AiAgentAdapter::getDamageMin() {
	return ((AiAgentImplementation*) impl)->getDamageMin();
}

int AiAgentAdapter::getDamageMax() {
	return ((AiAgentImplementation*) impl)->getDamageMax();
}

int AiAgentAdapter::getBaseXp() {
	return ((AiAgentImplementation*) impl)->getBaseXp();
}

unsigned int AiAgentAdapter::getDiet() {
	return ((AiAgentImplementation*) impl)->getDiet();
}

float AiAgentAdapter::getRespawnTimer() {
	return ((AiAgentImplementation*) impl)->getRespawnTimer();
}

bool AiAgentAdapter::isAiAgent() {
	return ((AiAgentImplementation*) impl)->isAiAgent();
}

void AiAgentAdapter::setLootOwner(CreatureObject* owner) {
	((AiAgentImplementation*) impl)->setLootOwner(owner);
}

CreatureObject* AiAgentAdapter::getLootOwner() {
	return ((AiAgentImplementation*) impl)->getLootOwner();
}

/*
 *	AiAgentHelper
 */

AiAgentHelper* AiAgentHelper::staticInitializer = AiAgentHelper::instance();

AiAgentHelper::AiAgentHelper() {
	className = "AiAgent";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void AiAgentHelper::finalizeHelper() {
	AiAgentHelper::finalize();
}

DistributedObject* AiAgentHelper::instantiateObject() {
	return new AiAgent(DummyConstructorParameter::instance());
}

DistributedObjectServant* AiAgentHelper::instantiateServant() {
	return new AiAgentImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* AiAgentHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new AiAgentAdapter((AiAgentImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

