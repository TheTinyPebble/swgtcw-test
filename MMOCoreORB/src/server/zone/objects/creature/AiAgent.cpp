/*
 *	server/zone/objects/creature/AiAgent.cpp generated by engine3 IDL compiler 0.60
 */

#include "AiAgent.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/creature/events/AiThinkEvent.h"

#include "server/zone/objects/creature/events/AiMoveEvent.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/tangible/weapon/WeaponObject.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/objects/creature/events/DespawnCreatureOnPlayerDissappear.h"

/*
 *	AiAgentStub
 */

AiAgent::AiAgent() : CreatureObject(DummyConstructorParameter::instance()) {
	_impl = new AiAgentImplementation();
	_impl->_setStub(this);
}

AiAgent::AiAgent(DummyConstructorParameter* param) : CreatureObject(param) {
}

AiAgent::~AiAgent() {
}


void AiAgent::initializeTransientMembers() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((AiAgentImplementation*) _impl)->initializeTransientMembers();
}

void AiAgent::activateRecovery() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		((AiAgentImplementation*) _impl)->activateRecovery();
}

void AiAgent::activateMovementEvent() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		method.executeWithVoidReturn();
	} else
		((AiAgentImplementation*) _impl)->activateMovementEvent();
}

bool AiAgent::tryRetreat() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return method.executeWithBooleanReturn();
	} else
		return ((AiAgentImplementation*) _impl)->tryRetreat();
}

void AiAgent::doRecovery() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		method.executeWithVoidReturn();
	} else
		((AiAgentImplementation*) _impl)->doRecovery();
}

void AiAgent::doMovement() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		method.executeWithVoidReturn();
	} else
		((AiAgentImplementation*) _impl)->doMovement();
}

void AiAgent::checkNewAngle() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		method.executeWithVoidReturn();
	} else
		((AiAgentImplementation*) _impl)->checkNewAngle();
}

void AiAgent::fillAttributeList(AttributeListMessage* msg, PlayerCreature* object) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addObjectParameter(msg);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		((AiAgentImplementation*) _impl)->fillAttributeList(msg, object);
}

void AiAgent::setNextPosition(float x, float z, float y, SceneObject* cell) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addFloatParameter(x);
		method.addFloatParameter(z);
		method.addFloatParameter(y);
		method.addObjectParameter(cell);

		method.executeWithVoidReturn();
	} else
		((AiAgentImplementation*) _impl)->setNextPosition(x, z, y, cell);
}

void AiAgent::updateCurrentPosition(PatrolPoint* point) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((AiAgentImplementation*) _impl)->updateCurrentPosition(point);
}

void AiAgent::broadcastNextPositionUpdate(PatrolPoint* point) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((AiAgentImplementation*) _impl)->broadcastNextPositionUpdate(point);
}

void AiAgent::clearPatrolPoints() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		method.executeWithVoidReturn();
	} else
		((AiAgentImplementation*) _impl)->clearPatrolPoints();
}

void AiAgent::notifyInsert(QuadTreeEntry* entry) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((AiAgentImplementation*) _impl)->notifyInsert(entry);
}

void AiAgent::notifyDissapear(QuadTreeEntry* entry) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((AiAgentImplementation*) _impl)->notifyDissapear(entry);
}

void AiAgent::notifyPositionUpdate(QuadTreeEntry* obj) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((AiAgentImplementation*) _impl)->notifyPositionUpdate(obj);
}

void AiAgent::loadTemplateData(SharedObjectTemplate* templateData) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((AiAgentImplementation*) _impl)->loadTemplateData(templateData);
}

int AiAgent::inflictDamage(TangibleObject* attacker, int damageType, int damage, bool destroy, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addObjectParameter(attacker);
		method.addSignedIntParameter(damageType);
		method.addSignedIntParameter(damage);
		method.addBooleanParameter(destroy);
		method.addBooleanParameter(notifyClient);

		return method.executeWithSignedIntReturn();
	} else
		return ((AiAgentImplementation*) _impl)->inflictDamage(attacker, damageType, damage, destroy, notifyClient);
}

void AiAgent::sendConversationStartTo(SceneObject* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((AiAgentImplementation*) _impl)->sendConversationStartTo(player);
}

void AiAgent::selectConversationOption(int option, SceneObject* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addSignedIntParameter(option);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((AiAgentImplementation*) _impl)->selectConversationOption(option, obj);
}

int AiAgent::notifyObjectDestructionObservers(TangibleObject* attacker, int condition) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addObjectParameter(attacker);
		method.addSignedIntParameter(condition);

		return method.executeWithSignedIntReturn();
	} else
		return ((AiAgentImplementation*) _impl)->notifyObjectDestructionObservers(attacker, condition);
}

void AiAgent::activatePostureRecovery() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);

		method.executeWithVoidReturn();
	} else
		((AiAgentImplementation*) _impl)->activatePostureRecovery();
}

void AiAgent::clearCombatState(bool clearDefenders) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addBooleanParameter(clearDefenders);

		method.executeWithVoidReturn();
	} else
		((AiAgentImplementation*) _impl)->clearCombatState(clearDefenders);
}

void AiAgent::setDefender(SceneObject* defender) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);
		method.addObjectParameter(defender);

		method.executeWithVoidReturn();
	} else
		((AiAgentImplementation*) _impl)->setDefender(defender);
}

void AiAgent::addDefender(SceneObject* defender) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);
		method.addObjectParameter(defender);

		method.executeWithVoidReturn();
	} else
		((AiAgentImplementation*) _impl)->addDefender(defender);
}

void AiAgent::removeDefender(SceneObject* defender) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);
		method.addObjectParameter(defender);

		method.executeWithVoidReturn();
	} else
		((AiAgentImplementation*) _impl)->removeDefender(defender);
}

void AiAgent::setDespawnOnNoPlayerInRange(bool val) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);
		method.addBooleanParameter(val);

		method.executeWithVoidReturn();
	} else
		((AiAgentImplementation*) _impl)->setDespawnOnNoPlayerInRange(val);
}

void AiAgent::notifyDespawn(Zone* zone) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);
		method.addObjectParameter(zone);

		method.executeWithVoidReturn();
	} else
		((AiAgentImplementation*) _impl)->notifyDespawn(zone);
}

void AiAgent::respawn(Zone* zone, int level) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);
		method.addObjectParameter(zone);
		method.addSignedIntParameter(level);

		method.executeWithVoidReturn();
	} else
		((AiAgentImplementation*) _impl)->respawn(zone, level);
}

void AiAgent::setHomeLocation(float x, float z, float y, SceneObject* cell) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);
		method.addFloatParameter(x);
		method.addFloatParameter(z);
		method.addFloatParameter(y);
		method.addObjectParameter(cell);

		method.executeWithVoidReturn();
	} else
		((AiAgentImplementation*) _impl)->setHomeLocation(x, z, y, cell);
}

void AiAgent::setRespawnTimer(float resp) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);
		method.addFloatParameter(resp);

		method.executeWithVoidReturn();
	} else
		((AiAgentImplementation*) _impl)->setRespawnTimer(resp);
}

bool AiAgent::isAttackableBy(CreatureObject* object) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);
		method.addObjectParameter(object);

		return method.executeWithBooleanReturn();
	} else
		return ((AiAgentImplementation*) _impl)->isAttackableBy(object);
}

void AiAgent::setFollowObject(SceneObject* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((AiAgentImplementation*) _impl)->setFollowObject(obj);
}

bool AiAgent::isRetreating() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);

		return method.executeWithBooleanReturn();
	} else
		return ((AiAgentImplementation*) _impl)->isRetreating();
}

void AiAgent::clearDespawnEvent() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);

		method.executeWithVoidReturn();
	} else
		((AiAgentImplementation*) _impl)->clearDespawnEvent();
}

float AiAgent::getKinetic() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);

		return method.executeWithFloatReturn();
	} else
		return ((AiAgentImplementation*) _impl)->getKinetic();
}

float AiAgent::getEnergy() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);

		return method.executeWithFloatReturn();
	} else
		return ((AiAgentImplementation*) _impl)->getEnergy();
}

float AiAgent::getElectricity() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 36);

		return method.executeWithFloatReturn();
	} else
		return ((AiAgentImplementation*) _impl)->getElectricity();
}

float AiAgent::getStun() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 37);

		return method.executeWithFloatReturn();
	} else
		return ((AiAgentImplementation*) _impl)->getStun();
}

float AiAgent::getBlast() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 38);

		return method.executeWithFloatReturn();
	} else
		return ((AiAgentImplementation*) _impl)->getBlast();
}

float AiAgent::getHeat() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 39);

		return method.executeWithFloatReturn();
	} else
		return ((AiAgentImplementation*) _impl)->getHeat();
}

float AiAgent::getCold() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 40);

		return method.executeWithFloatReturn();
	} else
		return ((AiAgentImplementation*) _impl)->getCold();
}

float AiAgent::getAcid() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 41);

		return method.executeWithFloatReturn();
	} else
		return ((AiAgentImplementation*) _impl)->getAcid();
}

float AiAgent::getLightSaber() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 42);

		return method.executeWithFloatReturn();
	} else
		return ((AiAgentImplementation*) _impl)->getLightSaber();
}

bool AiAgent::isStalker() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 43);

		return method.executeWithBooleanReturn();
	} else
		return ((AiAgentImplementation*) _impl)->isStalker();
}

bool AiAgent::isBaby() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 44);

		return method.executeWithBooleanReturn();
	} else
		return ((AiAgentImplementation*) _impl)->isBaby();
}

bool AiAgent::isKiller() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 45);

		return method.executeWithBooleanReturn();
	} else
		return ((AiAgentImplementation*) _impl)->isKiller();
}

float AiAgent::getTame() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 46);

		return method.executeWithFloatReturn();
	} else
		return ((AiAgentImplementation*) _impl)->getTame();
}

String AiAgent::getMeatType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 47);

		method.executeWithAsciiReturn(_return_getMeatType);
		return _return_getMeatType;
	} else
		return ((AiAgentImplementation*) _impl)->getMeatType();
}

String AiAgent::getBoneType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 48);

		method.executeWithAsciiReturn(_return_getBoneType);
		return _return_getBoneType;
	} else
		return ((AiAgentImplementation*) _impl)->getBoneType();
}

String AiAgent::getHideType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 49);

		method.executeWithAsciiReturn(_return_getHideType);
		return _return_getHideType;
	} else
		return ((AiAgentImplementation*) _impl)->getHideType();
}

float AiAgent::getMilk() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 50);

		return method.executeWithFloatReturn();
	} else
		return ((AiAgentImplementation*) _impl)->getMilk();
}

float AiAgent::getHideMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 51);

		return method.executeWithFloatReturn();
	} else
		return ((AiAgentImplementation*) _impl)->getHideMax();
}

float AiAgent::getBoneMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 52);

		return method.executeWithFloatReturn();
	} else
		return ((AiAgentImplementation*) _impl)->getBoneMax();
}

float AiAgent::getMeatMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 53);

		return method.executeWithFloatReturn();
	} else
		return ((AiAgentImplementation*) _impl)->getMeatMax();
}

unsigned int AiAgent::getFerocity() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 54);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((AiAgentImplementation*) _impl)->getFerocity();
}

unsigned int AiAgent::getArmor() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 55);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((AiAgentImplementation*) _impl)->getArmor();
}

bool AiAgent::getDespawnOnNoPlayerInRange() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 56);

		return method.executeWithBooleanReturn();
	} else
		return ((AiAgentImplementation*) _impl)->getDespawnOnNoPlayerInRange();
}

int AiAgent::getNumberOfPlayersInRange() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 57);

		return method.executeWithSignedIntReturn();
	} else
		return ((AiAgentImplementation*) _impl)->getNumberOfPlayersInRange();
}

DamageMap* AiAgent::getDamageMap() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((AiAgentImplementation*) _impl)->getDamageMap();
}

float AiAgent::getRespawnTimer() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 58);

		return method.executeWithFloatReturn();
	} else
		return ((AiAgentImplementation*) _impl)->getRespawnTimer();
}

PatrolPoint* AiAgent::getHomeLocation() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((AiAgentImplementation*) _impl)->getHomeLocation();
}

bool AiAgent::hasOrganics() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 59);

		return method.executeWithBooleanReturn();
	} else
		return ((AiAgentImplementation*) _impl)->hasOrganics();
}

bool AiAgent::isAiAgent() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 60);

		return method.executeWithBooleanReturn();
	} else
		return ((AiAgentImplementation*) _impl)->isAiAgent();
}

/*
 *	AiAgentImplementation
 */

AiAgentImplementation::AiAgentImplementation(DummyConstructorParameter* param) : CreatureObjectImplementation(param) {
	_initializeImplementation();
}

AiAgentImplementation::~AiAgentImplementation() {
}


void AiAgentImplementation::finalize() {
}

void AiAgentImplementation::_initializeImplementation() {
	_setClassHelper(AiAgentHelper::instance());

	_serializationHelperMethod();
}

void AiAgentImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (AiAgent*) stub;
	CreatureObjectImplementation::_setStub(stub);
}

DistributedObjectStub* AiAgentImplementation::_getStub() {
	return _this;
}

AiAgentImplementation::operator const AiAgent*() {
	return _this;
}

void AiAgentImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void AiAgentImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void AiAgentImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void AiAgentImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void AiAgentImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void AiAgentImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void AiAgentImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void AiAgentImplementation::_serializationHelperMethod() {
	CreatureObjectImplementation::_serializationHelperMethod();

	_setClassName("AiAgent");

	addSerializableVariable("thinkEvent", &thinkEvent);
	addSerializableVariable("moveEvent", &moveEvent);
	addSerializableVariable("skillCommands", &skillCommands);
	addSerializableVariable("patrolPoints", &patrolPoints);
	addSerializableVariable("homeLocation", &homeLocation);
	addSerializableVariable("nextStepPosition", &nextStepPosition);
	addSerializableVariable("damageMap", &damageMap);
	addSerializableVariable("baby", &baby);
	addSerializableVariable("currentSpeed", &currentSpeed);
	addSerializableVariable("despawnOnNoPlayerInRange", &despawnOnNoPlayerInRange);
	addSerializableVariable("followObject", &followObject);
	addSerializableVariable("respawnTimer", &respawnTimer);
	addSerializableVariable("numberOfPlayersInRange", &numberOfPlayersInRange);
}

AiAgentImplementation::AiAgentImplementation() {
	_initializeImplementation();
	// server/zone/objects/creature/AiAgent.idl(110):  		baby = false;
	baby = false;
	// server/zone/objects/creature/AiAgent.idl(112):  		currentSpeed = 0;
	currentSpeed = 0;
	// server/zone/objects/creature/AiAgent.idl(113):  		respawnTimer = 0;
	respawnTimer = 0;
	// server/zone/objects/creature/AiAgent.idl(115):  		despawnOnNoPlayerInRange = true;
	despawnOnNoPlayerInRange = true;
	// server/zone/objects/creature/AiAgent.idl(116):  		numberOfPlayersInRange = 0;
	numberOfPlayersInRange = 0;
	// server/zone/objects/creature/AiAgent.idl(118):  		npcTemplate = null;
	npcTemplate = NULL;
	// server/zone/objects/creature/AiAgent.idl(120):  		Logger.setLoggingName("AiAgent");
	Logger::setLoggingName("AiAgent");
	// server/zone/objects/creature/AiAgent.idl(121):  		Logger.setLogging(false);
	Logger::setLogging(false);
	// server/zone/objects/creature/AiAgent.idl(122):  		Logger.setGlobalLogging(true);
	Logger::setGlobalLogging(true);
}

void AiAgentImplementation::clearPatrolPoints() {
	// server/zone/objects/creature/AiAgent.idl(155):  		patrolPoints.removeAll();
	(&patrolPoints)->removeAll();
}

void AiAgentImplementation::setHomeLocation(float x, float z, float y, SceneObject* cell) {
	// server/zone/objects/creature/AiAgent.idl(252):  		homeLocation.setPosition(x, z, y);
	(&homeLocation)->setPosition(x, z, y);
	// server/zone/objects/creature/AiAgent.idl(253):  		homeLocation.setCell(cell);
	(&homeLocation)->setCell(cell);
	// server/zone/objects/creature/AiAgent.idl(254):  		homeLocation.setReached(true);
	(&homeLocation)->setReached(true);
}

void AiAgentImplementation::setRespawnTimer(float resp) {
	// server/zone/objects/creature/AiAgent.idl(258):  		respawnTimer = resp;
	respawnTimer = resp;
}

bool AiAgentImplementation::isAttackableBy(CreatureObject* object) {
	// server/zone/objects/creature/AiAgent.idl(268):  		if 
	if (object == _this)	// server/zone/objects/creature/AiAgent.idl(269):  			return false;
	return false;
	// server/zone/objects/creature/AiAgent.idl(271):  		if 
	if (CreatureObjectImplementation::pvpStatusBitmask == 0)	// server/zone/objects/creature/AiAgent.idl(272):  			return false;
	return false;
	// server/zone/objects/creature/AiAgent.idl(274):  		if 
	if (_this->isRetreating())	// server/zone/objects/creature/AiAgent.idl(275):  			return false;
	return false;
	// server/zone/objects/creature/AiAgent.idl(277):  		return 
	if (_this->isDead())	// server/zone/objects/creature/AiAgent.idl(278):  			return false;
	return false;
	// server/zone/objects/creature/AiAgent.idl(280):  true;
	return true;
}

void AiAgentImplementation::setFollowObject(SceneObject* obj) {
	// server/zone/objects/creature/AiAgent.idl(284):  	}
	if (followObject != obj){
	// server/zone/objects/creature/AiAgent.idl(285):  			clearPatrolPoints();
	clearPatrolPoints();
	// server/zone/objects/creature/AiAgent.idl(287):  			followObject = obj;
	followObject = obj;
	// server/zone/objects/creature/AiAgent.idl(289):  			activateMovementEvent();
	activateMovementEvent();
}
}

bool AiAgentImplementation::isRetreating() {
	// server/zone/objects/creature/AiAgent.idl(294):  		return !homeLocation.isReached();
	return !(&homeLocation)->isReached();
}

float AiAgentImplementation::getKinetic() {
	// server/zone/objects/creature/AiAgent.idl(300):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(301):  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl(303):  npcTemplate.getKinetic();
	return npcTemplate->getKinetic();
}

float AiAgentImplementation::getEnergy() {
	// server/zone/objects/creature/AiAgent.idl(307):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(308):  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl(310):  npcTemplate.getEnergy();
	return npcTemplate->getEnergy();
}

float AiAgentImplementation::getElectricity() {
	// server/zone/objects/creature/AiAgent.idl(314):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(315):  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl(317):  npcTemplate.getElectricity();
	return npcTemplate->getElectricity();
}

float AiAgentImplementation::getStun() {
	// server/zone/objects/creature/AiAgent.idl(321):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(322):  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl(324):  npcTemplate.getStun();
	return npcTemplate->getStun();
}

float AiAgentImplementation::getBlast() {
	// server/zone/objects/creature/AiAgent.idl(328):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(329):  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl(331):  npcTemplate.getBlast();
	return npcTemplate->getBlast();
}

float AiAgentImplementation::getHeat() {
	// server/zone/objects/creature/AiAgent.idl(335):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(336):  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl(338):  npcTemplate.getHeat();
	return npcTemplate->getHeat();
}

float AiAgentImplementation::getCold() {
	// server/zone/objects/creature/AiAgent.idl(342):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(343):  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl(345):  npcTemplate.getCold();
	return npcTemplate->getCold();
}

float AiAgentImplementation::getAcid() {
	// server/zone/objects/creature/AiAgent.idl(349):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(350):  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl(352):  npcTemplate.getAcid();
	return npcTemplate->getAcid();
}

float AiAgentImplementation::getLightSaber() {
	// server/zone/objects/creature/AiAgent.idl(356):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(357):  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl(359):  npcTemplate.getLightSaber();
	return npcTemplate->getLightSaber();
}

bool AiAgentImplementation::isStalker() {
	// server/zone/objects/creature/AiAgent.idl(363):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(364):  			return false;
	return false;
	// server/zone/objects/creature/AiAgent.idl(366):  npcTemplate.isStalker();
	return npcTemplate->isStalker();
}

bool AiAgentImplementation::isBaby() {
	// server/zone/objects/creature/AiAgent.idl(370):  		return baby;
	return baby;
}

bool AiAgentImplementation::isKiller() {
	// server/zone/objects/creature/AiAgent.idl(374):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(375):  			return false;
	return false;
	// server/zone/objects/creature/AiAgent.idl(377):  npcTemplate.isKiller();
	return npcTemplate->isKiller();
}

float AiAgentImplementation::getTame() {
	// server/zone/objects/creature/AiAgent.idl(381):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(382):  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl(384):  npcTemplate.getTame();
	return npcTemplate->getTame();
}

String AiAgentImplementation::getMeatType() {
	// server/zone/objects/creature/AiAgent.idl(388):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(389):  			return "";
	return "";
	// server/zone/objects/creature/AiAgent.idl(391):  npcTemplate.getMeatType();
	return npcTemplate->getMeatType();
}

String AiAgentImplementation::getBoneType() {
	// server/zone/objects/creature/AiAgent.idl(395):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(396):  			return "";
	return "";
	// server/zone/objects/creature/AiAgent.idl(398):  npcTemplate.getBoneType();
	return npcTemplate->getBoneType();
}

String AiAgentImplementation::getHideType() {
	// server/zone/objects/creature/AiAgent.idl(402):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(403):  			return "";
	return "";
	// server/zone/objects/creature/AiAgent.idl(405):  npcTemplate.getHideType();
	return npcTemplate->getHideType();
}

float AiAgentImplementation::getMilk() {
	// server/zone/objects/creature/AiAgent.idl(409):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(410):  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl(412):  npcTemplate.getMilk();
	return npcTemplate->getMilk();
}

float AiAgentImplementation::getHideMax() {
	// server/zone/objects/creature/AiAgent.idl(416):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(417):  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl(419):  npcTemplate.getHideMax();
	return npcTemplate->getHideMax();
}

float AiAgentImplementation::getBoneMax() {
	// server/zone/objects/creature/AiAgent.idl(423):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(424):  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl(426):  npcTemplate.getBoneMax();
	return npcTemplate->getBoneMax();
}

float AiAgentImplementation::getMeatMax() {
	// server/zone/objects/creature/AiAgent.idl(430):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(431):  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl(433):  npcTemplate.getMeatMax();
	return npcTemplate->getMeatMax();
}

unsigned int AiAgentImplementation::getFerocity() {
	// server/zone/objects/creature/AiAgent.idl(437):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(438):  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl(440):  npcTemplate.getFerocity();
	return npcTemplate->getFerocity();
}

unsigned int AiAgentImplementation::getArmor() {
	// server/zone/objects/creature/AiAgent.idl(444):  		return 
	if (npcTemplate == NULL)	// server/zone/objects/creature/AiAgent.idl(445):  			return 0;
	return 0;
	// server/zone/objects/creature/AiAgent.idl(447):  npcTemplate.getArmor();
	return npcTemplate->getArmor();
}

bool AiAgentImplementation::getDespawnOnNoPlayerInRange() {
	// server/zone/objects/creature/AiAgent.idl(451):  		return despawnOnNoPlayerInRange;
	return despawnOnNoPlayerInRange;
}

int AiAgentImplementation::getNumberOfPlayersInRange() {
	// server/zone/objects/creature/AiAgent.idl(455):  		return numberOfPlayersInRange;
	return numberOfPlayersInRange;
}

DamageMap* AiAgentImplementation::getDamageMap() {
	// server/zone/objects/creature/AiAgent.idl(460):  		return damageMap;
	return (&damageMap);
}

float AiAgentImplementation::getRespawnTimer() {
	// server/zone/objects/creature/AiAgent.idl(464):  		return respawnTimer;
	return respawnTimer;
}

PatrolPoint* AiAgentImplementation::getHomeLocation() {
	// server/zone/objects/creature/AiAgent.idl(469):  		return homeLocation;
	return (&homeLocation);
}

bool AiAgentImplementation::isAiAgent() {
	// server/zone/objects/creature/AiAgent.idl(475):  		return true;
	return true;
}

/*
 *	AiAgentAdapter
 */

AiAgentAdapter::AiAgentAdapter(AiAgentImplementation* obj) : CreatureObjectAdapter(obj) {
}

Packet* AiAgentAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initializeTransientMembers();
		break;
	case 7:
		activateRecovery();
		break;
	case 8:
		activateMovementEvent();
		break;
	case 9:
		resp->insertBoolean(tryRetreat());
		break;
	case 10:
		doRecovery();
		break;
	case 11:
		doMovement();
		break;
	case 12:
		checkNewAngle();
		break;
	case 13:
		fillAttributeList((AttributeListMessage*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter());
		break;
	case 14:
		setNextPosition(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), (SceneObject*) inv->getObjectParameter());
		break;
	case 15:
		clearPatrolPoints();
		break;
	case 16:
		resp->insertSignedInt(inflictDamage((TangibleObject*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter(), inv->getBooleanParameter()));
		break;
	case 17:
		sendConversationStartTo((SceneObject*) inv->getObjectParameter());
		break;
	case 18:
		selectConversationOption(inv->getSignedIntParameter(), (SceneObject*) inv->getObjectParameter());
		break;
	case 19:
		resp->insertSignedInt(notifyObjectDestructionObservers((TangibleObject*) inv->getObjectParameter(), inv->getSignedIntParameter()));
		break;
	case 20:
		activatePostureRecovery();
		break;
	case 21:
		clearCombatState(inv->getBooleanParameter());
		break;
	case 22:
		setDefender((SceneObject*) inv->getObjectParameter());
		break;
	case 23:
		addDefender((SceneObject*) inv->getObjectParameter());
		break;
	case 24:
		removeDefender((SceneObject*) inv->getObjectParameter());
		break;
	case 25:
		setDespawnOnNoPlayerInRange(inv->getBooleanParameter());
		break;
	case 26:
		notifyDespawn((Zone*) inv->getObjectParameter());
		break;
	case 27:
		respawn((Zone*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case 28:
		setHomeLocation(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), (SceneObject*) inv->getObjectParameter());
		break;
	case 29:
		setRespawnTimer(inv->getFloatParameter());
		break;
	case 30:
		resp->insertBoolean(isAttackableBy((CreatureObject*) inv->getObjectParameter()));
		break;
	case 31:
		setFollowObject((SceneObject*) inv->getObjectParameter());
		break;
	case 32:
		resp->insertBoolean(isRetreating());
		break;
	case 33:
		clearDespawnEvent();
		break;
	case 34:
		resp->insertFloat(getKinetic());
		break;
	case 35:
		resp->insertFloat(getEnergy());
		break;
	case 36:
		resp->insertFloat(getElectricity());
		break;
	case 37:
		resp->insertFloat(getStun());
		break;
	case 38:
		resp->insertFloat(getBlast());
		break;
	case 39:
		resp->insertFloat(getHeat());
		break;
	case 40:
		resp->insertFloat(getCold());
		break;
	case 41:
		resp->insertFloat(getAcid());
		break;
	case 42:
		resp->insertFloat(getLightSaber());
		break;
	case 43:
		resp->insertBoolean(isStalker());
		break;
	case 44:
		resp->insertBoolean(isBaby());
		break;
	case 45:
		resp->insertBoolean(isKiller());
		break;
	case 46:
		resp->insertFloat(getTame());
		break;
	case 47:
		resp->insertAscii(getMeatType());
		break;
	case 48:
		resp->insertAscii(getBoneType());
		break;
	case 49:
		resp->insertAscii(getHideType());
		break;
	case 50:
		resp->insertFloat(getMilk());
		break;
	case 51:
		resp->insertFloat(getHideMax());
		break;
	case 52:
		resp->insertFloat(getBoneMax());
		break;
	case 53:
		resp->insertFloat(getMeatMax());
		break;
	case 54:
		resp->insertInt(getFerocity());
		break;
	case 55:
		resp->insertInt(getArmor());
		break;
	case 56:
		resp->insertBoolean(getDespawnOnNoPlayerInRange());
		break;
	case 57:
		resp->insertSignedInt(getNumberOfPlayersInRange());
		break;
	case 58:
		resp->insertFloat(getRespawnTimer());
		break;
	case 59:
		resp->insertBoolean(hasOrganics());
		break;
	case 60:
		resp->insertBoolean(isAiAgent());
		break;
	default:
		return NULL;
	}

	return resp;
}

void AiAgentAdapter::initializeTransientMembers() {
	((AiAgentImplementation*) impl)->initializeTransientMembers();
}

void AiAgentAdapter::activateRecovery() {
	((AiAgentImplementation*) impl)->activateRecovery();
}

void AiAgentAdapter::activateMovementEvent() {
	((AiAgentImplementation*) impl)->activateMovementEvent();
}

bool AiAgentAdapter::tryRetreat() {
	return ((AiAgentImplementation*) impl)->tryRetreat();
}

void AiAgentAdapter::doRecovery() {
	((AiAgentImplementation*) impl)->doRecovery();
}

void AiAgentAdapter::doMovement() {
	((AiAgentImplementation*) impl)->doMovement();
}

void AiAgentAdapter::checkNewAngle() {
	((AiAgentImplementation*) impl)->checkNewAngle();
}

void AiAgentAdapter::fillAttributeList(AttributeListMessage* msg, PlayerCreature* object) {
	((AiAgentImplementation*) impl)->fillAttributeList(msg, object);
}

void AiAgentAdapter::setNextPosition(float x, float z, float y, SceneObject* cell) {
	((AiAgentImplementation*) impl)->setNextPosition(x, z, y, cell);
}

void AiAgentAdapter::clearPatrolPoints() {
	((AiAgentImplementation*) impl)->clearPatrolPoints();
}

int AiAgentAdapter::inflictDamage(TangibleObject* attacker, int damageType, int damage, bool destroy, bool notifyClient) {
	return ((AiAgentImplementation*) impl)->inflictDamage(attacker, damageType, damage, destroy, notifyClient);
}

void AiAgentAdapter::sendConversationStartTo(SceneObject* player) {
	((AiAgentImplementation*) impl)->sendConversationStartTo(player);
}

void AiAgentAdapter::selectConversationOption(int option, SceneObject* obj) {
	((AiAgentImplementation*) impl)->selectConversationOption(option, obj);
}

int AiAgentAdapter::notifyObjectDestructionObservers(TangibleObject* attacker, int condition) {
	return ((AiAgentImplementation*) impl)->notifyObjectDestructionObservers(attacker, condition);
}

void AiAgentAdapter::activatePostureRecovery() {
	((AiAgentImplementation*) impl)->activatePostureRecovery();
}

void AiAgentAdapter::clearCombatState(bool clearDefenders) {
	((AiAgentImplementation*) impl)->clearCombatState(clearDefenders);
}

void AiAgentAdapter::setDefender(SceneObject* defender) {
	((AiAgentImplementation*) impl)->setDefender(defender);
}

void AiAgentAdapter::addDefender(SceneObject* defender) {
	((AiAgentImplementation*) impl)->addDefender(defender);
}

void AiAgentAdapter::removeDefender(SceneObject* defender) {
	((AiAgentImplementation*) impl)->removeDefender(defender);
}

void AiAgentAdapter::setDespawnOnNoPlayerInRange(bool val) {
	((AiAgentImplementation*) impl)->setDespawnOnNoPlayerInRange(val);
}

void AiAgentAdapter::notifyDespawn(Zone* zone) {
	((AiAgentImplementation*) impl)->notifyDespawn(zone);
}

void AiAgentAdapter::respawn(Zone* zone, int level) {
	((AiAgentImplementation*) impl)->respawn(zone, level);
}

void AiAgentAdapter::setHomeLocation(float x, float z, float y, SceneObject* cell) {
	((AiAgentImplementation*) impl)->setHomeLocation(x, z, y, cell);
}

void AiAgentAdapter::setRespawnTimer(float resp) {
	((AiAgentImplementation*) impl)->setRespawnTimer(resp);
}

bool AiAgentAdapter::isAttackableBy(CreatureObject* object) {
	return ((AiAgentImplementation*) impl)->isAttackableBy(object);
}

void AiAgentAdapter::setFollowObject(SceneObject* obj) {
	((AiAgentImplementation*) impl)->setFollowObject(obj);
}

bool AiAgentAdapter::isRetreating() {
	return ((AiAgentImplementation*) impl)->isRetreating();
}

void AiAgentAdapter::clearDespawnEvent() {
	((AiAgentImplementation*) impl)->clearDespawnEvent();
}

float AiAgentAdapter::getKinetic() {
	return ((AiAgentImplementation*) impl)->getKinetic();
}

float AiAgentAdapter::getEnergy() {
	return ((AiAgentImplementation*) impl)->getEnergy();
}

float AiAgentAdapter::getElectricity() {
	return ((AiAgentImplementation*) impl)->getElectricity();
}

float AiAgentAdapter::getStun() {
	return ((AiAgentImplementation*) impl)->getStun();
}

float AiAgentAdapter::getBlast() {
	return ((AiAgentImplementation*) impl)->getBlast();
}

float AiAgentAdapter::getHeat() {
	return ((AiAgentImplementation*) impl)->getHeat();
}

float AiAgentAdapter::getCold() {
	return ((AiAgentImplementation*) impl)->getCold();
}

float AiAgentAdapter::getAcid() {
	return ((AiAgentImplementation*) impl)->getAcid();
}

float AiAgentAdapter::getLightSaber() {
	return ((AiAgentImplementation*) impl)->getLightSaber();
}

bool AiAgentAdapter::isStalker() {
	return ((AiAgentImplementation*) impl)->isStalker();
}

bool AiAgentAdapter::isBaby() {
	return ((AiAgentImplementation*) impl)->isBaby();
}

bool AiAgentAdapter::isKiller() {
	return ((AiAgentImplementation*) impl)->isKiller();
}

float AiAgentAdapter::getTame() {
	return ((AiAgentImplementation*) impl)->getTame();
}

String AiAgentAdapter::getMeatType() {
	return ((AiAgentImplementation*) impl)->getMeatType();
}

String AiAgentAdapter::getBoneType() {
	return ((AiAgentImplementation*) impl)->getBoneType();
}

String AiAgentAdapter::getHideType() {
	return ((AiAgentImplementation*) impl)->getHideType();
}

float AiAgentAdapter::getMilk() {
	return ((AiAgentImplementation*) impl)->getMilk();
}

float AiAgentAdapter::getHideMax() {
	return ((AiAgentImplementation*) impl)->getHideMax();
}

float AiAgentAdapter::getBoneMax() {
	return ((AiAgentImplementation*) impl)->getBoneMax();
}

float AiAgentAdapter::getMeatMax() {
	return ((AiAgentImplementation*) impl)->getMeatMax();
}

unsigned int AiAgentAdapter::getFerocity() {
	return ((AiAgentImplementation*) impl)->getFerocity();
}

unsigned int AiAgentAdapter::getArmor() {
	return ((AiAgentImplementation*) impl)->getArmor();
}

bool AiAgentAdapter::getDespawnOnNoPlayerInRange() {
	return ((AiAgentImplementation*) impl)->getDespawnOnNoPlayerInRange();
}

int AiAgentAdapter::getNumberOfPlayersInRange() {
	return ((AiAgentImplementation*) impl)->getNumberOfPlayersInRange();
}

float AiAgentAdapter::getRespawnTimer() {
	return ((AiAgentImplementation*) impl)->getRespawnTimer();
}

bool AiAgentAdapter::hasOrganics() {
	return ((AiAgentImplementation*) impl)->hasOrganics();
}

bool AiAgentAdapter::isAiAgent() {
	return ((AiAgentImplementation*) impl)->isAiAgent();
}

/*
 *	AiAgentHelper
 */

AiAgentHelper* AiAgentHelper::staticInitializer = AiAgentHelper::instance();

AiAgentHelper::AiAgentHelper() {
	className = "AiAgent";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void AiAgentHelper::finalizeHelper() {
	AiAgentHelper::finalize();
}

DistributedObject* AiAgentHelper::instantiateObject() {
	return new AiAgent(DummyConstructorParameter::instance());
}

DistributedObjectServant* AiAgentHelper::instantiateServant() {
	return new AiAgentImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* AiAgentHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new AiAgentAdapter((AiAgentImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

