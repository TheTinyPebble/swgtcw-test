/*
 *	server/zone/objects/creature/mount/VehicleObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "VehicleObject.h"

#include "VehicleObjectImplementation.h"

#include "../Creature.h"

#include "../CreatureObject.h"

#include "../../player/Player.h"

#include "../../intangible/IntangibleObject.h"

#include "../../scene/SceneObject.h"

/*
 *	VehicleObjectStub
 */

VehicleObject::VehicleObject(Player* linkCreature) {
	_impl = new VehicleObjectImplementation(linkCreature);
	_impl->_setStub(this);
}

VehicleObject::VehicleObject() {
	_impl = new VehicleObjectImplementation();
	_impl->_setStub(this);
}

VehicleObject::VehicleObject(DummyConstructorParameter* param) {
	_impl = NULL;
}

VehicleObject::~VehicleObject() {
}

void VehicleObject::setLinkedCreature(Player* linkCreature) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(linkCreature);

		method.executeWithVoidReturn();
	} else
		((VehicleObjectImplementation*) _impl)->setLinkedCreature(linkCreature);
}

Player* VehicleObject::getLinkedCreature() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		return (Player*) method.executeWithObjectReturn();
	} else
		return ((VehicleObjectImplementation*) _impl)->getLinkedCreature();
}

void VehicleObject::setDatapadItem(SceneObject* item) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(item);

		method.executeWithVoidReturn();
	} else
		((VehicleObjectImplementation*) _impl)->setDatapadItem(item);
}

IntangibleObject* VehicleObject::getDatapadItem() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return (IntangibleObject*) method.executeWithObjectReturn();
	} else
		return ((VehicleObjectImplementation*) _impl)->getDatapadItem();
}

void VehicleObject::call() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		method.executeWithVoidReturn();
	} else
		((VehicleObjectImplementation*) _impl)->call();
}

void VehicleObject::store(bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		((VehicleObjectImplementation*) _impl)->store(doLock);
}

/*
 *	VehicleObjectAdapter
 */

VehicleObjectAdapter::VehicleObjectAdapter(VehicleObjectImplementation* obj) : DistributedObjectAdapter((DistributedObjectServant*) obj) {
}

Packet* VehicleObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		setLinkedCreature((Player*) inv->getObjectParameter());
		break;
	case 7:
		resp->insertLong(getLinkedCreature()->_getObjectID());
		break;
	case 8:
		setDatapadItem((SceneObject*) inv->getObjectParameter());
		break;
	case 9:
		resp->insertLong(getDatapadItem()->_getObjectID());
		break;
	case 10:
		call();
		break;
	case 11:
		store(inv->getBooleanParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void VehicleObjectAdapter::setLinkedCreature(Player* linkCreature) {
	return ((VehicleObjectImplementation*) impl)->setLinkedCreature(linkCreature);
}

Player* VehicleObjectAdapter::getLinkedCreature() {
	return ((VehicleObjectImplementation*) impl)->getLinkedCreature();
}

void VehicleObjectAdapter::setDatapadItem(SceneObject* item) {
	return ((VehicleObjectImplementation*) impl)->setDatapadItem(item);
}

IntangibleObject* VehicleObjectAdapter::getDatapadItem() {
	return ((VehicleObjectImplementation*) impl)->getDatapadItem();
}

void VehicleObjectAdapter::call() {
	return ((VehicleObjectImplementation*) impl)->call();
}

void VehicleObjectAdapter::store(bool doLock) {
	return ((VehicleObjectImplementation*) impl)->store(doLock);
}

/*
 *	VehicleObjectHelper
 */

VehicleObjectHelper* VehicleObjectHelper::staticInitializer = VehicleObjectHelper::instance();

VehicleObjectHelper::VehicleObjectHelper() {
	className = "VehicleObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void VehicleObjectHelper::finalizeHelper() {
	VehicleObjectHelper::finalize();
}

DistributedObject* VehicleObjectHelper::instantiateObject() {
	return new VehicleObject(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* VehicleObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new VehicleObjectAdapter((VehicleObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	VehicleObjectServant
 */

VehicleObjectServant::VehicleObjectServant() {
	_classHelper = VehicleObjectHelper::instance();
}

VehicleObjectServant::~VehicleObjectServant() {
}

void VehicleObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (VehicleObject*) stub;
}

DistributedObjectStub* VehicleObjectServant::_getStub() {
	return _this;
}

