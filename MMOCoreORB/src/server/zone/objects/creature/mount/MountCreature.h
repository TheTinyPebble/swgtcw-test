/*
 *	server/zone/objects/creature/mount/MountCreature.h generated by engine3 IDL compiler 0.55
 */

#ifndef MOUNTCREATURE_H_
#define MOUNTCREATURE_H_

#include "engine/orb/DistributedObjectBroker.h"

class Creature;

class CreatureObject;

class Player;

class IntangibleObject;

class SceneObject;

class VehicleObject;

#include "../../../packets/object/ObjectMenuResponse.h"

#include "../CreatureObject.h"

class MountCreature : public CreatureObject {
public:
	MountCreature(Player* linkCreature, const String& name, unsigned int itnocrc, unsigned int objCRC, unsigned long long oid);

	MountCreature(Player* linkCreature, unsigned long long oid, unsigned int tempcrc, const UnicodeString& n, const String& tempn);

	bool isDisabled();

	bool isJetpack();

	bool isMount();

	void call();

	void store(bool doLock = true);

	int useObject(Player* player);

	void parseItemAttributes();

	void sendRadialResponseTo(Player* player, ObjectMenuResponse* omr);

	void setLinkedCreature(Player* linkCreature);

	Player* getLinkedCreature();

	void setDatapadItem(SceneObject* item);

	IntangibleObject* getDatapadItem();

	bool isInWorld();

	void repair();

protected:
	MountCreature(DummyConstructorParameter* param);

	virtual ~MountCreature();

	friend class MountCreatureHelper;
};

class MountCreatureImplementation;

class MountCreatureAdapter : public CreatureObjectAdapter {
public:
	MountCreatureAdapter(MountCreatureImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	bool isDisabled();

	bool isJetpack();

	bool isMount();

	void call();

	void store(bool doLock);

	int useObject(Player* player);

	void parseItemAttributes();

	void sendRadialResponseTo(Player* player, ObjectMenuResponse* omr);

	void setLinkedCreature(Player* linkCreature);

	Player* getLinkedCreature();

	void setDatapadItem(SceneObject* item);

	IntangibleObject* getDatapadItem();

	bool isInWorld();

	void repair();

};

class MountCreatureHelper : public DistributedObjectClassHelper, public Singleton<MountCreatureHelper> {
	static MountCreatureHelper* staticInitializer;

public:
	MountCreatureHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<MountCreatureHelper>;
};

#include "../CreatureObjectImplementation.h"

class MountCreatureServant : public CreatureObjectImplementation {
public:
	MountCreature* _this;

public:
	MountCreatureServant(unsigned long long oid);
	virtual ~MountCreatureServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*MOUNTCREATURE_H_*/
