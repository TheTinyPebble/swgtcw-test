/*
 *	server/zone/objects/creature/mount/VehicleObject.h generated by engine3 IDL compiler 0.55
 */

#ifndef VEHICLEOBJECT_H_
#define VEHICLEOBJECT_H_

#include "engine/orb/DistributedObjectBroker.h"

class Creature;

class CreatureObject;

class Player;

class IntangibleObject;

class SceneObject;

class VehicleObject : public DistributedObjectStub {
public:
	VehicleObject(Player* linkCreature);

	VehicleObject();

	void setLinkedCreature(Player* linkCreature);

	Player* getLinkedCreature();

	void setDatapadItem(SceneObject* item);

	IntangibleObject* getDatapadItem();

	void call();

	void store(bool doLock = true);

protected:
	VehicleObject(DummyConstructorParameter* param);

	virtual ~VehicleObject();

	friend class VehicleObjectHelper;
};

class VehicleObjectImplementation;

class VehicleObjectAdapter : public DistributedObjectAdapter {
public:
	VehicleObjectAdapter(VehicleObjectImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void setLinkedCreature(Player* linkCreature);

	Player* getLinkedCreature();

	void setDatapadItem(SceneObject* item);

	IntangibleObject* getDatapadItem();

	void call();

	void store(bool doLock);

};

class VehicleObjectHelper : public DistributedObjectClassHelper, public Singleton<VehicleObjectHelper> {
	static VehicleObjectHelper* staticInitializer;

public:
	VehicleObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<VehicleObjectHelper>;
};

class VehicleObjectServant : public DistributedObjectServant {
public:
	VehicleObject* _this;

public:
	VehicleObjectServant();
	virtual ~VehicleObjectServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*VEHICLEOBJECT_H_*/
