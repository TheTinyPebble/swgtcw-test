/*
 *	server/zone/objects/creature/mount/MountCreature.cpp generated by engine3 IDL compiler 0.55
 */

#include "MountCreature.h"

#include "MountCreatureImplementation.h"

#include "../Creature.h"

#include "../CreatureObject.h"

#include "../../player/Player.h"

#include "../../intangible/IntangibleObject.h"

#include "../../scene/SceneObject.h"

#include "VehicleObject.h"

/*
 *	MountCreatureStub
 */

MountCreature::MountCreature(Player* linkCreature, const String& name, unsigned int itnocrc, unsigned int objCRC, unsigned long long oid) : CreatureObject(DummyConstructorParameter::instance()) {
	_impl = new MountCreatureImplementation(linkCreature, name, itnocrc, objCRC, oid);
	_impl->_setStub(this);
}

MountCreature::MountCreature(Player* linkCreature, unsigned long long oid, unsigned int tempcrc, const UnicodeString& n, const String& tempn) : CreatureObject(DummyConstructorParameter::instance()) {
	_impl = new MountCreatureImplementation(linkCreature, oid, tempcrc, n, tempn);
	_impl->_setStub(this);
}

MountCreature::MountCreature(DummyConstructorParameter* param) : CreatureObject(param) {
}

MountCreature::~MountCreature() {
}

bool MountCreature::isDisabled() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		return method.executeWithBooleanReturn();
	} else
		return ((MountCreatureImplementation*) _impl)->isDisabled();
}

bool MountCreature::isJetpack() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		return method.executeWithBooleanReturn();
	} else
		return ((MountCreatureImplementation*) _impl)->isJetpack();
}

bool MountCreature::isMount() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		return method.executeWithBooleanReturn();
	} else
		return ((MountCreatureImplementation*) _impl)->isMount();
}

void MountCreature::call() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		method.executeWithVoidReturn();
	} else
		((MountCreatureImplementation*) _impl)->call();
}

void MountCreature::store(bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		((MountCreatureImplementation*) _impl)->store(doLock);
}

int MountCreature::useObject(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return ((MountCreatureImplementation*) _impl)->useObject(player);
}

void MountCreature::parseItemAttributes() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		method.executeWithVoidReturn();
	} else
		((MountCreatureImplementation*) _impl)->parseItemAttributes();
}

void MountCreature::sendRadialResponseTo(Player* player, ObjectMenuResponse* omr) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addObjectParameter(player);
		method.addObjectParameter(omr);

		method.executeWithVoidReturn();
	} else
		((MountCreatureImplementation*) _impl)->sendRadialResponseTo(player, omr);
}

void MountCreature::setLinkedCreature(Player* linkCreature) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addObjectParameter(linkCreature);

		method.executeWithVoidReturn();
	} else
		((MountCreatureImplementation*) _impl)->setLinkedCreature(linkCreature);
}

Player* MountCreature::getLinkedCreature() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		return (Player*) method.executeWithObjectReturn();
	} else
		return ((MountCreatureImplementation*) _impl)->getLinkedCreature();
}

void MountCreature::setDatapadItem(SceneObject* item) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addObjectParameter(item);

		method.executeWithVoidReturn();
	} else
		((MountCreatureImplementation*) _impl)->setDatapadItem(item);
}

IntangibleObject* MountCreature::getDatapadItem() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);

		return (IntangibleObject*) method.executeWithObjectReturn();
	} else
		return ((MountCreatureImplementation*) _impl)->getDatapadItem();
}

bool MountCreature::isInWorld() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		return method.executeWithBooleanReturn();
	} else
		return ((MountCreatureImplementation*) _impl)->isInWorld();
}

void MountCreature::repair() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);

		method.executeWithVoidReturn();
	} else
		((MountCreatureImplementation*) _impl)->repair();
}

/*
 *	MountCreatureAdapter
 */

MountCreatureAdapter::MountCreatureAdapter(MountCreatureImplementation* obj) : CreatureObjectAdapter(obj) {
}

Packet* MountCreatureAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertBoolean(isDisabled());
		break;
	case 7:
		resp->insertBoolean(isJetpack());
		break;
	case 8:
		resp->insertBoolean(isMount());
		break;
	case 9:
		call();
		break;
	case 10:
		store(inv->getBooleanParameter());
		break;
	case 11:
		resp->insertSignedInt(useObject((Player*) inv->getObjectParameter()));
		break;
	case 12:
		parseItemAttributes();
		break;
	case 13:
		sendRadialResponseTo((Player*) inv->getObjectParameter(), (ObjectMenuResponse*) inv->getObjectParameter());
		break;
	case 14:
		setLinkedCreature((Player*) inv->getObjectParameter());
		break;
	case 15:
		resp->insertLong(getLinkedCreature()->_getObjectID());
		break;
	case 16:
		setDatapadItem((SceneObject*) inv->getObjectParameter());
		break;
	case 17:
		resp->insertLong(getDatapadItem()->_getObjectID());
		break;
	case 18:
		resp->insertBoolean(isInWorld());
		break;
	case 19:
		repair();
		break;
	default:
		return NULL;
	}

	return resp;
}

bool MountCreatureAdapter::isDisabled() {
	return ((MountCreatureImplementation*) impl)->isDisabled();
}

bool MountCreatureAdapter::isJetpack() {
	return ((MountCreatureImplementation*) impl)->isJetpack();
}

bool MountCreatureAdapter::isMount() {
	return ((MountCreatureImplementation*) impl)->isMount();
}

void MountCreatureAdapter::call() {
	return ((MountCreatureImplementation*) impl)->call();
}

void MountCreatureAdapter::store(bool doLock) {
	return ((MountCreatureImplementation*) impl)->store(doLock);
}

int MountCreatureAdapter::useObject(Player* player) {
	return ((MountCreatureImplementation*) impl)->useObject(player);
}

void MountCreatureAdapter::parseItemAttributes() {
	return ((MountCreatureImplementation*) impl)->parseItemAttributes();
}

void MountCreatureAdapter::sendRadialResponseTo(Player* player, ObjectMenuResponse* omr) {
	return ((MountCreatureImplementation*) impl)->sendRadialResponseTo(player, omr);
}

void MountCreatureAdapter::setLinkedCreature(Player* linkCreature) {
	return ((MountCreatureImplementation*) impl)->setLinkedCreature(linkCreature);
}

Player* MountCreatureAdapter::getLinkedCreature() {
	return ((MountCreatureImplementation*) impl)->getLinkedCreature();
}

void MountCreatureAdapter::setDatapadItem(SceneObject* item) {
	return ((MountCreatureImplementation*) impl)->setDatapadItem(item);
}

IntangibleObject* MountCreatureAdapter::getDatapadItem() {
	return ((MountCreatureImplementation*) impl)->getDatapadItem();
}

bool MountCreatureAdapter::isInWorld() {
	return ((MountCreatureImplementation*) impl)->isInWorld();
}

void MountCreatureAdapter::repair() {
	return ((MountCreatureImplementation*) impl)->repair();
}

/*
 *	MountCreatureHelper
 */

MountCreatureHelper* MountCreatureHelper::staticInitializer = MountCreatureHelper::instance();

MountCreatureHelper::MountCreatureHelper() {
	className = "MountCreature";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void MountCreatureHelper::finalizeHelper() {
	MountCreatureHelper::finalize();
}

DistributedObject* MountCreatureHelper::instantiateObject() {
	return new MountCreature(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* MountCreatureHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new MountCreatureAdapter((MountCreatureImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	MountCreatureServant
 */

MountCreatureServant::MountCreatureServant(unsigned long long oid) : CreatureObjectImplementation(oid) {
	_classHelper = MountCreatureHelper::instance();
}

MountCreatureServant::~MountCreatureServant() {
}

void MountCreatureServant::_setStub(DistributedObjectStub* stub) {
	_this = (MountCreature*) stub;
	CreatureObjectServant::_setStub(stub);
}

DistributedObjectStub* MountCreatureServant::_getStub() {
	return _this;
}

