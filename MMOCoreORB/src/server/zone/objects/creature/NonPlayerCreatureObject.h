/*
 *	server/zone/objects/creature/NonPlayerCreatureObject.h generated by engine3 IDL compiler 0.60
 */

#ifndef NONPLAYERCREATUREOBJECT_H_
#define NONPLAYERCREATUREOBJECT_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {

class Zone;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {
namespace objects {
namespace creature {
namespace events {

class CreatureThinkEvent;

} // namespace events
} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature::events;

namespace server {
namespace zone {
namespace objects {
namespace creature {
namespace events {

class CreatureMoveEvent;

} // namespace events
} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature::events;

namespace server {
namespace zone {
namespace packets {
namespace scene {

class AttributeListMessage;

} // namespace scene
} // namespace packets
} // namespace zone
} // namespace server

using namespace server::zone::packets::scene;

namespace server {
namespace zone {
namespace objects {
namespace player {

class PlayerCreature;

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

#include "server/zone/templates/tangible/NonPlayerCreatureObjectTemplate.h"

#include "server/zone/objects/creature/PatrolPointsVector.h"

#include "server/zone/objects/creature/PatrolPoint.h"

#include "engine/core/ManagedObject.h"

#include "engine/lua/LuaObject.h"

#include "system/util/Vector.h"

#include "system/lang/Time.h"

#include "system/util/SortedVector.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "system/lang/ref/Reference.h"

namespace server {
namespace zone {
namespace objects {
namespace creature {

class NonPlayerCreatureObject : public CreatureObject {
public:
	NonPlayerCreatureObject();

	void initializeTransientMembers();

	void activateRecovery();

	void activateMovementEvent();

	void doRecovery();

	void doMovement();

	void fillAttributeList(AttributeListMessage* msg, PlayerCreature* object);

	void setNextPosition(float x, float z, float y, SceneObject* cell = NULL);

	void updateCurrentPosition(PatrolPoint* point);

	void broadcastNextPositionUpdate(PatrolPoint* point);

	void clearPatrolPoints();

	void loadTemplateData(SharedObjectTemplate* templateData);

	int inflictDamage(TangibleObject* attacker, int damageType, int damage, bool destroy, bool notifyClient = true);

	int notifyObjectDestructionObservers(TangibleObject* attacker, int condition);

	void activatePostureRecovery();

	bool isAttackableBy(CreatureObject* object);

	bool isNonPlayerCreature();

	void setFollowObject(SceneObject* obj);

	float getKinetic();

	float getEnergy();

	float getElectricity();

	float getStun();

	float getBlast();

	float getHeat();

	float getCold();

	float getAcid();

	float getLightSaber();

	bool isStalker();

	bool isBaby();

	bool isKiller();

	float getTame();

	String getMeatType();

	String getBoneType();

	String getHideType();

	float getMilk();

	float getHideMax();

	float getBoneMax();

	float getMeatMax();

	unsigned int getFerocity();

	unsigned int getArmor();

	PatrolPoint* getHomeLocation();

	bool hasOrganics();

protected:
	NonPlayerCreatureObject(DummyConstructorParameter* param);

	virtual ~NonPlayerCreatureObject();

	String _return_getBoneType;
	String _return_getHideType;
	String _return_getMeatType;

	friend class NonPlayerCreatureObjectHelper;
};

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class NonPlayerCreatureObjectImplementation : public CreatureObjectImplementation {
protected:
	Reference<CreatureThinkEvent*> thinkEvent;

	Reference<CreatureMoveEvent*> moveEvent;

	Vector<String> skillCommands;

	PatrolPointsVector patrolPoints;

	PatrolPoint homeLocation;

	PatrolPoint nextStepPosition;

	NonPlayerCreatureObjectTemplate* npcTemplate;

	bool baby;

	float currentSpeed;

	ManagedReference<SceneObject* > followObject;

public:
	NonPlayerCreatureObjectImplementation();

	NonPlayerCreatureObjectImplementation(DummyConstructorParameter* param);

	void initializeTransientMembers();

	virtual void activateRecovery();

	virtual void activateMovementEvent();

	void doRecovery();

	void doMovement();

	void fillAttributeList(AttributeListMessage* msg, PlayerCreature* object);

	void setNextPosition(float x, float z, float y, SceneObject* cell = NULL);

	void updateCurrentPosition(PatrolPoint* point);

	void broadcastNextPositionUpdate(PatrolPoint* point);

	void clearPatrolPoints();

	void loadTemplateData(SharedObjectTemplate* templateData);

	int inflictDamage(TangibleObject* attacker, int damageType, int damage, bool destroy, bool notifyClient = true);

	int notifyObjectDestructionObservers(TangibleObject* attacker, int condition);

	void activatePostureRecovery();

	bool isAttackableBy(CreatureObject* object);

	bool isNonPlayerCreature();

	void setFollowObject(SceneObject* obj);

	float getKinetic();

	float getEnergy();

	float getElectricity();

	float getStun();

	float getBlast();

	float getHeat();

	float getCold();

	float getAcid();

	float getLightSaber();

	bool isStalker();

	bool isBaby();

	bool isKiller();

	float getTame();

	String getMeatType();

	String getBoneType();

	String getHideType();

	float getMilk();

	float getHideMax();

	float getBoneMax();

	float getMeatMax();

	unsigned int getFerocity();

	unsigned int getArmor();

	PatrolPoint* getHomeLocation();

	bool hasOrganics();

	NonPlayerCreatureObject* _this;

	operator const NonPlayerCreatureObject*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~NonPlayerCreatureObjectImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();

	friend class NonPlayerCreatureObject;
};

class NonPlayerCreatureObjectAdapter : public CreatureObjectAdapter {
public:
	NonPlayerCreatureObjectAdapter(NonPlayerCreatureObjectImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initializeTransientMembers();

	void activateRecovery();

	void activateMovementEvent();

	void doRecovery();

	void doMovement();

	void fillAttributeList(AttributeListMessage* msg, PlayerCreature* object);

	void setNextPosition(float x, float z, float y, SceneObject* cell);

	void clearPatrolPoints();

	int inflictDamage(TangibleObject* attacker, int damageType, int damage, bool destroy, bool notifyClient);

	int notifyObjectDestructionObservers(TangibleObject* attacker, int condition);

	void activatePostureRecovery();

	bool isAttackableBy(CreatureObject* object);

	bool isNonPlayerCreature();

	void setFollowObject(SceneObject* obj);

	float getKinetic();

	float getEnergy();

	float getElectricity();

	float getStun();

	float getBlast();

	float getHeat();

	float getCold();

	float getAcid();

	float getLightSaber();

	bool isStalker();

	bool isBaby();

	bool isKiller();

	float getTame();

	String getMeatType();

	String getBoneType();

	String getHideType();

	float getMilk();

	float getHideMax();

	float getBoneMax();

	float getMeatMax();

	unsigned int getFerocity();

	unsigned int getArmor();

	bool hasOrganics();

};

class NonPlayerCreatureObjectHelper : public DistributedObjectClassHelper, public Singleton<NonPlayerCreatureObjectHelper> {
	static NonPlayerCreatureObjectHelper* staticInitializer;

public:
	NonPlayerCreatureObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<NonPlayerCreatureObjectHelper>;
};

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

#endif /*NONPLAYERCREATUREOBJECT_H_*/
