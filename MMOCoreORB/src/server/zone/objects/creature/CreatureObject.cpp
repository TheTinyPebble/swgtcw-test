/*
 *	server/zone/objects/creature/CreatureObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "CreatureObject.h"

/*
 *	CreatureObjectStub
 */

CreatureObject::CreatureObject(LuaObject* templateData) : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new CreatureObjectImplementation(templateData);
	_impl->_setStub(this);

	((CreatureObjectImplementation*) _impl)->_serializationHelperMethod();
}

CreatureObject::CreatureObject(DummyConstructorParameter* param) : TangibleObject(param) {
}

CreatureObject::~CreatureObject() {
}

void CreatureObject::sendBaselinesTo(SceneObject* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->sendBaselinesTo(player);
}

int CreatureObject::getBankCredits() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBankCredits();
}

int CreatureObject::getCashCredits() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getCashCredits();
}

int CreatureObject::getBaseHealth(int idx) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addSignedIntParameter(idx);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBaseHealth(idx);
}

unsigned int CreatureObject::getBaseHealthUpdateCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBaseHealthUpdateCounter();
}

int CreatureObject::getWounds(int idx) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addSignedIntParameter(idx);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getWounds(idx);
}

unsigned int CreatureObject::getWoundsUpdateCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getWoundsUpdateCounter();
}

unsigned int CreatureObject::getEncumbrancesUpdateCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getEncumbrancesUpdateCounter();
}

unsigned int CreatureObject::getHamListUpdateCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getHamListUpdateCounter();
}

int CreatureObject::getHAM(int idx) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addSignedIntParameter(idx);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getHAM(idx);
}

unsigned int CreatureObject::getMaxHamListUpdateCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getMaxHamListUpdateCounter();
}

int CreatureObject::getMaxHAM(int idx) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addSignedIntParameter(idx);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getMaxHAM(idx);
}

int CreatureObject::getEncumbrance(int idx) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addSignedIntParameter(idx);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getEncumbrance(idx);
}

byte CreatureObject::getPosture() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);

		return method.executeWithByteReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getPosture();
}

byte CreatureObject::getFactionRank() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);

		return method.executeWithByteReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getFactionRank();
}

unsigned long long CreatureObject::getCreatureLinkID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getCreatureLinkID();
}

float CreatureObject::getShockWounds() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);

		return method.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getShockWounds();
}

unsigned long long CreatureObject::getStateBitmask() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getStateBitmask();
}

unsigned long long CreatureObject::getListenID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getListenID();
}

float CreatureObject::getSpeed() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);

		return method.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getSpeed();
}

float CreatureObject::getTerrainNegotiation() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);

		return method.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getTerrainNegotiation();
}

float CreatureObject::getAcceleration() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);

		return method.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getAcceleration();
}

int CreatureObject::getLevel() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getLevel();
}

String CreatureObject::getPerformanceAnimation() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);

		method.executeWithAsciiReturn(_return_getPerformanceAnimation);
		return _return_getPerformanceAnimation;
	} else
		return ((CreatureObjectImplementation*) _impl)->getPerformanceAnimation();
}

String CreatureObject::getMoodString() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);

		method.executeWithAsciiReturn(_return_getMoodString);
		return _return_getMoodString;
	} else
		return ((CreatureObjectImplementation*) _impl)->getMoodString();
}

unsigned long long CreatureObject::getWeaponID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getWeaponID();
}

unsigned long long CreatureObject::getGroupID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getGroupID();
}

unsigned long long CreatureObject::getGroupInviterID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getGroupInviterID();
}

unsigned long long CreatureObject::getGroupInviteCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getGroupInviteCounter();
}

int CreatureObject::getGuildID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getGuildID();
}

unsigned long long CreatureObject::getTargetID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 36);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getTargetID();
}

byte CreatureObject::getMoodID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 37);

		return method.executeWithByteReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getMoodID();
}

int CreatureObject::getPerformanceCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 38);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getPerformanceCounter();
}

int CreatureObject::getInstrumentID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 39);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getInstrumentID();
}

byte CreatureObject::getFrozen() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 40);

		return method.executeWithByteReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getFrozen();
}

float CreatureObject::getHeight() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 41);

		return method.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getHeight();
}

unsigned int CreatureObject::getMovementCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 42);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getMovementCounter();
}

void CreatureObject::setHeight(float heigh) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 43);
		method.addFloatParameter(heigh);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setHeight(heigh);
}

/*
 *	CreatureObjectImplementation
 */

CreatureObjectImplementation::~CreatureObjectImplementation() {
}

void CreatureObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (CreatureObject*) stub;
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* CreatureObjectImplementation::_getStub() {
	return _this;
}

CreatureObjectImplementation::operator const CreatureObject*() {
	return _this;
}

void CreatureObjectImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	addSerializableVariable("bankCredits", &bankCredits);
	addSerializableVariable("cashCredits", &cashCredits);
	addSerializableVariable("gender", &gender);
	addSerializableVariable("species", &species);
	addSerializableVariable("baseHealthUpdateCounter", &baseHealthUpdateCounter);
	addSerializableVariable("posture", &posture);
	addSerializableVariable("factionRank", &factionRank);
	addSerializableVariable("creatureLinkID", &creatureLinkID);
	addSerializableVariable("shockWounds", &shockWounds);
	addSerializableVariable("woundsUpdateCounter", &woundsUpdateCounter);
	addSerializableVariable("stateBitmask", &stateBitmask);
	addSerializableVariable("movementCounter", &movementCounter);
	addSerializableVariable("encumbrancesUpdateCounter", &encumbrancesUpdateCounter);
	addSerializableVariable("speed", &speed);
	addSerializableVariable("terrainNegotiation", &terrainNegotiation);
	addSerializableVariable("acceleration", &acceleration);
	addSerializableVariable("height", &height);
	addSerializableVariable("listenToID", &listenToID);
	addSerializableVariable("level", &level);
	addSerializableVariable("performanceAnimation", &performanceAnimation);
	addSerializableVariable("moodString", &moodString);
	addSerializableVariable("weaponID", &weaponID);
	addSerializableVariable("groupID", &groupID);
	addSerializableVariable("groupInviterID", &groupInviterID);
	addSerializableVariable("groupInviteCounter", &groupInviteCounter);
	addSerializableVariable("guildID", &guildID);
	addSerializableVariable("targetID", &targetID);
	addSerializableVariable("moodID", &moodID);
	addSerializableVariable("performanceCounter", &performanceCounter);
	addSerializableVariable("instrumentID", &instrumentID);
	addSerializableVariable("hamListUpdateCounter", &hamListUpdateCounter);
	addSerializableVariable("maxHamListUpdateCounter", &maxHamListUpdateCounter);
	addSerializableVariable("frozen", &frozen);
	addSerializableVariable("templateString", &templateString);
}

int CreatureObjectImplementation::getBankCredits() {
	// server/zone/objects/creature/CreatureObject.idl(123):  return bankCredits;
	return bankCredits;
}

int CreatureObjectImplementation::getCashCredits() {
	// server/zone/objects/creature/CreatureObject.idl(127):  return cashCredits;
	return cashCredits;
}

int CreatureObjectImplementation::getBaseHealth(int idx) {
	// server/zone/objects/creature/CreatureObject.idl(135):  return baseHealth.get(idx);
	return baseHealth->get(idx);
}

unsigned int CreatureObjectImplementation::getBaseHealthUpdateCounter() {
	// server/zone/objects/creature/CreatureObject.idl(139):  return baseHealthUpdateCounter;
	return baseHealthUpdateCounter;
}

int CreatureObjectImplementation::getWounds(int idx) {
	// server/zone/objects/creature/CreatureObject.idl(143):  return wounds.get(idx);
	return wounds->get(idx);
}

unsigned int CreatureObjectImplementation::getWoundsUpdateCounter() {
	// server/zone/objects/creature/CreatureObject.idl(147):  return woundsUpdateCounter;
	return woundsUpdateCounter;
}

unsigned int CreatureObjectImplementation::getEncumbrancesUpdateCounter() {
	// server/zone/objects/creature/CreatureObject.idl(151):  return encumbrancesUpdateCounter;
	return encumbrancesUpdateCounter;
}

unsigned int CreatureObjectImplementation::getHamListUpdateCounter() {
	// server/zone/objects/creature/CreatureObject.idl(155):  return hamListUpdateCounter;
	return hamListUpdateCounter;
}

int CreatureObjectImplementation::getHAM(int idx) {
	// server/zone/objects/creature/CreatureObject.idl(159):  return hamList.get(idx);
	return hamList->get(idx);
}

unsigned int CreatureObjectImplementation::getMaxHamListUpdateCounter() {
	// server/zone/objects/creature/CreatureObject.idl(163):  return maxHamListUpdateCounter;
	return maxHamListUpdateCounter;
}

int CreatureObjectImplementation::getMaxHAM(int idx) {
	// server/zone/objects/creature/CreatureObject.idl(167):  return maxHamList.get(idx);
	return maxHamList->get(idx);
}

int CreatureObjectImplementation::getEncumbrance(int idx) {
	// server/zone/objects/creature/CreatureObject.idl(171):  return encumbrances.get(idx);
	return encumbrances->get(idx);
}

byte CreatureObjectImplementation::getPosture() {
	// server/zone/objects/creature/CreatureObject.idl(175):  return posture;
	return posture;
}

byte CreatureObjectImplementation::getFactionRank() {
	// server/zone/objects/creature/CreatureObject.idl(179):  return factionRank;
	return factionRank;
}

unsigned long long CreatureObjectImplementation::getCreatureLinkID() {
	// server/zone/objects/creature/CreatureObject.idl(183):  return creatureLinkID;
	return creatureLinkID;
}

float CreatureObjectImplementation::getShockWounds() {
	// server/zone/objects/creature/CreatureObject.idl(187):  return shockWounds;
	return shockWounds;
}

unsigned long long CreatureObjectImplementation::getStateBitmask() {
	// server/zone/objects/creature/CreatureObject.idl(191):  return stateBitmask;
	return stateBitmask;
}

unsigned long long CreatureObjectImplementation::getListenID() {
	// server/zone/objects/creature/CreatureObject.idl(195):  return listenToID;
	return listenToID;
}

float CreatureObjectImplementation::getSpeed() {
	// server/zone/objects/creature/CreatureObject.idl(199):  return speed;
	return speed;
}

float CreatureObjectImplementation::getTerrainNegotiation() {
	// server/zone/objects/creature/CreatureObject.idl(203):  return terrainNegotiation;
	return terrainNegotiation;
}

float CreatureObjectImplementation::getAcceleration() {
	// server/zone/objects/creature/CreatureObject.idl(207):  return acceleration;
	return acceleration;
}

int CreatureObjectImplementation::getLevel() {
	// server/zone/objects/creature/CreatureObject.idl(211):  return level;
	return level;
}

String CreatureObjectImplementation::getPerformanceAnimation() {
	// server/zone/objects/creature/CreatureObject.idl(215):  return performanceAnimation;
	return performanceAnimation;
}

String CreatureObjectImplementation::getMoodString() {
	// server/zone/objects/creature/CreatureObject.idl(219):  return moodString;
	return moodString;
}

unsigned long long CreatureObjectImplementation::getWeaponID() {
	// server/zone/objects/creature/CreatureObject.idl(223):  return weaponID;
	return weaponID;
}

unsigned long long CreatureObjectImplementation::getGroupID() {
	// server/zone/objects/creature/CreatureObject.idl(227):  return groupID;
	return groupID;
}

unsigned long long CreatureObjectImplementation::getGroupInviterID() {
	// server/zone/objects/creature/CreatureObject.idl(231):  return groupInviterID;
	return groupInviterID;
}

unsigned long long CreatureObjectImplementation::getGroupInviteCounter() {
	// server/zone/objects/creature/CreatureObject.idl(235):  return groupInviteCounter;
	return groupInviteCounter;
}

int CreatureObjectImplementation::getGuildID() {
	// server/zone/objects/creature/CreatureObject.idl(239):  return guildID;
	return guildID;
}

unsigned long long CreatureObjectImplementation::getTargetID() {
	// server/zone/objects/creature/CreatureObject.idl(243):  return targetID;
	return targetID;
}

byte CreatureObjectImplementation::getMoodID() {
	// server/zone/objects/creature/CreatureObject.idl(247):  return moodID;
	return moodID;
}

int CreatureObjectImplementation::getPerformanceCounter() {
	// server/zone/objects/creature/CreatureObject.idl(251):  return performanceCounter;
	return performanceCounter;
}

int CreatureObjectImplementation::getInstrumentID() {
	// server/zone/objects/creature/CreatureObject.idl(255):  return instrumentID;
	return instrumentID;
}

byte CreatureObjectImplementation::getFrozen() {
	// server/zone/objects/creature/CreatureObject.idl(259):  return frozen;
	return frozen;
}

float CreatureObjectImplementation::getHeight() {
	// server/zone/objects/creature/CreatureObject.idl(263):  return height;
	return height;
}

unsigned int CreatureObjectImplementation::getMovementCounter() {
	// server/zone/objects/creature/CreatureObject.idl(267):  return movementCounter;
	return movementCounter;
}

void CreatureObjectImplementation::setHeight(float heigh) {
	// server/zone/objects/creature/CreatureObject.idl(271):  height = heigh;
	height = heigh;
}

/*
 *	CreatureObjectAdapter
 */

CreatureObjectAdapter::CreatureObjectAdapter(CreatureObjectImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* CreatureObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		sendBaselinesTo((SceneObject*) inv->getObjectParameter());
		break;
	case 7:
		resp->insertSignedInt(getBankCredits());
		break;
	case 8:
		resp->insertSignedInt(getCashCredits());
		break;
	case 9:
		resp->insertSignedInt(getBaseHealth(inv->getSignedIntParameter()));
		break;
	case 10:
		resp->insertInt(getBaseHealthUpdateCounter());
		break;
	case 11:
		resp->insertSignedInt(getWounds(inv->getSignedIntParameter()));
		break;
	case 12:
		resp->insertInt(getWoundsUpdateCounter());
		break;
	case 13:
		resp->insertInt(getEncumbrancesUpdateCounter());
		break;
	case 14:
		resp->insertInt(getHamListUpdateCounter());
		break;
	case 15:
		resp->insertSignedInt(getHAM(inv->getSignedIntParameter()));
		break;
	case 16:
		resp->insertInt(getMaxHamListUpdateCounter());
		break;
	case 17:
		resp->insertSignedInt(getMaxHAM(inv->getSignedIntParameter()));
		break;
	case 18:
		resp->insertSignedInt(getEncumbrance(inv->getSignedIntParameter()));
		break;
	case 19:
		resp->insertByte(getPosture());
		break;
	case 20:
		resp->insertByte(getFactionRank());
		break;
	case 21:
		resp->insertLong(getCreatureLinkID());
		break;
	case 22:
		resp->insertFloat(getShockWounds());
		break;
	case 23:
		resp->insertLong(getStateBitmask());
		break;
	case 24:
		resp->insertLong(getListenID());
		break;
	case 25:
		resp->insertFloat(getSpeed());
		break;
	case 26:
		resp->insertFloat(getTerrainNegotiation());
		break;
	case 27:
		resp->insertFloat(getAcceleration());
		break;
	case 28:
		resp->insertSignedInt(getLevel());
		break;
	case 29:
		resp->insertAscii(getPerformanceAnimation());
		break;
	case 30:
		resp->insertAscii(getMoodString());
		break;
	case 31:
		resp->insertLong(getWeaponID());
		break;
	case 32:
		resp->insertLong(getGroupID());
		break;
	case 33:
		resp->insertLong(getGroupInviterID());
		break;
	case 34:
		resp->insertLong(getGroupInviteCounter());
		break;
	case 35:
		resp->insertSignedInt(getGuildID());
		break;
	case 36:
		resp->insertLong(getTargetID());
		break;
	case 37:
		resp->insertByte(getMoodID());
		break;
	case 38:
		resp->insertSignedInt(getPerformanceCounter());
		break;
	case 39:
		resp->insertSignedInt(getInstrumentID());
		break;
	case 40:
		resp->insertByte(getFrozen());
		break;
	case 41:
		resp->insertFloat(getHeight());
		break;
	case 42:
		resp->insertInt(getMovementCounter());
		break;
	case 43:
		setHeight(inv->getFloatParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void CreatureObjectAdapter::sendBaselinesTo(SceneObject* player) {
	return ((CreatureObjectImplementation*) impl)->sendBaselinesTo(player);
}

int CreatureObjectAdapter::getBankCredits() {
	return ((CreatureObjectImplementation*) impl)->getBankCredits();
}

int CreatureObjectAdapter::getCashCredits() {
	return ((CreatureObjectImplementation*) impl)->getCashCredits();
}

int CreatureObjectAdapter::getBaseHealth(int idx) {
	return ((CreatureObjectImplementation*) impl)->getBaseHealth(idx);
}

unsigned int CreatureObjectAdapter::getBaseHealthUpdateCounter() {
	return ((CreatureObjectImplementation*) impl)->getBaseHealthUpdateCounter();
}

int CreatureObjectAdapter::getWounds(int idx) {
	return ((CreatureObjectImplementation*) impl)->getWounds(idx);
}

unsigned int CreatureObjectAdapter::getWoundsUpdateCounter() {
	return ((CreatureObjectImplementation*) impl)->getWoundsUpdateCounter();
}

unsigned int CreatureObjectAdapter::getEncumbrancesUpdateCounter() {
	return ((CreatureObjectImplementation*) impl)->getEncumbrancesUpdateCounter();
}

unsigned int CreatureObjectAdapter::getHamListUpdateCounter() {
	return ((CreatureObjectImplementation*) impl)->getHamListUpdateCounter();
}

int CreatureObjectAdapter::getHAM(int idx) {
	return ((CreatureObjectImplementation*) impl)->getHAM(idx);
}

unsigned int CreatureObjectAdapter::getMaxHamListUpdateCounter() {
	return ((CreatureObjectImplementation*) impl)->getMaxHamListUpdateCounter();
}

int CreatureObjectAdapter::getMaxHAM(int idx) {
	return ((CreatureObjectImplementation*) impl)->getMaxHAM(idx);
}

int CreatureObjectAdapter::getEncumbrance(int idx) {
	return ((CreatureObjectImplementation*) impl)->getEncumbrance(idx);
}

byte CreatureObjectAdapter::getPosture() {
	return ((CreatureObjectImplementation*) impl)->getPosture();
}

byte CreatureObjectAdapter::getFactionRank() {
	return ((CreatureObjectImplementation*) impl)->getFactionRank();
}

unsigned long long CreatureObjectAdapter::getCreatureLinkID() {
	return ((CreatureObjectImplementation*) impl)->getCreatureLinkID();
}

float CreatureObjectAdapter::getShockWounds() {
	return ((CreatureObjectImplementation*) impl)->getShockWounds();
}

unsigned long long CreatureObjectAdapter::getStateBitmask() {
	return ((CreatureObjectImplementation*) impl)->getStateBitmask();
}

unsigned long long CreatureObjectAdapter::getListenID() {
	return ((CreatureObjectImplementation*) impl)->getListenID();
}

float CreatureObjectAdapter::getSpeed() {
	return ((CreatureObjectImplementation*) impl)->getSpeed();
}

float CreatureObjectAdapter::getTerrainNegotiation() {
	return ((CreatureObjectImplementation*) impl)->getTerrainNegotiation();
}

float CreatureObjectAdapter::getAcceleration() {
	return ((CreatureObjectImplementation*) impl)->getAcceleration();
}

int CreatureObjectAdapter::getLevel() {
	return ((CreatureObjectImplementation*) impl)->getLevel();
}

String CreatureObjectAdapter::getPerformanceAnimation() {
	return ((CreatureObjectImplementation*) impl)->getPerformanceAnimation();
}

String CreatureObjectAdapter::getMoodString() {
	return ((CreatureObjectImplementation*) impl)->getMoodString();
}

unsigned long long CreatureObjectAdapter::getWeaponID() {
	return ((CreatureObjectImplementation*) impl)->getWeaponID();
}

unsigned long long CreatureObjectAdapter::getGroupID() {
	return ((CreatureObjectImplementation*) impl)->getGroupID();
}

unsigned long long CreatureObjectAdapter::getGroupInviterID() {
	return ((CreatureObjectImplementation*) impl)->getGroupInviterID();
}

unsigned long long CreatureObjectAdapter::getGroupInviteCounter() {
	return ((CreatureObjectImplementation*) impl)->getGroupInviteCounter();
}

int CreatureObjectAdapter::getGuildID() {
	return ((CreatureObjectImplementation*) impl)->getGuildID();
}

unsigned long long CreatureObjectAdapter::getTargetID() {
	return ((CreatureObjectImplementation*) impl)->getTargetID();
}

byte CreatureObjectAdapter::getMoodID() {
	return ((CreatureObjectImplementation*) impl)->getMoodID();
}

int CreatureObjectAdapter::getPerformanceCounter() {
	return ((CreatureObjectImplementation*) impl)->getPerformanceCounter();
}

int CreatureObjectAdapter::getInstrumentID() {
	return ((CreatureObjectImplementation*) impl)->getInstrumentID();
}

byte CreatureObjectAdapter::getFrozen() {
	return ((CreatureObjectImplementation*) impl)->getFrozen();
}

float CreatureObjectAdapter::getHeight() {
	return ((CreatureObjectImplementation*) impl)->getHeight();
}

unsigned int CreatureObjectAdapter::getMovementCounter() {
	return ((CreatureObjectImplementation*) impl)->getMovementCounter();
}

void CreatureObjectAdapter::setHeight(float heigh) {
	return ((CreatureObjectImplementation*) impl)->setHeight(heigh);
}

/*
 *	CreatureObjectHelper
 */

CreatureObjectHelper* CreatureObjectHelper::staticInitializer = CreatureObjectHelper::instance();

CreatureObjectHelper::CreatureObjectHelper() {
	className = "CreatureObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void CreatureObjectHelper::finalizeHelper() {
	CreatureObjectHelper::finalize();
}

DistributedObject* CreatureObjectHelper::instantiateObject() {
	return new CreatureObject(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* CreatureObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new CreatureObjectAdapter((CreatureObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

