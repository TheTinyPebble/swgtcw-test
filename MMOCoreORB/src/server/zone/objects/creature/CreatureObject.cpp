/*
 *	server/zone/objects/creature/CreatureObject.cpp generated by engine3 IDL compiler 0.55
 */

#include "CreatureObject.h"

#include "CreatureObjectImplementation.h"

#include "../scene/SceneObject.h"

#include "../tangible/Inventory.h"

#include "../tangible/inventory/BankInventory.h"

#include "../tangible/Container.h"

#include "../tangible/TangibleObject.h"

#include "../tangible/weapons/Weapon.h"

#include "../tangible/wearables/Armor.h"

#include "../group/GroupObject.h"

#include "../player/Player.h"

#include "../structure/building/BuildingObject.h"

#include "../creature/Creature.h"

#include "../guild/Guild.h"

#include "skills/Skill.h"

#include "buffs/BuffObject.h"

#include "../tangible/resource/ResourceContainer.h"

/*
 *	CreatureObjectStub
 */

CreatureObject::CreatureObject(unsigned long long oid) : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new CreatureObjectImplementation(oid);
	_impl->_setStub(this);
}

CreatureObject::CreatureObject(DummyConstructorParameter* param) : TangibleObject(param) {
}

CreatureObject::~CreatureObject() {
}

void CreatureObject::info(const String& message, bool forcedLog) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addAsciiParameter(message);
		method.addBooleanParameter(forcedLog);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->info(message, forcedLog);
}

void CreatureObject::sendItemsTo(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->sendItemsTo(player);
}

void CreatureObject::sendTo(Player* player, bool doClose) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(player);
		method.addBooleanParameter(doClose);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->sendTo(player, doClose);
}

void CreatureObject::sendDestroyTo(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->sendDestroyTo(player);
}

void CreatureObject::doCombatAnimation(CreatureObject* defender, unsigned int animcrc, bool hit) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(defender);
		method.addUnsignedIntParameter(animcrc);
		method.addBooleanParameter(hit);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->doCombatAnimation(defender, animcrc, hit);
}

void CreatureObject::doAnimation(const String& anim) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addAsciiParameter(anim);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->doAnimation(anim);
}

void CreatureObject::doEmote(unsigned long long targetid, unsigned int emoteid, bool showtext) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addUnsignedLongParameter(targetid);
		method.addUnsignedIntParameter(emoteid);
		method.addBooleanParameter(showtext);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->doEmote(targetid, emoteid, showtext);
}

void CreatureObject::playEffect(const String& file, const String& aux) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addAsciiParameter(file);
		method.addAsciiParameter(aux);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->playEffect(file, aux);
}

void CreatureObject::showFlyText(const String& file, const String& aux, unsigned char red, unsigned char green, unsigned char blue) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addAsciiParameter(file);
		method.addAsciiParameter(aux);
		method.addUnsignedCharParameter(red);
		method.addUnsignedCharParameter(green);
		method.addUnsignedCharParameter(blue);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->showFlyText(file, aux, red, green, blue);
}

void CreatureObject::sendCombatSpam(CreatureObject* defender, TangibleObject* item, unsigned int damage, const String& skill, bool areaSpam) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addObjectParameter(defender);
		method.addObjectParameter(item);
		method.addUnsignedIntParameter(damage);
		method.addAsciiParameter(skill);
		method.addBooleanParameter(areaSpam);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->sendCombatSpam(defender, item, damage, skill, areaSpam);
}

void CreatureObject::sendCombatSpamTrap(CreatureObject* defender, TangibleObject* item, unsigned int damage, const String& skill, bool areaSpam) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addObjectParameter(defender);
		method.addObjectParameter(item);
		method.addUnsignedIntParameter(damage);
		method.addAsciiParameter(skill);
		method.addBooleanParameter(areaSpam);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->sendCombatSpamTrap(defender, item, damage, skill, areaSpam);
}

void CreatureObject::addDamage(CreatureObject* creature, unsigned int damage) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addObjectParameter(creature);
		method.addUnsignedIntParameter(damage);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->addDamage(creature, damage);
}

unsigned int CreatureObject::getDamage(CreatureObject* creature) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addObjectParameter(creature);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getDamage(creature);
}

void CreatureObject::removeFromDamageMap(CreatureObject* target) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addObjectParameter(target);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->removeFromDamageMap(target);
}

bool CreatureObject::isLootOwner(CreatureObject* creature) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addObjectParameter(creature);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isLootOwner(creature);
}

CreatureObject* CreatureObject::getLootOwner() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);

		return (CreatureObject*) method.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getLootOwner();
}

unsigned int CreatureObject::getMitigation(const String& mit) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);
		method.addAsciiParameter(mit);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getMitigation(mit);
}

void CreatureObject::addCooldown(const String& key, int timeLimitInMilliseconds) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);
		method.addAsciiParameter(key);
		method.addSignedIntParameter(timeLimitInMilliseconds);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->addCooldown(key, timeLimitInMilliseconds);
}

void CreatureObject::removeCooldown(const String& key) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);
		method.addAsciiParameter(key);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->removeCooldown(key);
}

bool CreatureObject::containsCooldown(const String& key) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);
		method.addAsciiParameter(key);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->containsCooldown(key);
}

int CreatureObject::getCooldownTimeRemaining(const String& key) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);
		method.addAsciiParameter(key);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getCooldownTimeRemaining(key);
}

bool CreatureObject::hasCooldownExpired(const String& key) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);
		method.addAsciiParameter(key);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasCooldownExpired(key);
}

bool CreatureObject::isIncapacitated() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isIncapacitated();
}

bool CreatureObject::isDead() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isDead();
}

bool CreatureObject::isKnockedDown() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isKnockedDown();
}

bool CreatureObject::isKneeling() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isKneeling();
}

bool CreatureObject::isProne() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isProne();
}

bool CreatureObject::isStanding() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isStanding();
}

bool CreatureObject::isSkillAnimating() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isSkillAnimating();
}

bool CreatureObject::isInCombat() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isInCombat();
}

bool CreatureObject::isDizzied() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 36);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isDizzied();
}

bool CreatureObject::isStunned() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 37);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isStunned();
}

bool CreatureObject::isBlinded() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 38);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isBlinded();
}

bool CreatureObject::isIntimidated() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 39);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isIntimidated();
}

bool CreatureObject::isSnared() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 40);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isSnared();
}

bool CreatureObject::isRooted() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 41);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isRooted();
}

bool CreatureObject::isDiseased() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 42);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isDiseased();
}

bool CreatureObject::isPoisoned() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 43);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isPoisoned();
}

bool CreatureObject::isBleeding() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 44);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isBleeding();
}

bool CreatureObject::isOnFire() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 45);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isOnFire();
}

bool CreatureObject::isMounted() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 46);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isMounted();
}

bool CreatureObject::isRidingCreature() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 47);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isRidingCreature();
}

bool CreatureObject::isMeditating() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 48);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isMeditating();
}

bool CreatureObject::isCreature() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 49);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isCreature();
}

bool CreatureObject::isNPC() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 50);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isNPC();
}

bool CreatureObject::isMount() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 51);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isMount();
}

bool CreatureObject::isBerserked() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 52);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isBerserked();
}

bool CreatureObject::isTanoObjEquipped(TangibleObject* tano) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 53);
		method.addObjectParameter(tano);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isTanoObjEquipped(tano);
}

bool CreatureObject::isVehicle() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 54);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isVehicle();
}

bool CreatureObject::isPet() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 55);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isPet();
}

bool CreatureObject::hatesFaction(unsigned int faction) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 56);
		method.addUnsignedIntParameter(faction);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hatesFaction(faction);
}

void CreatureObject::updateKnockdownRecovery() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 57);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updateKnockdownRecovery();
}

void CreatureObject::updateMood(const String& md) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 58);
		method.addAsciiParameter(md);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updateMood(md);
}

bool CreatureObject::checkKnockdownRecovery() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 59);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->checkKnockdownRecovery();
}

void CreatureObject::updatePostureDownRecovery() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 60);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updatePostureDownRecovery();
}

void CreatureObject::updatePostureUpRecovery() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 61);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updatePostureUpRecovery();
}

bool CreatureObject::checkPostureDownRecovery() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 62);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->checkPostureDownRecovery();
}

bool CreatureObject::checkPostureUpRecovery() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 63);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->checkPostureUpRecovery();
}

bool CreatureObject::setState(unsigned long long state) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 64);
		method.addUnsignedLongParameter(state);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->setState(state);
}

bool CreatureObject::clearState(unsigned long long state) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 65);
		method.addUnsignedLongParameter(state);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->clearState(state);
}

void CreatureObject::updateDotStates(unsigned long long oldStates, unsigned long long newStates) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 66);
		method.addUnsignedLongParameter(oldStates);
		method.addUnsignedLongParameter(newStates);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updateDotStates(oldStates, newStates);
}

void CreatureObject::updateStates() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 67);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updateStates();
}

void CreatureObject::clearStates() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 68);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->clearStates();
}

float CreatureObject::calculateBFRatio() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 69);

		return method.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->calculateBFRatio();
}

void CreatureObject::removeState(unsigned long long state) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 70);
		method.addUnsignedLongParameter(state);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->removeState(state);
}

void CreatureObject::resetHAMBars(bool doUpdateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 71);
		method.addBooleanParameter(doUpdateClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->resetHAMBars(doUpdateClient);
}

bool CreatureObject::changeHAMBars(int health, int action, int mind, bool forcedChange) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 72);
		method.addSignedIntParameter(health);
		method.addSignedIntParameter(action);
		method.addSignedIntParameter(mind);
		method.addBooleanParameter(forcedChange);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeHAMBars(health, action, mind, forcedChange);
}

bool CreatureObject::changeHAMWounds(int health, int action, int mind, bool forcedChange) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 73);
		method.addSignedIntParameter(health);
		method.addSignedIntParameter(action);
		method.addSignedIntParameter(mind);
		method.addBooleanParameter(forcedChange);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeHAMWounds(health, action, mind, forcedChange);
}

void CreatureObject::changeMaxHAMBars(int health, int action, int mind) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 74);
		method.addSignedIntParameter(health);
		method.addSignedIntParameter(action);
		method.addSignedIntParameter(mind);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeMaxHAMBars(health, action, mind);
}

bool CreatureObject::changeAttributeBar(unsigned char attribute, int value, bool forcedChange) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 75);
		method.addUnsignedCharParameter(attribute);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(forcedChange);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeAttributeBar(attribute, value, forcedChange);
}

bool CreatureObject::changeHealthBar(int value, bool forcedChange) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 76);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(forcedChange);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeHealthBar(value, forcedChange);
}

bool CreatureObject::changeStrengthBar(int value, bool forcedChange) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 77);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(forcedChange);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeStrengthBar(value, forcedChange);
}

bool CreatureObject::changeConstitutionBar(int value, bool forcedChange) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 78);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(forcedChange);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeConstitutionBar(value, forcedChange);
}

bool CreatureObject::changeActionBar(int value, bool forcedChange) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 79);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(forcedChange);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeActionBar(value, forcedChange);
}

bool CreatureObject::changeQuicknessBar(int value, bool forcedChange) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 80);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(forcedChange);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeQuicknessBar(value, forcedChange);
}

bool CreatureObject::changeStaminaBar(int value, bool forcedChange) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 81);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(forcedChange);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeStaminaBar(value, forcedChange);
}

bool CreatureObject::changeMindBar(int value, bool forcedChange) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 82);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(forcedChange);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeMindBar(value, forcedChange);
}

bool CreatureObject::changeFocusBar(int value, bool forcedChange) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 83);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(forcedChange);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeFocusBar(value, forcedChange);
}

bool CreatureObject::changeWillpowerBar(int value, bool forcedChange) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 84);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(forcedChange);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeWillpowerBar(value, forcedChange);
}

void CreatureObject::changeMaxAttributeBar(unsigned char attribute, int value, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 85);
		method.addUnsignedCharParameter(attribute);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeMaxAttributeBar(attribute, value, updateClient);
}

void CreatureObject::changeMaxHealthBar(int value, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 86);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeMaxHealthBar(value, updateClient);
}

void CreatureObject::changeMaxStrengthBar(int value, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 87);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeMaxStrengthBar(value, updateClient);
}

void CreatureObject::changeMaxConstitutionBar(int value, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 88);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeMaxConstitutionBar(value, updateClient);
}

void CreatureObject::changeMaxActionBar(int value, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 89);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeMaxActionBar(value, updateClient);
}

void CreatureObject::changeMaxQuicknessBar(int value, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 90);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeMaxQuicknessBar(value, updateClient);
}

void CreatureObject::changeMaxStaminaBar(int value, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 91);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeMaxStaminaBar(value, updateClient);
}

void CreatureObject::changeMaxMindBar(int value, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 92);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeMaxMindBar(value, updateClient);
}

void CreatureObject::changeMaxFocusBar(int value, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 93);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeMaxFocusBar(value, updateClient);
}

void CreatureObject::changeMaxWillpowerBar(int value, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 94);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeMaxWillpowerBar(value, updateClient);
}

bool CreatureObject::changeWoundsBar(unsigned char attribute, int value, bool forcedChange) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 95);
		method.addUnsignedCharParameter(attribute);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(forcedChange);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeWoundsBar(attribute, value, forcedChange);
}

bool CreatureObject::changeHealthWoundsBar(int value, bool forcedChange) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 96);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(forcedChange);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeHealthWoundsBar(value, forcedChange);
}

bool CreatureObject::changeStrengthWoundsBar(int value, bool forcedChange) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 97);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(forcedChange);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeStrengthWoundsBar(value, forcedChange);
}

bool CreatureObject::changeConstitutionWoundsBar(int value, bool forcedChange) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 98);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(forcedChange);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeConstitutionWoundsBar(value, forcedChange);
}

bool CreatureObject::changeActionWoundsBar(int value, bool forcedChange) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 99);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(forcedChange);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeActionWoundsBar(value, forcedChange);
}

bool CreatureObject::changeQuicknessWoundsBar(int value, bool forcedChange) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 100);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(forcedChange);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeQuicknessWoundsBar(value, forcedChange);
}

bool CreatureObject::changeStaminaWoundsBar(int value, bool forcedChange) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 101);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(forcedChange);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeStaminaWoundsBar(value, forcedChange);
}

bool CreatureObject::changeMindWoundsBar(int value, bool forcedChange) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 102);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(forcedChange);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeMindWoundsBar(value, forcedChange);
}

bool CreatureObject::changeFocusWoundsBar(int value, bool forcedChange) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 103);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(forcedChange);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeFocusWoundsBar(value, forcedChange);
}

bool CreatureObject::changeWillpowerWoundsBar(int value, bool forcedChange) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 104);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(forcedChange);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->changeWillpowerWoundsBar(value, forcedChange);
}

void CreatureObject::changeShockWounds(int bf) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 105);
		method.addSignedIntParameter(bf);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeShockWounds(bf);
}

void CreatureObject::setAttributeBar(unsigned char attribute, int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 106);
		method.addUnsignedCharParameter(attribute);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setAttributeBar(attribute, value);
}

void CreatureObject::setHealthBar(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 107);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setHealthBar(value);
}

void CreatureObject::setStrengthBar(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 108);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setStrengthBar(value);
}

void CreatureObject::setConstitutionBar(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 109);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setConstitutionBar(value);
}

void CreatureObject::setActionBar(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 110);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setActionBar(value);
}

void CreatureObject::setQuicknessBar(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 111);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setQuicknessBar(value);
}

void CreatureObject::setStaminaBar(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 112);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setStaminaBar(value);
}

void CreatureObject::setMindBar(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 113);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMindBar(value);
}

void CreatureObject::setFocusBar(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 114);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setFocusBar(value);
}

void CreatureObject::setWillpowerBar(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 115);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setWillpowerBar(value);
}

void CreatureObject::setBaseAttributeBar(unsigned char attribute, int value, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 116);
		method.addUnsignedCharParameter(attribute);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseAttributeBar(attribute, value, updateClient);
}

void CreatureObject::setBaseHealthBar(int value, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 117);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseHealthBar(value, updateClient);
}

void CreatureObject::setBaseStrengthBar(int value, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 118);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseStrengthBar(value, updateClient);
}

void CreatureObject::setBaseConstitutionBar(int value, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 119);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseConstitutionBar(value, updateClient);
}

void CreatureObject::setBaseActionBar(int value, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 120);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseActionBar(value, updateClient);
}

void CreatureObject::setBaseQuicknessBar(int value, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 121);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseQuicknessBar(value, updateClient);
}

void CreatureObject::setBaseStaminaBar(int value, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 122);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseStaminaBar(value, updateClient);
}

void CreatureObject::setBaseMindBar(int value, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 123);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseMindBar(value, updateClient);
}

void CreatureObject::setBaseFocusBar(int value, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 124);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseFocusBar(value, updateClient);
}

void CreatureObject::setBaseWillpowerBar(int value, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 125);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseWillpowerBar(value, updateClient);
}

void CreatureObject::setMaxAttributeBar(unsigned char attribute, int value, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 126);
		method.addUnsignedCharParameter(attribute);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMaxAttributeBar(attribute, value, updateClient);
}

void CreatureObject::setMaxHealthBar(int value, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 127);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMaxHealthBar(value, updateClient);
}

void CreatureObject::setMaxStrengthBar(int value, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 128);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMaxStrengthBar(value, updateClient);
}

void CreatureObject::setMaxConstitutionBar(int value, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 129);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMaxConstitutionBar(value, updateClient);
}

void CreatureObject::setMaxActionBar(int value, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 130);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMaxActionBar(value, updateClient);
}

void CreatureObject::setMaxQuicknessBar(int value, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 131);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMaxQuicknessBar(value, updateClient);
}

void CreatureObject::setMaxStaminaBar(int value, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 132);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMaxStaminaBar(value, updateClient);
}

void CreatureObject::setMaxMindBar(int value, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 133);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMaxMindBar(value, updateClient);
}

void CreatureObject::setMaxFocusBar(int value, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 134);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMaxFocusBar(value, updateClient);
}

void CreatureObject::setMaxWillpowerBar(int value, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 135);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMaxWillpowerBar(value, updateClient);
}

void CreatureObject::setWoundsBar(unsigned char attribute, int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 136);
		method.addUnsignedCharParameter(attribute);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setWoundsBar(attribute, value);
}

void CreatureObject::setHealthWoundsBar(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 137);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setHealthWoundsBar(value);
}

void CreatureObject::setStrengthWoundsBar(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 138);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setStrengthWoundsBar(value);
}

void CreatureObject::setConstitutionWoundsBar(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 139);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setConstitutionWoundsBar(value);
}

void CreatureObject::setActionWoundsBar(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 140);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setActionWoundsBar(value);
}

void CreatureObject::setQuicknessWoundsBar(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 141);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setQuicknessWoundsBar(value);
}

void CreatureObject::setStaminaWoundsBar(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 142);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setStaminaWoundsBar(value);
}

void CreatureObject::setMindWoundsBar(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 143);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMindWoundsBar(value);
}

void CreatureObject::setFocusWoundsBar(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 144);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setFocusWoundsBar(value);
}

void CreatureObject::setWillpowerWoundsBar(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 145);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setWillpowerWoundsBar(value);
}

bool CreatureObject::hasAttackDelay() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 146);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasAttackDelay();
}

void CreatureObject::clearAttackDelay() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 147);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->clearAttackDelay();
}

void CreatureObject::activateBurstRun(bool bypassChecks) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 148);
		method.addBooleanParameter(bypassChecks);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->activateBurstRun(bypassChecks);
}

bool CreatureObject::hasQueuedState(unsigned int skillCRC) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 149);
		method.addUnsignedIntParameter(skillCRC);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasQueuedState(skillCRC);
}

bool CreatureObject::removeQueuedState(unsigned int skillCRC) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 150);
		method.addUnsignedIntParameter(skillCRC);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->removeQueuedState(skillCRC);
}

bool CreatureObject::addQueuedState(unsigned int skillCRC) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 151);
		method.addUnsignedIntParameter(skillCRC);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->addQueuedState(skillCRC);
}

void CreatureObject::setMeditateState() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 152);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMeditateState();
}

void CreatureObject::removePowerboost() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 153);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->removePowerboost();
}

bool CreatureObject::isGuilded() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 154);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isGuilded();
}

void CreatureObject::removeGroup() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 155);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->removeGroup();
}

GroupObject* CreatureObject::getGroupObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 156);

		return (GroupObject*) method.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getGroupObject();
}

bool CreatureObject::isInAGroup() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 157);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isInAGroup();
}

bool CreatureObject::isInGroupWith(CreatureObject* creature) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 158);
		method.addObjectParameter(creature);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isInGroupWith(creature);
}

void CreatureObject::setGroupID(unsigned long long gid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 159);
		method.addUnsignedLongParameter(gid);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setGroupID(gid);
}

void CreatureObject::updateGroupId(unsigned long long id) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 160);
		method.addUnsignedLongParameter(id);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updateGroupId(id);
}

void CreatureObject::updateGroupInviterId(unsigned long long id) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 161);
		method.addUnsignedLongParameter(id);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updateGroupInviterId(id);
}

void CreatureObject::updateTarget(unsigned long long targ) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 162);
		method.addUnsignedLongParameter(targ);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updateTarget(targ);
}

void CreatureObject::updateTarget(SceneObject* targ) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 163);
		method.addObjectParameter(targ);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updateTarget(targ);
}

void CreatureObject::clearTarget() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 164);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->clearTarget();
}

void CreatureObject::setActionCounter(unsigned int actioncntr) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 165);
		method.addUnsignedIntParameter(actioncntr);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setActionCounter(actioncntr);
}

void CreatureObject::setWeapon(Weapon* wep) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 166);
		method.addObjectParameter(wep);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setWeapon(wep);
}

void CreatureObject::setCreatureLinkID(unsigned long long creatureID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 167);
		method.addUnsignedLongParameter(creatureID);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setCreatureLinkID(creatureID);
}

void CreatureObject::setAccuracy(int acc) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 168);
		method.addSignedIntParameter(acc);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setAccuracy(acc);
}

void CreatureObject::setAccuracyBonus(int accBonus) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 169);
		method.addSignedIntParameter(accBonus);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setAccuracyBonus(accBonus);
}

void CreatureObject::setDamageBonus(int bonus) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 170);
		method.addSignedIntParameter(bonus);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setDamageBonus(bonus);
}

void CreatureObject::setDefenseBonus(int bonus) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 171);
		method.addSignedIntParameter(bonus);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setDefenseBonus(bonus);
}

void CreatureObject::setLastMovementUpdateStamp(unsigned int tme) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 172);
		method.addUnsignedIntParameter(tme);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setLastMovementUpdateStamp(tme);
}

void CreatureObject::setIgnoreMovementTests(int times) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 173);
		method.addSignedIntParameter(times);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setIgnoreMovementTests(times);
}

void CreatureObject::setLevel(unsigned int lvl) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 174);
		method.addUnsignedIntParameter(lvl);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setLevel(lvl);
}

void CreatureObject::setHealthEncumbrance(unsigned int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 175);
		method.addUnsignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setHealthEncumbrance(value);
}

void CreatureObject::setActionEncumbrance(unsigned int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 176);
		method.addUnsignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setActionEncumbrance(value);
}

void CreatureObject::setMindEncumbrance(unsigned int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 177);
		method.addUnsignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMindEncumbrance(value);
}

void CreatureObject::changeHealthEncumbrance(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 178);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeHealthEncumbrance(value);
}

void CreatureObject::changeActionEncumbrance(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 179);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeActionEncumbrance(value);
}

void CreatureObject::changeMindEncumbrance(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 180);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeMindEncumbrance(value);
}

void CreatureObject::updateServerMovementStamp() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 181);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updateServerMovementStamp();
}

SceneObject* CreatureObject::getInventoryItem(unsigned long long oid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 182);
		method.addUnsignedLongParameter(oid);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getInventoryItem(oid);
}

void CreatureObject::removeAllUnequippedInventory() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 183);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->removeAllUnequippedInventory();
}

void CreatureObject::removeInventoryItem(unsigned long long oid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 184);
		method.addUnsignedLongParameter(oid);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->removeInventoryItem(oid);
}

void CreatureObject::removeInventoryItem(SceneObject* item) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 185);
		method.addObjectParameter(item);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->removeInventoryItem(item);
}

SceneObject* CreatureObject::getLootItem(unsigned long long oid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 186);
		method.addUnsignedLongParameter(oid);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getLootItem(oid);
}

void CreatureObject::removeLootItem(unsigned long long oid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 187);
		method.addUnsignedLongParameter(oid);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->removeLootItem(oid);
}

SceneObject* CreatureObject::getBankItem(unsigned long long oid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 188);
		method.addUnsignedLongParameter(oid);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBankItem(oid);
}

void CreatureObject::removeBankItem(unsigned long long oid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 189);
		method.addUnsignedLongParameter(oid);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->removeBankItem(oid);
}

Inventory* CreatureObject::getInventory() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 190);

		return (Inventory*) method.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getInventory();
}

Container* CreatureObject::getLootContainer() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 191);

		return (Container*) method.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getLootContainer();
}

Container* CreatureObject::getBankContainer() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 192);

		return (Container*) method.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBankContainer();
}

BankInventory* CreatureObject::getBankInventory() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 193);

		return (BankInventory*) method.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBankInventory();
}

unsigned long long CreatureObject::getNewItemID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 194);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getNewItemID();
}

Weapon* CreatureObject::getWeapon() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 195);

		return (Weapon*) method.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getWeapon();
}

Armor* CreatureObject::getArmor(int type) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 196);
		method.addSignedIntParameter(type);

		return (Armor*) method.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getArmor(type);
}

void CreatureObject::addSkill(Skill* skill) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((CreatureObjectImplementation*) _impl)->addSkill(skill);
}

void CreatureObject::addSkillMod(const String& name, int mod, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 197);
		method.addAsciiParameter(name);
		method.addSignedIntParameter(mod);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->addSkillMod(name, mod, updateClient);
}

int CreatureObject::getSkillMod(const String& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 198);
		method.addAsciiParameter(name);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getSkillMod(name);
}

bool CreatureObject::hasSkillMod(const String& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 199);
		method.addAsciiParameter(name);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasSkillMod(name);
}

int CreatureObject::getSkillModBonus(const String& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 200);
		method.addAsciiParameter(name);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getSkillModBonus(name);
}

void CreatureObject::addSkillModBonus(const String& name, int mod, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 201);
		method.addAsciiParameter(name);
		method.addSignedIntParameter(mod);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->addSkillModBonus(name, mod, updateClient);
}

bool CreatureObject::hasSkillModBonus(const String& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 202);
		method.addAsciiParameter(name);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasSkillModBonus(name);
}

int CreatureObject::getAccuracy() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 203);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getAccuracy();
}

int CreatureObject::getAccuracyBonus() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 204);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getAccuracyBonus();
}

int CreatureObject::getDefenseBonus() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 205);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getDefenseBonus();
}

int CreatureObject::getDamageBonus() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 206);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getDamageBonus();
}

int CreatureObject::getConditionDamage() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 207);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getConditionDamage();
}

int CreatureObject::getMaxCondition() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 208);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getMaxCondition();
}

int CreatureObject::getCondition() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 209);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getCondition();
}

CreatureObject* CreatureObject::getMount() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 210);

		return (CreatureObject*) method.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getMount();
}

unsigned long long CreatureObject::getLastServerMovementStamp() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 211);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getLastServerMovementStamp();
}

unsigned long long CreatureObject::getCreatureLinkID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 212);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getCreatureLinkID();
}

float CreatureObject::getDistanceTo(SceneObject* targetCreature) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 213);
		method.addObjectParameter(targetCreature);

		return method.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getDistanceTo(targetCreature);
}

float CreatureObject::getHeight() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 214);

		return method.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getHeight();
}

unsigned int CreatureObject::getCreatureSkillsCount() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 215);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getCreatureSkillsCount();
}

unsigned int CreatureObject::getNewCreatureSkillsCount(int cnt) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 216);
		method.addSignedIntParameter(cnt);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getNewCreatureSkillsCount(cnt);
}

unsigned int CreatureObject::getLastMovementUpdateStamp() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 217);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getLastMovementUpdateStamp();
}

int CreatureObject::getIgnoreMovementTests() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 218);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getIgnoreMovementTests();
}

unsigned int CreatureObject::getLevel() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 219);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getLevel();
}

int CreatureObject::getCenteredBonus() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 220);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getCenteredBonus();
}

void CreatureObject::sendSystemMessage(const String& message) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 221);
		method.addAsciiParameter(message);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->sendSystemMessage(message);
}

void CreatureObject::sendSystemMessage(UnicodeString& message) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 222);
		method.addUnicodeParameter(message);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->sendSystemMessage(message);
}

void CreatureObject::sendSystemMessage(const String& file, const String& str, unsigned long long targetid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 223);
		method.addAsciiParameter(file);
		method.addAsciiParameter(str);
		method.addUnsignedLongParameter(targetid);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->sendSystemMessage(file, str, targetid);
}

void CreatureObject::updateSpeed(float speed, float acceleration) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 224);
		method.addFloatParameter(speed);
		method.addFloatParameter(acceleration);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updateSpeed(speed, acceleration);
}

void CreatureObject::addInventoryItem(TangibleObject* item) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 225);
		method.addObjectParameter(item);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->addInventoryItem(item);
}

void CreatureObject::addInventoryResource(ResourceContainer* rcno) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 226);
		method.addObjectParameter(rcno);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->addInventoryResource(rcno);
}

void CreatureObject::addLootItem(TangibleObject* item) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 227);
		method.addObjectParameter(item);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->addLootItem(item);
}

void CreatureObject::startDancing(const String& anim, bool changeDance) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 228);
		method.addAsciiParameter(anim);
		method.addBooleanParameter(changeDance);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->startDancing(anim, changeDance);
}

void CreatureObject::startPlayingMusic(const String& anim, bool changeDance) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 229);
		method.addAsciiParameter(anim);
		method.addBooleanParameter(changeDance);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->startPlayingMusic(anim, changeDance);
}

void CreatureObject::startWatch(unsigned long long entid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 230);
		method.addUnsignedLongParameter(entid);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->startWatch(entid);
}

void CreatureObject::startListen(unsigned long long entid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 231);
		method.addUnsignedLongParameter(entid);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->startListen(entid);
}

void CreatureObject::stopWatch(unsigned long long entid, bool doSendPackets, bool forced, bool doLock, bool outOfRange) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 232);
		method.addUnsignedLongParameter(entid);
		method.addBooleanParameter(doSendPackets);
		method.addBooleanParameter(forced);
		method.addBooleanParameter(doLock);
		method.addBooleanParameter(outOfRange);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->stopWatch(entid, doSendPackets, forced, doLock, outOfRange);
}

void CreatureObject::stopListen(unsigned long long entid, bool doSendPackets, bool forced, bool doLock, bool outOfRange) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 233);
		method.addUnsignedLongParameter(entid);
		method.addBooleanParameter(doSendPackets);
		method.addBooleanParameter(forced);
		method.addBooleanParameter(doLock);
		method.addBooleanParameter(outOfRange);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->stopListen(entid, doSendPackets, forced, doLock, outOfRange);
}

bool CreatureObject::isPlayingMusic() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 234);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isPlayingMusic();
}

bool CreatureObject::isDancing() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 235);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isDancing();
}

void CreatureObject::stopDancing() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 236);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->stopDancing();
}

void CreatureObject::stopPlayingMusic() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 237);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->stopPlayingMusic();
}

void CreatureObject::addListener(CreatureObject* creature) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 238);
		method.addObjectParameter(creature);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->addListener(creature);
}

void CreatureObject::addWatcher(CreatureObject* creature) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 239);
		method.addObjectParameter(creature);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->addWatcher(creature);
}

void CreatureObject::removeListener(CreatureObject* creature) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 240);
		method.addObjectParameter(creature);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->removeListener(creature);
}

void CreatureObject::removeWatcher(CreatureObject* creature) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 241);
		method.addObjectParameter(creature);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->removeWatcher(creature);
}

void CreatureObject::doFlourish(const String& modifier) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 242);
		method.addAsciiParameter(modifier);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->doFlourish(modifier);
}

void CreatureObject::doPerformanceAction() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 243);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->doPerformanceAction();
}

void CreatureObject::doEntertainerPatronEffects() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 244);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->doEntertainerPatronEffects();
}

void CreatureObject::addEntertainerFlourishBuff() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 245);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->addEntertainerFlourishBuff();
}

void CreatureObject::addEntertainerBuffDuration(int performanceType, float duration) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 246);
		method.addSignedIntParameter(performanceType);
		method.addFloatParameter(duration);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->addEntertainerBuffDuration(performanceType, duration);
}

void CreatureObject::setEntertainerBuffDuration(int performanceType, float duration) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 247);
		method.addSignedIntParameter(performanceType);
		method.addFloatParameter(duration);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setEntertainerBuffDuration(performanceType, duration);
}

float CreatureObject::getEntertainerBuffDuration(int performanceType) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 248);
		method.addSignedIntParameter(performanceType);

		return method.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getEntertainerBuffDuration(performanceType);
}

void CreatureObject::setEntertainerBuffStrength(int performanceType, float strength) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 249);
		method.addSignedIntParameter(performanceType);
		method.addFloatParameter(strength);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setEntertainerBuffStrength(performanceType, strength);
}

float CreatureObject::getEntertainerBuffStrength(int performanceType) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 250);
		method.addSignedIntParameter(performanceType);

		return method.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getEntertainerBuffStrength(performanceType);
}

void CreatureObject::activateRecovery() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 251);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->activateRecovery();
}

int CreatureObject::getCreatureSkillsSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 252);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getCreatureSkillsSize();
}

String& CreatureObject::getSkill(int idx) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 253);
		method.addSignedIntParameter(idx);

		method.executeWithAsciiReturn(_return_getSkill);
		return _return_getSkill;
	} else
		return ((CreatureObjectImplementation*) _impl)->getSkill(idx);
}

bool CreatureObject::hasSkill(unsigned int skillCRC) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 254);
		method.addUnsignedIntParameter(skillCRC);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasSkill(skillCRC);
}

String& CreatureObject::getSkillOrCertification(int idx) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 255);
		method.addSignedIntParameter(idx);

		method.executeWithAsciiReturn(_return_getSkillOrCertification);
		return _return_getSkillOrCertification;
	} else
		return ((CreatureObjectImplementation*) _impl)->getSkillOrCertification(idx);
}

int CreatureObject::getSkillAndCertificationSize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 256);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getSkillAndCertificationSize();
}

void CreatureObject::sendConversationStartTo(SceneObject* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 257);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->sendConversationStartTo(obj);
}

void CreatureObject::selectConversationOption(int option, SceneObject* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 258);
		method.addSignedIntParameter(option);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->selectConversationOption(option, obj);
}

void CreatureObject::sendConversationStopTo(SceneObject* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 259);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->sendConversationStopTo(obj);
}

void CreatureObject::addConvoScreen(const String& screenID, const String& leftBoxText, int numOptions, const String& Options, const String& optLinks) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 260);
		method.addAsciiParameter(screenID);
		method.addAsciiParameter(leftBoxText);
		method.addSignedIntParameter(numOptions);
		method.addAsciiParameter(Options);
		method.addAsciiParameter(optLinks);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->addConvoScreen(screenID, leftBoxText, numOptions, Options, optLinks);
}

void CreatureObject::sendConvoScreen(Player* player, const String& screenID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 261);
		method.addObjectParameter(player);
		method.addAsciiParameter(screenID);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->sendConvoScreen(player, screenID);
}

void CreatureObject::mountCreature(CreatureObject* mnt, bool lockMount) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 262);
		method.addObjectParameter(mnt);
		method.addBooleanParameter(lockMount);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->mountCreature(mnt, lockMount);
}

void CreatureObject::dismount(bool lockMount, bool ignoreCooldown) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 263);
		method.addBooleanParameter(lockMount);
		method.addBooleanParameter(ignoreCooldown);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->dismount(lockMount, ignoreCooldown);
}

void CreatureObject::addCashCredits(unsigned int credits) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 264);
		method.addUnsignedIntParameter(credits);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->addCashCredits(credits);
}

void CreatureObject::addBankCredits(unsigned int credits) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 265);
		method.addUnsignedIntParameter(credits);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->addBankCredits(credits);
}

void CreatureObject::updateCashCredits(unsigned int credits) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 266);
		method.addUnsignedIntParameter(credits);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updateCashCredits(credits);
}

void CreatureObject::updateBankCredits(unsigned int credits) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 267);
		method.addUnsignedIntParameter(credits);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updateBankCredits(credits);
}

void CreatureObject::subtractCashCredits(unsigned int credits) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 268);
		method.addUnsignedIntParameter(credits);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->subtractCashCredits(credits);
}

void CreatureObject::subtractBankCredits(unsigned int credits) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 269);
		method.addUnsignedIntParameter(credits);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->subtractBankCredits(credits);
}

void CreatureObject::setCashCredits(int credits) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 270);
		method.addSignedIntParameter(credits);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setCashCredits(credits);
}

void CreatureObject::setBankCredits(int credits) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 271);
		method.addSignedIntParameter(credits);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBankCredits(credits);
}

void CreatureObject::addBuff(int buffCRC, float duration) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 272);
		method.addSignedIntParameter(buffCRC);
		method.addFloatParameter(duration);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->addBuff(buffCRC, duration);
}

void CreatureObject::applyBuff(BuffObject* buff) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 273);
		method.addObjectParameter(buff);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->applyBuff(buff);
}

void CreatureObject::removeBuff(const unsigned int buffCRC, bool remove) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 274);
		method.addUnsignedIntParameter(buffCRC);
		method.addBooleanParameter(remove);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->removeBuff(buffCRC, remove);
}

bool CreatureObject::hasSpice() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 275);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasSpice();
}

bool CreatureObject::verifyCashCredits(unsigned int creditsToRemove) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 276);
		method.addUnsignedIntParameter(creditsToRemove);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->verifyCashCredits(creditsToRemove);
}

bool CreatureObject::verifyBankCredits(unsigned int creditsToRemove) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 277);
		method.addUnsignedIntParameter(creditsToRemove);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->verifyBankCredits(creditsToRemove);
}

bool CreatureObject::isOnFullHealth() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 278);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isOnFullHealth();
}

bool CreatureObject::hasStates() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 279);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasStates();
}

bool CreatureObject::hasState(unsigned long long state) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 280);
		method.addUnsignedLongParameter(state);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasState(state);
}

bool CreatureObject::isResuscitable() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 281);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isResuscitable();
}

void CreatureObject::setTimeOfDeath(unsigned long long mtime) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 282);
		method.addUnsignedLongParameter(mtime);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setTimeOfDeath(mtime);
}

unsigned long long CreatureObject::getTimeOfDeath() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 283);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getTimeOfDeath();
}

bool CreatureObject::hasHealthDamage() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 284);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasHealthDamage();
}

bool CreatureObject::hasActionDamage() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 285);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasActionDamage();
}

bool CreatureObject::hasMindDamage() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 286);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasMindDamage();
}

bool CreatureObject::hasDamage() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 287);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasDamage();
}

bool CreatureObject::hasWounds(bool h, bool a, bool m) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 288);
		method.addBooleanParameter(h);
		method.addBooleanParameter(a);
		method.addBooleanParameter(m);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasWounds(h, a, m);
}

bool CreatureObject::hasWound(unsigned char attribute) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 289);
		method.addUnsignedCharParameter(attribute);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasWound(attribute);
}

bool CreatureObject::hasShockWounds() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 290);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasShockWounds();
}

unsigned char CreatureObject::getNextWoundedAttribute(bool h, bool a, bool m) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 291);
		method.addBooleanParameter(h);
		method.addBooleanParameter(a);
		method.addBooleanParameter(m);

		return method.executeWithUnsignedCharReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getNextWoundedAttribute(h, a, m);
}

bool CreatureObject::isAttackable() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 292);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isAttackable();
}

bool CreatureObject::isAttackableBy(CreatureObject* attacker) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 293);
		method.addObjectParameter(attacker);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isAttackableBy(attacker);
}

bool CreatureObject::isListening() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 294);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isListening();
}

bool CreatureObject::isWatching() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 295);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isWatching();
}

UnicodeString& CreatureObject::getCharacterName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 296);

		method.executeWithUnicodeReturn(_return_getCharacterName);
		return _return_getCharacterName;
	} else
		return ((CreatureObjectImplementation*) _impl)->getCharacterName();
}

String& CreatureObject::getRaceName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 297);

		method.executeWithAsciiReturn(_return_getRaceName);
		return _return_getRaceName;
	} else
		return ((CreatureObjectImplementation*) _impl)->getRaceName();
}

String& CreatureObject::getGender() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 298);

		method.executeWithAsciiReturn(_return_getGender);
		return _return_getGender;
	} else
		return ((CreatureObjectImplementation*) _impl)->getGender();
}

String& CreatureObject::getCreatureType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 299);

		method.executeWithAsciiReturn(_return_getCreatureType);
		return _return_getCreatureType;
	} else
		return ((CreatureObjectImplementation*) _impl)->getCreatureType();
}

String& CreatureObject::getTerrainName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 300);

		method.executeWithAsciiReturn(_return_getTerrainName);
		return _return_getTerrainName;
	} else
		return ((CreatureObjectImplementation*) _impl)->getTerrainName();
}

void CreatureObject::getHairAppearance(String& appearance) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 301);
		method.addAsciiParameter(appearance);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->getHairAppearance(appearance);
}

bool CreatureObject::isOvert() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 302);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isOvert();
}

unsigned long long CreatureObject::getStateBitmask() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 303);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getStateBitmask();
}

unsigned char CreatureObject::getPosture() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 304);

		return method.executeWithUnsignedCharReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getPosture();
}

unsigned int CreatureObject::getFaction() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 305);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getFaction();
}

bool CreatureObject::isRebel() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 306);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isRebel();
}

bool CreatureObject::isNeutral() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 307);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isNeutral();
}

bool CreatureObject::isImperial() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 308);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isImperial();
}

unsigned int CreatureObject::getPvpStatusBitmask() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 309);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getPvpStatusBitmask();
}

unsigned char CreatureObject::getFactionRank() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 310);

		return method.executeWithUnsignedCharReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getFactionRank();
}

unsigned int CreatureObject::getBankCredits() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 311);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBankCredits();
}

unsigned int CreatureObject::getCashCredits() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 312);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getCashCredits();
}

unsigned int CreatureObject::getWoundsUpdateCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 313);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getWoundsUpdateCounter();
}

unsigned int CreatureObject::getNewWoundsUpdateCounter(int upd) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 314);
		method.addSignedIntParameter(upd);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getNewWoundsUpdateCounter(upd);
}

void CreatureObject::updateHAMBars() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 315);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updateHAMBars();
}

void CreatureObject::updateBaseStats() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 316);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updateBaseStats();
}

int CreatureObject::getBaseAttribute(unsigned char attribute) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 317);
		method.addUnsignedCharParameter(attribute);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBaseAttribute(attribute);
}

int CreatureObject::getBaseHealth() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 318);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBaseHealth();
}

int CreatureObject::getBaseStrength() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 319);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBaseStrength();
}

int CreatureObject::getBaseConstitution() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 320);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBaseConstitution();
}

int CreatureObject::getBaseAction() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 321);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBaseAction();
}

int CreatureObject::getBaseQuickness() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 322);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBaseQuickness();
}

int CreatureObject::getBaseStamina() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 323);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBaseStamina();
}

int CreatureObject::getBaseMind() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 324);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBaseMind();
}

int CreatureObject::getBaseFocus() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 325);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBaseFocus();
}

int CreatureObject::getBaseWillpower() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 326);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBaseWillpower();
}

int CreatureObject::getAttribute(unsigned char attribute) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 327);
		method.addUnsignedCharParameter(attribute);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getAttribute(attribute);
}

int CreatureObject::getHealth() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 328);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getHealth();
}

int CreatureObject::getStrength() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 329);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getStrength();
}

int CreatureObject::getConstitution() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 330);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getConstitution();
}

int CreatureObject::getAction() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 331);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getAction();
}

int CreatureObject::getQuickness() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 332);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getQuickness();
}

int CreatureObject::getStamina() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 333);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getStamina();
}

int CreatureObject::getMind() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 334);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getMind();
}

int CreatureObject::getFocus() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 335);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getFocus();
}

int CreatureObject::getWillpower() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 336);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getWillpower();
}

int CreatureObject::getAttributeMax(unsigned char attribute) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 337);
		method.addUnsignedCharParameter(attribute);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getAttributeMax(attribute);
}

int CreatureObject::getHealthMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 338);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getHealthMax();
}

int CreatureObject::getStrengthMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 339);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getStrengthMax();
}

int CreatureObject::getConstitutionMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 340);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getConstitutionMax();
}

int CreatureObject::getActionMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 341);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getActionMax();
}

int CreatureObject::getQuicknessMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 342);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getQuicknessMax();
}

int CreatureObject::getStaminaMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 343);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getStaminaMax();
}

int CreatureObject::getMindMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 344);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getMindMax();
}

int CreatureObject::getFocusMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 345);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getFocusMax();
}

int CreatureObject::getWillpowerMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 346);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getWillpowerMax();
}

int CreatureObject::getWounds(unsigned char attribute) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 347);
		method.addUnsignedCharParameter(attribute);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getWounds(attribute);
}

unsigned char CreatureObject::getWoundsArraySize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 348);

		return method.executeWithUnsignedCharReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getWoundsArraySize();
}

int CreatureObject::getHealthWounds() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 349);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getHealthWounds();
}

int CreatureObject::getStrengthWounds() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 350);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getStrengthWounds();
}

int CreatureObject::getConstitutionWounds() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 351);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getConstitutionWounds();
}

int CreatureObject::getActionWounds() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 352);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getActionWounds();
}

int CreatureObject::getQuicknessWounds() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 353);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getQuicknessWounds();
}

int CreatureObject::getStaminaWounds() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 354);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getStaminaWounds();
}

int CreatureObject::getMindWounds() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 355);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getMindWounds();
}

int CreatureObject::getFocusWounds() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 356);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getFocusWounds();
}

int CreatureObject::getWillpowerWounds() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 357);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getWillpowerWounds();
}

unsigned int CreatureObject::getAttributeDamage(unsigned char attribute) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 358);
		method.addUnsignedCharParameter(attribute);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getAttributeDamage(attribute);
}

unsigned int CreatureObject::getHealthDamage() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 359);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getHealthDamage();
}

unsigned int CreatureObject::getActionDamage() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 360);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getActionDamage();
}

unsigned int CreatureObject::getMindDamage() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 361);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getMindDamage();
}

unsigned int CreatureObject::getShockWounds() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 362);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getShockWounds();
}

unsigned int CreatureObject::getHAMUpdateCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 363);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getHAMUpdateCounter();
}

unsigned int CreatureObject::getNewHAMUpdateCounter(int cnt) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 364);
		method.addSignedIntParameter(cnt);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getNewHAMUpdateCounter(cnt);
}

unsigned int CreatureObject::getHAMMaxUpdateCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 365);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getHAMMaxUpdateCounter();
}

unsigned int CreatureObject::getNewHAMMaxUpdateCounter(int cnt) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 366);
		method.addSignedIntParameter(cnt);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getNewHAMMaxUpdateCounter(cnt);
}

unsigned int CreatureObject::getHAMBaseUpdateCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 367);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getHAMBaseUpdateCounter();
}

unsigned int CreatureObject::getNewHAMBaseUpdateCounter(int cnt) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 368);
		method.addSignedIntParameter(cnt);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getNewHAMBaseUpdateCounter(cnt);
}

unsigned int CreatureObject::getEncumbUpdateCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 369);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getEncumbUpdateCounter();
}

unsigned int CreatureObject::getNewEncumbUpdateCounter(int cnt) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 370);
		method.addSignedIntParameter(cnt);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getNewEncumbUpdateCounter(cnt);
}

unsigned int CreatureObject::getHealthEncumbrance() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 371);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getHealthEncumbrance();
}

unsigned int CreatureObject::getActionEncumbrance() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 372);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getActionEncumbrance();
}

unsigned int CreatureObject::getMindEncumbrance() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 373);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getMindEncumbrance();
}

int CreatureObject::getpbHA() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 374);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getpbHA();
}

int CreatureObject::getpbMind() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 375);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getpbMind();
}

int CreatureObject::getpbTick() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 376);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getpbTick();
}

int CreatureObject::getpbBonus() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 377);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getpbBonus();
}

unsigned long long CreatureObject::getTargetID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 378);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getTargetID();
}

SceneObject* CreatureObject::getTarget() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 379);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getTarget();
}

unsigned long long CreatureObject::getWeaponID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 380);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getWeaponID();
}

unsigned long long CreatureObject::getGroupID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 381);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getGroupID();
}

unsigned long long CreatureObject::getGuildID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 382);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getGuildID();
}

Guild* CreatureObject::getGuild() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 383);

		return (Guild*) method.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getGuild();
}

unsigned int CreatureObject::getActionCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 384);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getActionCounter();
}

float CreatureObject::getSpeed() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 385);

		return method.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getSpeed();
}

float CreatureObject::getAcceleration() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 386);

		return method.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getAcceleration();
}

String& CreatureObject::getPerformanceAnimation() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 387);

		method.executeWithAsciiReturn(_return_getPerformanceAnimation);
		return _return_getPerformanceAnimation;
	} else
		return ((CreatureObjectImplementation*) _impl)->getPerformanceAnimation();
}

unsigned int CreatureObject::getPerformanceCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 388);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getPerformanceCounter();
}

unsigned int CreatureObject::getInstrumentID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 389);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getInstrumentID();
}

int CreatureObject::getInstrumentType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 390);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getInstrumentType();
}

String& CreatureObject::getPerformanceName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 391);

		method.executeWithAsciiReturn(_return_getPerformanceName);
		return _return_getPerformanceName;
	} else
		return ((CreatureObjectImplementation*) _impl)->getPerformanceName();
}

String& CreatureObject::getMood() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 392);

		method.executeWithAsciiReturn(_return_getMood);
		return _return_getMood;
	} else
		return ((CreatureObjectImplementation*) _impl)->getMood();
}

String& CreatureObject::getMoodStr() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 393);

		method.executeWithAsciiReturn(_return_getMoodStr);
		return _return_getMoodStr;
	} else
		return ((CreatureObjectImplementation*) _impl)->getMoodStr();
}

unsigned char CreatureObject::getMoodID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 394);

		return method.executeWithUnsignedCharReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getMoodID();
}

unsigned long long CreatureObject::getGroupInviterID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 395);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getGroupInviterID();
}

unsigned long long CreatureObject::getGroupInviteCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 396);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getGroupInviteCounter();
}

unsigned long long CreatureObject::getNewGroupInviteCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 397);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getNewGroupInviteCounter();
}

unsigned long long CreatureObject::getWatchID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 398);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getWatchID();
}

unsigned long long CreatureObject::getListenID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 399);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getListenID();
}

bool CreatureObject::isInBuilding() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 400);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isInBuilding();
}

int CreatureObject::getBuildingType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 401);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBuildingType();
}

SceneObject* CreatureObject::getBuilding() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 402);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBuilding();
}

String& CreatureObject::getGuildName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 403);

		method.executeWithAsciiReturn(_return_getGuildName);
		return _return_getGuildName;
	} else
		return ((CreatureObjectImplementation*) _impl)->getGuildName();
}

int CreatureObject::getWeaponSpeedModifier() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 404);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getWeaponSpeedModifier();
}

unsigned int CreatureObject::getSkillBoxesUpdateCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 405);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getSkillBoxesUpdateCounter();
}

unsigned int CreatureObject::getSkillModsCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 406);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getSkillModsCounter();
}

unsigned int CreatureObject::getNewSkillModsCounter(int cnt) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 407);
		method.addSignedIntParameter(cnt);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getNewSkillModsCounter(cnt);
}

String& CreatureObject::getHideType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 408);

		method.executeWithAsciiReturn(_return_getHideType);
		return _return_getHideType;
	} else
		return ((CreatureObjectImplementation*) _impl)->getHideType();
}

String& CreatureObject::getBoneType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 409);

		method.executeWithAsciiReturn(_return_getBoneType);
		return _return_getBoneType;
	} else
		return ((CreatureObjectImplementation*) _impl)->getBoneType();
}

String& CreatureObject::getMeatType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 410);

		method.executeWithAsciiReturn(_return_getMeatType);
		return _return_getMeatType;
	} else
		return ((CreatureObjectImplementation*) _impl)->getMeatType();
}

int CreatureObject::getBoneMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 411);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBoneMax();
}

int CreatureObject::getHideMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 412);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getHideMax();
}

int CreatureObject::getMeatMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 413);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getMeatMax();
}

int CreatureObject::getMilk() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 414);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getMilk();
}

bool CreatureObject::hasOrganics() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 415);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasOrganics();
}

int CreatureObject::getCreatureHealth() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 416);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getCreatureHealth();
}

int CreatureObject::getXP() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 417);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getXP();
}

int CreatureObject::isHealer() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 418);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isHealer();
}

int CreatureObject::isPack() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 419);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isPack();
}

int CreatureObject::isHerd() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 420);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isHerd();
}

int CreatureObject::isStalker() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 421);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isStalker();
}

int CreatureObject::isKiller() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 422);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isKiller();
}

int CreatureObject::isAggressive() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 423);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isAggressive();
}

String& CreatureObject::getBehaviorScript() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 424);

		method.executeWithAsciiReturn(_return_getBehaviorScript);
		return _return_getBehaviorScript;
	} else
		return ((CreatureObjectImplementation*) _impl)->getBehaviorScript();
}

String& CreatureObject::getCreatureFaction() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 425);

		method.executeWithAsciiReturn(_return_getCreatureFaction);
		return _return_getCreatureFaction;
	} else
		return ((CreatureObjectImplementation*) _impl)->getCreatureFaction();
}

String& CreatureObject::getCreatureWeapon() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 426);

		method.executeWithAsciiReturn(_return_getCreatureWeapon);
		return _return_getCreatureWeapon;
	} else
		return ((CreatureObjectImplementation*) _impl)->getCreatureWeapon();
}

String& CreatureObject::getCreatureWeaponName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 427);

		method.executeWithAsciiReturn(_return_getCreatureWeaponName);
		return _return_getCreatureWeaponName;
	} else
		return ((CreatureObjectImplementation*) _impl)->getCreatureWeaponName();
}

String& CreatureObject::getCreatureWeaponTemp() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 428);

		method.executeWithAsciiReturn(_return_getCreatureWeaponTemp);
		return _return_getCreatureWeaponTemp;
	} else
		return ((CreatureObjectImplementation*) _impl)->getCreatureWeaponTemp();
}

String& CreatureObject::getCreatureWeaponClass() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 429);

		method.executeWithAsciiReturn(_return_getCreatureWeaponClass);
		return _return_getCreatureWeaponClass;
	} else
		return ((CreatureObjectImplementation*) _impl)->getCreatureWeaponClass();
}

int CreatureObject::getCreatureWeaponEquipped() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 430);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getCreatureWeaponEquipped();
}

int CreatureObject::getCreatureWeaponMinDamage() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 431);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getCreatureWeaponMinDamage();
}

int CreatureObject::getCreatureWeaponMaxDamage() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 432);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getCreatureWeaponMaxDamage();
}

float CreatureObject::getCreatureWeaponAttackSpeed() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 433);

		return method.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getCreatureWeaponAttackSpeed();
}

String& CreatureObject::getCreatureWeaponDamageType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 434);

		method.executeWithAsciiReturn(_return_getCreatureWeaponDamageType);
		return _return_getCreatureWeaponDamageType;
	} else
		return ((CreatureObjectImplementation*) _impl)->getCreatureWeaponDamageType();
}

String& CreatureObject::getCreatureWeaponArmorPiercing() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 435);

		method.executeWithAsciiReturn(_return_getCreatureWeaponArmorPiercing);
		return _return_getCreatureWeaponArmorPiercing;
	} else
		return ((CreatureObjectImplementation*) _impl)->getCreatureWeaponArmorPiercing();
}

float CreatureObject::getInternalNPCDamageModifier() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 436);

		return method.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getInternalNPCDamageModifier();
}

float CreatureObject::getTame() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 437);

		return method.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getTame();
}

String& CreatureObject::getLootGroup() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 438);

		method.executeWithAsciiReturn(_return_getLootGroup);
		return _return_getLootGroup;
	} else
		return ((CreatureObjectImplementation*) _impl)->getLootGroup();
}

unsigned int CreatureObject::getFerocity() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 439);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getFerocity();
}

bool CreatureObject::isBaby() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 440);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isBaby();
}

void CreatureObject::setBaseAttribute(unsigned char attribute, int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 441);
		method.addUnsignedCharParameter(attribute);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseAttribute(attribute, value);
}

void CreatureObject::setBaseHealth(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 442);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseHealth(value);
}

void CreatureObject::setBaseStrength(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 443);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseStrength(value);
}

void CreatureObject::setBaseConstitution(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 444);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseConstitution(value);
}

void CreatureObject::setBaseAction(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 445);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseAction(value);
}

void CreatureObject::setBaseQuickness(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 446);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseQuickness(value);
}

void CreatureObject::setBaseStamina(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 447);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseStamina(value);
}

void CreatureObject::setBaseMind(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 448);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseMind(value);
}

void CreatureObject::setBaseFocus(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 449);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseFocus(value);
}

void CreatureObject::setBaseWillpower(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 450);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseWillpower(value);
}

void CreatureObject::setAttribute(unsigned char attribute, int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 451);
		method.addUnsignedCharParameter(attribute);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setAttribute(attribute, value);
}

void CreatureObject::setHealth(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 452);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setHealth(value);
}

void CreatureObject::setStrength(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 453);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setStrength(value);
}

void CreatureObject::setConstitution(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 454);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setConstitution(value);
}

void CreatureObject::setAction(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 455);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setAction(value);
}

void CreatureObject::setQuickness(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 456);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setQuickness(value);
}

void CreatureObject::setStamina(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 457);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setStamina(value);
}

void CreatureObject::setMind(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 458);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMind(value);
}

void CreatureObject::setFocus(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 459);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setFocus(value);
}

void CreatureObject::setWillpower(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 460);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setWillpower(value);
}

void CreatureObject::setAttributeMax(unsigned char attribute, int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 461);
		method.addUnsignedCharParameter(attribute);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setAttributeMax(attribute, value);
}

void CreatureObject::setHealthMax(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 462);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setHealthMax(value);
}

void CreatureObject::setStrengthMax(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 463);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setStrengthMax(value);
}

void CreatureObject::setConstitutionMax(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 464);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setConstitutionMax(value);
}

void CreatureObject::setActionMax(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 465);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setActionMax(value);
}

void CreatureObject::setQuicknessMax(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 466);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setQuicknessMax(value);
}

void CreatureObject::setStaminaMax(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 467);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setStaminaMax(value);
}

void CreatureObject::setMindMax(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 468);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMindMax(value);
}

void CreatureObject::setFocusMax(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 469);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setFocusMax(value);
}

void CreatureObject::setWillpowerMax(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 470);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setWillpowerMax(value);
}

void CreatureObject::setWounds(unsigned char attribute, int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 471);
		method.addUnsignedCharParameter(attribute);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setWounds(attribute, value);
}

void CreatureObject::setHealthWounds(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 472);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setHealthWounds(value);
}

void CreatureObject::setStrengthWounds(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 473);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setStrengthWounds(value);
}

void CreatureObject::setConstitutionWounds(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 474);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setConstitutionWounds(value);
}

void CreatureObject::setActionWounds(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 475);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setActionWounds(value);
}

void CreatureObject::setQuicknessWounds(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 476);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setQuicknessWounds(value);
}

void CreatureObject::setStaminaWounds(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 477);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setStaminaWounds(value);
}

void CreatureObject::setMindWounds(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 478);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMindWounds(value);
}

void CreatureObject::setFocusWounds(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 479);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setFocusWounds(value);
}

void CreatureObject::setWillpowerWounds(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 480);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setWillpowerWounds(value);
}

void CreatureObject::setShockWounds(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 481);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setShockWounds(value);
}

void CreatureObject::setWoundsUpdateCounter(unsigned int count) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 482);
		method.addUnsignedIntParameter(count);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setWoundsUpdateCounter(count);
}

void CreatureObject::changeAttributeMax(unsigned char attribute, int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 483);
		method.addUnsignedCharParameter(attribute);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeAttributeMax(attribute, value);
}

void CreatureObject::changeHealthMax(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 484);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeHealthMax(value);
}

void CreatureObject::changeStrengthMax(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 485);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeStrengthMax(value);
}

void CreatureObject::changeConstitutionMax(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 486);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeConstitutionMax(value);
}

void CreatureObject::changeActionMax(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 487);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeActionMax(value);
}

void CreatureObject::changeQuicknessMax(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 488);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeQuicknessMax(value);
}

void CreatureObject::changeStaminaMax(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 489);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeStaminaMax(value);
}

void CreatureObject::changeMindMax(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 490);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeMindMax(value);
}

void CreatureObject::changeFocusMax(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 491);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeFocusMax(value);
}

void CreatureObject::changeWillpowerMax(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 492);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeWillpowerMax(value);
}

void CreatureObject::changeAttribute(unsigned char attribute, int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 493);
		method.addUnsignedCharParameter(attribute);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeAttribute(attribute, value);
}

void CreatureObject::changeHealth(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 494);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeHealth(value);
}

void CreatureObject::changeStrength(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 495);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeStrength(value);
}

void CreatureObject::changeConstitution(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 496);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeConstitution(value);
}

void CreatureObject::changeAction(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 497);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeAction(value);
}

void CreatureObject::changeQuickness(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 498);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeQuickness(value);
}

void CreatureObject::changeStamina(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 499);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeStamina(value);
}

void CreatureObject::changeMind(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 500);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeMind(value);
}

void CreatureObject::changeFocus(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 501);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeFocus(value);
}

void CreatureObject::changeWillpower(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 502);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeWillpower(value);
}

void CreatureObject::setpbHA(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 503);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setpbHA(value);
}

void CreatureObject::setpbMind(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 504);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setpbMind(value);
}

void CreatureObject::setpbTick(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 505);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setpbTick(value);
}

void CreatureObject::setpbBonus(unsigned int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 506);
		method.addUnsignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setpbBonus(value);
}

void CreatureObject::setSpeed(float spd) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 507);
		method.addFloatParameter(spd);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setSpeed(spd);
}

void CreatureObject::setAcceleration(float acc) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 508);
		method.addFloatParameter(acc);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setAcceleration(acc);
}

void CreatureObject::changeConditionDamage(int amount) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 509);
		method.addSignedIntParameter(amount);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->changeConditionDamage(amount);
}

void CreatureObject::setMaxCondition(int condition) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 510);
		method.addSignedIntParameter(condition);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMaxCondition(condition);
}

void CreatureObject::setPosture(unsigned char state, bool overrideDizzy, bool objectInteraction, float objX, float objY, float objZ) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 511);
		method.addUnsignedCharParameter(state);
		method.addBooleanParameter(overrideDizzy);
		method.addBooleanParameter(objectInteraction);
		method.addFloatParameter(objX);
		method.addFloatParameter(objY);
		method.addFloatParameter(objZ);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setPosture(state, overrideDizzy, objectInteraction, objX, objY, objZ);
}

void CreatureObject::setPvpStatusBitmask(unsigned int mask) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 512);
		method.addUnsignedIntParameter(mask);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setPvpStatusBitmask(mask);
}

void CreatureObject::setFactionRank(unsigned char rank, bool updateClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 513);
		method.addUnsignedCharParameter(rank);
		method.addBooleanParameter(updateClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setFactionRank(rank, updateClient);
}

void CreatureObject::setDizziedState() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 514);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setDizziedState();
}

void CreatureObject::setStunnedState() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 515);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setStunnedState();
}

void CreatureObject::setBlindedState() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 516);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBlindedState();
}

void CreatureObject::setIntimidatedState() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 517);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setIntimidatedState();
}

void CreatureObject::setSnaredState() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 518);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setSnaredState();
}

void CreatureObject::setRootedState() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 519);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setRootedState();
}

void CreatureObject::setBerserkedState(unsigned int duration) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 520);
		method.addUnsignedIntParameter(duration);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBerserkedState(duration);
}

int CreatureObject::addDotState(CreatureObject* attacker, unsigned long long dotID, unsigned long long dotType, int str, int type, int duration, float potency, int defense) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 521);
		method.addObjectParameter(attacker);
		method.addUnsignedLongParameter(dotID);
		method.addUnsignedLongParameter(dotType);
		method.addSignedIntParameter(str);
		method.addSignedIntParameter(type);
		method.addSignedIntParameter(duration);
		method.addFloatParameter(potency);
		method.addSignedIntParameter(defense);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->addDotState(attacker, dotID, dotType, str, type, duration, potency, defense);
}

bool CreatureObject::healDot(int dotType, int reduction) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 522);
		method.addSignedIntParameter(dotType);
		method.addSignedIntParameter(reduction);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->healDot(dotType, reduction);
}

bool CreatureObject::setNextAttackDelay(int del) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 523);
		method.addSignedIntParameter(del);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->setNextAttackDelay(del);
}

void CreatureObject::setCharacterName(const String& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 524);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setCharacterName(name);
}

void CreatureObject::setCharacterName(const UnicodeString& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 525);
		method.addUnicodeParameter(name);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setCharacterName(name);
}

void CreatureObject::setTerrainName(const String& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 526);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setTerrainName(name);
}

void CreatureObject::updateCharacterAppearance() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 527);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updateCharacterAppearance();
}

void CreatureObject::setHairAppearance(String& cust) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 528);
		method.addAsciiParameter(cust);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setHairAppearance(cust);
}

void CreatureObject::setHairAppearanceAttribute(unsigned char type, unsigned char value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 529);
		method.addUnsignedCharParameter(type);
		method.addUnsignedCharParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setHairAppearanceAttribute(type, value);
}

void CreatureObject::setHairAppearanceAttribute(String& type, unsigned char value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 530);
		method.addAsciiParameter(type);
		method.addUnsignedCharParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setHairAppearanceAttribute(type, value);
}

void CreatureObject::setRaceName(const String& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 531);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setRaceName(name);
}

void CreatureObject::setGender(const String& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 532);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setGender(name);
}

void CreatureObject::setCreatureType(const String& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 533);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setCreatureType(name);
}

void CreatureObject::setFaction(unsigned int fac) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 534);
		method.addUnsignedIntParameter(fac);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setFaction(fac);
}

void CreatureObject::setHeight(float h) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 535);
		method.addFloatParameter(h);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setHeight(h);
}

void CreatureObject::setMood(unsigned char mdid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 536);
		method.addUnsignedCharParameter(mdid);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMood(mdid);
}

void CreatureObject::setMood(const String& m) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 537);
		method.addAsciiParameter(m);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMood(m);
}

void CreatureObject::setGroup(GroupObject* Group) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 538);
		method.addObjectParameter(Group);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setGroup(Group);
}

void CreatureObject::setMount(CreatureObject* mount) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 539);
		method.addObjectParameter(mount);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMount(mount);
}

void CreatureObject::explode(int level, bool destroy) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 540);
		method.addSignedIntParameter(level);
		method.addBooleanParameter(destroy);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->explode(level, destroy);
}

BuffObject* CreatureObject::getBuffObject(const unsigned int buffCRC) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 541);
		method.addUnsignedIntParameter(buffCRC);

		return (BuffObject*) method.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBuffObject(buffCRC);
}

bool CreatureObject::hasBuff(const unsigned int buffCRC) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 542);
		method.addUnsignedIntParameter(buffCRC);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasBuff(buffCRC);
}

bool CreatureObject::healState(CreatureObject* target, unsigned long long state) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 543);
		method.addObjectParameter(target);
		method.addUnsignedLongParameter(state);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->healState(target, state);
}

void CreatureObject::deactivateWoundTreatment() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 544);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->deactivateWoundTreatment();
}

void CreatureObject::activateWoundTreatment() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 545);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->activateWoundTreatment();
}

void CreatureObject::deactivateInjuryTreatment(bool isRangedStim) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 546);
		method.addBooleanParameter(isRangedStim);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->deactivateInjuryTreatment(isRangedStim);
}

void CreatureObject::activateInjuryTreatment() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 547);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->activateInjuryTreatment();
}

void CreatureObject::deactivateStateTreatment() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 548);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->deactivateStateTreatment();
}

void CreatureObject::activateStateTreatment() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 549);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->activateStateTreatment();
}

void CreatureObject::deactivateConditionTreatment() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 550);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->deactivateConditionTreatment();
}

void CreatureObject::activateConditionTreatment() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 551);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->activateConditionTreatment();
}

bool CreatureObject::canTreatWounds() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 552);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->canTreatWounds();
}

bool CreatureObject::canTreatInjuries() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 553);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->canTreatInjuries();
}

bool CreatureObject::canTreatStates() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 554);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->canTreatStates();
}

bool CreatureObject::canTreatConditions() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 555);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->canTreatConditions();
}

int CreatureObject::getMedicalFacilityRating() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 556);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getMedicalFacilityRating();
}

void CreatureObject::setBoneType(const String& bone) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 557);
		method.addAsciiParameter(bone);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBoneType(bone);
}

void CreatureObject::setBoneMax(int bonemax) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 558);
		method.addSignedIntParameter(bonemax);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBoneMax(bonemax);
}

void CreatureObject::setHideType(const String& hide) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 559);
		method.addAsciiParameter(hide);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setHideType(hide);
}

void CreatureObject::setHideMax(int hidemax) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 560);
		method.addSignedIntParameter(hidemax);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setHideMax(hidemax);
}

void CreatureObject::setMeatType(const String& meat) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 561);
		method.addAsciiParameter(meat);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMeatType(meat);
}

void CreatureObject::setMeatMax(int meatmax) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 562);
		method.addSignedIntParameter(meatmax);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMeatMax(meatmax);
}

void CreatureObject::setMilk(int milkamt) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 563);
		method.addSignedIntParameter(milkamt);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMilk(milkamt);
}

void CreatureObject::setXP(int xp) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 564);
		method.addSignedIntParameter(xp);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setXP(xp);
}

void CreatureObject::setHealer(int heale) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 565);
		method.addSignedIntParameter(heale);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setHealer(heale);
}

void CreatureObject::setPack(int pack) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 566);
		method.addSignedIntParameter(pack);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setPack(pack);
}

void CreatureObject::setHerd(int herd) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 567);
		method.addSignedIntParameter(herd);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setHerd(herd);
}

void CreatureObject::setStalker(int stalker) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 568);
		method.addSignedIntParameter(stalker);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setStalker(stalker);
}

void CreatureObject::setKiller(int killer) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 569);
		method.addSignedIntParameter(killer);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setKiller(killer);
}

void CreatureObject::setAggressive(int aggressive) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 570);
		method.addSignedIntParameter(aggressive);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setAggressive(aggressive);
}

void CreatureObject::setBehaviorScript(const String& behaviorScript) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 571);
		method.addAsciiParameter(behaviorScript);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBehaviorScript(behaviorScript);
}

void CreatureObject::setLootGroup(const String& lootgroup) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 572);
		method.addAsciiParameter(lootgroup);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setLootGroup(lootgroup);
}

void CreatureObject::setTame(float tme) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 573);
		method.addFloatParameter(tme);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setTame(tme);
}

void CreatureObject::setCreatureFaction(const String& cfac) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 574);
		method.addAsciiParameter(cfac);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setCreatureFaction(cfac);
}

void CreatureObject::setInternalNPCDamageModifier(float indm) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 575);
		method.addFloatParameter(indm);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setInternalNPCDamageModifier(indm);
}

void CreatureObject::setFerocity(unsigned int fero) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 576);
		method.addUnsignedIntParameter(fero);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setFerocity(fero);
}

void CreatureObject::setBaby(bool baby) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 577);
		method.addBooleanParameter(baby);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaby(baby);
}

void CreatureObject::setCreatureWeapon(const String& wpon) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 578);
		method.addAsciiParameter(wpon);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setCreatureWeapon(wpon);
}

void CreatureObject::setCreatureWeaponName(const String& weaponname) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 579);
		method.addAsciiParameter(weaponname);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setCreatureWeaponName(weaponname);
}

void CreatureObject::setCreatureWeaponTemp(const String& weapontemp) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 580);
		method.addAsciiParameter(weapontemp);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setCreatureWeaponTemp(weapontemp);
}

void CreatureObject::setCreatureWeaponClass(const String& weaponclass) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 581);
		method.addAsciiParameter(weaponclass);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setCreatureWeaponClass(weaponclass);
}

void CreatureObject::setCreatureWeaponEquipped(int weaponequ) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 582);
		method.addSignedIntParameter(weaponequ);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setCreatureWeaponEquipped(weaponequ);
}

void CreatureObject::setCreatureWeaponMinDamage(int weaponmindam) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 583);
		method.addSignedIntParameter(weaponmindam);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setCreatureWeaponMinDamage(weaponmindam);
}

void CreatureObject::setCreatureWeaponMaxDamage(int weaponmaxdam) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 584);
		method.addSignedIntParameter(weaponmaxdam);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setCreatureWeaponMaxDamage(weaponmaxdam);
}

void CreatureObject::setCreatureWeaponAttackSpeed(float weaponattackspeed) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 585);
		method.addFloatParameter(weaponattackspeed);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setCreatureWeaponAttackSpeed(weaponattackspeed);
}

void CreatureObject::setCreatureWeaponDamageType(const String& weapondamtype) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 586);
		method.addAsciiParameter(weapondamtype);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setCreatureWeaponDamageType(weapondamtype);
}

void CreatureObject::setCreatureWeaponArmorPiercing(const String& weaponarmorpiercing) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 587);
		method.addAsciiParameter(weaponarmorpiercing);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setCreatureWeaponArmorPiercing(weaponarmorpiercing);
}

bool CreatureObject::isFrozen() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 588);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isFrozen();
}

void CreatureObject::setFrozen(bool flag) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 589);
		method.addBooleanParameter(flag);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setFrozen(flag);
}

String& CreatureObject::getTemplateString() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 590);

		method.executeWithAsciiReturn(_return_getTemplateString);
		return _return_getTemplateString;
	} else
		return ((CreatureObjectImplementation*) _impl)->getTemplateString();
}

void CreatureObject::setTemplateString(const String& tmpString) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 591);
		method.addAsciiParameter(tmpString);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setTemplateString(tmpString);
}

void CreatureObject::clearTemplateString() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 592);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->clearTemplateString();
}

void CreatureObject::say(const UnicodeString& message, unsigned int moodid, unsigned int mood2) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 593);
		method.addUnicodeParameter(message);
		method.addUnsignedIntParameter(moodid);
		method.addUnsignedIntParameter(mood2);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->say(message, moodid, mood2);
}

void CreatureObject::say(const String& file, const String& str, StfParameter* param, unsigned int moodid, unsigned int mood2) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 594);
		method.addAsciiParameter(file);
		method.addAsciiParameter(str);
		method.addObjectParameter(param);
		method.addUnsignedIntParameter(moodid);
		method.addUnsignedIntParameter(mood2);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->say(file, str, param, moodid, mood2);
}

void CreatureObject::setCamoType(unsigned int cType) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 595);
		method.addUnsignedIntParameter(cType);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setCamoType(cType);
}

unsigned int CreatureObject::getCamoType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 596);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getCamoType();
}

void CreatureObject::activateCamo(unsigned int camoCRC, unsigned int time, unsigned int ms) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 597);
		method.addUnsignedIntParameter(camoCRC);
		method.addUnsignedIntParameter(time);
		method.addUnsignedIntParameter(ms);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->activateCamo(camoCRC, time, ms);
}

void CreatureObject::deactivateCamo(bool forced) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 598);
		method.addBooleanParameter(forced);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->deactivateCamo(forced);
}

void CreatureObject::activateCamoLock() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 599);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->activateCamoLock();
}

bool CreatureObject::isCamoCooldownActive() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 600);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isCamoCooldownActive();
}

int CreatureObject::getCamoCooldownLeft() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 601);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getCamoCooldownLeft();
}

int CreatureObject::getMaskScent() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 602);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getMaskScent();
}

void CreatureObject::setMaskScent(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 603);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMaskScent(value);
}

Player* CreatureObject::getCamoXPTraget() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 604);

		return (Player*) method.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getCamoXPTraget();
}

void CreatureObject::setCamoXPTraget(Player* xpTaget) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 605);
		method.addObjectParameter(xpTaget);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setCamoXPTraget(xpTaget);
}

void CreatureObject::setCampModifier(int mod) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 606);
		method.addSignedIntParameter(mod);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setCampModifier(mod);
}

int CreatureObject::getCampModifier() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 607);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getCampModifier();
}

bool CreatureObject::isInCamp() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 608);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isInCamp();
}

int CreatureObject::getCampAggroMod() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 609);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getCampAggroMod();
}

void CreatureObject::setCampAggroMod(int mod) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 610);
		method.addSignedIntParameter(mod);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setCampAggroMod(mod);
}

unsigned char CreatureObject::getLowestHAMAttribute() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 611);

		return method.executeWithUnsignedCharReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getLowestHAMAttribute();
}

void CreatureObject::onIncapacitated(SceneObject* attacker) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 612);
		method.addObjectParameter(attacker);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->onIncapacitated(attacker);
}

void CreatureObject::onIncapacitationRecovery() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 613);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->onIncapacitationRecovery();
}

void CreatureObject::onConverse(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 614);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->onConverse(player);
}

void CreatureObject::onDeath() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 615);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->onDeath();
}

void CreatureObject::onKilled(SceneObject* killer) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 616);
		method.addObjectParameter(killer);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->onKilled(killer);
}

void CreatureObject::onResuscitated(SceneObject* healer) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 617);
		method.addObjectParameter(healer);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->onResuscitated(healer);
}

void CreatureObject::onDamageHealed(SceneObject* healer, unsigned char attribute, unsigned int amount) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 618);
		method.addObjectParameter(healer);
		method.addUnsignedCharParameter(attribute);
		method.addUnsignedIntParameter(amount);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->onDamageHealed(healer, attribute, amount);
}

void CreatureObject::onWoundHealed(SceneObject* healer, unsigned char attribute, unsigned int amount) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 619);
		method.addObjectParameter(healer);
		method.addUnsignedCharParameter(attribute);
		method.addUnsignedIntParameter(amount);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->onWoundHealed(healer, attribute, amount);
}

void CreatureObject::onHealEnhanced(SceneObject* enhancer, unsigned char attribute, unsigned int amount, float duration) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 620);
		method.addObjectParameter(enhancer);
		method.addUnsignedCharParameter(attribute);
		method.addUnsignedIntParameter(amount);
		method.addFloatParameter(duration);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->onHealEnhanced(enhancer, attribute, amount, duration);
}

void CreatureObject::onBlinded() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 621);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->onBlinded();
}

void CreatureObject::onDizzied() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 622);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->onDizzied();
}

void CreatureObject::onStunned() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 623);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->onStunned();
}

void CreatureObject::onIntimidated() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 624);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->onIntimidated();
}

void CreatureObject::onEquip(TangibleObject* item) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 625);
		method.addObjectParameter(item);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->onEquip(item);
}

void CreatureObject::onUnequip(TangibleObject* item) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 626);
		method.addObjectParameter(item);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->onUnequip(item);
}

void CreatureObject::onChangeWeapon(Weapon* weapon) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 627);
		method.addObjectParameter(weapon);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->onChangeWeapon(weapon);
}

void CreatureObject::onChangeArmor(Armor* armor) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 628);
		method.addObjectParameter(armor);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->onChangeArmor(armor);
}

void CreatureObject::onReceiveDamage(SceneObject* attacker, unsigned char attribute, unsigned int amount) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 629);
		method.addObjectParameter(attacker);
		method.addUnsignedCharParameter(attribute);
		method.addUnsignedIntParameter(amount);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->onReceiveDamage(attacker, attribute, amount);
}

void CreatureObject::onRegenerateHAM() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 630);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->onRegenerateHAM();
}

bool CreatureObject::inflictDamage(CreatureObject* victim, unsigned char attribute, unsigned int damage) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 631);
		method.addObjectParameter(victim);
		method.addUnsignedCharParameter(attribute);
		method.addUnsignedIntParameter(damage);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->inflictDamage(victim, attribute, damage);
}

void CreatureObject::incapacitateSelf() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 632);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->incapacitateSelf();
}

void CreatureObject::recoverFromIncapacitation() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 633);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->recoverFromIncapacitation();
}

void CreatureObject::die() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 634);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->die();
}

void CreatureObject::equipItem(TangibleObject* item) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 635);
		method.addObjectParameter(item);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->equipItem(item);
}

void CreatureObject::unequipItem(TangibleObject* item) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 636);
		method.addObjectParameter(item);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->unequipItem(item);
}

bool CreatureObject::canRecoverFromIncapacitation() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 637);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->canRecoverFromIncapacitation();
}

void CreatureObject::setBerserkDamage(unsigned int damage) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 638);
		method.addUnsignedIntParameter(damage);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBerserkDamage(damage);
}

unsigned int CreatureObject::getBerserkDamage() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 639);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBerserkDamage();
}

unsigned int CreatureObject::getAimMod() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 640);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getAimMod();
}

void CreatureObject::setAimMod(unsigned int mod) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 641);
		method.addUnsignedIntParameter(mod);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setAimMod(mod);
}

bool CreatureObject::isAiming() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 642);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isAiming();
}

void CreatureObject::setAimingState() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 643);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setAimingState();
}

bool CreatureObject::isInCover() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 644);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isInCover();
}

void CreatureObject::setCoverState() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 645);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setCoverState();
}

bool CreatureObject::isEscaping() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 646);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isEscaping();
}

void CreatureObject::setEscaping(bool escape) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 647);
		method.addBooleanParameter(escape);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setEscaping(escape);
}

void CreatureObject::activateEscape() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 648);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->activateEscape();
}

void CreatureObject::deactivateEscape() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 649);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->deactivateEscape();
}

int CreatureObject::getNumberOfSkills() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 650);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getNumberOfSkills();
}

void CreatureObject::updateZone(bool lightUpdate, bool sendPackets) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 651);
		method.addBooleanParameter(lightUpdate);
		method.addBooleanParameter(sendPackets);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updateZone(lightUpdate, sendPackets);
}

void CreatureObject::updateZoneWithParent(unsigned long long cell, bool lightUpdate, bool sendPackets) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 652);
		method.addUnsignedLongParameter(cell);
		method.addBooleanParameter(lightUpdate);
		method.addBooleanParameter(sendPackets);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updateZoneWithParent(cell, lightUpdate, sendPackets);
}

bool CreatureObject::isDisabled() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 653);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isDisabled();
}

/*
 *	CreatureObjectAdapter
 */

CreatureObjectAdapter::CreatureObjectAdapter(CreatureObjectImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* CreatureObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		info(inv->getAsciiParameter(_param0_info__String_bool_), inv->getBooleanParameter());
		break;
	case 7:
		sendItemsTo((Player*) inv->getObjectParameter());
		break;
	case 8:
		sendTo((Player*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 9:
		sendDestroyTo((Player*) inv->getObjectParameter());
		break;
	case 10:
		doCombatAnimation((CreatureObject*) inv->getObjectParameter(), inv->getUnsignedIntParameter(), inv->getBooleanParameter());
		break;
	case 11:
		doAnimation(inv->getAsciiParameter(_param0_doAnimation__String_));
		break;
	case 12:
		doEmote(inv->getUnsignedLongParameter(), inv->getUnsignedIntParameter(), inv->getBooleanParameter());
		break;
	case 13:
		playEffect(inv->getAsciiParameter(_param0_playEffect__String_String_), inv->getAsciiParameter(_param1_playEffect__String_String_));
		break;
	case 14:
		showFlyText(inv->getAsciiParameter(_param0_showFlyText__String_String_char_char_char_), inv->getAsciiParameter(_param1_showFlyText__String_String_char_char_char_), inv->getUnsignedCharParameter(), inv->getUnsignedCharParameter(), inv->getUnsignedCharParameter());
		break;
	case 15:
		sendCombatSpam((CreatureObject*) inv->getObjectParameter(), (TangibleObject*) inv->getObjectParameter(), inv->getUnsignedIntParameter(), inv->getAsciiParameter(_param3_sendCombatSpam__CreatureObject_TangibleObject_int_String_bool_), inv->getBooleanParameter());
		break;
	case 16:
		sendCombatSpamTrap((CreatureObject*) inv->getObjectParameter(), (TangibleObject*) inv->getObjectParameter(), inv->getUnsignedIntParameter(), inv->getAsciiParameter(_param3_sendCombatSpamTrap__CreatureObject_TangibleObject_int_String_bool_), inv->getBooleanParameter());
		break;
	case 17:
		addDamage((CreatureObject*) inv->getObjectParameter(), inv->getUnsignedIntParameter());
		break;
	case 18:
		resp->insertInt(getDamage((CreatureObject*) inv->getObjectParameter()));
		break;
	case 19:
		removeFromDamageMap((CreatureObject*) inv->getObjectParameter());
		break;
	case 20:
		resp->insertBoolean(isLootOwner((CreatureObject*) inv->getObjectParameter()));
		break;
	case 21:
		resp->insertLong(getLootOwner()->_getObjectID());
		break;
	case 22:
		resp->insertInt(getMitigation(inv->getAsciiParameter(_param0_getMitigation__String_)));
		break;
	case 23:
		addCooldown(inv->getAsciiParameter(_param0_addCooldown__String_int_), inv->getSignedIntParameter());
		break;
	case 24:
		removeCooldown(inv->getAsciiParameter(_param0_removeCooldown__String_));
		break;
	case 25:
		resp->insertBoolean(containsCooldown(inv->getAsciiParameter(_param0_containsCooldown__String_)));
		break;
	case 26:
		resp->insertSignedInt(getCooldownTimeRemaining(inv->getAsciiParameter(_param0_getCooldownTimeRemaining__String_)));
		break;
	case 27:
		resp->insertBoolean(hasCooldownExpired(inv->getAsciiParameter(_param0_hasCooldownExpired__String_)));
		break;
	case 28:
		resp->insertBoolean(isIncapacitated());
		break;
	case 29:
		resp->insertBoolean(isDead());
		break;
	case 30:
		resp->insertBoolean(isKnockedDown());
		break;
	case 31:
		resp->insertBoolean(isKneeling());
		break;
	case 32:
		resp->insertBoolean(isProne());
		break;
	case 33:
		resp->insertBoolean(isStanding());
		break;
	case 34:
		resp->insertBoolean(isSkillAnimating());
		break;
	case 35:
		resp->insertBoolean(isInCombat());
		break;
	case 36:
		resp->insertBoolean(isDizzied());
		break;
	case 37:
		resp->insertBoolean(isStunned());
		break;
	case 38:
		resp->insertBoolean(isBlinded());
		break;
	case 39:
		resp->insertBoolean(isIntimidated());
		break;
	case 40:
		resp->insertBoolean(isSnared());
		break;
	case 41:
		resp->insertBoolean(isRooted());
		break;
	case 42:
		resp->insertBoolean(isDiseased());
		break;
	case 43:
		resp->insertBoolean(isPoisoned());
		break;
	case 44:
		resp->insertBoolean(isBleeding());
		break;
	case 45:
		resp->insertBoolean(isOnFire());
		break;
	case 46:
		resp->insertBoolean(isMounted());
		break;
	case 47:
		resp->insertBoolean(isRidingCreature());
		break;
	case 48:
		resp->insertBoolean(isMeditating());
		break;
	case 49:
		resp->insertBoolean(isCreature());
		break;
	case 50:
		resp->insertBoolean(isNPC());
		break;
	case 51:
		resp->insertBoolean(isMount());
		break;
	case 52:
		resp->insertBoolean(isBerserked());
		break;
	case 53:
		resp->insertBoolean(isTanoObjEquipped((TangibleObject*) inv->getObjectParameter()));
		break;
	case 54:
		resp->insertBoolean(isVehicle());
		break;
	case 55:
		resp->insertBoolean(isPet());
		break;
	case 56:
		resp->insertBoolean(hatesFaction(inv->getUnsignedIntParameter()));
		break;
	case 57:
		updateKnockdownRecovery();
		break;
	case 58:
		updateMood(inv->getAsciiParameter(_param0_updateMood__String_));
		break;
	case 59:
		resp->insertBoolean(checkKnockdownRecovery());
		break;
	case 60:
		updatePostureDownRecovery();
		break;
	case 61:
		updatePostureUpRecovery();
		break;
	case 62:
		resp->insertBoolean(checkPostureDownRecovery());
		break;
	case 63:
		resp->insertBoolean(checkPostureUpRecovery());
		break;
	case 64:
		resp->insertBoolean(setState(inv->getUnsignedLongParameter()));
		break;
	case 65:
		resp->insertBoolean(clearState(inv->getUnsignedLongParameter()));
		break;
	case 66:
		updateDotStates(inv->getUnsignedLongParameter(), inv->getUnsignedLongParameter());
		break;
	case 67:
		updateStates();
		break;
	case 68:
		clearStates();
		break;
	case 69:
		resp->insertFloat(calculateBFRatio());
		break;
	case 70:
		removeState(inv->getUnsignedLongParameter());
		break;
	case 71:
		resetHAMBars(inv->getBooleanParameter());
		break;
	case 72:
		resp->insertBoolean(changeHAMBars(inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 73:
		resp->insertBoolean(changeHAMWounds(inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 74:
		changeMaxHAMBars(inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter());
		break;
	case 75:
		resp->insertBoolean(changeAttributeBar(inv->getUnsignedCharParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 76:
		resp->insertBoolean(changeHealthBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 77:
		resp->insertBoolean(changeStrengthBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 78:
		resp->insertBoolean(changeConstitutionBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 79:
		resp->insertBoolean(changeActionBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 80:
		resp->insertBoolean(changeQuicknessBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 81:
		resp->insertBoolean(changeStaminaBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 82:
		resp->insertBoolean(changeMindBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 83:
		resp->insertBoolean(changeFocusBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 84:
		resp->insertBoolean(changeWillpowerBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 85:
		changeMaxAttributeBar(inv->getUnsignedCharParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 86:
		changeMaxHealthBar(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 87:
		changeMaxStrengthBar(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 88:
		changeMaxConstitutionBar(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 89:
		changeMaxActionBar(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 90:
		changeMaxQuicknessBar(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 91:
		changeMaxStaminaBar(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 92:
		changeMaxMindBar(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 93:
		changeMaxFocusBar(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 94:
		changeMaxWillpowerBar(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 95:
		resp->insertBoolean(changeWoundsBar(inv->getUnsignedCharParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 96:
		resp->insertBoolean(changeHealthWoundsBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 97:
		resp->insertBoolean(changeStrengthWoundsBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 98:
		resp->insertBoolean(changeConstitutionWoundsBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 99:
		resp->insertBoolean(changeActionWoundsBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 100:
		resp->insertBoolean(changeQuicknessWoundsBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 101:
		resp->insertBoolean(changeStaminaWoundsBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 102:
		resp->insertBoolean(changeMindWoundsBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 103:
		resp->insertBoolean(changeFocusWoundsBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 104:
		resp->insertBoolean(changeWillpowerWoundsBar(inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 105:
		changeShockWounds(inv->getSignedIntParameter());
		break;
	case 106:
		setAttributeBar(inv->getUnsignedCharParameter(), inv->getSignedIntParameter());
		break;
	case 107:
		setHealthBar(inv->getSignedIntParameter());
		break;
	case 108:
		setStrengthBar(inv->getSignedIntParameter());
		break;
	case 109:
		setConstitutionBar(inv->getSignedIntParameter());
		break;
	case 110:
		setActionBar(inv->getSignedIntParameter());
		break;
	case 111:
		setQuicknessBar(inv->getSignedIntParameter());
		break;
	case 112:
		setStaminaBar(inv->getSignedIntParameter());
		break;
	case 113:
		setMindBar(inv->getSignedIntParameter());
		break;
	case 114:
		setFocusBar(inv->getSignedIntParameter());
		break;
	case 115:
		setWillpowerBar(inv->getSignedIntParameter());
		break;
	case 116:
		setBaseAttributeBar(inv->getUnsignedCharParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 117:
		setBaseHealthBar(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 118:
		setBaseStrengthBar(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 119:
		setBaseConstitutionBar(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 120:
		setBaseActionBar(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 121:
		setBaseQuicknessBar(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 122:
		setBaseStaminaBar(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 123:
		setBaseMindBar(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 124:
		setBaseFocusBar(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 125:
		setBaseWillpowerBar(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 126:
		setMaxAttributeBar(inv->getUnsignedCharParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 127:
		setMaxHealthBar(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 128:
		setMaxStrengthBar(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 129:
		setMaxConstitutionBar(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 130:
		setMaxActionBar(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 131:
		setMaxQuicknessBar(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 132:
		setMaxStaminaBar(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 133:
		setMaxMindBar(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 134:
		setMaxFocusBar(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 135:
		setMaxWillpowerBar(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 136:
		setWoundsBar(inv->getUnsignedCharParameter(), inv->getSignedIntParameter());
		break;
	case 137:
		setHealthWoundsBar(inv->getSignedIntParameter());
		break;
	case 138:
		setStrengthWoundsBar(inv->getSignedIntParameter());
		break;
	case 139:
		setConstitutionWoundsBar(inv->getSignedIntParameter());
		break;
	case 140:
		setActionWoundsBar(inv->getSignedIntParameter());
		break;
	case 141:
		setQuicknessWoundsBar(inv->getSignedIntParameter());
		break;
	case 142:
		setStaminaWoundsBar(inv->getSignedIntParameter());
		break;
	case 143:
		setMindWoundsBar(inv->getSignedIntParameter());
		break;
	case 144:
		setFocusWoundsBar(inv->getSignedIntParameter());
		break;
	case 145:
		setWillpowerWoundsBar(inv->getSignedIntParameter());
		break;
	case 146:
		resp->insertBoolean(hasAttackDelay());
		break;
	case 147:
		clearAttackDelay();
		break;
	case 148:
		activateBurstRun(inv->getBooleanParameter());
		break;
	case 149:
		resp->insertBoolean(hasQueuedState(inv->getUnsignedIntParameter()));
		break;
	case 150:
		resp->insertBoolean(removeQueuedState(inv->getUnsignedIntParameter()));
		break;
	case 151:
		resp->insertBoolean(addQueuedState(inv->getUnsignedIntParameter()));
		break;
	case 152:
		setMeditateState();
		break;
	case 153:
		removePowerboost();
		break;
	case 154:
		resp->insertBoolean(isGuilded());
		break;
	case 155:
		removeGroup();
		break;
	case 156:
		resp->insertLong(getGroupObject()->_getObjectID());
		break;
	case 157:
		resp->insertBoolean(isInAGroup());
		break;
	case 158:
		resp->insertBoolean(isInGroupWith((CreatureObject*) inv->getObjectParameter()));
		break;
	case 159:
		setGroupID(inv->getUnsignedLongParameter());
		break;
	case 160:
		updateGroupId(inv->getUnsignedLongParameter());
		break;
	case 161:
		updateGroupInviterId(inv->getUnsignedLongParameter());
		break;
	case 162:
		updateTarget(inv->getUnsignedLongParameter());
		break;
	case 163:
		updateTarget((SceneObject*) inv->getObjectParameter());
		break;
	case 164:
		clearTarget();
		break;
	case 165:
		setActionCounter(inv->getUnsignedIntParameter());
		break;
	case 166:
		setWeapon((Weapon*) inv->getObjectParameter());
		break;
	case 167:
		setCreatureLinkID(inv->getUnsignedLongParameter());
		break;
	case 168:
		setAccuracy(inv->getSignedIntParameter());
		break;
	case 169:
		setAccuracyBonus(inv->getSignedIntParameter());
		break;
	case 170:
		setDamageBonus(inv->getSignedIntParameter());
		break;
	case 171:
		setDefenseBonus(inv->getSignedIntParameter());
		break;
	case 172:
		setLastMovementUpdateStamp(inv->getUnsignedIntParameter());
		break;
	case 173:
		setIgnoreMovementTests(inv->getSignedIntParameter());
		break;
	case 174:
		setLevel(inv->getUnsignedIntParameter());
		break;
	case 175:
		setHealthEncumbrance(inv->getUnsignedIntParameter());
		break;
	case 176:
		setActionEncumbrance(inv->getUnsignedIntParameter());
		break;
	case 177:
		setMindEncumbrance(inv->getUnsignedIntParameter());
		break;
	case 178:
		changeHealthEncumbrance(inv->getSignedIntParameter());
		break;
	case 179:
		changeActionEncumbrance(inv->getSignedIntParameter());
		break;
	case 180:
		changeMindEncumbrance(inv->getSignedIntParameter());
		break;
	case 181:
		updateServerMovementStamp();
		break;
	case 182:
		resp->insertLong(getInventoryItem(inv->getUnsignedLongParameter())->_getObjectID());
		break;
	case 183:
		removeAllUnequippedInventory();
		break;
	case 184:
		removeInventoryItem(inv->getUnsignedLongParameter());
		break;
	case 185:
		removeInventoryItem((SceneObject*) inv->getObjectParameter());
		break;
	case 186:
		resp->insertLong(getLootItem(inv->getUnsignedLongParameter())->_getObjectID());
		break;
	case 187:
		removeLootItem(inv->getUnsignedLongParameter());
		break;
	case 188:
		resp->insertLong(getBankItem(inv->getUnsignedLongParameter())->_getObjectID());
		break;
	case 189:
		removeBankItem(inv->getUnsignedLongParameter());
		break;
	case 190:
		resp->insertLong(getInventory()->_getObjectID());
		break;
	case 191:
		resp->insertLong(getLootContainer()->_getObjectID());
		break;
	case 192:
		resp->insertLong(getBankContainer()->_getObjectID());
		break;
	case 193:
		resp->insertLong(getBankInventory()->_getObjectID());
		break;
	case 194:
		resp->insertLong(getNewItemID());
		break;
	case 195:
		resp->insertLong(getWeapon()->_getObjectID());
		break;
	case 196:
		resp->insertLong(getArmor(inv->getSignedIntParameter())->_getObjectID());
		break;
	case 197:
		addSkillMod(inv->getAsciiParameter(_param0_addSkillMod__String_int_bool_), inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 198:
		resp->insertSignedInt(getSkillMod(inv->getAsciiParameter(_param0_getSkillMod__String_)));
		break;
	case 199:
		resp->insertBoolean(hasSkillMod(inv->getAsciiParameter(_param0_hasSkillMod__String_)));
		break;
	case 200:
		resp->insertSignedInt(getSkillModBonus(inv->getAsciiParameter(_param0_getSkillModBonus__String_)));
		break;
	case 201:
		addSkillModBonus(inv->getAsciiParameter(_param0_addSkillModBonus__String_int_bool_), inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 202:
		resp->insertBoolean(hasSkillModBonus(inv->getAsciiParameter(_param0_hasSkillModBonus__String_)));
		break;
	case 203:
		resp->insertSignedInt(getAccuracy());
		break;
	case 204:
		resp->insertSignedInt(getAccuracyBonus());
		break;
	case 205:
		resp->insertSignedInt(getDefenseBonus());
		break;
	case 206:
		resp->insertSignedInt(getDamageBonus());
		break;
	case 207:
		resp->insertSignedInt(getConditionDamage());
		break;
	case 208:
		resp->insertSignedInt(getMaxCondition());
		break;
	case 209:
		resp->insertSignedInt(getCondition());
		break;
	case 210:
		resp->insertLong(getMount()->_getObjectID());
		break;
	case 211:
		resp->insertLong(getLastServerMovementStamp());
		break;
	case 212:
		resp->insertLong(getCreatureLinkID());
		break;
	case 213:
		resp->insertFloat(getDistanceTo((SceneObject*) inv->getObjectParameter()));
		break;
	case 214:
		resp->insertFloat(getHeight());
		break;
	case 215:
		resp->insertInt(getCreatureSkillsCount());
		break;
	case 216:
		resp->insertInt(getNewCreatureSkillsCount(inv->getSignedIntParameter()));
		break;
	case 217:
		resp->insertInt(getLastMovementUpdateStamp());
		break;
	case 218:
		resp->insertSignedInt(getIgnoreMovementTests());
		break;
	case 219:
		resp->insertInt(getLevel());
		break;
	case 220:
		resp->insertSignedInt(getCenteredBonus());
		break;
	case 221:
		sendSystemMessage(inv->getAsciiParameter(_param0_sendSystemMessage__String_));
		break;
	case 222:
		sendSystemMessage(inv->getUnicodeParameter(_param0_sendSystemMessage__UnicodeString_));
		break;
	case 223:
		sendSystemMessage(inv->getAsciiParameter(_param0_sendSystemMessage__String_String_long_), inv->getAsciiParameter(_param1_sendSystemMessage__String_String_long_), inv->getUnsignedLongParameter());
		break;
	case 224:
		updateSpeed(inv->getFloatParameter(), inv->getFloatParameter());
		break;
	case 225:
		addInventoryItem((TangibleObject*) inv->getObjectParameter());
		break;
	case 226:
		addInventoryResource((ResourceContainer*) inv->getObjectParameter());
		break;
	case 227:
		addLootItem((TangibleObject*) inv->getObjectParameter());
		break;
	case 228:
		startDancing(inv->getAsciiParameter(_param0_startDancing__String_bool_), inv->getBooleanParameter());
		break;
	case 229:
		startPlayingMusic(inv->getAsciiParameter(_param0_startPlayingMusic__String_bool_), inv->getBooleanParameter());
		break;
	case 230:
		startWatch(inv->getUnsignedLongParameter());
		break;
	case 231:
		startListen(inv->getUnsignedLongParameter());
		break;
	case 232:
		stopWatch(inv->getUnsignedLongParameter(), inv->getBooleanParameter(), inv->getBooleanParameter(), inv->getBooleanParameter(), inv->getBooleanParameter());
		break;
	case 233:
		stopListen(inv->getUnsignedLongParameter(), inv->getBooleanParameter(), inv->getBooleanParameter(), inv->getBooleanParameter(), inv->getBooleanParameter());
		break;
	case 234:
		resp->insertBoolean(isPlayingMusic());
		break;
	case 235:
		resp->insertBoolean(isDancing());
		break;
	case 236:
		stopDancing();
		break;
	case 237:
		stopPlayingMusic();
		break;
	case 238:
		addListener((CreatureObject*) inv->getObjectParameter());
		break;
	case 239:
		addWatcher((CreatureObject*) inv->getObjectParameter());
		break;
	case 240:
		removeListener((CreatureObject*) inv->getObjectParameter());
		break;
	case 241:
		removeWatcher((CreatureObject*) inv->getObjectParameter());
		break;
	case 242:
		doFlourish(inv->getAsciiParameter(_param0_doFlourish__String_));
		break;
	case 243:
		doPerformanceAction();
		break;
	case 244:
		doEntertainerPatronEffects();
		break;
	case 245:
		addEntertainerFlourishBuff();
		break;
	case 246:
		addEntertainerBuffDuration(inv->getSignedIntParameter(), inv->getFloatParameter());
		break;
	case 247:
		setEntertainerBuffDuration(inv->getSignedIntParameter(), inv->getFloatParameter());
		break;
	case 248:
		resp->insertFloat(getEntertainerBuffDuration(inv->getSignedIntParameter()));
		break;
	case 249:
		setEntertainerBuffStrength(inv->getSignedIntParameter(), inv->getFloatParameter());
		break;
	case 250:
		resp->insertFloat(getEntertainerBuffStrength(inv->getSignedIntParameter()));
		break;
	case 251:
		activateRecovery();
		break;
	case 252:
		resp->insertSignedInt(getCreatureSkillsSize());
		break;
	case 253:
		resp->insertAscii(getSkill(inv->getSignedIntParameter()));
		break;
	case 254:
		resp->insertBoolean(hasSkill(inv->getUnsignedIntParameter()));
		break;
	case 255:
		resp->insertAscii(getSkillOrCertification(inv->getSignedIntParameter()));
		break;
	case 256:
		resp->insertSignedInt(getSkillAndCertificationSize());
		break;
	case 257:
		sendConversationStartTo((SceneObject*) inv->getObjectParameter());
		break;
	case 258:
		selectConversationOption(inv->getSignedIntParameter(), (SceneObject*) inv->getObjectParameter());
		break;
	case 259:
		sendConversationStopTo((SceneObject*) inv->getObjectParameter());
		break;
	case 260:
		addConvoScreen(inv->getAsciiParameter(_param0_addConvoScreen__String_String_int_String_String_), inv->getAsciiParameter(_param1_addConvoScreen__String_String_int_String_String_), inv->getSignedIntParameter(), inv->getAsciiParameter(_param3_addConvoScreen__String_String_int_String_String_), inv->getAsciiParameter(_param4_addConvoScreen__String_String_int_String_String_));
		break;
	case 261:
		sendConvoScreen((Player*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_sendConvoScreen__Player_String_));
		break;
	case 262:
		mountCreature((CreatureObject*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 263:
		dismount(inv->getBooleanParameter(), inv->getBooleanParameter());
		break;
	case 264:
		addCashCredits(inv->getUnsignedIntParameter());
		break;
	case 265:
		addBankCredits(inv->getUnsignedIntParameter());
		break;
	case 266:
		updateCashCredits(inv->getUnsignedIntParameter());
		break;
	case 267:
		updateBankCredits(inv->getUnsignedIntParameter());
		break;
	case 268:
		subtractCashCredits(inv->getUnsignedIntParameter());
		break;
	case 269:
		subtractBankCredits(inv->getUnsignedIntParameter());
		break;
	case 270:
		setCashCredits(inv->getSignedIntParameter());
		break;
	case 271:
		setBankCredits(inv->getSignedIntParameter());
		break;
	case 272:
		addBuff(inv->getSignedIntParameter(), inv->getFloatParameter());
		break;
	case 273:
		applyBuff((BuffObject*) inv->getObjectParameter());
		break;
	case 274:
		removeBuff(inv->getUnsignedIntParameter(), inv->getBooleanParameter());
		break;
	case 275:
		resp->insertBoolean(hasSpice());
		break;
	case 276:
		resp->insertBoolean(verifyCashCredits(inv->getUnsignedIntParameter()));
		break;
	case 277:
		resp->insertBoolean(verifyBankCredits(inv->getUnsignedIntParameter()));
		break;
	case 278:
		resp->insertBoolean(isOnFullHealth());
		break;
	case 279:
		resp->insertBoolean(hasStates());
		break;
	case 280:
		resp->insertBoolean(hasState(inv->getUnsignedLongParameter()));
		break;
	case 281:
		resp->insertBoolean(isResuscitable());
		break;
	case 282:
		setTimeOfDeath(inv->getUnsignedLongParameter());
		break;
	case 283:
		resp->insertLong(getTimeOfDeath());
		break;
	case 284:
		resp->insertBoolean(hasHealthDamage());
		break;
	case 285:
		resp->insertBoolean(hasActionDamage());
		break;
	case 286:
		resp->insertBoolean(hasMindDamage());
		break;
	case 287:
		resp->insertBoolean(hasDamage());
		break;
	case 288:
		resp->insertBoolean(hasWounds(inv->getBooleanParameter(), inv->getBooleanParameter(), inv->getBooleanParameter()));
		break;
	case 289:
		resp->insertBoolean(hasWound(inv->getUnsignedCharParameter()));
		break;
	case 290:
		resp->insertBoolean(hasShockWounds());
		break;
	case 291:
		resp->insertByte(getNextWoundedAttribute(inv->getBooleanParameter(), inv->getBooleanParameter(), inv->getBooleanParameter()));
		break;
	case 292:
		resp->insertBoolean(isAttackable());
		break;
	case 293:
		resp->insertBoolean(isAttackableBy((CreatureObject*) inv->getObjectParameter()));
		break;
	case 294:
		resp->insertBoolean(isListening());
		break;
	case 295:
		resp->insertBoolean(isWatching());
		break;
	case 296:
		resp->insertUnicode(getCharacterName());
		break;
	case 297:
		resp->insertAscii(getRaceName());
		break;
	case 298:
		resp->insertAscii(getGender());
		break;
	case 299:
		resp->insertAscii(getCreatureType());
		break;
	case 300:
		resp->insertAscii(getTerrainName());
		break;
	case 301:
		getHairAppearance(inv->getAsciiParameter(_param0_getHairAppearance__String_));
		break;
	case 302:
		resp->insertBoolean(isOvert());
		break;
	case 303:
		resp->insertLong(getStateBitmask());
		break;
	case 304:
		resp->insertByte(getPosture());
		break;
	case 305:
		resp->insertInt(getFaction());
		break;
	case 306:
		resp->insertBoolean(isRebel());
		break;
	case 307:
		resp->insertBoolean(isNeutral());
		break;
	case 308:
		resp->insertBoolean(isImperial());
		break;
	case 309:
		resp->insertInt(getPvpStatusBitmask());
		break;
	case 310:
		resp->insertByte(getFactionRank());
		break;
	case 311:
		resp->insertInt(getBankCredits());
		break;
	case 312:
		resp->insertInt(getCashCredits());
		break;
	case 313:
		resp->insertInt(getWoundsUpdateCounter());
		break;
	case 314:
		resp->insertInt(getNewWoundsUpdateCounter(inv->getSignedIntParameter()));
		break;
	case 315:
		updateHAMBars();
		break;
	case 316:
		updateBaseStats();
		break;
	case 317:
		resp->insertSignedInt(getBaseAttribute(inv->getUnsignedCharParameter()));
		break;
	case 318:
		resp->insertSignedInt(getBaseHealth());
		break;
	case 319:
		resp->insertSignedInt(getBaseStrength());
		break;
	case 320:
		resp->insertSignedInt(getBaseConstitution());
		break;
	case 321:
		resp->insertSignedInt(getBaseAction());
		break;
	case 322:
		resp->insertSignedInt(getBaseQuickness());
		break;
	case 323:
		resp->insertSignedInt(getBaseStamina());
		break;
	case 324:
		resp->insertSignedInt(getBaseMind());
		break;
	case 325:
		resp->insertSignedInt(getBaseFocus());
		break;
	case 326:
		resp->insertSignedInt(getBaseWillpower());
		break;
	case 327:
		resp->insertSignedInt(getAttribute(inv->getUnsignedCharParameter()));
		break;
	case 328:
		resp->insertSignedInt(getHealth());
		break;
	case 329:
		resp->insertSignedInt(getStrength());
		break;
	case 330:
		resp->insertSignedInt(getConstitution());
		break;
	case 331:
		resp->insertSignedInt(getAction());
		break;
	case 332:
		resp->insertSignedInt(getQuickness());
		break;
	case 333:
		resp->insertSignedInt(getStamina());
		break;
	case 334:
		resp->insertSignedInt(getMind());
		break;
	case 335:
		resp->insertSignedInt(getFocus());
		break;
	case 336:
		resp->insertSignedInt(getWillpower());
		break;
	case 337:
		resp->insertSignedInt(getAttributeMax(inv->getUnsignedCharParameter()));
		break;
	case 338:
		resp->insertSignedInt(getHealthMax());
		break;
	case 339:
		resp->insertSignedInt(getStrengthMax());
		break;
	case 340:
		resp->insertSignedInt(getConstitutionMax());
		break;
	case 341:
		resp->insertSignedInt(getActionMax());
		break;
	case 342:
		resp->insertSignedInt(getQuicknessMax());
		break;
	case 343:
		resp->insertSignedInt(getStaminaMax());
		break;
	case 344:
		resp->insertSignedInt(getMindMax());
		break;
	case 345:
		resp->insertSignedInt(getFocusMax());
		break;
	case 346:
		resp->insertSignedInt(getWillpowerMax());
		break;
	case 347:
		resp->insertSignedInt(getWounds(inv->getUnsignedCharParameter()));
		break;
	case 348:
		resp->insertByte(getWoundsArraySize());
		break;
	case 349:
		resp->insertSignedInt(getHealthWounds());
		break;
	case 350:
		resp->insertSignedInt(getStrengthWounds());
		break;
	case 351:
		resp->insertSignedInt(getConstitutionWounds());
		break;
	case 352:
		resp->insertSignedInt(getActionWounds());
		break;
	case 353:
		resp->insertSignedInt(getQuicknessWounds());
		break;
	case 354:
		resp->insertSignedInt(getStaminaWounds());
		break;
	case 355:
		resp->insertSignedInt(getMindWounds());
		break;
	case 356:
		resp->insertSignedInt(getFocusWounds());
		break;
	case 357:
		resp->insertSignedInt(getWillpowerWounds());
		break;
	case 358:
		resp->insertInt(getAttributeDamage(inv->getUnsignedCharParameter()));
		break;
	case 359:
		resp->insertInt(getHealthDamage());
		break;
	case 360:
		resp->insertInt(getActionDamage());
		break;
	case 361:
		resp->insertInt(getMindDamage());
		break;
	case 362:
		resp->insertInt(getShockWounds());
		break;
	case 363:
		resp->insertInt(getHAMUpdateCounter());
		break;
	case 364:
		resp->insertInt(getNewHAMUpdateCounter(inv->getSignedIntParameter()));
		break;
	case 365:
		resp->insertInt(getHAMMaxUpdateCounter());
		break;
	case 366:
		resp->insertInt(getNewHAMMaxUpdateCounter(inv->getSignedIntParameter()));
		break;
	case 367:
		resp->insertInt(getHAMBaseUpdateCounter());
		break;
	case 368:
		resp->insertInt(getNewHAMBaseUpdateCounter(inv->getSignedIntParameter()));
		break;
	case 369:
		resp->insertInt(getEncumbUpdateCounter());
		break;
	case 370:
		resp->insertInt(getNewEncumbUpdateCounter(inv->getSignedIntParameter()));
		break;
	case 371:
		resp->insertInt(getHealthEncumbrance());
		break;
	case 372:
		resp->insertInt(getActionEncumbrance());
		break;
	case 373:
		resp->insertInt(getMindEncumbrance());
		break;
	case 374:
		resp->insertSignedInt(getpbHA());
		break;
	case 375:
		resp->insertSignedInt(getpbMind());
		break;
	case 376:
		resp->insertSignedInt(getpbTick());
		break;
	case 377:
		resp->insertSignedInt(getpbBonus());
		break;
	case 378:
		resp->insertLong(getTargetID());
		break;
	case 379:
		resp->insertLong(getTarget()->_getObjectID());
		break;
	case 380:
		resp->insertLong(getWeaponID());
		break;
	case 381:
		resp->insertLong(getGroupID());
		break;
	case 382:
		resp->insertLong(getGuildID());
		break;
	case 383:
		resp->insertLong(getGuild()->_getObjectID());
		break;
	case 384:
		resp->insertInt(getActionCounter());
		break;
	case 385:
		resp->insertFloat(getSpeed());
		break;
	case 386:
		resp->insertFloat(getAcceleration());
		break;
	case 387:
		resp->insertAscii(getPerformanceAnimation());
		break;
	case 388:
		resp->insertInt(getPerformanceCounter());
		break;
	case 389:
		resp->insertInt(getInstrumentID());
		break;
	case 390:
		resp->insertSignedInt(getInstrumentType());
		break;
	case 391:
		resp->insertAscii(getPerformanceName());
		break;
	case 392:
		resp->insertAscii(getMood());
		break;
	case 393:
		resp->insertAscii(getMoodStr());
		break;
	case 394:
		resp->insertByte(getMoodID());
		break;
	case 395:
		resp->insertLong(getGroupInviterID());
		break;
	case 396:
		resp->insertLong(getGroupInviteCounter());
		break;
	case 397:
		resp->insertLong(getNewGroupInviteCounter());
		break;
	case 398:
		resp->insertLong(getWatchID());
		break;
	case 399:
		resp->insertLong(getListenID());
		break;
	case 400:
		resp->insertBoolean(isInBuilding());
		break;
	case 401:
		resp->insertSignedInt(getBuildingType());
		break;
	case 402:
		resp->insertLong(getBuilding()->_getObjectID());
		break;
	case 403:
		resp->insertAscii(getGuildName());
		break;
	case 404:
		resp->insertSignedInt(getWeaponSpeedModifier());
		break;
	case 405:
		resp->insertInt(getSkillBoxesUpdateCounter());
		break;
	case 406:
		resp->insertInt(getSkillModsCounter());
		break;
	case 407:
		resp->insertInt(getNewSkillModsCounter(inv->getSignedIntParameter()));
		break;
	case 408:
		resp->insertAscii(getHideType());
		break;
	case 409:
		resp->insertAscii(getBoneType());
		break;
	case 410:
		resp->insertAscii(getMeatType());
		break;
	case 411:
		resp->insertSignedInt(getBoneMax());
		break;
	case 412:
		resp->insertSignedInt(getHideMax());
		break;
	case 413:
		resp->insertSignedInt(getMeatMax());
		break;
	case 414:
		resp->insertSignedInt(getMilk());
		break;
	case 415:
		resp->insertBoolean(hasOrganics());
		break;
	case 416:
		resp->insertSignedInt(getCreatureHealth());
		break;
	case 417:
		resp->insertSignedInt(getXP());
		break;
	case 418:
		resp->insertSignedInt(isHealer());
		break;
	case 419:
		resp->insertSignedInt(isPack());
		break;
	case 420:
		resp->insertSignedInt(isHerd());
		break;
	case 421:
		resp->insertSignedInt(isStalker());
		break;
	case 422:
		resp->insertSignedInt(isKiller());
		break;
	case 423:
		resp->insertSignedInt(isAggressive());
		break;
	case 424:
		resp->insertAscii(getBehaviorScript());
		break;
	case 425:
		resp->insertAscii(getCreatureFaction());
		break;
	case 426:
		resp->insertAscii(getCreatureWeapon());
		break;
	case 427:
		resp->insertAscii(getCreatureWeaponName());
		break;
	case 428:
		resp->insertAscii(getCreatureWeaponTemp());
		break;
	case 429:
		resp->insertAscii(getCreatureWeaponClass());
		break;
	case 430:
		resp->insertSignedInt(getCreatureWeaponEquipped());
		break;
	case 431:
		resp->insertSignedInt(getCreatureWeaponMinDamage());
		break;
	case 432:
		resp->insertSignedInt(getCreatureWeaponMaxDamage());
		break;
	case 433:
		resp->insertFloat(getCreatureWeaponAttackSpeed());
		break;
	case 434:
		resp->insertAscii(getCreatureWeaponDamageType());
		break;
	case 435:
		resp->insertAscii(getCreatureWeaponArmorPiercing());
		break;
	case 436:
		resp->insertFloat(getInternalNPCDamageModifier());
		break;
	case 437:
		resp->insertFloat(getTame());
		break;
	case 438:
		resp->insertAscii(getLootGroup());
		break;
	case 439:
		resp->insertInt(getFerocity());
		break;
	case 440:
		resp->insertBoolean(isBaby());
		break;
	case 441:
		setBaseAttribute(inv->getUnsignedCharParameter(), inv->getSignedIntParameter());
		break;
	case 442:
		setBaseHealth(inv->getSignedIntParameter());
		break;
	case 443:
		setBaseStrength(inv->getSignedIntParameter());
		break;
	case 444:
		setBaseConstitution(inv->getSignedIntParameter());
		break;
	case 445:
		setBaseAction(inv->getSignedIntParameter());
		break;
	case 446:
		setBaseQuickness(inv->getSignedIntParameter());
		break;
	case 447:
		setBaseStamina(inv->getSignedIntParameter());
		break;
	case 448:
		setBaseMind(inv->getSignedIntParameter());
		break;
	case 449:
		setBaseFocus(inv->getSignedIntParameter());
		break;
	case 450:
		setBaseWillpower(inv->getSignedIntParameter());
		break;
	case 451:
		setAttribute(inv->getUnsignedCharParameter(), inv->getSignedIntParameter());
		break;
	case 452:
		setHealth(inv->getSignedIntParameter());
		break;
	case 453:
		setStrength(inv->getSignedIntParameter());
		break;
	case 454:
		setConstitution(inv->getSignedIntParameter());
		break;
	case 455:
		setAction(inv->getSignedIntParameter());
		break;
	case 456:
		setQuickness(inv->getSignedIntParameter());
		break;
	case 457:
		setStamina(inv->getSignedIntParameter());
		break;
	case 458:
		setMind(inv->getSignedIntParameter());
		break;
	case 459:
		setFocus(inv->getSignedIntParameter());
		break;
	case 460:
		setWillpower(inv->getSignedIntParameter());
		break;
	case 461:
		setAttributeMax(inv->getUnsignedCharParameter(), inv->getSignedIntParameter());
		break;
	case 462:
		setHealthMax(inv->getSignedIntParameter());
		break;
	case 463:
		setStrengthMax(inv->getSignedIntParameter());
		break;
	case 464:
		setConstitutionMax(inv->getSignedIntParameter());
		break;
	case 465:
		setActionMax(inv->getSignedIntParameter());
		break;
	case 466:
		setQuicknessMax(inv->getSignedIntParameter());
		break;
	case 467:
		setStaminaMax(inv->getSignedIntParameter());
		break;
	case 468:
		setMindMax(inv->getSignedIntParameter());
		break;
	case 469:
		setFocusMax(inv->getSignedIntParameter());
		break;
	case 470:
		setWillpowerMax(inv->getSignedIntParameter());
		break;
	case 471:
		setWounds(inv->getUnsignedCharParameter(), inv->getSignedIntParameter());
		break;
	case 472:
		setHealthWounds(inv->getSignedIntParameter());
		break;
	case 473:
		setStrengthWounds(inv->getSignedIntParameter());
		break;
	case 474:
		setConstitutionWounds(inv->getSignedIntParameter());
		break;
	case 475:
		setActionWounds(inv->getSignedIntParameter());
		break;
	case 476:
		setQuicknessWounds(inv->getSignedIntParameter());
		break;
	case 477:
		setStaminaWounds(inv->getSignedIntParameter());
		break;
	case 478:
		setMindWounds(inv->getSignedIntParameter());
		break;
	case 479:
		setFocusWounds(inv->getSignedIntParameter());
		break;
	case 480:
		setWillpowerWounds(inv->getSignedIntParameter());
		break;
	case 481:
		setShockWounds(inv->getSignedIntParameter());
		break;
	case 482:
		setWoundsUpdateCounter(inv->getUnsignedIntParameter());
		break;
	case 483:
		changeAttributeMax(inv->getUnsignedCharParameter(), inv->getSignedIntParameter());
		break;
	case 484:
		changeHealthMax(inv->getSignedIntParameter());
		break;
	case 485:
		changeStrengthMax(inv->getSignedIntParameter());
		break;
	case 486:
		changeConstitutionMax(inv->getSignedIntParameter());
		break;
	case 487:
		changeActionMax(inv->getSignedIntParameter());
		break;
	case 488:
		changeQuicknessMax(inv->getSignedIntParameter());
		break;
	case 489:
		changeStaminaMax(inv->getSignedIntParameter());
		break;
	case 490:
		changeMindMax(inv->getSignedIntParameter());
		break;
	case 491:
		changeFocusMax(inv->getSignedIntParameter());
		break;
	case 492:
		changeWillpowerMax(inv->getSignedIntParameter());
		break;
	case 493:
		changeAttribute(inv->getUnsignedCharParameter(), inv->getSignedIntParameter());
		break;
	case 494:
		changeHealth(inv->getSignedIntParameter());
		break;
	case 495:
		changeStrength(inv->getSignedIntParameter());
		break;
	case 496:
		changeConstitution(inv->getSignedIntParameter());
		break;
	case 497:
		changeAction(inv->getSignedIntParameter());
		break;
	case 498:
		changeQuickness(inv->getSignedIntParameter());
		break;
	case 499:
		changeStamina(inv->getSignedIntParameter());
		break;
	case 500:
		changeMind(inv->getSignedIntParameter());
		break;
	case 501:
		changeFocus(inv->getSignedIntParameter());
		break;
	case 502:
		changeWillpower(inv->getSignedIntParameter());
		break;
	case 503:
		setpbHA(inv->getSignedIntParameter());
		break;
	case 504:
		setpbMind(inv->getSignedIntParameter());
		break;
	case 505:
		setpbTick(inv->getSignedIntParameter());
		break;
	case 506:
		setpbBonus(inv->getUnsignedIntParameter());
		break;
	case 507:
		setSpeed(inv->getFloatParameter());
		break;
	case 508:
		setAcceleration(inv->getFloatParameter());
		break;
	case 509:
		changeConditionDamage(inv->getSignedIntParameter());
		break;
	case 510:
		setMaxCondition(inv->getSignedIntParameter());
		break;
	case 511:
		setPosture(inv->getUnsignedCharParameter(), inv->getBooleanParameter(), inv->getBooleanParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter());
		break;
	case 512:
		setPvpStatusBitmask(inv->getUnsignedIntParameter());
		break;
	case 513:
		setFactionRank(inv->getUnsignedCharParameter(), inv->getBooleanParameter());
		break;
	case 514:
		setDizziedState();
		break;
	case 515:
		setStunnedState();
		break;
	case 516:
		setBlindedState();
		break;
	case 517:
		setIntimidatedState();
		break;
	case 518:
		setSnaredState();
		break;
	case 519:
		setRootedState();
		break;
	case 520:
		setBerserkedState(inv->getUnsignedIntParameter());
		break;
	case 521:
		resp->insertSignedInt(addDotState((CreatureObject*) inv->getObjectParameter(), inv->getUnsignedLongParameter(), inv->getUnsignedLongParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getFloatParameter(), inv->getSignedIntParameter()));
		break;
	case 522:
		resp->insertBoolean(healDot(inv->getSignedIntParameter(), inv->getSignedIntParameter()));
		break;
	case 523:
		resp->insertBoolean(setNextAttackDelay(inv->getSignedIntParameter()));
		break;
	case 524:
		setCharacterName(inv->getAsciiParameter(_param0_setCharacterName__String_));
		break;
	case 525:
		setCharacterName(inv->getUnicodeParameter(_param0_setCharacterName__UnicodeString_));
		break;
	case 526:
		setTerrainName(inv->getAsciiParameter(_param0_setTerrainName__String_));
		break;
	case 527:
		updateCharacterAppearance();
		break;
	case 528:
		setHairAppearance(inv->getAsciiParameter(_param0_setHairAppearance__String_));
		break;
	case 529:
		setHairAppearanceAttribute(inv->getUnsignedCharParameter(), inv->getUnsignedCharParameter());
		break;
	case 530:
		setHairAppearanceAttribute(inv->getAsciiParameter(_param0_setHairAppearanceAttribute__String_char_), inv->getUnsignedCharParameter());
		break;
	case 531:
		setRaceName(inv->getAsciiParameter(_param0_setRaceName__String_));
		break;
	case 532:
		setGender(inv->getAsciiParameter(_param0_setGender__String_));
		break;
	case 533:
		setCreatureType(inv->getAsciiParameter(_param0_setCreatureType__String_));
		break;
	case 534:
		setFaction(inv->getUnsignedIntParameter());
		break;
	case 535:
		setHeight(inv->getFloatParameter());
		break;
	case 536:
		setMood(inv->getUnsignedCharParameter());
		break;
	case 537:
		setMood(inv->getAsciiParameter(_param0_setMood__String_));
		break;
	case 538:
		setGroup((GroupObject*) inv->getObjectParameter());
		break;
	case 539:
		setMount((CreatureObject*) inv->getObjectParameter());
		break;
	case 540:
		explode(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 541:
		resp->insertLong(getBuffObject(inv->getUnsignedIntParameter())->_getObjectID());
		break;
	case 542:
		resp->insertBoolean(hasBuff(inv->getUnsignedIntParameter()));
		break;
	case 543:
		resp->insertBoolean(healState((CreatureObject*) inv->getObjectParameter(), inv->getUnsignedLongParameter()));
		break;
	case 544:
		deactivateWoundTreatment();
		break;
	case 545:
		activateWoundTreatment();
		break;
	case 546:
		deactivateInjuryTreatment(inv->getBooleanParameter());
		break;
	case 547:
		activateInjuryTreatment();
		break;
	case 548:
		deactivateStateTreatment();
		break;
	case 549:
		activateStateTreatment();
		break;
	case 550:
		deactivateConditionTreatment();
		break;
	case 551:
		activateConditionTreatment();
		break;
	case 552:
		resp->insertBoolean(canTreatWounds());
		break;
	case 553:
		resp->insertBoolean(canTreatInjuries());
		break;
	case 554:
		resp->insertBoolean(canTreatStates());
		break;
	case 555:
		resp->insertBoolean(canTreatConditions());
		break;
	case 556:
		resp->insertSignedInt(getMedicalFacilityRating());
		break;
	case 557:
		setBoneType(inv->getAsciiParameter(_param0_setBoneType__String_));
		break;
	case 558:
		setBoneMax(inv->getSignedIntParameter());
		break;
	case 559:
		setHideType(inv->getAsciiParameter(_param0_setHideType__String_));
		break;
	case 560:
		setHideMax(inv->getSignedIntParameter());
		break;
	case 561:
		setMeatType(inv->getAsciiParameter(_param0_setMeatType__String_));
		break;
	case 562:
		setMeatMax(inv->getSignedIntParameter());
		break;
	case 563:
		setMilk(inv->getSignedIntParameter());
		break;
	case 564:
		setXP(inv->getSignedIntParameter());
		break;
	case 565:
		setHealer(inv->getSignedIntParameter());
		break;
	case 566:
		setPack(inv->getSignedIntParameter());
		break;
	case 567:
		setHerd(inv->getSignedIntParameter());
		break;
	case 568:
		setStalker(inv->getSignedIntParameter());
		break;
	case 569:
		setKiller(inv->getSignedIntParameter());
		break;
	case 570:
		setAggressive(inv->getSignedIntParameter());
		break;
	case 571:
		setBehaviorScript(inv->getAsciiParameter(_param0_setBehaviorScript__String_));
		break;
	case 572:
		setLootGroup(inv->getAsciiParameter(_param0_setLootGroup__String_));
		break;
	case 573:
		setTame(inv->getFloatParameter());
		break;
	case 574:
		setCreatureFaction(inv->getAsciiParameter(_param0_setCreatureFaction__String_));
		break;
	case 575:
		setInternalNPCDamageModifier(inv->getFloatParameter());
		break;
	case 576:
		setFerocity(inv->getUnsignedIntParameter());
		break;
	case 577:
		setBaby(inv->getBooleanParameter());
		break;
	case 578:
		setCreatureWeapon(inv->getAsciiParameter(_param0_setCreatureWeapon__String_));
		break;
	case 579:
		setCreatureWeaponName(inv->getAsciiParameter(_param0_setCreatureWeaponName__String_));
		break;
	case 580:
		setCreatureWeaponTemp(inv->getAsciiParameter(_param0_setCreatureWeaponTemp__String_));
		break;
	case 581:
		setCreatureWeaponClass(inv->getAsciiParameter(_param0_setCreatureWeaponClass__String_));
		break;
	case 582:
		setCreatureWeaponEquipped(inv->getSignedIntParameter());
		break;
	case 583:
		setCreatureWeaponMinDamage(inv->getSignedIntParameter());
		break;
	case 584:
		setCreatureWeaponMaxDamage(inv->getSignedIntParameter());
		break;
	case 585:
		setCreatureWeaponAttackSpeed(inv->getFloatParameter());
		break;
	case 586:
		setCreatureWeaponDamageType(inv->getAsciiParameter(_param0_setCreatureWeaponDamageType__String_));
		break;
	case 587:
		setCreatureWeaponArmorPiercing(inv->getAsciiParameter(_param0_setCreatureWeaponArmorPiercing__String_));
		break;
	case 588:
		resp->insertBoolean(isFrozen());
		break;
	case 589:
		setFrozen(inv->getBooleanParameter());
		break;
	case 590:
		resp->insertAscii(getTemplateString());
		break;
	case 591:
		setTemplateString(inv->getAsciiParameter(_param0_setTemplateString__String_));
		break;
	case 592:
		clearTemplateString();
		break;
	case 593:
		say(inv->getUnicodeParameter(_param0_say__UnicodeString_int_int_), inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter());
		break;
	case 594:
		say(inv->getAsciiParameter(_param0_say__String_String_StfParameter_int_int_), inv->getAsciiParameter(_param1_say__String_String_StfParameter_int_int_), (StfParameter*) inv->getObjectParameter(), inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter());
		break;
	case 595:
		setCamoType(inv->getUnsignedIntParameter());
		break;
	case 596:
		resp->insertInt(getCamoType());
		break;
	case 597:
		activateCamo(inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter());
		break;
	case 598:
		deactivateCamo(inv->getBooleanParameter());
		break;
	case 599:
		activateCamoLock();
		break;
	case 600:
		resp->insertBoolean(isCamoCooldownActive());
		break;
	case 601:
		resp->insertSignedInt(getCamoCooldownLeft());
		break;
	case 602:
		resp->insertSignedInt(getMaskScent());
		break;
	case 603:
		setMaskScent(inv->getSignedIntParameter());
		break;
	case 604:
		resp->insertLong(getCamoXPTraget()->_getObjectID());
		break;
	case 605:
		setCamoXPTraget((Player*) inv->getObjectParameter());
		break;
	case 606:
		setCampModifier(inv->getSignedIntParameter());
		break;
	case 607:
		resp->insertSignedInt(getCampModifier());
		break;
	case 608:
		resp->insertBoolean(isInCamp());
		break;
	case 609:
		resp->insertSignedInt(getCampAggroMod());
		break;
	case 610:
		setCampAggroMod(inv->getSignedIntParameter());
		break;
	case 611:
		resp->insertByte(getLowestHAMAttribute());
		break;
	case 612:
		onIncapacitated((SceneObject*) inv->getObjectParameter());
		break;
	case 613:
		onIncapacitationRecovery();
		break;
	case 614:
		onConverse((Player*) inv->getObjectParameter());
		break;
	case 615:
		onDeath();
		break;
	case 616:
		onKilled((SceneObject*) inv->getObjectParameter());
		break;
	case 617:
		onResuscitated((SceneObject*) inv->getObjectParameter());
		break;
	case 618:
		onDamageHealed((SceneObject*) inv->getObjectParameter(), inv->getUnsignedCharParameter(), inv->getUnsignedIntParameter());
		break;
	case 619:
		onWoundHealed((SceneObject*) inv->getObjectParameter(), inv->getUnsignedCharParameter(), inv->getUnsignedIntParameter());
		break;
	case 620:
		onHealEnhanced((SceneObject*) inv->getObjectParameter(), inv->getUnsignedCharParameter(), inv->getUnsignedIntParameter(), inv->getFloatParameter());
		break;
	case 621:
		onBlinded();
		break;
	case 622:
		onDizzied();
		break;
	case 623:
		onStunned();
		break;
	case 624:
		onIntimidated();
		break;
	case 625:
		onEquip((TangibleObject*) inv->getObjectParameter());
		break;
	case 626:
		onUnequip((TangibleObject*) inv->getObjectParameter());
		break;
	case 627:
		onChangeWeapon((Weapon*) inv->getObjectParameter());
		break;
	case 628:
		onChangeArmor((Armor*) inv->getObjectParameter());
		break;
	case 629:
		onReceiveDamage((SceneObject*) inv->getObjectParameter(), inv->getUnsignedCharParameter(), inv->getUnsignedIntParameter());
		break;
	case 630:
		onRegenerateHAM();
		break;
	case 631:
		resp->insertBoolean(inflictDamage((CreatureObject*) inv->getObjectParameter(), inv->getUnsignedCharParameter(), inv->getUnsignedIntParameter()));
		break;
	case 632:
		incapacitateSelf();
		break;
	case 633:
		recoverFromIncapacitation();
		break;
	case 634:
		die();
		break;
	case 635:
		equipItem((TangibleObject*) inv->getObjectParameter());
		break;
	case 636:
		unequipItem((TangibleObject*) inv->getObjectParameter());
		break;
	case 637:
		resp->insertBoolean(canRecoverFromIncapacitation());
		break;
	case 638:
		setBerserkDamage(inv->getUnsignedIntParameter());
		break;
	case 639:
		resp->insertInt(getBerserkDamage());
		break;
	case 640:
		resp->insertInt(getAimMod());
		break;
	case 641:
		setAimMod(inv->getUnsignedIntParameter());
		break;
	case 642:
		resp->insertBoolean(isAiming());
		break;
	case 643:
		setAimingState();
		break;
	case 644:
		resp->insertBoolean(isInCover());
		break;
	case 645:
		setCoverState();
		break;
	case 646:
		resp->insertBoolean(isEscaping());
		break;
	case 647:
		setEscaping(inv->getBooleanParameter());
		break;
	case 648:
		activateEscape();
		break;
	case 649:
		deactivateEscape();
		break;
	case 650:
		resp->insertSignedInt(getNumberOfSkills());
		break;
	case 651:
		updateZone(inv->getBooleanParameter(), inv->getBooleanParameter());
		break;
	case 652:
		updateZoneWithParent(inv->getUnsignedLongParameter(), inv->getBooleanParameter(), inv->getBooleanParameter());
		break;
	case 653:
		resp->insertBoolean(isDisabled());
		break;
	default:
		return NULL;
	}

	return resp;
}

void CreatureObjectAdapter::info(const String& message, bool forcedLog) {
	return ((CreatureObjectImplementation*) impl)->info(message, forcedLog);
}

void CreatureObjectAdapter::sendItemsTo(Player* player) {
	return ((CreatureObjectImplementation*) impl)->sendItemsTo(player);
}

void CreatureObjectAdapter::sendTo(Player* player, bool doClose) {
	return ((CreatureObjectImplementation*) impl)->sendTo(player, doClose);
}

void CreatureObjectAdapter::sendDestroyTo(Player* player) {
	return ((CreatureObjectImplementation*) impl)->sendDestroyTo(player);
}

void CreatureObjectAdapter::doCombatAnimation(CreatureObject* defender, unsigned int animcrc, bool hit) {
	return ((CreatureObjectImplementation*) impl)->doCombatAnimation(defender, animcrc, hit);
}

void CreatureObjectAdapter::doAnimation(const String& anim) {
	return ((CreatureObjectImplementation*) impl)->doAnimation(anim);
}

void CreatureObjectAdapter::doEmote(unsigned long long targetid, unsigned int emoteid, bool showtext) {
	return ((CreatureObjectImplementation*) impl)->doEmote(targetid, emoteid, showtext);
}

void CreatureObjectAdapter::playEffect(const String& file, const String& aux) {
	return ((CreatureObjectImplementation*) impl)->playEffect(file, aux);
}

void CreatureObjectAdapter::showFlyText(const String& file, const String& aux, unsigned char red, unsigned char green, unsigned char blue) {
	return ((CreatureObjectImplementation*) impl)->showFlyText(file, aux, red, green, blue);
}

void CreatureObjectAdapter::sendCombatSpam(CreatureObject* defender, TangibleObject* item, unsigned int damage, const String& skill, bool areaSpam) {
	return ((CreatureObjectImplementation*) impl)->sendCombatSpam(defender, item, damage, skill, areaSpam);
}

void CreatureObjectAdapter::sendCombatSpamTrap(CreatureObject* defender, TangibleObject* item, unsigned int damage, const String& skill, bool areaSpam) {
	return ((CreatureObjectImplementation*) impl)->sendCombatSpamTrap(defender, item, damage, skill, areaSpam);
}

void CreatureObjectAdapter::addDamage(CreatureObject* creature, unsigned int damage) {
	return ((CreatureObjectImplementation*) impl)->addDamage(creature, damage);
}

unsigned int CreatureObjectAdapter::getDamage(CreatureObject* creature) {
	return ((CreatureObjectImplementation*) impl)->getDamage(creature);
}

void CreatureObjectAdapter::removeFromDamageMap(CreatureObject* target) {
	return ((CreatureObjectImplementation*) impl)->removeFromDamageMap(target);
}

bool CreatureObjectAdapter::isLootOwner(CreatureObject* creature) {
	return ((CreatureObjectImplementation*) impl)->isLootOwner(creature);
}

CreatureObject* CreatureObjectAdapter::getLootOwner() {
	return ((CreatureObjectImplementation*) impl)->getLootOwner();
}

unsigned int CreatureObjectAdapter::getMitigation(const String& mit) {
	return ((CreatureObjectImplementation*) impl)->getMitigation(mit);
}

void CreatureObjectAdapter::addCooldown(const String& key, int timeLimitInMilliseconds) {
	return ((CreatureObjectImplementation*) impl)->addCooldown(key, timeLimitInMilliseconds);
}

void CreatureObjectAdapter::removeCooldown(const String& key) {
	return ((CreatureObjectImplementation*) impl)->removeCooldown(key);
}

bool CreatureObjectAdapter::containsCooldown(const String& key) {
	return ((CreatureObjectImplementation*) impl)->containsCooldown(key);
}

int CreatureObjectAdapter::getCooldownTimeRemaining(const String& key) {
	return ((CreatureObjectImplementation*) impl)->getCooldownTimeRemaining(key);
}

bool CreatureObjectAdapter::hasCooldownExpired(const String& key) {
	return ((CreatureObjectImplementation*) impl)->hasCooldownExpired(key);
}

bool CreatureObjectAdapter::isIncapacitated() {
	return ((CreatureObjectImplementation*) impl)->isIncapacitated();
}

bool CreatureObjectAdapter::isDead() {
	return ((CreatureObjectImplementation*) impl)->isDead();
}

bool CreatureObjectAdapter::isKnockedDown() {
	return ((CreatureObjectImplementation*) impl)->isKnockedDown();
}

bool CreatureObjectAdapter::isKneeling() {
	return ((CreatureObjectImplementation*) impl)->isKneeling();
}

bool CreatureObjectAdapter::isProne() {
	return ((CreatureObjectImplementation*) impl)->isProne();
}

bool CreatureObjectAdapter::isStanding() {
	return ((CreatureObjectImplementation*) impl)->isStanding();
}

bool CreatureObjectAdapter::isSkillAnimating() {
	return ((CreatureObjectImplementation*) impl)->isSkillAnimating();
}

bool CreatureObjectAdapter::isInCombat() {
	return ((CreatureObjectImplementation*) impl)->isInCombat();
}

bool CreatureObjectAdapter::isDizzied() {
	return ((CreatureObjectImplementation*) impl)->isDizzied();
}

bool CreatureObjectAdapter::isStunned() {
	return ((CreatureObjectImplementation*) impl)->isStunned();
}

bool CreatureObjectAdapter::isBlinded() {
	return ((CreatureObjectImplementation*) impl)->isBlinded();
}

bool CreatureObjectAdapter::isIntimidated() {
	return ((CreatureObjectImplementation*) impl)->isIntimidated();
}

bool CreatureObjectAdapter::isSnared() {
	return ((CreatureObjectImplementation*) impl)->isSnared();
}

bool CreatureObjectAdapter::isRooted() {
	return ((CreatureObjectImplementation*) impl)->isRooted();
}

bool CreatureObjectAdapter::isDiseased() {
	return ((CreatureObjectImplementation*) impl)->isDiseased();
}

bool CreatureObjectAdapter::isPoisoned() {
	return ((CreatureObjectImplementation*) impl)->isPoisoned();
}

bool CreatureObjectAdapter::isBleeding() {
	return ((CreatureObjectImplementation*) impl)->isBleeding();
}

bool CreatureObjectAdapter::isOnFire() {
	return ((CreatureObjectImplementation*) impl)->isOnFire();
}

bool CreatureObjectAdapter::isMounted() {
	return ((CreatureObjectImplementation*) impl)->isMounted();
}

bool CreatureObjectAdapter::isRidingCreature() {
	return ((CreatureObjectImplementation*) impl)->isRidingCreature();
}

bool CreatureObjectAdapter::isMeditating() {
	return ((CreatureObjectImplementation*) impl)->isMeditating();
}

bool CreatureObjectAdapter::isCreature() {
	return ((CreatureObjectImplementation*) impl)->isCreature();
}

bool CreatureObjectAdapter::isNPC() {
	return ((CreatureObjectImplementation*) impl)->isNPC();
}

bool CreatureObjectAdapter::isMount() {
	return ((CreatureObjectImplementation*) impl)->isMount();
}

bool CreatureObjectAdapter::isBerserked() {
	return ((CreatureObjectImplementation*) impl)->isBerserked();
}

bool CreatureObjectAdapter::isTanoObjEquipped(TangibleObject* tano) {
	return ((CreatureObjectImplementation*) impl)->isTanoObjEquipped(tano);
}

bool CreatureObjectAdapter::isVehicle() {
	return ((CreatureObjectImplementation*) impl)->isVehicle();
}

bool CreatureObjectAdapter::isPet() {
	return ((CreatureObjectImplementation*) impl)->isPet();
}

bool CreatureObjectAdapter::hatesFaction(unsigned int faction) {
	return ((CreatureObjectImplementation*) impl)->hatesFaction(faction);
}

void CreatureObjectAdapter::updateKnockdownRecovery() {
	return ((CreatureObjectImplementation*) impl)->updateKnockdownRecovery();
}

void CreatureObjectAdapter::updateMood(const String& md) {
	return ((CreatureObjectImplementation*) impl)->updateMood(md);
}

bool CreatureObjectAdapter::checkKnockdownRecovery() {
	return ((CreatureObjectImplementation*) impl)->checkKnockdownRecovery();
}

void CreatureObjectAdapter::updatePostureDownRecovery() {
	return ((CreatureObjectImplementation*) impl)->updatePostureDownRecovery();
}

void CreatureObjectAdapter::updatePostureUpRecovery() {
	return ((CreatureObjectImplementation*) impl)->updatePostureUpRecovery();
}

bool CreatureObjectAdapter::checkPostureDownRecovery() {
	return ((CreatureObjectImplementation*) impl)->checkPostureDownRecovery();
}

bool CreatureObjectAdapter::checkPostureUpRecovery() {
	return ((CreatureObjectImplementation*) impl)->checkPostureUpRecovery();
}

bool CreatureObjectAdapter::setState(unsigned long long state) {
	return ((CreatureObjectImplementation*) impl)->setState(state);
}

bool CreatureObjectAdapter::clearState(unsigned long long state) {
	return ((CreatureObjectImplementation*) impl)->clearState(state);
}

void CreatureObjectAdapter::updateDotStates(unsigned long long oldStates, unsigned long long newStates) {
	return ((CreatureObjectImplementation*) impl)->updateDotStates(oldStates, newStates);
}

void CreatureObjectAdapter::updateStates() {
	return ((CreatureObjectImplementation*) impl)->updateStates();
}

void CreatureObjectAdapter::clearStates() {
	return ((CreatureObjectImplementation*) impl)->clearStates();
}

float CreatureObjectAdapter::calculateBFRatio() {
	return ((CreatureObjectImplementation*) impl)->calculateBFRatio();
}

void CreatureObjectAdapter::removeState(unsigned long long state) {
	return ((CreatureObjectImplementation*) impl)->removeState(state);
}

void CreatureObjectAdapter::resetHAMBars(bool doUpdateClient) {
	return ((CreatureObjectImplementation*) impl)->resetHAMBars(doUpdateClient);
}

bool CreatureObjectAdapter::changeHAMBars(int health, int action, int mind, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeHAMBars(health, action, mind, forcedChange);
}

bool CreatureObjectAdapter::changeHAMWounds(int health, int action, int mind, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeHAMWounds(health, action, mind, forcedChange);
}

void CreatureObjectAdapter::changeMaxHAMBars(int health, int action, int mind) {
	return ((CreatureObjectImplementation*) impl)->changeMaxHAMBars(health, action, mind);
}

bool CreatureObjectAdapter::changeAttributeBar(unsigned char attribute, int value, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeAttributeBar(attribute, value, forcedChange);
}

bool CreatureObjectAdapter::changeHealthBar(int value, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeHealthBar(value, forcedChange);
}

bool CreatureObjectAdapter::changeStrengthBar(int value, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeStrengthBar(value, forcedChange);
}

bool CreatureObjectAdapter::changeConstitutionBar(int value, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeConstitutionBar(value, forcedChange);
}

bool CreatureObjectAdapter::changeActionBar(int value, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeActionBar(value, forcedChange);
}

bool CreatureObjectAdapter::changeQuicknessBar(int value, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeQuicknessBar(value, forcedChange);
}

bool CreatureObjectAdapter::changeStaminaBar(int value, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeStaminaBar(value, forcedChange);
}

bool CreatureObjectAdapter::changeMindBar(int value, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeMindBar(value, forcedChange);
}

bool CreatureObjectAdapter::changeFocusBar(int value, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeFocusBar(value, forcedChange);
}

bool CreatureObjectAdapter::changeWillpowerBar(int value, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeWillpowerBar(value, forcedChange);
}

void CreatureObjectAdapter::changeMaxAttributeBar(unsigned char attribute, int value, bool updateClient) {
	return ((CreatureObjectImplementation*) impl)->changeMaxAttributeBar(attribute, value, updateClient);
}

void CreatureObjectAdapter::changeMaxHealthBar(int value, bool updateClient) {
	return ((CreatureObjectImplementation*) impl)->changeMaxHealthBar(value, updateClient);
}

void CreatureObjectAdapter::changeMaxStrengthBar(int value, bool updateClient) {
	return ((CreatureObjectImplementation*) impl)->changeMaxStrengthBar(value, updateClient);
}

void CreatureObjectAdapter::changeMaxConstitutionBar(int value, bool updateClient) {
	return ((CreatureObjectImplementation*) impl)->changeMaxConstitutionBar(value, updateClient);
}

void CreatureObjectAdapter::changeMaxActionBar(int value, bool updateClient) {
	return ((CreatureObjectImplementation*) impl)->changeMaxActionBar(value, updateClient);
}

void CreatureObjectAdapter::changeMaxQuicknessBar(int value, bool updateClient) {
	return ((CreatureObjectImplementation*) impl)->changeMaxQuicknessBar(value, updateClient);
}

void CreatureObjectAdapter::changeMaxStaminaBar(int value, bool updateClient) {
	return ((CreatureObjectImplementation*) impl)->changeMaxStaminaBar(value, updateClient);
}

void CreatureObjectAdapter::changeMaxMindBar(int value, bool updateClient) {
	return ((CreatureObjectImplementation*) impl)->changeMaxMindBar(value, updateClient);
}

void CreatureObjectAdapter::changeMaxFocusBar(int value, bool updateClient) {
	return ((CreatureObjectImplementation*) impl)->changeMaxFocusBar(value, updateClient);
}

void CreatureObjectAdapter::changeMaxWillpowerBar(int value, bool updateClient) {
	return ((CreatureObjectImplementation*) impl)->changeMaxWillpowerBar(value, updateClient);
}

bool CreatureObjectAdapter::changeWoundsBar(unsigned char attribute, int value, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeWoundsBar(attribute, value, forcedChange);
}

bool CreatureObjectAdapter::changeHealthWoundsBar(int value, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeHealthWoundsBar(value, forcedChange);
}

bool CreatureObjectAdapter::changeStrengthWoundsBar(int value, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeStrengthWoundsBar(value, forcedChange);
}

bool CreatureObjectAdapter::changeConstitutionWoundsBar(int value, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeConstitutionWoundsBar(value, forcedChange);
}

bool CreatureObjectAdapter::changeActionWoundsBar(int value, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeActionWoundsBar(value, forcedChange);
}

bool CreatureObjectAdapter::changeQuicknessWoundsBar(int value, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeQuicknessWoundsBar(value, forcedChange);
}

bool CreatureObjectAdapter::changeStaminaWoundsBar(int value, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeStaminaWoundsBar(value, forcedChange);
}

bool CreatureObjectAdapter::changeMindWoundsBar(int value, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeMindWoundsBar(value, forcedChange);
}

bool CreatureObjectAdapter::changeFocusWoundsBar(int value, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeFocusWoundsBar(value, forcedChange);
}

bool CreatureObjectAdapter::changeWillpowerWoundsBar(int value, bool forcedChange) {
	return ((CreatureObjectImplementation*) impl)->changeWillpowerWoundsBar(value, forcedChange);
}

void CreatureObjectAdapter::changeShockWounds(int bf) {
	return ((CreatureObjectImplementation*) impl)->changeShockWounds(bf);
}

void CreatureObjectAdapter::setAttributeBar(unsigned char attribute, int value) {
	return ((CreatureObjectImplementation*) impl)->setAttributeBar(attribute, value);
}

void CreatureObjectAdapter::setHealthBar(int value) {
	return ((CreatureObjectImplementation*) impl)->setHealthBar(value);
}

void CreatureObjectAdapter::setStrengthBar(int value) {
	return ((CreatureObjectImplementation*) impl)->setStrengthBar(value);
}

void CreatureObjectAdapter::setConstitutionBar(int value) {
	return ((CreatureObjectImplementation*) impl)->setConstitutionBar(value);
}

void CreatureObjectAdapter::setActionBar(int value) {
	return ((CreatureObjectImplementation*) impl)->setActionBar(value);
}

void CreatureObjectAdapter::setQuicknessBar(int value) {
	return ((CreatureObjectImplementation*) impl)->setQuicknessBar(value);
}

void CreatureObjectAdapter::setStaminaBar(int value) {
	return ((CreatureObjectImplementation*) impl)->setStaminaBar(value);
}

void CreatureObjectAdapter::setMindBar(int value) {
	return ((CreatureObjectImplementation*) impl)->setMindBar(value);
}

void CreatureObjectAdapter::setFocusBar(int value) {
	return ((CreatureObjectImplementation*) impl)->setFocusBar(value);
}

void CreatureObjectAdapter::setWillpowerBar(int value) {
	return ((CreatureObjectImplementation*) impl)->setWillpowerBar(value);
}

void CreatureObjectAdapter::setBaseAttributeBar(unsigned char attribute, int value, bool updateClient) {
	return ((CreatureObjectImplementation*) impl)->setBaseAttributeBar(attribute, value, updateClient);
}

void CreatureObjectAdapter::setBaseHealthBar(int value, bool updateClient) {
	return ((CreatureObjectImplementation*) impl)->setBaseHealthBar(value, updateClient);
}

void CreatureObjectAdapter::setBaseStrengthBar(int value, bool updateClient) {
	return ((CreatureObjectImplementation*) impl)->setBaseStrengthBar(value, updateClient);
}

void CreatureObjectAdapter::setBaseConstitutionBar(int value, bool updateClient) {
	return ((CreatureObjectImplementation*) impl)->setBaseConstitutionBar(value, updateClient);
}

void CreatureObjectAdapter::setBaseActionBar(int value, bool updateClient) {
	return ((CreatureObjectImplementation*) impl)->setBaseActionBar(value, updateClient);
}

void CreatureObjectAdapter::setBaseQuicknessBar(int value, bool updateClient) {
	return ((CreatureObjectImplementation*) impl)->setBaseQuicknessBar(value, updateClient);
}

void CreatureObjectAdapter::setBaseStaminaBar(int value, bool updateClient) {
	return ((CreatureObjectImplementation*) impl)->setBaseStaminaBar(value, updateClient);
}

void CreatureObjectAdapter::setBaseMindBar(int value, bool updateClient) {
	return ((CreatureObjectImplementation*) impl)->setBaseMindBar(value, updateClient);
}

void CreatureObjectAdapter::setBaseFocusBar(int value, bool updateClient) {
	return ((CreatureObjectImplementation*) impl)->setBaseFocusBar(value, updateClient);
}

void CreatureObjectAdapter::setBaseWillpowerBar(int value, bool updateClient) {
	return ((CreatureObjectImplementation*) impl)->setBaseWillpowerBar(value, updateClient);
}

void CreatureObjectAdapter::setMaxAttributeBar(unsigned char attribute, int value, bool updateClient) {
	return ((CreatureObjectImplementation*) impl)->setMaxAttributeBar(attribute, value, updateClient);
}

void CreatureObjectAdapter::setMaxHealthBar(int value, bool updateClient) {
	return ((CreatureObjectImplementation*) impl)->setMaxHealthBar(value, updateClient);
}

void CreatureObjectAdapter::setMaxStrengthBar(int value, bool updateClient) {
	return ((CreatureObjectImplementation*) impl)->setMaxStrengthBar(value, updateClient);
}

void CreatureObjectAdapter::setMaxConstitutionBar(int value, bool updateClient) {
	return ((CreatureObjectImplementation*) impl)->setMaxConstitutionBar(value, updateClient);
}

void CreatureObjectAdapter::setMaxActionBar(int value, bool updateClient) {
	return ((CreatureObjectImplementation*) impl)->setMaxActionBar(value, updateClient);
}

void CreatureObjectAdapter::setMaxQuicknessBar(int value, bool updateClient) {
	return ((CreatureObjectImplementation*) impl)->setMaxQuicknessBar(value, updateClient);
}

void CreatureObjectAdapter::setMaxStaminaBar(int value, bool updateClient) {
	return ((CreatureObjectImplementation*) impl)->setMaxStaminaBar(value, updateClient);
}

void CreatureObjectAdapter::setMaxMindBar(int value, bool updateClient) {
	return ((CreatureObjectImplementation*) impl)->setMaxMindBar(value, updateClient);
}

void CreatureObjectAdapter::setMaxFocusBar(int value, bool updateClient) {
	return ((CreatureObjectImplementation*) impl)->setMaxFocusBar(value, updateClient);
}

void CreatureObjectAdapter::setMaxWillpowerBar(int value, bool updateClient) {
	return ((CreatureObjectImplementation*) impl)->setMaxWillpowerBar(value, updateClient);
}

void CreatureObjectAdapter::setWoundsBar(unsigned char attribute, int value) {
	return ((CreatureObjectImplementation*) impl)->setWoundsBar(attribute, value);
}

void CreatureObjectAdapter::setHealthWoundsBar(int value) {
	return ((CreatureObjectImplementation*) impl)->setHealthWoundsBar(value);
}

void CreatureObjectAdapter::setStrengthWoundsBar(int value) {
	return ((CreatureObjectImplementation*) impl)->setStrengthWoundsBar(value);
}

void CreatureObjectAdapter::setConstitutionWoundsBar(int value) {
	return ((CreatureObjectImplementation*) impl)->setConstitutionWoundsBar(value);
}

void CreatureObjectAdapter::setActionWoundsBar(int value) {
	return ((CreatureObjectImplementation*) impl)->setActionWoundsBar(value);
}

void CreatureObjectAdapter::setQuicknessWoundsBar(int value) {
	return ((CreatureObjectImplementation*) impl)->setQuicknessWoundsBar(value);
}

void CreatureObjectAdapter::setStaminaWoundsBar(int value) {
	return ((CreatureObjectImplementation*) impl)->setStaminaWoundsBar(value);
}

void CreatureObjectAdapter::setMindWoundsBar(int value) {
	return ((CreatureObjectImplementation*) impl)->setMindWoundsBar(value);
}

void CreatureObjectAdapter::setFocusWoundsBar(int value) {
	return ((CreatureObjectImplementation*) impl)->setFocusWoundsBar(value);
}

void CreatureObjectAdapter::setWillpowerWoundsBar(int value) {
	return ((CreatureObjectImplementation*) impl)->setWillpowerWoundsBar(value);
}

bool CreatureObjectAdapter::hasAttackDelay() {
	return ((CreatureObjectImplementation*) impl)->hasAttackDelay();
}

void CreatureObjectAdapter::clearAttackDelay() {
	return ((CreatureObjectImplementation*) impl)->clearAttackDelay();
}

void CreatureObjectAdapter::activateBurstRun(bool bypassChecks) {
	return ((CreatureObjectImplementation*) impl)->activateBurstRun(bypassChecks);
}

bool CreatureObjectAdapter::hasQueuedState(unsigned int skillCRC) {
	return ((CreatureObjectImplementation*) impl)->hasQueuedState(skillCRC);
}

bool CreatureObjectAdapter::removeQueuedState(unsigned int skillCRC) {
	return ((CreatureObjectImplementation*) impl)->removeQueuedState(skillCRC);
}

bool CreatureObjectAdapter::addQueuedState(unsigned int skillCRC) {
	return ((CreatureObjectImplementation*) impl)->addQueuedState(skillCRC);
}

void CreatureObjectAdapter::setMeditateState() {
	return ((CreatureObjectImplementation*) impl)->setMeditateState();
}

void CreatureObjectAdapter::removePowerboost() {
	return ((CreatureObjectImplementation*) impl)->removePowerboost();
}

bool CreatureObjectAdapter::isGuilded() {
	return ((CreatureObjectImplementation*) impl)->isGuilded();
}

void CreatureObjectAdapter::removeGroup() {
	return ((CreatureObjectImplementation*) impl)->removeGroup();
}

GroupObject* CreatureObjectAdapter::getGroupObject() {
	return ((CreatureObjectImplementation*) impl)->getGroupObject();
}

bool CreatureObjectAdapter::isInAGroup() {
	return ((CreatureObjectImplementation*) impl)->isInAGroup();
}

bool CreatureObjectAdapter::isInGroupWith(CreatureObject* creature) {
	return ((CreatureObjectImplementation*) impl)->isInGroupWith(creature);
}

void CreatureObjectAdapter::setGroupID(unsigned long long gid) {
	return ((CreatureObjectImplementation*) impl)->setGroupID(gid);
}

void CreatureObjectAdapter::updateGroupId(unsigned long long id) {
	return ((CreatureObjectImplementation*) impl)->updateGroupId(id);
}

void CreatureObjectAdapter::updateGroupInviterId(unsigned long long id) {
	return ((CreatureObjectImplementation*) impl)->updateGroupInviterId(id);
}

void CreatureObjectAdapter::updateTarget(unsigned long long targ) {
	return ((CreatureObjectImplementation*) impl)->updateTarget(targ);
}

void CreatureObjectAdapter::updateTarget(SceneObject* targ) {
	return ((CreatureObjectImplementation*) impl)->updateTarget(targ);
}

void CreatureObjectAdapter::clearTarget() {
	return ((CreatureObjectImplementation*) impl)->clearTarget();
}

void CreatureObjectAdapter::setActionCounter(unsigned int actioncntr) {
	return ((CreatureObjectImplementation*) impl)->setActionCounter(actioncntr);
}

void CreatureObjectAdapter::setWeapon(Weapon* wep) {
	return ((CreatureObjectImplementation*) impl)->setWeapon(wep);
}

void CreatureObjectAdapter::setCreatureLinkID(unsigned long long creatureID) {
	return ((CreatureObjectImplementation*) impl)->setCreatureLinkID(creatureID);
}

void CreatureObjectAdapter::setAccuracy(int acc) {
	return ((CreatureObjectImplementation*) impl)->setAccuracy(acc);
}

void CreatureObjectAdapter::setAccuracyBonus(int accBonus) {
	return ((CreatureObjectImplementation*) impl)->setAccuracyBonus(accBonus);
}

void CreatureObjectAdapter::setDamageBonus(int bonus) {
	return ((CreatureObjectImplementation*) impl)->setDamageBonus(bonus);
}

void CreatureObjectAdapter::setDefenseBonus(int bonus) {
	return ((CreatureObjectImplementation*) impl)->setDefenseBonus(bonus);
}

void CreatureObjectAdapter::setLastMovementUpdateStamp(unsigned int tme) {
	return ((CreatureObjectImplementation*) impl)->setLastMovementUpdateStamp(tme);
}

void CreatureObjectAdapter::setIgnoreMovementTests(int times) {
	return ((CreatureObjectImplementation*) impl)->setIgnoreMovementTests(times);
}

void CreatureObjectAdapter::setLevel(unsigned int lvl) {
	return ((CreatureObjectImplementation*) impl)->setLevel(lvl);
}

void CreatureObjectAdapter::setHealthEncumbrance(unsigned int value) {
	return ((CreatureObjectImplementation*) impl)->setHealthEncumbrance(value);
}

void CreatureObjectAdapter::setActionEncumbrance(unsigned int value) {
	return ((CreatureObjectImplementation*) impl)->setActionEncumbrance(value);
}

void CreatureObjectAdapter::setMindEncumbrance(unsigned int value) {
	return ((CreatureObjectImplementation*) impl)->setMindEncumbrance(value);
}

void CreatureObjectAdapter::changeHealthEncumbrance(int value) {
	return ((CreatureObjectImplementation*) impl)->changeHealthEncumbrance(value);
}

void CreatureObjectAdapter::changeActionEncumbrance(int value) {
	return ((CreatureObjectImplementation*) impl)->changeActionEncumbrance(value);
}

void CreatureObjectAdapter::changeMindEncumbrance(int value) {
	return ((CreatureObjectImplementation*) impl)->changeMindEncumbrance(value);
}

void CreatureObjectAdapter::updateServerMovementStamp() {
	return ((CreatureObjectImplementation*) impl)->updateServerMovementStamp();
}

SceneObject* CreatureObjectAdapter::getInventoryItem(unsigned long long oid) {
	return ((CreatureObjectImplementation*) impl)->getInventoryItem(oid);
}

void CreatureObjectAdapter::removeAllUnequippedInventory() {
	return ((CreatureObjectImplementation*) impl)->removeAllUnequippedInventory();
}

void CreatureObjectAdapter::removeInventoryItem(unsigned long long oid) {
	return ((CreatureObjectImplementation*) impl)->removeInventoryItem(oid);
}

void CreatureObjectAdapter::removeInventoryItem(SceneObject* item) {
	return ((CreatureObjectImplementation*) impl)->removeInventoryItem(item);
}

SceneObject* CreatureObjectAdapter::getLootItem(unsigned long long oid) {
	return ((CreatureObjectImplementation*) impl)->getLootItem(oid);
}

void CreatureObjectAdapter::removeLootItem(unsigned long long oid) {
	return ((CreatureObjectImplementation*) impl)->removeLootItem(oid);
}

SceneObject* CreatureObjectAdapter::getBankItem(unsigned long long oid) {
	return ((CreatureObjectImplementation*) impl)->getBankItem(oid);
}

void CreatureObjectAdapter::removeBankItem(unsigned long long oid) {
	return ((CreatureObjectImplementation*) impl)->removeBankItem(oid);
}

Inventory* CreatureObjectAdapter::getInventory() {
	return ((CreatureObjectImplementation*) impl)->getInventory();
}

Container* CreatureObjectAdapter::getLootContainer() {
	return ((CreatureObjectImplementation*) impl)->getLootContainer();
}

Container* CreatureObjectAdapter::getBankContainer() {
	return ((CreatureObjectImplementation*) impl)->getBankContainer();
}

BankInventory* CreatureObjectAdapter::getBankInventory() {
	return ((CreatureObjectImplementation*) impl)->getBankInventory();
}

unsigned long long CreatureObjectAdapter::getNewItemID() {
	return ((CreatureObjectImplementation*) impl)->getNewItemID();
}

Weapon* CreatureObjectAdapter::getWeapon() {
	return ((CreatureObjectImplementation*) impl)->getWeapon();
}

Armor* CreatureObjectAdapter::getArmor(int type) {
	return ((CreatureObjectImplementation*) impl)->getArmor(type);
}

void CreatureObjectAdapter::addSkillMod(const String& name, int mod, bool updateClient) {
	return ((CreatureObjectImplementation*) impl)->addSkillMod(name, mod, updateClient);
}

int CreatureObjectAdapter::getSkillMod(const String& name) {
	return ((CreatureObjectImplementation*) impl)->getSkillMod(name);
}

bool CreatureObjectAdapter::hasSkillMod(const String& name) {
	return ((CreatureObjectImplementation*) impl)->hasSkillMod(name);
}

int CreatureObjectAdapter::getSkillModBonus(const String& name) {
	return ((CreatureObjectImplementation*) impl)->getSkillModBonus(name);
}

void CreatureObjectAdapter::addSkillModBonus(const String& name, int mod, bool updateClient) {
	return ((CreatureObjectImplementation*) impl)->addSkillModBonus(name, mod, updateClient);
}

bool CreatureObjectAdapter::hasSkillModBonus(const String& name) {
	return ((CreatureObjectImplementation*) impl)->hasSkillModBonus(name);
}

int CreatureObjectAdapter::getAccuracy() {
	return ((CreatureObjectImplementation*) impl)->getAccuracy();
}

int CreatureObjectAdapter::getAccuracyBonus() {
	return ((CreatureObjectImplementation*) impl)->getAccuracyBonus();
}

int CreatureObjectAdapter::getDefenseBonus() {
	return ((CreatureObjectImplementation*) impl)->getDefenseBonus();
}

int CreatureObjectAdapter::getDamageBonus() {
	return ((CreatureObjectImplementation*) impl)->getDamageBonus();
}

int CreatureObjectAdapter::getConditionDamage() {
	return ((CreatureObjectImplementation*) impl)->getConditionDamage();
}

int CreatureObjectAdapter::getMaxCondition() {
	return ((CreatureObjectImplementation*) impl)->getMaxCondition();
}

int CreatureObjectAdapter::getCondition() {
	return ((CreatureObjectImplementation*) impl)->getCondition();
}

CreatureObject* CreatureObjectAdapter::getMount() {
	return ((CreatureObjectImplementation*) impl)->getMount();
}

unsigned long long CreatureObjectAdapter::getLastServerMovementStamp() {
	return ((CreatureObjectImplementation*) impl)->getLastServerMovementStamp();
}

unsigned long long CreatureObjectAdapter::getCreatureLinkID() {
	return ((CreatureObjectImplementation*) impl)->getCreatureLinkID();
}

float CreatureObjectAdapter::getDistanceTo(SceneObject* targetCreature) {
	return ((CreatureObjectImplementation*) impl)->getDistanceTo(targetCreature);
}

float CreatureObjectAdapter::getHeight() {
	return ((CreatureObjectImplementation*) impl)->getHeight();
}

unsigned int CreatureObjectAdapter::getCreatureSkillsCount() {
	return ((CreatureObjectImplementation*) impl)->getCreatureSkillsCount();
}

unsigned int CreatureObjectAdapter::getNewCreatureSkillsCount(int cnt) {
	return ((CreatureObjectImplementation*) impl)->getNewCreatureSkillsCount(cnt);
}

unsigned int CreatureObjectAdapter::getLastMovementUpdateStamp() {
	return ((CreatureObjectImplementation*) impl)->getLastMovementUpdateStamp();
}

int CreatureObjectAdapter::getIgnoreMovementTests() {
	return ((CreatureObjectImplementation*) impl)->getIgnoreMovementTests();
}

unsigned int CreatureObjectAdapter::getLevel() {
	return ((CreatureObjectImplementation*) impl)->getLevel();
}

int CreatureObjectAdapter::getCenteredBonus() {
	return ((CreatureObjectImplementation*) impl)->getCenteredBonus();
}

void CreatureObjectAdapter::sendSystemMessage(const String& message) {
	return ((CreatureObjectImplementation*) impl)->sendSystemMessage(message);
}

void CreatureObjectAdapter::sendSystemMessage(UnicodeString& message) {
	return ((CreatureObjectImplementation*) impl)->sendSystemMessage(message);
}

void CreatureObjectAdapter::sendSystemMessage(const String& file, const String& str, unsigned long long targetid) {
	return ((CreatureObjectImplementation*) impl)->sendSystemMessage(file, str, targetid);
}

void CreatureObjectAdapter::updateSpeed(float speed, float acceleration) {
	return ((CreatureObjectImplementation*) impl)->updateSpeed(speed, acceleration);
}

void CreatureObjectAdapter::addInventoryItem(TangibleObject* item) {
	return ((CreatureObjectImplementation*) impl)->addInventoryItem(item);
}

void CreatureObjectAdapter::addInventoryResource(ResourceContainer* rcno) {
	return ((CreatureObjectImplementation*) impl)->addInventoryResource(rcno);
}

void CreatureObjectAdapter::addLootItem(TangibleObject* item) {
	return ((CreatureObjectImplementation*) impl)->addLootItem(item);
}

void CreatureObjectAdapter::startDancing(const String& anim, bool changeDance) {
	return ((CreatureObjectImplementation*) impl)->startDancing(anim, changeDance);
}

void CreatureObjectAdapter::startPlayingMusic(const String& anim, bool changeDance) {
	return ((CreatureObjectImplementation*) impl)->startPlayingMusic(anim, changeDance);
}

void CreatureObjectAdapter::startWatch(unsigned long long entid) {
	return ((CreatureObjectImplementation*) impl)->startWatch(entid);
}

void CreatureObjectAdapter::startListen(unsigned long long entid) {
	return ((CreatureObjectImplementation*) impl)->startListen(entid);
}

void CreatureObjectAdapter::stopWatch(unsigned long long entid, bool doSendPackets, bool forced, bool doLock, bool outOfRange) {
	return ((CreatureObjectImplementation*) impl)->stopWatch(entid, doSendPackets, forced, doLock, outOfRange);
}

void CreatureObjectAdapter::stopListen(unsigned long long entid, bool doSendPackets, bool forced, bool doLock, bool outOfRange) {
	return ((CreatureObjectImplementation*) impl)->stopListen(entid, doSendPackets, forced, doLock, outOfRange);
}

bool CreatureObjectAdapter::isPlayingMusic() {
	return ((CreatureObjectImplementation*) impl)->isPlayingMusic();
}

bool CreatureObjectAdapter::isDancing() {
	return ((CreatureObjectImplementation*) impl)->isDancing();
}

void CreatureObjectAdapter::stopDancing() {
	return ((CreatureObjectImplementation*) impl)->stopDancing();
}

void CreatureObjectAdapter::stopPlayingMusic() {
	return ((CreatureObjectImplementation*) impl)->stopPlayingMusic();
}

void CreatureObjectAdapter::addListener(CreatureObject* creature) {
	return ((CreatureObjectImplementation*) impl)->addListener(creature);
}

void CreatureObjectAdapter::addWatcher(CreatureObject* creature) {
	return ((CreatureObjectImplementation*) impl)->addWatcher(creature);
}

void CreatureObjectAdapter::removeListener(CreatureObject* creature) {
	return ((CreatureObjectImplementation*) impl)->removeListener(creature);
}

void CreatureObjectAdapter::removeWatcher(CreatureObject* creature) {
	return ((CreatureObjectImplementation*) impl)->removeWatcher(creature);
}

void CreatureObjectAdapter::doFlourish(const String& modifier) {
	return ((CreatureObjectImplementation*) impl)->doFlourish(modifier);
}

void CreatureObjectAdapter::doPerformanceAction() {
	return ((CreatureObjectImplementation*) impl)->doPerformanceAction();
}

void CreatureObjectAdapter::doEntertainerPatronEffects() {
	return ((CreatureObjectImplementation*) impl)->doEntertainerPatronEffects();
}

void CreatureObjectAdapter::addEntertainerFlourishBuff() {
	return ((CreatureObjectImplementation*) impl)->addEntertainerFlourishBuff();
}

void CreatureObjectAdapter::addEntertainerBuffDuration(int performanceType, float duration) {
	return ((CreatureObjectImplementation*) impl)->addEntertainerBuffDuration(performanceType, duration);
}

void CreatureObjectAdapter::setEntertainerBuffDuration(int performanceType, float duration) {
	return ((CreatureObjectImplementation*) impl)->setEntertainerBuffDuration(performanceType, duration);
}

float CreatureObjectAdapter::getEntertainerBuffDuration(int performanceType) {
	return ((CreatureObjectImplementation*) impl)->getEntertainerBuffDuration(performanceType);
}

void CreatureObjectAdapter::setEntertainerBuffStrength(int performanceType, float strength) {
	return ((CreatureObjectImplementation*) impl)->setEntertainerBuffStrength(performanceType, strength);
}

float CreatureObjectAdapter::getEntertainerBuffStrength(int performanceType) {
	return ((CreatureObjectImplementation*) impl)->getEntertainerBuffStrength(performanceType);
}

void CreatureObjectAdapter::activateRecovery() {
	return ((CreatureObjectImplementation*) impl)->activateRecovery();
}

int CreatureObjectAdapter::getCreatureSkillsSize() {
	return ((CreatureObjectImplementation*) impl)->getCreatureSkillsSize();
}

String& CreatureObjectAdapter::getSkill(int idx) {
	return ((CreatureObjectImplementation*) impl)->getSkill(idx);
}

bool CreatureObjectAdapter::hasSkill(unsigned int skillCRC) {
	return ((CreatureObjectImplementation*) impl)->hasSkill(skillCRC);
}

String& CreatureObjectAdapter::getSkillOrCertification(int idx) {
	return ((CreatureObjectImplementation*) impl)->getSkillOrCertification(idx);
}

int CreatureObjectAdapter::getSkillAndCertificationSize() {
	return ((CreatureObjectImplementation*) impl)->getSkillAndCertificationSize();
}

void CreatureObjectAdapter::sendConversationStartTo(SceneObject* obj) {
	return ((CreatureObjectImplementation*) impl)->sendConversationStartTo(obj);
}

void CreatureObjectAdapter::selectConversationOption(int option, SceneObject* obj) {
	return ((CreatureObjectImplementation*) impl)->selectConversationOption(option, obj);
}

void CreatureObjectAdapter::sendConversationStopTo(SceneObject* obj) {
	return ((CreatureObjectImplementation*) impl)->sendConversationStopTo(obj);
}

void CreatureObjectAdapter::addConvoScreen(const String& screenID, const String& leftBoxText, int numOptions, const String& Options, const String& optLinks) {
	return ((CreatureObjectImplementation*) impl)->addConvoScreen(screenID, leftBoxText, numOptions, Options, optLinks);
}

void CreatureObjectAdapter::sendConvoScreen(Player* player, const String& screenID) {
	return ((CreatureObjectImplementation*) impl)->sendConvoScreen(player, screenID);
}

void CreatureObjectAdapter::mountCreature(CreatureObject* mnt, bool lockMount) {
	return ((CreatureObjectImplementation*) impl)->mountCreature(mnt, lockMount);
}

void CreatureObjectAdapter::dismount(bool lockMount, bool ignoreCooldown) {
	return ((CreatureObjectImplementation*) impl)->dismount(lockMount, ignoreCooldown);
}

void CreatureObjectAdapter::addCashCredits(unsigned int credits) {
	return ((CreatureObjectImplementation*) impl)->addCashCredits(credits);
}

void CreatureObjectAdapter::addBankCredits(unsigned int credits) {
	return ((CreatureObjectImplementation*) impl)->addBankCredits(credits);
}

void CreatureObjectAdapter::updateCashCredits(unsigned int credits) {
	return ((CreatureObjectImplementation*) impl)->updateCashCredits(credits);
}

void CreatureObjectAdapter::updateBankCredits(unsigned int credits) {
	return ((CreatureObjectImplementation*) impl)->updateBankCredits(credits);
}

void CreatureObjectAdapter::subtractCashCredits(unsigned int credits) {
	return ((CreatureObjectImplementation*) impl)->subtractCashCredits(credits);
}

void CreatureObjectAdapter::subtractBankCredits(unsigned int credits) {
	return ((CreatureObjectImplementation*) impl)->subtractBankCredits(credits);
}

void CreatureObjectAdapter::setCashCredits(int credits) {
	return ((CreatureObjectImplementation*) impl)->setCashCredits(credits);
}

void CreatureObjectAdapter::setBankCredits(int credits) {
	return ((CreatureObjectImplementation*) impl)->setBankCredits(credits);
}

void CreatureObjectAdapter::addBuff(int buffCRC, float duration) {
	return ((CreatureObjectImplementation*) impl)->addBuff(buffCRC, duration);
}

void CreatureObjectAdapter::applyBuff(BuffObject* buff) {
	return ((CreatureObjectImplementation*) impl)->applyBuff(buff);
}

void CreatureObjectAdapter::removeBuff(const unsigned int buffCRC, bool remove) {
	return ((CreatureObjectImplementation*) impl)->removeBuff(buffCRC, remove);
}

bool CreatureObjectAdapter::hasSpice() {
	return ((CreatureObjectImplementation*) impl)->hasSpice();
}

bool CreatureObjectAdapter::verifyCashCredits(unsigned int creditsToRemove) {
	return ((CreatureObjectImplementation*) impl)->verifyCashCredits(creditsToRemove);
}

bool CreatureObjectAdapter::verifyBankCredits(unsigned int creditsToRemove) {
	return ((CreatureObjectImplementation*) impl)->verifyBankCredits(creditsToRemove);
}

bool CreatureObjectAdapter::isOnFullHealth() {
	return ((CreatureObjectImplementation*) impl)->isOnFullHealth();
}

bool CreatureObjectAdapter::hasStates() {
	return ((CreatureObjectImplementation*) impl)->hasStates();
}

bool CreatureObjectAdapter::hasState(unsigned long long state) {
	return ((CreatureObjectImplementation*) impl)->hasState(state);
}

bool CreatureObjectAdapter::isResuscitable() {
	return ((CreatureObjectImplementation*) impl)->isResuscitable();
}

void CreatureObjectAdapter::setTimeOfDeath(unsigned long long mtime) {
	return ((CreatureObjectImplementation*) impl)->setTimeOfDeath(mtime);
}

unsigned long long CreatureObjectAdapter::getTimeOfDeath() {
	return ((CreatureObjectImplementation*) impl)->getTimeOfDeath();
}

bool CreatureObjectAdapter::hasHealthDamage() {
	return ((CreatureObjectImplementation*) impl)->hasHealthDamage();
}

bool CreatureObjectAdapter::hasActionDamage() {
	return ((CreatureObjectImplementation*) impl)->hasActionDamage();
}

bool CreatureObjectAdapter::hasMindDamage() {
	return ((CreatureObjectImplementation*) impl)->hasMindDamage();
}

bool CreatureObjectAdapter::hasDamage() {
	return ((CreatureObjectImplementation*) impl)->hasDamage();
}

bool CreatureObjectAdapter::hasWounds(bool h, bool a, bool m) {
	return ((CreatureObjectImplementation*) impl)->hasWounds(h, a, m);
}

bool CreatureObjectAdapter::hasWound(unsigned char attribute) {
	return ((CreatureObjectImplementation*) impl)->hasWound(attribute);
}

bool CreatureObjectAdapter::hasShockWounds() {
	return ((CreatureObjectImplementation*) impl)->hasShockWounds();
}

unsigned char CreatureObjectAdapter::getNextWoundedAttribute(bool h, bool a, bool m) {
	return ((CreatureObjectImplementation*) impl)->getNextWoundedAttribute(h, a, m);
}

bool CreatureObjectAdapter::isAttackable() {
	return ((CreatureObjectImplementation*) impl)->isAttackable();
}

bool CreatureObjectAdapter::isAttackableBy(CreatureObject* attacker) {
	return ((CreatureObjectImplementation*) impl)->isAttackableBy(attacker);
}

bool CreatureObjectAdapter::isListening() {
	return ((CreatureObjectImplementation*) impl)->isListening();
}

bool CreatureObjectAdapter::isWatching() {
	return ((CreatureObjectImplementation*) impl)->isWatching();
}

UnicodeString& CreatureObjectAdapter::getCharacterName() {
	return ((CreatureObjectImplementation*) impl)->getCharacterName();
}

String& CreatureObjectAdapter::getRaceName() {
	return ((CreatureObjectImplementation*) impl)->getRaceName();
}

String& CreatureObjectAdapter::getGender() {
	return ((CreatureObjectImplementation*) impl)->getGender();
}

String& CreatureObjectAdapter::getCreatureType() {
	return ((CreatureObjectImplementation*) impl)->getCreatureType();
}

String& CreatureObjectAdapter::getTerrainName() {
	return ((CreatureObjectImplementation*) impl)->getTerrainName();
}

void CreatureObjectAdapter::getHairAppearance(String& appearance) {
	return ((CreatureObjectImplementation*) impl)->getHairAppearance(appearance);
}

bool CreatureObjectAdapter::isOvert() {
	return ((CreatureObjectImplementation*) impl)->isOvert();
}

unsigned long long CreatureObjectAdapter::getStateBitmask() {
	return ((CreatureObjectImplementation*) impl)->getStateBitmask();
}

unsigned char CreatureObjectAdapter::getPosture() {
	return ((CreatureObjectImplementation*) impl)->getPosture();
}

unsigned int CreatureObjectAdapter::getFaction() {
	return ((CreatureObjectImplementation*) impl)->getFaction();
}

bool CreatureObjectAdapter::isRebel() {
	return ((CreatureObjectImplementation*) impl)->isRebel();
}

bool CreatureObjectAdapter::isNeutral() {
	return ((CreatureObjectImplementation*) impl)->isNeutral();
}

bool CreatureObjectAdapter::isImperial() {
	return ((CreatureObjectImplementation*) impl)->isImperial();
}

unsigned int CreatureObjectAdapter::getPvpStatusBitmask() {
	return ((CreatureObjectImplementation*) impl)->getPvpStatusBitmask();
}

unsigned char CreatureObjectAdapter::getFactionRank() {
	return ((CreatureObjectImplementation*) impl)->getFactionRank();
}

unsigned int CreatureObjectAdapter::getBankCredits() {
	return ((CreatureObjectImplementation*) impl)->getBankCredits();
}

unsigned int CreatureObjectAdapter::getCashCredits() {
	return ((CreatureObjectImplementation*) impl)->getCashCredits();
}

unsigned int CreatureObjectAdapter::getWoundsUpdateCounter() {
	return ((CreatureObjectImplementation*) impl)->getWoundsUpdateCounter();
}

unsigned int CreatureObjectAdapter::getNewWoundsUpdateCounter(int upd) {
	return ((CreatureObjectImplementation*) impl)->getNewWoundsUpdateCounter(upd);
}

void CreatureObjectAdapter::updateHAMBars() {
	return ((CreatureObjectImplementation*) impl)->updateHAMBars();
}

void CreatureObjectAdapter::updateBaseStats() {
	return ((CreatureObjectImplementation*) impl)->updateBaseStats();
}

int CreatureObjectAdapter::getBaseAttribute(unsigned char attribute) {
	return ((CreatureObjectImplementation*) impl)->getBaseAttribute(attribute);
}

int CreatureObjectAdapter::getBaseHealth() {
	return ((CreatureObjectImplementation*) impl)->getBaseHealth();
}

int CreatureObjectAdapter::getBaseStrength() {
	return ((CreatureObjectImplementation*) impl)->getBaseStrength();
}

int CreatureObjectAdapter::getBaseConstitution() {
	return ((CreatureObjectImplementation*) impl)->getBaseConstitution();
}

int CreatureObjectAdapter::getBaseAction() {
	return ((CreatureObjectImplementation*) impl)->getBaseAction();
}

int CreatureObjectAdapter::getBaseQuickness() {
	return ((CreatureObjectImplementation*) impl)->getBaseQuickness();
}

int CreatureObjectAdapter::getBaseStamina() {
	return ((CreatureObjectImplementation*) impl)->getBaseStamina();
}

int CreatureObjectAdapter::getBaseMind() {
	return ((CreatureObjectImplementation*) impl)->getBaseMind();
}

int CreatureObjectAdapter::getBaseFocus() {
	return ((CreatureObjectImplementation*) impl)->getBaseFocus();
}

int CreatureObjectAdapter::getBaseWillpower() {
	return ((CreatureObjectImplementation*) impl)->getBaseWillpower();
}

int CreatureObjectAdapter::getAttribute(unsigned char attribute) {
	return ((CreatureObjectImplementation*) impl)->getAttribute(attribute);
}

int CreatureObjectAdapter::getHealth() {
	return ((CreatureObjectImplementation*) impl)->getHealth();
}

int CreatureObjectAdapter::getStrength() {
	return ((CreatureObjectImplementation*) impl)->getStrength();
}

int CreatureObjectAdapter::getConstitution() {
	return ((CreatureObjectImplementation*) impl)->getConstitution();
}

int CreatureObjectAdapter::getAction() {
	return ((CreatureObjectImplementation*) impl)->getAction();
}

int CreatureObjectAdapter::getQuickness() {
	return ((CreatureObjectImplementation*) impl)->getQuickness();
}

int CreatureObjectAdapter::getStamina() {
	return ((CreatureObjectImplementation*) impl)->getStamina();
}

int CreatureObjectAdapter::getMind() {
	return ((CreatureObjectImplementation*) impl)->getMind();
}

int CreatureObjectAdapter::getFocus() {
	return ((CreatureObjectImplementation*) impl)->getFocus();
}

int CreatureObjectAdapter::getWillpower() {
	return ((CreatureObjectImplementation*) impl)->getWillpower();
}

int CreatureObjectAdapter::getAttributeMax(unsigned char attribute) {
	return ((CreatureObjectImplementation*) impl)->getAttributeMax(attribute);
}

int CreatureObjectAdapter::getHealthMax() {
	return ((CreatureObjectImplementation*) impl)->getHealthMax();
}

int CreatureObjectAdapter::getStrengthMax() {
	return ((CreatureObjectImplementation*) impl)->getStrengthMax();
}

int CreatureObjectAdapter::getConstitutionMax() {
	return ((CreatureObjectImplementation*) impl)->getConstitutionMax();
}

int CreatureObjectAdapter::getActionMax() {
	return ((CreatureObjectImplementation*) impl)->getActionMax();
}

int CreatureObjectAdapter::getQuicknessMax() {
	return ((CreatureObjectImplementation*) impl)->getQuicknessMax();
}

int CreatureObjectAdapter::getStaminaMax() {
	return ((CreatureObjectImplementation*) impl)->getStaminaMax();
}

int CreatureObjectAdapter::getMindMax() {
	return ((CreatureObjectImplementation*) impl)->getMindMax();
}

int CreatureObjectAdapter::getFocusMax() {
	return ((CreatureObjectImplementation*) impl)->getFocusMax();
}

int CreatureObjectAdapter::getWillpowerMax() {
	return ((CreatureObjectImplementation*) impl)->getWillpowerMax();
}

int CreatureObjectAdapter::getWounds(unsigned char attribute) {
	return ((CreatureObjectImplementation*) impl)->getWounds(attribute);
}

unsigned char CreatureObjectAdapter::getWoundsArraySize() {
	return ((CreatureObjectImplementation*) impl)->getWoundsArraySize();
}

int CreatureObjectAdapter::getHealthWounds() {
	return ((CreatureObjectImplementation*) impl)->getHealthWounds();
}

int CreatureObjectAdapter::getStrengthWounds() {
	return ((CreatureObjectImplementation*) impl)->getStrengthWounds();
}

int CreatureObjectAdapter::getConstitutionWounds() {
	return ((CreatureObjectImplementation*) impl)->getConstitutionWounds();
}

int CreatureObjectAdapter::getActionWounds() {
	return ((CreatureObjectImplementation*) impl)->getActionWounds();
}

int CreatureObjectAdapter::getQuicknessWounds() {
	return ((CreatureObjectImplementation*) impl)->getQuicknessWounds();
}

int CreatureObjectAdapter::getStaminaWounds() {
	return ((CreatureObjectImplementation*) impl)->getStaminaWounds();
}

int CreatureObjectAdapter::getMindWounds() {
	return ((CreatureObjectImplementation*) impl)->getMindWounds();
}

int CreatureObjectAdapter::getFocusWounds() {
	return ((CreatureObjectImplementation*) impl)->getFocusWounds();
}

int CreatureObjectAdapter::getWillpowerWounds() {
	return ((CreatureObjectImplementation*) impl)->getWillpowerWounds();
}

unsigned int CreatureObjectAdapter::getAttributeDamage(unsigned char attribute) {
	return ((CreatureObjectImplementation*) impl)->getAttributeDamage(attribute);
}

unsigned int CreatureObjectAdapter::getHealthDamage() {
	return ((CreatureObjectImplementation*) impl)->getHealthDamage();
}

unsigned int CreatureObjectAdapter::getActionDamage() {
	return ((CreatureObjectImplementation*) impl)->getActionDamage();
}

unsigned int CreatureObjectAdapter::getMindDamage() {
	return ((CreatureObjectImplementation*) impl)->getMindDamage();
}

unsigned int CreatureObjectAdapter::getShockWounds() {
	return ((CreatureObjectImplementation*) impl)->getShockWounds();
}

unsigned int CreatureObjectAdapter::getHAMUpdateCounter() {
	return ((CreatureObjectImplementation*) impl)->getHAMUpdateCounter();
}

unsigned int CreatureObjectAdapter::getNewHAMUpdateCounter(int cnt) {
	return ((CreatureObjectImplementation*) impl)->getNewHAMUpdateCounter(cnt);
}

unsigned int CreatureObjectAdapter::getHAMMaxUpdateCounter() {
	return ((CreatureObjectImplementation*) impl)->getHAMMaxUpdateCounter();
}

unsigned int CreatureObjectAdapter::getNewHAMMaxUpdateCounter(int cnt) {
	return ((CreatureObjectImplementation*) impl)->getNewHAMMaxUpdateCounter(cnt);
}

unsigned int CreatureObjectAdapter::getHAMBaseUpdateCounter() {
	return ((CreatureObjectImplementation*) impl)->getHAMBaseUpdateCounter();
}

unsigned int CreatureObjectAdapter::getNewHAMBaseUpdateCounter(int cnt) {
	return ((CreatureObjectImplementation*) impl)->getNewHAMBaseUpdateCounter(cnt);
}

unsigned int CreatureObjectAdapter::getEncumbUpdateCounter() {
	return ((CreatureObjectImplementation*) impl)->getEncumbUpdateCounter();
}

unsigned int CreatureObjectAdapter::getNewEncumbUpdateCounter(int cnt) {
	return ((CreatureObjectImplementation*) impl)->getNewEncumbUpdateCounter(cnt);
}

unsigned int CreatureObjectAdapter::getHealthEncumbrance() {
	return ((CreatureObjectImplementation*) impl)->getHealthEncumbrance();
}

unsigned int CreatureObjectAdapter::getActionEncumbrance() {
	return ((CreatureObjectImplementation*) impl)->getActionEncumbrance();
}

unsigned int CreatureObjectAdapter::getMindEncumbrance() {
	return ((CreatureObjectImplementation*) impl)->getMindEncumbrance();
}

int CreatureObjectAdapter::getpbHA() {
	return ((CreatureObjectImplementation*) impl)->getpbHA();
}

int CreatureObjectAdapter::getpbMind() {
	return ((CreatureObjectImplementation*) impl)->getpbMind();
}

int CreatureObjectAdapter::getpbTick() {
	return ((CreatureObjectImplementation*) impl)->getpbTick();
}

int CreatureObjectAdapter::getpbBonus() {
	return ((CreatureObjectImplementation*) impl)->getpbBonus();
}

unsigned long long CreatureObjectAdapter::getTargetID() {
	return ((CreatureObjectImplementation*) impl)->getTargetID();
}

SceneObject* CreatureObjectAdapter::getTarget() {
	return ((CreatureObjectImplementation*) impl)->getTarget();
}

unsigned long long CreatureObjectAdapter::getWeaponID() {
	return ((CreatureObjectImplementation*) impl)->getWeaponID();
}

unsigned long long CreatureObjectAdapter::getGroupID() {
	return ((CreatureObjectImplementation*) impl)->getGroupID();
}

unsigned long long CreatureObjectAdapter::getGuildID() {
	return ((CreatureObjectImplementation*) impl)->getGuildID();
}

Guild* CreatureObjectAdapter::getGuild() {
	return ((CreatureObjectImplementation*) impl)->getGuild();
}

unsigned int CreatureObjectAdapter::getActionCounter() {
	return ((CreatureObjectImplementation*) impl)->getActionCounter();
}

float CreatureObjectAdapter::getSpeed() {
	return ((CreatureObjectImplementation*) impl)->getSpeed();
}

float CreatureObjectAdapter::getAcceleration() {
	return ((CreatureObjectImplementation*) impl)->getAcceleration();
}

String& CreatureObjectAdapter::getPerformanceAnimation() {
	return ((CreatureObjectImplementation*) impl)->getPerformanceAnimation();
}

unsigned int CreatureObjectAdapter::getPerformanceCounter() {
	return ((CreatureObjectImplementation*) impl)->getPerformanceCounter();
}

unsigned int CreatureObjectAdapter::getInstrumentID() {
	return ((CreatureObjectImplementation*) impl)->getInstrumentID();
}

int CreatureObjectAdapter::getInstrumentType() {
	return ((CreatureObjectImplementation*) impl)->getInstrumentType();
}

String& CreatureObjectAdapter::getPerformanceName() {
	return ((CreatureObjectImplementation*) impl)->getPerformanceName();
}

String& CreatureObjectAdapter::getMood() {
	return ((CreatureObjectImplementation*) impl)->getMood();
}

String& CreatureObjectAdapter::getMoodStr() {
	return ((CreatureObjectImplementation*) impl)->getMoodStr();
}

unsigned char CreatureObjectAdapter::getMoodID() {
	return ((CreatureObjectImplementation*) impl)->getMoodID();
}

unsigned long long CreatureObjectAdapter::getGroupInviterID() {
	return ((CreatureObjectImplementation*) impl)->getGroupInviterID();
}

unsigned long long CreatureObjectAdapter::getGroupInviteCounter() {
	return ((CreatureObjectImplementation*) impl)->getGroupInviteCounter();
}

unsigned long long CreatureObjectAdapter::getNewGroupInviteCounter() {
	return ((CreatureObjectImplementation*) impl)->getNewGroupInviteCounter();
}

unsigned long long CreatureObjectAdapter::getWatchID() {
	return ((CreatureObjectImplementation*) impl)->getWatchID();
}

unsigned long long CreatureObjectAdapter::getListenID() {
	return ((CreatureObjectImplementation*) impl)->getListenID();
}

bool CreatureObjectAdapter::isInBuilding() {
	return ((CreatureObjectImplementation*) impl)->isInBuilding();
}

int CreatureObjectAdapter::getBuildingType() {
	return ((CreatureObjectImplementation*) impl)->getBuildingType();
}

SceneObject* CreatureObjectAdapter::getBuilding() {
	return ((CreatureObjectImplementation*) impl)->getBuilding();
}

String& CreatureObjectAdapter::getGuildName() {
	return ((CreatureObjectImplementation*) impl)->getGuildName();
}

int CreatureObjectAdapter::getWeaponSpeedModifier() {
	return ((CreatureObjectImplementation*) impl)->getWeaponSpeedModifier();
}

unsigned int CreatureObjectAdapter::getSkillBoxesUpdateCounter() {
	return ((CreatureObjectImplementation*) impl)->getSkillBoxesUpdateCounter();
}

unsigned int CreatureObjectAdapter::getSkillModsCounter() {
	return ((CreatureObjectImplementation*) impl)->getSkillModsCounter();
}

unsigned int CreatureObjectAdapter::getNewSkillModsCounter(int cnt) {
	return ((CreatureObjectImplementation*) impl)->getNewSkillModsCounter(cnt);
}

String& CreatureObjectAdapter::getHideType() {
	return ((CreatureObjectImplementation*) impl)->getHideType();
}

String& CreatureObjectAdapter::getBoneType() {
	return ((CreatureObjectImplementation*) impl)->getBoneType();
}

String& CreatureObjectAdapter::getMeatType() {
	return ((CreatureObjectImplementation*) impl)->getMeatType();
}

int CreatureObjectAdapter::getBoneMax() {
	return ((CreatureObjectImplementation*) impl)->getBoneMax();
}

int CreatureObjectAdapter::getHideMax() {
	return ((CreatureObjectImplementation*) impl)->getHideMax();
}

int CreatureObjectAdapter::getMeatMax() {
	return ((CreatureObjectImplementation*) impl)->getMeatMax();
}

int CreatureObjectAdapter::getMilk() {
	return ((CreatureObjectImplementation*) impl)->getMilk();
}

bool CreatureObjectAdapter::hasOrganics() {
	return ((CreatureObjectImplementation*) impl)->hasOrganics();
}

int CreatureObjectAdapter::getCreatureHealth() {
	return ((CreatureObjectImplementation*) impl)->getCreatureHealth();
}

int CreatureObjectAdapter::getXP() {
	return ((CreatureObjectImplementation*) impl)->getXP();
}

int CreatureObjectAdapter::isHealer() {
	return ((CreatureObjectImplementation*) impl)->isHealer();
}

int CreatureObjectAdapter::isPack() {
	return ((CreatureObjectImplementation*) impl)->isPack();
}

int CreatureObjectAdapter::isHerd() {
	return ((CreatureObjectImplementation*) impl)->isHerd();
}

int CreatureObjectAdapter::isStalker() {
	return ((CreatureObjectImplementation*) impl)->isStalker();
}

int CreatureObjectAdapter::isKiller() {
	return ((CreatureObjectImplementation*) impl)->isKiller();
}

int CreatureObjectAdapter::isAggressive() {
	return ((CreatureObjectImplementation*) impl)->isAggressive();
}

String& CreatureObjectAdapter::getBehaviorScript() {
	return ((CreatureObjectImplementation*) impl)->getBehaviorScript();
}

String& CreatureObjectAdapter::getCreatureFaction() {
	return ((CreatureObjectImplementation*) impl)->getCreatureFaction();
}

String& CreatureObjectAdapter::getCreatureWeapon() {
	return ((CreatureObjectImplementation*) impl)->getCreatureWeapon();
}

String& CreatureObjectAdapter::getCreatureWeaponName() {
	return ((CreatureObjectImplementation*) impl)->getCreatureWeaponName();
}

String& CreatureObjectAdapter::getCreatureWeaponTemp() {
	return ((CreatureObjectImplementation*) impl)->getCreatureWeaponTemp();
}

String& CreatureObjectAdapter::getCreatureWeaponClass() {
	return ((CreatureObjectImplementation*) impl)->getCreatureWeaponClass();
}

int CreatureObjectAdapter::getCreatureWeaponEquipped() {
	return ((CreatureObjectImplementation*) impl)->getCreatureWeaponEquipped();
}

int CreatureObjectAdapter::getCreatureWeaponMinDamage() {
	return ((CreatureObjectImplementation*) impl)->getCreatureWeaponMinDamage();
}

int CreatureObjectAdapter::getCreatureWeaponMaxDamage() {
	return ((CreatureObjectImplementation*) impl)->getCreatureWeaponMaxDamage();
}

float CreatureObjectAdapter::getCreatureWeaponAttackSpeed() {
	return ((CreatureObjectImplementation*) impl)->getCreatureWeaponAttackSpeed();
}

String& CreatureObjectAdapter::getCreatureWeaponDamageType() {
	return ((CreatureObjectImplementation*) impl)->getCreatureWeaponDamageType();
}

String& CreatureObjectAdapter::getCreatureWeaponArmorPiercing() {
	return ((CreatureObjectImplementation*) impl)->getCreatureWeaponArmorPiercing();
}

float CreatureObjectAdapter::getInternalNPCDamageModifier() {
	return ((CreatureObjectImplementation*) impl)->getInternalNPCDamageModifier();
}

float CreatureObjectAdapter::getTame() {
	return ((CreatureObjectImplementation*) impl)->getTame();
}

String& CreatureObjectAdapter::getLootGroup() {
	return ((CreatureObjectImplementation*) impl)->getLootGroup();
}

unsigned int CreatureObjectAdapter::getFerocity() {
	return ((CreatureObjectImplementation*) impl)->getFerocity();
}

bool CreatureObjectAdapter::isBaby() {
	return ((CreatureObjectImplementation*) impl)->isBaby();
}

void CreatureObjectAdapter::setBaseAttribute(unsigned char attribute, int value) {
	return ((CreatureObjectImplementation*) impl)->setBaseAttribute(attribute, value);
}

void CreatureObjectAdapter::setBaseHealth(int value) {
	return ((CreatureObjectImplementation*) impl)->setBaseHealth(value);
}

void CreatureObjectAdapter::setBaseStrength(int value) {
	return ((CreatureObjectImplementation*) impl)->setBaseStrength(value);
}

void CreatureObjectAdapter::setBaseConstitution(int value) {
	return ((CreatureObjectImplementation*) impl)->setBaseConstitution(value);
}

void CreatureObjectAdapter::setBaseAction(int value) {
	return ((CreatureObjectImplementation*) impl)->setBaseAction(value);
}

void CreatureObjectAdapter::setBaseQuickness(int value) {
	return ((CreatureObjectImplementation*) impl)->setBaseQuickness(value);
}

void CreatureObjectAdapter::setBaseStamina(int value) {
	return ((CreatureObjectImplementation*) impl)->setBaseStamina(value);
}

void CreatureObjectAdapter::setBaseMind(int value) {
	return ((CreatureObjectImplementation*) impl)->setBaseMind(value);
}

void CreatureObjectAdapter::setBaseFocus(int value) {
	return ((CreatureObjectImplementation*) impl)->setBaseFocus(value);
}

void CreatureObjectAdapter::setBaseWillpower(int value) {
	return ((CreatureObjectImplementation*) impl)->setBaseWillpower(value);
}

void CreatureObjectAdapter::setAttribute(unsigned char attribute, int value) {
	return ((CreatureObjectImplementation*) impl)->setAttribute(attribute, value);
}

void CreatureObjectAdapter::setHealth(int value) {
	return ((CreatureObjectImplementation*) impl)->setHealth(value);
}

void CreatureObjectAdapter::setStrength(int value) {
	return ((CreatureObjectImplementation*) impl)->setStrength(value);
}

void CreatureObjectAdapter::setConstitution(int value) {
	return ((CreatureObjectImplementation*) impl)->setConstitution(value);
}

void CreatureObjectAdapter::setAction(int value) {
	return ((CreatureObjectImplementation*) impl)->setAction(value);
}

void CreatureObjectAdapter::setQuickness(int value) {
	return ((CreatureObjectImplementation*) impl)->setQuickness(value);
}

void CreatureObjectAdapter::setStamina(int value) {
	return ((CreatureObjectImplementation*) impl)->setStamina(value);
}

void CreatureObjectAdapter::setMind(int value) {
	return ((CreatureObjectImplementation*) impl)->setMind(value);
}

void CreatureObjectAdapter::setFocus(int value) {
	return ((CreatureObjectImplementation*) impl)->setFocus(value);
}

void CreatureObjectAdapter::setWillpower(int value) {
	return ((CreatureObjectImplementation*) impl)->setWillpower(value);
}

void CreatureObjectAdapter::setAttributeMax(unsigned char attribute, int value) {
	return ((CreatureObjectImplementation*) impl)->setAttributeMax(attribute, value);
}

void CreatureObjectAdapter::setHealthMax(int value) {
	return ((CreatureObjectImplementation*) impl)->setHealthMax(value);
}

void CreatureObjectAdapter::setStrengthMax(int value) {
	return ((CreatureObjectImplementation*) impl)->setStrengthMax(value);
}

void CreatureObjectAdapter::setConstitutionMax(int value) {
	return ((CreatureObjectImplementation*) impl)->setConstitutionMax(value);
}

void CreatureObjectAdapter::setActionMax(int value) {
	return ((CreatureObjectImplementation*) impl)->setActionMax(value);
}

void CreatureObjectAdapter::setQuicknessMax(int value) {
	return ((CreatureObjectImplementation*) impl)->setQuicknessMax(value);
}

void CreatureObjectAdapter::setStaminaMax(int value) {
	return ((CreatureObjectImplementation*) impl)->setStaminaMax(value);
}

void CreatureObjectAdapter::setMindMax(int value) {
	return ((CreatureObjectImplementation*) impl)->setMindMax(value);
}

void CreatureObjectAdapter::setFocusMax(int value) {
	return ((CreatureObjectImplementation*) impl)->setFocusMax(value);
}

void CreatureObjectAdapter::setWillpowerMax(int value) {
	return ((CreatureObjectImplementation*) impl)->setWillpowerMax(value);
}

void CreatureObjectAdapter::setWounds(unsigned char attribute, int value) {
	return ((CreatureObjectImplementation*) impl)->setWounds(attribute, value);
}

void CreatureObjectAdapter::setHealthWounds(int value) {
	return ((CreatureObjectImplementation*) impl)->setHealthWounds(value);
}

void CreatureObjectAdapter::setStrengthWounds(int value) {
	return ((CreatureObjectImplementation*) impl)->setStrengthWounds(value);
}

void CreatureObjectAdapter::setConstitutionWounds(int value) {
	return ((CreatureObjectImplementation*) impl)->setConstitutionWounds(value);
}

void CreatureObjectAdapter::setActionWounds(int value) {
	return ((CreatureObjectImplementation*) impl)->setActionWounds(value);
}

void CreatureObjectAdapter::setQuicknessWounds(int value) {
	return ((CreatureObjectImplementation*) impl)->setQuicknessWounds(value);
}

void CreatureObjectAdapter::setStaminaWounds(int value) {
	return ((CreatureObjectImplementation*) impl)->setStaminaWounds(value);
}

void CreatureObjectAdapter::setMindWounds(int value) {
	return ((CreatureObjectImplementation*) impl)->setMindWounds(value);
}

void CreatureObjectAdapter::setFocusWounds(int value) {
	return ((CreatureObjectImplementation*) impl)->setFocusWounds(value);
}

void CreatureObjectAdapter::setWillpowerWounds(int value) {
	return ((CreatureObjectImplementation*) impl)->setWillpowerWounds(value);
}

void CreatureObjectAdapter::setShockWounds(int value) {
	return ((CreatureObjectImplementation*) impl)->setShockWounds(value);
}

void CreatureObjectAdapter::setWoundsUpdateCounter(unsigned int count) {
	return ((CreatureObjectImplementation*) impl)->setWoundsUpdateCounter(count);
}

void CreatureObjectAdapter::changeAttributeMax(unsigned char attribute, int value) {
	return ((CreatureObjectImplementation*) impl)->changeAttributeMax(attribute, value);
}

void CreatureObjectAdapter::changeHealthMax(int value) {
	return ((CreatureObjectImplementation*) impl)->changeHealthMax(value);
}

void CreatureObjectAdapter::changeStrengthMax(int value) {
	return ((CreatureObjectImplementation*) impl)->changeStrengthMax(value);
}

void CreatureObjectAdapter::changeConstitutionMax(int value) {
	return ((CreatureObjectImplementation*) impl)->changeConstitutionMax(value);
}

void CreatureObjectAdapter::changeActionMax(int value) {
	return ((CreatureObjectImplementation*) impl)->changeActionMax(value);
}

void CreatureObjectAdapter::changeQuicknessMax(int value) {
	return ((CreatureObjectImplementation*) impl)->changeQuicknessMax(value);
}

void CreatureObjectAdapter::changeStaminaMax(int value) {
	return ((CreatureObjectImplementation*) impl)->changeStaminaMax(value);
}

void CreatureObjectAdapter::changeMindMax(int value) {
	return ((CreatureObjectImplementation*) impl)->changeMindMax(value);
}

void CreatureObjectAdapter::changeFocusMax(int value) {
	return ((CreatureObjectImplementation*) impl)->changeFocusMax(value);
}

void CreatureObjectAdapter::changeWillpowerMax(int value) {
	return ((CreatureObjectImplementation*) impl)->changeWillpowerMax(value);
}

void CreatureObjectAdapter::changeAttribute(unsigned char attribute, int value) {
	return ((CreatureObjectImplementation*) impl)->changeAttribute(attribute, value);
}

void CreatureObjectAdapter::changeHealth(int value) {
	return ((CreatureObjectImplementation*) impl)->changeHealth(value);
}

void CreatureObjectAdapter::changeStrength(int value) {
	return ((CreatureObjectImplementation*) impl)->changeStrength(value);
}

void CreatureObjectAdapter::changeConstitution(int value) {
	return ((CreatureObjectImplementation*) impl)->changeConstitution(value);
}

void CreatureObjectAdapter::changeAction(int value) {
	return ((CreatureObjectImplementation*) impl)->changeAction(value);
}

void CreatureObjectAdapter::changeQuickness(int value) {
	return ((CreatureObjectImplementation*) impl)->changeQuickness(value);
}

void CreatureObjectAdapter::changeStamina(int value) {
	return ((CreatureObjectImplementation*) impl)->changeStamina(value);
}

void CreatureObjectAdapter::changeMind(int value) {
	return ((CreatureObjectImplementation*) impl)->changeMind(value);
}

void CreatureObjectAdapter::changeFocus(int value) {
	return ((CreatureObjectImplementation*) impl)->changeFocus(value);
}

void CreatureObjectAdapter::changeWillpower(int value) {
	return ((CreatureObjectImplementation*) impl)->changeWillpower(value);
}

void CreatureObjectAdapter::setpbHA(int value) {
	return ((CreatureObjectImplementation*) impl)->setpbHA(value);
}

void CreatureObjectAdapter::setpbMind(int value) {
	return ((CreatureObjectImplementation*) impl)->setpbMind(value);
}

void CreatureObjectAdapter::setpbTick(int value) {
	return ((CreatureObjectImplementation*) impl)->setpbTick(value);
}

void CreatureObjectAdapter::setpbBonus(unsigned int value) {
	return ((CreatureObjectImplementation*) impl)->setpbBonus(value);
}

void CreatureObjectAdapter::setSpeed(float spd) {
	return ((CreatureObjectImplementation*) impl)->setSpeed(spd);
}

void CreatureObjectAdapter::setAcceleration(float acc) {
	return ((CreatureObjectImplementation*) impl)->setAcceleration(acc);
}

void CreatureObjectAdapter::changeConditionDamage(int amount) {
	return ((CreatureObjectImplementation*) impl)->changeConditionDamage(amount);
}

void CreatureObjectAdapter::setMaxCondition(int condition) {
	return ((CreatureObjectImplementation*) impl)->setMaxCondition(condition);
}

void CreatureObjectAdapter::setPosture(unsigned char state, bool overrideDizzy, bool objectInteraction, float objX, float objY, float objZ) {
	return ((CreatureObjectImplementation*) impl)->setPosture(state, overrideDizzy, objectInteraction, objX, objY, objZ);
}

void CreatureObjectAdapter::setPvpStatusBitmask(unsigned int mask) {
	return ((CreatureObjectImplementation*) impl)->setPvpStatusBitmask(mask);
}

void CreatureObjectAdapter::setFactionRank(unsigned char rank, bool updateClient) {
	return ((CreatureObjectImplementation*) impl)->setFactionRank(rank, updateClient);
}

void CreatureObjectAdapter::setDizziedState() {
	return ((CreatureObjectImplementation*) impl)->setDizziedState();
}

void CreatureObjectAdapter::setStunnedState() {
	return ((CreatureObjectImplementation*) impl)->setStunnedState();
}

void CreatureObjectAdapter::setBlindedState() {
	return ((CreatureObjectImplementation*) impl)->setBlindedState();
}

void CreatureObjectAdapter::setIntimidatedState() {
	return ((CreatureObjectImplementation*) impl)->setIntimidatedState();
}

void CreatureObjectAdapter::setSnaredState() {
	return ((CreatureObjectImplementation*) impl)->setSnaredState();
}

void CreatureObjectAdapter::setRootedState() {
	return ((CreatureObjectImplementation*) impl)->setRootedState();
}

void CreatureObjectAdapter::setBerserkedState(unsigned int duration) {
	return ((CreatureObjectImplementation*) impl)->setBerserkedState(duration);
}

int CreatureObjectAdapter::addDotState(CreatureObject* attacker, unsigned long long dotID, unsigned long long dotType, int str, int type, int duration, float potency, int defense) {
	return ((CreatureObjectImplementation*) impl)->addDotState(attacker, dotID, dotType, str, type, duration, potency, defense);
}

bool CreatureObjectAdapter::healDot(int dotType, int reduction) {
	return ((CreatureObjectImplementation*) impl)->healDot(dotType, reduction);
}

bool CreatureObjectAdapter::setNextAttackDelay(int del) {
	return ((CreatureObjectImplementation*) impl)->setNextAttackDelay(del);
}

void CreatureObjectAdapter::setCharacterName(const String& name) {
	return ((CreatureObjectImplementation*) impl)->setCharacterName(name);
}

void CreatureObjectAdapter::setCharacterName(const UnicodeString& name) {
	return ((CreatureObjectImplementation*) impl)->setCharacterName(name);
}

void CreatureObjectAdapter::setTerrainName(const String& name) {
	return ((CreatureObjectImplementation*) impl)->setTerrainName(name);
}

void CreatureObjectAdapter::updateCharacterAppearance() {
	return ((CreatureObjectImplementation*) impl)->updateCharacterAppearance();
}

void CreatureObjectAdapter::setHairAppearance(String& cust) {
	return ((CreatureObjectImplementation*) impl)->setHairAppearance(cust);
}

void CreatureObjectAdapter::setHairAppearanceAttribute(unsigned char type, unsigned char value) {
	return ((CreatureObjectImplementation*) impl)->setHairAppearanceAttribute(type, value);
}

void CreatureObjectAdapter::setHairAppearanceAttribute(String& type, unsigned char value) {
	return ((CreatureObjectImplementation*) impl)->setHairAppearanceAttribute(type, value);
}

void CreatureObjectAdapter::setRaceName(const String& name) {
	return ((CreatureObjectImplementation*) impl)->setRaceName(name);
}

void CreatureObjectAdapter::setGender(const String& name) {
	return ((CreatureObjectImplementation*) impl)->setGender(name);
}

void CreatureObjectAdapter::setCreatureType(const String& name) {
	return ((CreatureObjectImplementation*) impl)->setCreatureType(name);
}

void CreatureObjectAdapter::setFaction(unsigned int fac) {
	return ((CreatureObjectImplementation*) impl)->setFaction(fac);
}

void CreatureObjectAdapter::setHeight(float h) {
	return ((CreatureObjectImplementation*) impl)->setHeight(h);
}

void CreatureObjectAdapter::setMood(unsigned char mdid) {
	return ((CreatureObjectImplementation*) impl)->setMood(mdid);
}

void CreatureObjectAdapter::setMood(const String& m) {
	return ((CreatureObjectImplementation*) impl)->setMood(m);
}

void CreatureObjectAdapter::setGroup(GroupObject* Group) {
	return ((CreatureObjectImplementation*) impl)->setGroup(Group);
}

void CreatureObjectAdapter::setMount(CreatureObject* mount) {
	return ((CreatureObjectImplementation*) impl)->setMount(mount);
}

void CreatureObjectAdapter::explode(int level, bool destroy) {
	return ((CreatureObjectImplementation*) impl)->explode(level, destroy);
}

BuffObject* CreatureObjectAdapter::getBuffObject(const unsigned int buffCRC) {
	return ((CreatureObjectImplementation*) impl)->getBuffObject(buffCRC);
}

bool CreatureObjectAdapter::hasBuff(const unsigned int buffCRC) {
	return ((CreatureObjectImplementation*) impl)->hasBuff(buffCRC);
}

bool CreatureObjectAdapter::healState(CreatureObject* target, unsigned long long state) {
	return ((CreatureObjectImplementation*) impl)->healState(target, state);
}

void CreatureObjectAdapter::deactivateWoundTreatment() {
	return ((CreatureObjectImplementation*) impl)->deactivateWoundTreatment();
}

void CreatureObjectAdapter::activateWoundTreatment() {
	return ((CreatureObjectImplementation*) impl)->activateWoundTreatment();
}

void CreatureObjectAdapter::deactivateInjuryTreatment(bool isRangedStim) {
	return ((CreatureObjectImplementation*) impl)->deactivateInjuryTreatment(isRangedStim);
}

void CreatureObjectAdapter::activateInjuryTreatment() {
	return ((CreatureObjectImplementation*) impl)->activateInjuryTreatment();
}

void CreatureObjectAdapter::deactivateStateTreatment() {
	return ((CreatureObjectImplementation*) impl)->deactivateStateTreatment();
}

void CreatureObjectAdapter::activateStateTreatment() {
	return ((CreatureObjectImplementation*) impl)->activateStateTreatment();
}

void CreatureObjectAdapter::deactivateConditionTreatment() {
	return ((CreatureObjectImplementation*) impl)->deactivateConditionTreatment();
}

void CreatureObjectAdapter::activateConditionTreatment() {
	return ((CreatureObjectImplementation*) impl)->activateConditionTreatment();
}

bool CreatureObjectAdapter::canTreatWounds() {
	return ((CreatureObjectImplementation*) impl)->canTreatWounds();
}

bool CreatureObjectAdapter::canTreatInjuries() {
	return ((CreatureObjectImplementation*) impl)->canTreatInjuries();
}

bool CreatureObjectAdapter::canTreatStates() {
	return ((CreatureObjectImplementation*) impl)->canTreatStates();
}

bool CreatureObjectAdapter::canTreatConditions() {
	return ((CreatureObjectImplementation*) impl)->canTreatConditions();
}

int CreatureObjectAdapter::getMedicalFacilityRating() {
	return ((CreatureObjectImplementation*) impl)->getMedicalFacilityRating();
}

void CreatureObjectAdapter::setBoneType(const String& bone) {
	return ((CreatureObjectImplementation*) impl)->setBoneType(bone);
}

void CreatureObjectAdapter::setBoneMax(int bonemax) {
	return ((CreatureObjectImplementation*) impl)->setBoneMax(bonemax);
}

void CreatureObjectAdapter::setHideType(const String& hide) {
	return ((CreatureObjectImplementation*) impl)->setHideType(hide);
}

void CreatureObjectAdapter::setHideMax(int hidemax) {
	return ((CreatureObjectImplementation*) impl)->setHideMax(hidemax);
}

void CreatureObjectAdapter::setMeatType(const String& meat) {
	return ((CreatureObjectImplementation*) impl)->setMeatType(meat);
}

void CreatureObjectAdapter::setMeatMax(int meatmax) {
	return ((CreatureObjectImplementation*) impl)->setMeatMax(meatmax);
}

void CreatureObjectAdapter::setMilk(int milkamt) {
	return ((CreatureObjectImplementation*) impl)->setMilk(milkamt);
}

void CreatureObjectAdapter::setXP(int xp) {
	return ((CreatureObjectImplementation*) impl)->setXP(xp);
}

void CreatureObjectAdapter::setHealer(int heale) {
	return ((CreatureObjectImplementation*) impl)->setHealer(heale);
}

void CreatureObjectAdapter::setPack(int pack) {
	return ((CreatureObjectImplementation*) impl)->setPack(pack);
}

void CreatureObjectAdapter::setHerd(int herd) {
	return ((CreatureObjectImplementation*) impl)->setHerd(herd);
}

void CreatureObjectAdapter::setStalker(int stalker) {
	return ((CreatureObjectImplementation*) impl)->setStalker(stalker);
}

void CreatureObjectAdapter::setKiller(int killer) {
	return ((CreatureObjectImplementation*) impl)->setKiller(killer);
}

void CreatureObjectAdapter::setAggressive(int aggressive) {
	return ((CreatureObjectImplementation*) impl)->setAggressive(aggressive);
}

void CreatureObjectAdapter::setBehaviorScript(const String& behaviorScript) {
	return ((CreatureObjectImplementation*) impl)->setBehaviorScript(behaviorScript);
}

void CreatureObjectAdapter::setLootGroup(const String& lootgroup) {
	return ((CreatureObjectImplementation*) impl)->setLootGroup(lootgroup);
}

void CreatureObjectAdapter::setTame(float tme) {
	return ((CreatureObjectImplementation*) impl)->setTame(tme);
}

void CreatureObjectAdapter::setCreatureFaction(const String& cfac) {
	return ((CreatureObjectImplementation*) impl)->setCreatureFaction(cfac);
}

void CreatureObjectAdapter::setInternalNPCDamageModifier(float indm) {
	return ((CreatureObjectImplementation*) impl)->setInternalNPCDamageModifier(indm);
}

void CreatureObjectAdapter::setFerocity(unsigned int fero) {
	return ((CreatureObjectImplementation*) impl)->setFerocity(fero);
}

void CreatureObjectAdapter::setBaby(bool baby) {
	return ((CreatureObjectImplementation*) impl)->setBaby(baby);
}

void CreatureObjectAdapter::setCreatureWeapon(const String& wpon) {
	return ((CreatureObjectImplementation*) impl)->setCreatureWeapon(wpon);
}

void CreatureObjectAdapter::setCreatureWeaponName(const String& weaponname) {
	return ((CreatureObjectImplementation*) impl)->setCreatureWeaponName(weaponname);
}

void CreatureObjectAdapter::setCreatureWeaponTemp(const String& weapontemp) {
	return ((CreatureObjectImplementation*) impl)->setCreatureWeaponTemp(weapontemp);
}

void CreatureObjectAdapter::setCreatureWeaponClass(const String& weaponclass) {
	return ((CreatureObjectImplementation*) impl)->setCreatureWeaponClass(weaponclass);
}

void CreatureObjectAdapter::setCreatureWeaponEquipped(int weaponequ) {
	return ((CreatureObjectImplementation*) impl)->setCreatureWeaponEquipped(weaponequ);
}

void CreatureObjectAdapter::setCreatureWeaponMinDamage(int weaponmindam) {
	return ((CreatureObjectImplementation*) impl)->setCreatureWeaponMinDamage(weaponmindam);
}

void CreatureObjectAdapter::setCreatureWeaponMaxDamage(int weaponmaxdam) {
	return ((CreatureObjectImplementation*) impl)->setCreatureWeaponMaxDamage(weaponmaxdam);
}

void CreatureObjectAdapter::setCreatureWeaponAttackSpeed(float weaponattackspeed) {
	return ((CreatureObjectImplementation*) impl)->setCreatureWeaponAttackSpeed(weaponattackspeed);
}

void CreatureObjectAdapter::setCreatureWeaponDamageType(const String& weapondamtype) {
	return ((CreatureObjectImplementation*) impl)->setCreatureWeaponDamageType(weapondamtype);
}

void CreatureObjectAdapter::setCreatureWeaponArmorPiercing(const String& weaponarmorpiercing) {
	return ((CreatureObjectImplementation*) impl)->setCreatureWeaponArmorPiercing(weaponarmorpiercing);
}

bool CreatureObjectAdapter::isFrozen() {
	return ((CreatureObjectImplementation*) impl)->isFrozen();
}

void CreatureObjectAdapter::setFrozen(bool flag) {
	return ((CreatureObjectImplementation*) impl)->setFrozen(flag);
}

String& CreatureObjectAdapter::getTemplateString() {
	return ((CreatureObjectImplementation*) impl)->getTemplateString();
}

void CreatureObjectAdapter::setTemplateString(const String& tmpString) {
	return ((CreatureObjectImplementation*) impl)->setTemplateString(tmpString);
}

void CreatureObjectAdapter::clearTemplateString() {
	return ((CreatureObjectImplementation*) impl)->clearTemplateString();
}

void CreatureObjectAdapter::say(const UnicodeString& message, unsigned int moodid, unsigned int mood2) {
	return ((CreatureObjectImplementation*) impl)->say(message, moodid, mood2);
}

void CreatureObjectAdapter::say(const String& file, const String& str, StfParameter* param, unsigned int moodid, unsigned int mood2) {
	return ((CreatureObjectImplementation*) impl)->say(file, str, param, moodid, mood2);
}

void CreatureObjectAdapter::setCamoType(unsigned int cType) {
	return ((CreatureObjectImplementation*) impl)->setCamoType(cType);
}

unsigned int CreatureObjectAdapter::getCamoType() {
	return ((CreatureObjectImplementation*) impl)->getCamoType();
}

void CreatureObjectAdapter::activateCamo(unsigned int camoCRC, unsigned int time, unsigned int ms) {
	return ((CreatureObjectImplementation*) impl)->activateCamo(camoCRC, time, ms);
}

void CreatureObjectAdapter::deactivateCamo(bool forced) {
	return ((CreatureObjectImplementation*) impl)->deactivateCamo(forced);
}

void CreatureObjectAdapter::activateCamoLock() {
	return ((CreatureObjectImplementation*) impl)->activateCamoLock();
}

bool CreatureObjectAdapter::isCamoCooldownActive() {
	return ((CreatureObjectImplementation*) impl)->isCamoCooldownActive();
}

int CreatureObjectAdapter::getCamoCooldownLeft() {
	return ((CreatureObjectImplementation*) impl)->getCamoCooldownLeft();
}

int CreatureObjectAdapter::getMaskScent() {
	return ((CreatureObjectImplementation*) impl)->getMaskScent();
}

void CreatureObjectAdapter::setMaskScent(int value) {
	return ((CreatureObjectImplementation*) impl)->setMaskScent(value);
}

Player* CreatureObjectAdapter::getCamoXPTraget() {
	return ((CreatureObjectImplementation*) impl)->getCamoXPTraget();
}

void CreatureObjectAdapter::setCamoXPTraget(Player* xpTaget) {
	return ((CreatureObjectImplementation*) impl)->setCamoXPTraget(xpTaget);
}

void CreatureObjectAdapter::setCampModifier(int mod) {
	return ((CreatureObjectImplementation*) impl)->setCampModifier(mod);
}

int CreatureObjectAdapter::getCampModifier() {
	return ((CreatureObjectImplementation*) impl)->getCampModifier();
}

bool CreatureObjectAdapter::isInCamp() {
	return ((CreatureObjectImplementation*) impl)->isInCamp();
}

int CreatureObjectAdapter::getCampAggroMod() {
	return ((CreatureObjectImplementation*) impl)->getCampAggroMod();
}

void CreatureObjectAdapter::setCampAggroMod(int mod) {
	return ((CreatureObjectImplementation*) impl)->setCampAggroMod(mod);
}

unsigned char CreatureObjectAdapter::getLowestHAMAttribute() {
	return ((CreatureObjectImplementation*) impl)->getLowestHAMAttribute();
}

void CreatureObjectAdapter::onIncapacitated(SceneObject* attacker) {
	return ((CreatureObjectImplementation*) impl)->onIncapacitated(attacker);
}

void CreatureObjectAdapter::onIncapacitationRecovery() {
	return ((CreatureObjectImplementation*) impl)->onIncapacitationRecovery();
}

void CreatureObjectAdapter::onConverse(Player* player) {
	return ((CreatureObjectImplementation*) impl)->onConverse(player);
}

void CreatureObjectAdapter::onDeath() {
	return ((CreatureObjectImplementation*) impl)->onDeath();
}

void CreatureObjectAdapter::onKilled(SceneObject* killer) {
	return ((CreatureObjectImplementation*) impl)->onKilled(killer);
}

void CreatureObjectAdapter::onResuscitated(SceneObject* healer) {
	return ((CreatureObjectImplementation*) impl)->onResuscitated(healer);
}

void CreatureObjectAdapter::onDamageHealed(SceneObject* healer, unsigned char attribute, unsigned int amount) {
	return ((CreatureObjectImplementation*) impl)->onDamageHealed(healer, attribute, amount);
}

void CreatureObjectAdapter::onWoundHealed(SceneObject* healer, unsigned char attribute, unsigned int amount) {
	return ((CreatureObjectImplementation*) impl)->onWoundHealed(healer, attribute, amount);
}

void CreatureObjectAdapter::onHealEnhanced(SceneObject* enhancer, unsigned char attribute, unsigned int amount, float duration) {
	return ((CreatureObjectImplementation*) impl)->onHealEnhanced(enhancer, attribute, amount, duration);
}

void CreatureObjectAdapter::onBlinded() {
	return ((CreatureObjectImplementation*) impl)->onBlinded();
}

void CreatureObjectAdapter::onDizzied() {
	return ((CreatureObjectImplementation*) impl)->onDizzied();
}

void CreatureObjectAdapter::onStunned() {
	return ((CreatureObjectImplementation*) impl)->onStunned();
}

void CreatureObjectAdapter::onIntimidated() {
	return ((CreatureObjectImplementation*) impl)->onIntimidated();
}

void CreatureObjectAdapter::onEquip(TangibleObject* item) {
	return ((CreatureObjectImplementation*) impl)->onEquip(item);
}

void CreatureObjectAdapter::onUnequip(TangibleObject* item) {
	return ((CreatureObjectImplementation*) impl)->onUnequip(item);
}

void CreatureObjectAdapter::onChangeWeapon(Weapon* weapon) {
	return ((CreatureObjectImplementation*) impl)->onChangeWeapon(weapon);
}

void CreatureObjectAdapter::onChangeArmor(Armor* armor) {
	return ((CreatureObjectImplementation*) impl)->onChangeArmor(armor);
}

void CreatureObjectAdapter::onReceiveDamage(SceneObject* attacker, unsigned char attribute, unsigned int amount) {
	return ((CreatureObjectImplementation*) impl)->onReceiveDamage(attacker, attribute, amount);
}

void CreatureObjectAdapter::onRegenerateHAM() {
	return ((CreatureObjectImplementation*) impl)->onRegenerateHAM();
}

bool CreatureObjectAdapter::inflictDamage(CreatureObject* victim, unsigned char attribute, unsigned int damage) {
	return ((CreatureObjectImplementation*) impl)->inflictDamage(victim, attribute, damage);
}

void CreatureObjectAdapter::incapacitateSelf() {
	return ((CreatureObjectImplementation*) impl)->incapacitateSelf();
}

void CreatureObjectAdapter::recoverFromIncapacitation() {
	return ((CreatureObjectImplementation*) impl)->recoverFromIncapacitation();
}

void CreatureObjectAdapter::die() {
	return ((CreatureObjectImplementation*) impl)->die();
}

void CreatureObjectAdapter::equipItem(TangibleObject* item) {
	return ((CreatureObjectImplementation*) impl)->equipItem(item);
}

void CreatureObjectAdapter::unequipItem(TangibleObject* item) {
	return ((CreatureObjectImplementation*) impl)->unequipItem(item);
}

bool CreatureObjectAdapter::canRecoverFromIncapacitation() {
	return ((CreatureObjectImplementation*) impl)->canRecoverFromIncapacitation();
}

void CreatureObjectAdapter::setBerserkDamage(unsigned int damage) {
	return ((CreatureObjectImplementation*) impl)->setBerserkDamage(damage);
}

unsigned int CreatureObjectAdapter::getBerserkDamage() {
	return ((CreatureObjectImplementation*) impl)->getBerserkDamage();
}

unsigned int CreatureObjectAdapter::getAimMod() {
	return ((CreatureObjectImplementation*) impl)->getAimMod();
}

void CreatureObjectAdapter::setAimMod(unsigned int mod) {
	return ((CreatureObjectImplementation*) impl)->setAimMod(mod);
}

bool CreatureObjectAdapter::isAiming() {
	return ((CreatureObjectImplementation*) impl)->isAiming();
}

void CreatureObjectAdapter::setAimingState() {
	return ((CreatureObjectImplementation*) impl)->setAimingState();
}

bool CreatureObjectAdapter::isInCover() {
	return ((CreatureObjectImplementation*) impl)->isInCover();
}

void CreatureObjectAdapter::setCoverState() {
	return ((CreatureObjectImplementation*) impl)->setCoverState();
}

bool CreatureObjectAdapter::isEscaping() {
	return ((CreatureObjectImplementation*) impl)->isEscaping();
}

void CreatureObjectAdapter::setEscaping(bool escape) {
	return ((CreatureObjectImplementation*) impl)->setEscaping(escape);
}

void CreatureObjectAdapter::activateEscape() {
	return ((CreatureObjectImplementation*) impl)->activateEscape();
}

void CreatureObjectAdapter::deactivateEscape() {
	return ((CreatureObjectImplementation*) impl)->deactivateEscape();
}

int CreatureObjectAdapter::getNumberOfSkills() {
	return ((CreatureObjectImplementation*) impl)->getNumberOfSkills();
}

void CreatureObjectAdapter::updateZone(bool lightUpdate, bool sendPackets) {
	return ((CreatureObjectImplementation*) impl)->updateZone(lightUpdate, sendPackets);
}

void CreatureObjectAdapter::updateZoneWithParent(unsigned long long cell, bool lightUpdate, bool sendPackets) {
	return ((CreatureObjectImplementation*) impl)->updateZoneWithParent(cell, lightUpdate, sendPackets);
}

bool CreatureObjectAdapter::isDisabled() {
	return ((CreatureObjectImplementation*) impl)->isDisabled();
}

/*
 *	CreatureObjectHelper
 */

CreatureObjectHelper* CreatureObjectHelper::staticInitializer = CreatureObjectHelper::instance();

CreatureObjectHelper::CreatureObjectHelper() {
	className = "CreatureObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void CreatureObjectHelper::finalizeHelper() {
	CreatureObjectHelper::finalize();
}

DistributedObject* CreatureObjectHelper::instantiateObject() {
	return new CreatureObject(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* CreatureObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new CreatureObjectAdapter((CreatureObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	CreatureObjectServant
 */

CreatureObjectServant::CreatureObjectServant(unsigned long long oid, int type) : TangibleObjectImplementation(oid, type) {
	_classHelper = CreatureObjectHelper::instance();
}

CreatureObjectServant::~CreatureObjectServant() {
}

void CreatureObjectServant::_setStub(DistributedObjectStub* stub) {
	_this = (CreatureObject*) stub;
	TangibleObjectServant::_setStub(stub);
}

DistributedObjectStub* CreatureObjectServant::_getStub() {
	return _this;
}

