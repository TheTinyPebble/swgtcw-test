/*
 *	server/zone/objects/creature/CreatureObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "CreatureObject.h"

#include "server/zone/objects/scene/variables/ParameterizedStringId.h"

#include "server/zone/objects/creature/professions/SkillBox.h"

#include "server/zone/objects/group/GroupObject.h"

#include "server/zone/objects/tangible/weapon/WeaponObject.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/intangible/ControlDevice.h"

#include "server/zone/Zone.h"

/*
 *	CreatureObjectStub
 */

CreatureObject::CreatureObject() : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new CreatureObjectImplementation();
	_impl->_setStub(this);
}

CreatureObject::CreatureObject(DummyConstructorParameter* param) : TangibleObject(param) {
}

CreatureObject::~CreatureObject() {
}


void CreatureObject::loadTemplateData(SharedObjectTemplate* templateData) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((CreatureObjectImplementation*) _impl)->loadTemplateData(templateData);
}

void CreatureObject::initializeTransientMembers() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->initializeTransientMembers();
}

void CreatureObject::clearQueueAction(unsigned int actioncntr, float timer, unsigned int tab1, unsigned int tab2) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addUnsignedIntParameter(actioncntr);
		method.addFloatParameter(timer);
		method.addUnsignedIntParameter(tab1);
		method.addUnsignedIntParameter(tab2);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->clearQueueAction(actioncntr, timer, tab1, tab2);
}

void CreatureObject::sendBaselinesTo(SceneObject* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->sendBaselinesTo(player);
}

void CreatureObject::sendPvpStatusTo(PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->sendPvpStatusTo(player);
}

void CreatureObject::sendSystemMessage(const String& message) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addAsciiParameter(message);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->sendSystemMessage(message);
}

void CreatureObject::sendSystemMessage(UnicodeString& message) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addUnicodeParameter(message);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->sendSystemMessage(message);
}

void CreatureObject::sendSystemMessage(const String& file, const String& stringid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addAsciiParameter(file);
		method.addAsciiParameter(stringid);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->sendSystemMessage(file, stringid);
}

void CreatureObject::sendSystemMessage(ParameterizedStringId& stringid) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((CreatureObjectImplementation*) _impl)->sendSystemMessage(stringid);
}

void CreatureObject::sendSlottedObjectsTo(SceneObject* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->sendSlottedObjectsTo(player);
}

void CreatureObject::setCombatState() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setCombatState();
}

void CreatureObject::clearCombatState(bool clearDefenders) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addBooleanParameter(clearDefenders);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->clearCombatState(clearDefenders);
}

void CreatureObject::setPosture(int newPosture, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addSignedIntParameter(newPosture);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setPosture(newPosture, notifyClient);
}

void CreatureObject::setHAM(int type, int value, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addSignedIntParameter(type);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setHAM(type, value, notifyClient);
}

int CreatureObject::inflictDamage(int damageType, int damage, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addSignedIntParameter(damageType);
		method.addSignedIntParameter(damage);
		method.addBooleanParameter(notifyClient);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->inflictDamage(damageType, damage, notifyClient);
}

void CreatureObject::setBaseHAM(int type, int value, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addSignedIntParameter(type);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBaseHAM(type, value, notifyClient);
}

void CreatureObject::setWounds(int type, int value, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addSignedIntParameter(type);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setWounds(type, value, notifyClient);
}

void CreatureObject::setMaxHAM(int type, int value, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addSignedIntParameter(type);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMaxHAM(type, value, notifyClient);
}

void CreatureObject::setEncumbrance(int type, int value, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);
		method.addSignedIntParameter(type);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setEncumbrance(type, value, notifyClient);
}

void CreatureObject::setWeapon(WeaponObject* weao, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);
		method.addObjectParameter(weao);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setWeapon(weao, notifyClient);
}

void CreatureObject::setInstrumentID(int instrumentid, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);
		method.addSignedIntParameter(instrumentid);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setInstrumentID(instrumentid, notifyClient);
}

void CreatureObject::setTargetID(unsigned long long targetID, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);
		method.addUnsignedLongParameter(targetID);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setTargetID(targetID, notifyClient);
}

void CreatureObject::setBankCredits(int credits, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);
		method.addSignedIntParameter(credits);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setBankCredits(credits, notifyClient);
}

void CreatureObject::addBankCredits(int credits, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);
		method.addSignedIntParameter(credits);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->addBankCredits(credits, notifyClient);
}

void CreatureObject::substractBankCredits(int credits) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);
		method.addSignedIntParameter(credits);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->substractBankCredits(credits);
}

void CreatureObject::setCashCredits(int credits, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);
		method.addSignedIntParameter(credits);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setCashCredits(credits, notifyClient);
}

void CreatureObject::addSkillBox(SkillBox* skillBox, bool notifyClient) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((CreatureObjectImplementation*) _impl)->addSkillBox(skillBox, notifyClient);
}

void CreatureObject::addSkillBox(const String& skillBox, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);
		method.addAsciiParameter(skillBox);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->addSkillBox(skillBox, notifyClient);
}

void CreatureObject::removeSkillBox(SkillBox* skillBox, bool notifyClient) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((CreatureObjectImplementation*) _impl)->removeSkillBox(skillBox, notifyClient);
}

void CreatureObject::removeSkillBox(const String& skillBox, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);
		method.addAsciiParameter(skillBox);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->removeSkillBox(skillBox, notifyClient);
}

void CreatureObject::addSkillMod(const String& skillMod, long long value, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);
		method.addAsciiParameter(skillMod);
		method.addSignedLongParameter(value);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->addSkillMod(skillMod, value, notifyClient);
}

void CreatureObject::removeSkillMod(const String& skillMod, bool notifyCLient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);
		method.addAsciiParameter(skillMod);
		method.addBooleanParameter(notifyCLient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->removeSkillMod(skillMod, notifyCLient);
}

void CreatureObject::updateGroupInviterID(unsigned long long id, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);
		method.addUnsignedLongParameter(id);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updateGroupInviterID(id, notifyClient);
}

void CreatureObject::updateGroup(GroupObject* group, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);
		method.addObjectParameter(group);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->updateGroup(group, notifyClient);
}

void CreatureObject::enqueueCommand(unsigned int actionCRC, unsigned int actionCount, unsigned long long targetID, const UnicodeString& arguments) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 36);
		method.addUnsignedIntParameter(actionCRC);
		method.addUnsignedIntParameter(actionCount);
		method.addUnsignedLongParameter(targetID);
		method.addUnicodeParameter(arguments);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->enqueueCommand(actionCRC, actionCount, targetID, arguments);
}

void CreatureObject::setMood(byte moodID, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 37);
		method.addByteParameter(moodID);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMood(moodID, notifyClient);
}

void CreatureObject::setMoodString(const String& animation, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 38);
		method.addAsciiParameter(animation);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setMoodString(animation, notifyClient);
}

void CreatureObject::deleteQueueAction(unsigned int actionCount) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 39);
		method.addUnsignedIntParameter(actionCount);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->deleteQueueAction(actionCount);
}

void CreatureObject::setState(unsigned long long state, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 40);
		method.addUnsignedLongParameter(state);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setState(state, notifyClient);
}

void CreatureObject::clearState(unsigned long long state, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 41);
		method.addUnsignedLongParameter(state);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->clearState(state, notifyClient);
}

void CreatureObject::setControlDevice(ControlDevice* device) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 42);
		method.addObjectParameter(device);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setControlDevice(device);
}

unsigned int CreatureObject::getWearableMask() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 43);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getWearableMask();
}

void CreatureObject::setCreatureLink(CreatureObject* object, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 44);
		method.addObjectParameter(object);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setCreatureLink(object, notifyClient);
}

void CreatureObject::executeObjectControllerAction(unsigned int actionCRC) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 45);
		method.addUnsignedIntParameter(actionCRC);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->executeObjectControllerAction(actionCRC);
}

bool CreatureObject::isAttackableBy(CreatureObject* object) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 46);
		method.addObjectParameter(object);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isAttackableBy(object);
}

bool CreatureObject::isAggressiveTo(PlayerCreature* object) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 47);
		method.addObjectParameter(object);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isAggressiveTo(object);
}

void CreatureObject::notifyPostureChange(int newPosture) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 48);
		method.addSignedIntParameter(newPosture);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->notifyPostureChange(newPosture);
}

void CreatureObject::attachPostureChangeObserver(PostureChangeObserver* observer) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((CreatureObjectImplementation*) _impl)->attachPostureChangeObserver(observer);
}

void CreatureObject::deattachPostureChangeObserver(PostureChangeObserver* observer) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((CreatureObjectImplementation*) _impl)->deattachPostureChangeObserver(observer);
}

int CreatureObject::canAddObject(SceneObject* object, String& errorDescription) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 49);
		method.addObjectParameter(object);
		method.addAsciiParameter(errorDescription);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->canAddObject(object, errorDescription);
}

void CreatureObject::doAnimation(const String& animation) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 50);
		method.addAsciiParameter(animation);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->doAnimation(animation);
}

void CreatureObject::doCombatAnimation(CreatureObject* defender, unsigned int animationCRC, byte hit) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 51);
		method.addObjectParameter(defender);
		method.addUnsignedIntParameter(animationCRC);
		method.addByteParameter(hit);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->doCombatAnimation(defender, animationCRC, hit);
}

void CreatureObject::playEffect(const String& file, const String& aux) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 52);
		method.addAsciiParameter(file);
		method.addAsciiParameter(aux);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->playEffect(file, aux);
}

void CreatureObject::showFlyText(const String& file, const String& uax, byte red, byte green, byte blue) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 53);
		method.addAsciiParameter(file);
		method.addAsciiParameter(uax);
		method.addByteParameter(red);
		method.addByteParameter(green);
		method.addByteParameter(blue);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->showFlyText(file, uax, red, green, blue);
}

void CreatureObject::activateQueueAction() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 54);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->activateQueueAction();
}

UnicodeString CreatureObject::getCreatureName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 55);

		method.executeWithUnicodeReturn(_return_getCreatureName);
		return _return_getCreatureName;
	} else
		return ((CreatureObjectImplementation*) _impl)->getCreatureName();
}

bool CreatureObject::isRebel() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 56);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isRebel();
}

bool CreatureObject::isImperial() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 57);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isImperial();
}

bool CreatureObject::isNeurtral() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 58);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isNeurtral();
}

bool CreatureObject::isGroupped() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 59);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isGroupped();
}

int CreatureObject::getBankCredits() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 60);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBankCredits();
}

int CreatureObject::getCashCredits() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 61);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getCashCredits();
}

int CreatureObject::getBaseHAM(int idx) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 62);
		method.addSignedIntParameter(idx);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBaseHAM(idx);
}

int CreatureObject::getWounds(int idx) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 63);
		method.addSignedIntParameter(idx);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getWounds(idx);
}

DeltaVector<int>* CreatureObject::getWounds() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((CreatureObjectImplementation*) _impl)->getWounds();
}

int CreatureObject::getHAM(int idx) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 64);
		method.addSignedIntParameter(idx);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getHAM(idx);
}

DeltaVector<int>* CreatureObject::getHAM() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((CreatureObjectImplementation*) _impl)->getHAM();
}

int CreatureObject::getMaxHAM(int idx) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 65);
		method.addSignedIntParameter(idx);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getMaxHAM(idx);
}

DeltaVector<int>* CreatureObject::getMaxHAM() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((CreatureObjectImplementation*) _impl)->getMaxHAM();
}

int CreatureObject::getEncumbrance(int idx) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 66);
		method.addSignedIntParameter(idx);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getEncumbrance(idx);
}

DeltaVector<int>* CreatureObject::getEncumbrances() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((CreatureObjectImplementation*) _impl)->getEncumbrances();
}

byte CreatureObject::getPosture() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 67);

		return method.executeWithByteReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getPosture();
}

byte CreatureObject::getFactionRank() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 68);

		return method.executeWithByteReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getFactionRank();
}

CreatureObject* CreatureObject::getLinkedCreature() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 69);

		return (CreatureObject*) method.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getLinkedCreature();
}

unsigned long long CreatureObject::getCreatureLinkID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 70);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getCreatureLinkID();
}

float CreatureObject::getShockWounds() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 71);

		return method.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getShockWounds();
}

bool CreatureObject::isBlinded() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 72);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isBlinded();
}

bool CreatureObject::isStunned() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 73);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isStunned();
}

bool CreatureObject::isAiming() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 74);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isAiming();
}

unsigned long long CreatureObject::getStateBitmask() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 75);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getStateBitmask();
}

bool CreatureObject::hasState(unsigned long long state) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 76);
		method.addUnsignedLongParameter(state);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->hasState(state);
}

unsigned long long CreatureObject::getListenID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 77);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getListenID();
}

float CreatureObject::getRunSpeed() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 78);

		return method.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getRunSpeed();
}

float CreatureObject::getWalkSpeed() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 79);

		return method.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getWalkSpeed();
}

float CreatureObject::getTerrainNegotiation() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 80);

		return method.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getTerrainNegotiation();
}

float CreatureObject::getRunAcceleration() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 81);

		return method.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getRunAcceleration();
}

float CreatureObject::getWalkAcceleration() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 82);

		return method.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getWalkAcceleration();
}

int CreatureObject::getLevel() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 83);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getLevel();
}

String CreatureObject::getPerformanceAnimation() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 84);

		method.executeWithAsciiReturn(_return_getPerformanceAnimation);
		return _return_getPerformanceAnimation;
	} else
		return ((CreatureObjectImplementation*) _impl)->getPerformanceAnimation();
}

String CreatureObject::getMoodString() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 85);

		method.executeWithAsciiReturn(_return_getMoodString);
		return _return_getMoodString;
	} else
		return ((CreatureObjectImplementation*) _impl)->getMoodString();
}

unsigned long long CreatureObject::getWeaponID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 86);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getWeaponID();
}

WeaponObject* CreatureObject::getWeapon() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 87);

		return (WeaponObject*) method.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getWeapon();
}

unsigned long long CreatureObject::getGroupID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 88);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getGroupID();
}

unsigned long long CreatureObject::getGroupInviterID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 89);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getGroupInviterID();
}

GroupObject* CreatureObject::getGroup() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 90);

		return (GroupObject*) method.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getGroup();
}

unsigned long long CreatureObject::getGroupInviteCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 91);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getGroupInviteCounter();
}

int CreatureObject::getGuildID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 92);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getGuildID();
}

unsigned long long CreatureObject::getTargetID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 93);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getTargetID();
}

byte CreatureObject::getMoodID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 94);

		return method.executeWithByteReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getMoodID();
}

float CreatureObject::getSlopeModPercent() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 95);

		return method.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getSlopeModPercent();
}

int CreatureObject::getPerformanceCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 96);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getPerformanceCounter();
}

int CreatureObject::getInstrumentID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 97);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getInstrumentID();
}

byte CreatureObject::getFrozen() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 98);

		return method.executeWithByteReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getFrozen();
}

float CreatureObject::getHeight() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 99);

		return method.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getHeight();
}

int CreatureObject::getSpecies() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 100);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getSpecies();
}

int CreatureObject::getFaction() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 101);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getFaction();
}

DeltaVector<int>* CreatureObject::getBaseHAM() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((CreatureObjectImplementation*) _impl)->getBaseHAM();
}

SkillBoxList* CreatureObject::getSkillBoxList() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((CreatureObjectImplementation*) _impl)->getSkillBoxList();
}

long long CreatureObject::getSkillMod(const String& skillmod) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 102);
		method.addAsciiParameter(skillmod);

		return method.executeWithSignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getSkillMod(skillmod);
}

DeltaVectorMap<String, long long>* CreatureObject::getSkillModList() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((CreatureObjectImplementation*) _impl)->getSkillModList();
}

void CreatureObject::setHeight(float heigh) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 103);
		method.addFloatParameter(heigh);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setHeight(heigh);
}

bool CreatureObject::isKneeling() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 104);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isKneeling();
}

bool CreatureObject::isProne() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 105);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isProne();
}

bool CreatureObject::isInCover() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 106);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isInCover();
}

bool CreatureObject::isBerserked() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 107);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isBerserked();
}

bool CreatureObject::isCreatureObject() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 108);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isCreatureObject();
}

bool CreatureObject::isSwimming() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 109);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isSwimming();
}

bool CreatureObject::isRidingMount() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 110);

		return method.executeWithBooleanReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->isRidingMount();
}

ControlDevice* CreatureObject::getControlDevice() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 111);

		return (ControlDevice*) method.executeWithObjectReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getControlDevice();
}

float CreatureObject::getSwimHeight() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 112);

		return method.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getSwimHeight();
}

/*
 *	CreatureObjectImplementation
 */

CreatureObjectImplementation::CreatureObjectImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
	_initializeImplementation();
}

CreatureObjectImplementation::~CreatureObjectImplementation() {
	CreatureObjectImplementation::finalize();
}


void CreatureObjectImplementation::_initializeImplementation() {
	_setClassHelper(CreatureObjectHelper::instance());

	_serializationHelperMethod();
}

void CreatureObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (CreatureObject*) stub;
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* CreatureObjectImplementation::_getStub() {
	return _this;
}

CreatureObjectImplementation::operator const CreatureObject*() {
	return _this;
}

void CreatureObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void CreatureObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void CreatureObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void CreatureObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void CreatureObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void CreatureObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void CreatureObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void CreatureObjectImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("CreatureObject");

	addSerializableVariable("bankCredits", &bankCredits);
	addSerializableVariable("cashCredits", &cashCredits);
	addSerializableVariable("gender", &gender);
	addSerializableVariable("species", &species);
	addSerializableVariable("faction", &faction);
	addSerializableVariable("baseHAM", &baseHAM);
	addSerializableVariable("posture", &posture);
	addSerializableVariable("factionRank", &factionRank);
	addSerializableVariable("linkedCreature", &linkedCreature);
	addSerializableVariable("controlDevice", &controlDevice);
	addSerializableVariable("shockWounds", &shockWounds);
	addSerializableVariable("wounds", &wounds);
	addSerializableVariable("stateBitmask", &stateBitmask);
	addSerializableVariable("encumbrances", &encumbrances);
	addSerializableVariable("runSpeed", &runSpeed);
	addSerializableVariable("walkSpeed", &walkSpeed);
	addSerializableVariable("terrainNegotiation", &terrainNegotiation);
	addSerializableVariable("runAcceleration", &runAcceleration);
	addSerializableVariable("walkAcceleration", &walkAcceleration);
	addSerializableVariable("height", &height);
	addSerializableVariable("swimHeight", &swimHeight);
	addSerializableVariable("slopeModPercent", &slopeModPercent);
	addSerializableVariable("slopeModAngle", &slopeModAngle);
	addSerializableVariable("listenToID", &listenToID);
	addSerializableVariable("level", &level);
	addSerializableVariable("performanceAnimation", &performanceAnimation);
	addSerializableVariable("moodString", &moodString);
	addSerializableVariable("weapon", &weapon);
	addSerializableVariable("group", &group);
	addSerializableVariable("groupInviterID", &groupInviterID);
	addSerializableVariable("groupInviteCounter", &groupInviteCounter);
	addSerializableVariable("guildID", &guildID);
	addSerializableVariable("targetID", &targetID);
	addSerializableVariable("moodID", &moodID);
	addSerializableVariable("performanceCounter", &performanceCounter);
	addSerializableVariable("instrumentID", &instrumentID);
	addSerializableVariable("hamList", &hamList);
	addSerializableVariable("maxHamList", &maxHamList);
	addSerializableVariable("frozen", &frozen);
	addSerializableVariable("templateString", &templateString);
	addSerializableVariable("skillBoxList", &skillBoxList);
	addSerializableVariable("skillModList", &skillModList);
	addSerializableVariable("commandQueue", &commandQueue);
	addSerializableVariable("nextAction", &nextAction);
}

CreatureObjectImplementation::CreatureObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/creature/CreatureObject.idl(181):  		Logger.setLoggingName("CreatureObject");
	Logger::setLoggingName("CreatureObject");
	// server/zone/objects/creature/CreatureObject.idl(183):  		linkedCreature = null;
	linkedCreature = NULL;
	// server/zone/objects/creature/CreatureObject.idl(184):  		controlDevice = null;
	controlDevice = NULL;
	// server/zone/objects/creature/CreatureObject.idl(186):  		skillModList.setNullValue(0);
	(&skillModList)->setNullValue(0);
	// server/zone/objects/creature/CreatureObject.idl(187):  		postureChangeObservers.setNoDuplicateInsertPlan();
	(&postureChangeObservers)->setNoDuplicateInsertPlan();
}

void CreatureObjectImplementation::addBankCredits(int credits, bool notifyClient) {
	// server/zone/objects/creature/CreatureObject.idl(395):  		int newCredits = bankCredits + credits;
	int newCredits = bankCredits + credits;
	// server/zone/objects/creature/CreatureObject.idl(396):  		setBankCredits(newCredits);
	setBankCredits(newCredits);
}

void CreatureObjectImplementation::substractBankCredits(int credits) {
	// server/zone/objects/creature/CreatureObject.idl(400):  		int newCredits = bankCredits - credits;
	int newCredits = bankCredits - credits;
	// server/zone/objects/creature/CreatureObject.idl(401):  		setBankCredits(newCredits);
	setBankCredits(newCredits);
}

void CreatureObjectImplementation::setControlDevice(ControlDevice* device) {
	// server/zone/objects/creature/CreatureObject.idl(540):  		controlDevice = device;
	controlDevice = device;
}

bool CreatureObjectImplementation::isAttackableBy(CreatureObject* object) {
	// server/zone/objects/creature/CreatureObject.idl(570):  		return 
	if (object == _this)	// server/zone/objects/creature/CreatureObject.idl(571):  			return false;
	return false;
	// server/zone/objects/creature/CreatureObject.idl(573):  true;
	return true;
}

bool CreatureObjectImplementation::isAggressiveTo(PlayerCreature* object) {
	// server/zone/objects/creature/CreatureObject.idl(583):  		return false;
	return false;
}

void CreatureObjectImplementation::notifyPostureChange(int newPosture) {
	// server/zone/objects/creature/CreatureObject.idl(593):  
	for (	// server/zone/objects/creature/CreatureObject.idl(593):  		for (int i = 0;
	int i = 0;
	i < (&postureChangeObservers)->size();
 ++i) {
	// server/zone/objects/creature/CreatureObject.idl(594):  			PostureChangeObserver observer = postureChangeObservers.get(i);
	PostureChangeObserver* observer = (&postureChangeObservers)->get(i);
	// server/zone/objects/creature/CreatureObject.idl(596):  			int res = observer.notifyPostureChange(this, newPosture);
	int res = observer->notifyPostureChange(_this, newPosture);
	// server/zone/objects/creature/CreatureObject.idl(598):  		}
	if (res == 1){
	// server/zone/objects/creature/CreatureObject.idl(599):  				postureChangeObservers.drop(observer);
	(&postureChangeObservers)->drop(observer);
	// server/zone/objects/creature/CreatureObject.idl(600):  				i = i - 1;
	i = i - 1;
}
}
}

void CreatureObjectImplementation::attachPostureChangeObserver(PostureChangeObserver* observer) {
	// server/zone/objects/creature/CreatureObject.idl(610):  		postureChangeObservers.put(observer);
	(&postureChangeObservers)->put(observer);
}

void CreatureObjectImplementation::deattachPostureChangeObserver(PostureChangeObserver* observer) {
	// server/zone/objects/creature/CreatureObject.idl(618):  		postureChangeObservers.drop(observer);
	(&postureChangeObservers)->drop(observer);
}

bool CreatureObjectImplementation::isRebel() {
	// server/zone/objects/creature/CreatureObject.idl(634):  		return faction == 0x16148850;
	return faction == 0x16148850;
}

bool CreatureObjectImplementation::isImperial() {
	// server/zone/objects/creature/CreatureObject.idl(638):  		return faction == 0xDB4ACC54;
	return faction == 0xDB4ACC54;
}

bool CreatureObjectImplementation::isNeurtral() {
	// server/zone/objects/creature/CreatureObject.idl(642):  		return faction == 0;
	return faction == 0;
}

bool CreatureObjectImplementation::isGroupped() {
	// server/zone/objects/creature/CreatureObject.idl(646):  		return group != null;
	return group != NULL;
}

int CreatureObjectImplementation::getBankCredits() {
	// server/zone/objects/creature/CreatureObject.idl(650):  		return bankCredits;
	return bankCredits;
}

int CreatureObjectImplementation::getCashCredits() {
	// server/zone/objects/creature/CreatureObject.idl(654):  		return cashCredits;
	return cashCredits;
}

int CreatureObjectImplementation::getBaseHAM(int idx) {
	// server/zone/objects/creature/CreatureObject.idl(658):  		return baseHAM.get(idx);
	return (&baseHAM)->get(idx);
}

int CreatureObjectImplementation::getWounds(int idx) {
	// server/zone/objects/creature/CreatureObject.idl(662):  		return wounds.get(idx);
	return (&wounds)->get(idx);
}

DeltaVector<int>* CreatureObjectImplementation::getWounds() {
	// server/zone/objects/creature/CreatureObject.idl(667):  		return wounds;
	return (&wounds);
}

int CreatureObjectImplementation::getHAM(int idx) {
	// server/zone/objects/creature/CreatureObject.idl(671):  		return hamList.get(idx);
	return (&hamList)->get(idx);
}

DeltaVector<int>* CreatureObjectImplementation::getHAM() {
	// server/zone/objects/creature/CreatureObject.idl(676):  		return hamList;
	return (&hamList);
}

int CreatureObjectImplementation::getMaxHAM(int idx) {
	// server/zone/objects/creature/CreatureObject.idl(680):  		return maxHamList.get(idx);
	return (&maxHamList)->get(idx);
}

DeltaVector<int>* CreatureObjectImplementation::getMaxHAM() {
	// server/zone/objects/creature/CreatureObject.idl(685):  		return maxHamList;
	return (&maxHamList);
}

int CreatureObjectImplementation::getEncumbrance(int idx) {
	// server/zone/objects/creature/CreatureObject.idl(689):  		return encumbrances.get(idx);
	return (&encumbrances)->get(idx);
}

DeltaVector<int>* CreatureObjectImplementation::getEncumbrances() {
	// server/zone/objects/creature/CreatureObject.idl(694):  		return encumbrances;
	return (&encumbrances);
}

byte CreatureObjectImplementation::getPosture() {
	// server/zone/objects/creature/CreatureObject.idl(698):  		return posture;
	return posture;
}

byte CreatureObjectImplementation::getFactionRank() {
	// server/zone/objects/creature/CreatureObject.idl(702):  		return factionRank;
	return factionRank;
}

CreatureObject* CreatureObjectImplementation::getLinkedCreature() {
	// server/zone/objects/creature/CreatureObject.idl(706):  		return linkedCreature;
	return linkedCreature;
}

unsigned long long CreatureObjectImplementation::getCreatureLinkID() {
	// server/zone/objects/creature/CreatureObject.idl(710):  
	if (linkedCreature != NULL)	// server/zone/objects/creature/CreatureObject.idl(711):  			return linkedCreature.getObjectID();
	return linkedCreature->getObjectID();

	else 	// server/zone/objects/creature/CreatureObject.idl(713):  			return 0;
	return 0;
}

float CreatureObjectImplementation::getShockWounds() {
	// server/zone/objects/creature/CreatureObject.idl(717):  		return shockWounds;
	return shockWounds;
}

bool CreatureObjectImplementation::isBlinded() {
	// server/zone/objects/creature/CreatureObject.idl(721):  		return CreatureState.BLINDED & stateBitmask;
	return CreatureState::BLINDED & stateBitmask;
}

bool CreatureObjectImplementation::isStunned() {
	// server/zone/objects/creature/CreatureObject.idl(725):  		return stateBitmask & CreatureState.STUNNED;
	return stateBitmask & CreatureState::STUNNED;
}

bool CreatureObjectImplementation::isAiming() {
	// server/zone/objects/creature/CreatureObject.idl(729):  		return stateBitmask & CreatureState.AIMING;
	return stateBitmask & CreatureState::AIMING;
}

unsigned long long CreatureObjectImplementation::getStateBitmask() {
	// server/zone/objects/creature/CreatureObject.idl(733):  		return stateBitmask;
	return stateBitmask;
}

bool CreatureObjectImplementation::hasState(unsigned long long state) {
	// server/zone/objects/creature/CreatureObject.idl(737):  		return stateBitmask & state;
	return stateBitmask & state;
}

unsigned long long CreatureObjectImplementation::getListenID() {
	// server/zone/objects/creature/CreatureObject.idl(741):  		return listenToID;
	return listenToID;
}

float CreatureObjectImplementation::getRunSpeed() {
	// server/zone/objects/creature/CreatureObject.idl(745):  		return runSpeed;
	return runSpeed;
}

float CreatureObjectImplementation::getWalkSpeed() {
	// server/zone/objects/creature/CreatureObject.idl(749):  		return walkSpeed;
	return walkSpeed;
}

float CreatureObjectImplementation::getTerrainNegotiation() {
	// server/zone/objects/creature/CreatureObject.idl(753):  		return terrainNegotiation;
	return terrainNegotiation;
}

float CreatureObjectImplementation::getRunAcceleration() {
	// server/zone/objects/creature/CreatureObject.idl(757):  		return runAcceleration;
	return runAcceleration;
}

float CreatureObjectImplementation::getWalkAcceleration() {
	// server/zone/objects/creature/CreatureObject.idl(761):  		return walkAcceleration;
	return walkAcceleration;
}

int CreatureObjectImplementation::getLevel() {
	// server/zone/objects/creature/CreatureObject.idl(765):  		return level;
	return level;
}

String CreatureObjectImplementation::getPerformanceAnimation() {
	// server/zone/objects/creature/CreatureObject.idl(769):  		return performanceAnimation;
	return performanceAnimation;
}

String CreatureObjectImplementation::getMoodString() {
	// server/zone/objects/creature/CreatureObject.idl(773):  		return moodString;
	return moodString;
}

unsigned long long CreatureObjectImplementation::getWeaponID() {
	// server/zone/objects/creature/CreatureObject.idl(777):  
	if (weapon == NULL)	// server/zone/objects/creature/CreatureObject.idl(778):  			return 0;
	return 0;

	else 	// server/zone/objects/creature/CreatureObject.idl(780):  			return weapon.getObjectID();
	return weapon->getObjectID();
}

WeaponObject* CreatureObjectImplementation::getWeapon() {
	// server/zone/objects/creature/CreatureObject.idl(784):  
	if (weapon == NULL){
	// server/zone/objects/creature/CreatureObject.idl(785):  			return (WeaponObject) super.getSlottedObject("default_weapon");
	return (WeaponObject*) TangibleObjectImplementation::getSlottedObject("default_weapon");
}

	else 	// server/zone/objects/creature/CreatureObject.idl(787):  			return weapon;
	return weapon;
}

unsigned long long CreatureObjectImplementation::getGroupID() {
	// server/zone/objects/creature/CreatureObject.idl(791):  
	if (group != NULL)	// server/zone/objects/creature/CreatureObject.idl(792):  			return group.getObjectID();
	return group->getObjectID();

	else 	// server/zone/objects/creature/CreatureObject.idl(794):  			return 0;
	return 0;
}

unsigned long long CreatureObjectImplementation::getGroupInviterID() {
	// server/zone/objects/creature/CreatureObject.idl(798):  		return groupInviterID;
	return groupInviterID;
}

GroupObject* CreatureObjectImplementation::getGroup() {
	// server/zone/objects/creature/CreatureObject.idl(802):  		return group;
	return group;
}

unsigned long long CreatureObjectImplementation::getGroupInviteCounter() {
	// server/zone/objects/creature/CreatureObject.idl(806):  		return groupInviteCounter;
	return groupInviteCounter;
}

int CreatureObjectImplementation::getGuildID() {
	// server/zone/objects/creature/CreatureObject.idl(810):  		return guildID;
	return guildID;
}

unsigned long long CreatureObjectImplementation::getTargetID() {
	// server/zone/objects/creature/CreatureObject.idl(814):  		return targetID;
	return targetID;
}

byte CreatureObjectImplementation::getMoodID() {
	// server/zone/objects/creature/CreatureObject.idl(818):  		return moodID;
	return moodID;
}

float CreatureObjectImplementation::getSlopeModPercent() {
	// server/zone/objects/creature/CreatureObject.idl(822):  		return slopeModPercent;
	return slopeModPercent;
}

int CreatureObjectImplementation::getPerformanceCounter() {
	// server/zone/objects/creature/CreatureObject.idl(826):  		return performanceCounter;
	return performanceCounter;
}

int CreatureObjectImplementation::getInstrumentID() {
	// server/zone/objects/creature/CreatureObject.idl(830):  		return instrumentID;
	return instrumentID;
}

byte CreatureObjectImplementation::getFrozen() {
	// server/zone/objects/creature/CreatureObject.idl(834):  		return frozen;
	return frozen;
}

float CreatureObjectImplementation::getHeight() {
	// server/zone/objects/creature/CreatureObject.idl(838):  		return height;
	return height;
}

int CreatureObjectImplementation::getSpecies() {
	// server/zone/objects/creature/CreatureObject.idl(842):  		return species;
	return species;
}

int CreatureObjectImplementation::getFaction() {
	// server/zone/objects/creature/CreatureObject.idl(846):  		return faction;
	return faction;
}

DeltaVector<int>* CreatureObjectImplementation::getBaseHAM() {
	// server/zone/objects/creature/CreatureObject.idl(851):  		return baseHAM;
	return (&baseHAM);
}

SkillBoxList* CreatureObjectImplementation::getSkillBoxList() {
	// server/zone/objects/creature/CreatureObject.idl(856):  		return skillBoxList;
	return (&skillBoxList);
}

long long CreatureObjectImplementation::getSkillMod(const String& skillmod) {
	// server/zone/objects/creature/CreatureObject.idl(860):  		return skillModList.get(skillmod);
	return (&skillModList)->get(skillmod);
}

DeltaVectorMap<String, long long>* CreatureObjectImplementation::getSkillModList() {
	// server/zone/objects/creature/CreatureObject.idl(865):  		return skillModList;
	return (&skillModList);
}

void CreatureObjectImplementation::setHeight(float heigh) {
	// server/zone/objects/creature/CreatureObject.idl(869):  		height = heigh;
	height = heigh;
}

bool CreatureObjectImplementation::isKneeling() {
	// server/zone/objects/creature/CreatureObject.idl(873):  		return posture == CreaturePosture.CROUCHED;
	return posture == CreaturePosture::CROUCHED;
}

bool CreatureObjectImplementation::isProne() {
	// server/zone/objects/creature/CreatureObject.idl(877):  		return posture == CreaturePosture.PRONE;
	return posture == CreaturePosture::PRONE;
}

bool CreatureObjectImplementation::isInCover() {
	// server/zone/objects/creature/CreatureObject.idl(881):  		return stateBitmask & CreatureState.COVER;
	return stateBitmask & CreatureState::COVER;
}

bool CreatureObjectImplementation::isBerserked() {
	// server/zone/objects/creature/CreatureObject.idl(885):  		return stateBitmask & CreatureState.BERSERK;
	return stateBitmask & CreatureState::BERSERK;
}

bool CreatureObjectImplementation::isCreatureObject() {
	// server/zone/objects/creature/CreatureObject.idl(889):  		return true;
	return true;
}

bool CreatureObjectImplementation::isSwimming() {
	// server/zone/objects/creature/CreatureObject.idl(893):  		return stateBitmask & CreatureState.SWIMMING;
	return stateBitmask & CreatureState::SWIMMING;
}

bool CreatureObjectImplementation::isRidingMount() {
	// server/zone/objects/creature/CreatureObject.idl(897):  		return stateBitmask & CreatureState.RIDINGMOUNT;
	return stateBitmask & CreatureState::RIDINGMOUNT;
}

ControlDevice* CreatureObjectImplementation::getControlDevice() {
	// server/zone/objects/creature/CreatureObject.idl(901):  		return controlDevice;
	return controlDevice;
}

float CreatureObjectImplementation::getSwimHeight() {
	// server/zone/objects/creature/CreatureObject.idl(905):  		return swimHeight;
	return swimHeight;
}

/*
 *	CreatureObjectAdapter
 */

CreatureObjectAdapter::CreatureObjectAdapter(CreatureObjectImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* CreatureObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		finalize();
		break;
	case 7:
		initializeTransientMembers();
		break;
	case 8:
		clearQueueAction(inv->getUnsignedIntParameter(), inv->getFloatParameter(), inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter());
		break;
	case 9:
		sendBaselinesTo((SceneObject*) inv->getObjectParameter());
		break;
	case 10:
		sendPvpStatusTo((PlayerCreature*) inv->getObjectParameter());
		break;
	case 11:
		sendSystemMessage(inv->getAsciiParameter(_param0_sendSystemMessage__String_));
		break;
	case 12:
		sendSystemMessage(inv->getUnicodeParameter(_param0_sendSystemMessage__UnicodeString_));
		break;
	case 13:
		sendSystemMessage(inv->getAsciiParameter(_param0_sendSystemMessage__String_String_), inv->getAsciiParameter(_param1_sendSystemMessage__String_String_));
		break;
	case 14:
		sendSlottedObjectsTo((SceneObject*) inv->getObjectParameter());
		break;
	case 15:
		setCombatState();
		break;
	case 16:
		clearCombatState(inv->getBooleanParameter());
		break;
	case 17:
		setPosture(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 18:
		setHAM(inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 19:
		resp->insertSignedInt(inflictDamage(inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case 20:
		setBaseHAM(inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 21:
		setWounds(inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 22:
		setMaxHAM(inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 23:
		setEncumbrance(inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 24:
		setWeapon((WeaponObject*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 25:
		setInstrumentID(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 26:
		setTargetID(inv->getUnsignedLongParameter(), inv->getBooleanParameter());
		break;
	case 27:
		setBankCredits(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 28:
		addBankCredits(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 29:
		substractBankCredits(inv->getSignedIntParameter());
		break;
	case 30:
		setCashCredits(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 31:
		addSkillBox(inv->getAsciiParameter(_param0_addSkillBox__String_bool_), inv->getBooleanParameter());
		break;
	case 32:
		removeSkillBox(inv->getAsciiParameter(_param0_removeSkillBox__String_bool_), inv->getBooleanParameter());
		break;
	case 33:
		addSkillMod(inv->getAsciiParameter(_param0_addSkillMod__String_long_bool_), inv->getSignedLongParameter(), inv->getBooleanParameter());
		break;
	case 34:
		removeSkillMod(inv->getAsciiParameter(_param0_removeSkillMod__String_bool_), inv->getBooleanParameter());
		break;
	case 35:
		updateGroupInviterID(inv->getUnsignedLongParameter(), inv->getBooleanParameter());
		break;
	case 36:
		updateGroup((GroupObject*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 37:
		enqueueCommand(inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter(), inv->getUnsignedLongParameter(), inv->getUnicodeParameter(_param3_enqueueCommand__int_int_long_UnicodeString_));
		break;
	case 38:
		setMood(inv->getByteParameter(), inv->getBooleanParameter());
		break;
	case 39:
		setMoodString(inv->getAsciiParameter(_param0_setMoodString__String_bool_), inv->getBooleanParameter());
		break;
	case 40:
		deleteQueueAction(inv->getUnsignedIntParameter());
		break;
	case 41:
		setState(inv->getUnsignedLongParameter(), inv->getBooleanParameter());
		break;
	case 42:
		clearState(inv->getUnsignedLongParameter(), inv->getBooleanParameter());
		break;
	case 43:
		setControlDevice((ControlDevice*) inv->getObjectParameter());
		break;
	case 44:
		resp->insertInt(getWearableMask());
		break;
	case 45:
		setCreatureLink((CreatureObject*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 46:
		executeObjectControllerAction(inv->getUnsignedIntParameter());
		break;
	case 47:
		resp->insertBoolean(isAttackableBy((CreatureObject*) inv->getObjectParameter()));
		break;
	case 48:
		resp->insertBoolean(isAggressiveTo((PlayerCreature*) inv->getObjectParameter()));
		break;
	case 49:
		notifyPostureChange(inv->getSignedIntParameter());
		break;
	case 50:
		resp->insertSignedInt(canAddObject((SceneObject*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_canAddObject__SceneObject_String_)));
		break;
	case 51:
		doAnimation(inv->getAsciiParameter(_param0_doAnimation__String_));
		break;
	case 52:
		doCombatAnimation((CreatureObject*) inv->getObjectParameter(), inv->getUnsignedIntParameter(), inv->getByteParameter());
		break;
	case 53:
		playEffect(inv->getAsciiParameter(_param0_playEffect__String_String_), inv->getAsciiParameter(_param1_playEffect__String_String_));
		break;
	case 54:
		showFlyText(inv->getAsciiParameter(_param0_showFlyText__String_String_byte_byte_byte_), inv->getAsciiParameter(_param1_showFlyText__String_String_byte_byte_byte_), inv->getByteParameter(), inv->getByteParameter(), inv->getByteParameter());
		break;
	case 55:
		activateQueueAction();
		break;
	case 56:
		resp->insertUnicode(getCreatureName());
		break;
	case 57:
		resp->insertBoolean(isRebel());
		break;
	case 58:
		resp->insertBoolean(isImperial());
		break;
	case 59:
		resp->insertBoolean(isNeurtral());
		break;
	case 60:
		resp->insertBoolean(isGroupped());
		break;
	case 61:
		resp->insertSignedInt(getBankCredits());
		break;
	case 62:
		resp->insertSignedInt(getCashCredits());
		break;
	case 63:
		resp->insertSignedInt(getBaseHAM(inv->getSignedIntParameter()));
		break;
	case 64:
		resp->insertSignedInt(getWounds(inv->getSignedIntParameter()));
		break;
	case 65:
		resp->insertSignedInt(getHAM(inv->getSignedIntParameter()));
		break;
	case 66:
		resp->insertSignedInt(getMaxHAM(inv->getSignedIntParameter()));
		break;
	case 67:
		resp->insertSignedInt(getEncumbrance(inv->getSignedIntParameter()));
		break;
	case 68:
		resp->insertByte(getPosture());
		break;
	case 69:
		resp->insertByte(getFactionRank());
		break;
	case 70:
		resp->insertLong(getLinkedCreature()->_getObjectID());
		break;
	case 71:
		resp->insertLong(getCreatureLinkID());
		break;
	case 72:
		resp->insertFloat(getShockWounds());
		break;
	case 73:
		resp->insertBoolean(isBlinded());
		break;
	case 74:
		resp->insertBoolean(isStunned());
		break;
	case 75:
		resp->insertBoolean(isAiming());
		break;
	case 76:
		resp->insertLong(getStateBitmask());
		break;
	case 77:
		resp->insertBoolean(hasState(inv->getUnsignedLongParameter()));
		break;
	case 78:
		resp->insertLong(getListenID());
		break;
	case 79:
		resp->insertFloat(getRunSpeed());
		break;
	case 80:
		resp->insertFloat(getWalkSpeed());
		break;
	case 81:
		resp->insertFloat(getTerrainNegotiation());
		break;
	case 82:
		resp->insertFloat(getRunAcceleration());
		break;
	case 83:
		resp->insertFloat(getWalkAcceleration());
		break;
	case 84:
		resp->insertSignedInt(getLevel());
		break;
	case 85:
		resp->insertAscii(getPerformanceAnimation());
		break;
	case 86:
		resp->insertAscii(getMoodString());
		break;
	case 87:
		resp->insertLong(getWeaponID());
		break;
	case 88:
		resp->insertLong(getWeapon()->_getObjectID());
		break;
	case 89:
		resp->insertLong(getGroupID());
		break;
	case 90:
		resp->insertLong(getGroupInviterID());
		break;
	case 91:
		resp->insertLong(getGroup()->_getObjectID());
		break;
	case 92:
		resp->insertLong(getGroupInviteCounter());
		break;
	case 93:
		resp->insertSignedInt(getGuildID());
		break;
	case 94:
		resp->insertLong(getTargetID());
		break;
	case 95:
		resp->insertByte(getMoodID());
		break;
	case 96:
		resp->insertFloat(getSlopeModPercent());
		break;
	case 97:
		resp->insertSignedInt(getPerformanceCounter());
		break;
	case 98:
		resp->insertSignedInt(getInstrumentID());
		break;
	case 99:
		resp->insertByte(getFrozen());
		break;
	case 100:
		resp->insertFloat(getHeight());
		break;
	case 101:
		resp->insertSignedInt(getSpecies());
		break;
	case 102:
		resp->insertSignedInt(getFaction());
		break;
	case 103:
		resp->insertSignedLong(getSkillMod(inv->getAsciiParameter(_param0_getSkillMod__String_)));
		break;
	case 104:
		setHeight(inv->getFloatParameter());
		break;
	case 105:
		resp->insertBoolean(isKneeling());
		break;
	case 106:
		resp->insertBoolean(isProne());
		break;
	case 107:
		resp->insertBoolean(isInCover());
		break;
	case 108:
		resp->insertBoolean(isBerserked());
		break;
	case 109:
		resp->insertBoolean(isCreatureObject());
		break;
	case 110:
		resp->insertBoolean(isSwimming());
		break;
	case 111:
		resp->insertBoolean(isRidingMount());
		break;
	case 112:
		resp->insertLong(getControlDevice()->_getObjectID());
		break;
	case 113:
		resp->insertFloat(getSwimHeight());
		break;
	default:
		return NULL;
	}

	return resp;
}

void CreatureObjectAdapter::finalize() {
	((CreatureObjectImplementation*) impl)->finalize();
}

void CreatureObjectAdapter::initializeTransientMembers() {
	((CreatureObjectImplementation*) impl)->initializeTransientMembers();
}

void CreatureObjectAdapter::clearQueueAction(unsigned int actioncntr, float timer, unsigned int tab1, unsigned int tab2) {
	((CreatureObjectImplementation*) impl)->clearQueueAction(actioncntr, timer, tab1, tab2);
}

void CreatureObjectAdapter::sendBaselinesTo(SceneObject* player) {
	((CreatureObjectImplementation*) impl)->sendBaselinesTo(player);
}

void CreatureObjectAdapter::sendPvpStatusTo(PlayerCreature* player) {
	((CreatureObjectImplementation*) impl)->sendPvpStatusTo(player);
}

void CreatureObjectAdapter::sendSystemMessage(const String& message) {
	((CreatureObjectImplementation*) impl)->sendSystemMessage(message);
}

void CreatureObjectAdapter::sendSystemMessage(UnicodeString& message) {
	((CreatureObjectImplementation*) impl)->sendSystemMessage(message);
}

void CreatureObjectAdapter::sendSystemMessage(const String& file, const String& stringid) {
	((CreatureObjectImplementation*) impl)->sendSystemMessage(file, stringid);
}

void CreatureObjectAdapter::sendSlottedObjectsTo(SceneObject* player) {
	((CreatureObjectImplementation*) impl)->sendSlottedObjectsTo(player);
}

void CreatureObjectAdapter::setCombatState() {
	((CreatureObjectImplementation*) impl)->setCombatState();
}

void CreatureObjectAdapter::clearCombatState(bool clearDefenders) {
	((CreatureObjectImplementation*) impl)->clearCombatState(clearDefenders);
}

void CreatureObjectAdapter::setPosture(int newPosture, bool notifyClient) {
	((CreatureObjectImplementation*) impl)->setPosture(newPosture, notifyClient);
}

void CreatureObjectAdapter::setHAM(int type, int value, bool notifyClient) {
	((CreatureObjectImplementation*) impl)->setHAM(type, value, notifyClient);
}

int CreatureObjectAdapter::inflictDamage(int damageType, int damage, bool notifyClient) {
	return ((CreatureObjectImplementation*) impl)->inflictDamage(damageType, damage, notifyClient);
}

void CreatureObjectAdapter::setBaseHAM(int type, int value, bool notifyClient) {
	((CreatureObjectImplementation*) impl)->setBaseHAM(type, value, notifyClient);
}

void CreatureObjectAdapter::setWounds(int type, int value, bool notifyClient) {
	((CreatureObjectImplementation*) impl)->setWounds(type, value, notifyClient);
}

void CreatureObjectAdapter::setMaxHAM(int type, int value, bool notifyClient) {
	((CreatureObjectImplementation*) impl)->setMaxHAM(type, value, notifyClient);
}

void CreatureObjectAdapter::setEncumbrance(int type, int value, bool notifyClient) {
	((CreatureObjectImplementation*) impl)->setEncumbrance(type, value, notifyClient);
}

void CreatureObjectAdapter::setWeapon(WeaponObject* weao, bool notifyClient) {
	((CreatureObjectImplementation*) impl)->setWeapon(weao, notifyClient);
}

void CreatureObjectAdapter::setInstrumentID(int instrumentid, bool notifyClient) {
	((CreatureObjectImplementation*) impl)->setInstrumentID(instrumentid, notifyClient);
}

void CreatureObjectAdapter::setTargetID(unsigned long long targetID, bool notifyClient) {
	((CreatureObjectImplementation*) impl)->setTargetID(targetID, notifyClient);
}

void CreatureObjectAdapter::setBankCredits(int credits, bool notifyClient) {
	((CreatureObjectImplementation*) impl)->setBankCredits(credits, notifyClient);
}

void CreatureObjectAdapter::addBankCredits(int credits, bool notifyClient) {
	((CreatureObjectImplementation*) impl)->addBankCredits(credits, notifyClient);
}

void CreatureObjectAdapter::substractBankCredits(int credits) {
	((CreatureObjectImplementation*) impl)->substractBankCredits(credits);
}

void CreatureObjectAdapter::setCashCredits(int credits, bool notifyClient) {
	((CreatureObjectImplementation*) impl)->setCashCredits(credits, notifyClient);
}

void CreatureObjectAdapter::addSkillBox(const String& skillBox, bool notifyClient) {
	((CreatureObjectImplementation*) impl)->addSkillBox(skillBox, notifyClient);
}

void CreatureObjectAdapter::removeSkillBox(const String& skillBox, bool notifyClient) {
	((CreatureObjectImplementation*) impl)->removeSkillBox(skillBox, notifyClient);
}

void CreatureObjectAdapter::addSkillMod(const String& skillMod, long long value, bool notifyClient) {
	((CreatureObjectImplementation*) impl)->addSkillMod(skillMod, value, notifyClient);
}

void CreatureObjectAdapter::removeSkillMod(const String& skillMod, bool notifyCLient) {
	((CreatureObjectImplementation*) impl)->removeSkillMod(skillMod, notifyCLient);
}

void CreatureObjectAdapter::updateGroupInviterID(unsigned long long id, bool notifyClient) {
	((CreatureObjectImplementation*) impl)->updateGroupInviterID(id, notifyClient);
}

void CreatureObjectAdapter::updateGroup(GroupObject* group, bool notifyClient) {
	((CreatureObjectImplementation*) impl)->updateGroup(group, notifyClient);
}

void CreatureObjectAdapter::enqueueCommand(unsigned int actionCRC, unsigned int actionCount, unsigned long long targetID, const UnicodeString& arguments) {
	((CreatureObjectImplementation*) impl)->enqueueCommand(actionCRC, actionCount, targetID, arguments);
}

void CreatureObjectAdapter::setMood(byte moodID, bool notifyClient) {
	((CreatureObjectImplementation*) impl)->setMood(moodID, notifyClient);
}

void CreatureObjectAdapter::setMoodString(const String& animation, bool notifyClient) {
	((CreatureObjectImplementation*) impl)->setMoodString(animation, notifyClient);
}

void CreatureObjectAdapter::deleteQueueAction(unsigned int actionCount) {
	((CreatureObjectImplementation*) impl)->deleteQueueAction(actionCount);
}

void CreatureObjectAdapter::setState(unsigned long long state, bool notifyClient) {
	((CreatureObjectImplementation*) impl)->setState(state, notifyClient);
}

void CreatureObjectAdapter::clearState(unsigned long long state, bool notifyClient) {
	((CreatureObjectImplementation*) impl)->clearState(state, notifyClient);
}

void CreatureObjectAdapter::setControlDevice(ControlDevice* device) {
	((CreatureObjectImplementation*) impl)->setControlDevice(device);
}

unsigned int CreatureObjectAdapter::getWearableMask() {
	return ((CreatureObjectImplementation*) impl)->getWearableMask();
}

void CreatureObjectAdapter::setCreatureLink(CreatureObject* object, bool notifyClient) {
	((CreatureObjectImplementation*) impl)->setCreatureLink(object, notifyClient);
}

void CreatureObjectAdapter::executeObjectControllerAction(unsigned int actionCRC) {
	((CreatureObjectImplementation*) impl)->executeObjectControllerAction(actionCRC);
}

bool CreatureObjectAdapter::isAttackableBy(CreatureObject* object) {
	return ((CreatureObjectImplementation*) impl)->isAttackableBy(object);
}

bool CreatureObjectAdapter::isAggressiveTo(PlayerCreature* object) {
	return ((CreatureObjectImplementation*) impl)->isAggressiveTo(object);
}

void CreatureObjectAdapter::notifyPostureChange(int newPosture) {
	((CreatureObjectImplementation*) impl)->notifyPostureChange(newPosture);
}

int CreatureObjectAdapter::canAddObject(SceneObject* object, String& errorDescription) {
	return ((CreatureObjectImplementation*) impl)->canAddObject(object, errorDescription);
}

void CreatureObjectAdapter::doAnimation(const String& animation) {
	((CreatureObjectImplementation*) impl)->doAnimation(animation);
}

void CreatureObjectAdapter::doCombatAnimation(CreatureObject* defender, unsigned int animationCRC, byte hit) {
	((CreatureObjectImplementation*) impl)->doCombatAnimation(defender, animationCRC, hit);
}

void CreatureObjectAdapter::playEffect(const String& file, const String& aux) {
	((CreatureObjectImplementation*) impl)->playEffect(file, aux);
}

void CreatureObjectAdapter::showFlyText(const String& file, const String& uax, byte red, byte green, byte blue) {
	((CreatureObjectImplementation*) impl)->showFlyText(file, uax, red, green, blue);
}

void CreatureObjectAdapter::activateQueueAction() {
	((CreatureObjectImplementation*) impl)->activateQueueAction();
}

UnicodeString CreatureObjectAdapter::getCreatureName() {
	return ((CreatureObjectImplementation*) impl)->getCreatureName();
}

bool CreatureObjectAdapter::isRebel() {
	return ((CreatureObjectImplementation*) impl)->isRebel();
}

bool CreatureObjectAdapter::isImperial() {
	return ((CreatureObjectImplementation*) impl)->isImperial();
}

bool CreatureObjectAdapter::isNeurtral() {
	return ((CreatureObjectImplementation*) impl)->isNeurtral();
}

bool CreatureObjectAdapter::isGroupped() {
	return ((CreatureObjectImplementation*) impl)->isGroupped();
}

int CreatureObjectAdapter::getBankCredits() {
	return ((CreatureObjectImplementation*) impl)->getBankCredits();
}

int CreatureObjectAdapter::getCashCredits() {
	return ((CreatureObjectImplementation*) impl)->getCashCredits();
}

int CreatureObjectAdapter::getBaseHAM(int idx) {
	return ((CreatureObjectImplementation*) impl)->getBaseHAM(idx);
}

int CreatureObjectAdapter::getWounds(int idx) {
	return ((CreatureObjectImplementation*) impl)->getWounds(idx);
}

int CreatureObjectAdapter::getHAM(int idx) {
	return ((CreatureObjectImplementation*) impl)->getHAM(idx);
}

int CreatureObjectAdapter::getMaxHAM(int idx) {
	return ((CreatureObjectImplementation*) impl)->getMaxHAM(idx);
}

int CreatureObjectAdapter::getEncumbrance(int idx) {
	return ((CreatureObjectImplementation*) impl)->getEncumbrance(idx);
}

byte CreatureObjectAdapter::getPosture() {
	return ((CreatureObjectImplementation*) impl)->getPosture();
}

byte CreatureObjectAdapter::getFactionRank() {
	return ((CreatureObjectImplementation*) impl)->getFactionRank();
}

CreatureObject* CreatureObjectAdapter::getLinkedCreature() {
	return ((CreatureObjectImplementation*) impl)->getLinkedCreature();
}

unsigned long long CreatureObjectAdapter::getCreatureLinkID() {
	return ((CreatureObjectImplementation*) impl)->getCreatureLinkID();
}

float CreatureObjectAdapter::getShockWounds() {
	return ((CreatureObjectImplementation*) impl)->getShockWounds();
}

bool CreatureObjectAdapter::isBlinded() {
	return ((CreatureObjectImplementation*) impl)->isBlinded();
}

bool CreatureObjectAdapter::isStunned() {
	return ((CreatureObjectImplementation*) impl)->isStunned();
}

bool CreatureObjectAdapter::isAiming() {
	return ((CreatureObjectImplementation*) impl)->isAiming();
}

unsigned long long CreatureObjectAdapter::getStateBitmask() {
	return ((CreatureObjectImplementation*) impl)->getStateBitmask();
}

bool CreatureObjectAdapter::hasState(unsigned long long state) {
	return ((CreatureObjectImplementation*) impl)->hasState(state);
}

unsigned long long CreatureObjectAdapter::getListenID() {
	return ((CreatureObjectImplementation*) impl)->getListenID();
}

float CreatureObjectAdapter::getRunSpeed() {
	return ((CreatureObjectImplementation*) impl)->getRunSpeed();
}

float CreatureObjectAdapter::getWalkSpeed() {
	return ((CreatureObjectImplementation*) impl)->getWalkSpeed();
}

float CreatureObjectAdapter::getTerrainNegotiation() {
	return ((CreatureObjectImplementation*) impl)->getTerrainNegotiation();
}

float CreatureObjectAdapter::getRunAcceleration() {
	return ((CreatureObjectImplementation*) impl)->getRunAcceleration();
}

float CreatureObjectAdapter::getWalkAcceleration() {
	return ((CreatureObjectImplementation*) impl)->getWalkAcceleration();
}

int CreatureObjectAdapter::getLevel() {
	return ((CreatureObjectImplementation*) impl)->getLevel();
}

String CreatureObjectAdapter::getPerformanceAnimation() {
	return ((CreatureObjectImplementation*) impl)->getPerformanceAnimation();
}

String CreatureObjectAdapter::getMoodString() {
	return ((CreatureObjectImplementation*) impl)->getMoodString();
}

unsigned long long CreatureObjectAdapter::getWeaponID() {
	return ((CreatureObjectImplementation*) impl)->getWeaponID();
}

WeaponObject* CreatureObjectAdapter::getWeapon() {
	return ((CreatureObjectImplementation*) impl)->getWeapon();
}

unsigned long long CreatureObjectAdapter::getGroupID() {
	return ((CreatureObjectImplementation*) impl)->getGroupID();
}

unsigned long long CreatureObjectAdapter::getGroupInviterID() {
	return ((CreatureObjectImplementation*) impl)->getGroupInviterID();
}

GroupObject* CreatureObjectAdapter::getGroup() {
	return ((CreatureObjectImplementation*) impl)->getGroup();
}

unsigned long long CreatureObjectAdapter::getGroupInviteCounter() {
	return ((CreatureObjectImplementation*) impl)->getGroupInviteCounter();
}

int CreatureObjectAdapter::getGuildID() {
	return ((CreatureObjectImplementation*) impl)->getGuildID();
}

unsigned long long CreatureObjectAdapter::getTargetID() {
	return ((CreatureObjectImplementation*) impl)->getTargetID();
}

byte CreatureObjectAdapter::getMoodID() {
	return ((CreatureObjectImplementation*) impl)->getMoodID();
}

float CreatureObjectAdapter::getSlopeModPercent() {
	return ((CreatureObjectImplementation*) impl)->getSlopeModPercent();
}

int CreatureObjectAdapter::getPerformanceCounter() {
	return ((CreatureObjectImplementation*) impl)->getPerformanceCounter();
}

int CreatureObjectAdapter::getInstrumentID() {
	return ((CreatureObjectImplementation*) impl)->getInstrumentID();
}

byte CreatureObjectAdapter::getFrozen() {
	return ((CreatureObjectImplementation*) impl)->getFrozen();
}

float CreatureObjectAdapter::getHeight() {
	return ((CreatureObjectImplementation*) impl)->getHeight();
}

int CreatureObjectAdapter::getSpecies() {
	return ((CreatureObjectImplementation*) impl)->getSpecies();
}

int CreatureObjectAdapter::getFaction() {
	return ((CreatureObjectImplementation*) impl)->getFaction();
}

long long CreatureObjectAdapter::getSkillMod(const String& skillmod) {
	return ((CreatureObjectImplementation*) impl)->getSkillMod(skillmod);
}

void CreatureObjectAdapter::setHeight(float heigh) {
	((CreatureObjectImplementation*) impl)->setHeight(heigh);
}

bool CreatureObjectAdapter::isKneeling() {
	return ((CreatureObjectImplementation*) impl)->isKneeling();
}

bool CreatureObjectAdapter::isProne() {
	return ((CreatureObjectImplementation*) impl)->isProne();
}

bool CreatureObjectAdapter::isInCover() {
	return ((CreatureObjectImplementation*) impl)->isInCover();
}

bool CreatureObjectAdapter::isBerserked() {
	return ((CreatureObjectImplementation*) impl)->isBerserked();
}

bool CreatureObjectAdapter::isCreatureObject() {
	return ((CreatureObjectImplementation*) impl)->isCreatureObject();
}

bool CreatureObjectAdapter::isSwimming() {
	return ((CreatureObjectImplementation*) impl)->isSwimming();
}

bool CreatureObjectAdapter::isRidingMount() {
	return ((CreatureObjectImplementation*) impl)->isRidingMount();
}

ControlDevice* CreatureObjectAdapter::getControlDevice() {
	return ((CreatureObjectImplementation*) impl)->getControlDevice();
}

float CreatureObjectAdapter::getSwimHeight() {
	return ((CreatureObjectImplementation*) impl)->getSwimHeight();
}

/*
 *	CreatureObjectHelper
 */

CreatureObjectHelper* CreatureObjectHelper::staticInitializer = CreatureObjectHelper::instance();

CreatureObjectHelper::CreatureObjectHelper() {
	className = "CreatureObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void CreatureObjectHelper::finalizeHelper() {
	CreatureObjectHelper::finalize();
}

DistributedObject* CreatureObjectHelper::instantiateObject() {
	return new CreatureObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* CreatureObjectHelper::instantiateServant() {
	return new CreatureObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* CreatureObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new CreatureObjectAdapter((CreatureObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

