/*
 *	server/zone/objects/creature/CreatureObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "CreatureObject.h"

#include "server/zone/packets/object/StfParameter.h"

#include "server/zone/objects/scene/SceneObject.h"

/*
 *	CreatureObjectStub
 */

CreatureObject::CreatureObject(LuaObject* templateData) : TangibleObject(DummyConstructorParameter::instance()) {
	_impl = new CreatureObjectImplementation(templateData);
	_impl->_setStub(this);
	_impl->_setClassHelper(CreatureObjectHelper::instance());

	((CreatureObjectImplementation*) _impl)->_serializationHelperMethod();
}

CreatureObject::CreatureObject(DummyConstructorParameter* param) : TangibleObject(param) {
}

CreatureObject::~CreatureObject() {
}

void CreatureObject::clearQueueAction(unsigned int actioncntr, float timer, unsigned int tab1, unsigned int tab2) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addUnsignedIntParameter(actioncntr);
		method.addFloatParameter(timer);
		method.addUnsignedIntParameter(tab1);
		method.addUnsignedIntParameter(tab2);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->clearQueueAction(actioncntr, timer, tab1, tab2);
}

void CreatureObject::sendBaselinesTo(SceneObject* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->sendBaselinesTo(player);
}

void CreatureObject::sendSystemMessage(const String& message) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addAsciiParameter(message);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->sendSystemMessage(message);
}

void CreatureObject::sendSystemMessage(UnicodeString& message) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addUnicodeParameter(message);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->sendSystemMessage(message);
}

void CreatureObject::sendSystemMessage(const String& file, const String& str, unsigned long long targetid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addAsciiParameter(file);
		method.addAsciiParameter(str);
		method.addUnsignedLongParameter(targetid);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->sendSystemMessage(file, str, targetid);
}

void CreatureObject::sendSlottedObjectsTo(SceneObject* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->sendSlottedObjectsTo(player);
}

void CreatureObject::sendSystemMessage(const String& file, const String& str, StfParameter* param) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((CreatureObjectImplementation*) _impl)->sendSystemMessage(file, str, param);
}

void CreatureObject::setCombatState() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setCombatState();
}

void CreatureObject::clearCombatState(bool clearDefenders) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addBooleanParameter(clearDefenders);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->clearCombatState(clearDefenders);
}

int CreatureObject::getBankCredits() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBankCredits();
}

int CreatureObject::getCashCredits() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getCashCredits();
}

int CreatureObject::getBaseHealth(int idx) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addSignedIntParameter(idx);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getBaseHealth(idx);
}

int CreatureObject::getWounds(int idx) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addSignedIntParameter(idx);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getWounds(idx);
}

DeltaVector<int>* CreatureObject::getWounds() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((CreatureObjectImplementation*) _impl)->getWounds();
}

int CreatureObject::getHAM(int idx) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addSignedIntParameter(idx);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getHAM(idx);
}

DeltaVector<int>* CreatureObject::getHAM() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((CreatureObjectImplementation*) _impl)->getHAM();
}

int CreatureObject::getMaxHAM(int idx) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addSignedIntParameter(idx);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getMaxHAM(idx);
}

DeltaVector<int>* CreatureObject::getMaxHAM() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((CreatureObjectImplementation*) _impl)->getMaxHAM();
}

int CreatureObject::getEncumbrance(int idx) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addSignedIntParameter(idx);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getEncumbrance(idx);
}

DeltaVector<int>* CreatureObject::getEncumbrances() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((CreatureObjectImplementation*) _impl)->getEncumbrances();
}

byte CreatureObject::getPosture() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);

		return method.executeWithByteReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getPosture();
}

byte CreatureObject::getFactionRank() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);

		return method.executeWithByteReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getFactionRank();
}

unsigned long long CreatureObject::getCreatureLinkID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getCreatureLinkID();
}

float CreatureObject::getShockWounds() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);

		return method.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getShockWounds();
}

unsigned long long CreatureObject::getStateBitmask() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getStateBitmask();
}

unsigned long long CreatureObject::getListenID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getListenID();
}

float CreatureObject::getRunSpeed() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);

		return method.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getRunSpeed();
}

float CreatureObject::getWalkSpeed() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);

		return method.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getWalkSpeed();
}

float CreatureObject::getTerrainNegotiation() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);

		return method.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getTerrainNegotiation();
}

float CreatureObject::getRunAcceleration() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);

		return method.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getRunAcceleration();
}

float CreatureObject::getWalkAcceleration() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);

		return method.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getWalkAcceleration();
}

int CreatureObject::getLevel() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getLevel();
}

String CreatureObject::getPerformanceAnimation() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);

		method.executeWithAsciiReturn(_return_getPerformanceAnimation);
		return _return_getPerformanceAnimation;
	} else
		return ((CreatureObjectImplementation*) _impl)->getPerformanceAnimation();
}

String CreatureObject::getMoodString() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);

		method.executeWithAsciiReturn(_return_getMoodString);
		return _return_getMoodString;
	} else
		return ((CreatureObjectImplementation*) _impl)->getMoodString();
}

unsigned long long CreatureObject::getWeaponID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getWeaponID();
}

unsigned long long CreatureObject::getGroupID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 36);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getGroupID();
}

unsigned long long CreatureObject::getGroupInviterID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 37);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getGroupInviterID();
}

unsigned long long CreatureObject::getGroupInviteCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 38);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getGroupInviteCounter();
}

int CreatureObject::getGuildID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 39);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getGuildID();
}

unsigned long long CreatureObject::getTargetID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 40);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getTargetID();
}

byte CreatureObject::getMoodID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 41);

		return method.executeWithByteReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getMoodID();
}

float CreatureObject::getSlopeModPercent() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 42);

		return method.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getSlopeModPercent();
}

int CreatureObject::getPerformanceCounter() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 43);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getPerformanceCounter();
}

int CreatureObject::getInstrumentID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 44);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getInstrumentID();
}

byte CreatureObject::getFrozen() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 45);

		return method.executeWithByteReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getFrozen();
}

float CreatureObject::getHeight() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 46);

		return method.executeWithFloatReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getHeight();
}

int CreatureObject::getSpecies() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 47);

		return method.executeWithSignedIntReturn();
	} else
		return ((CreatureObjectImplementation*) _impl)->getSpecies();
}

DeltaVector<int>* CreatureObject::getBaseHealth() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((CreatureObjectImplementation*) _impl)->getBaseHealth();
}

void CreatureObject::setHeight(float heigh) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 48);
		method.addFloatParameter(heigh);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setHeight(heigh);
}

void CreatureObject::setHAM(int type, int value, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 49);
		method.addSignedIntParameter(type);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setHAM(type, value, notifyClient);
}

void CreatureObject::setWeaponID(unsigned long long objectID, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 50);
		method.addUnsignedLongParameter(objectID);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setWeaponID(objectID, notifyClient);
}

void CreatureObject::setTargetID(unsigned long long targetID, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 51);
		method.addUnsignedLongParameter(targetID);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		((CreatureObjectImplementation*) _impl)->setTargetID(targetID, notifyClient);
}

/*
 *	CreatureObjectImplementation
 */

CreatureObjectImplementation::~CreatureObjectImplementation() {
}

void CreatureObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (CreatureObject*) stub;
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* CreatureObjectImplementation::_getStub() {
	return _this;
}

CreatureObjectImplementation::operator const CreatureObject*() {
	return _this;
}

void CreatureObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void CreatureObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void CreatureObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void CreatureObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void CreatureObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void CreatureObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void CreatureObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void CreatureObjectImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	addSerializableVariable("bankCredits", &bankCredits);
	addSerializableVariable("cashCredits", &cashCredits);
	addSerializableVariable("gender", &gender);
	addSerializableVariable("species", &species);
	addSerializableVariable("baseHealth", &baseHealth);
	addSerializableVariable("posture", &posture);
	addSerializableVariable("factionRank", &factionRank);
	addSerializableVariable("creatureLinkID", &creatureLinkID);
	addSerializableVariable("shockWounds", &shockWounds);
	addSerializableVariable("wounds", &wounds);
	addSerializableVariable("stateBitmask", &stateBitmask);
	addSerializableVariable("encumbrances", &encumbrances);
	addSerializableVariable("runSpeed", &runSpeed);
	addSerializableVariable("walkSpeed", &walkSpeed);
	addSerializableVariable("terrainNegotiation", &terrainNegotiation);
	addSerializableVariable("runAcceleration", &runAcceleration);
	addSerializableVariable("walkAcceleration", &walkAcceleration);
	addSerializableVariable("height", &height);
	addSerializableVariable("slopeModPercent", &slopeModPercent);
	addSerializableVariable("slopeModAngle", &slopeModAngle);
	addSerializableVariable("listenToID", &listenToID);
	addSerializableVariable("level", &level);
	addSerializableVariable("performanceAnimation", &performanceAnimation);
	addSerializableVariable("moodString", &moodString);
	addSerializableVariable("weaponID", &weaponID);
	addSerializableVariable("groupID", &groupID);
	addSerializableVariable("groupInviterID", &groupInviterID);
	addSerializableVariable("groupInviteCounter", &groupInviteCounter);
	addSerializableVariable("guildID", &guildID);
	addSerializableVariable("targetID", &targetID);
	addSerializableVariable("moodID", &moodID);
	addSerializableVariable("performanceCounter", &performanceCounter);
	addSerializableVariable("instrumentID", &instrumentID);
	addSerializableVariable("hamList", &hamList);
	addSerializableVariable("maxHamList", &maxHamList);
	addSerializableVariable("frozen", &frozen);
	addSerializableVariable("templateString", &templateString);
}

int CreatureObjectImplementation::getBankCredits() {
	// server/zone/objects/creature/CreatureObject.idl(145):  return bankCredits;
	return bankCredits;
}

int CreatureObjectImplementation::getCashCredits() {
	// server/zone/objects/creature/CreatureObject.idl(149):  return cashCredits;
	return cashCredits;
}

int CreatureObjectImplementation::getBaseHealth(int idx) {
	// server/zone/objects/creature/CreatureObject.idl(153):  return baseHealth.get(idx);
	return (&baseHealth)->get(idx);
}

int CreatureObjectImplementation::getWounds(int idx) {
	// server/zone/objects/creature/CreatureObject.idl(157):  return wounds.get(idx);
	return (&wounds)->get(idx);
}

DeltaVector<int>* CreatureObjectImplementation::getWounds() {
	// server/zone/objects/creature/CreatureObject.idl(161):  return wounds;
	return (&wounds);
}

int CreatureObjectImplementation::getHAM(int idx) {
	// server/zone/objects/creature/CreatureObject.idl(165):  return hamList.get(idx);
	return (&hamList)->get(idx);
}

DeltaVector<int>* CreatureObjectImplementation::getHAM() {
	// server/zone/objects/creature/CreatureObject.idl(169):  return hamList;
	return (&hamList);
}

int CreatureObjectImplementation::getMaxHAM(int idx) {
	// server/zone/objects/creature/CreatureObject.idl(173):  return maxHamList.get(idx);
	return (&maxHamList)->get(idx);
}

DeltaVector<int>* CreatureObjectImplementation::getMaxHAM() {
	// server/zone/objects/creature/CreatureObject.idl(177):  return maxHamList;
	return (&maxHamList);
}

int CreatureObjectImplementation::getEncumbrance(int idx) {
	// server/zone/objects/creature/CreatureObject.idl(181):  return encumbrances.get(idx);
	return (&encumbrances)->get(idx);
}

DeltaVector<int>* CreatureObjectImplementation::getEncumbrances() {
	// server/zone/objects/creature/CreatureObject.idl(185):  return encumbrances;
	return (&encumbrances);
}

byte CreatureObjectImplementation::getPosture() {
	// server/zone/objects/creature/CreatureObject.idl(189):  return posture;
	return posture;
}

byte CreatureObjectImplementation::getFactionRank() {
	// server/zone/objects/creature/CreatureObject.idl(193):  return factionRank;
	return factionRank;
}

unsigned long long CreatureObjectImplementation::getCreatureLinkID() {
	// server/zone/objects/creature/CreatureObject.idl(197):  return creatureLinkID;
	return creatureLinkID;
}

float CreatureObjectImplementation::getShockWounds() {
	// server/zone/objects/creature/CreatureObject.idl(201):  return shockWounds;
	return shockWounds;
}

unsigned long long CreatureObjectImplementation::getStateBitmask() {
	// server/zone/objects/creature/CreatureObject.idl(205):  return stateBitmask;
	return stateBitmask;
}

unsigned long long CreatureObjectImplementation::getListenID() {
	// server/zone/objects/creature/CreatureObject.idl(209):  return listenToID;
	return listenToID;
}

float CreatureObjectImplementation::getRunSpeed() {
	// server/zone/objects/creature/CreatureObject.idl(213):  return runSpeed;
	return runSpeed;
}

float CreatureObjectImplementation::getWalkSpeed() {
	// server/zone/objects/creature/CreatureObject.idl(217):  return walkSpeed;
	return walkSpeed;
}

float CreatureObjectImplementation::getTerrainNegotiation() {
	// server/zone/objects/creature/CreatureObject.idl(221):  return terrainNegotiation;
	return terrainNegotiation;
}

float CreatureObjectImplementation::getRunAcceleration() {
	// server/zone/objects/creature/CreatureObject.idl(225):  return runAcceleration;
	return runAcceleration;
}

float CreatureObjectImplementation::getWalkAcceleration() {
	// server/zone/objects/creature/CreatureObject.idl(229):  return walkAcceleration;
	return walkAcceleration;
}

int CreatureObjectImplementation::getLevel() {
	// server/zone/objects/creature/CreatureObject.idl(233):  return level;
	return level;
}

String CreatureObjectImplementation::getPerformanceAnimation() {
	// server/zone/objects/creature/CreatureObject.idl(237):  return performanceAnimation;
	return performanceAnimation;
}

String CreatureObjectImplementation::getMoodString() {
	// server/zone/objects/creature/CreatureObject.idl(241):  return moodString;
	return moodString;
}

unsigned long long CreatureObjectImplementation::getWeaponID() {
	// server/zone/objects/creature/CreatureObject.idl(245):  return weaponID;
	return weaponID;
}

unsigned long long CreatureObjectImplementation::getGroupID() {
	// server/zone/objects/creature/CreatureObject.idl(249):  return groupID;
	return groupID;
}

unsigned long long CreatureObjectImplementation::getGroupInviterID() {
	// server/zone/objects/creature/CreatureObject.idl(253):  return groupInviterID;
	return groupInviterID;
}

unsigned long long CreatureObjectImplementation::getGroupInviteCounter() {
	// server/zone/objects/creature/CreatureObject.idl(257):  return groupInviteCounter;
	return groupInviteCounter;
}

int CreatureObjectImplementation::getGuildID() {
	// server/zone/objects/creature/CreatureObject.idl(261):  return guildID;
	return guildID;
}

unsigned long long CreatureObjectImplementation::getTargetID() {
	// server/zone/objects/creature/CreatureObject.idl(265):  return targetID;
	return targetID;
}

byte CreatureObjectImplementation::getMoodID() {
	// server/zone/objects/creature/CreatureObject.idl(269):  return moodID;
	return moodID;
}

float CreatureObjectImplementation::getSlopeModPercent() {
	// server/zone/objects/creature/CreatureObject.idl(273):  return slopeModPercent;
	return slopeModPercent;
}

int CreatureObjectImplementation::getPerformanceCounter() {
	// server/zone/objects/creature/CreatureObject.idl(277):  return performanceCounter;
	return performanceCounter;
}

int CreatureObjectImplementation::getInstrumentID() {
	// server/zone/objects/creature/CreatureObject.idl(281):  return instrumentID;
	return instrumentID;
}

byte CreatureObjectImplementation::getFrozen() {
	// server/zone/objects/creature/CreatureObject.idl(285):  return frozen;
	return frozen;
}

float CreatureObjectImplementation::getHeight() {
	// server/zone/objects/creature/CreatureObject.idl(289):  return height;
	return height;
}

int CreatureObjectImplementation::getSpecies() {
	// server/zone/objects/creature/CreatureObject.idl(293):  return species;
	return species;
}

DeltaVector<int>* CreatureObjectImplementation::getBaseHealth() {
	// server/zone/objects/creature/CreatureObject.idl(297):  return baseHealth;
	return (&baseHealth);
}

void CreatureObjectImplementation::setHeight(float heigh) {
	// server/zone/objects/creature/CreatureObject.idl(301):  height = heigh;
	height = heigh;
}

/*
 *	CreatureObjectAdapter
 */

CreatureObjectAdapter::CreatureObjectAdapter(CreatureObjectImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* CreatureObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		clearQueueAction(inv->getUnsignedIntParameter(), inv->getFloatParameter(), inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter());
		break;
	case 7:
		sendBaselinesTo((SceneObject*) inv->getObjectParameter());
		break;
	case 8:
		sendSystemMessage(inv->getAsciiParameter(_param0_sendSystemMessage__String_));
		break;
	case 9:
		sendSystemMessage(inv->getUnicodeParameter(_param0_sendSystemMessage__UnicodeString_));
		break;
	case 10:
		sendSystemMessage(inv->getAsciiParameter(_param0_sendSystemMessage__String_String_long_), inv->getAsciiParameter(_param1_sendSystemMessage__String_String_long_), inv->getUnsignedLongParameter());
		break;
	case 11:
		sendSlottedObjectsTo((SceneObject*) inv->getObjectParameter());
		break;
	case 12:
		setCombatState();
		break;
	case 13:
		clearCombatState(inv->getBooleanParameter());
		break;
	case 14:
		resp->insertSignedInt(getBankCredits());
		break;
	case 15:
		resp->insertSignedInt(getCashCredits());
		break;
	case 16:
		resp->insertSignedInt(getBaseHealth(inv->getSignedIntParameter()));
		break;
	case 17:
		resp->insertSignedInt(getWounds(inv->getSignedIntParameter()));
		break;
	case 18:
		resp->insertSignedInt(getHAM(inv->getSignedIntParameter()));
		break;
	case 19:
		resp->insertSignedInt(getMaxHAM(inv->getSignedIntParameter()));
		break;
	case 20:
		resp->insertSignedInt(getEncumbrance(inv->getSignedIntParameter()));
		break;
	case 21:
		resp->insertByte(getPosture());
		break;
	case 22:
		resp->insertByte(getFactionRank());
		break;
	case 23:
		resp->insertLong(getCreatureLinkID());
		break;
	case 24:
		resp->insertFloat(getShockWounds());
		break;
	case 25:
		resp->insertLong(getStateBitmask());
		break;
	case 26:
		resp->insertLong(getListenID());
		break;
	case 27:
		resp->insertFloat(getRunSpeed());
		break;
	case 28:
		resp->insertFloat(getWalkSpeed());
		break;
	case 29:
		resp->insertFloat(getTerrainNegotiation());
		break;
	case 30:
		resp->insertFloat(getRunAcceleration());
		break;
	case 31:
		resp->insertFloat(getWalkAcceleration());
		break;
	case 32:
		resp->insertSignedInt(getLevel());
		break;
	case 33:
		resp->insertAscii(getPerformanceAnimation());
		break;
	case 34:
		resp->insertAscii(getMoodString());
		break;
	case 35:
		resp->insertLong(getWeaponID());
		break;
	case 36:
		resp->insertLong(getGroupID());
		break;
	case 37:
		resp->insertLong(getGroupInviterID());
		break;
	case 38:
		resp->insertLong(getGroupInviteCounter());
		break;
	case 39:
		resp->insertSignedInt(getGuildID());
		break;
	case 40:
		resp->insertLong(getTargetID());
		break;
	case 41:
		resp->insertByte(getMoodID());
		break;
	case 42:
		resp->insertFloat(getSlopeModPercent());
		break;
	case 43:
		resp->insertSignedInt(getPerformanceCounter());
		break;
	case 44:
		resp->insertSignedInt(getInstrumentID());
		break;
	case 45:
		resp->insertByte(getFrozen());
		break;
	case 46:
		resp->insertFloat(getHeight());
		break;
	case 47:
		resp->insertSignedInt(getSpecies());
		break;
	case 48:
		setHeight(inv->getFloatParameter());
		break;
	case 49:
		setHAM(inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 50:
		setWeaponID(inv->getUnsignedLongParameter(), inv->getBooleanParameter());
		break;
	case 51:
		setTargetID(inv->getUnsignedLongParameter(), inv->getBooleanParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void CreatureObjectAdapter::clearQueueAction(unsigned int actioncntr, float timer, unsigned int tab1, unsigned int tab2) {
	return ((CreatureObjectImplementation*) impl)->clearQueueAction(actioncntr, timer, tab1, tab2);
}

void CreatureObjectAdapter::sendBaselinesTo(SceneObject* player) {
	return ((CreatureObjectImplementation*) impl)->sendBaselinesTo(player);
}

void CreatureObjectAdapter::sendSystemMessage(const String& message) {
	return ((CreatureObjectImplementation*) impl)->sendSystemMessage(message);
}

void CreatureObjectAdapter::sendSystemMessage(UnicodeString& message) {
	return ((CreatureObjectImplementation*) impl)->sendSystemMessage(message);
}

void CreatureObjectAdapter::sendSystemMessage(const String& file, const String& str, unsigned long long targetid) {
	return ((CreatureObjectImplementation*) impl)->sendSystemMessage(file, str, targetid);
}

void CreatureObjectAdapter::sendSlottedObjectsTo(SceneObject* player) {
	return ((CreatureObjectImplementation*) impl)->sendSlottedObjectsTo(player);
}

void CreatureObjectAdapter::setCombatState() {
	return ((CreatureObjectImplementation*) impl)->setCombatState();
}

void CreatureObjectAdapter::clearCombatState(bool clearDefenders) {
	return ((CreatureObjectImplementation*) impl)->clearCombatState(clearDefenders);
}

int CreatureObjectAdapter::getBankCredits() {
	return ((CreatureObjectImplementation*) impl)->getBankCredits();
}

int CreatureObjectAdapter::getCashCredits() {
	return ((CreatureObjectImplementation*) impl)->getCashCredits();
}

int CreatureObjectAdapter::getBaseHealth(int idx) {
	return ((CreatureObjectImplementation*) impl)->getBaseHealth(idx);
}

int CreatureObjectAdapter::getWounds(int idx) {
	return ((CreatureObjectImplementation*) impl)->getWounds(idx);
}

int CreatureObjectAdapter::getHAM(int idx) {
	return ((CreatureObjectImplementation*) impl)->getHAM(idx);
}

int CreatureObjectAdapter::getMaxHAM(int idx) {
	return ((CreatureObjectImplementation*) impl)->getMaxHAM(idx);
}

int CreatureObjectAdapter::getEncumbrance(int idx) {
	return ((CreatureObjectImplementation*) impl)->getEncumbrance(idx);
}

byte CreatureObjectAdapter::getPosture() {
	return ((CreatureObjectImplementation*) impl)->getPosture();
}

byte CreatureObjectAdapter::getFactionRank() {
	return ((CreatureObjectImplementation*) impl)->getFactionRank();
}

unsigned long long CreatureObjectAdapter::getCreatureLinkID() {
	return ((CreatureObjectImplementation*) impl)->getCreatureLinkID();
}

float CreatureObjectAdapter::getShockWounds() {
	return ((CreatureObjectImplementation*) impl)->getShockWounds();
}

unsigned long long CreatureObjectAdapter::getStateBitmask() {
	return ((CreatureObjectImplementation*) impl)->getStateBitmask();
}

unsigned long long CreatureObjectAdapter::getListenID() {
	return ((CreatureObjectImplementation*) impl)->getListenID();
}

float CreatureObjectAdapter::getRunSpeed() {
	return ((CreatureObjectImplementation*) impl)->getRunSpeed();
}

float CreatureObjectAdapter::getWalkSpeed() {
	return ((CreatureObjectImplementation*) impl)->getWalkSpeed();
}

float CreatureObjectAdapter::getTerrainNegotiation() {
	return ((CreatureObjectImplementation*) impl)->getTerrainNegotiation();
}

float CreatureObjectAdapter::getRunAcceleration() {
	return ((CreatureObjectImplementation*) impl)->getRunAcceleration();
}

float CreatureObjectAdapter::getWalkAcceleration() {
	return ((CreatureObjectImplementation*) impl)->getWalkAcceleration();
}

int CreatureObjectAdapter::getLevel() {
	return ((CreatureObjectImplementation*) impl)->getLevel();
}

String CreatureObjectAdapter::getPerformanceAnimation() {
	return ((CreatureObjectImplementation*) impl)->getPerformanceAnimation();
}

String CreatureObjectAdapter::getMoodString() {
	return ((CreatureObjectImplementation*) impl)->getMoodString();
}

unsigned long long CreatureObjectAdapter::getWeaponID() {
	return ((CreatureObjectImplementation*) impl)->getWeaponID();
}

unsigned long long CreatureObjectAdapter::getGroupID() {
	return ((CreatureObjectImplementation*) impl)->getGroupID();
}

unsigned long long CreatureObjectAdapter::getGroupInviterID() {
	return ((CreatureObjectImplementation*) impl)->getGroupInviterID();
}

unsigned long long CreatureObjectAdapter::getGroupInviteCounter() {
	return ((CreatureObjectImplementation*) impl)->getGroupInviteCounter();
}

int CreatureObjectAdapter::getGuildID() {
	return ((CreatureObjectImplementation*) impl)->getGuildID();
}

unsigned long long CreatureObjectAdapter::getTargetID() {
	return ((CreatureObjectImplementation*) impl)->getTargetID();
}

byte CreatureObjectAdapter::getMoodID() {
	return ((CreatureObjectImplementation*) impl)->getMoodID();
}

float CreatureObjectAdapter::getSlopeModPercent() {
	return ((CreatureObjectImplementation*) impl)->getSlopeModPercent();
}

int CreatureObjectAdapter::getPerformanceCounter() {
	return ((CreatureObjectImplementation*) impl)->getPerformanceCounter();
}

int CreatureObjectAdapter::getInstrumentID() {
	return ((CreatureObjectImplementation*) impl)->getInstrumentID();
}

byte CreatureObjectAdapter::getFrozen() {
	return ((CreatureObjectImplementation*) impl)->getFrozen();
}

float CreatureObjectAdapter::getHeight() {
	return ((CreatureObjectImplementation*) impl)->getHeight();
}

int CreatureObjectAdapter::getSpecies() {
	return ((CreatureObjectImplementation*) impl)->getSpecies();
}

void CreatureObjectAdapter::setHeight(float heigh) {
	return ((CreatureObjectImplementation*) impl)->setHeight(heigh);
}

void CreatureObjectAdapter::setHAM(int type, int value, bool notifyClient) {
	return ((CreatureObjectImplementation*) impl)->setHAM(type, value, notifyClient);
}

void CreatureObjectAdapter::setWeaponID(unsigned long long objectID, bool notifyClient) {
	return ((CreatureObjectImplementation*) impl)->setWeaponID(objectID, notifyClient);
}

void CreatureObjectAdapter::setTargetID(unsigned long long targetID, bool notifyClient) {
	return ((CreatureObjectImplementation*) impl)->setTargetID(targetID, notifyClient);
}

/*
 *	CreatureObjectHelper
 */

CreatureObjectHelper* CreatureObjectHelper::staticInitializer = CreatureObjectHelper::instance();

CreatureObjectHelper::CreatureObjectHelper() {
	className = "CreatureObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void CreatureObjectHelper::finalizeHelper() {
	CreatureObjectHelper::finalize();
}

DistributedObject* CreatureObjectHelper::instantiateObject() {
	return new CreatureObject(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* CreatureObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new CreatureObjectAdapter((CreatureObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

