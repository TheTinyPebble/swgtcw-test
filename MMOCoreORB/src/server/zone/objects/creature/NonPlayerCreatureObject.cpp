/*
 *	server/zone/objects/creature/NonPlayerCreatureObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "NonPlayerCreatureObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/area/ActiveArea.h"

/*
 *	NonPlayerCreatureObjectStub
 */

enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 6,RPC_ISNONPLAYERCREATUREOBJECT__,RPC_ISCAMOUFLAGED__CREATUREOBJECT_};

NonPlayerCreatureObject::NonPlayerCreatureObject() : AiAgent(DummyConstructorParameter::instance()) {
	NonPlayerCreatureObjectImplementation* _implementation = new NonPlayerCreatureObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("NonPlayerCreatureObject");
}

NonPlayerCreatureObject::NonPlayerCreatureObject(DummyConstructorParameter* param) : AiAgent(param) {
	_setClassName("NonPlayerCreatureObject");
}

NonPlayerCreatureObject::~NonPlayerCreatureObject() {
}



void NonPlayerCreatureObject::initializeTransientMembers() {
	NonPlayerCreatureObjectImplementation* _implementation = static_cast<NonPlayerCreatureObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

bool NonPlayerCreatureObject::isNonPlayerCreatureObject() {
	NonPlayerCreatureObjectImplementation* _implementation = static_cast<NonPlayerCreatureObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISNONPLAYERCREATUREOBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isNonPlayerCreatureObject();
}

bool NonPlayerCreatureObject::isCamouflaged(CreatureObject* target) {
	NonPlayerCreatureObjectImplementation* _implementation = static_cast<NonPlayerCreatureObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCAMOUFLAGED__CREATUREOBJECT_);
		method.addObjectParameter(target);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isCamouflaged(target);
}

DistributedObjectServant* NonPlayerCreatureObject::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

void NonPlayerCreatureObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	NonPlayerCreatureObjectImplementation
 */

NonPlayerCreatureObjectImplementation::NonPlayerCreatureObjectImplementation(DummyConstructorParameter* param) : AiAgentImplementation(param) {
	_initializeImplementation();
}


NonPlayerCreatureObjectImplementation::~NonPlayerCreatureObjectImplementation() {
}


void NonPlayerCreatureObjectImplementation::finalize() {
}

void NonPlayerCreatureObjectImplementation::_initializeImplementation() {
	_setClassHelper(NonPlayerCreatureObjectHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void NonPlayerCreatureObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<NonPlayerCreatureObject*>(stub);
	AiAgentImplementation::_setStub(stub);
}

DistributedObjectStub* NonPlayerCreatureObjectImplementation::_getStub() {
	return _this.get();
}

NonPlayerCreatureObjectImplementation::operator const NonPlayerCreatureObject*() {
	return _this.get();
}

void NonPlayerCreatureObjectImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void NonPlayerCreatureObjectImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void NonPlayerCreatureObjectImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void NonPlayerCreatureObjectImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void NonPlayerCreatureObjectImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void NonPlayerCreatureObjectImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void NonPlayerCreatureObjectImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void NonPlayerCreatureObjectImplementation::_serializationHelperMethod() {
	AiAgentImplementation::_serializationHelperMethod();

	_setClassName("NonPlayerCreatureObject");

}

void NonPlayerCreatureObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(NonPlayerCreatureObjectImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool NonPlayerCreatureObjectImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (AiAgentImplementation::readObjectMember(stream, _name))
		return true;


	return false;
}

void NonPlayerCreatureObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = NonPlayerCreatureObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int NonPlayerCreatureObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = AiAgentImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;

	return _count + 0;
}

NonPlayerCreatureObjectImplementation::NonPlayerCreatureObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/creature/NonPlayerCreatureObject.idl():  		Logger.setLoggingName("NonPlayerCreatureObject");
	Logger::setLoggingName("NonPlayerCreatureObject");
	// server/zone/objects/creature/NonPlayerCreatureObject.idl():  		Logger.setLogging(false);
	Logger::setLogging(false);
	// server/zone/objects/creature/NonPlayerCreatureObject.idl():  		Logger.setGlobalLogging(true);
	Logger::setGlobalLogging(true);
}

bool NonPlayerCreatureObjectImplementation::isNonPlayerCreatureObject() {
	// server/zone/objects/creature/NonPlayerCreatureObject.idl():  		return true;
	return true;
}

bool NonPlayerCreatureObjectImplementation::isCamouflaged(CreatureObject* target) {
	// server/zone/objects/creature/NonPlayerCreatureObject.idl():  		return isConcealed(target);
	return isConcealed(target);
}

/*
 *	NonPlayerCreatureObjectAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


NonPlayerCreatureObjectAdapter::NonPlayerCreatureObjectAdapter(NonPlayerCreatureObject* obj) : AiAgentAdapter(obj) {
}

void NonPlayerCreatureObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			initializeTransientMembers();
		}
		break;
	case RPC_ISNONPLAYERCREATUREOBJECT__:
		{
			resp->insertBoolean(isNonPlayerCreatureObject());
		}
		break;
	case RPC_ISCAMOUFLAGED__CREATUREOBJECT_:
		{
			resp->insertBoolean(isCamouflaged(static_cast<CreatureObject*>(inv->getObjectParameter())));
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void NonPlayerCreatureObjectAdapter::initializeTransientMembers() {
	(static_cast<NonPlayerCreatureObject*>(stub))->initializeTransientMembers();
}

bool NonPlayerCreatureObjectAdapter::isNonPlayerCreatureObject() {
	return (static_cast<NonPlayerCreatureObject*>(stub))->isNonPlayerCreatureObject();
}

bool NonPlayerCreatureObjectAdapter::isCamouflaged(CreatureObject* target) {
	return (static_cast<NonPlayerCreatureObject*>(stub))->isCamouflaged(target);
}

/*
 *	NonPlayerCreatureObjectHelper
 */

NonPlayerCreatureObjectHelper* NonPlayerCreatureObjectHelper::staticInitializer = NonPlayerCreatureObjectHelper::instance();

NonPlayerCreatureObjectHelper::NonPlayerCreatureObjectHelper() {
	className = "NonPlayerCreatureObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void NonPlayerCreatureObjectHelper::finalizeHelper() {
	NonPlayerCreatureObjectHelper::finalize();
}

DistributedObject* NonPlayerCreatureObjectHelper::instantiateObject() {
	return new NonPlayerCreatureObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* NonPlayerCreatureObjectHelper::instantiateServant() {
	return new NonPlayerCreatureObjectImplementation();
}

DistributedObjectAdapter* NonPlayerCreatureObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new NonPlayerCreatureObjectAdapter(static_cast<NonPlayerCreatureObject*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

