/*
 *	server/zone/objects/creature/trainer/TrainerCreature.cpp generated by engine3 IDL compiler 0.55
 */

#include "TrainerCreature.h"

#include "TrainerCreatureImplementation.h"

#include "../../scene/SceneObject.h"

#include "../../player/Player.h"

#include "../Creature.h"

/*
 *	TrainerCreatureStub
 */

TrainerCreature::TrainerCreature(unsigned long long oid, Profession* prof) : Creature(DummyConstructorParameter::instance()) {
	_impl = new TrainerCreatureImplementation(oid, prof);
	_impl->_setStub(this);
}

TrainerCreature::TrainerCreature(DummyConstructorParameter* param) : Creature(param) {
}

TrainerCreature::~TrainerCreature() {
}

void TrainerCreature::sendInitialMessage(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((TrainerCreatureImplementation*) _impl)->sendInitialMessage(player);
}

void TrainerCreature::sendInitialChoices(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((TrainerCreatureImplementation*) _impl)->sendInitialChoices(player);
}

void TrainerCreature::sendConversationStartTo(SceneObject* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((TrainerCreatureImplementation*) _impl)->sendConversationStartTo(obj);
}

void TrainerCreature::sendSkillBoxes(Player* player, bool checkXp) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(player);
		method.addBooleanParameter(checkXp);

		method.executeWithVoidReturn();
	} else
		((TrainerCreatureImplementation*) _impl)->sendSkillBoxes(player, checkXp);
}

void TrainerCreature::sendSkillBoxList(Player* player, bool checkLearned) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(player);
		method.addBooleanParameter(checkLearned);

		method.executeWithVoidReturn();
	} else
		((TrainerCreatureImplementation*) _impl)->sendSkillBoxList(player, checkLearned);
}

void TrainerCreature::sendConfirmation(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((TrainerCreatureImplementation*) _impl)->sendConfirmation(player);
}

void TrainerCreature::selectConversationOption(int option, SceneObject* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addSignedIntParameter(option);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((TrainerCreatureImplementation*) _impl)->selectConversationOption(option, obj);
}

/*
 *	TrainerCreatureAdapter
 */

TrainerCreatureAdapter::TrainerCreatureAdapter(TrainerCreatureImplementation* obj) : CreatureAdapter(obj) {
}

Packet* TrainerCreatureAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		sendInitialMessage((Player*) inv->getObjectParameter());
		break;
	case 7:
		sendInitialChoices((Player*) inv->getObjectParameter());
		break;
	case 8:
		sendConversationStartTo((SceneObject*) inv->getObjectParameter());
		break;
	case 9:
		sendSkillBoxes((Player*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 10:
		sendSkillBoxList((Player*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 11:
		sendConfirmation((Player*) inv->getObjectParameter());
		break;
	case 12:
		selectConversationOption(inv->getSignedIntParameter(), (SceneObject*) inv->getObjectParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void TrainerCreatureAdapter::sendInitialMessage(Player* player) {
	return ((TrainerCreatureImplementation*) impl)->sendInitialMessage(player);
}

void TrainerCreatureAdapter::sendInitialChoices(Player* player) {
	return ((TrainerCreatureImplementation*) impl)->sendInitialChoices(player);
}

void TrainerCreatureAdapter::sendConversationStartTo(SceneObject* obj) {
	return ((TrainerCreatureImplementation*) impl)->sendConversationStartTo(obj);
}

void TrainerCreatureAdapter::sendSkillBoxes(Player* player, bool checkXp) {
	return ((TrainerCreatureImplementation*) impl)->sendSkillBoxes(player, checkXp);
}

void TrainerCreatureAdapter::sendSkillBoxList(Player* player, bool checkLearned) {
	return ((TrainerCreatureImplementation*) impl)->sendSkillBoxList(player, checkLearned);
}

void TrainerCreatureAdapter::sendConfirmation(Player* player) {
	return ((TrainerCreatureImplementation*) impl)->sendConfirmation(player);
}

void TrainerCreatureAdapter::selectConversationOption(int option, SceneObject* obj) {
	return ((TrainerCreatureImplementation*) impl)->selectConversationOption(option, obj);
}

/*
 *	TrainerCreatureHelper
 */

TrainerCreatureHelper* TrainerCreatureHelper::staticInitializer = TrainerCreatureHelper::instance();

TrainerCreatureHelper::TrainerCreatureHelper() {
	className = "TrainerCreature";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void TrainerCreatureHelper::finalizeHelper() {
	TrainerCreatureHelper::finalize();
}

DistributedObject* TrainerCreatureHelper::instantiateObject() {
	return new TrainerCreature(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* TrainerCreatureHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new TrainerCreatureAdapter((TrainerCreatureImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	TrainerCreatureServant
 */

TrainerCreatureServant::TrainerCreatureServant(unsigned long long oid) : CreatureImplementation(oid) {
	_classHelper = TrainerCreatureHelper::instance();
}

TrainerCreatureServant::~TrainerCreatureServant() {
}

void TrainerCreatureServant::_setStub(DistributedObjectStub* stub) {
	_this = (TrainerCreature*) stub;
	CreatureServant::_setStub(stub);
}

DistributedObjectStub* TrainerCreatureServant::_getStub() {
	return _this;
}

