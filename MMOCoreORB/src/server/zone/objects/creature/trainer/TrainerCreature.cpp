/*
 *	server/zone/objects/creature/trainer/TrainerCreature.cpp generated by engine3 IDL compiler 0.60
 */

#include "TrainerCreature.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/scene/SceneObject.h"


// Imported class dependencies

#include "system/lang/Time.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/creature/buffs/BuffList.h"

#include "server/zone/managers/planet/MapLocationTable.h"

#include "server/zone/objects/scene/ObserverEventMap.h"

#include "server/zone/objects/group/GroupObject.h"

#include "system/util/Vector.h"

#include "server/zone/managers/creature/CreatureManager.h"

#include "server/zone/ZoneClientSession.h"

#include "server/zone/objects/player/events/PlayerRecoveryEvent.h"

#include "server/zone/ZoneProcessServerImplementation.h"

#include "server/zone/objects/creature/variables/CooldownTimerMap.h"

#include "engine/util/QuadTree.h"

#include "server/zone/objects/scene/variables/CustomizationVariables.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "server/zone/objects/scene/variables/StringId.h"

#include "server/zone/objects/scene/variables/DeltaVector.h"

#include "engine/util/Quaternion.h"

#include "server/zone/objects/player/TradeContainer.h"

#include "server/zone/objects/tangible/tool/CraftingTool.h"

#include "server/zone/objects/scene/variables/DeltaVectorMap.h"

#include "server/zone/objects/tangible/tool/SurveyTool.h"

#include "system/util/VectorMap.h"

#include "server/zone/objects/player/events/PlayerDisconnectEvent.h"

#include "server/zone/objects/tangible/weapon/WeaponObject.h"

#include "server/zone/managers/object/ObjectMap.h"

#include "server/zone/objects/player/badges/Badges.h"

#include "server/zone/objects/creature/damageovertime/DamageOverTimeList.h"

#include "server/zone/Zone.h"

#include "server/zone/managers/planet/HeightMap.h"

#include "server/zone/objects/intangible/ControlDevice.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/ZoneServer.h"

#include "system/util/SortedVector.h"

#include "server/zone/managers/planet/PlanetManager.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

#include "server/zone/objects/creature/variables/SkillBoxList.h"

/*
 *	TrainerCreatureStub
 */

TrainerCreature::TrainerCreature() : CreatureObject(DummyConstructorParameter::instance()) {
	TrainerCreatureImplementation* _implementation = new TrainerCreatureImplementation();
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

TrainerCreature::TrainerCreature(DummyConstructorParameter* param) : CreatureObject(param) {
}

TrainerCreature::~TrainerCreature() {
}


void TrainerCreature::loadTemplateData(SharedObjectTemplate* templateData) {
	TrainerCreatureImplementation* _implementation = (TrainerCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->loadTemplateData(templateData);
}

void TrainerCreature::activateRecovery() {
	TrainerCreatureImplementation* _implementation = (TrainerCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		_implementation->activateRecovery();
}

void TrainerCreature::sendInitialMessage(PlayerCreature* player) {
	TrainerCreatureImplementation* _implementation = (TrainerCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendInitialMessage(player);
}

void TrainerCreature::sendInitialChoices(PlayerCreature* player) {
	TrainerCreatureImplementation* _implementation = (TrainerCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendInitialChoices(player);
}

void TrainerCreature::sendConversationStartTo(SceneObject* obj) {
	TrainerCreatureImplementation* _implementation = (TrainerCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		_implementation->sendConversationStartTo(obj);
}

void TrainerCreature::sendSkillBoxes(PlayerCreature* player, bool checkXp) {
	TrainerCreatureImplementation* _implementation = (TrainerCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(player);
		method.addBooleanParameter(checkXp);

		method.executeWithVoidReturn();
	} else
		_implementation->sendSkillBoxes(player, checkXp);
}

void TrainerCreature::sendSkillBoxList(PlayerCreature* player, bool checkLearned) {
	TrainerCreatureImplementation* _implementation = (TrainerCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addObjectParameter(player);
		method.addBooleanParameter(checkLearned);

		method.executeWithVoidReturn();
	} else
		_implementation->sendSkillBoxList(player, checkLearned);
}

void TrainerCreature::sendConfirmation(PlayerCreature* player) {
	TrainerCreatureImplementation* _implementation = (TrainerCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendConfirmation(player);
}

void TrainerCreature::selectConversationOption(int option, SceneObject* obj) {
	TrainerCreatureImplementation* _implementation = (TrainerCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addSignedIntParameter(option);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		_implementation->selectConversationOption(option, obj);
}

void TrainerCreature::setTrainerID(int id) {
	TrainerCreatureImplementation* _implementation = (TrainerCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addSignedIntParameter(id);

		method.executeWithVoidReturn();
	} else
		_implementation->setTrainerID(id);
}

void TrainerCreature::setProfession(Profession* prof) {
	TrainerCreatureImplementation* _implementation = (TrainerCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->setProfession(prof);
}

int TrainerCreature::getTrainerID() {
	TrainerCreatureImplementation* _implementation = (TrainerCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getTrainerID();
}

String TrainerCreature::getLocation() {
	TrainerCreatureImplementation* _implementation = (TrainerCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		method.executeWithAsciiReturn(_return_getLocation);
		return _return_getLocation;
	} else
		return _implementation->getLocation();
}

void TrainerCreature::setLocation(const String& loc) {
	TrainerCreatureImplementation* _implementation = (TrainerCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addAsciiParameter(loc);

		method.executeWithVoidReturn();
	} else
		_implementation->setLocation(loc);
}

bool TrainerCreature::isTrainerCreature() {
	TrainerCreatureImplementation* _implementation = (TrainerCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isTrainerCreature();
}

bool TrainerCreature::isAttackableBy(CreatureObject* object) {
	TrainerCreatureImplementation* _implementation = (TrainerCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addObjectParameter(object);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isAttackableBy(object);
}

DistributedObjectServant* TrainerCreature::_getImplementation() {
	return getForUpdate();}

void TrainerCreature::_setImplementation(DistributedObjectServant* servant) {
	setObject((ManagedObjectImplementation*) servant);}

/*
 *	TrainerCreatureImplementation
 */

TrainerCreatureImplementation::TrainerCreatureImplementation(DummyConstructorParameter* param) : CreatureObjectImplementation(param) {
	_initializeImplementation();
}


TrainerCreatureImplementation::~TrainerCreatureImplementation() {
}


void TrainerCreatureImplementation::finalize() {
}

void TrainerCreatureImplementation::_initializeImplementation() {
	_setClassHelper(TrainerCreatureHelper::instance());

	_serializationHelperMethod();
}

void TrainerCreatureImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (TrainerCreature*) stub;
	CreatureObjectImplementation::_setStub(stub);
}

DistributedObjectStub* TrainerCreatureImplementation::_getStub() {
	return _this;
}

TrainerCreatureImplementation::operator const TrainerCreature*() {
	return _this;
}

TransactionalObject* TrainerCreatureImplementation::clone() {
	return (TransactionalObject*) new TrainerCreatureImplementation(*this);
}


void TrainerCreatureImplementation::lock(bool doLock) {
}

void TrainerCreatureImplementation::lock(ManagedObject* obj) {
}

void TrainerCreatureImplementation::rlock(bool doLock) {
}

void TrainerCreatureImplementation::wlock(bool doLock) {
}

void TrainerCreatureImplementation::wlock(ManagedObject* obj) {
}

void TrainerCreatureImplementation::unlock(bool doLock) {
}

void TrainerCreatureImplementation::runlock(bool doLock) {
}

void TrainerCreatureImplementation::_serializationHelperMethod() {
	CreatureObjectImplementation::_serializationHelperMethod();

	_setClassName("TrainerCreature");

	addSerializableVariable("profession", &profession);
	addSerializableVariable("trainerID", &trainerID);
	addSerializableVariable("location", &location);
}

TrainerCreatureImplementation::TrainerCreatureImplementation() {
	_initializeImplementation();
	// server/zone/objects/creature/trainer/TrainerCreature.idl(68):  		Logger.setLoggingName("TrainerCreature");
	Logger::setLoggingName("TrainerCreature");
	// server/zone/objects/creature/trainer/TrainerCreature.idl(70):  		profession.setProfession(null);
	(&profession)->setProfession(NULL);
	// server/zone/objects/creature/trainer/TrainerCreature.idl(71):  		trainerID = 0;
	trainerID = 0;
}

void TrainerCreatureImplementation::loadTemplateData(SharedObjectTemplate* templateData) {
	// server/zone/objects/creature/trainer/TrainerCreature.idl(76):  		super.loadTemplateData(templateData);
	CreatureObjectImplementation::loadTemplateData(templateData);
	// server/zone/objects/creature/trainer/TrainerCreature.idl(78):  		super.optionsBitmask = 0x108;
	CreatureObjectImplementation::optionsBitmask = 0x108;
	// server/zone/objects/creature/trainer/TrainerCreature.idl(79):  		super.pvpStatusBitmask = 0;
	CreatureObjectImplementation::pvpStatusBitmask = 0;
}

void TrainerCreatureImplementation::activateRecovery() {
}

void TrainerCreatureImplementation::setTrainerID(int id) {
	// server/zone/objects/creature/trainer/TrainerCreature.idl(136):  		trainerID = id;
	trainerID = id;
}

void TrainerCreatureImplementation::setProfession(Profession* prof) {
	// server/zone/objects/creature/trainer/TrainerCreature.idl(141):  		profession.setProfession(prof);
	(&profession)->setProfession(prof);
}

int TrainerCreatureImplementation::getTrainerID() {
	// server/zone/objects/creature/trainer/TrainerCreature.idl(145):  		return trainerID;
	return trainerID;
}

String TrainerCreatureImplementation::getLocation() {
	// server/zone/objects/creature/trainer/TrainerCreature.idl(149):  		return location;
	return location;
}

void TrainerCreatureImplementation::setLocation(const String& loc) {
	// server/zone/objects/creature/trainer/TrainerCreature.idl(153):  		location = loc;
	location = loc;
}

bool TrainerCreatureImplementation::isTrainerCreature() {
	// server/zone/objects/creature/trainer/TrainerCreature.idl(157):  		return true;
	return true;
}

bool TrainerCreatureImplementation::isAttackableBy(CreatureObject* object) {
	// server/zone/objects/creature/trainer/TrainerCreature.idl(161):  		return false;
	return false;
}

/*
 *	TrainerCreatureAdapter
 */

TrainerCreatureAdapter::TrainerCreatureAdapter(TrainerCreatureImplementation* obj) : CreatureObjectAdapter(obj) {
}

Packet* TrainerCreatureAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		activateRecovery();
		break;
	case 7:
		sendInitialMessage((PlayerCreature*) inv->getObjectParameter());
		break;
	case 8:
		sendInitialChoices((PlayerCreature*) inv->getObjectParameter());
		break;
	case 9:
		sendConversationStartTo((SceneObject*) inv->getObjectParameter());
		break;
	case 10:
		sendSkillBoxes((PlayerCreature*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 11:
		sendSkillBoxList((PlayerCreature*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 12:
		sendConfirmation((PlayerCreature*) inv->getObjectParameter());
		break;
	case 13:
		selectConversationOption(inv->getSignedIntParameter(), (SceneObject*) inv->getObjectParameter());
		break;
	case 14:
		setTrainerID(inv->getSignedIntParameter());
		break;
	case 15:
		resp->insertSignedInt(getTrainerID());
		break;
	case 16:
		resp->insertAscii(getLocation());
		break;
	case 17:
		setLocation(inv->getAsciiParameter(_param0_setLocation__String_));
		break;
	case 18:
		resp->insertBoolean(isTrainerCreature());
		break;
	case 19:
		resp->insertBoolean(isAttackableBy((CreatureObject*) inv->getObjectParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

void TrainerCreatureAdapter::activateRecovery() {
	((TrainerCreatureImplementation*) impl)->activateRecovery();
}

void TrainerCreatureAdapter::sendInitialMessage(PlayerCreature* player) {
	((TrainerCreatureImplementation*) impl)->sendInitialMessage(player);
}

void TrainerCreatureAdapter::sendInitialChoices(PlayerCreature* player) {
	((TrainerCreatureImplementation*) impl)->sendInitialChoices(player);
}

void TrainerCreatureAdapter::sendConversationStartTo(SceneObject* obj) {
	((TrainerCreatureImplementation*) impl)->sendConversationStartTo(obj);
}

void TrainerCreatureAdapter::sendSkillBoxes(PlayerCreature* player, bool checkXp) {
	((TrainerCreatureImplementation*) impl)->sendSkillBoxes(player, checkXp);
}

void TrainerCreatureAdapter::sendSkillBoxList(PlayerCreature* player, bool checkLearned) {
	((TrainerCreatureImplementation*) impl)->sendSkillBoxList(player, checkLearned);
}

void TrainerCreatureAdapter::sendConfirmation(PlayerCreature* player) {
	((TrainerCreatureImplementation*) impl)->sendConfirmation(player);
}

void TrainerCreatureAdapter::selectConversationOption(int option, SceneObject* obj) {
	((TrainerCreatureImplementation*) impl)->selectConversationOption(option, obj);
}

void TrainerCreatureAdapter::setTrainerID(int id) {
	((TrainerCreatureImplementation*) impl)->setTrainerID(id);
}

int TrainerCreatureAdapter::getTrainerID() {
	return ((TrainerCreatureImplementation*) impl)->getTrainerID();
}

String TrainerCreatureAdapter::getLocation() {
	return ((TrainerCreatureImplementation*) impl)->getLocation();
}

void TrainerCreatureAdapter::setLocation(const String& loc) {
	((TrainerCreatureImplementation*) impl)->setLocation(loc);
}

bool TrainerCreatureAdapter::isTrainerCreature() {
	return ((TrainerCreatureImplementation*) impl)->isTrainerCreature();
}

bool TrainerCreatureAdapter::isAttackableBy(CreatureObject* object) {
	return ((TrainerCreatureImplementation*) impl)->isAttackableBy(object);
}

/*
 *	TrainerCreatureHelper
 */

TrainerCreatureHelper* TrainerCreatureHelper::staticInitializer = TrainerCreatureHelper::instance();

TrainerCreatureHelper::TrainerCreatureHelper() {
	className = "TrainerCreature";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void TrainerCreatureHelper::finalizeHelper() {
	TrainerCreatureHelper::finalize();
}

DistributedObject* TrainerCreatureHelper::instantiateObject() {
	return new TrainerCreature(DummyConstructorParameter::instance());
}

DistributedObjectServant* TrainerCreatureHelper::instantiateServant() {
	return new TrainerCreatureImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* TrainerCreatureHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new TrainerCreatureAdapter((TrainerCreatureImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

