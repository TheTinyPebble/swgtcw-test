/*
 *	server/zone/objects/creature/trainer/TrainerCreature.cpp generated by engine3 IDL compiler 0.60
 */

#include "TrainerCreature.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/scene/SceneObject.h"

/*
 *	TrainerCreatureStub
 */

enum {RPC_ACTIVATERECOVERY__,RPC_SENDINITIALMESSAGE__PLAYERCREATURE_,RPC_SENDINITIALCHOICES__PLAYERCREATURE_,RPC_SENDCONVERSATIONSTARTTO__SCENEOBJECT_,RPC_SENDSKILLBOXES__PLAYERCREATURE_BOOL_,RPC_SENDSKILLBOXLIST__PLAYERCREATURE_BOOL_,RPC_SENDCONFIRMATION__PLAYERCREATURE_,RPC_SELECTCONVERSATIONOPTION__INT_SCENEOBJECT_,RPC_SETTRAINERID__INT_,RPC_GETTRAINERID__,RPC_GETLOCATION__,RPC_SETLOCATION__STRING_,RPC_ISTRAINERCREATURE__,RPC_ISATTACKABLEBY__CREATUREOBJECT_};

TrainerCreature::TrainerCreature() : CreatureObject(DummyConstructorParameter::instance()) {
	TrainerCreatureImplementation* _implementation = new TrainerCreatureImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

TrainerCreature::TrainerCreature(DummyConstructorParameter* param) : CreatureObject(param) {
}

TrainerCreature::~TrainerCreature() {
}


void TrainerCreature::loadTemplateData(SharedObjectTemplate* templateData) {
	TrainerCreatureImplementation* _implementation = (TrainerCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->loadTemplateData(templateData);
}

void TrainerCreature::activateRecovery() {
	TrainerCreatureImplementation* _implementation = (TrainerCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ACTIVATERECOVERY__);

		method.executeWithVoidReturn();
	} else
		_implementation->activateRecovery();
}

void TrainerCreature::sendInitialMessage(PlayerCreature* player) {
	TrainerCreatureImplementation* _implementation = (TrainerCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDINITIALMESSAGE__PLAYERCREATURE_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendInitialMessage(player);
}

void TrainerCreature::sendInitialChoices(PlayerCreature* player) {
	TrainerCreatureImplementation* _implementation = (TrainerCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDINITIALCHOICES__PLAYERCREATURE_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendInitialChoices(player);
}

void TrainerCreature::sendConversationStartTo(SceneObject* obj) {
	TrainerCreatureImplementation* _implementation = (TrainerCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDCONVERSATIONSTARTTO__SCENEOBJECT_);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		_implementation->sendConversationStartTo(obj);
}

void TrainerCreature::sendSkillBoxes(PlayerCreature* player, bool checkXp) {
	TrainerCreatureImplementation* _implementation = (TrainerCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDSKILLBOXES__PLAYERCREATURE_BOOL_);
		method.addObjectParameter(player);
		method.addBooleanParameter(checkXp);

		method.executeWithVoidReturn();
	} else
		_implementation->sendSkillBoxes(player, checkXp);
}

void TrainerCreature::sendSkillBoxList(PlayerCreature* player, bool checkLearned) {
	TrainerCreatureImplementation* _implementation = (TrainerCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDSKILLBOXLIST__PLAYERCREATURE_BOOL_);
		method.addObjectParameter(player);
		method.addBooleanParameter(checkLearned);

		method.executeWithVoidReturn();
	} else
		_implementation->sendSkillBoxList(player, checkLearned);
}

void TrainerCreature::sendConfirmation(PlayerCreature* player) {
	TrainerCreatureImplementation* _implementation = (TrainerCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDCONFIRMATION__PLAYERCREATURE_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendConfirmation(player);
}

void TrainerCreature::selectConversationOption(int option, SceneObject* obj) {
	TrainerCreatureImplementation* _implementation = (TrainerCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SELECTCONVERSATIONOPTION__INT_SCENEOBJECT_);
		method.addSignedIntParameter(option);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		_implementation->selectConversationOption(option, obj);
}

void TrainerCreature::setTrainerID(int id) {
	TrainerCreatureImplementation* _implementation = (TrainerCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETTRAINERID__INT_);
		method.addSignedIntParameter(id);

		method.executeWithVoidReturn();
	} else
		_implementation->setTrainerID(id);
}

void TrainerCreature::setProfession(Profession* prof) {
	TrainerCreatureImplementation* _implementation = (TrainerCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->setProfession(prof);
}

int TrainerCreature::getTrainerID() {
	TrainerCreatureImplementation* _implementation = (TrainerCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTRAINERID__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getTrainerID();
}

String TrainerCreature::getLocation() {
	TrainerCreatureImplementation* _implementation = (TrainerCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETLOCATION__);

		method.executeWithAsciiReturn(_return_getLocation);
		return _return_getLocation;
	} else
		return _implementation->getLocation();
}

void TrainerCreature::setLocation(const String& loc) {
	TrainerCreatureImplementation* _implementation = (TrainerCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETLOCATION__STRING_);
		method.addAsciiParameter(loc);

		method.executeWithVoidReturn();
	} else
		_implementation->setLocation(loc);
}

bool TrainerCreature::isTrainerCreature() {
	TrainerCreatureImplementation* _implementation = (TrainerCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISTRAINERCREATURE__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isTrainerCreature();
}

bool TrainerCreature::isAttackableBy(CreatureObject* object) {
	TrainerCreatureImplementation* _implementation = (TrainerCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISATTACKABLEBY__CREATUREOBJECT_);
		method.addObjectParameter(object);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isAttackableBy(object);
}

DistributedObjectServant* TrainerCreature::_getImplementation() {

	_updated = true;
	return _impl;
}

void TrainerCreature::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	TrainerCreatureImplementation
 */

TrainerCreatureImplementation::TrainerCreatureImplementation(DummyConstructorParameter* param) : CreatureObjectImplementation(param) {
	_initializeImplementation();
}


TrainerCreatureImplementation::~TrainerCreatureImplementation() {
}


void TrainerCreatureImplementation::finalize() {
}

void TrainerCreatureImplementation::_initializeImplementation() {
	_setClassHelper(TrainerCreatureHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void TrainerCreatureImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (TrainerCreature*) stub;
	CreatureObjectImplementation::_setStub(stub);
}

DistributedObjectStub* TrainerCreatureImplementation::_getStub() {
	return _this;
}

TrainerCreatureImplementation::operator const TrainerCreature*() {
	return _this;
}

void TrainerCreatureImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void TrainerCreatureImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void TrainerCreatureImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void TrainerCreatureImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void TrainerCreatureImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void TrainerCreatureImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void TrainerCreatureImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void TrainerCreatureImplementation::_serializationHelperMethod() {
	CreatureObjectImplementation::_serializationHelperMethod();

	_setClassName("TrainerCreature");

}

void TrainerCreatureImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(TrainerCreatureImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool TrainerCreatureImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (CreatureObjectImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "profession") {
		TypeInfo<ProfessionReference >::parseFromBinaryStream(&profession, stream);
		return true;
	}

	if (_name == "trainerID") {
		TypeInfo<int >::parseFromBinaryStream(&trainerID, stream);
		return true;
	}

	if (_name == "location") {
		TypeInfo<String >::parseFromBinaryStream(&location, stream);
		return true;
	}


	return false;
}

void TrainerCreatureImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = TrainerCreatureImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int TrainerCreatureImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "profession";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ProfessionReference >::toBinaryStream(&profession, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "trainerID";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&trainerID, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "location";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<String >::toBinaryStream(&location, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 3 + CreatureObjectImplementation::writeObjectMembers(stream);
}

TrainerCreatureImplementation::TrainerCreatureImplementation() {
	_initializeImplementation();
	// server/zone/objects/creature/trainer/TrainerCreature.idl():  		Logger.setLoggingName("TrainerCreature");
	Logger::setLoggingName("TrainerCreature");
	// server/zone/objects/creature/trainer/TrainerCreature.idl():  		profession.setProfession(null);
	(&profession)->setProfession(NULL);
	// server/zone/objects/creature/trainer/TrainerCreature.idl():  		trainerID = 0;
	trainerID = 0;
}

void TrainerCreatureImplementation::loadTemplateData(SharedObjectTemplate* templateData) {
	// server/zone/objects/creature/trainer/TrainerCreature.idl():  		super.loadTemplateData(templateData);
	CreatureObjectImplementation::loadTemplateData(templateData);
	// server/zone/objects/creature/trainer/TrainerCreature.idl():  		super.optionsBitmask = 0x108;
	CreatureObjectImplementation::optionsBitmask = 0x108;
	// server/zone/objects/creature/trainer/TrainerCreature.idl():  		super.pvpStatusBitmask = 0;
	CreatureObjectImplementation::pvpStatusBitmask = 0;
}

void TrainerCreatureImplementation::activateRecovery() {
}

void TrainerCreatureImplementation::setTrainerID(int id) {
	// server/zone/objects/creature/trainer/TrainerCreature.idl():  		trainerID = id;
	trainerID = id;
}

void TrainerCreatureImplementation::setProfession(Profession* prof) {
	// server/zone/objects/creature/trainer/TrainerCreature.idl():  		profession.setProfession(prof);
	(&profession)->setProfession(prof);
}

int TrainerCreatureImplementation::getTrainerID() {
	// server/zone/objects/creature/trainer/TrainerCreature.idl():  		return trainerID;
	return trainerID;
}

String TrainerCreatureImplementation::getLocation() {
	// server/zone/objects/creature/trainer/TrainerCreature.idl():  		return location;
	return location;
}

void TrainerCreatureImplementation::setLocation(const String& loc) {
	// server/zone/objects/creature/trainer/TrainerCreature.idl():  		location = loc;
	location = loc;
}

bool TrainerCreatureImplementation::isTrainerCreature() {
	// server/zone/objects/creature/trainer/TrainerCreature.idl():  		return true;
	return true;
}

bool TrainerCreatureImplementation::isAttackableBy(CreatureObject* object) {
	// server/zone/objects/creature/trainer/TrainerCreature.idl():  		return false;
	return false;
}

/*
 *	TrainerCreatureAdapter
 */

TrainerCreatureAdapter::TrainerCreatureAdapter(TrainerCreatureImplementation* obj) : CreatureObjectAdapter(obj) {
}

Packet* TrainerCreatureAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_ACTIVATERECOVERY__:
		activateRecovery();
		break;
	case RPC_SENDINITIALMESSAGE__PLAYERCREATURE_:
		sendInitialMessage((PlayerCreature*) inv->getObjectParameter());
		break;
	case RPC_SENDINITIALCHOICES__PLAYERCREATURE_:
		sendInitialChoices((PlayerCreature*) inv->getObjectParameter());
		break;
	case RPC_SENDCONVERSATIONSTARTTO__SCENEOBJECT_:
		sendConversationStartTo((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_SENDSKILLBOXES__PLAYERCREATURE_BOOL_:
		sendSkillBoxes((PlayerCreature*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case RPC_SENDSKILLBOXLIST__PLAYERCREATURE_BOOL_:
		sendSkillBoxList((PlayerCreature*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case RPC_SENDCONFIRMATION__PLAYERCREATURE_:
		sendConfirmation((PlayerCreature*) inv->getObjectParameter());
		break;
	case RPC_SELECTCONVERSATIONOPTION__INT_SCENEOBJECT_:
		selectConversationOption(inv->getSignedIntParameter(), (SceneObject*) inv->getObjectParameter());
		break;
	case RPC_SETTRAINERID__INT_:
		setTrainerID(inv->getSignedIntParameter());
		break;
	case RPC_GETTRAINERID__:
		resp->insertSignedInt(getTrainerID());
		break;
	case RPC_GETLOCATION__:
		resp->insertAscii(getLocation());
		break;
	case RPC_SETLOCATION__STRING_:
		setLocation(inv->getAsciiParameter(_param0_setLocation__String_));
		break;
	case RPC_ISTRAINERCREATURE__:
		resp->insertBoolean(isTrainerCreature());
		break;
	case RPC_ISATTACKABLEBY__CREATUREOBJECT_:
		resp->insertBoolean(isAttackableBy((CreatureObject*) inv->getObjectParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

void TrainerCreatureAdapter::activateRecovery() {
	((TrainerCreatureImplementation*) impl)->activateRecovery();
}

void TrainerCreatureAdapter::sendInitialMessage(PlayerCreature* player) {
	((TrainerCreatureImplementation*) impl)->sendInitialMessage(player);
}

void TrainerCreatureAdapter::sendInitialChoices(PlayerCreature* player) {
	((TrainerCreatureImplementation*) impl)->sendInitialChoices(player);
}

void TrainerCreatureAdapter::sendConversationStartTo(SceneObject* obj) {
	((TrainerCreatureImplementation*) impl)->sendConversationStartTo(obj);
}

void TrainerCreatureAdapter::sendSkillBoxes(PlayerCreature* player, bool checkXp) {
	((TrainerCreatureImplementation*) impl)->sendSkillBoxes(player, checkXp);
}

void TrainerCreatureAdapter::sendSkillBoxList(PlayerCreature* player, bool checkLearned) {
	((TrainerCreatureImplementation*) impl)->sendSkillBoxList(player, checkLearned);
}

void TrainerCreatureAdapter::sendConfirmation(PlayerCreature* player) {
	((TrainerCreatureImplementation*) impl)->sendConfirmation(player);
}

void TrainerCreatureAdapter::selectConversationOption(int option, SceneObject* obj) {
	((TrainerCreatureImplementation*) impl)->selectConversationOption(option, obj);
}

void TrainerCreatureAdapter::setTrainerID(int id) {
	((TrainerCreatureImplementation*) impl)->setTrainerID(id);
}

int TrainerCreatureAdapter::getTrainerID() {
	return ((TrainerCreatureImplementation*) impl)->getTrainerID();
}

String TrainerCreatureAdapter::getLocation() {
	return ((TrainerCreatureImplementation*) impl)->getLocation();
}

void TrainerCreatureAdapter::setLocation(const String& loc) {
	((TrainerCreatureImplementation*) impl)->setLocation(loc);
}

bool TrainerCreatureAdapter::isTrainerCreature() {
	return ((TrainerCreatureImplementation*) impl)->isTrainerCreature();
}

bool TrainerCreatureAdapter::isAttackableBy(CreatureObject* object) {
	return ((TrainerCreatureImplementation*) impl)->isAttackableBy(object);
}

/*
 *	TrainerCreatureHelper
 */

TrainerCreatureHelper* TrainerCreatureHelper::staticInitializer = TrainerCreatureHelper::instance();

TrainerCreatureHelper::TrainerCreatureHelper() {
	className = "TrainerCreature";

	Core::getObjectBroker()->registerClass(className, this);
}

void TrainerCreatureHelper::finalizeHelper() {
	TrainerCreatureHelper::finalize();
}

DistributedObject* TrainerCreatureHelper::instantiateObject() {
	return new TrainerCreature(DummyConstructorParameter::instance());
}

DistributedObjectServant* TrainerCreatureHelper::instantiateServant() {
	return new TrainerCreatureImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* TrainerCreatureHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new TrainerCreatureAdapter((TrainerCreatureImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

