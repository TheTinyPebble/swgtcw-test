/*
 *	server/zone/objects/creature/vendor/VendorCreature.cpp generated by engine3 IDL compiler 0.60
 */

#include "VendorCreature.h"

#include "server/zone/Zone.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/objects/tangible/wearables/WearableObject.h"

/*
 *	VendorCreatureStub
 */

enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 6,RPC_FINALIZE__,RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_,RPC_ISATTACKABLEBY__CREATUREOBJECT_,RPC_ADDCLOTHINGITEM__CREATUREOBJECT_TANGIBLEOBJECT_,RPC_DESTROYOBJECTFROMDATABASE__BOOL_,RPC_CREATECHILDOBJECTS__,RPC_ADDVENDORTOMAP__,RPC_SETOWNERID__LONG_,RPC_ISVENDOR__,RPC_ISVENDORCREATURE__};

VendorCreature::VendorCreature() : CreatureObject(DummyConstructorParameter::instance()) {
	VendorCreatureImplementation* _implementation = new VendorCreatureImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("VendorCreature");
}

VendorCreature::VendorCreature(DummyConstructorParameter* param) : CreatureObject(param) {
	_setClassName("VendorCreature");
}

VendorCreature::~VendorCreature() {
}



void VendorCreature::initializeTransientMembers() {
	VendorCreatureImplementation* _implementation = static_cast<VendorCreatureImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void VendorCreature::loadTemplateData(SharedObjectTemplate* templateData) {
	VendorCreatureImplementation* _implementation = static_cast<VendorCreatureImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->loadTemplateData(templateData);
}

void VendorCreature::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player) {
	VendorCreatureImplementation* _implementation = static_cast<VendorCreatureImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->fillObjectMenuResponse(menuResponse, player);
}

int VendorCreature::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	VendorCreatureImplementation* _implementation = static_cast<VendorCreatureImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->handleObjectMenuSelect(player, selectedID);
}

bool VendorCreature::isAttackableBy(CreatureObject* object) {
	VendorCreatureImplementation* _implementation = static_cast<VendorCreatureImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISATTACKABLEBY__CREATUREOBJECT_);
		method.addObjectParameter(object);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isAttackableBy(object);
}

void VendorCreature::fillAttributeList(AttributeListMessage* msg, CreatureObject* object) {
	VendorCreatureImplementation* _implementation = static_cast<VendorCreatureImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->fillAttributeList(msg, object);
}

void VendorCreature::addClothingItem(CreatureObject* player, TangibleObject* clothing) {
	VendorCreatureImplementation* _implementation = static_cast<VendorCreatureImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDCLOTHINGITEM__CREATUREOBJECT_TANGIBLEOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(clothing);

		method.executeWithVoidReturn();
	} else
		_implementation->addClothingItem(player, clothing);
}

void VendorCreature::destroyObjectFromDatabase(bool destroyContainedObjects) {
	VendorCreatureImplementation* _implementation = static_cast<VendorCreatureImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DESTROYOBJECTFROMDATABASE__BOOL_);
		method.addBooleanParameter(destroyContainedObjects);

		method.executeWithVoidReturn();
	} else
		_implementation->destroyObjectFromDatabase(destroyContainedObjects);
}

void VendorCreature::createChildObjects() {
	VendorCreatureImplementation* _implementation = static_cast<VendorCreatureImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATECHILDOBJECTS__);

		method.executeWithVoidReturn();
	} else
		_implementation->createChildObjects();
}

void VendorCreature::addVendorToMap() {
	VendorCreatureImplementation* _implementation = static_cast<VendorCreatureImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDVENDORTOMAP__);

		method.executeWithVoidReturn();
	} else
		_implementation->addVendorToMap();
}

Vendor* VendorCreature::getVendor() {
	VendorCreatureImplementation* _implementation = static_cast<VendorCreatureImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getVendor();
}

void VendorCreature::setOwnerID(unsigned long long ownerID) {
	VendorCreatureImplementation* _implementation = static_cast<VendorCreatureImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETOWNERID__LONG_);
		method.addUnsignedLongParameter(ownerID);

		method.executeWithVoidReturn();
	} else
		_implementation->setOwnerID(ownerID);
}

bool VendorCreature::isVendor() {
	VendorCreatureImplementation* _implementation = static_cast<VendorCreatureImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISVENDOR__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isVendor();
}

bool VendorCreature::isVendorCreature() {
	VendorCreatureImplementation* _implementation = static_cast<VendorCreatureImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISVENDORCREATURE__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isVendorCreature();
}

DistributedObjectServant* VendorCreature::_getImplementation() {

	_updated = true;
	return _impl;
}

void VendorCreature::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	VendorCreatureImplementation
 */

VendorCreatureImplementation::VendorCreatureImplementation(DummyConstructorParameter* param) : CreatureObjectImplementation(param) {
	_initializeImplementation();
}


VendorCreatureImplementation::~VendorCreatureImplementation() {
	VendorCreatureImplementation::finalize();
}


void VendorCreatureImplementation::_initializeImplementation() {
	_setClassHelper(VendorCreatureHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void VendorCreatureImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<VendorCreature*>(stub);
	CreatureObjectImplementation::_setStub(stub);
}

DistributedObjectStub* VendorCreatureImplementation::_getStub() {
	return _this.get();
}

VendorCreatureImplementation::operator const VendorCreature*() {
	return _this.get();
}

void VendorCreatureImplementation::lock(bool doLock) {
	_this.get()->lock(doLock);
}

void VendorCreatureImplementation::lock(ManagedObject* obj) {
	_this.get()->lock(obj);
}

void VendorCreatureImplementation::rlock(bool doLock) {
	_this.get()->rlock(doLock);
}

void VendorCreatureImplementation::wlock(bool doLock) {
	_this.get()->wlock(doLock);
}

void VendorCreatureImplementation::wlock(ManagedObject* obj) {
	_this.get()->wlock(obj);
}

void VendorCreatureImplementation::unlock(bool doLock) {
	_this.get()->unlock(doLock);
}

void VendorCreatureImplementation::runlock(bool doLock) {
	_this.get()->runlock(doLock);
}

void VendorCreatureImplementation::_serializationHelperMethod() {
	CreatureObjectImplementation::_serializationHelperMethod();

	_setClassName("VendorCreature");

}

void VendorCreatureImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(VendorCreatureImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool VendorCreatureImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (CreatureObjectImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "VendorCreature.vendor") {
		TypeInfo<Vendor >::parseFromBinaryStream(&vendor, stream);
		return true;
	}


	return false;
}

void VendorCreatureImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = VendorCreatureImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int VendorCreatureImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = CreatureObjectImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;
	_name = "VendorCreature.vendor";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vendor >::toBinaryStream(&vendor, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 1;
}

VendorCreatureImplementation::VendorCreatureImplementation() {
	_initializeImplementation();
	// server/zone/objects/creature/vendor/VendorCreature.idl():  		Logger.setLoggingName("VendorCreature");
	Logger::setLoggingName("VendorCreature");
	// server/zone/objects/creature/vendor/VendorCreature.idl():  		super.getContainerPermissions().setInheritPermissionsFromParent(true);
	CreatureObjectImplementation::getContainerPermissions()->setInheritPermissionsFromParent(true);
	// server/zone/objects/creature/vendor/VendorCreature.idl():  		ContainerPermissions permissions = super.getContainerPermissions();
	ContainerPermissions* permissions = CreatureObjectImplementation::getContainerPermissions();
	// server/zone/objects/creature/vendor/VendorCreature.idl():  		permissions.clearDefaultDenyPermission(ContainerPermissions.MOVECONTAINER);
	permissions->clearDefaultDenyPermission(ContainerPermissions::MOVECONTAINER);
	// server/zone/objects/creature/vendor/VendorCreature.idl():  		permissions.clearDenyPermission("owner", ContainerPermissions.MOVECONTAINER);
	permissions->clearDenyPermission("owner", ContainerPermissions::MOVECONTAINER);
}

bool VendorCreatureImplementation::isAttackableBy(CreatureObject* object) {
	// server/zone/objects/creature/vendor/VendorCreature.idl():  		return false;
	return false;
}

Vendor* VendorCreatureImplementation::getVendor() {
	// server/zone/objects/creature/vendor/VendorCreature.idl():  		return vendor;
	return (&vendor);
}

void VendorCreatureImplementation::setOwnerID(unsigned long long ownerID) {
	// server/zone/objects/creature/vendor/VendorCreature.idl():  		vendor.setOwnerID(ownerID);
	(&vendor)->setOwnerID(ownerID);
}

bool VendorCreatureImplementation::isVendor() {
	// server/zone/objects/creature/vendor/VendorCreature.idl():  		return true;
	return true;
}

bool VendorCreatureImplementation::isVendorCreature() {
	// server/zone/objects/creature/vendor/VendorCreature.idl():  		return true;
	return true;
}

/*
 *	VendorCreatureAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


VendorCreatureAdapter::VendorCreatureAdapter(VendorCreature* obj) : CreatureObjectAdapter(obj) {
}

void VendorCreatureAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			initializeTransientMembers();
		}
		break;
	case RPC_FINALIZE__:
		{
			finalize();
		}
		break;
	case RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_:
		{
			resp->insertSignedInt(handleObjectMenuSelect(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getByteParameter()));
		}
		break;
	case RPC_ISATTACKABLEBY__CREATUREOBJECT_:
		{
			resp->insertBoolean(isAttackableBy(static_cast<CreatureObject*>(inv->getObjectParameter())));
		}
		break;
	case RPC_ADDCLOTHINGITEM__CREATUREOBJECT_TANGIBLEOBJECT_:
		{
			addClothingItem(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<TangibleObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_DESTROYOBJECTFROMDATABASE__BOOL_:
		{
			destroyObjectFromDatabase(inv->getBooleanParameter());
		}
		break;
	case RPC_CREATECHILDOBJECTS__:
		{
			createChildObjects();
		}
		break;
	case RPC_ADDVENDORTOMAP__:
		{
			addVendorToMap();
		}
		break;
	case RPC_SETOWNERID__LONG_:
		{
			setOwnerID(inv->getUnsignedLongParameter());
		}
		break;
	case RPC_ISVENDOR__:
		{
			resp->insertBoolean(isVendor());
		}
		break;
	case RPC_ISVENDORCREATURE__:
		{
			resp->insertBoolean(isVendorCreature());
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void VendorCreatureAdapter::initializeTransientMembers() {
	(static_cast<VendorCreature*>(stub))->initializeTransientMembers();
}

void VendorCreatureAdapter::finalize() {
	(static_cast<VendorCreature*>(stub))->finalize();
}

int VendorCreatureAdapter::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	return (static_cast<VendorCreature*>(stub))->handleObjectMenuSelect(player, selectedID);
}

bool VendorCreatureAdapter::isAttackableBy(CreatureObject* object) {
	return (static_cast<VendorCreature*>(stub))->isAttackableBy(object);
}

void VendorCreatureAdapter::addClothingItem(CreatureObject* player, TangibleObject* clothing) {
	(static_cast<VendorCreature*>(stub))->addClothingItem(player, clothing);
}

void VendorCreatureAdapter::destroyObjectFromDatabase(bool destroyContainedObjects) {
	(static_cast<VendorCreature*>(stub))->destroyObjectFromDatabase(destroyContainedObjects);
}

void VendorCreatureAdapter::createChildObjects() {
	(static_cast<VendorCreature*>(stub))->createChildObjects();
}

void VendorCreatureAdapter::addVendorToMap() {
	(static_cast<VendorCreature*>(stub))->addVendorToMap();
}

void VendorCreatureAdapter::setOwnerID(unsigned long long ownerID) {
	(static_cast<VendorCreature*>(stub))->setOwnerID(ownerID);
}

bool VendorCreatureAdapter::isVendor() {
	return (static_cast<VendorCreature*>(stub))->isVendor();
}

bool VendorCreatureAdapter::isVendorCreature() {
	return (static_cast<VendorCreature*>(stub))->isVendorCreature();
}

/*
 *	VendorCreatureHelper
 */

VendorCreatureHelper* VendorCreatureHelper::staticInitializer = VendorCreatureHelper::instance();

VendorCreatureHelper::VendorCreatureHelper() {
	className = "VendorCreature";

	Core::getObjectBroker()->registerClass(className, this);
}

void VendorCreatureHelper::finalizeHelper() {
	VendorCreatureHelper::finalize();
}

DistributedObject* VendorCreatureHelper::instantiateObject() {
	return new VendorCreature(DummyConstructorParameter::instance());
}

DistributedObjectServant* VendorCreatureHelper::instantiateServant() {
	return new VendorCreatureImplementation();
}

DistributedObjectAdapter* VendorCreatureHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new VendorCreatureAdapter(static_cast<VendorCreature*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

