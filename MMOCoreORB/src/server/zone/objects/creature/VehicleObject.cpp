/*
 *	server/zone/objects/creature/VehicleObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "VehicleObject.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/intangible/VehicleControlDevice.h"

#include "server/zone/Zone.h"

#include "server/zone/templates/SharedObjectTemplate.h"

/*
 *	VehicleObjectStub
 */

VehicleObject::VehicleObject() : CreatureObject(DummyConstructorParameter::instance()) {
	VehicleObjectImplementation* _implementation = new VehicleObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

VehicleObject::VehicleObject(DummyConstructorParameter* param) : CreatureObject(param) {
}

VehicleObject::~VehicleObject() {
}


void VehicleObject::loadTemplateData(SharedObjectTemplate* templateData) {
	VehicleObjectImplementation* _implementation = (VehicleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->loadTemplateData(templateData);
}

void VehicleObject::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player) {
	VehicleObjectImplementation* _implementation = (VehicleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->fillObjectMenuResponse(menuResponse, player);
}

bool VehicleObject::checkInRangeGarage() {
	VehicleObjectImplementation* _implementation = (VehicleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->checkInRangeGarage();
}

void VehicleObject::insertToZone(Zone* zone) {
	VehicleObjectImplementation* _implementation = (VehicleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(zone);

		method.executeWithVoidReturn();
	} else
		_implementation->insertToZone(zone);
}

void VehicleObject::setPosture(int newPosture, bool notifyClient) {
	VehicleObjectImplementation* _implementation = (VehicleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addSignedIntParameter(newPosture);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setPosture(newPosture, notifyClient);
}

int VehicleObject::inflictDamage(TangibleObject* attacker, int damageType, int damage, bool destroy, bool notifyClient) {
	VehicleObjectImplementation* _implementation = (VehicleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(attacker);
		method.addSignedIntParameter(damageType);
		method.addSignedIntParameter(damage);
		method.addBooleanParameter(destroy);
		method.addBooleanParameter(notifyClient);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->inflictDamage(attacker, damageType, damage, destroy, notifyClient);
}

int VehicleObject::healDamage(TangibleObject* healer, int damageType, int damageToHeal, bool notifyClient) {
	VehicleObjectImplementation* _implementation = (VehicleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(healer);
		method.addSignedIntParameter(damageType);
		method.addSignedIntParameter(damageToHeal);
		method.addBooleanParameter(notifyClient);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->healDamage(healer, damageType, damageToHeal, notifyClient);
}

void VehicleObject::addDefender(SceneObject* defender) {
	VehicleObjectImplementation* _implementation = (VehicleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addObjectParameter(defender);

		method.executeWithVoidReturn();
	} else
		_implementation->addDefender(defender);
}

void VehicleObject::removeDefender(SceneObject* defender) {
	VehicleObjectImplementation* _implementation = (VehicleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addObjectParameter(defender);

		method.executeWithVoidReturn();
	} else
		_implementation->removeDefender(defender);
}

void VehicleObject::setDefender(SceneObject* defender) {
	VehicleObjectImplementation* _implementation = (VehicleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addObjectParameter(defender);

		method.executeWithVoidReturn();
	} else
		_implementation->setDefender(defender);
}

bool VehicleObject::isAttackableBy(CreatureObject* object) {
	VehicleObjectImplementation* _implementation = (VehicleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addObjectParameter(object);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isAttackableBy(object);
}

int VehicleObject::notifyObjectDestructionObservers(TangibleObject* attacker, int condition) {
	VehicleObjectImplementation* _implementation = (VehicleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addObjectParameter(attacker);
		method.addSignedIntParameter(condition);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyObjectDestructionObservers(attacker, condition);
}

int VehicleObject::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	VehicleObjectImplementation* _implementation = (VehicleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->handleObjectMenuSelect(player, selectedID);
}

void VehicleObject::repairVehicle(PlayerCreature* player) {
	VehicleObjectImplementation* _implementation = (VehicleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->repairVehicle(player);
}

int VehicleObject::calculateRepairCost(PlayerCreature* player) {
	VehicleObjectImplementation* _implementation = (VehicleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->calculateRepairCost(player);
}

void VehicleObject::sendRepairConfirmTo(PlayerCreature* player) {
	VehicleObjectImplementation* _implementation = (VehicleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendRepairConfirmTo(player);
}

bool VehicleObject::isVehicleObject() {
	VehicleObjectImplementation* _implementation = (VehicleObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isVehicleObject();
}

DistributedObjectServant* VehicleObject::_getImplementation() {

	_updated = true;
	return _impl;
}

void VehicleObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	VehicleObjectImplementation
 */

VehicleObjectImplementation::VehicleObjectImplementation(DummyConstructorParameter* param) : CreatureObjectImplementation(param) {
	_initializeImplementation();
}


VehicleObjectImplementation::~VehicleObjectImplementation() {
}


void VehicleObjectImplementation::finalize() {
}

void VehicleObjectImplementation::_initializeImplementation() {
	_setClassHelper(VehicleObjectHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void VehicleObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (VehicleObject*) stub;
	CreatureObjectImplementation::_setStub(stub);
}

DistributedObjectStub* VehicleObjectImplementation::_getStub() {
	return _this;
}

VehicleObjectImplementation::operator const VehicleObject*() {
	return _this;
}

void VehicleObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void VehicleObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void VehicleObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void VehicleObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void VehicleObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void VehicleObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void VehicleObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void VehicleObjectImplementation::_serializationHelperMethod() {
	CreatureObjectImplementation::_serializationHelperMethod();

	_setClassName("VehicleObject");

}

void VehicleObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(VehicleObjectImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool VehicleObjectImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (CreatureObjectImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "vehicleType") {
		TypeInfo<int >::parseFromBinaryStream(&vehicleType, stream);
		return true;
	}


	return false;
}

void VehicleObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = VehicleObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int VehicleObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "vehicleType";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&vehicleType, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 1 + CreatureObjectImplementation::writeObjectMembers(stream);
}

VehicleObjectImplementation::VehicleObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/creature/VehicleObject.idl():  		vehicleType = SceneObject.HOVERVEHICLE;
	vehicleType = SceneObject::HOVERVEHICLE;
	// server/zone/objects/creature/VehicleObject.idl():  		Logger.setLoggingName("VehicleObject");
	Logger::setLoggingName("VehicleObject");
	// server/zone/objects/creature/VehicleObject.idl():  		Logger.setLogging(false);
	Logger::setLogging(false);
	// server/zone/objects/creature/VehicleObject.idl():  		Logger.setGlobalLogging(true);
	Logger::setGlobalLogging(true);
}

void VehicleObjectImplementation::loadTemplateData(SharedObjectTemplate* templateData) {
	// server/zone/objects/creature/VehicleObject.idl():  		super.loadTemplateData(templateData);
	CreatureObjectImplementation::loadTemplateData(templateData);
	// server/zone/objects/creature/VehicleObject.idl():  		super.optionsBitmask = 0x1080;
	CreatureObjectImplementation::optionsBitmask = 0x1080;
	// server/zone/objects/creature/VehicleObject.idl():  		super.pvpStatusBitmask = 0;
	CreatureObjectImplementation::pvpStatusBitmask = 0;
}

void VehicleObjectImplementation::setPosture(int newPosture, bool notifyClient) {
	// server/zone/objects/creature/VehicleObject.idl():  		return;
	return;
}

void VehicleObjectImplementation::addDefender(SceneObject* defender) {
}

void VehicleObjectImplementation::removeDefender(SceneObject* defender) {
}

void VehicleObjectImplementation::setDefender(SceneObject* defender) {
}

bool VehicleObjectImplementation::isAttackableBy(CreatureObject* object) {
	// server/zone/objects/creature/VehicleObject.idl():  		return 
	if (CreatureObjectImplementation::linkedCreature.getForUpdate() == NULL)	// server/zone/objects/creature/VehicleObject.idl():  			return false;
	return false;
	// server/zone/objects/creature/VehicleObject.idl():  		return super.linkedCreature.isAttackableBy(object);
	return CreatureObjectImplementation::linkedCreature.getForUpdate()->isAttackableBy(object);
}

bool VehicleObjectImplementation::isVehicleObject() {
	// server/zone/objects/creature/VehicleObject.idl():  		return true;
	return true;
}

/*
 *	VehicleObjectAdapter
 */

VehicleObjectAdapter::VehicleObjectAdapter(VehicleObjectImplementation* obj) : CreatureObjectAdapter(obj) {
}

enum {RPC_CHECKINRANGEGARAGE__,RPC_INSERTTOZONE__ZONE_,RPC_SETPOSTURE__INT_BOOL_,RPC_INFLICTDAMAGE__TANGIBLEOBJECT_INT_INT_BOOL_BOOL_,RPC_HEALDAMAGE__TANGIBLEOBJECT_INT_INT_BOOL_,RPC_ADDDEFENDER__SCENEOBJECT_,RPC_REMOVEDEFENDER__SCENEOBJECT_,RPC_SETDEFENDER__SCENEOBJECT_,RPC_ISATTACKABLEBY__CREATUREOBJECT_,RPC_NOTIFYOBJECTDESTRUCTIONOBSERVERS__TANGIBLEOBJECT_INT_,RPC_HANDLEOBJECTMENUSELECT__PLAYERCREATURE_BYTE_,RPC_REPAIRVEHICLE__PLAYERCREATURE_,RPC_CALCULATEREPAIRCOST__PLAYERCREATURE_,RPC_SENDREPAIRCONFIRMTO__PLAYERCREATURE_,RPC_ISVEHICLEOBJECT__};

Packet* VehicleObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_CHECKINRANGEGARAGE__:
		resp->insertBoolean(checkInRangeGarage());
		break;
	case RPC_INSERTTOZONE__ZONE_:
		insertToZone((Zone*) inv->getObjectParameter());
		break;
	case RPC_SETPOSTURE__INT_BOOL_:
		setPosture(inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case RPC_INFLICTDAMAGE__TANGIBLEOBJECT_INT_INT_BOOL_BOOL_:
		resp->insertSignedInt(inflictDamage((TangibleObject*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter(), inv->getBooleanParameter()));
		break;
	case RPC_HEALDAMAGE__TANGIBLEOBJECT_INT_INT_BOOL_:
		resp->insertSignedInt(healDamage((TangibleObject*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter()));
		break;
	case RPC_ADDDEFENDER__SCENEOBJECT_:
		addDefender((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_REMOVEDEFENDER__SCENEOBJECT_:
		removeDefender((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_SETDEFENDER__SCENEOBJECT_:
		setDefender((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_ISATTACKABLEBY__CREATUREOBJECT_:
		resp->insertBoolean(isAttackableBy((CreatureObject*) inv->getObjectParameter()));
		break;
	case RPC_NOTIFYOBJECTDESTRUCTIONOBSERVERS__TANGIBLEOBJECT_INT_:
		resp->insertSignedInt(notifyObjectDestructionObservers((TangibleObject*) inv->getObjectParameter(), inv->getSignedIntParameter()));
		break;
	case RPC_HANDLEOBJECTMENUSELECT__PLAYERCREATURE_BYTE_:
		resp->insertSignedInt(handleObjectMenuSelect((PlayerCreature*) inv->getObjectParameter(), inv->getByteParameter()));
		break;
	case RPC_REPAIRVEHICLE__PLAYERCREATURE_:
		repairVehicle((PlayerCreature*) inv->getObjectParameter());
		break;
	case RPC_CALCULATEREPAIRCOST__PLAYERCREATURE_:
		resp->insertSignedInt(calculateRepairCost((PlayerCreature*) inv->getObjectParameter()));
		break;
	case RPC_SENDREPAIRCONFIRMTO__PLAYERCREATURE_:
		sendRepairConfirmTo((PlayerCreature*) inv->getObjectParameter());
		break;
	case RPC_ISVEHICLEOBJECT__:
		resp->insertBoolean(isVehicleObject());
		break;
	default:
		return NULL;
	}

	return resp;
}

bool VehicleObjectAdapter::checkInRangeGarage() {
	return ((VehicleObjectImplementation*) impl)->checkInRangeGarage();
}

void VehicleObjectAdapter::insertToZone(Zone* zone) {
	((VehicleObjectImplementation*) impl)->insertToZone(zone);
}

void VehicleObjectAdapter::setPosture(int newPosture, bool notifyClient) {
	((VehicleObjectImplementation*) impl)->setPosture(newPosture, notifyClient);
}

int VehicleObjectAdapter::inflictDamage(TangibleObject* attacker, int damageType, int damage, bool destroy, bool notifyClient) {
	return ((VehicleObjectImplementation*) impl)->inflictDamage(attacker, damageType, damage, destroy, notifyClient);
}

int VehicleObjectAdapter::healDamage(TangibleObject* healer, int damageType, int damageToHeal, bool notifyClient) {
	return ((VehicleObjectImplementation*) impl)->healDamage(healer, damageType, damageToHeal, notifyClient);
}

void VehicleObjectAdapter::addDefender(SceneObject* defender) {
	((VehicleObjectImplementation*) impl)->addDefender(defender);
}

void VehicleObjectAdapter::removeDefender(SceneObject* defender) {
	((VehicleObjectImplementation*) impl)->removeDefender(defender);
}

void VehicleObjectAdapter::setDefender(SceneObject* defender) {
	((VehicleObjectImplementation*) impl)->setDefender(defender);
}

bool VehicleObjectAdapter::isAttackableBy(CreatureObject* object) {
	return ((VehicleObjectImplementation*) impl)->isAttackableBy(object);
}

int VehicleObjectAdapter::notifyObjectDestructionObservers(TangibleObject* attacker, int condition) {
	return ((VehicleObjectImplementation*) impl)->notifyObjectDestructionObservers(attacker, condition);
}

int VehicleObjectAdapter::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	return ((VehicleObjectImplementation*) impl)->handleObjectMenuSelect(player, selectedID);
}

void VehicleObjectAdapter::repairVehicle(PlayerCreature* player) {
	((VehicleObjectImplementation*) impl)->repairVehicle(player);
}

int VehicleObjectAdapter::calculateRepairCost(PlayerCreature* player) {
	return ((VehicleObjectImplementation*) impl)->calculateRepairCost(player);
}

void VehicleObjectAdapter::sendRepairConfirmTo(PlayerCreature* player) {
	((VehicleObjectImplementation*) impl)->sendRepairConfirmTo(player);
}

bool VehicleObjectAdapter::isVehicleObject() {
	return ((VehicleObjectImplementation*) impl)->isVehicleObject();
}

/*
 *	VehicleObjectHelper
 */

VehicleObjectHelper* VehicleObjectHelper::staticInitializer = VehicleObjectHelper::instance();

VehicleObjectHelper::VehicleObjectHelper() {
	className = "VehicleObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void VehicleObjectHelper::finalizeHelper() {
	VehicleObjectHelper::finalize();
}

DistributedObject* VehicleObjectHelper::instantiateObject() {
	return new VehicleObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* VehicleObjectHelper::instantiateServant() {
	return new VehicleObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* VehicleObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new VehicleObjectAdapter((VehicleObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

