/*
 *	server/zone/objects/creature/buffs/StateBuff.cpp generated by engine3 IDL compiler 0.60
 */

#include "StateBuff.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	StateBuffStub
 */

enum {RPC_ACTIVATE__BOOL_ = 6,RPC_DEACTIVATE__BOOL_};

StateBuff::StateBuff(CreatureObject* creo, unsigned long long buffState, int duration) : Buff(DummyConstructorParameter::instance()) {
	StateBuffImplementation* _implementation = new StateBuffImplementation(creo, buffState, duration);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("StateBuff");
}

StateBuff::StateBuff(DummyConstructorParameter* param) : Buff(param) {
	_setClassName("StateBuff");
}

StateBuff::~StateBuff() {
}



void StateBuff::activate(bool applyModifiers) {
	StateBuffImplementation* _implementation = static_cast<StateBuffImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ACTIVATE__BOOL_);
		method.addBooleanParameter(applyModifiers);

		method.executeWithVoidReturn();
	} else
		_implementation->activate(applyModifiers);
}

void StateBuff::deactivate(bool removeModifiers) {
	StateBuffImplementation* _implementation = static_cast<StateBuffImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DEACTIVATE__BOOL_);
		method.addBooleanParameter(removeModifiers);

		method.executeWithVoidReturn();
	} else
		_implementation->deactivate(removeModifiers);
}

DistributedObjectServant* StateBuff::_getImplementation() {

	_updated = true;
	return _impl;
}

void StateBuff::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	StateBuffImplementation
 */

StateBuffImplementation::StateBuffImplementation(DummyConstructorParameter* param) : BuffImplementation(param) {
	_initializeImplementation();
}


StateBuffImplementation::~StateBuffImplementation() {
}


void StateBuffImplementation::finalize() {
}

void StateBuffImplementation::_initializeImplementation() {
	_setClassHelper(StateBuffHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void StateBuffImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<StateBuff*>(stub);
	BuffImplementation::_setStub(stub);
}

DistributedObjectStub* StateBuffImplementation::_getStub() {
	return _this;
}

StateBuffImplementation::operator const StateBuff*() {
	return _this;
}

void StateBuffImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void StateBuffImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void StateBuffImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void StateBuffImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void StateBuffImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void StateBuffImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void StateBuffImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void StateBuffImplementation::_serializationHelperMethod() {
	BuffImplementation::_serializationHelperMethod();

	_setClassName("StateBuff");

}

void StateBuffImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(StateBuffImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool StateBuffImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (BuffImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "StateBuff.stateApplied") {
		TypeInfo<unsigned long long >::parseFromBinaryStream(&stateApplied, stream);
		return true;
	}


	return false;
}

void StateBuffImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = StateBuffImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int StateBuffImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = BuffImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;
	_name = "StateBuff.stateApplied";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&stateApplied, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 1;
}

StateBuffImplementation::StateBuffImplementation(CreatureObject* creo, unsigned long long buffState, int duration) : BuffImplementation(creo, Long::hashCode(buffState), duration, BuffType::STATE) {
	_initializeImplementation();
	// server/zone/objects/creature/buffs/StateBuff.idl():  		stateApplied = buffState;
	stateApplied = buffState;
}

void StateBuffImplementation::activate(bool applyModifiers) {
	// server/zone/objects/creature/buffs/StateBuff.idl():  		super.activate(applyModifiers);
	BuffImplementation::activate(applyModifiers);
	// server/zone/objects/creature/buffs/StateBuff.idl():  		super.creature.setState(stateApplied);
	BuffImplementation::creature.getForUpdate()->setState(stateApplied);
}

void StateBuffImplementation::deactivate(bool removeModifiers) {
	// server/zone/objects/creature/buffs/StateBuff.idl():  		super.deactivate(removeModifiers);
	BuffImplementation::deactivate(removeModifiers);
	// server/zone/objects/creature/buffs/StateBuff.idl():  		super.creature.clearState(stateApplied);
	BuffImplementation::creature.getForUpdate()->clearState(stateApplied);
}

/*
 *	StateBuffAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


StateBuffAdapter::StateBuffAdapter(StateBuff* obj) : BuffAdapter(obj) {
}

void StateBuffAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_ACTIVATE__BOOL_:
		{
			activate(inv->getBooleanParameter());
		}
		break;
	case RPC_DEACTIVATE__BOOL_:
		{
			deactivate(inv->getBooleanParameter());
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void StateBuffAdapter::activate(bool applyModifiers) {
	(static_cast<StateBuff*>(stub))->activate(applyModifiers);
}

void StateBuffAdapter::deactivate(bool removeModifiers) {
	(static_cast<StateBuff*>(stub))->deactivate(removeModifiers);
}

/*
 *	StateBuffHelper
 */

StateBuffHelper* StateBuffHelper::staticInitializer = StateBuffHelper::instance();

StateBuffHelper::StateBuffHelper() {
	className = "StateBuff";

	Core::getObjectBroker()->registerClass(className, this);
}

void StateBuffHelper::finalizeHelper() {
	StateBuffHelper::finalize();
}

DistributedObject* StateBuffHelper::instantiateObject() {
	return new StateBuff(DummyConstructorParameter::instance());
}

DistributedObjectServant* StateBuffHelper::instantiateServant() {
	return new StateBuffImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* StateBuffHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new StateBuffAdapter(static_cast<StateBuff*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

