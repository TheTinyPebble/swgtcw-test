/*
 *	server/zone/objects/creature/buffs/SingleUseBuffObserver.cpp generated by engine3 IDL compiler 0.60
 */

#include "SingleUseBuffObserver.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/creature/buffs/SingleUseBuff.h"

/*
 *	SingleUseBuffObserverStub
 */

enum {RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_ = 6};

SingleUseBuffObserver::SingleUseBuffObserver(SingleUseBuff* b) : Observer(DummyConstructorParameter::instance()) {
	SingleUseBuffObserverImplementation* _implementation = new SingleUseBuffObserverImplementation(b);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("SingleUseBuffObserver");
}

SingleUseBuffObserver::SingleUseBuffObserver(DummyConstructorParameter* param) : Observer(param) {
	_setClassName("SingleUseBuffObserver");
}

SingleUseBuffObserver::~SingleUseBuffObserver() {
}



int SingleUseBuffObserver::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	SingleUseBuffObserverImplementation* _implementation = static_cast<SingleUseBuffObserverImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(observable);
		method.addObjectParameter(arg1);
		method.addSignedLongParameter(arg2);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyObserverEvent(eventType, observable, arg1, arg2);
}

DistributedObjectServant* SingleUseBuffObserver::_getImplementation() {

	_updated = true;
	return _impl;
}

void SingleUseBuffObserver::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	SingleUseBuffObserverImplementation
 */

SingleUseBuffObserverImplementation::SingleUseBuffObserverImplementation(DummyConstructorParameter* param) : ObserverImplementation(param) {
	_initializeImplementation();
}


SingleUseBuffObserverImplementation::~SingleUseBuffObserverImplementation() {
}


void SingleUseBuffObserverImplementation::finalize() {
}

void SingleUseBuffObserverImplementation::_initializeImplementation() {
	_setClassHelper(SingleUseBuffObserverHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void SingleUseBuffObserverImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<SingleUseBuffObserver*>(stub);
	ObserverImplementation::_setStub(stub);
}

DistributedObjectStub* SingleUseBuffObserverImplementation::_getStub() {
	return _this.get();
}

SingleUseBuffObserverImplementation::operator const SingleUseBuffObserver*() {
	return _this.get();
}

void SingleUseBuffObserverImplementation::lock(bool doLock) {
	_this.get()->lock(doLock);
}

void SingleUseBuffObserverImplementation::lock(ManagedObject* obj) {
	_this.get()->lock(obj);
}

void SingleUseBuffObserverImplementation::rlock(bool doLock) {
	_this.get()->rlock(doLock);
}

void SingleUseBuffObserverImplementation::wlock(bool doLock) {
	_this.get()->wlock(doLock);
}

void SingleUseBuffObserverImplementation::wlock(ManagedObject* obj) {
	_this.get()->wlock(obj);
}

void SingleUseBuffObserverImplementation::unlock(bool doLock) {
	_this.get()->unlock(doLock);
}

void SingleUseBuffObserverImplementation::runlock(bool doLock) {
	_this.get()->runlock(doLock);
}

void SingleUseBuffObserverImplementation::_serializationHelperMethod() {
	ObserverImplementation::_serializationHelperMethod();

	_setClassName("SingleUseBuffObserver");

}

void SingleUseBuffObserverImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(SingleUseBuffObserverImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool SingleUseBuffObserverImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ObserverImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "SingleUseBuffObserver.buff") {
		TypeInfo<ManagedWeakReference<SingleUseBuff* > >::parseFromBinaryStream(&buff, stream);
		return true;
	}


	return false;
}

void SingleUseBuffObserverImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = SingleUseBuffObserverImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int SingleUseBuffObserverImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ObserverImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;
	_name = "SingleUseBuffObserver.buff";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<SingleUseBuff* > >::toBinaryStream(&buff, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 1;
}

SingleUseBuffObserverImplementation::SingleUseBuffObserverImplementation(SingleUseBuff* b) {
	_initializeImplementation();
	// server/zone/objects/creature/buffs/SingleUseBuffObserver.idl():  		buff = b;
	buff = b;
}

/*
 *	SingleUseBuffObserverAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


SingleUseBuffObserverAdapter::SingleUseBuffObserverAdapter(SingleUseBuffObserver* obj) : ObserverAdapter(obj) {
}

void SingleUseBuffObserverAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_:
		{
			resp->insertSignedInt(notifyObserverEvent(inv->getUnsignedIntParameter(), static_cast<Observable*>(inv->getObjectParameter()), static_cast<ManagedObject*>(inv->getObjectParameter()), inv->getSignedLongParameter()));
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

int SingleUseBuffObserverAdapter::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	return (static_cast<SingleUseBuffObserver*>(stub))->notifyObserverEvent(eventType, observable, arg1, arg2);
}

/*
 *	SingleUseBuffObserverHelper
 */

SingleUseBuffObserverHelper* SingleUseBuffObserverHelper::staticInitializer = SingleUseBuffObserverHelper::instance();

SingleUseBuffObserverHelper::SingleUseBuffObserverHelper() {
	className = "SingleUseBuffObserver";

	Core::getObjectBroker()->registerClass(className, this);
}

void SingleUseBuffObserverHelper::finalizeHelper() {
	SingleUseBuffObserverHelper::finalize();
}

DistributedObject* SingleUseBuffObserverHelper::instantiateObject() {
	return new SingleUseBuffObserver(DummyConstructorParameter::instance());
}

DistributedObjectServant* SingleUseBuffObserverHelper::instantiateServant() {
	return new SingleUseBuffObserverImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* SingleUseBuffObserverHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SingleUseBuffObserverAdapter(static_cast<SingleUseBuffObserver*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

