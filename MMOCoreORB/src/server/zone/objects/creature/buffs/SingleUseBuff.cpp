/*
 *	server/zone/objects/creature/buffs/SingleUseBuff.cpp generated by engine3 IDL compiler 0.60
 */

#include "SingleUseBuff.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/creature/buffs/BuffDurationEvent.h"

#include "server/zone/objects/creature/buffs/SingleUseBuffObserver.h"

/*
 *	SingleUseBuffStub
 */

enum {RPC_GETCOMMANDCRC__,RPC_GETPLAYER__,RPC_ACTIVATE__,RPC_DEACTIVATE__,};

SingleUseBuff::SingleUseBuff(CreatureObject* creo, unsigned int buffcrc, float duration, int bufftype, unsigned int comCRC) : Buff(DummyConstructorParameter::instance()) {
	SingleUseBuffImplementation* _implementation = new SingleUseBuffImplementation(creo, buffcrc, duration, bufftype, comCRC);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("SingleUseBuff");
}

SingleUseBuff::SingleUseBuff(DummyConstructorParameter* param) : Buff(param) {
	_setClassName("SingleUseBuff");
}

SingleUseBuff::~SingleUseBuff() {
}



void SingleUseBuff::init(Vector<unsigned int>* events) {
	SingleUseBuffImplementation* _implementation = static_cast<SingleUseBuffImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->init(events);
}

unsigned int SingleUseBuff::getCommandCRC() {
	SingleUseBuffImplementation* _implementation = static_cast<SingleUseBuffImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCOMMANDCRC__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getCommandCRC();
}

CreatureObject* SingleUseBuff::getPlayer() {
	SingleUseBuffImplementation* _implementation = static_cast<SingleUseBuffImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPLAYER__);

		return static_cast<CreatureObject*>(method.executeWithObjectReturn());
	} else
		return _implementation->getPlayer();
}

void SingleUseBuff::activate() {
	SingleUseBuffImplementation* _implementation = static_cast<SingleUseBuffImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ACTIVATE__);

		method.executeWithVoidReturn();
	} else
		_implementation->activate();
}

void SingleUseBuff::deactivate() {
	SingleUseBuffImplementation* _implementation = static_cast<SingleUseBuffImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DEACTIVATE__);

		method.executeWithVoidReturn();
	} else
		_implementation->deactivate();
}

DistributedObjectServant* SingleUseBuff::_getImplementation() {

	_updated = true;
	return _impl;
}

void SingleUseBuff::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	SingleUseBuffImplementation
 */

SingleUseBuffImplementation::SingleUseBuffImplementation(DummyConstructorParameter* param) : BuffImplementation(param) {
	_initializeImplementation();
}


SingleUseBuffImplementation::~SingleUseBuffImplementation() {
}


void SingleUseBuffImplementation::finalize() {
}

void SingleUseBuffImplementation::_initializeImplementation() {
	_setClassHelper(SingleUseBuffHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void SingleUseBuffImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<SingleUseBuff*>(stub);
	BuffImplementation::_setStub(stub);
}

DistributedObjectStub* SingleUseBuffImplementation::_getStub() {
	return _this.get();
}

SingleUseBuffImplementation::operator const SingleUseBuff*() {
	return _this.get();
}

void SingleUseBuffImplementation::lock(bool doLock) {
	_this.get()->lock(doLock);
}

void SingleUseBuffImplementation::lock(ManagedObject* obj) {
	_this.get()->lock(obj);
}

void SingleUseBuffImplementation::rlock(bool doLock) {
	_this.get()->rlock(doLock);
}

void SingleUseBuffImplementation::wlock(bool doLock) {
	_this.get()->wlock(doLock);
}

void SingleUseBuffImplementation::wlock(ManagedObject* obj) {
	_this.get()->wlock(obj);
}

void SingleUseBuffImplementation::unlock(bool doLock) {
	_this.get()->unlock(doLock);
}

void SingleUseBuffImplementation::runlock(bool doLock) {
	_this.get()->runlock(doLock);
}

void SingleUseBuffImplementation::_serializationHelperMethod() {
	BuffImplementation::_serializationHelperMethod();

	_setClassName("SingleUseBuff");

}

void SingleUseBuffImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(SingleUseBuffImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool SingleUseBuffImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (BuffImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "SingleUseBuff.observer") {
		TypeInfo<ManagedReference<SingleUseBuffObserver* > >::parseFromBinaryStream(&observer, stream);
		return true;
	}

	if (_name == "SingleUseBuff.player") {
		TypeInfo<ManagedReference<CreatureObject* > >::parseFromBinaryStream(&player, stream);
		return true;
	}

	if (_name == "SingleUseBuff.commandCRC") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&commandCRC, stream);
		return true;
	}

	if (_name == "SingleUseBuff.eventTypes") {
		TypeInfo<Vector<unsigned int> >::parseFromBinaryStream(&eventTypes, stream);
		return true;
	}


	return false;
}

void SingleUseBuffImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = SingleUseBuffImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int SingleUseBuffImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = BuffImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;
	_name = "SingleUseBuff.observer";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<SingleUseBuffObserver* > >::toBinaryStream(&observer, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SingleUseBuff.player";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<CreatureObject* > >::toBinaryStream(&player, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SingleUseBuff.commandCRC";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&commandCRC, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "SingleUseBuff.eventTypes";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<unsigned int> >::toBinaryStream(&eventTypes, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 4;
}

SingleUseBuffImplementation::SingleUseBuffImplementation(CreatureObject* creo, unsigned int buffcrc, float duration, int bufftype, unsigned int comCRC) : BuffImplementation(creo, buffcrc, duration, bufftype) {
	_initializeImplementation();
	// server/zone/objects/creature/buffs/SingleUseBuff.idl():  		commandCRC = comCRC;
	commandCRC = comCRC;
	// server/zone/objects/creature/buffs/SingleUseBuff.idl():  		player = creo;
	player = creo;
}

void SingleUseBuffImplementation::init(Vector<unsigned int>* events) {
	ManagedReference<SingleUseBuffObserver*> _ref0;
	// server/zone/objects/creature/buffs/SingleUseBuff.idl():  		observer = new SingleUseBuffObserver(this);
	observer = _ref0 = new SingleUseBuffObserver(_this.get());
	// server/zone/objects/creature/buffs/SingleUseBuff.idl():  		ObjectManager.instance().persistObject(observer, 1, "buffs");
	ObjectManager::instance()->persistObject(observer, 1, "buffs");
	// server/zone/objects/creature/buffs/SingleUseBuff.idl():  		}
	for (	// server/zone/objects/creature/buffs/SingleUseBuff.idl():  		for(int i = 0;
	int i = 0;
	i < events->size();
 ++i) {
	// server/zone/objects/creature/buffs/SingleUseBuff.idl():  			eventTypes.add(events.get(i));
	(&eventTypes)->add(events->get(i));
}
}

unsigned int SingleUseBuffImplementation::getCommandCRC() {
	// server/zone/objects/creature/buffs/SingleUseBuff.idl():  		return commandCRC;
	return commandCRC;
}

CreatureObject* SingleUseBuffImplementation::getPlayer() {
	// server/zone/objects/creature/buffs/SingleUseBuff.idl():  		return player;
	return player;
}

void SingleUseBuffImplementation::activate() {
	// server/zone/objects/creature/buffs/SingleUseBuff.idl():  		super.activate();
	BuffImplementation::activate();
	// server/zone/objects/creature/buffs/SingleUseBuff.idl():  		addObservers();
	addObservers();
}

void SingleUseBuffImplementation::deactivate() {
	// server/zone/objects/creature/buffs/SingleUseBuff.idl():  		super.deactivate();
	BuffImplementation::deactivate();
	// server/zone/objects/creature/buffs/SingleUseBuff.idl():  		dropObservers();
	dropObservers();
}

void SingleUseBuffImplementation::addObservers() {
	// server/zone/objects/creature/buffs/SingleUseBuff.idl():  		}
	for (	// server/zone/objects/creature/buffs/SingleUseBuff.idl():  		for(int i = 0;
	int i = 0;
	i < (&eventTypes)->size();
 ++i) {
	// server/zone/objects/creature/buffs/SingleUseBuff.idl():  			player.registerObserver(eventTypes.get(i), observer);
	player->registerObserver((&eventTypes)->get(i), observer);
}
}

void SingleUseBuffImplementation::dropObservers() {
	// server/zone/objects/creature/buffs/SingleUseBuff.idl():  		}
	for (	// server/zone/objects/creature/buffs/SingleUseBuff.idl():  		for(int i = 0;
	int i = 0;
	i < (&eventTypes)->size();
 ++i) {
	// server/zone/objects/creature/buffs/SingleUseBuff.idl():  			player.dropObserver(eventTypes.get(i), observer);
	player->dropObserver((&eventTypes)->get(i), observer);
}
}

/*
 *	SingleUseBuffAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


SingleUseBuffAdapter::SingleUseBuffAdapter(SingleUseBuff* obj) : BuffAdapter(obj) {
}

void SingleUseBuffAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_GETCOMMANDCRC__:
		{
			resp->insertInt(getCommandCRC());
		}
		break;
	case RPC_GETPLAYER__:
		{
			resp->insertLong(getPlayer()->_getObjectID());
		}
		break;
	case RPC_ACTIVATE__:
		{
			activate();
		}
		break;
	case RPC_DEACTIVATE__:
		{
			deactivate();
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

unsigned int SingleUseBuffAdapter::getCommandCRC() {
	return (static_cast<SingleUseBuff*>(stub))->getCommandCRC();
}

CreatureObject* SingleUseBuffAdapter::getPlayer() {
	return (static_cast<SingleUseBuff*>(stub))->getPlayer();
}

void SingleUseBuffAdapter::activate() {
	(static_cast<SingleUseBuff*>(stub))->activate();
}

void SingleUseBuffAdapter::deactivate() {
	(static_cast<SingleUseBuff*>(stub))->deactivate();
}

/*
 *	SingleUseBuffHelper
 */

SingleUseBuffHelper* SingleUseBuffHelper::staticInitializer = SingleUseBuffHelper::instance();

SingleUseBuffHelper::SingleUseBuffHelper() {
	className = "SingleUseBuff";

	Core::getObjectBroker()->registerClass(className, this);
}

void SingleUseBuffHelper::finalizeHelper() {
	SingleUseBuffHelper::finalize();
}

DistributedObject* SingleUseBuffHelper::instantiateObject() {
	return new SingleUseBuff(DummyConstructorParameter::instance());
}

DistributedObjectServant* SingleUseBuffHelper::instantiateServant() {
	return new SingleUseBuffImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* SingleUseBuffHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SingleUseBuffAdapter(static_cast<SingleUseBuff*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

