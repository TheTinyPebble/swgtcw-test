/*
 *	server/zone/objects/creature/ai/AiActor.h generated by engine3 IDL compiler 0.60
 */

#ifndef AIACTOR_H_
#define AIACTOR_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

#include "server/zone/objects/creature/ai/components/AiStateComponent.h"

#include "engine/util/u3d/QuadTreeEntry.h"

#include "server/zone/templates/AiTemplate.h"

namespace server {
namespace zone {
namespace objects {
namespace creature {
namespace ai {

class AiActor : public Observable {
public:
	unsigned static const short FINISHED = 0;

	unsigned static const short UNFINISHED = 1;

	unsigned static const short ATTACKED = 2;

	unsigned static const short INTERESTED = 3;

	unsigned static const short DEAD = 4;

	unsigned static const short ALMOSTDEAD = 5;

	unsigned static const short SCARED = 6;

	unsigned static const short FORGOT = 7;

	unsigned static const short NONE = 0xFFFF;

	AiActor(AiTemplate* ait);

	void setHost(CreatureObject* creo);

	CreatureObject* getHost();

	void initializeTransientMembers();

	void notifyPositionUpdate(QuadTreeEntry* entry);

	void setCurrentMessage(unsigned short msg);

	void doAwarenessCheck(Coordinate& start, unsigned long long time, CreatureObject* target);

	void addTransition(const String& stateName, unsigned short msg, const String& resultState);

	DistributedObjectServant* _getImplementation();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	AiActor(DummyConstructorParameter* param);

	virtual ~AiActor();

	friend class AiActorHelper;
};

} // namespace ai
} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature::ai;

namespace server {
namespace zone {
namespace objects {
namespace creature {
namespace ai {

class AiActorImplementation : public ObservableImplementation, public Logger {
public:
	unsigned static const short FINISHED = 0;

	unsigned static const short UNFINISHED = 1;

	unsigned static const short ATTACKED = 2;

	unsigned static const short INTERESTED = 3;

	unsigned static const short DEAD = 4;

	unsigned static const short ALMOSTDEAD = 5;

	unsigned static const short SCARED = 6;

	unsigned static const short FORGOT = 7;

	unsigned static const short NONE = 0xFFFF;

protected:
	VectorMap<String, String> transitions;

	Reference<AiStateComponent* > currentState;

	String currentStateName;

	String defaultStateName;

	Reference<AiTemplate* > aiTemplate;

	unsigned short currentMessage;

	ManagedReference<CreatureObject* > host;

public:
	AiActorImplementation(AiTemplate* ait);

	AiActorImplementation(DummyConstructorParameter* param);

	void setHost(CreatureObject* creo);

	CreatureObject* getHost();

	void initializeTransientMembers();

	void notifyPositionUpdate(QuadTreeEntry* entry);

	void setCurrentMessage(unsigned short msg);

private:
	void next(unsigned short msg);

	void next();

public:
	void doAwarenessCheck(Coordinate& start, unsigned long long time, CreatureObject* target);

	void addTransition(const String& stateName, unsigned short msg, const String& resultState);

	WeakReference<AiActor*> _this;

	operator const AiActor*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~AiActorImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const String& name);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class AiActor;
};

class AiActorAdapter : public ObservableAdapter {
public:
	AiActorAdapter(AiActor* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void setHost(CreatureObject* creo);

	CreatureObject* getHost();

	void initializeTransientMembers();

	void notifyPositionUpdate(QuadTreeEntry* entry);

	void setCurrentMessage(unsigned short msg);

	void addTransition(const String& stateName, unsigned short msg, const String& resultState);

};

class AiActorHelper : public DistributedObjectClassHelper, public Singleton<AiActorHelper> {
	static AiActorHelper* staticInitializer;

public:
	AiActorHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<AiActorHelper>;
};

} // namespace ai
} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature::ai;

#endif /*AIACTOR_H_*/
