/*
 *	server/zone/objects/creature/ai/AiActor.cpp generated by engine3 IDL compiler 0.60
 */

#include "AiActor.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	AiActorStub
 */

enum {RPC_SETHOST__CREATUREOBJECT_ = 6,RPC_GETHOST__,RPC_INITIALIZETRANSIENTMEMBERS__,RPC_NOTIFYPOSITIONUPDATE__QUADTREEENTRY_,RPC_SETCURRENTMESSAGE__SHORT_,RPC_ADDTRANSITION__STRING_SHORT_STRING_};

AiActor::AiActor(AiTemplate* ait) : Observable(DummyConstructorParameter::instance()) {
	AiActorImplementation* _implementation = new AiActorImplementation(ait);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("AiActor");
}

AiActor::AiActor(DummyConstructorParameter* param) : Observable(param) {
	_setClassName("AiActor");
}

AiActor::~AiActor() {
}



void AiActor::setHost(CreatureObject* creo) {
	AiActorImplementation* _implementation = static_cast<AiActorImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETHOST__CREATUREOBJECT_);
		method.addObjectParameter(creo);

		method.executeWithVoidReturn();
	} else
		_implementation->setHost(creo);
}

CreatureObject* AiActor::getHost() {
	AiActorImplementation* _implementation = static_cast<AiActorImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETHOST__);

		return static_cast<CreatureObject*>(method.executeWithObjectReturn());
	} else
		return _implementation->getHost();
}

void AiActor::initializeTransientMembers() {
	AiActorImplementation* _implementation = static_cast<AiActorImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void AiActor::notifyPositionUpdate(QuadTreeEntry* entry) {
	AiActorImplementation* _implementation = static_cast<AiActorImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYPOSITIONUPDATE__QUADTREEENTRY_);
		method.addObjectParameter(entry);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyPositionUpdate(entry);
}

void AiActor::setCurrentMessage(unsigned short msg) {
	AiActorImplementation* _implementation = static_cast<AiActorImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCURRENTMESSAGE__SHORT_);
		method.addUnsignedShortParameter(msg);

		method.executeWithVoidReturn();
	} else
		_implementation->setCurrentMessage(msg);
}

void AiActor::doAwarenessCheck(Coordinate& start, unsigned long long time, CreatureObject* target) {
	AiActorImplementation* _implementation = static_cast<AiActorImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->doAwarenessCheck(start, time, target);
}

void AiActor::addTransition(const String& stateName, unsigned short msg, const String& resultState) {
	AiActorImplementation* _implementation = static_cast<AiActorImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDTRANSITION__STRING_SHORT_STRING_);
		method.addAsciiParameter(stateName);
		method.addUnsignedShortParameter(msg);
		method.addAsciiParameter(resultState);

		method.executeWithVoidReturn();
	} else
		_implementation->addTransition(stateName, msg, resultState);
}

DistributedObjectServant* AiActor::_getImplementation() {

	_updated = true;
	return _impl;
}

void AiActor::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	AiActorImplementation
 */

AiActorImplementation::AiActorImplementation(DummyConstructorParameter* param) : ObservableImplementation(param) {
	_initializeImplementation();
}


AiActorImplementation::~AiActorImplementation() {
}


void AiActorImplementation::finalize() {
}

void AiActorImplementation::_initializeImplementation() {
	_setClassHelper(AiActorHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void AiActorImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<AiActor*>(stub);
	ObservableImplementation::_setStub(stub);
}

DistributedObjectStub* AiActorImplementation::_getStub() {
	return _this;
}

AiActorImplementation::operator const AiActor*() {
	return _this;
}

void AiActorImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void AiActorImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void AiActorImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void AiActorImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void AiActorImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void AiActorImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void AiActorImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void AiActorImplementation::_serializationHelperMethod() {
	ObservableImplementation::_serializationHelperMethod();

	_setClassName("AiActor");

}

void AiActorImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(AiActorImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool AiActorImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ObservableImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "AiActor.currentStateName") {
		TypeInfo<String >::parseFromBinaryStream(&currentStateName, stream);
		return true;
	}

	if (_name == "AiActor.defaultStateName") {
		TypeInfo<String >::parseFromBinaryStream(&defaultStateName, stream);
		return true;
	}

	if (_name == "AiActor.currentMessage") {
		TypeInfo<unsigned short >::parseFromBinaryStream(&currentMessage, stream);
		return true;
	}

	if (_name == "AiActor.host") {
		TypeInfo<ManagedReference<CreatureObject* > >::parseFromBinaryStream(&host, stream);
		return true;
	}


	return false;
}

void AiActorImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = AiActorImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int AiActorImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ObservableImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;
	_name = "AiActor.currentStateName";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&currentStateName, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "AiActor.defaultStateName";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&defaultStateName, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "AiActor.currentMessage";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned short >::toBinaryStream(&currentMessage, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "AiActor.host";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<CreatureObject* > >::toBinaryStream(&host, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 4;
}

AiActorImplementation::AiActorImplementation(AiTemplate* ait) {
	_initializeImplementation();
	// server/zone/objects/creature/ai/AiActor.idl():  		host = null;
	host = NULL;
	// server/zone/objects/creature/ai/AiActor.idl():  		aiTemplate = ait;
	aiTemplate = ait;
	// server/zone/objects/creature/ai/AiActor.idl():  		Logger.setLoggingName("AiActor");
	Logger::setLoggingName("AiActor");
	// server/zone/objects/creature/ai/AiActor.idl():  		Logger.setLogging(false);
	Logger::setLogging(false);
	// server/zone/objects/creature/ai/AiActor.idl():  		Logger.setGlobalLogging(false);
	Logger::setGlobalLogging(false);
}

void AiActorImplementation::setHost(CreatureObject* creo) {
	// server/zone/objects/creature/ai/AiActor.idl():  		host = creo;
	host = creo;
	// server/zone/objects/creature/ai/AiActor.idl():  		host.addObservableChild(this);
	host->addObservableChild(_this);
}

CreatureObject* AiActorImplementation::getHost() {
	// server/zone/objects/creature/ai/AiActor.idl():  		return host;
	return host;
}

void AiActorImplementation::notifyPositionUpdate(QuadTreeEntry* entry) {
	// server/zone/objects/creature/ai/AiActor.idl():  		currentState.notifyPositionUpdate(this, entry);
	currentState->notifyPositionUpdate(_this, entry);
}

void AiActorImplementation::setCurrentMessage(unsigned short msg) {
	// server/zone/objects/creature/ai/AiActor.idl():  		currentMessage = msg;
	currentMessage = msg;
}

/*
 *	AiActorAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


AiActorAdapter::AiActorAdapter(AiActor* obj) : ObservableAdapter(obj) {
}

void AiActorAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_SETHOST__CREATUREOBJECT_:
		{
			setHost(static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_GETHOST__:
		{
			resp->insertLong(getHost()->_getObjectID());
		}
		break;
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			initializeTransientMembers();
		}
		break;
	case RPC_NOTIFYPOSITIONUPDATE__QUADTREEENTRY_:
		{
			notifyPositionUpdate(static_cast<QuadTreeEntry*>(inv->getObjectParameter()));
		}
		break;
	case RPC_SETCURRENTMESSAGE__SHORT_:
		{
			setCurrentMessage(inv->getUnsignedShortParameter());
		}
		break;
	case RPC_ADDTRANSITION__STRING_SHORT_STRING_:
		{
			String stateName; String resultState; 
			addTransition(inv->getAsciiParameter(stateName), inv->getUnsignedShortParameter(), inv->getAsciiParameter(resultState));
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void AiActorAdapter::setHost(CreatureObject* creo) {
	(static_cast<AiActor*>(stub))->setHost(creo);
}

CreatureObject* AiActorAdapter::getHost() {
	return (static_cast<AiActor*>(stub))->getHost();
}

void AiActorAdapter::initializeTransientMembers() {
	(static_cast<AiActor*>(stub))->initializeTransientMembers();
}

void AiActorAdapter::notifyPositionUpdate(QuadTreeEntry* entry) {
	(static_cast<AiActor*>(stub))->notifyPositionUpdate(entry);
}

void AiActorAdapter::setCurrentMessage(unsigned short msg) {
	(static_cast<AiActor*>(stub))->setCurrentMessage(msg);
}

void AiActorAdapter::addTransition(const String& stateName, unsigned short msg, const String& resultState) {
	(static_cast<AiActor*>(stub))->addTransition(stateName, msg, resultState);
}

/*
 *	AiActorHelper
 */

AiActorHelper* AiActorHelper::staticInitializer = AiActorHelper::instance();

AiActorHelper::AiActorHelper() {
	className = "AiActor";

	Core::getObjectBroker()->registerClass(className, this);
}

void AiActorHelper::finalizeHelper() {
	AiActorHelper::finalize();
}

DistributedObject* AiActorHelper::instantiateObject() {
	return new AiActor(DummyConstructorParameter::instance());
}

DistributedObjectServant* AiActorHelper::instantiateServant() {
	return new AiActorImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* AiActorHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new AiActorAdapter(static_cast<AiActor*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

