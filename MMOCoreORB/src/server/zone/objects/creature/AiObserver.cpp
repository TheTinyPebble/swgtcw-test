/*
 *	server/zone/objects/creature/AiObserver.cpp generated by engine3 IDL compiler 0.60
 */

#include "AiObserver.h"

#include "server/zone/objects/creature/AiAgent.h"

#include "server/zone/objects/scene/SceneObject.h"

/*
 *	AiObserverStub
 */

AiObserver::AiObserver(AiAgent* agent) : Observer(DummyConstructorParameter::instance()) {
	AiObserverImplementation* _implementation = new AiObserverImplementation(agent);
	_impl = _implementation;
	_impl->_setStub(this);
}

AiObserver::AiObserver(DummyConstructorParameter* param) : Observer(param) {
}

AiObserver::~AiObserver() {
}


int AiObserver::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	AiObserverImplementation* _implementation = (AiObserverImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(observable);
		method.addObjectParameter(arg1);
		method.addSignedLongParameter(arg2);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyObserverEvent(eventType, observable, arg1, arg2);
}

DistributedObjectServant* AiObserver::_getImplementation() {

	_updated = true;
	return _impl;
}

void AiObserver::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;}

/*
 *	AiObserverImplementation
 */

AiObserverImplementation::AiObserverImplementation(DummyConstructorParameter* param) : ObserverImplementation(param) {
	_initializeImplementation();
}


AiObserverImplementation::~AiObserverImplementation() {
}


void AiObserverImplementation::finalize() {
}

void AiObserverImplementation::_initializeImplementation() {
	_setClassHelper(AiObserverHelper::instance());

	_serializationHelperMethod();
}

void AiObserverImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (AiObserver*) stub;
	ObserverImplementation::_setStub(stub);
}

DistributedObjectStub* AiObserverImplementation::_getStub() {
	return _this;
}

AiObserverImplementation::operator const AiObserver*() {
	return _this;
}

void AiObserverImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void AiObserverImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void AiObserverImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void AiObserverImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void AiObserverImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void AiObserverImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void AiObserverImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void AiObserverImplementation::_serializationHelperMethod() {
	ObserverImplementation::_serializationHelperMethod();

	_setClassName("AiObserver");

	addSerializableVariable("aiAgent", &aiAgent);
}

AiObserverImplementation::AiObserverImplementation(AiAgent* agent) {
	_initializeImplementation();
	// server/zone/objects/creature/AiObserver.idl(57):  		aiAgent = agent;
	aiAgent = agent;
	// server/zone/objects/creature/AiObserver.idl(59):  		Logger.setLoggingName("AiObserver");
	Logger::setLoggingName("AiObserver");
}

int AiObserverImplementation::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	// server/zone/objects/creature/AiObserver.idl(63):  
	if (aiAgent == NULL)	// server/zone/objects/creature/AiObserver.idl(64):  			return 0;
	return 0;

	else 	// server/zone/objects/creature/AiObserver.idl(65):  
	if (eventType == ObserverEventType::SPECIALATTACK)	// server/zone/objects/creature/AiObserver.idl(66):  			return aiAgent.notifyAttack(observable);
	return aiAgent->notifyAttack(observable);

	else 	// server/zone/objects/creature/AiObserver.idl(67):  
	if (eventType == ObserverEventType::CALLFORHELP)	// server/zone/objects/creature/AiObserver.idl(68):  			return aiAgent.notifyCallForHelp(observable, arg1);
	return aiAgent->notifyCallForHelp(observable, arg1);

	else 	// server/zone/objects/creature/AiObserver.idl(70):  			return 0;
	return 0;
}

/*
 *	AiObserverAdapter
 */

AiObserverAdapter::AiObserverAdapter(AiObserverImplementation* obj) : ObserverAdapter(obj) {
}

Packet* AiObserverAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertSignedInt(notifyObserverEvent(inv->getUnsignedIntParameter(), (Observable*) inv->getObjectParameter(), (ManagedObject*) inv->getObjectParameter(), inv->getSignedLongParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

int AiObserverAdapter::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	return ((AiObserverImplementation*) impl)->notifyObserverEvent(eventType, observable, arg1, arg2);
}

/*
 *	AiObserverHelper
 */

AiObserverHelper* AiObserverHelper::staticInitializer = AiObserverHelper::instance();

AiObserverHelper::AiObserverHelper() {
	className = "AiObserver";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void AiObserverHelper::finalizeHelper() {
	AiObserverHelper::finalize();
}

DistributedObject* AiObserverHelper::instantiateObject() {
	return new AiObserver(DummyConstructorParameter::instance());
}

DistributedObjectServant* AiObserverHelper::instantiateServant() {
	return new AiObserverImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* AiObserverHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new AiObserverAdapter((AiObserverImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

