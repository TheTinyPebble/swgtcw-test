/*
 *	server/zone/objects/creature/CreatureObject.h generated by engine3 IDL compiler 0.55
 */

#ifndef CREATUREOBJECT_H_
#define CREATUREOBJECT_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/service/proto/BaseMessage.h"

#include "engine/service/proto/StandaloneBaseMessage.h"

#include "../../packets/object/StfParameter.h"

class SceneObject;

class Inventory;

class BankInventory;

class Container;

class TangibleObject;

class Weapon;

class Armor;

class GroupObject;

class Player;

class BuildingObject;

class MountCreature;

class Creature;

class Guild;

class Skill;

class BuffObject;

class ResourceContainer;

#include "../tangible/TangibleObject.h"

class CreatureObject : public TangibleObject {
public:
	CreatureObject(unsigned long long oid);

	void info(const String& message, bool forcedLog = false);

	void sendItemsTo(Player* player);

	void sendTo(Player* player, bool doClose = true);

	void sendDestroyTo(Player* player);

	void doCombatAnimation(CreatureObject* defender, unsigned int animcrc, bool hit = false);

	void doAnimation(const String& anim);

	void doEmote(unsigned long long targetid, unsigned int emoteid, bool showtext);

	void playEffect(const String& file, const String& aux);

	void showFlyText(const String& file, const String& aux, unsigned char red, unsigned char green, unsigned char blue);

	void sendCombatSpam(CreatureObject* defender, TangibleObject* item, unsigned int damage, const String& skill, bool areaSpam = true);

	void sendCombatSpamTrap(CreatureObject* defender, TangibleObject* item, unsigned int damage, const String& skill, bool areaSpam = true);

	void addDamage(CreatureObject* creature, unsigned int damage);

	unsigned int getDamage(CreatureObject* creature);

	void removeFromDamageMap(CreatureObject* target);

	bool isLootOwner(CreatureObject* creature);

	CreatureObject* getLootOwner();

	unsigned int getMitigation(const String& mit);

	void addCooldown(const String& key, int timeLimitInMilliseconds);

	void removeCooldown(const String& key);

	bool containsCooldown(const String& key);

	int getCooldownTimeRemaining(const String& key);

	bool hasCooldownExpired(const String& key);

	bool isIncapacitated();

	bool isDead();

	bool isKnockedDown();

	bool isKneeling();

	bool isProne();

	bool isStanding();

	bool isSkillAnimating();

	bool isInCombat();

	bool isDizzied();

	bool isStunned();

	bool isBlinded();

	bool isIntimidated();

	bool isSnared();

	bool isRooted();

	bool isDiseased();

	bool isPoisoned();

	bool isBleeding();

	bool isOnFire();

	bool isMounted();

	bool isRidingCreature();

	bool isMeditating();

	bool isCreature();

	bool isNPC();

	bool isBerserked();

	bool isTanoObjEquipped(TangibleObject* tano);

	bool isPet();

	bool hatesFaction(unsigned int faction);

	void updateKnockdownRecovery();

	void updateMood(const String& md);

	bool checkKnockdownRecovery();

	void updatePostureDownRecovery();

	void updatePostureUpRecovery();

	bool checkPostureDownRecovery();

	bool checkPostureUpRecovery();

	bool setState(unsigned long long state);

	bool clearState(unsigned long long state);

	void updateDotStates(unsigned long long oldStates, unsigned long long newStates);

	void updateStates();

	void clearStates();

	float calculateBFRatio();

	void removeState(unsigned long long state);

	void resetHAMBars(bool doUpdateClient);

	bool changeHAMBars(int health, int action, int mind, bool forcedChange = false);

	bool changeHAMWounds(int health, int action, int mind, bool forcedChange = false);

	void changeMaxHAMBars(int health, int action, int mind);

	bool changeAttributeBar(unsigned char attribute, int value, bool forcedChange = false);

	bool changeHealthBar(int value, bool forcedChange = false);

	bool changeStrengthBar(int value, bool forcedChange = false);

	bool changeConstitutionBar(int value, bool forcedChange = false);

	bool changeActionBar(int value, bool forcedChange = false);

	bool changeQuicknessBar(int value, bool forcedChange = false);

	bool changeStaminaBar(int value, bool forcedChange = false);

	bool changeMindBar(int value, bool forcedChange = false);

	bool changeFocusBar(int value, bool forcedChange = false);

	bool changeWillpowerBar(int value, bool forcedChange = false);

	void changeMaxAttributeBar(unsigned char attribute, int value, bool updateClient = true);

	void changeMaxHealthBar(int value, bool updateClient = true);

	void changeMaxStrengthBar(int value, bool updateClient = true);

	void changeMaxConstitutionBar(int value, bool updateClient = true);

	void changeMaxActionBar(int value, bool updateClient = true);

	void changeMaxQuicknessBar(int value, bool updateClient = true);

	void changeMaxStaminaBar(int value, bool updateClient = true);

	void changeMaxMindBar(int value, bool updateClient = true);

	void changeMaxFocusBar(int value, bool updateClient = true);

	void changeMaxWillpowerBar(int value, bool updateClient = true);

	bool changeWoundsBar(unsigned char attribute, int value, bool forcedChange = false);

	bool changeHealthWoundsBar(int value, bool forcedChange = false);

	bool changeStrengthWoundsBar(int value, bool forcedChange = false);

	bool changeConstitutionWoundsBar(int value, bool forcedChange = false);

	bool changeActionWoundsBar(int value, bool forcedChange = false);

	bool changeQuicknessWoundsBar(int value, bool forcedChange = false);

	bool changeStaminaWoundsBar(int value, bool forcedChange = false);

	bool changeMindWoundsBar(int value, bool forcedChange = false);

	bool changeFocusWoundsBar(int value, bool forcedChange = false);

	bool changeWillpowerWoundsBar(int value, bool forcedChange = false);

	void changeShockWounds(int bf);

	void setAttributeBar(unsigned char attribute, int value);

	void setHealthBar(int value);

	void setStrengthBar(int value);

	void setConstitutionBar(int value);

	void setActionBar(int value);

	void setQuicknessBar(int value);

	void setStaminaBar(int value);

	void setMindBar(int value);

	void setFocusBar(int value);

	void setWillpowerBar(int value);

	void setBaseAttributeBar(unsigned char attribute, int value, bool updateClient = true);

	void setBaseHealthBar(int value, bool updateClient = true);

	void setBaseStrengthBar(int value, bool updateClient = true);

	void setBaseConstitutionBar(int value, bool updateClient = true);

	void setBaseActionBar(int value, bool updateClient = true);

	void setBaseQuicknessBar(int value, bool updateClient = true);

	void setBaseStaminaBar(int value, bool updateClient = true);

	void setBaseMindBar(int value, bool updateClient = true);

	void setBaseFocusBar(int value, bool updateClient = true);

	void setBaseWillpowerBar(int value, bool updateClient = true);

	void setMaxAttributeBar(unsigned char attribute, int value, bool updateClient = true);

	void setMaxHealthBar(int value, bool updateClient = true);

	void setMaxStrengthBar(int value, bool updateClient = true);

	void setMaxConstitutionBar(int value, bool updateClient = true);

	void setMaxActionBar(int value, bool updateClient = true);

	void setMaxQuicknessBar(int value, bool updateClient = true);

	void setMaxStaminaBar(int value, bool updateClient = true);

	void setMaxMindBar(int value, bool updateClient = true);

	void setMaxFocusBar(int value, bool updateClient = true);

	void setMaxWillpowerBar(int value, bool updateClient = true);

	void setWoundsBar(unsigned char attribute, int value);

	void setHealthWoundsBar(int value);

	void setStrengthWoundsBar(int value);

	void setConstitutionWoundsBar(int value);

	void setActionWoundsBar(int value);

	void setQuicknessWoundsBar(int value);

	void setStaminaWoundsBar(int value);

	void setMindWoundsBar(int value);

	void setFocusWoundsBar(int value);

	void setWillpowerWoundsBar(int value);

	bool hasAttackDelay();

	void clearAttackDelay();

	void activateBurstRun(bool bypassChecks = false);

	bool hasQueuedState(unsigned int skillCRC);

	bool removeQueuedState(unsigned int skillCRC);

	bool addQueuedState(unsigned int skillCRC);

	void setMeditateState();

	void removePowerboost();

	bool isGuilded();

	void removeGroup();

	bool isInAGroup();

	bool isInGroupWith(CreatureObject* creature);

	void setGroupID(unsigned long long gid);

	void updateGroupId(unsigned long long id);

	void updateGroupInviterId(unsigned long long id);

	void updateTarget(unsigned long long targ);

	void updateTarget(SceneObject* targ);

	void clearTarget();

	void setActionCounter(unsigned int actioncntr);

	void setWeapon(Weapon* wep);

	void setCreatureLinkID(unsigned long long creatureID);

	void setAccuracy(int acc);

	void setAccuracyBonus(int accBonus);

	void setDamageBonus(int bonus);

	void setDefenseBonus(int bonus);

	void setLastMovementUpdateStamp(unsigned int tme);

	void setIgnoreMovementTests(int times);

	void setLevel(unsigned int lvl);

	void setHealthEncumbrance(unsigned int value);

	void setActionEncumbrance(unsigned int value);

	void setMindEncumbrance(unsigned int value);

	void changeHealthEncumbrance(int value);

	void changeActionEncumbrance(int value);

	void changeMindEncumbrance(int value);

	void updateServerMovementStamp();

	SceneObject* getInventoryItem(unsigned long long oid);

	void removeAllInventoryByMisoKey(String& mkey);

	TangibleObject* getItemByMisoKey(String& tma);

	void removeInventoryItem(unsigned long long oid);

	void removeInventoryItem(SceneObject* item);

	SceneObject* getLootItem(unsigned long long oid);

	void removeLootItem(unsigned long long oid);

	SceneObject* getBankItem(unsigned long long oid);

	void removeBankItem(unsigned long long oid);

	Inventory* getInventory();

	Container* getLootContainer();

	Container* getBankContainer();

	BankInventory* getBankInventory();

	unsigned long long getNewItemID();

	Weapon* getWeapon();

	Armor* getArmor(int type);

	void addSkill(Skill* skill);

	void addSkillMod(const String& name, int mod, bool updateClient = false);

	int getSkillMod(const String& name);

	bool hasSkillMod(const String& name);

	int getSkillModBonus(const String& name);

	void addSkillModBonus(const String& name, int mod, bool updateClient = false);

	bool hasSkillModBonus(const String& name);

	int getAccuracy();

	int getAccuracyBonus();

	int getDefenseBonus();

	int getDamageBonus();

	int getConditionDamage();

	int getMaxCondition();

	int getCondition();

	MountCreature* getMount();

	unsigned long long getLastServerMovementStamp();

	unsigned long long getCreatureLinkID();

	float getDistanceTo(SceneObject* targetCreature);

	float getHeight();

	unsigned int getCreatureSkillsCount();

	unsigned int getNewCreatureSkillsCount(int cnt);

	unsigned int getLastMovementUpdateStamp();

	int getIgnoreMovementTests();

	unsigned int getLevel();

	int getCenteredBonus();

	void sendSystemMessage(const String& message);

	void sendSystemMessage(UnicodeString& message);

	void sendSystemMessage(const String& file, const String& str, unsigned long long targetid = 0);

	void updateSpeed(float speed, float acceleration);

	void addInventoryItem(TangibleObject* item);

	void addInventoryResource(ResourceContainer* rcno);

	void addLootItem(TangibleObject* item);

	void startDancing(const String& anim, bool changeDance = false);

	void startPlayingMusic(const String& anim, bool changeDance = false);

	void startWatch(unsigned long long entid);

	void startListen(unsigned long long entid);

	void stopWatch(unsigned long long entid, bool doSendPackets = true, bool forced = false, bool doLock = true, bool outOfRange = false);

	void stopListen(unsigned long long entid, bool doSendPackets = true, bool forced = false, bool doLock = true, bool outOfRange = false);

	bool isPlayingMusic();

	bool isDancing();

	void stopDancing();

	void stopPlayingMusic();

	void addListener(CreatureObject* creature);

	void addWatcher(CreatureObject* creature);

	void removeListener(CreatureObject* creature);

	void removeWatcher(CreatureObject* creature);

	void doFlourish(const String& modifier);

	void doPerformanceAction();

	void doEntertainerPatronEffects();

	void addEntertainerFlourishBuff();

	void addEntertainerBuffDuration(int performanceType, float duration);

	void setEntertainerBuffDuration(int performanceType, float duration);

	float getEntertainerBuffDuration(int performanceType);

	void setEntertainerBuffStrength(int performanceType, float strength);

	float getEntertainerBuffStrength(int performanceType);

	void activateRecovery();

	int getCreatureSkillsSize();

	String& getSkill(int idx);

	bool hasSkill(unsigned int skillCRC);

	String& getSkillOrCertification(int idx);

	int getSkillAndCertificationSize();

	void mountCreature(MountCreature* mnt, bool lockMount = true);

	void dismount(bool lockMount = true, bool ignoreCooldown = true);

	void addCashCredits(unsigned int credits);

	void addBankCredits(unsigned int credits);

	void updateCashCredits(unsigned int credits);

	void updateBankCredits(unsigned int credits);

	void subtractCashCredits(unsigned int credits);

	void subtractBankCredits(unsigned int credits);

	void setCashCredits(int credits);

	void setBankCredits(int credits);

	void addBuff(int buffCRC, float duration);

	void applyBuff(BuffObject* buff);

	void removeBuff(const unsigned int buffCRC, bool remove = true);

	bool hasSpice();

	bool verifyCashCredits(unsigned int creditsToRemove);

	bool verifyBankCredits(unsigned int creditsToRemove);

	bool isOnFullHealth();

	bool hasStates();

	bool hasState(unsigned long long state);

	bool isResuscitable();

	void setTimeOfDeath(unsigned long long mtime);

	unsigned long long getTimeOfDeath();

	bool hasHealthDamage();

	bool hasActionDamage();

	bool hasMindDamage();

	bool hasDamage();

	bool hasWounds(bool h = true, bool a = true, bool m = true);

	bool hasWound(unsigned char attribute);

	bool hasShockWounds();

	unsigned char getNextWoundedAttribute(bool h = true, bool a = true, bool m = false);

	bool isAttackable();

	bool isAttackableBy(CreatureObject* attacker);

	bool isListening();

	bool isWatching();

	UnicodeString& getCharacterName();

	String& getRaceName();

	String& getGender();

	String& getCreatureType();

	String& getTerrainName();

	void getHairAppearance(String& appearance);

	bool isOvert();

	unsigned long long getStateBitmask();

	unsigned char getPosture();

	unsigned int getFaction();

	bool isRebel();

	bool isNeutral();

	bool isImperial();

	unsigned int getPvpStatusBitmask();

	unsigned char getFactionRank();

	unsigned int getBankCredits();

	unsigned int getCashCredits();

	unsigned int getWoundsUpdateCounter();

	unsigned int getNewWoundsUpdateCounter(int upd);

	void updateHAMBars();

	void updateBaseStats();

	int getBaseAttribute(unsigned char attribute);

	int getBaseHealth();

	int getBaseStrength();

	int getBaseConstitution();

	int getBaseAction();

	int getBaseQuickness();

	int getBaseStamina();

	int getBaseMind();

	int getBaseFocus();

	int getBaseWillpower();

	int getAttribute(unsigned char attribute);

	int getHealth();

	int getStrength();

	int getConstitution();

	int getAction();

	int getQuickness();

	int getStamina();

	int getMind();

	int getFocus();

	int getWillpower();

	int getAttributeMax(unsigned char attribute);

	int getHealthMax();

	int getStrengthMax();

	int getConstitutionMax();

	int getActionMax();

	int getQuicknessMax();

	int getStaminaMax();

	int getMindMax();

	int getFocusMax();

	int getWillpowerMax();

	int getWounds(unsigned char attribute);

	unsigned char getWoundsArraySize();

	int getHealthWounds();

	int getStrengthWounds();

	int getConstitutionWounds();

	int getActionWounds();

	int getQuicknessWounds();

	int getStaminaWounds();

	int getMindWounds();

	int getFocusWounds();

	int getWillpowerWounds();

	unsigned int getAttributeDamage(unsigned char attribute);

	unsigned int getHealthDamage();

	unsigned int getActionDamage();

	unsigned int getMindDamage();

	unsigned int getShockWounds();

	unsigned int getHAMUpdateCounter();

	unsigned int getNewHAMUpdateCounter(int cnt);

	unsigned int getHAMMaxUpdateCounter();

	unsigned int getNewHAMMaxUpdateCounter(int cnt);

	unsigned int getHAMBaseUpdateCounter();

	unsigned int getNewHAMBaseUpdateCounter(int cnt);

	unsigned int getEncumbUpdateCounter();

	unsigned int getNewEncumbUpdateCounter(int cnt);

	unsigned int getHealthEncumbrance();

	unsigned int getActionEncumbrance();

	unsigned int getMindEncumbrance();

	int getpbHA();

	int getpbMind();

	int getpbTick();

	int getpbBonus();

	unsigned long long getTargetID();

	SceneObject* getTarget();

	unsigned long long getWeaponID();

	unsigned long long getGroupID();

	unsigned long long getGuildID();

	Guild* getGuild();

	unsigned int getActionCounter();

	float getSpeed();

	float getAcceleration();

	String& getPerformanceAnimation();

	unsigned int getPerformanceCounter();

	unsigned int getInstrumentID();

	int getInstrumentType();

	String& getPerformanceName();

	String& getMood();

	String& getMoodStr();

	unsigned char getMoodID();

	unsigned long long getGroupInviterID();

	unsigned long long getGroupInviteCounter();

	unsigned long long getNewGroupInviteCounter();

	unsigned long long getWatchID();

	unsigned long long getListenID();

	bool isInBuilding();

	int getBuildingType();

	SceneObject* getBuilding();

	String& getGuildName();

	int getWeaponSpeedModifier();

	unsigned int getSkillBoxesUpdateCounter();

	unsigned int getSkillModsCounter();

	unsigned int getNewSkillModsCounter(int cnt);

	String& getHideType();

	String& getBoneType();

	String& getMeatType();

	int getBoneMax();

	int getHideMax();

	int getMeatMax();

	int getMilk();

	bool hasOrganics();

	int getCreatureHealth();

	int getXP();

	int isHealer();

	int isPack();

	int isHerd();

	int isStalker();

	int isKiller();

	int isAggressive();

	String& getBehaviorScript();

	String& getCreatureFaction();

	String& getCreatureWeapon();

	String& getCreatureWeaponName();

	String& getCreatureWeaponTemp();

	String& getCreatureWeaponClass();

	int getCreatureWeaponEquipped();

	int getCreatureWeaponMinDamage();

	int getCreatureWeaponMaxDamage();

	float getCreatureWeaponAttackSpeed();

	String& getCreatureWeaponDamageType();

	String& getCreatureWeaponArmorPiercing();

	float getInternalNPCDamageModifier();

	float getTame();

	String& getLootGroup();

	unsigned int getFerocity();

	bool isBaby();

	void setBaseAttribute(unsigned char attribute, int value);

	void setBaseHealth(int value);

	void setBaseStrength(int value);

	void setBaseConstitution(int value);

	void setBaseAction(int value);

	void setBaseQuickness(int value);

	void setBaseStamina(int value);

	void setBaseMind(int value);

	void setBaseFocus(int value);

	void setBaseWillpower(int value);

	void setAttribute(unsigned char attribute, int value);

	void setHealth(int value);

	void setStrength(int value);

	void setConstitution(int value);

	void setAction(int value);

	void setQuickness(int value);

	void setStamina(int value);

	void setMind(int value);

	void setFocus(int value);

	void setWillpower(int value);

	void setAttributeMax(unsigned char attribute, int value);

	void setHealthMax(int value);

	void setStrengthMax(int value);

	void setConstitutionMax(int value);

	void setActionMax(int value);

	void setQuicknessMax(int value);

	void setStaminaMax(int value);

	void setMindMax(int value);

	void setFocusMax(int value);

	void setWillpowerMax(int value);

	void setWounds(unsigned char attribute, int value);

	void setHealthWounds(int value);

	void setStrengthWounds(int value);

	void setConstitutionWounds(int value);

	void setActionWounds(int value);

	void setQuicknessWounds(int value);

	void setStaminaWounds(int value);

	void setMindWounds(int value);

	void setFocusWounds(int value);

	void setWillpowerWounds(int value);

	void setShockWounds(int value);

	void setWoundsUpdateCounter(unsigned int count);

	void changeAttributeMax(unsigned char attribute, int value);

	void changeHealthMax(int value);

	void changeStrengthMax(int value);

	void changeConstitutionMax(int value);

	void changeActionMax(int value);

	void changeQuicknessMax(int value);

	void changeStaminaMax(int value);

	void changeMindMax(int value);

	void changeFocusMax(int value);

	void changeWillpowerMax(int value);

	void changeAttribute(unsigned char attribute, int value);

	void changeHealth(int value);

	void changeStrength(int value);

	void changeConstitution(int value);

	void changeAction(int value);

	void changeQuickness(int value);

	void changeStamina(int value);

	void changeMind(int value);

	void changeFocus(int value);

	void changeWillpower(int value);

	void setpbHA(int value);

	void setpbMind(int value);

	void setpbTick(int value);

	void setpbBonus(unsigned int value);

	void setSpeed(float spd);

	void setAcceleration(float acc);

	void changeConditionDamage(int amount);

	void setMaxCondition(int condition);

	void setPosture(unsigned char state, bool overrideDizzy = false, bool objectInteraction = false, float objX = 0, float objY = 0, float objZ = 0);

	void setPvpStatusBitmask(unsigned int mask);

	void setFactionRank(unsigned char rank, bool updateClient = true);

	void setDizziedState();

	void setStunnedState();

	void setBlindedState();

	void setIntimidatedState();

	void setSnaredState();

	void setRootedState();

	void setBerserkedState(unsigned int duration);

	int addDotState(CreatureObject* attacker, unsigned long long dotID, unsigned long long dotType, int str, int type, int duration, float potency, int defense);

	bool healDot(int dotType, int reduction);

	bool setNextAttackDelay(int del);

	void setCharacterName(const String& name);

	void setCharacterName(const UnicodeString& name);

	void setTerrainName(const String& name);

	void updateCharacterAppearance();

	void setHairAppearance(String& cust);

	void setHairAppearanceAttribute(unsigned char type, unsigned char value);

	void setHairAppearanceAttribute(String& type, unsigned char value);

	void setRaceName(const String& name);

	void setGender(const String& name);

	void setCreatureType(const String& name);

	void setFaction(unsigned int fac);

	void setHeight(float h);

	void setMood(unsigned char mdid);

	void setMood(const String& m);

	void setGroup(GroupObject* Group);

	void setMount(MountCreature* mount);

	void explode(int level = 1, bool destroy = true);

	BuffObject* getBuffObject(const unsigned int buffCRC);

	bool hasBuff(const unsigned int buffCRC);

	bool healState(CreatureObject* target, unsigned long long state);

	void deactivateWoundTreatment();

	void activateWoundTreatment();

	void deactivateInjuryTreatment(bool isRangedStim);

	void activateInjuryTreatment();

	void deactivateStateTreatment();

	void activateStateTreatment();

	void deactivateConditionTreatment();

	void activateConditionTreatment();

	bool canTreatWounds();

	bool canTreatInjuries();

	bool canTreatStates();

	bool canTreatConditions();

	int getMedicalFacilityRating();

	void setBoneType(const String& bone);

	void setBoneMax(int bonemax);

	void setHideType(const String& hide);

	void setHideMax(int hidemax);

	void setMeatType(const String& meat);

	void setMeatMax(int meatmax);

	void setMilk(int milkamt);

	void setXP(int xp);

	void setHealer(int heale);

	void setPack(int pack);

	void setHerd(int herd);

	void setStalker(int stalker);

	void setKiller(int killer);

	void setAggressive(int aggressive);

	void setBehaviorScript(const String& behaviorScript);

	void setLootGroup(const String& lootgroup);

	void setTame(float tme);

	void setCreatureFaction(const String& cfac);

	void setInternalNPCDamageModifier(float indm);

	void setFerocity(unsigned int fero);

	void setBaby(bool baby);

	void setCreatureWeapon(const String& wpon);

	void setCreatureWeaponName(const String& weaponname);

	void setCreatureWeaponTemp(const String& weapontemp);

	void setCreatureWeaponClass(const String& weaponclass);

	void setCreatureWeaponEquipped(int weaponequ);

	void setCreatureWeaponMinDamage(int weaponmindam);

	void setCreatureWeaponMaxDamage(int weaponmaxdam);

	void setCreatureWeaponAttackSpeed(float weaponattackspeed);

	void setCreatureWeaponDamageType(const String& weapondamtype);

	void setCreatureWeaponArmorPiercing(const String& weaponarmorpiercing);

	bool isFrozen();

	void setFrozen(bool flag);

	String& getTemplateString();

	void setTemplateString(const String& tmpString);

	void clearTemplateString();

	void say(UnicodeString& message, unsigned int moodid = 0, unsigned int mood2 = 0);

	void say(const String& file, const String& str, StfParameter* param, unsigned int moodid = 0, unsigned int mood2 = 0);

	void setCamoType(unsigned int cType);

	unsigned int getCamoType();

	void activateCamo(unsigned int camoCRC, unsigned int time, unsigned int ms);

	void deactivateCamo(bool forced);

	void activateCamoLock();

	bool isCamoCooldownActive();

	int getCamoCooldownLeft();

	int getMaskScent();

	void setMaskScent(int value);

	Player* getCamoXPTraget();

	void setCamoXPTraget(Player* xpTaget);

	void setCampModifier(int mod);

	int getCampModifier();

	bool isInCamp();

	int getCampAggroMod();

	void setCampAggroMod(int mod);

	int getNumberOfPets();

	void setNumberOfPets(int num);

	unsigned char getLowestHAMAttribute();

	void onIncapacitated(SceneObject* attacker);

	void onIncapacitationRecovery();

	void onDeath();

	void onKilled(SceneObject* killer);

	void onResuscitated(SceneObject* healer);

	void onDamageHealed(SceneObject* healer, unsigned char attribute, unsigned int amount);

	void onWoundHealed(SceneObject* healer, unsigned char attribute, unsigned int amount);

	void onHealEnhanced(SceneObject* enhancer, unsigned char attribute, unsigned int amount, float duration);

	void onBlinded();

	void onDizzied();

	void onStunned();

	void onIntimidated();

	void onEquip(TangibleObject* item);

	void onUnequip(TangibleObject* item);

	void onChangeWeapon(Weapon* weapon);

	void onChangeArmor(Armor* armor);

	void onReceiveDamage(SceneObject* attacker, unsigned char attribute, unsigned int amount);

	void onRegenerateHAM();

	bool inflictDamage(CreatureObject* victim, unsigned char attribute, unsigned int damage);

	void incapacitateSelf();

	void recoverFromIncapacitation();

	void die();

	void equipItem(TangibleObject* item);

	void unequipItem(TangibleObject* item);

	bool canRecoverFromIncapacitation();

	void setBerserkDamage(unsigned int damage);

	unsigned int getBerserkDamage();

	unsigned int getAimMod();

	void setAimMod(unsigned int mod);

	bool isAiming();

	void setAimingState();

	bool isInCover();

	void setCoverState();

	bool isEscaping();

	void setEscaping(bool escape);

	void activateEscape();

	void deactivateEscape();

protected:
	CreatureObject(DummyConstructorParameter* param);

	virtual ~CreatureObject();

	String _return_getBehaviorScript;
	String _return_getBoneType;
	String _return_getCreatureFaction;
	String _return_getCreatureType;
	String _return_getCreatureWeapon;
	String _return_getCreatureWeaponArmorPiercing;
	String _return_getCreatureWeaponClass;
	String _return_getCreatureWeaponDamageType;
	String _return_getCreatureWeaponName;
	String _return_getCreatureWeaponTemp;
	String _return_getGender;
	String _return_getGuildName;
	String _return_getHideType;
	String _return_getLootGroup;
	String _return_getMeatType;
	String _return_getMood;
	String _return_getMoodStr;
	String _return_getPerformanceAnimation;
	String _return_getPerformanceName;
	String _return_getRaceName;
	String _return_getSkill;
	String _return_getSkillOrCertification;
	String _return_getTemplateString;
	String _return_getTerrainName;

	UnicodeString _return_getCharacterName;

	friend class CreatureObjectHelper;
};

class CreatureObjectImplementation;

class CreatureObjectAdapter : public TangibleObjectAdapter {
public:
	CreatureObjectAdapter(CreatureObjectImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void info(const String& message, bool forcedLog);

	void sendItemsTo(Player* player);

	void sendTo(Player* player, bool doClose);

	void sendDestroyTo(Player* player);

	void doCombatAnimation(CreatureObject* defender, unsigned int animcrc, bool hit);

	void doAnimation(const String& anim);

	void doEmote(unsigned long long targetid, unsigned int emoteid, bool showtext);

	void playEffect(const String& file, const String& aux);

	void showFlyText(const String& file, const String& aux, unsigned char red, unsigned char green, unsigned char blue);

	void sendCombatSpam(CreatureObject* defender, TangibleObject* item, unsigned int damage, const String& skill, bool areaSpam);

	void sendCombatSpamTrap(CreatureObject* defender, TangibleObject* item, unsigned int damage, const String& skill, bool areaSpam);

	void addDamage(CreatureObject* creature, unsigned int damage);

	unsigned int getDamage(CreatureObject* creature);

	void removeFromDamageMap(CreatureObject* target);

	bool isLootOwner(CreatureObject* creature);

	CreatureObject* getLootOwner();

	unsigned int getMitigation(const String& mit);

	void addCooldown(const String& key, int timeLimitInMilliseconds);

	void removeCooldown(const String& key);

	bool containsCooldown(const String& key);

	int getCooldownTimeRemaining(const String& key);

	bool hasCooldownExpired(const String& key);

	bool isIncapacitated();

	bool isDead();

	bool isKnockedDown();

	bool isKneeling();

	bool isProne();

	bool isStanding();

	bool isSkillAnimating();

	bool isInCombat();

	bool isDizzied();

	bool isStunned();

	bool isBlinded();

	bool isIntimidated();

	bool isSnared();

	bool isRooted();

	bool isDiseased();

	bool isPoisoned();

	bool isBleeding();

	bool isOnFire();

	bool isMounted();

	bool isRidingCreature();

	bool isMeditating();

	bool isCreature();

	bool isNPC();

	bool isBerserked();

	bool isTanoObjEquipped(TangibleObject* tano);

	bool isPet();

	bool hatesFaction(unsigned int faction);

	void updateKnockdownRecovery();

	void updateMood(const String& md);

	bool checkKnockdownRecovery();

	void updatePostureDownRecovery();

	void updatePostureUpRecovery();

	bool checkPostureDownRecovery();

	bool checkPostureUpRecovery();

	bool setState(unsigned long long state);

	bool clearState(unsigned long long state);

	void updateDotStates(unsigned long long oldStates, unsigned long long newStates);

	void updateStates();

	void clearStates();

	float calculateBFRatio();

	void removeState(unsigned long long state);

	void resetHAMBars(bool doUpdateClient);

	bool changeHAMBars(int health, int action, int mind, bool forcedChange);

	bool changeHAMWounds(int health, int action, int mind, bool forcedChange);

	void changeMaxHAMBars(int health, int action, int mind);

	bool changeAttributeBar(unsigned char attribute, int value, bool forcedChange);

	bool changeHealthBar(int value, bool forcedChange);

	bool changeStrengthBar(int value, bool forcedChange);

	bool changeConstitutionBar(int value, bool forcedChange);

	bool changeActionBar(int value, bool forcedChange);

	bool changeQuicknessBar(int value, bool forcedChange);

	bool changeStaminaBar(int value, bool forcedChange);

	bool changeMindBar(int value, bool forcedChange);

	bool changeFocusBar(int value, bool forcedChange);

	bool changeWillpowerBar(int value, bool forcedChange);

	void changeMaxAttributeBar(unsigned char attribute, int value, bool updateClient);

	void changeMaxHealthBar(int value, bool updateClient);

	void changeMaxStrengthBar(int value, bool updateClient);

	void changeMaxConstitutionBar(int value, bool updateClient);

	void changeMaxActionBar(int value, bool updateClient);

	void changeMaxQuicknessBar(int value, bool updateClient);

	void changeMaxStaminaBar(int value, bool updateClient);

	void changeMaxMindBar(int value, bool updateClient);

	void changeMaxFocusBar(int value, bool updateClient);

	void changeMaxWillpowerBar(int value, bool updateClient);

	bool changeWoundsBar(unsigned char attribute, int value, bool forcedChange);

	bool changeHealthWoundsBar(int value, bool forcedChange);

	bool changeStrengthWoundsBar(int value, bool forcedChange);

	bool changeConstitutionWoundsBar(int value, bool forcedChange);

	bool changeActionWoundsBar(int value, bool forcedChange);

	bool changeQuicknessWoundsBar(int value, bool forcedChange);

	bool changeStaminaWoundsBar(int value, bool forcedChange);

	bool changeMindWoundsBar(int value, bool forcedChange);

	bool changeFocusWoundsBar(int value, bool forcedChange);

	bool changeWillpowerWoundsBar(int value, bool forcedChange);

	void changeShockWounds(int bf);

	void setAttributeBar(unsigned char attribute, int value);

	void setHealthBar(int value);

	void setStrengthBar(int value);

	void setConstitutionBar(int value);

	void setActionBar(int value);

	void setQuicknessBar(int value);

	void setStaminaBar(int value);

	void setMindBar(int value);

	void setFocusBar(int value);

	void setWillpowerBar(int value);

	void setBaseAttributeBar(unsigned char attribute, int value, bool updateClient);

	void setBaseHealthBar(int value, bool updateClient);

	void setBaseStrengthBar(int value, bool updateClient);

	void setBaseConstitutionBar(int value, bool updateClient);

	void setBaseActionBar(int value, bool updateClient);

	void setBaseQuicknessBar(int value, bool updateClient);

	void setBaseStaminaBar(int value, bool updateClient);

	void setBaseMindBar(int value, bool updateClient);

	void setBaseFocusBar(int value, bool updateClient);

	void setBaseWillpowerBar(int value, bool updateClient);

	void setMaxAttributeBar(unsigned char attribute, int value, bool updateClient);

	void setMaxHealthBar(int value, bool updateClient);

	void setMaxStrengthBar(int value, bool updateClient);

	void setMaxConstitutionBar(int value, bool updateClient);

	void setMaxActionBar(int value, bool updateClient);

	void setMaxQuicknessBar(int value, bool updateClient);

	void setMaxStaminaBar(int value, bool updateClient);

	void setMaxMindBar(int value, bool updateClient);

	void setMaxFocusBar(int value, bool updateClient);

	void setMaxWillpowerBar(int value, bool updateClient);

	void setWoundsBar(unsigned char attribute, int value);

	void setHealthWoundsBar(int value);

	void setStrengthWoundsBar(int value);

	void setConstitutionWoundsBar(int value);

	void setActionWoundsBar(int value);

	void setQuicknessWoundsBar(int value);

	void setStaminaWoundsBar(int value);

	void setMindWoundsBar(int value);

	void setFocusWoundsBar(int value);

	void setWillpowerWoundsBar(int value);

	bool hasAttackDelay();

	void clearAttackDelay();

	void activateBurstRun(bool bypassChecks);

	bool hasQueuedState(unsigned int skillCRC);

	bool removeQueuedState(unsigned int skillCRC);

	bool addQueuedState(unsigned int skillCRC);

	void setMeditateState();

	void removePowerboost();

	bool isGuilded();

	void removeGroup();

	bool isInAGroup();

	bool isInGroupWith(CreatureObject* creature);

	void setGroupID(unsigned long long gid);

	void updateGroupId(unsigned long long id);

	void updateGroupInviterId(unsigned long long id);

	void updateTarget(unsigned long long targ);

	void updateTarget(SceneObject* targ);

	void clearTarget();

	void setActionCounter(unsigned int actioncntr);

	void setWeapon(Weapon* wep);

	void setCreatureLinkID(unsigned long long creatureID);

	void setAccuracy(int acc);

	void setAccuracyBonus(int accBonus);

	void setDamageBonus(int bonus);

	void setDefenseBonus(int bonus);

	void setLastMovementUpdateStamp(unsigned int tme);

	void setIgnoreMovementTests(int times);

	void setLevel(unsigned int lvl);

	void setHealthEncumbrance(unsigned int value);

	void setActionEncumbrance(unsigned int value);

	void setMindEncumbrance(unsigned int value);

	void changeHealthEncumbrance(int value);

	void changeActionEncumbrance(int value);

	void changeMindEncumbrance(int value);

	void updateServerMovementStamp();

	SceneObject* getInventoryItem(unsigned long long oid);

	void removeAllInventoryByMisoKey(String& mkey);

	TangibleObject* getItemByMisoKey(String& tma);

	void removeInventoryItem(unsigned long long oid);

	void removeInventoryItem(SceneObject* item);

	SceneObject* getLootItem(unsigned long long oid);

	void removeLootItem(unsigned long long oid);

	SceneObject* getBankItem(unsigned long long oid);

	void removeBankItem(unsigned long long oid);

	Inventory* getInventory();

	Container* getLootContainer();

	Container* getBankContainer();

	BankInventory* getBankInventory();

	unsigned long long getNewItemID();

	Weapon* getWeapon();

	Armor* getArmor(int type);

	void addSkillMod(const String& name, int mod, bool updateClient);

	int getSkillMod(const String& name);

	bool hasSkillMod(const String& name);

	int getSkillModBonus(const String& name);

	void addSkillModBonus(const String& name, int mod, bool updateClient);

	bool hasSkillModBonus(const String& name);

	int getAccuracy();

	int getAccuracyBonus();

	int getDefenseBonus();

	int getDamageBonus();

	int getConditionDamage();

	int getMaxCondition();

	int getCondition();

	MountCreature* getMount();

	unsigned long long getLastServerMovementStamp();

	unsigned long long getCreatureLinkID();

	float getDistanceTo(SceneObject* targetCreature);

	float getHeight();

	unsigned int getCreatureSkillsCount();

	unsigned int getNewCreatureSkillsCount(int cnt);

	unsigned int getLastMovementUpdateStamp();

	int getIgnoreMovementTests();

	unsigned int getLevel();

	int getCenteredBonus();

	void sendSystemMessage(const String& message);

	void sendSystemMessage(UnicodeString& message);

	void sendSystemMessage(const String& file, const String& str, unsigned long long targetid);

	void updateSpeed(float speed, float acceleration);

	void addInventoryItem(TangibleObject* item);

	void addInventoryResource(ResourceContainer* rcno);

	void addLootItem(TangibleObject* item);

	void startDancing(const String& anim, bool changeDance);

	void startPlayingMusic(const String& anim, bool changeDance);

	void startWatch(unsigned long long entid);

	void startListen(unsigned long long entid);

	void stopWatch(unsigned long long entid, bool doSendPackets, bool forced, bool doLock, bool outOfRange);

	void stopListen(unsigned long long entid, bool doSendPackets, bool forced, bool doLock, bool outOfRange);

	bool isPlayingMusic();

	bool isDancing();

	void stopDancing();

	void stopPlayingMusic();

	void addListener(CreatureObject* creature);

	void addWatcher(CreatureObject* creature);

	void removeListener(CreatureObject* creature);

	void removeWatcher(CreatureObject* creature);

	void doFlourish(const String& modifier);

	void doPerformanceAction();

	void doEntertainerPatronEffects();

	void addEntertainerFlourishBuff();

	void addEntertainerBuffDuration(int performanceType, float duration);

	void setEntertainerBuffDuration(int performanceType, float duration);

	float getEntertainerBuffDuration(int performanceType);

	void setEntertainerBuffStrength(int performanceType, float strength);

	float getEntertainerBuffStrength(int performanceType);

	void activateRecovery();

	int getCreatureSkillsSize();

	String& getSkill(int idx);

	bool hasSkill(unsigned int skillCRC);

	String& getSkillOrCertification(int idx);

	int getSkillAndCertificationSize();

	void mountCreature(MountCreature* mnt, bool lockMount);

	void dismount(bool lockMount, bool ignoreCooldown);

	void addCashCredits(unsigned int credits);

	void addBankCredits(unsigned int credits);

	void updateCashCredits(unsigned int credits);

	void updateBankCredits(unsigned int credits);

	void subtractCashCredits(unsigned int credits);

	void subtractBankCredits(unsigned int credits);

	void setCashCredits(int credits);

	void setBankCredits(int credits);

	void addBuff(int buffCRC, float duration);

	void applyBuff(BuffObject* buff);

	void removeBuff(const unsigned int buffCRC, bool remove);

	bool hasSpice();

	bool verifyCashCredits(unsigned int creditsToRemove);

	bool verifyBankCredits(unsigned int creditsToRemove);

	bool isOnFullHealth();

	bool hasStates();

	bool hasState(unsigned long long state);

	bool isResuscitable();

	void setTimeOfDeath(unsigned long long mtime);

	unsigned long long getTimeOfDeath();

	bool hasHealthDamage();

	bool hasActionDamage();

	bool hasMindDamage();

	bool hasDamage();

	bool hasWounds(bool h, bool a, bool m);

	bool hasWound(unsigned char attribute);

	bool hasShockWounds();

	unsigned char getNextWoundedAttribute(bool h, bool a, bool m);

	bool isAttackable();

	bool isAttackableBy(CreatureObject* attacker);

	bool isListening();

	bool isWatching();

	UnicodeString& getCharacterName();

	String& getRaceName();

	String& getGender();

	String& getCreatureType();

	String& getTerrainName();

	void getHairAppearance(String& appearance);

	bool isOvert();

	unsigned long long getStateBitmask();

	unsigned char getPosture();

	unsigned int getFaction();

	bool isRebel();

	bool isNeutral();

	bool isImperial();

	unsigned int getPvpStatusBitmask();

	unsigned char getFactionRank();

	unsigned int getBankCredits();

	unsigned int getCashCredits();

	unsigned int getWoundsUpdateCounter();

	unsigned int getNewWoundsUpdateCounter(int upd);

	void updateHAMBars();

	void updateBaseStats();

	int getBaseAttribute(unsigned char attribute);

	int getBaseHealth();

	int getBaseStrength();

	int getBaseConstitution();

	int getBaseAction();

	int getBaseQuickness();

	int getBaseStamina();

	int getBaseMind();

	int getBaseFocus();

	int getBaseWillpower();

	int getAttribute(unsigned char attribute);

	int getHealth();

	int getStrength();

	int getConstitution();

	int getAction();

	int getQuickness();

	int getStamina();

	int getMind();

	int getFocus();

	int getWillpower();

	int getAttributeMax(unsigned char attribute);

	int getHealthMax();

	int getStrengthMax();

	int getConstitutionMax();

	int getActionMax();

	int getQuicknessMax();

	int getStaminaMax();

	int getMindMax();

	int getFocusMax();

	int getWillpowerMax();

	int getWounds(unsigned char attribute);

	unsigned char getWoundsArraySize();

	int getHealthWounds();

	int getStrengthWounds();

	int getConstitutionWounds();

	int getActionWounds();

	int getQuicknessWounds();

	int getStaminaWounds();

	int getMindWounds();

	int getFocusWounds();

	int getWillpowerWounds();

	unsigned int getAttributeDamage(unsigned char attribute);

	unsigned int getHealthDamage();

	unsigned int getActionDamage();

	unsigned int getMindDamage();

	unsigned int getShockWounds();

	unsigned int getHAMUpdateCounter();

	unsigned int getNewHAMUpdateCounter(int cnt);

	unsigned int getHAMMaxUpdateCounter();

	unsigned int getNewHAMMaxUpdateCounter(int cnt);

	unsigned int getHAMBaseUpdateCounter();

	unsigned int getNewHAMBaseUpdateCounter(int cnt);

	unsigned int getEncumbUpdateCounter();

	unsigned int getNewEncumbUpdateCounter(int cnt);

	unsigned int getHealthEncumbrance();

	unsigned int getActionEncumbrance();

	unsigned int getMindEncumbrance();

	int getpbHA();

	int getpbMind();

	int getpbTick();

	int getpbBonus();

	unsigned long long getTargetID();

	SceneObject* getTarget();

	unsigned long long getWeaponID();

	unsigned long long getGroupID();

	unsigned long long getGuildID();

	Guild* getGuild();

	unsigned int getActionCounter();

	float getSpeed();

	float getAcceleration();

	String& getPerformanceAnimation();

	unsigned int getPerformanceCounter();

	unsigned int getInstrumentID();

	int getInstrumentType();

	String& getPerformanceName();

	String& getMood();

	String& getMoodStr();

	unsigned char getMoodID();

	unsigned long long getGroupInviterID();

	unsigned long long getGroupInviteCounter();

	unsigned long long getNewGroupInviteCounter();

	unsigned long long getWatchID();

	unsigned long long getListenID();

	bool isInBuilding();

	int getBuildingType();

	SceneObject* getBuilding();

	String& getGuildName();

	int getWeaponSpeedModifier();

	unsigned int getSkillBoxesUpdateCounter();

	unsigned int getSkillModsCounter();

	unsigned int getNewSkillModsCounter(int cnt);

	String& getHideType();

	String& getBoneType();

	String& getMeatType();

	int getBoneMax();

	int getHideMax();

	int getMeatMax();

	int getMilk();

	bool hasOrganics();

	int getCreatureHealth();

	int getXP();

	int isHealer();

	int isPack();

	int isHerd();

	int isStalker();

	int isKiller();

	int isAggressive();

	String& getBehaviorScript();

	String& getCreatureFaction();

	String& getCreatureWeapon();

	String& getCreatureWeaponName();

	String& getCreatureWeaponTemp();

	String& getCreatureWeaponClass();

	int getCreatureWeaponEquipped();

	int getCreatureWeaponMinDamage();

	int getCreatureWeaponMaxDamage();

	float getCreatureWeaponAttackSpeed();

	String& getCreatureWeaponDamageType();

	String& getCreatureWeaponArmorPiercing();

	float getInternalNPCDamageModifier();

	float getTame();

	String& getLootGroup();

	unsigned int getFerocity();

	bool isBaby();

	void setBaseAttribute(unsigned char attribute, int value);

	void setBaseHealth(int value);

	void setBaseStrength(int value);

	void setBaseConstitution(int value);

	void setBaseAction(int value);

	void setBaseQuickness(int value);

	void setBaseStamina(int value);

	void setBaseMind(int value);

	void setBaseFocus(int value);

	void setBaseWillpower(int value);

	void setAttribute(unsigned char attribute, int value);

	void setHealth(int value);

	void setStrength(int value);

	void setConstitution(int value);

	void setAction(int value);

	void setQuickness(int value);

	void setStamina(int value);

	void setMind(int value);

	void setFocus(int value);

	void setWillpower(int value);

	void setAttributeMax(unsigned char attribute, int value);

	void setHealthMax(int value);

	void setStrengthMax(int value);

	void setConstitutionMax(int value);

	void setActionMax(int value);

	void setQuicknessMax(int value);

	void setStaminaMax(int value);

	void setMindMax(int value);

	void setFocusMax(int value);

	void setWillpowerMax(int value);

	void setWounds(unsigned char attribute, int value);

	void setHealthWounds(int value);

	void setStrengthWounds(int value);

	void setConstitutionWounds(int value);

	void setActionWounds(int value);

	void setQuicknessWounds(int value);

	void setStaminaWounds(int value);

	void setMindWounds(int value);

	void setFocusWounds(int value);

	void setWillpowerWounds(int value);

	void setShockWounds(int value);

	void setWoundsUpdateCounter(unsigned int count);

	void changeAttributeMax(unsigned char attribute, int value);

	void changeHealthMax(int value);

	void changeStrengthMax(int value);

	void changeConstitutionMax(int value);

	void changeActionMax(int value);

	void changeQuicknessMax(int value);

	void changeStaminaMax(int value);

	void changeMindMax(int value);

	void changeFocusMax(int value);

	void changeWillpowerMax(int value);

	void changeAttribute(unsigned char attribute, int value);

	void changeHealth(int value);

	void changeStrength(int value);

	void changeConstitution(int value);

	void changeAction(int value);

	void changeQuickness(int value);

	void changeStamina(int value);

	void changeMind(int value);

	void changeFocus(int value);

	void changeWillpower(int value);

	void setpbHA(int value);

	void setpbMind(int value);

	void setpbTick(int value);

	void setpbBonus(unsigned int value);

	void setSpeed(float spd);

	void setAcceleration(float acc);

	void changeConditionDamage(int amount);

	void setMaxCondition(int condition);

	void setPosture(unsigned char state, bool overrideDizzy, bool objectInteraction, float objX, float objY, float objZ);

	void setPvpStatusBitmask(unsigned int mask);

	void setFactionRank(unsigned char rank, bool updateClient);

	void setDizziedState();

	void setStunnedState();

	void setBlindedState();

	void setIntimidatedState();

	void setSnaredState();

	void setRootedState();

	void setBerserkedState(unsigned int duration);

	int addDotState(CreatureObject* attacker, unsigned long long dotID, unsigned long long dotType, int str, int type, int duration, float potency, int defense);

	bool healDot(int dotType, int reduction);

	bool setNextAttackDelay(int del);

	void setCharacterName(const String& name);

	void setCharacterName(const UnicodeString& name);

	void setTerrainName(const String& name);

	void updateCharacterAppearance();

	void setHairAppearance(String& cust);

	void setHairAppearanceAttribute(unsigned char type, unsigned char value);

	void setHairAppearanceAttribute(String& type, unsigned char value);

	void setRaceName(const String& name);

	void setGender(const String& name);

	void setCreatureType(const String& name);

	void setFaction(unsigned int fac);

	void setHeight(float h);

	void setMood(unsigned char mdid);

	void setMood(const String& m);

	void setGroup(GroupObject* Group);

	void setMount(MountCreature* mount);

	void explode(int level, bool destroy);

	BuffObject* getBuffObject(const unsigned int buffCRC);

	bool hasBuff(const unsigned int buffCRC);

	bool healState(CreatureObject* target, unsigned long long state);

	void deactivateWoundTreatment();

	void activateWoundTreatment();

	void deactivateInjuryTreatment(bool isRangedStim);

	void activateInjuryTreatment();

	void deactivateStateTreatment();

	void activateStateTreatment();

	void deactivateConditionTreatment();

	void activateConditionTreatment();

	bool canTreatWounds();

	bool canTreatInjuries();

	bool canTreatStates();

	bool canTreatConditions();

	int getMedicalFacilityRating();

	void setBoneType(const String& bone);

	void setBoneMax(int bonemax);

	void setHideType(const String& hide);

	void setHideMax(int hidemax);

	void setMeatType(const String& meat);

	void setMeatMax(int meatmax);

	void setMilk(int milkamt);

	void setXP(int xp);

	void setHealer(int heale);

	void setPack(int pack);

	void setHerd(int herd);

	void setStalker(int stalker);

	void setKiller(int killer);

	void setAggressive(int aggressive);

	void setBehaviorScript(const String& behaviorScript);

	void setLootGroup(const String& lootgroup);

	void setTame(float tme);

	void setCreatureFaction(const String& cfac);

	void setInternalNPCDamageModifier(float indm);

	void setFerocity(unsigned int fero);

	void setBaby(bool baby);

	void setCreatureWeapon(const String& wpon);

	void setCreatureWeaponName(const String& weaponname);

	void setCreatureWeaponTemp(const String& weapontemp);

	void setCreatureWeaponClass(const String& weaponclass);

	void setCreatureWeaponEquipped(int weaponequ);

	void setCreatureWeaponMinDamage(int weaponmindam);

	void setCreatureWeaponMaxDamage(int weaponmaxdam);

	void setCreatureWeaponAttackSpeed(float weaponattackspeed);

	void setCreatureWeaponDamageType(const String& weapondamtype);

	void setCreatureWeaponArmorPiercing(const String& weaponarmorpiercing);

	bool isFrozen();

	void setFrozen(bool flag);

	String& getTemplateString();

	void setTemplateString(const String& tmpString);

	void clearTemplateString();

	void say(UnicodeString& message, unsigned int moodid, unsigned int mood2);

	void say(const String& file, const String& str, StfParameter* param, unsigned int moodid, unsigned int mood2);

	void setCamoType(unsigned int cType);

	unsigned int getCamoType();

	void activateCamo(unsigned int camoCRC, unsigned int time, unsigned int ms);

	void deactivateCamo(bool forced);

	void activateCamoLock();

	bool isCamoCooldownActive();

	int getCamoCooldownLeft();

	int getMaskScent();

	void setMaskScent(int value);

	Player* getCamoXPTraget();

	void setCamoXPTraget(Player* xpTaget);

	void setCampModifier(int mod);

	int getCampModifier();

	bool isInCamp();

	int getCampAggroMod();

	void setCampAggroMod(int mod);

	int getNumberOfPets();

	void setNumberOfPets(int num);

	unsigned char getLowestHAMAttribute();

	void onIncapacitated(SceneObject* attacker);

	void onIncapacitationRecovery();

	void onDeath();

	void onKilled(SceneObject* killer);

	void onResuscitated(SceneObject* healer);

	void onDamageHealed(SceneObject* healer, unsigned char attribute, unsigned int amount);

	void onWoundHealed(SceneObject* healer, unsigned char attribute, unsigned int amount);

	void onHealEnhanced(SceneObject* enhancer, unsigned char attribute, unsigned int amount, float duration);

	void onBlinded();

	void onDizzied();

	void onStunned();

	void onIntimidated();

	void onEquip(TangibleObject* item);

	void onUnequip(TangibleObject* item);

	void onChangeWeapon(Weapon* weapon);

	void onChangeArmor(Armor* armor);

	void onReceiveDamage(SceneObject* attacker, unsigned char attribute, unsigned int amount);

	void onRegenerateHAM();

	bool inflictDamage(CreatureObject* victim, unsigned char attribute, unsigned int damage);

	void incapacitateSelf();

	void recoverFromIncapacitation();

	void die();

	void equipItem(TangibleObject* item);

	void unequipItem(TangibleObject* item);

	bool canRecoverFromIncapacitation();

	void setBerserkDamage(unsigned int damage);

	unsigned int getBerserkDamage();

	unsigned int getAimMod();

	void setAimMod(unsigned int mod);

	bool isAiming();

	void setAimingState();

	bool isInCover();

	void setCoverState();

	bool isEscaping();

	void setEscaping(bool escape);

	void activateEscape();

	void deactivateEscape();

protected:
	String _param0_info__String_bool_;
	String _param0_doAnimation__String_;
	String _param0_playEffect__String_String_;
	String _param1_playEffect__String_String_;
	String _param0_showFlyText__String_String_char_char_char_;
	String _param1_showFlyText__String_String_char_char_char_;
	String _param3_sendCombatSpam__CreatureObject_TangibleObject_int_String_bool_;
	String _param3_sendCombatSpamTrap__CreatureObject_TangibleObject_int_String_bool_;
	String _param0_getMitigation__String_;
	String _param0_addCooldown__String_int_;
	String _param0_removeCooldown__String_;
	String _param0_containsCooldown__String_;
	String _param0_getCooldownTimeRemaining__String_;
	String _param0_hasCooldownExpired__String_;
	String _param0_updateMood__String_;
	String _param0_removeAllInventoryByMisoKey__String_;
	String _param0_getItemByMisoKey__String_;
	String _param0_addSkillMod__String_int_bool_;
	String _param0_getSkillMod__String_;
	String _param0_hasSkillMod__String_;
	String _param0_getSkillModBonus__String_;
	String _param0_addSkillModBonus__String_int_bool_;
	String _param0_hasSkillModBonus__String_;
	String _param0_sendSystemMessage__String_;
	UnicodeString _param0_sendSystemMessage__UnicodeString_;
	String _param0_sendSystemMessage__String_String_long_;
	String _param1_sendSystemMessage__String_String_long_;
	String _param0_startDancing__String_bool_;
	String _param0_startPlayingMusic__String_bool_;
	String _param0_doFlourish__String_;
	String _param0_getHairAppearance__String_;
	String _param0_setCharacterName__String_;
	UnicodeString _param0_setCharacterName__UnicodeString_;
	String _param0_setTerrainName__String_;
	String _param0_setHairAppearance__String_;
	String _param0_setHairAppearanceAttribute__String_char_;
	String _param0_setRaceName__String_;
	String _param0_setGender__String_;
	String _param0_setCreatureType__String_;
	String _param0_setMood__String_;
	String _param0_setBoneType__String_;
	String _param0_setHideType__String_;
	String _param0_setMeatType__String_;
	String _param0_setBehaviorScript__String_;
	String _param0_setLootGroup__String_;
	String _param0_setCreatureFaction__String_;
	String _param0_setCreatureWeapon__String_;
	String _param0_setCreatureWeaponName__String_;
	String _param0_setCreatureWeaponTemp__String_;
	String _param0_setCreatureWeaponClass__String_;
	String _param0_setCreatureWeaponDamageType__String_;
	String _param0_setCreatureWeaponArmorPiercing__String_;
	String _param0_setTemplateString__String_;
	UnicodeString _param0_say__UnicodeString_int_int_;
	String _param0_say__String_String_StfParameter_int_int_;
	String _param1_say__String_String_StfParameter_int_int_;
};

class CreatureObjectHelper : public DistributedObjectClassHelper, public Singleton<CreatureObjectHelper> {
	static CreatureObjectHelper* staticInitializer;

public:
	CreatureObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<CreatureObjectHelper>;
};

#include "../tangible/TangibleObjectImplementation.h"

class CreatureObjectServant : public TangibleObjectImplementation {
public:
	CreatureObject* _this;

public:
	CreatureObjectServant(unsigned long long oid, int type);
	virtual ~CreatureObjectServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*CREATUREOBJECT_H_*/
