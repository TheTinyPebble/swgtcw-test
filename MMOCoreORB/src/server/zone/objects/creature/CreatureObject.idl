/*
Copyright (C) 2007 <SWGEmu>

This File is part of Core3.

This program is free software; you can redistribute
it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software
Foundation; either version 2 of the License,
or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for
more details.

You should have received a copy of the GNU Lesser General
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Linking Engine3 statically or dynamically with other modules
is making a combined work based on Engine3.
Thus, the terms and conditions of the GNU Lesser General Public License
cover the whole combination.

In addition, as a special exception, the copyright holders of Engine3
give you permission to combine Engine3 program with free software
programs or libraries that are released under the GNU LGPL and with
code included in the standard release of Core3 under the GNU LGPL
license (or modified versions of such code, with unchanged license).
You may copy and distribute such a system following the terms of the
GNU LGPL for Engine3 and the licenses of the other code concerned,
provided that you include the source code of that other code when
and as the GNU LGPL requires distribution of source code.

Note that people who make modified versions of Engine3 are not obligated
to grant this special exception for their modified versions;
it is their choice whether to do so. The GNU Lesser General Public License
gives permission to release a modified version without this exception;
this exception also makes it possible to release a modified version
which carries forward this exception.
*/

package server.zone.objects.creature;

import server.zone.objects.tangible.TangibleObject;
import engine.lua.LuaObject;
import system.util.Vector;
import server.zone.packets.object.StfParameter;

//import server.zone.objects.player.professions.SkillBox;

include server.zone.objects.scene.SceneObject;

class CreatureObject extends TangibleObject {
	protected int bankCredits;
	protected int cashCredits;
	
	protected int gender;
	protected int species;
	
	protected dereferenced Vector<int> baseHealth;
	protected unsigned int baseHealthUpdateCounter;
	
	protected byte posture;
	protected byte factionRank;
	
	protected unsigned long creatureLinkID;
	protected float shockWounds;
	
	protected dereferenced Vector<int> wounds;
	protected unsigned int woundsUpdateCounter;
	
	protected unsigned long stateBitmask;
	
	//protected VectorMap<string, SkillBox> skillBoxes;
	
	protected dereferenced Vector<int> encumbrances;
	protected unsigned int encumbrancesUpdateCounter;
	
	// skillmods
	
	protected float runSpeed;
	protected float walkSpeed;
	protected float terrainNegotiation;
	protected float runAcceleration;
	protected float walkAcceleration;
	protected float height;
	protected float slopeModPercent;
	protected float slopeModAngle;
	
	protected unsigned long listenToID;
	
	protected short level;
	
	protected string performanceAnimation;
	protected string moodString;
	
	protected unsigned long weaponID;
	protected unsigned long groupID;
	protected unsigned long groupInviterID;
	protected unsigned long groupInviteCounter;
	
	protected int guildID;
	protected unsigned long targetID;
	protected byte moodID;
	protected int performanceCounter;
	protected int instrumentID;
	
	protected dereferenced Vector<int> hamList;
	protected unsigned int hamListUpdateCounter;
	
	protected dereferenced Vector<int> maxHamList;
	protected unsigned int maxHamListUpdateCounter;
	
	protected byte frozen;
	
	protected string templateString;
	
	public static final int HUMAN = 0;
	public static final int RODIAN = 1;
	public static final int TRANDOSHAN = 2;
	public static final int MONCAL = 3;
	public static final int WOOKIE = 4;
	public static final int BOTHAN = 5;
	public static final int TWILEK = 6;
	public static final int ZABRAK = 7;
	public static final int ITHORIAN = 0x21;
	public static final int SULLUSTAN = 0x31;
	
	public static final int MALE = 0;
	public static final int FEMALE = 1;

	public native CreatureObject(LuaObject templateData);
	
	public native void clearQueueAction(unsigned int actioncntr, float timer = 0, unsigned int tab1 = 0, unsigned int tab2 = 0);

	public native void sendBaselinesTo(SceneObject player);
	public native void sendSystemMessage(final string message);
	public native void sendSystemMessage(unicode message);
	public native void sendSystemMessage(final string file, final string str, unsigned long targetid = 0);
	public native void sendSlottedObjectsTo(SceneObject player);
	public local native void sendSystemMessage(final string file, final string str, StfParameter param);
	
	public int getBankCredits() {
		return bankCredits;
	}
	
	public int getCashCredits() {
		return cashCredits;
	}
	
	/*public Vector<int> getBaseHealth() {
		return baseHealth;
	}*/
	
	public int getBaseHealth(int idx) {
		return baseHealth.get(idx);
	}
	
	public unsigned int getBaseHealthUpdateCounter() {
		return baseHealthUpdateCounter;
	}
	
	public int getWounds(int idx) {
		return wounds.get(idx);
	}
	
	public unsigned int getWoundsUpdateCounter() {
		return woundsUpdateCounter;
	}
	
	public unsigned int getEncumbrancesUpdateCounter() {
		return encumbrancesUpdateCounter;
	}
	
	public unsigned int getHamListUpdateCounter() {
		return hamListUpdateCounter;
	}
	
	public int getHAM(int idx) {
		return hamList.get(idx);
	}
	
	public unsigned int getMaxHamListUpdateCounter() {
		return maxHamListUpdateCounter;
	}
	
	public int getMaxHAM(int idx) {
		return maxHamList.get(idx);
	}
	
	public int getEncumbrance(int idx) {
		return encumbrances.get(idx);
	}
	
	public byte getPosture() {
		return posture;
	}
	
	public byte getFactionRank() {
		return factionRank;
	}
	
	public unsigned long getCreatureLinkID() {
		return creatureLinkID;
	}
	
	public float getShockWounds() {
		return shockWounds;
	}
	
	public unsigned long getStateBitmask() {
		return stateBitmask;
	}
	
	public unsigned long getListenID() {
		return listenToID;
	}
	
	public float getRunSpeed() {
		return runSpeed;
	}
	
	public float getWalkSpeed() {
		return walkSpeed;
	}
	
	public float getTerrainNegotiation() {
		return terrainNegotiation;	
	}
	
	public float getRunAcceleration() {
		return runAcceleration;
	}
	
	public float getWalkAcceleration() {
		return walkAcceleration;
	}
	
	public int getLevel() {
		return level;
	}
	
	public string getPerformanceAnimation() {
		return performanceAnimation;
	}
	
	public string getMoodString() {
		return moodString;
	}
	
	public unsigned long getWeaponID() {
		return weaponID;
	}
	
	public unsigned long getGroupID() {
		return groupID;
	}
	
	public unsigned long getGroupInviterID() {
		return groupInviterID;
	}
	
	public unsigned long getGroupInviteCounter() {
		return groupInviteCounter;
	}
	
	public int getGuildID() {
		return guildID;
	}
	
	public unsigned long getTargetID() {
		return targetID;
	}
	
	public byte getMoodID() {
		return moodID;
	}
	
	public float getSlopeModPercent() {
		return slopeModPercent;
	}
	
	public int getPerformanceCounter() {
		return performanceCounter;
	}
	
	public int getInstrumentID() {
		return instrumentID;
	}
	
	public byte getFrozen() {
		return frozen;
	}
	
	public float getHeight() {
		return height;
	}
	
	public int getSpecies() {
		return species;
	}
	
	public void setHeight(float heigh) {
		height = heigh;
	}
	
	public native void setWeaponID(unsigned long objectID, boolean notifyClient = false);
	public native void setTargetID(unsigned long targetID, boolean notifyClient = false);
	
}