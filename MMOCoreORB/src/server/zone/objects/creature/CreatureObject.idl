/*
Copyright (C) 2007 <SWGEmu>

This File is part of Core3.

This program is free software; you can redistribute
it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software
Foundation; either version 2 of the License,
or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for
more details.

You should have received a copy of the GNU Lesser General
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Linking Engine3 statically or dynamically with other modules
is making a combined work based on Engine3.
Thus, the terms and conditions of the GNU Lesser General Public License
cover the whole combination.

In addition, as a special exception, the copyright holders of Engine3
give you permission to combine Engine3 program with free software
programs or libraries that are released under the GNU LGPL and with
code included in the standard release of Core3 under the GNU LGPL
license (or modified versions of such code, with unchanged license).
You may copy and distribute such a system following the terms of the
GNU LGPL for Engine3 and the licenses of the other code concerned,
provided that you include the source code of that other code when
and as the GNU LGPL requires distribution of source code.

Note that people who make modified versions of Engine3 are not obligated
to grant this special exception for their modified versions;
it is their choice whether to do so. The GNU Lesser General Public License
gives permission to release a modified version without this exception;
this exception also makes it possible to release a modified version
which carries forward this exception.
*/

include "engine/service/proto/BaseMessage";
include "engine/service/proto/StandaloneBaseMessage";
include "../../packets/object/StfParameter";

import "../scene/SceneObject";

import "../tangible/Inventory";

import "../tangible/inventory/BankInventory";

import "../tangible/Container";

import "../tangible/TangibleObject";

import "../tangible/weapons/Weapon";

import "../tangible/wearables/Armor";

import "../group/GroupObject";

import "../player/Player";

import "../building/BuildingObject";

import "../creature/mount/MountCreature";
import "../creature/Creature";

import "../guild/Guild";

import "skills/Skill";

import "buffs/BuffObject";

import "../tangible/resource/ResourceContainer";

interface CreatureObject implements TangibleObject {
	CreatureObject(unsigned long oid) {
		super(oid, int type);
	}

	void info(const String message, boolean forcedLog = false);

	void sendItemsTo(Player player);
	void sendTo(Player player, boolean doClose = true);

	void sendDestroyTo(Player player);

	// combat
	void doCombatAnimation(CreatureObject defender, unsigned int animcrc, boolean hit = false);
	void doAnimation(const String anim);
	void doEmote(unsigned long targetid, unsigned int emoteid, boolean showtext);
	void playEffect(const String file, const String aux);
	void showFlyText(const String file, const String aux, unsigned char red, unsigned char green, unsigned char blue);
	void sendCombatSpam(CreatureObject defender, TangibleObject item, unsigned int damage, const String skill, boolean areaSpam = true);
	void sendCombatSpamTrap(CreatureObject defender, TangibleObject item, unsigned int damage, const String skill, boolean areaSpam = true);

	void addDamage(CreatureObject creature, unsigned int damage);

	unsigned int getDamage(CreatureObject creature);
	void removeFromDamageMap(CreatureObject target);

	boolean isLootOwner(CreatureObject creature);
	CreatureObject getLootOwner();

	unsigned int getMitigation(const String mit);

	void addCooldown(const String key, int timeLimitInMilliseconds);
	void removeCooldown(const String key);
	boolean containsCooldown(const String key);
	int getCooldownTimeRemaining(const String key);
	boolean hasCooldownExpired(const String key);

	boolean isIncapacitated();
	boolean isDead();
	boolean isKnockedDown();
	boolean isKneeling();
	boolean isProne();
	boolean isStanding();
	boolean isInCombat();
	boolean isDizzied();
	boolean isStunned();
	boolean isBlinded();
	boolean isIntimidated();
	boolean isSnared();
	boolean isRooted();
	boolean isDiseased();
	boolean isPoisoned();
	boolean isBleeding();
	boolean isOnFire();
	boolean isMounted();
	boolean isRidingCreature();
	boolean isMeditating();
	boolean isCreature();
	boolean isNPC();

	boolean isTanoObjEquipped(TangibleObject tano);

	//Future Creature Handler Stuff
	boolean isPet();
	//boolean isPetOf(CreatureObject owner);
	//CreatureObject getPetOf(CreatureObject owner);

	boolean hatesFaction(unsigned int faction);

	void updateKnockdownRecovery();

	void updateMood(const String md);

	boolean checkKnockdownRecovery();

	void updatePostureDownRecovery();

	void updatePostureUpRecovery();

	boolean checkPostureDownRecovery();

	boolean checkPostureUpRecovery();

	boolean setState(unsigned long state);
	boolean clearState(unsigned long state);
	void updateDotStates(unsigned long oldStates,unsigned long newStates);
	void updateStates();
	void clearStates();
	float calculateBFRatio();
	void removeState(unsigned long state);

	// HAM methods
	void resetHAMBars(boolean doUpdateClient);

	boolean changeHAMBars(int health, int action, int mind, boolean forcedChange = false);
	boolean changeHAMWounds(int health, int action, int mind, boolean forcedChange = false);
	void changeMaxHAMBars(int health, int action, int mind);

	// Change Current HAM
	boolean changeAttributeBar(unsigned char attribute, int value, boolean forcedChange = false);
	boolean changeHealthBar(int value, boolean forcedChange = false);
	boolean changeStrengthBar(int value, boolean forcedChange = false);
	boolean changeConstitutionBar(int value, boolean forcedChange = false);
	boolean changeActionBar(int value, boolean forcedChange = false);
	boolean changeQuicknessBar(int value, boolean forcedChange = false);
	boolean changeStaminaBar(int value, boolean forcedChange = false);
	boolean changeMindBar(int value, boolean forcedChange = false);
	boolean changeFocusBar(int value, boolean forcedChange = false);
	boolean changeWillpowerBar(int value, boolean forcedChange = false);

	// Change Max HAM
	void changeMaxAttributeBar(unsigned char attribute, int value, boolean updateClient = true);
	void changeMaxHealthBar(int value, boolean updateClient = true);
	void changeMaxStrengthBar(int value, boolean updateClient = true);
	void changeMaxConstitutionBar(int value, boolean updateClient = true);
	void changeMaxActionBar(int value, boolean updateClient = true);
	void changeMaxQuicknessBar(int value, boolean updateClient = true);
	void changeMaxStaminaBar(int value, boolean updateClient = true);
	void changeMaxMindBar(int value, boolean updateClient = true);
	void changeMaxFocusBar(int value, boolean updateClient = true);
	void changeMaxWillpowerBar(int value, boolean updateClient = true);

	// Change HAM Wounds
	boolean changeWoundsBar(unsigned char attribute, int value, boolean forcedChange = false);
	boolean changeHealthWoundsBar(int value, boolean forcedChange = false);
	boolean changeStrengthWoundsBar(int value, boolean forcedChange = false);
	boolean changeConstitutionWoundsBar(int value, boolean forcedChange = false);
	boolean changeActionWoundsBar(int value, boolean forcedChange = false);
	boolean changeQuicknessWoundsBar(int value, boolean forcedChange = false);
	boolean changeStaminaWoundsBar(int value, boolean forcedChange = false);
	boolean changeMindWoundsBar(int value, boolean forcedChange = false);
	boolean changeFocusWoundsBar(int value, boolean forcedChange = false);
	boolean changeWillpowerWoundsBar(int value, boolean forcedChange = false);

	void changeShockWounds(int bf);

	// Set Current HAM
	void setAttributeBar(unsigned char attribute, int value);
	void setHealthBar(int value);
	void setStrengthBar(int value);
	void setConstitutionBar(int value);
	void setActionBar(int value);
	void setQuicknessBar(int value);
	void setStaminaBar(int value);
	void setMindBar(int value);
	void setFocusBar(int value);
	void setWillpowerBar(int value);

	// Set Base HAM
	void setBaseAttributeBar(unsigned char attribute, int value, boolean updateClient = true);
	void setBaseHealthBar(int value, boolean updateClient = true);
	void setBaseStrengthBar(int value, boolean updateClient = true);
	void setBaseConstitutionBar(int value, boolean updateClient = true);
	void setBaseActionBar(int value, boolean updateClient = true);
	void setBaseQuicknessBar(int value, boolean updateClient = true);
	void setBaseStaminaBar(int value, boolean updateClient = true);
	void setBaseMindBar(int value, boolean updateClient = true);
	void setBaseFocusBar(int value, boolean updateClient = true);
	void setBaseWillpowerBar(int value, boolean updateClient = true);

	// Set Max HAM
	void setMaxAttributeBar(unsigned char attribute, int value, boolean updateClient = true);
	void setMaxHealthBar(int value, boolean updateClient = true);
	void setMaxStrengthBar(int value, boolean updateClient = true);
	void setMaxConstitutionBar(int value, boolean updateClient = true);
	void setMaxActionBar(int value, boolean updateClient = true);
	void setMaxQuicknessBar(int value, boolean updateClient = true);
	void setMaxStaminaBar(int value, boolean updateClient = true);
	void setMaxMindBar(int value, boolean updateClient = true);
	void setMaxFocusBar(int value, boolean updateClient = true);
	void setMaxWillpowerBar(int value, boolean updateClient = true);

	// Set HAM Wounds
	void setWoundsBar(unsigned char attribute, int value);
	void setHealthWoundsBar(int value);
	void setStrengthWoundsBar(int value);
	void setConstitutionWoundsBar(int value);
	void setActionWoundsBar(int value);
	void setQuicknessWoundsBar(int value);
	void setStaminaWoundsBar(int value);
	void setMindWoundsBar(int value);
	void setFocusWoundsBar(int value);
	void setWillpowerWoundsBar(int value);

	boolean hasAttackDelay();
	void clearAttackDelay();

	void activateBurstRun(boolean bypassChecks = false);

	boolean hasQueuedState(unsigned int skillCRC);
	boolean removeQueuedState(unsigned int skillCRC);
	boolean addQueuedState(unsigned int skillCRC);

	void setMeditateState();

	void removePowerboost();

	boolean isGuilded();

	void removeGroup();

	boolean isInAGroup();

	boolean isInGroupWith(CreatureObject creature);

	void setGroupID(unsigned long gid);

	void updateGroupId(unsigned long id);
	void updateGroupInviterId(unsigned long id);

	void updateTarget(unsigned long targ);
	void updateTarget(SceneObject targ);
	void clearTarget();

	void setActionCounter(unsigned int actioncntr);

	void setWeapon(Weapon wep);

	void setCreatureLinkID(unsigned long creatureID);

	void setAccuracy(int acc);
	void setAccuracyBonus(int accBonus);
	void setDamageBonus(int bonus);
	void setDefenseBonus(int bonus);

	void setLastMovementUpdateStamp(unsigned int tme);
	void setIgnoreMovementTests(int times);

	void setLevel(unsigned int lvl);

	void setHealthEncumbrance(unsigned int value);
	void setActionEncumbrance(unsigned int value);
	void setMindEncumbrance(unsigned int value);

	void changeHealthEncumbrance(int value);
	void changeActionEncumbrance(int value);
	void changeMindEncumbrance(int value);

	void updateServerMovementStamp();

	SceneObject getInventoryItem(unsigned long oid);

	void removeAllInventoryByMisoKey(String mkey);

	TangibleObject getItemByMisoKey(String tma);

	void removeInventoryItem(unsigned long oid);
	void removeInventoryItem(SceneObject item);

	SceneObject getLootItem(unsigned long oid);
	void removeLootItem(unsigned long oid);

	SceneObject getBankItem(unsigned long oid);
	void removeBankItem(unsigned long oid);

	Inventory getInventory();
	Container getLootContainer();
	
	Container getBankContainer();
	BankInventory getBankInventory();

	unsigned long getNewItemID(); // should be virtual

	Weapon getWeapon();

	Armor getArmor(int type);

	local void addSkill(Skill skill);

	void addSkillMod(const String name, int mod, boolean updateClient = false);

	int getSkillMod(const String name);

	boolean hasSkillMod(const String name);

	int getSkillModBonus(const String name);

	void addSkillModBonus(const String name, int mod, boolean updateClient = false);

	boolean hasSkillModBonus(const String name);

	int getAccuracy();
	int getAccuracyBonus();
	int getDefenseBonus();
	int getDamageBonus();

	int getConditionDamage();
	int getMaxCondition();
	int getCondition();
	MountCreature getMount();

	unsigned long getLastServerMovementStamp();

	unsigned long getCreatureLinkID();

	float getDistanceTo(SceneObject targetCreature); // temp
	float getHeight();

	unsigned int getCreatureSkillsCount();
	unsigned int getNewCreatureSkillsCount(int cnt);

	unsigned int getLastMovementUpdateStamp();
	int getIgnoreMovementTests();

	unsigned int getLevel();

	int getCenteredBonus();

	void sendSystemMessage(const String message);
	void sendSystemMessage(UnicodeString message);
	void sendSystemMessage(const String file, const String str, unsigned long targetid = 0);
	void updateSpeed(float speed, float acceleration);

	void addInventoryItem(TangibleObject item);
	void addInventoryResource(ResourceContainer rcno);

	void addLootItem(TangibleObject item);

	// Ent methods
	void startDancing(const String anim, boolean changeDance = false);
	void startPlayingMusic(const String anim, boolean changeDance = false);

	void startWatch(unsigned long entid);
	void startListen(unsigned long entid);

	void stopWatch(unsigned long entid, boolean doSendPackets = true, boolean forced = false, boolean doLock = true);
	void stopListen(unsigned long entid, boolean doSendPackets = true, boolean forced = false, boolean doLock = true);

	boolean isPlayingMusic();
	boolean isDancing();

	void stopDancing();
	void stopPlayingMusic();

	void addListener(CreatureObject creature);
	void addWatcher(CreatureObject creature);

	void removeListener(CreatureObject creature);
	void removeWatcher(CreatureObject creature);

	void doFlourish(const String modifier);
	/*void doHealShockWounds();
	void doHealMindWounds();*/
	void doPerformanceAction();

	void doEntertainerPatronEffects(boolean healShock = false, boolean healWounds = false, boolean addBuff = false);
	void addEntertainerFlourishBuff();

	void addEntertainerBuffDuration(int performanceType, float duration);
	void setEntertainerBuffDuration(int performanceType, float duration);
	float getEntertainerBuffDuration(int performanceType);

	void setEntertainerBuffStrength(int performanceType, float strength);
	float getEntertainerBuffStrength(int performanceType);

	void activateRecovery();

	// Skill methods
	int getCreatureSkillsSize();
	String getSkill(int idx);
	boolean hasSkill(unsigned int skillCRC);

	// mount methods
	void mountCreature(MountCreature mnt, boolean lockMount = true);
	void dismount(boolean lockMount = true, boolean ignoreCooldown = true);

	//tip methods
	void addCashCredits(unsigned int credits);
	void addBankCredits(unsigned int credits);
	void updateCashCredits(unsigned int credits);
	void updateBankCredits(unsigned int credits);
	void subtractCashCredits(unsigned int credits);
	void subtractBankCredits(unsigned int credits);

	void setCashCredits(int credits);
	void setBankCredits(int credits);

	// Buff method
	void addBuff(int buffCRC, float duration);
	void applyBuff(BuffObject buff);

	void removeBuff(const unsigned int buffCRC, boolean remove = true);

	boolean hasSpice();

	boolean verifyCashCredits(unsigned int creditsToRemove);
	boolean verifyBankCredits(unsigned int creditsToRemove);

	// getters
	boolean isOnFullHealth();
	boolean hasStates();
	boolean hasState(unsigned long state);

	boolean isResuscitable();
	void setTimeOfDeath(unsigned long mtime);
	unsigned long getTimeOfDeath();

	boolean hasHealthDamage();
	boolean hasActionDamage();
	boolean hasMindDamage();
	boolean hasDamage();

	boolean hasWounds(boolean h = true, boolean a = true, boolean m = true);
	boolean hasWound(unsigned char attribute);
	boolean hasShockWounds();

	unsigned char getNextWoundedAttribute(boolean h = true, boolean a = true, boolean m = false);

	boolean isAttackable();
	boolean isAttackableBy(CreatureObject attacker);

	boolean isListening();
	boolean isWatching();

	UnicodeString getCharacterName();

	String getRaceName();
	String getGender();
	String getCreatureType();

	String getTerrainName();

	void getHairAppearance(String appearance);

	boolean isOvert();

	unsigned long getStateBitmask();

	unsigned char getPosture();

	unsigned int getFaction();
	boolean isRebel();
	boolean isNeutral();
	boolean isImperial();

	unsigned int getPvpStatusBitmask();

	unsigned char getFactionRank();

	unsigned int getBankCredits();
	unsigned int getCashCredits();

	unsigned int getWoundsUpdateCounter();
	unsigned int getNewWoundsUpdateCounter(int upd);

	void updateHAMBars();
	void updateBaseStats();

	int getBaseAttribute(unsigned char attribute);
	int getBaseHealth();
	int getBaseStrength();
	int getBaseConstitution();
	int getBaseAction();
	int getBaseQuickness();
	int getBaseStamina();
	int getBaseMind();
	int getBaseFocus();
	int getBaseWillpower();

	int getAttribute(unsigned char attribute);
	int getHealth();
	int getStrength();
	int getConstitution();
	int getAction();
	int getQuickness();
	int getStamina();
	int getMind();
	int getFocus();
	int getWillpower();

	int getAttributeMax(unsigned char attribute);
	int getHealthMax();
	int getStrengthMax();
	int getConstitutionMax();
	int getActionMax();
	int getQuicknessMax();
	int getStaminaMax();
	int getMindMax();
	int getFocusMax();
	int getWillpowerMax();

	int getWounds(unsigned char attribute);
	unsigned char getWoundsArraySize();
	int getHealthWounds();
	int getStrengthWounds();
	int getConstitutionWounds();
	int getActionWounds();
	int getQuicknessWounds();
	int getStaminaWounds();
	int getMindWounds();
	int getFocusWounds();
	int getWillpowerWounds();

	unsigned int getAttributeDamage(unsigned char attribute);
	unsigned int getHealthDamage();
	unsigned int getActionDamage();
	unsigned int getMindDamage();

	unsigned int getShockWounds();

	unsigned int getHAMUpdateCounter();
	unsigned int getNewHAMUpdateCounter(int cnt);
	unsigned int getHAMMaxUpdateCounter();
	unsigned int getNewHAMMaxUpdateCounter(int cnt);
	unsigned int getHAMBaseUpdateCounter();
	unsigned int getNewHAMBaseUpdateCounter(int cnt);
	unsigned int getEncumbUpdateCounter();
	unsigned int getNewEncumbUpdateCounter(int cnt);

	unsigned int getHealthEncumbrance();
	unsigned int getActionEncumbrance();
	unsigned int getMindEncumbrance();

	int getpbHA();

	int getpbMind();

	int getpbTick();

	int getpbBonus();

	unsigned long getTargetID();

	SceneObject getTarget();

	unsigned long getWeaponID();

	unsigned long getGroupID();
	unsigned long getGuildID();
	Guild getGuild();
	
	unsigned int getActionCounter();

	unsigned float getSpeed();
	unsigned float getAcceleration();

	String getPerformanceAnimation();
	unsigned int getPerformanceCounter();

	unsigned int getInstrumentID();
	int getInstrumentType();
	
	String getPerformanceName();

	String getMood();
	String getMoodStr();
	unsigned char getMoodID();

	unsigned long getGroupInviterID();
	unsigned long getGroupInviteCounter();
	unsigned long getNewGroupInviteCounter();

	unsigned long getWatchID();
	unsigned long getListenID();

	boolean isInBuilding();
	int getBuildingType();
	SceneObject getBuilding();

	String getGuildName();

	int getWeaponSpeedModifier();

	unsigned int getSkillBoxesUpdateCounter();
	unsigned int getSkillModsCounter();
	unsigned int getNewSkillModsCounter(int cnt);

	String getHideType();
	String getBoneType();
	String getMeatType();

	int getBoneMax();
	int getHideMax();
	int getMeatMax();
	int getMilk();
	boolean hasOrganics();
	int getCreatureHealth();

	int getXP();

	int isHealer();
	int isPack();
	int isHerd();
	int isStalker();
	int isKiller();
	int isAggressive();

	String getBehaviorScript();

	String getCreatureFaction();

	String getCreatureWeapon();
	String getCreatureWeaponName();
	String getCreatureWeaponTemp();
	String getCreatureWeaponClass();
	int getCreatureWeaponEquipped();
	int getCreatureWeaponMinDamage();
	int getCreatureWeaponMaxDamage();
	float getCreatureWeaponAttackSpeed();
	String getCreatureWeaponDamageType();
	String getCreatureWeaponArmorPiercing();

	float getInternalNPCDamageModifier();

	float getTame();

	String getLootGroup();

	unsigned int getFerocity();
	boolean isBaby();

	// setters
	void setBaseAttribute(unsigned char attribute, int value);
	void setBaseHealth(int value);
	void setBaseStrength(int value);
	void setBaseConstitution(int value);
	void setBaseAction(int value);
	void setBaseQuickness(int value);
	void setBaseStamina(int value);
	void setBaseMind(int value);
	void setBaseFocus(int value);
	void setBaseWillpower(int value);

	void setAttribute(unsigned char attribute, int value);
	void setHealth(int value);
	void setStrength(int value);
	void setConstitution(int value);
	void setAction(int value);
	void setQuickness(int value);
	void setStamina(int value);
	void setMind(int value);
	void setFocus(int value);
	void setWillpower(int value);

	void setAttributeMax(unsigned char attribute, int value);
	void setHealthMax(int value);
	void setStrengthMax(int value);
	void setConstitutionMax(int value);
	void setActionMax(int value);
	void setQuicknessMax(int value);
	void setStaminaMax(int value);
	void setMindMax(int value);
	void setFocusMax(int value);
	void setWillpowerMax(int value);

	void setWounds(unsigned char attribute, int value);
	void setHealthWounds(int value);
	void setStrengthWounds(int value);
	void setConstitutionWounds(int value);
	void setActionWounds(int value);
	void setQuicknessWounds(int value);
	void setStaminaWounds(int value);
	void setMindWounds(int value);
	void setFocusWounds(int value);
	void setWillpowerWounds(int value);

	void setShockWounds(int value);

	void setWoundsUpdateCounter(unsigned int count);

	void changeAttributeMax(unsigned char attribute, int value);
	void changeHealthMax(int value);
	void changeStrengthMax(int value);
	void changeConstitutionMax(int value);
	void changeActionMax(int value);
	void changeQuicknessMax(int value);
	void changeStaminaMax(int value);
	void changeMindMax(int value);
	void changeFocusMax(int value);
	void changeWillpowerMax(int value);

	void changeAttribute(unsigned char attribute, int value);
	void changeHealth(int value);
	void changeStrength(int value);
	void changeConstitution(int value);
	void changeAction(int value);
	void changeQuickness(int value);
	void changeStamina(int value);
	void changeMind(int value);
	void changeFocus(int value);
	void changeWillpower(int value);

	void setpbHA(int value);

	void setpbMind(int value);

	void setpbTick(int value);

    void setpbBonus(unsigned int value);

	void setSpeed(float spd);
	void setAcceleration(float acc);

	void changeConditionDamage(int amount);
	void setMaxCondition(int condition);

	void setPosture(unsigned char state, boolean overrideDizzy = false, boolean objectInteraction = false, float objX = 0, float objY = 0, float objZ = 0);

	void setPvpStatusBitmask(unsigned int mask);

	void setFactionRank(unsigned char rank, boolean updateClient = true);

	void setDizziedState();
	void setStunnedState();
	void setBlindedState();
	void setIntimidatedState();
	void setSnaredState();
	void setRootedState();

	int addDotState(CreatureObject attacker,unsigned long dotID, unsigned long dotType,int str, int type, int duration,float potency,int defense);
	boolean healDot(int dotType,int reduction);

	boolean setNextAttackDelay(int del);

	void setCharacterName(const String name);
	void setCharacterName(const UnicodeString name);

	void setTerrainName(const String name);

	void updateCharacterAppearance();

	void setHairAppearance(String cust);
	void setHairAppearanceAttribute(unsigned char type, unsigned char value);
	void setHairAppearanceAttribute(String type, unsigned char value);

	void setRaceName(const String name);
	void setGender(const String name);
	void setCreatureType(const String name);

	void setFaction(unsigned int fac);

	void setHeight(float h);

	void setMood(unsigned char mdid);

	void setMood(const String m);

	void setGroup(GroupObject Group);

	void setMount(MountCreature mount);

	void explode(int level = 1, boolean destroy = true);

	BuffObject getBuffObject(const unsigned int buffCRC);

	boolean hasBuff(const unsigned int buffCRC);
	boolean healState(CreatureObject target, unsigned long state);

	void deactivateWoundTreatment();
	void activateWoundTreatment();

	void deactivateInjuryTreatment(boolean isRangedStim);
	void activateInjuryTreatment();

	void deactivateStateTreatment();
	void activateStateTreatment();

	void deactivateConditionTreatment();
	void activateConditionTreatment();

	boolean canTreatWounds();
	boolean canTreatInjuries();
	boolean canTreatStates();
	boolean canTreatConditions();

	int getMedicalFacilityRating();

	void setBoneType(const String bone);

	void setBoneMax(int bonemax);

	void setHideType(const String hide);
	void setHideMax(int hidemax);

	void setMeatType(const String meat);
	void setMeatMax(int meatmax);

	void setMilk(int milkamt);

	void setXP(int xp);

	void setHealer(int heale);

	void setPack(int pack);

	void setHerd(int herd);

	void setStalker(int stalker);

	void setKiller(int killer);

	void setAggressive(int aggressive);

	void setBehaviorScript(const String behaviorScript);

	void setLootGroup(const String lootgroup);

	void setTame(float tme);

	void setCreatureFaction(const String cfac);

	void setInternalNPCDamageModifier(float indm);

	void setFerocity(unsigned int fero);

	void setBaby(boolean baby);

	// NPC weapons
	void setCreatureWeapon(const String wpon);
	void setCreatureWeaponName(const String weaponname);
	void setCreatureWeaponTemp(const String weapontemp);
	void setCreatureWeaponClass(const String weaponclass);
	void setCreatureWeaponEquipped(int weaponequ);
	void setCreatureWeaponMinDamage(int weaponmindam);
	void setCreatureWeaponMaxDamage(int weaponmaxdam);
	void setCreatureWeaponAttackSpeed(float weaponattackspeed);
	void setCreatureWeaponDamageType(const String weapondamtype);
	void setCreatureWeaponArmorPiercing(const String weaponarmorpiercing);

	boolean isFrozen();
	void setFrozen(boolean flag);

	String getTemplateString();
	void setTemplateString(const String tmpString);
	void clearTemplateString();

	void say(UnicodeString message, unsigned int moodid = 0, unsigned int mood2 = 0);

	void say(const String file, const String str, StfParameter param, unsigned int moodid = 0, unsigned int mood2 = 0);

	void setCamoType(unsigned int cType);
	unsigned int getCamoType();

	void activateCamo(unsigned int camoCRC,unsigned int time,unsigned int ms);
	void deactivateCamo(boolean forced);
	void activateCamoLock();
	boolean isCamoCooldownActive();
	int getCamoCooldownLeft();
	int getMaskScent();
	void setMaskScent(int value);
	Player getCamoXPTraget();
	void setCamoXPTraget(Player xpTaget);

	void setCampModifier(int mod);
	int getCampModifier();
	boolean isInCamp();
	int getCampAggroMod();
	void setCampAggroMod(int mod);

	int getNumberOfPets();
	void setNumberOfPets(int num);


	unsigned char getLowestHAMAttribute();


	//Event handlers
	void onIncapacitated(SceneObject attacker);
	void onIncapacitationRecovery();
	void onDeath();
	void onKilled(SceneObject killer);
	void onResuscitated(SceneObject healer);
	void onDamageHealed(SceneObject healer, unsigned char attribute, unsigned int amount);
	void onWoundHealed(SceneObject healer, unsigned char attribute, unsigned int amount);
	void onHealEnhanced(SceneObject enhancer, unsigned char attribute, unsigned int amount, float duration);
	void onBlinded();
	void onDizzied();
	void onStunned();
	void onIntimidated();
	void onEquip(TangibleObject item);
	void onUnequip(TangibleObject item);
	void onChangeWeapon(Weapon weapon);
	void onChangeArmor(Armor armor);
	//void onChangeClothing(Wearable clothing);
	void onReceiveDamage(SceneObject attacker, unsigned char attribute, unsigned int amount);
	void onRegenerateHAM();
	//void onMeditate();

	//Actions
	boolean inflictDamage(CreatureObject victim, unsigned char attribute, unsigned int damage);
	void incapacitateSelf();
	void recoverFromIncapacitation();
	void die();
	void equipItem(TangibleObject item);
	void unequipItem(TangibleObject item);

	//Setters

	//Getters
	boolean canRecoverFromIncapacitation();

}
