/*
Copyright (C) 2007 <SWGEmu>

This File is part of Core3.

This program is free software; you can redistribute
it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software
Foundation; either version 2 of the License,
or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for
more details.

You should have received a copy of the GNU Lesser General
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Linking Engine3 statically or dynamically with other modules
is making a combined work based on Engine3.
Thus, the terms and conditions of the GNU Lesser General Public License
cover the whole combination.

In addition, as a special exception, the copyright holders of Engine3
give you permission to combine Engine3 program with free software
programs or libraries that are released under the GNU LGPL and with
code included in the standard release of Core3 under the GNU LGPL
license (or modified versions of such code, with unchanged license).
You may copy and distribute such a system following the terms of the
GNU LGPL for Engine3 and the licenses of the other code concerned,
provided that you include the source code of that other code when
and as the GNU LGPL requires distribution of source code.

Note that people who make modified versions of Engine3 are not obligated
to grant this special exception for their modified versions;
it is their choice whether to do so. The GNU Lesser General Public License
gives permission to release a modified version without this exception;
this exception also makes it possible to release a modified version
which carries forward this exception.
*/

package server.zone.objects.creature;

import server.zone.objects.tangible.TangibleObject;
import engine.lua.LuaObject;
import system.util.Vector;

//import server.zone.objects.player.professions.SkillBox;

include server.zone.objects.scene.SceneObject;

class CreatureObject extends TangibleObject {
	protected int bankCredits;
	protected int cashCredits;
	
	protected int gender;
	protected int species;
	
	protected Vector<int> baseHealth;
	protected unsigned int baseHealthUpdateCounter;
	
	protected byte posture;
	protected byte factionRank;
	
	protected unsigned long creatureLinkID;
	protected float shockWounds;
	
	protected Vector<int> wounds;
	protected unsigned int woundsUpdateCounter;
	
	protected unsigned long stateBitmask;
	
	//protected VectorMap<string, SkillBox> skillBoxes;
	
	protected Vector<int> encumbrances;
	protected unsigned int encumbrancesUpdateCounter;
	
	// skillmods
	
	protected float speed;
	protected float terrainNegotiation;
	protected float acceleration;
	
	protected unsigned long listenToID;
	
	protected short level;
	
	protected string performanceAnimation;
	protected string moodString;
	
	protected unsigned long weaponID;
	protected unsigned long groupID;
	protected unsigned long groupInviterID;
	protected unsigned long groupInviteCounter;
	
	protected int guildID;
	protected unsigned long targetID;
	protected byte moodID;
	protected int performanceCounter;
	protected int instrumentID;
	
	protected Vector<int> hamList;
	protected unsigned int hamListUpdateCounter;
	
	protected Vector<int> maxHamList;
	protected unsigned int maxHamListUpdateCounter;
	
	protected byte frozen;
	
	protected string templateString;

	public native CreatureObject(LuaObject templateData, SceneObject parent = null);
	
	public int getBankCredits() {
		return this.bankCredits;
	}
	
	public int getCashCredits() {
		return this.cashCredits;
	}
	
	/*public Vector<int> getBaseHealth() {
		return baseHealth;
	}*/
	
	public int getBaseHealthUpdateCounter() {
		return baseHealthUpdateCounter;
	}
	
	public byte getPosture() {
		return this.posture;
	}
	
	public byte getFactionRank() {
		return this.factionRank;
	}
	
	public unsigned long getCreatureLinkID() {
		return this.creatureLinkID;
	}
	
	public float getShockWounds() {
		return this.shockWounds;
	}
	
	public unsigned long getStateBitmask() {
		return this.stateBitmask;
	}
	
	public unsigned long getListenID() {
		return this.listenToID;
	}
	
	public float getSpeed() {
		return this.speed;
	}
	
	public float getTerrainNegotiation() {
		return this.terrainNegotiation;	
	}
	
	public float getAcceleration() {
		return this.acceleration;
	}
	
	public int getLevel() {
		return this.level;
	}
	
	public string getPerformanceAnimation() {
		return this.performanceAnimation;
	}
	
	public string getMoodString() {
		return this.moodString;
	}
	
	public unsigned long getWeaponID() {
		return this.weaponID;
	}
	
	public unsigned long getGroupID() {
		return this.groupID;
	}
	
	public unsigned long getGroupInviterID() {
		return this.groupInviterID;
	}
	
	public unsigned long getGroupInviteCounter() {
		return this.groupInviteCounter;
	}
	
	public int getGuildID() {
		return this.guildID;
	}
	
	public unsigned long getTargetID() {
		return this.targetID;
	}
	
	public byte getMoodID() {
		return this.moodID;
	}
	
	public int getPerformanceCounter() {
		return this.performanceCounter;
	}
	
	public int getInstrumentID() {
		return instrumentID;
	}
	
	public byte getFrozen() {
		return this.frozen;
	}
}