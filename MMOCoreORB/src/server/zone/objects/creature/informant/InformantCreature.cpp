/*
 *	server/zone/objects/creature/informant/InformantCreature.cpp generated by engine3 IDL compiler 0.61
 */

#include "InformantCreature.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/scene/SceneObject.h"

/*
 *	InformantCreatureStub
 */

InformantCreature::InformantCreature() : AiAgent(DummyConstructorParameter::instance()) {
	InformantCreatureImplementation* _implementation = new InformantCreatureImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

InformantCreature::InformantCreature(DummyConstructorParameter* param) : AiAgent(param) {
}

InformantCreature::~InformantCreature() {
}


void InformantCreature::loadTemplateData(SharedObjectTemplate* templateData) {
	InformantCreatureImplementation* _implementation = (InformantCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->loadTemplateData(templateData);
}

void InformantCreature::activateRecovery() {
	InformantCreatureImplementation* _implementation = (InformantCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		_implementation->activateRecovery();
}

void InformantCreature::setLevel(int l) {
	InformantCreatureImplementation* _implementation = (InformantCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addSignedIntParameter(l);

		method.executeWithVoidReturn();
	} else
		_implementation->setLevel(l);
}

int InformantCreature::getLevel() {
	InformantCreatureImplementation* _implementation = (InformantCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getLevel();
}

bool InformantCreature::isInformantCreature() {
	InformantCreatureImplementation* _implementation = (InformantCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isInformantCreature();
}

bool InformantCreature::isAttackableBy(CreatureObject* object) {
	InformantCreatureImplementation* _implementation = (InformantCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(object);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isAttackableBy(object);
}

void InformantCreature::sendConversationStartTo(SceneObject* player) {
	InformantCreatureImplementation* _implementation = (InformantCreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendConversationStartTo(player);
}

DistributedObjectServant* InformantCreature::_getImplementation() {
	return _impl;}

void InformantCreature::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;}

/*
 *	InformantCreatureImplementation
 */

InformantCreatureImplementation::InformantCreatureImplementation(DummyConstructorParameter* param) : AiAgentImplementation(param) {
	_initializeImplementation();
}


InformantCreatureImplementation::~InformantCreatureImplementation() {
}


void InformantCreatureImplementation::finalize() {
}

void InformantCreatureImplementation::_initializeImplementation() {
	_setClassHelper(InformantCreatureHelper::instance());

	_serializationHelperMethod();
}

void InformantCreatureImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (InformantCreature*) stub;
	AiAgentImplementation::_setStub(stub);
}

DistributedObjectStub* InformantCreatureImplementation::_getStub() {
	return _this;
}

InformantCreatureImplementation::operator const InformantCreature*() {
	return _this;
}

void InformantCreatureImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void InformantCreatureImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void InformantCreatureImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void InformantCreatureImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void InformantCreatureImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void InformantCreatureImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void InformantCreatureImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void InformantCreatureImplementation::_serializationHelperMethod() {
	AiAgentImplementation::_serializationHelperMethod();

	_setClassName("InformantCreature");

	addSerializableVariable("level", &level);
}

InformantCreatureImplementation::InformantCreatureImplementation() {
	_initializeImplementation();
	// server/zone/objects/creature/informant/InformantCreature.idl(57):  		Logger.setLoggingName("InformantCreature");
	Logger::setLoggingName("InformantCreature");
	// server/zone/objects/creature/informant/InformantCreature.idl(58):  		level = 0;
	level = 0;
}

void InformantCreatureImplementation::loadTemplateData(SharedObjectTemplate* templateData) {
	// server/zone/objects/creature/informant/InformantCreature.idl(63):  		super.loadTemplateData(templateData);
	AiAgentImplementation::loadTemplateData(templateData);
	// server/zone/objects/creature/informant/InformantCreature.idl(65):  		super.optionsBitmask = 0x108;
	AiAgentImplementation::optionsBitmask = 0x108;
	// server/zone/objects/creature/informant/InformantCreature.idl(66):  		super.pvpStatusBitmask = 0;
	AiAgentImplementation::pvpStatusBitmask = 0;
}

void InformantCreatureImplementation::activateRecovery() {
}

void InformantCreatureImplementation::setLevel(int l) {
	// server/zone/objects/creature/informant/InformantCreature.idl(74):  		level = l;
	level = l;
}

int InformantCreatureImplementation::getLevel() {
	// server/zone/objects/creature/informant/InformantCreature.idl(78):  		return level;
	return level;
}

bool InformantCreatureImplementation::isInformantCreature() {
	// server/zone/objects/creature/informant/InformantCreature.idl(82):  		return true;
	return true;
}

bool InformantCreatureImplementation::isAttackableBy(CreatureObject* object) {
	// server/zone/objects/creature/informant/InformantCreature.idl(86):  		return false;
	return false;
}

/*
 *	InformantCreatureAdapter
 */

InformantCreatureAdapter::InformantCreatureAdapter(InformantCreatureImplementation* obj) : AiAgentAdapter(obj) {
}

Packet* InformantCreatureAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		activateRecovery();
		break;
	case 7:
		setLevel(inv->getSignedIntParameter());
		break;
	case 8:
		resp->insertSignedInt(getLevel());
		break;
	case 9:
		resp->insertBoolean(isInformantCreature());
		break;
	case 10:
		resp->insertBoolean(isAttackableBy((CreatureObject*) inv->getObjectParameter()));
		break;
	case 11:
		sendConversationStartTo((SceneObject*) inv->getObjectParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void InformantCreatureAdapter::activateRecovery() {
	((InformantCreatureImplementation*) impl)->activateRecovery();
}

void InformantCreatureAdapter::setLevel(int l) {
	((InformantCreatureImplementation*) impl)->setLevel(l);
}

int InformantCreatureAdapter::getLevel() {
	return ((InformantCreatureImplementation*) impl)->getLevel();
}

bool InformantCreatureAdapter::isInformantCreature() {
	return ((InformantCreatureImplementation*) impl)->isInformantCreature();
}

bool InformantCreatureAdapter::isAttackableBy(CreatureObject* object) {
	return ((InformantCreatureImplementation*) impl)->isAttackableBy(object);
}

void InformantCreatureAdapter::sendConversationStartTo(SceneObject* player) {
	((InformantCreatureImplementation*) impl)->sendConversationStartTo(player);
}

/*
 *	InformantCreatureHelper
 */

InformantCreatureHelper* InformantCreatureHelper::staticInitializer = InformantCreatureHelper::instance();

InformantCreatureHelper::InformantCreatureHelper() {
	className = "InformantCreature";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void InformantCreatureHelper::finalizeHelper() {
	InformantCreatureHelper::finalize();
}

DistributedObject* InformantCreatureHelper::instantiateObject() {
	return new InformantCreature(DummyConstructorParameter::instance());
}

DistributedObjectServant* InformantCreatureHelper::instantiateServant() {
	return new InformantCreatureImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* InformantCreatureHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new InformantCreatureAdapter((InformantCreatureImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

