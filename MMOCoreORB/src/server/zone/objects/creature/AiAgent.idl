/*
Copyright (C) 2007 <SWGEmu>

This File is part of Core3.

This program is free software; you can redistribute
it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software
Foundation; either version 2 of the License,
or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for
more details.

You should have received a copy of the GNU Lesser General
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Linking Engine3 statically or dynamically with other modules
is making a combined work based on Engine3.
Thus, the terms and conditions of the GNU Lesser General Public License
cover the whole combination.

In addition, as a special exception, the copyright holders of Engine3
give you permission to combine Engine3 program with free software
programs or libraries that are released under the GNU LGPL and with
code included in the standard release of Core3 under the GNU LGPL
license (or modified versions of such code, with unchanged license).
You may copy and distribute such a system following the terms of the
GNU LGPL for Engine3 and the licenses of the other code concerned,
provided that you include the source code of that other code when
and as the GNU LGPL requires distribution of source code.

Note that people who make modified versions of Engine3 are not obligated
to grant this special exception for their modified versions;
it is their choice whether to do so. The GNU Lesser General Public License
gives permission to release a modified version without this exception;
this exception also makes it possible to release a modified version
which carries forward this exception.
*/

package server.zone.objects.creature;

import engine.lua.LuaObject;
import system.util.Vector;
import system.lang.Time;
import server.zone.Zone;
import system.util.SortedVector;
import server.zone.objects.creature.CreatureObject;
import server.zone.objects.creature.events.AiThinkEvent;
import server.zone.objects.creature.events.AiMoveEvent;
import system.lang.ref.Reference;
import server.zone.packets.scene.AttributeListMessage;
import server.zone.objects.player.PlayerCreature;
import server.zone.objects.tangible.weapon.WeaponObject;
include server.zone.templates.tangible.NonPlayerCreatureObjectTemplate;
include server.zone.objects.creature.PatrolPointsVector;
include server.zone.objects.creature.PatrolPoint;
import engine.core.ManagedObject;
import server.zone.objects.tangible.TangibleObject;
import server.zone.templates.SharedObjectTemplate;
include server.zone.objects.tangible.DamageMap;
import server.zone.objects.creature.events.DespawnCreatureOnPlayerDissappear;

class AiAgent extends CreatureObject {
	@dereferenced
	protected transient Reference<AiThinkEvent> thinkEvent;
	
	@dereferenced
	protected transient Reference<AiMoveEvent> moveEvent;
	
	@dereferenced
	protected Vector<string> skillCommands;
	
	@dereferenced
	protected PatrolPointsVector patrolPoints;
	
	@dereferenced
	protected PatrolPoint homeLocation;
	
	@dereferenced
	protected PatrolPoint nextStepPosition;
	
	@dereferenced
	protected DamageMap damageMap;
	
	protected transient NonPlayerCreatureObjectTemplate npcTemplate;
	
	protected boolean baby;
	
	protected float currentSpeed;
	
	protected boolean despawnOnNoPlayerInRange;
	
	@weakReference
	protected SceneObject followObject;
	
	protected float respawnTimer;
	protected int numberOfPlayersInRange;
	
	@dereferenced
	protected transient Reference<DespawnCreatureOnPlayerDissappear> despawnEvent;
	
	public static final int UPDATEMOVEMENTINTERVAL = 250; // msec
	
	public AiAgent() {
		baby = false;

		currentSpeed = 0;
		respawnTimer = 0;
		
		despawnOnNoPlayerInRange = true;
		numberOfPlayersInRange = 0;

		npcTemplate = null;
		
		Logger.setLoggingName("AiAgent");
		Logger.setLogging(false);
		Logger.setGlobalLogging(true);
	}
	
	/**
	 * Initializes the transient members of SceneObject, must call the inherited object method first.
	 * @pre {transient members are not initialized }
	 * @post { transient members are initialized }
	 */
	public native void initializeTransientMembers();
	
	public abstract native void activateRecovery();
	
	public abstract native void activateMovementEvent();
	
	public native boolean tryRetreat();
	
	public native void doRecovery();
	
	public native void doMovement();
		
	public native void checkNewAngle();
	
	public native void fillAttributeList(AttributeListMessage msg, PlayerCreature object);
	
	public native void setNextPosition(float x, float z, float y, SceneObject cell = null);
	
	@local
	public native void updateCurrentPosition(PatrolPoint point);
	
	@local
	public native void broadcastNextPositionUpdate(PatrolPoint point);
	
	public void clearPatrolPoints() {
		patrolPoints.removeAll();
	}
	
	@local
	public native void notifyInsert(QuadTreeEntry entry);
	
	@local
	public native void notifyDissapear(QuadTreeEntry entry);
	
	@local
	public native void notifyPositionUpdate(QuadTreeEntry obj);
	
	/**
	 * Reads and sets the template data from a SharedTangibleObjectTemplate LuaObject
	 * @pre { templateData is a valid pointer }
	 * @post { TangibleObject members are initialized }
	 * @param templateData templateData points to the SharedTangibleObjectTemplate LuaObject that is used to initialize the TangibleObject members
	 */
	@local
	public native void loadTemplateData(SharedObjectTemplate templateData);
	
	/**
	 * Inflicts damage into the object
	 * @pre { this object is locked }
	 * @post { this object is locked }
	 * @return unused for now
	 */
	public native int inflictDamage(TangibleObject attacker, int damageType, int damage, boolean destroy, boolean notifyClient = true);
	
	/**
	 * sends the conversation list 
	 * @pre {this locked, player locked }
	 * @post { this locked, player locked }
	 */
	public native void sendConversationStartTo(SceneObject player);
	
	/**
	 * sends the conversation list 
	 * @pre {this locked, player locked }
	 * @post { this locked, player locked }
	 */
	public native void selectConversationOption(int option, SceneObject obj);
	
	/**
	 * Is called when this object is destroyed
	 * @pre { this, attacker locked }
	 * @post { this, attacker locked }
	 */
	public native int notifyObjectDestructionObservers(TangibleObject attacker, int condition);
	
	public native void activatePostureRecovery();
	
	/**
	 * Cleares the combat state
	 * @pre { this object is locked }
	 * @post { this object is locked, this object is not in a combat state }
	 * @param clearDefenders if true the defender vector willl be emptied
	 */
	public native void clearCombatState(boolean clearDefenders = true);
	
	/**
	 * Sets the active defender
	 * @pre { this object is locked }
	 * @post { this object is locked, defender is active }
	 * @param defender SceneObject to set as the active defender
	 */
	public native void setDefender(SceneObject defender);
	
	/**
	 * Adds a SceneObject to the defender vector
	 * @pre { this object is locked }
	 * @post { this object is locked, defender is in the defender vector }
	 * @param defender SceneObject to add to the defender vector
	 */
	public native void addDefender(SceneObject defender);
	
	/**
	 * Removes the specified defender from the defender vector
	 * @pre { this object is locked }
	 * @post { this object is locked, defender is not in the defender vector }
	 * @param defender SceneObject to remove from the defender vector
	 */
	public native void removeDefender(SceneObject defender);
	
	public native void setDespawnOnNoPlayerInRange(boolean val);
	
	/**
	 * Gets called when the creature was despawned
	 */
	public native void notifyDespawn(Zone zone);
	
	/**
	 * Respawns creature to specified zone with home location position
	 */
	public native void respawn(Zone zone, int level);
	
	public void setHomeLocation(float x, float z, float y, SceneObject cell = null) {
		homeLocation.setPosition(x, z, y);
		homeLocation.setCell(cell);
		homeLocation.setReached(true);
	}
	
	public void setRespawnTimer(float resp) {
		respawnTimer = resp;
	}
	
	/**
	 * Evaluates if this object can be attacket by the passed creature object
	 * @pre { this object is locked }
	 * @post { this object is locked }
	 * @return returns true if the creature object can attack this 
	 */
	public boolean isAttackableBy(CreatureObject object) {
		if (object == this)
			return false;
		
		if (super.pvpStatusBitmask == 0)
			return false;
		
		if (this.isRetreating())
			return false;
		
		if (this.isDead())
			return false;
		
		return true;
	}
	
	public void setFollowObject(SceneObject obj) {
		if (this.isRetreating())
			return;
			
		if (followObject != obj) {
			clearPatrolPoints();

			followObject = obj;

			activateMovementEvent();
		}
	}
	
	public boolean isRetreating() {
		return !homeLocation.isReached();
	}
	
	public native void clearDespawnEvent();
	
	public float getKinetic() {
		if (npcTemplate == null)
			return 0;
		
		return npcTemplate.getKinetic();
	}
	
	public float getEnergy() {
		if (npcTemplate == null)
			return 0;
		
		return npcTemplate.getEnergy();
	}
	
	public float getElectricity() {
		if (npcTemplate == null)
			return 0;
		
		return npcTemplate.getElectricity();
	}
	
	public float getStun() {
		if (npcTemplate == null)
			return 0;
		
		return npcTemplate.getStun();
	}
	
	public float getBlast() {
		if (npcTemplate == null)
			return 0;
		
		return npcTemplate.getBlast();
	}
	
	public float getHeat() {
		if (npcTemplate == null)
			return 0;
		
		return npcTemplate.getHeat();
	}
	
	public float getCold() {
		if (npcTemplate == null)
			return 0;
		
		return npcTemplate.getCold();
	}
	
	public float getAcid() {
		if (npcTemplate == null)
			return 0;
		
		return npcTemplate.getAcid();
	}
	
	public float getLightSaber() {
		if (npcTemplate == null)
			return 0;
		
		return npcTemplate.getLightSaber();
	}
	
	public boolean isStalker() {
		if (npcTemplate == null)
			return false;
		
		return npcTemplate.isStalker();
	}
	
	public boolean isBaby() {
		return baby;
	}
	
	public boolean isKiller() {
		if (npcTemplate == null)
			return false;
		
		return npcTemplate.isKiller();
	}
	
	public float getTame() {
		if (npcTemplate == null)
			return 0;
		
		return npcTemplate.getTame();
	}
	
	public string getMeatType() {
		if (npcTemplate == null)
			return "";
		
		return npcTemplate.getMeatType();
	}
	
	public string getBoneType() {
		if (npcTemplate == null)
			return "";
		
		return npcTemplate.getBoneType();
	}
	
	public string getHideType() {
		if (npcTemplate == null)
			return "";
		
		return npcTemplate.getHideType();
	}
	
	public float getMilk() {
		if (npcTemplate == null)
			return 0;
		
		return npcTemplate.getMilk();
	}
	
	public float getHideMax() {
		if (npcTemplate == null)
			return 0;
		
		return npcTemplate.getHideMax();
	}
	
	public float getBoneMax() {
		if (npcTemplate == null)
			return 0;
		
		return npcTemplate.getBoneMax();
	}
	
	public float getMeatMax() {
		if (npcTemplate == null)
			return 0;
		
		return npcTemplate.getMeatMax();
	}
	
	public unsigned int getFerocity() {
		if (npcTemplate == null)
			return 0;
		
		return npcTemplate.getFerocity();
	}
	
	public unsigned int getArmor() {
		if (npcTemplate == null)
			return 0;
		
		return npcTemplate.getArmor();
	}
	
	public boolean getDespawnOnNoPlayerInRange() {
		return despawnOnNoPlayerInRange;
	}
	
	public int getNumberOfPlayersInRange() {
		return numberOfPlayersInRange;
	}
	
	@local
	public DamageMap getDamageMap() {
		return damageMap;
	}
	
	public float getRespawnTimer() {
		return respawnTimer;
	}
	
	@local
	public PatrolPoint getHomeLocation() {
		return homeLocation;
	}

	public native boolean hasOrganics();
	
	public boolean isAiAgent() {
		return true;
	}
}