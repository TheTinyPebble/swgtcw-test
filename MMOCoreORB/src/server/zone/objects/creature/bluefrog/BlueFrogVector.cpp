/*
 *	server/zone/objects/creature/bluefrog/BlueFrogVector.cpp generated by engine3 IDL compiler 0.55
 */

#include "BlueFrogVector.h"

#include "BlueFrogVectorImplementation.h"

/*
 *	BlueFrogVectorStub
 */

BlueFrogVector::BlueFrogVector() {
	_impl = new BlueFrogVectorImplementation();
	_impl->_setStub(this);
}

BlueFrogVector::BlueFrogVector(DummyConstructorParameter* param) {
	_impl = NULL;
}

BlueFrogVector::~BlueFrogVector() {
}

unsigned int BlueFrogVector::size() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((BlueFrogVectorImplementation*) _impl)->size();
}

void BlueFrogVector::add(String& item) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addAsciiParameter(item);

		method.executeWithVoidReturn();
	} else
		((BlueFrogVectorImplementation*) _impl)->add(item);
}

String& BlueFrogVector::get(unsigned int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addUnsignedIntParameter(index);

		method.executeWithAsciiReturn(_return_get);
		return _return_get;
	} else
		return ((BlueFrogVectorImplementation*) _impl)->get(index);
}

/*
 *	BlueFrogVectorAdapter
 */

BlueFrogVectorAdapter::BlueFrogVectorAdapter(BlueFrogVectorImplementation* obj) : DistributedObjectAdapter((DistributedObjectServant*) obj) {
}

Packet* BlueFrogVectorAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertInt(size());
		break;
	case 7:
		add(inv->getAsciiParameter(_param0_add__String_));
		break;
	case 8:
		resp->insertAscii(get(inv->getUnsignedIntParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

unsigned int BlueFrogVectorAdapter::size() {
	return ((BlueFrogVectorImplementation*) impl)->size();
}

void BlueFrogVectorAdapter::add(String& item) {
	return ((BlueFrogVectorImplementation*) impl)->add(item);
}

String& BlueFrogVectorAdapter::get(unsigned int index) {
	return ((BlueFrogVectorImplementation*) impl)->get(index);
}

/*
 *	BlueFrogVectorHelper
 */

BlueFrogVectorHelper* BlueFrogVectorHelper::staticInitializer = BlueFrogVectorHelper::instance();

BlueFrogVectorHelper::BlueFrogVectorHelper() {
	className = "BlueFrogVector";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void BlueFrogVectorHelper::finalizeHelper() {
	BlueFrogVectorHelper::finalize();
}

DistributedObject* BlueFrogVectorHelper::instantiateObject() {
	return new BlueFrogVector(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* BlueFrogVectorHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new BlueFrogVectorAdapter((BlueFrogVectorImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	BlueFrogVectorServant
 */

BlueFrogVectorServant::BlueFrogVectorServant() {
	_classHelper = BlueFrogVectorHelper::instance();
}

BlueFrogVectorServant::~BlueFrogVectorServant() {
}

void BlueFrogVectorServant::_setStub(DistributedObjectStub* stub) {
	_this = (BlueFrogVector*) stub;
}

DistributedObjectStub* BlueFrogVectorServant::_getStub() {
	return _this;
}

