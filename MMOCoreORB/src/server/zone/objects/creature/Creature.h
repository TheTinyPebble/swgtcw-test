/*
 *	server/zone/objects/creature/Creature.h generated by engine3 IDL compiler 0.60
 */

#ifndef CREATURE_H_
#define CREATURE_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace group {

class GroupObject;

} // namespace group
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::group;

namespace server {
namespace zone {
namespace packets {
namespace object {

class ObjectMenuResponse;

} // namespace object
} // namespace packets
} // namespace zone
} // namespace server

using namespace server::zone::packets::object;

namespace server {
namespace zone {
namespace managers {
namespace creature {

class CreatureTemplate;

} // namespace creature
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::creature;

namespace server {
namespace zone {
namespace objects {
namespace player {

class PlayerCreature;

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "engine/core/ManagedObject.h"

#include "engine/util/Coordinate.h"

#include "server/zone/objects/creature/AiAgent.h"

namespace server {
namespace zone {
namespace objects {
namespace creature {

class Creature : public AiAgent {
public:
	Creature();

	bool isCreature();

	void notifyPositionUpdate(QuadTreeEntry* entry);

	void doAwarenessCheck(Coordinate& start, unsigned long long time, CreatureObject* target);

	void runAway(CreatureObject* target);

	void fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player);

	int handleObjectMenuSelect(PlayerCreature* player, byte selectedID);

	void harvest(PlayerCreature* player, byte selectedID);

	void fillAttributeList(AttributeListMessage* msg, PlayerCreature* object);

	void scheduleDespawn();

	bool hasOrganics();

	bool canHarvestMe(CreatureObject* player);

	bool isBaby();

	float getTame();

	String getMeatType();

	String getBoneType();

	String getHideType();

	float getMilk();

	float getHideMax();

	float getBoneMax();

	float getMeatMax();

	DistributedObjectServant* _getImplementation();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	Creature(DummyConstructorParameter* param);

	virtual ~Creature();

	String _return_getBoneType;
	String _return_getHideType;
	String _return_getMeatType;

	friend class CreatureHelper;
};

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureImplementation : public AiAgentImplementation {
protected:
	Vector<ManagedReference<CreatureObject* > > harvestList;

public:
	CreatureImplementation();

	CreatureImplementation(DummyConstructorParameter* param);

	bool isCreature();

	void notifyPositionUpdate(QuadTreeEntry* entry);

	void doAwarenessCheck(Coordinate& start, unsigned long long time, CreatureObject* target);

	void runAway(CreatureObject* target);

	void fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player);

	int handleObjectMenuSelect(PlayerCreature* player, byte selectedID);

	void harvest(PlayerCreature* player, byte selectedID);

	void fillAttributeList(AttributeListMessage* msg, PlayerCreature* object);

	void scheduleDespawn();

private:
	void createHarvestList();

public:
	bool hasOrganics();

	bool canHarvestMe(CreatureObject* player);

	bool isBaby();

	float getTame();

	String getMeatType();

	String getBoneType();

	String getHideType();

	float getMilk();

	float getHideMax();

	float getBoneMax();

	float getMeatMax();

	Creature* _this;

	operator const Creature*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~CreatureImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const String& name);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class Creature;
};

class CreatureAdapter : public AiAgentAdapter {
public:
	CreatureAdapter(CreatureImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	bool isCreature();

	void runAway(CreatureObject* target);

	int handleObjectMenuSelect(PlayerCreature* player, byte selectedID);

	void harvest(PlayerCreature* player, byte selectedID);

	void fillAttributeList(AttributeListMessage* msg, PlayerCreature* object);

	void scheduleDespawn();

	bool hasOrganics();

	bool canHarvestMe(CreatureObject* player);

	bool isBaby();

	float getTame();

	String getMeatType();

	String getBoneType();

	String getHideType();

	float getMilk();

	float getHideMax();

	float getBoneMax();

	float getMeatMax();

};

class CreatureHelper : public DistributedObjectClassHelper, public Singleton<CreatureHelper> {
	static CreatureHelper* staticInitializer;

public:
	CreatureHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<CreatureHelper>;
};

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

#endif /*CREATURE_H_*/
