/*
 *	server/zone/objects/creature/Creature.h generated by engine3 IDL compiler 0.55
 */

#ifndef CREATURE_H_
#define CREATURE_H_

#include "engine/orb/DistributedObjectBroker.h"

class CreatureManagerImplementation;

class Zone;

class Player;

class Armor;

class LairObject;

class CreatureObject;

class CreatureGroup;

#include "CreatureObject.h"

class Creature : public CreatureObject {
public:
	Creature(unsigned long long oid, CreatureGroup* group = NULL);

	void init();

	void unload();

	void loadItems();

	void scheduleDespawnCreature(int time);

	bool activate();

	bool isActive();

	void removeFromQueue();

	bool doMovement();

	void doStandUp();

	void setArmor(unsigned int ar);

	unsigned int getArmor();

	float getArmorResist(int resistType);

	void setKinetic(float kin);

	void setEnergy(float ene);

	void setElectricity(float ele);

	void setStun(float stu);

	void setBlast(float bla);

	void setHeat(float hea);

	void setCold(float col);

	void setAcid(float aci);

	void setLightSaber(float lig);

	void doAttack(CreatureObject* target, int damage);

	bool attack(CreatureObject* target);

	void deaggro();

	void activateRecovery();

	bool doRecovery();

	void doStatesRecovery();

	void queueRespawn();

	void setNextMovementPosition(float x, float y, bool doLock = true);

	void clearPatrolPoints(bool doLock = true);

	void addPatrolPoint(float positionX, float positionY, bool doLock = true);

	void startPatrol(bool doLock = true);

	void stopPatrol(bool doLock = true);

	void setSpawnPosition(float posX, float posZ, float posY, unsigned long long cellid = 0);

	int compareTo(Creature* creature);

	int getType();

	bool isTrainer();

	bool isRecruiter();

	String& getName();

	int getZoneIndex();

	Zone* getZone();

	CreatureObject* getAggroedCreature();

	unsigned long long getNewItemID();

	unsigned int getRespawnTimer();

	LairObject* getLair();

	bool hasLootCreated();

	void setCreatureManager(CreatureManagerImplementation* manager);

	void setLair(LairObject* Lair);

	void setCreatureGroup(CreatureGroup* group);

	void setObjectFileName(const String& name);

	String& getObjectFileName();

	void setType(int tp);

	void setRespawnTimer(unsigned int seconds);

	void removePlayerFromHarvestList(String& firstName);

	bool canHarvest(String& firstName);

	bool beenLooted();

	void wasLooted();

	void setLootCreated(bool value);

	void setRandomMovement(bool value);

	unsigned int getFPValue();

	void setFPValue(unsigned int value);

	void onIncapacitateTarget(CreatureObject* victim);

	void onKilled(CreatureObject* killer);

	void onDeath();

protected:
	Creature(DummyConstructorParameter* param);

	virtual ~Creature();

	String _return_getName;
	String _return_getObjectFileName;

	friend class CreatureHelper;
};

class CreatureImplementation;

class CreatureAdapter : public CreatureObjectAdapter {
public:
	CreatureAdapter(CreatureImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void init();

	void unload();

	void loadItems();

	void scheduleDespawnCreature(int time);

	bool activate();

	bool isActive();

	void removeFromQueue();

	bool doMovement();

	void doStandUp();

	void setArmor(unsigned int ar);

	unsigned int getArmor();

	float getArmorResist(int resistType);

	void setKinetic(float kin);

	void setEnergy(float ene);

	void setElectricity(float ele);

	void setStun(float stu);

	void setBlast(float bla);

	void setHeat(float hea);

	void setCold(float col);

	void setAcid(float aci);

	void setLightSaber(float lig);

	void doAttack(CreatureObject* target, int damage);

	bool attack(CreatureObject* target);

	void deaggro();

	void activateRecovery();

	bool doRecovery();

	void doStatesRecovery();

	void queueRespawn();

	void setNextMovementPosition(float x, float y, bool doLock);

	void clearPatrolPoints(bool doLock);

	void addPatrolPoint(float positionX, float positionY, bool doLock);

	void startPatrol(bool doLock);

	void stopPatrol(bool doLock);

	void setSpawnPosition(float posX, float posZ, float posY, unsigned long long cellid);

	int compareTo(Creature* creature);

	int getType();

	bool isTrainer();

	bool isRecruiter();

	String& getName();

	int getZoneIndex();

	Zone* getZone();

	CreatureObject* getAggroedCreature();

	unsigned long long getNewItemID();

	unsigned int getRespawnTimer();

	LairObject* getLair();

	bool hasLootCreated();

	void setLair(LairObject* Lair);

	void setCreatureGroup(CreatureGroup* group);

	void setObjectFileName(const String& name);

	String& getObjectFileName();

	void setType(int tp);

	void setRespawnTimer(unsigned int seconds);

	void removePlayerFromHarvestList(String& firstName);

	bool canHarvest(String& firstName);

	bool beenLooted();

	void wasLooted();

	void setLootCreated(bool value);

	void setRandomMovement(bool value);

	unsigned int getFPValue();

	void setFPValue(unsigned int value);

	void onIncapacitateTarget(CreatureObject* victim);

	void onKilled(CreatureObject* killer);

	void onDeath();

protected:
	String _param0_setObjectFileName__String_;
	String _param0_removePlayerFromHarvestList__String_;
	String _param0_canHarvest__String_;
};

class CreatureHelper : public DistributedObjectClassHelper, public Singleton<CreatureHelper> {
	static CreatureHelper* staticInitializer;

public:
	CreatureHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<CreatureHelper>;
};

#include "CreatureObjectImplementation.h"

class CreatureServant : public CreatureObjectImplementation {
public:
	Creature* _this;

public:
	CreatureServant(unsigned long long oid);
	virtual ~CreatureServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*CREATURE_H_*/
