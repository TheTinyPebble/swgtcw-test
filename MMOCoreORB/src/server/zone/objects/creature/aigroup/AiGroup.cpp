/*
 *	server/zone/objects/creature/aigroup/AiGroup.cpp generated by engine3 IDL compiler 0.60
 */

#include "AiGroup.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/creature/AiAgent.h"

#include "server/zone/managers/creature/SpawnGroup.h"

/*
 *	AiGroupStub
 */

AiGroup::AiGroup() : SceneObject(DummyConstructorParameter::instance()) {
	AiGroupImplementation* _implementation = new AiGroupImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

AiGroup::AiGroup(DummyConstructorParameter* param) : SceneObject(param) {
}

AiGroup::~AiGroup() {
}


void AiGroup::setPatrolPoints() {
	AiGroupImplementation* _implementation = (AiGroupImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		_implementation->setPatrolPoints();
}

void AiGroup::setup(SpawnGroup& templ) {
	AiGroupImplementation* _implementation = (AiGroupImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->setup(templ);
}

bool AiGroup::isHerdGroup() {
	AiGroupImplementation* _implementation = (AiGroupImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isHerdGroup();
}

bool AiGroup::isPackGroup() {
	AiGroupImplementation* _implementation = (AiGroupImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isPackGroup();
}

bool AiGroup::isLairGroup() {
	AiGroupImplementation* _implementation = (AiGroupImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isLairGroup();
}

DistributedObjectServant* AiGroup::_getImplementation() {

	_updated = true;
	return _impl;
}

void AiGroup::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;}

/*
 *	AiGroupImplementation
 */

AiGroupImplementation::AiGroupImplementation(DummyConstructorParameter* param) : SceneObjectImplementation(param) {
	_initializeImplementation();
}


AiGroupImplementation::~AiGroupImplementation() {
}


void AiGroupImplementation::finalize() {
}

void AiGroupImplementation::_initializeImplementation() {
	_setClassHelper(AiGroupHelper::instance());

	_serializationHelperMethod();
}

void AiGroupImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (AiGroup*) stub;
	SceneObjectImplementation::_setStub(stub);
}

DistributedObjectStub* AiGroupImplementation::_getStub() {
	return _this;
}

AiGroupImplementation::operator const AiGroup*() {
	return _this;
}

void AiGroupImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void AiGroupImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void AiGroupImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void AiGroupImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void AiGroupImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void AiGroupImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void AiGroupImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void AiGroupImplementation::_serializationHelperMethod() {
	SceneObjectImplementation::_serializationHelperMethod();

	_setClassName("AiGroup");

	addSerializableVariable("leader", &leader);
	addSerializableVariable("scouts", &scouts);
	addSerializableVariable("scoutPoints", &scoutPoints);
	addSerializableVariable("protectors", &protectors);
	addSerializableVariable("babies", &babies);
	addSerializableVariable("closePoints", &closePoints);
	addSerializableVariable("subgroups", &subgroups);
	addSerializableVariable("commandLevel", &commandLevel);
	addSerializableVariable("maxRange", &maxRange);
}

AiGroupImplementation::AiGroupImplementation() {
	_initializeImplementation();
	// server/zone/objects/creature/aigroup/AiGroup.idl(81):  		commandLevel = 0;
	commandLevel = 0;
	// server/zone/objects/creature/aigroup/AiGroup.idl(82):  		maxRange = 0;
	maxRange = 0;
}

bool AiGroupImplementation::isHerdGroup() {
	// server/zone/objects/creature/aigroup/AiGroup.idl(91):  		return false;
	return false;
}

bool AiGroupImplementation::isPackGroup() {
	// server/zone/objects/creature/aigroup/AiGroup.idl(95):  		return false;
	return false;
}

bool AiGroupImplementation::isLairGroup() {
	// server/zone/objects/creature/aigroup/AiGroup.idl(99):  		return false;
	return false;
}

/*
 *	AiGroupAdapter
 */

AiGroupAdapter::AiGroupAdapter(AiGroupImplementation* obj) : SceneObjectAdapter(obj) {
}

Packet* AiGroupAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		setPatrolPoints();
		break;
	case 7:
		resp->insertBoolean(isHerdGroup());
		break;
	case 8:
		resp->insertBoolean(isPackGroup());
		break;
	case 9:
		resp->insertBoolean(isLairGroup());
		break;
	default:
		return NULL;
	}

	return resp;
}

void AiGroupAdapter::setPatrolPoints() {
	((AiGroupImplementation*) impl)->setPatrolPoints();
}

bool AiGroupAdapter::isHerdGroup() {
	return ((AiGroupImplementation*) impl)->isHerdGroup();
}

bool AiGroupAdapter::isPackGroup() {
	return ((AiGroupImplementation*) impl)->isPackGroup();
}

bool AiGroupAdapter::isLairGroup() {
	return ((AiGroupImplementation*) impl)->isLairGroup();
}

/*
 *	AiGroupHelper
 */

AiGroupHelper* AiGroupHelper::staticInitializer = AiGroupHelper::instance();

AiGroupHelper::AiGroupHelper() {
	className = "AiGroup";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void AiGroupHelper::finalizeHelper() {
	AiGroupHelper::finalize();
}

DistributedObject* AiGroupHelper::instantiateObject() {
	return new AiGroup(DummyConstructorParameter::instance());
}

DistributedObjectServant* AiGroupHelper::instantiateServant() {
	return new AiGroupImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* AiGroupHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new AiGroupAdapter((AiGroupImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

