/*
 *	server/zone/objects/creature/aigroup/AiGroupObserver.cpp generated by engine3 IDL compiler 0.60
 */

#include "AiGroupObserver.h"

#include "server/zone/objects/creature/aigroup/AiGroup.h"

#include "server/zone/objects/scene/SceneObject.h"

/*
 *	AiGroupObserverStub
 */

enum {RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_ = 6};

AiGroupObserver::AiGroupObserver(AiGroup* group) : Observer(DummyConstructorParameter::instance()) {
	AiGroupObserverImplementation* _implementation = new AiGroupObserverImplementation(group);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("AiGroupObserver");
}

AiGroupObserver::AiGroupObserver(DummyConstructorParameter* param) : Observer(param) {
	_setClassName("AiGroupObserver");
}

AiGroupObserver::~AiGroupObserver() {
}



int AiGroupObserver::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	AiGroupObserverImplementation* _implementation = static_cast<AiGroupObserverImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(observable);
		method.addObjectParameter(arg1);
		method.addSignedLongParameter(arg2);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyObserverEvent(eventType, observable, arg1, arg2);
}

DistributedObjectServant* AiGroupObserver::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

void AiGroupObserver::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	AiGroupObserverImplementation
 */

AiGroupObserverImplementation::AiGroupObserverImplementation(DummyConstructorParameter* param) : ObserverImplementation(param) {
	_initializeImplementation();
}


AiGroupObserverImplementation::~AiGroupObserverImplementation() {
}


void AiGroupObserverImplementation::finalize() {
}

void AiGroupObserverImplementation::_initializeImplementation() {
	_setClassHelper(AiGroupObserverHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void AiGroupObserverImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<AiGroupObserver*>(stub);
	ObserverImplementation::_setStub(stub);
}

DistributedObjectStub* AiGroupObserverImplementation::_getStub() {
	return _this.get();
}

AiGroupObserverImplementation::operator const AiGroupObserver*() {
	return _this.get();
}

void AiGroupObserverImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void AiGroupObserverImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void AiGroupObserverImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void AiGroupObserverImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void AiGroupObserverImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void AiGroupObserverImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void AiGroupObserverImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void AiGroupObserverImplementation::_serializationHelperMethod() {
	ObserverImplementation::_serializationHelperMethod();

	_setClassName("AiGroupObserver");

}

void AiGroupObserverImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(AiGroupObserverImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool AiGroupObserverImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ObserverImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "AiGroupObserver.aiGroup") {
		TypeInfo<ManagedReference<AiGroup* > >::parseFromBinaryStream(&aiGroup, stream);
		return true;
	}


	return false;
}

void AiGroupObserverImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = AiGroupObserverImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int AiGroupObserverImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ObserverImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;
	_name = "AiGroupObserver.aiGroup";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<AiGroup* > >::toBinaryStream(&aiGroup, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 1;
}

AiGroupObserverImplementation::AiGroupObserverImplementation(AiGroup* group) {
	_initializeImplementation();
	// server/zone/objects/creature/aigroup/AiGroupObserver.idl():  		aiGroup = group;
	aiGroup = group;
	// server/zone/objects/creature/aigroup/AiGroupObserver.idl():  		Logger.setLoggingName("AiGroupObserver");
	Logger::setLoggingName("AiGroupObserver");
}

int AiGroupObserverImplementation::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	// server/zone/objects/creature/aigroup/AiGroupObserver.idl():  			return aiGroup.notifyObserverEvent(eventType, observable, arg1, arg2);
	if (aiGroup == NULL)	// server/zone/objects/creature/aigroup/AiGroupObserver.idl():  			return 0;
	return 0;

	else 	// server/zone/objects/creature/aigroup/AiGroupObserver.idl():  			return aiGroup.notifyObserverEvent(eventType, observable, arg1, arg2);
	return aiGroup->notifyObserverEvent(eventType, observable, arg1, arg2);
}

/*
 *	AiGroupObserverAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


AiGroupObserverAdapter::AiGroupObserverAdapter(AiGroupObserver* obj) : ObserverAdapter(obj) {
}

void AiGroupObserverAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_:
		{
			resp->insertSignedInt(notifyObserverEvent(inv->getUnsignedIntParameter(), static_cast<Observable*>(inv->getObjectParameter()), static_cast<ManagedObject*>(inv->getObjectParameter()), inv->getSignedLongParameter()));
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

int AiGroupObserverAdapter::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	return (static_cast<AiGroupObserver*>(stub))->notifyObserverEvent(eventType, observable, arg1, arg2);
}

/*
 *	AiGroupObserverHelper
 */

AiGroupObserverHelper* AiGroupObserverHelper::staticInitializer = AiGroupObserverHelper::instance();

AiGroupObserverHelper::AiGroupObserverHelper() {
	className = "AiGroupObserver";

	Core::getObjectBroker()->registerClass(className, this);
}

void AiGroupObserverHelper::finalizeHelper() {
	AiGroupObserverHelper::finalize();
}

DistributedObject* AiGroupObserverHelper::instantiateObject() {
	return new AiGroupObserver(DummyConstructorParameter::instance());
}

DistributedObjectServant* AiGroupObserverHelper::instantiateServant() {
	return new AiGroupObserverImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* AiGroupObserverHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new AiGroupObserverAdapter(static_cast<AiGroupObserver*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

