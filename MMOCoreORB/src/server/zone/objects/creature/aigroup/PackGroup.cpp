/*
 *	server/zone/objects/creature/aigroup/PackGroup.cpp generated by engine3 IDL compiler 0.60
 */

#include "PackGroup.h"

/*
 *	PackGroupStub
 */

enum {RPC_ISPACKGROUP__ = 6};

PackGroup::PackGroup() : AiGroup(DummyConstructorParameter::instance()) {
	PackGroupImplementation* _implementation = new PackGroupImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("PackGroup");
}

PackGroup::PackGroup(DummyConstructorParameter* param) : AiGroup(param) {
	_setClassName("PackGroup");
}

PackGroup::~PackGroup() {
}



bool PackGroup::isPackGroup() {
	PackGroupImplementation* _implementation = static_cast<PackGroupImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISPACKGROUP__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isPackGroup();
}

DistributedObjectServant* PackGroup::_getImplementation() {

	_updated = true;
	return _impl;
}

void PackGroup::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	PackGroupImplementation
 */

PackGroupImplementation::PackGroupImplementation(DummyConstructorParameter* param) : AiGroupImplementation(param) {
	_initializeImplementation();
}


PackGroupImplementation::~PackGroupImplementation() {
}


void PackGroupImplementation::finalize() {
}

void PackGroupImplementation::_initializeImplementation() {
	_setClassHelper(PackGroupHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void PackGroupImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<PackGroup*>(stub);
	AiGroupImplementation::_setStub(stub);
}

DistributedObjectStub* PackGroupImplementation::_getStub() {
	return _this.get();
}

PackGroupImplementation::operator const PackGroup*() {
	return _this.get();
}

void PackGroupImplementation::lock(bool doLock) {
	_this.get()->lock(doLock);
}

void PackGroupImplementation::lock(ManagedObject* obj) {
	_this.get()->lock(obj);
}

void PackGroupImplementation::rlock(bool doLock) {
	_this.get()->rlock(doLock);
}

void PackGroupImplementation::wlock(bool doLock) {
	_this.get()->wlock(doLock);
}

void PackGroupImplementation::wlock(ManagedObject* obj) {
	_this.get()->wlock(obj);
}

void PackGroupImplementation::unlock(bool doLock) {
	_this.get()->unlock(doLock);
}

void PackGroupImplementation::runlock(bool doLock) {
	_this.get()->runlock(doLock);
}

void PackGroupImplementation::_serializationHelperMethod() {
	AiGroupImplementation::_serializationHelperMethod();

	_setClassName("PackGroup");

}

void PackGroupImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(PackGroupImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool PackGroupImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (AiGroupImplementation::readObjectMember(stream, _name))
		return true;


	return false;
}

void PackGroupImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = PackGroupImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int PackGroupImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = AiGroupImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;

	return _count + 0;
}

PackGroupImplementation::PackGroupImplementation() : AiGroupImplementation() {
	_initializeImplementation();
}

bool PackGroupImplementation::isPackGroup() {
	// server/zone/objects/creature/aigroup/PackGroup.idl():  		return true;
	return true;
}

/*
 *	PackGroupAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


PackGroupAdapter::PackGroupAdapter(PackGroup* obj) : AiGroupAdapter(obj) {
}

void PackGroupAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_ISPACKGROUP__:
		{
			resp->insertBoolean(isPackGroup());
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

bool PackGroupAdapter::isPackGroup() {
	return (static_cast<PackGroup*>(stub))->isPackGroup();
}

/*
 *	PackGroupHelper
 */

PackGroupHelper* PackGroupHelper::staticInitializer = PackGroupHelper::instance();

PackGroupHelper::PackGroupHelper() {
	className = "PackGroup";

	Core::getObjectBroker()->registerClass(className, this);
}

void PackGroupHelper::finalizeHelper() {
	PackGroupHelper::finalize();
}

DistributedObject* PackGroupHelper::instantiateObject() {
	return new PackGroup(DummyConstructorParameter::instance());
}

DistributedObjectServant* PackGroupHelper::instantiateServant() {
	return new PackGroupImplementation();
}

DistributedObjectAdapter* PackGroupHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new PackGroupAdapter(static_cast<PackGroup*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

