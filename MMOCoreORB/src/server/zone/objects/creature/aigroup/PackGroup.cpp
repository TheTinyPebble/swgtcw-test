/*
 *	server/zone/objects/creature/aigroup/PackGroup.cpp generated by engine3 IDL compiler 0.60
 */

#include "PackGroup.h"

/*
 *	PackGroupStub
 */

PackGroup::PackGroup() : AiGroup(DummyConstructorParameter::instance()) {
	PackGroupImplementation* _implementation = new PackGroupImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

PackGroup::PackGroup(DummyConstructorParameter* param) : AiGroup(param) {
}

PackGroup::~PackGroup() {
}


bool PackGroup::isPackGroup() {
	PackGroupImplementation* _implementation = (PackGroupImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isPackGroup();
}

DistributedObjectServant* PackGroup::_getImplementation() {

	_updated = true;
	return _impl;
}

void PackGroup::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;}

/*
 *	PackGroupImplementation
 */

PackGroupImplementation::PackGroupImplementation(DummyConstructorParameter* param) : AiGroupImplementation(param) {
	_initializeImplementation();
}


PackGroupImplementation::~PackGroupImplementation() {
}


void PackGroupImplementation::finalize() {
}

void PackGroupImplementation::_initializeImplementation() {
	_setClassHelper(PackGroupHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void PackGroupImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (PackGroup*) stub;
	AiGroupImplementation::_setStub(stub);
}

DistributedObjectStub* PackGroupImplementation::_getStub() {
	return _this;
}

PackGroupImplementation::operator const PackGroup*() {
	return _this;
}

void PackGroupImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void PackGroupImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void PackGroupImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void PackGroupImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void PackGroupImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void PackGroupImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void PackGroupImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void PackGroupImplementation::_serializationHelperMethod() {
	AiGroupImplementation::_serializationHelperMethod();

	_setClassName("PackGroup");

}

void PackGroupImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(PackGroupImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool PackGroupImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (AiGroupImplementation::readObjectMember(stream, _name))
		return true;


	return false;
}

void PackGroupImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = PackGroupImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int PackGroupImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;

	return 0 + AiGroupImplementation::writeObjectMembers(stream);
}

PackGroupImplementation::PackGroupImplementation() : AiGroupImplementation() {
	_initializeImplementation();
}

bool PackGroupImplementation::isPackGroup() {
	// server/zone/objects/creature/aigroup/PackGroup.idl(56):  		return true;
	return true;
}

/*
 *	PackGroupAdapter
 */

PackGroupAdapter::PackGroupAdapter(PackGroupImplementation* obj) : AiGroupAdapter(obj) {
}

Packet* PackGroupAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertBoolean(isPackGroup());
		break;
	default:
		return NULL;
	}

	return resp;
}

bool PackGroupAdapter::isPackGroup() {
	return ((PackGroupImplementation*) impl)->isPackGroup();
}

/*
 *	PackGroupHelper
 */

PackGroupHelper* PackGroupHelper::staticInitializer = PackGroupHelper::instance();

PackGroupHelper::PackGroupHelper() {
	className = "PackGroup";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void PackGroupHelper::finalizeHelper() {
	PackGroupHelper::finalize();
}

DistributedObject* PackGroupHelper::instantiateObject() {
	return new PackGroup(DummyConstructorParameter::instance());
}

DistributedObjectServant* PackGroupHelper::instantiateServant() {
	return new PackGroupImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* PackGroupHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new PackGroupAdapter((PackGroupImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

