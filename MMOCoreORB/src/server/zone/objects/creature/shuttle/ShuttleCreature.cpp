/*
 *	server/zone/objects/creature/shuttle/ShuttleCreature.cpp generated by engine3 IDL compiler 0.55
 */

#include "ShuttleCreature.h"

#include "ShuttleCreatureImplementation.h"

#include "../Creature.h"

#include "../../player/Player.h"

#include "../../tangible/ticket/Ticket.h"

/*
 *	ShuttleCreatureStub
 */

ShuttleCreature::ShuttleCreature(const String& planet, const String& city, Coordinate* playerSpawnPoint, unsigned long long oid, unsigned int tax, bool starport) : Creature(DummyConstructorParameter::instance()) {
	_impl = new ShuttleCreatureImplementation(planet, city, playerSpawnPoint, oid, tax, starport);
	_impl->_setStub(this);
}

ShuttleCreature::ShuttleCreature(DummyConstructorParameter* param) : Creature(param) {
}

ShuttleCreature::~ShuttleCreature() {
}

void ShuttleCreature::doTakeOff() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((ShuttleCreatureImplementation*) _impl)->doTakeOff();
}

void ShuttleCreature::doLanding() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		((ShuttleCreatureImplementation*) _impl)->doLanding();
}

void ShuttleCreature::sendPlayerTo(Player* player, Ticket* ticker) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(player);
		method.addObjectParameter(ticker);

		method.executeWithVoidReturn();
	} else
		((ShuttleCreatureImplementation*) _impl)->sendPlayerTo(player, ticker);
}

String& ShuttleCreature::getCity() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		method.executeWithAsciiReturn(_return_getCity);
		return _return_getCity;
	} else
		return ((ShuttleCreatureImplementation*) _impl)->getCity();
}

String& ShuttleCreature::getPlanet() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		method.executeWithAsciiReturn(_return_getPlanet);
		return _return_getPlanet;
	} else
		return ((ShuttleCreatureImplementation*) _impl)->getPlanet();
}

Coordinate* ShuttleCreature::getArrivalPoint() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		return (Coordinate*) method.executeWithObjectReturn();
	} else
		return ((ShuttleCreatureImplementation*) _impl)->getArrivalPoint();
}

int ShuttleCreature::getArrivalTime() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		return method.executeWithSignedIntReturn();
	} else
		return ((ShuttleCreatureImplementation*) _impl)->getArrivalTime();
}

unsigned int ShuttleCreature::getTax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((ShuttleCreatureImplementation*) _impl)->getTax();
}

bool ShuttleCreature::isStarport() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		return method.executeWithBooleanReturn();
	} else
		return ((ShuttleCreatureImplementation*) _impl)->isStarport();
}

/*
 *	ShuttleCreatureAdapter
 */

ShuttleCreatureAdapter::ShuttleCreatureAdapter(ShuttleCreatureImplementation* obj) : CreatureAdapter(obj) {
}

Packet* ShuttleCreatureAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		doTakeOff();
		break;
	case 7:
		doLanding();
		break;
	case 8:
		sendPlayerTo((Player*) inv->getObjectParameter(), (Ticket*) inv->getObjectParameter());
		break;
	case 9:
		resp->insertAscii(getCity());
		break;
	case 10:
		resp->insertAscii(getPlanet());
		break;
	case 11:
		resp->insertLong(getArrivalPoint()->_getObjectID());
		break;
	case 12:
		resp->insertSignedInt(getArrivalTime());
		break;
	case 13:
		resp->insertInt(getTax());
		break;
	case 14:
		resp->insertBoolean(isStarport());
		break;
	default:
		return NULL;
	}

	return resp;
}

void ShuttleCreatureAdapter::doTakeOff() {
	return ((ShuttleCreatureImplementation*) impl)->doTakeOff();
}

void ShuttleCreatureAdapter::doLanding() {
	return ((ShuttleCreatureImplementation*) impl)->doLanding();
}

void ShuttleCreatureAdapter::sendPlayerTo(Player* player, Ticket* ticker) {
	return ((ShuttleCreatureImplementation*) impl)->sendPlayerTo(player, ticker);
}

String& ShuttleCreatureAdapter::getCity() {
	return ((ShuttleCreatureImplementation*) impl)->getCity();
}

String& ShuttleCreatureAdapter::getPlanet() {
	return ((ShuttleCreatureImplementation*) impl)->getPlanet();
}

Coordinate* ShuttleCreatureAdapter::getArrivalPoint() {
	return ((ShuttleCreatureImplementation*) impl)->getArrivalPoint();
}

int ShuttleCreatureAdapter::getArrivalTime() {
	return ((ShuttleCreatureImplementation*) impl)->getArrivalTime();
}

unsigned int ShuttleCreatureAdapter::getTax() {
	return ((ShuttleCreatureImplementation*) impl)->getTax();
}

bool ShuttleCreatureAdapter::isStarport() {
	return ((ShuttleCreatureImplementation*) impl)->isStarport();
}

/*
 *	ShuttleCreatureHelper
 */

ShuttleCreatureHelper* ShuttleCreatureHelper::staticInitializer = ShuttleCreatureHelper::instance();

ShuttleCreatureHelper::ShuttleCreatureHelper() {
	className = "ShuttleCreature";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void ShuttleCreatureHelper::finalizeHelper() {
	ShuttleCreatureHelper::finalize();
}

DistributedObject* ShuttleCreatureHelper::instantiateObject() {
	return new ShuttleCreature(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ShuttleCreatureHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ShuttleCreatureAdapter((ShuttleCreatureImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	ShuttleCreatureServant
 */

ShuttleCreatureServant::ShuttleCreatureServant(unsigned long long oid) : CreatureImplementation(oid) {
	_classHelper = ShuttleCreatureHelper::instance();
}

ShuttleCreatureServant::~ShuttleCreatureServant() {
}

void ShuttleCreatureServant::_setStub(DistributedObjectStub* stub) {
	_this = (ShuttleCreature*) stub;
	CreatureServant::_setStub(stub);
}

DistributedObjectStub* ShuttleCreatureServant::_getStub() {
	return _this;
}

