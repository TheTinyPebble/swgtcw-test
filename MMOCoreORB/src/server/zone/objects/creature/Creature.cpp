/*
 *	server/zone/objects/creature/Creature.cpp generated by engine3 IDL compiler 0.60
 */

#include "Creature.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/group/GroupObject.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/managers/creature/CreatureTemplate.h"

#include "server/zone/objects/player/PlayerCreature.h"

/*
 *	CreatureStub
 */

Creature::Creature() : AiAgent(DummyConstructorParameter::instance()) {
	CreatureImplementation* _implementation = new CreatureImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

Creature::Creature(DummyConstructorParameter* param) : AiAgent(param) {
}

Creature::~Creature() {
}


bool Creature::isCreature() {
	CreatureImplementation* _implementation = (CreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isCreature();
}

void Creature::notifyPositionUpdate(QuadTreeEntry* entry) {
	CreatureImplementation* _implementation = (CreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->notifyPositionUpdate(entry);
}

void Creature::doAwarenessCheck(Coordinate& start, unsigned long long time, CreatureObject* target) {
	CreatureImplementation* _implementation = (CreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->doAwarenessCheck(start, time, target);
}

void Creature::runAway(CreatureObject* target) {
	CreatureImplementation* _implementation = (CreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(target);

		method.executeWithVoidReturn();
	} else
		_implementation->runAway(target);
}

void Creature::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player) {
	CreatureImplementation* _implementation = (CreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->fillObjectMenuResponse(menuResponse, player);
}

int Creature::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	CreatureImplementation* _implementation = (CreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->handleObjectMenuSelect(player, selectedID);
}

void Creature::harvest(PlayerCreature* player, byte selectedID) {
	CreatureImplementation* _implementation = (CreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		method.executeWithVoidReturn();
	} else
		_implementation->harvest(player, selectedID);
}

void Creature::fillAttributeList(AttributeListMessage* msg, PlayerCreature* object) {
	CreatureImplementation* _implementation = (CreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(msg);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		_implementation->fillAttributeList(msg, object);
}

void Creature::scheduleDespawn() {
	CreatureImplementation* _implementation = (CreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		method.executeWithVoidReturn();
	} else
		_implementation->scheduleDespawn();
}

bool Creature::hasOrganics() {
	CreatureImplementation* _implementation = (CreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasOrganics();
}

bool Creature::canHarvestMe(CreatureObject* player) {
	CreatureImplementation* _implementation = (CreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->canHarvestMe(player);
}

bool Creature::isBaby() {
	CreatureImplementation* _implementation = (CreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isBaby();
}

float Creature::getTame() {
	CreatureImplementation* _implementation = (CreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getTame();
}

String Creature::getMeatType() {
	CreatureImplementation* _implementation = (CreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		method.executeWithAsciiReturn(_return_getMeatType);
		return _return_getMeatType;
	} else
		return _implementation->getMeatType();
}

String Creature::getBoneType() {
	CreatureImplementation* _implementation = (CreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);

		method.executeWithAsciiReturn(_return_getBoneType);
		return _return_getBoneType;
	} else
		return _implementation->getBoneType();
}

String Creature::getHideType() {
	CreatureImplementation* _implementation = (CreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		method.executeWithAsciiReturn(_return_getHideType);
		return _return_getHideType;
	} else
		return _implementation->getHideType();
}

float Creature::getMilk() {
	CreatureImplementation* _implementation = (CreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getMilk();
}

float Creature::getHideMax() {
	CreatureImplementation* _implementation = (CreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getHideMax();
}

float Creature::getBoneMax() {
	CreatureImplementation* _implementation = (CreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getBoneMax();
}

float Creature::getMeatMax() {
	CreatureImplementation* _implementation = (CreatureImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getMeatMax();
}

DistributedObjectServant* Creature::_getImplementation() {

	_updated = true;
	return _impl;
}

void Creature::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;}

/*
 *	CreatureImplementation
 */

CreatureImplementation::CreatureImplementation(DummyConstructorParameter* param) : AiAgentImplementation(param) {
	_initializeImplementation();
}


CreatureImplementation::~CreatureImplementation() {
}


void CreatureImplementation::finalize() {
}

void CreatureImplementation::_initializeImplementation() {
	_setClassHelper(CreatureHelper::instance());

	_serializationHelperMethod();
}

void CreatureImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (Creature*) stub;
	AiAgentImplementation::_setStub(stub);
}

DistributedObjectStub* CreatureImplementation::_getStub() {
	return _this;
}

CreatureImplementation::operator const Creature*() {
	return _this;
}

void CreatureImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void CreatureImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void CreatureImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void CreatureImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void CreatureImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void CreatureImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void CreatureImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void CreatureImplementation::_serializationHelperMethod() {
	AiAgentImplementation::_serializationHelperMethod();

	_setClassName("Creature");

}

CreatureImplementation::CreatureImplementation() {
	_initializeImplementation();
	// server/zone/objects/creature/Creature.idl(63):  		Logger.setLoggingName("Creature");
	Logger::setLoggingName("Creature");
	// server/zone/objects/creature/Creature.idl(64):  		Logger.setLogging(false);
	Logger::setLogging(false);
	// server/zone/objects/creature/Creature.idl(65):  		Logger.setGlobalLogging(true);
	Logger::setGlobalLogging(true);
}

bool CreatureImplementation::isCreature() {
	// server/zone/objects/creature/Creature.idl(69):  		return true;
	return true;
}

bool CreatureImplementation::isBaby() {
	// server/zone/objects/creature/Creature.idl(106):  		return super.baby;
	return AiAgentImplementation::baby;
}

float CreatureImplementation::getTame() {
	// server/zone/objects/creature/Creature.idl(110):  		return 
	if (AiAgentImplementation::npcTemplate == NULL)	// server/zone/objects/creature/Creature.idl(111):  			return 0;
	return 0;
	// server/zone/objects/creature/Creature.idl(113):  super.npcTemplate.getTame();
	return AiAgentImplementation::npcTemplate->getTame();
}

String CreatureImplementation::getMeatType() {
	// server/zone/objects/creature/Creature.idl(117):  		return 
	if (AiAgentImplementation::npcTemplate == NULL)	// server/zone/objects/creature/Creature.idl(118):  			return "";
	return "";
	// server/zone/objects/creature/Creature.idl(120):  super.npcTemplate.getMeatType();
	return AiAgentImplementation::npcTemplate->getMeatType();
}

String CreatureImplementation::getBoneType() {
	// server/zone/objects/creature/Creature.idl(124):  		return 
	if (AiAgentImplementation::npcTemplate == NULL)	// server/zone/objects/creature/Creature.idl(125):  			return "";
	return "";
	// server/zone/objects/creature/Creature.idl(127):  super.npcTemplate.getBoneType();
	return AiAgentImplementation::npcTemplate->getBoneType();
}

String CreatureImplementation::getHideType() {
	// server/zone/objects/creature/Creature.idl(131):  		return 
	if (AiAgentImplementation::npcTemplate == NULL)	// server/zone/objects/creature/Creature.idl(132):  			return "";
	return "";
	// server/zone/objects/creature/Creature.idl(134):  super.npcTemplate.getHideType();
	return AiAgentImplementation::npcTemplate->getHideType();
}

float CreatureImplementation::getMilk() {
	// server/zone/objects/creature/Creature.idl(138):  		return 
	if (AiAgentImplementation::npcTemplate == NULL)	// server/zone/objects/creature/Creature.idl(139):  			return 0;
	return 0;
	// server/zone/objects/creature/Creature.idl(141):  super.npcTemplate.getMilk();
	return AiAgentImplementation::npcTemplate->getMilk();
}

float CreatureImplementation::getHideMax() {
	// server/zone/objects/creature/Creature.idl(145):  		return 
	if (AiAgentImplementation::npcTemplate == NULL)	// server/zone/objects/creature/Creature.idl(146):  			return 0;
	return 0;
	// server/zone/objects/creature/Creature.idl(148):  super.npcTemplate.getHideMax();
	return AiAgentImplementation::npcTemplate->getHideMax();
}

float CreatureImplementation::getBoneMax() {
	// server/zone/objects/creature/Creature.idl(152):  		return 
	if (AiAgentImplementation::npcTemplate == NULL)	// server/zone/objects/creature/Creature.idl(153):  			return 0;
	return 0;
	// server/zone/objects/creature/Creature.idl(155):  super.npcTemplate.getBoneMax();
	return AiAgentImplementation::npcTemplate->getBoneMax();
}

float CreatureImplementation::getMeatMax() {
	// server/zone/objects/creature/Creature.idl(159):  		return 
	if (AiAgentImplementation::npcTemplate == NULL)	// server/zone/objects/creature/Creature.idl(160):  			return 0;
	return 0;
	// server/zone/objects/creature/Creature.idl(162):  super.npcTemplate.getMeatMax();
	return AiAgentImplementation::npcTemplate->getMeatMax();
}

/*
 *	CreatureAdapter
 */

CreatureAdapter::CreatureAdapter(CreatureImplementation* obj) : AiAgentAdapter(obj) {
}

Packet* CreatureAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertBoolean(isCreature());
		break;
	case 7:
		runAway((CreatureObject*) inv->getObjectParameter());
		break;
	case 8:
		resp->insertSignedInt(handleObjectMenuSelect((PlayerCreature*) inv->getObjectParameter(), inv->getByteParameter()));
		break;
	case 9:
		harvest((PlayerCreature*) inv->getObjectParameter(), inv->getByteParameter());
		break;
	case 10:
		fillAttributeList((AttributeListMessage*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter());
		break;
	case 11:
		scheduleDespawn();
		break;
	case 12:
		resp->insertBoolean(hasOrganics());
		break;
	case 13:
		resp->insertBoolean(canHarvestMe((CreatureObject*) inv->getObjectParameter()));
		break;
	case 14:
		resp->insertBoolean(isBaby());
		break;
	case 15:
		resp->insertFloat(getTame());
		break;
	case 16:
		resp->insertAscii(getMeatType());
		break;
	case 17:
		resp->insertAscii(getBoneType());
		break;
	case 18:
		resp->insertAscii(getHideType());
		break;
	case 19:
		resp->insertFloat(getMilk());
		break;
	case 20:
		resp->insertFloat(getHideMax());
		break;
	case 21:
		resp->insertFloat(getBoneMax());
		break;
	case 22:
		resp->insertFloat(getMeatMax());
		break;
	default:
		return NULL;
	}

	return resp;
}

bool CreatureAdapter::isCreature() {
	return ((CreatureImplementation*) impl)->isCreature();
}

void CreatureAdapter::runAway(CreatureObject* target) {
	((CreatureImplementation*) impl)->runAway(target);
}

int CreatureAdapter::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	return ((CreatureImplementation*) impl)->handleObjectMenuSelect(player, selectedID);
}

void CreatureAdapter::harvest(PlayerCreature* player, byte selectedID) {
	((CreatureImplementation*) impl)->harvest(player, selectedID);
}

void CreatureAdapter::fillAttributeList(AttributeListMessage* msg, PlayerCreature* object) {
	((CreatureImplementation*) impl)->fillAttributeList(msg, object);
}

void CreatureAdapter::scheduleDespawn() {
	((CreatureImplementation*) impl)->scheduleDespawn();
}

bool CreatureAdapter::hasOrganics() {
	return ((CreatureImplementation*) impl)->hasOrganics();
}

bool CreatureAdapter::canHarvestMe(CreatureObject* player) {
	return ((CreatureImplementation*) impl)->canHarvestMe(player);
}

bool CreatureAdapter::isBaby() {
	return ((CreatureImplementation*) impl)->isBaby();
}

float CreatureAdapter::getTame() {
	return ((CreatureImplementation*) impl)->getTame();
}

String CreatureAdapter::getMeatType() {
	return ((CreatureImplementation*) impl)->getMeatType();
}

String CreatureAdapter::getBoneType() {
	return ((CreatureImplementation*) impl)->getBoneType();
}

String CreatureAdapter::getHideType() {
	return ((CreatureImplementation*) impl)->getHideType();
}

float CreatureAdapter::getMilk() {
	return ((CreatureImplementation*) impl)->getMilk();
}

float CreatureAdapter::getHideMax() {
	return ((CreatureImplementation*) impl)->getHideMax();
}

float CreatureAdapter::getBoneMax() {
	return ((CreatureImplementation*) impl)->getBoneMax();
}

float CreatureAdapter::getMeatMax() {
	return ((CreatureImplementation*) impl)->getMeatMax();
}

/*
 *	CreatureHelper
 */

CreatureHelper* CreatureHelper::staticInitializer = CreatureHelper::instance();

CreatureHelper::CreatureHelper() {
	className = "Creature";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void CreatureHelper::finalizeHelper() {
	CreatureHelper::finalize();
}

DistributedObject* CreatureHelper::instantiateObject() {
	return new Creature(DummyConstructorParameter::instance());
}

DistributedObjectServant* CreatureHelper::instantiateServant() {
	return new CreatureImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* CreatureHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new CreatureAdapter((CreatureImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

