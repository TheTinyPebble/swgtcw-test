/*
 *	server/zone/ZoneClientSession.h generated by engine3 IDL compiler 0.55
 */

#ifndef ZONECLIENTSESSION_H_
#define ZONECLIENTSESSION_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "system/net/Socket.h"

#include "system/net/SocketAddress.h"

#include "engine/service/DatagramServiceThread.h"

#include "engine/service/proto/BaseMessage.h"

#include "engine/service/proto/StandaloneBaseMessage.h"

class ZoneServer;

class Player;

class ZoneClientSession : public DistributedObjectStub {
public:
	ZoneClientSession(DatagramServiceThread* server, Socket* sock, SocketAddress* addr);

	void disconnect(bool doLock = true);

	void closeConnection(bool lockPlayer, bool doLock = true);

	void sendMessage(BaseMessage* msg);

	void sendMessage(StandaloneBaseMessage* msg);

	void resetPacketCheckupTime();

	void balancePacketCheckupTime();

	void info(const String& msg, bool foredLog = false);

	void setPlayer(Player* player);

	Player* getPlayer();

	bool isAvailable();

	String& getAddress();

	unsigned int getSessionKey();

protected:
	ZoneClientSession(DummyConstructorParameter* param);

	virtual ~ZoneClientSession();

	String _return_getAddress;

	friend class ZoneClientSessionHelper;
};

class ZoneClientSessionImplementation;

class ZoneClientSessionAdapter : public DistributedObjectAdapter {
public:
	ZoneClientSessionAdapter(ZoneClientSessionImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void disconnect(bool doLock);

	void closeConnection(bool lockPlayer, bool doLock);

	void sendMessage(BaseMessage* msg);

	void sendMessage(StandaloneBaseMessage* msg);

	void resetPacketCheckupTime();

	void balancePacketCheckupTime();

	void info(const String& msg, bool foredLog);

	void setPlayer(Player* player);

	Player* getPlayer();

	bool isAvailable();

	String& getAddress();

	unsigned int getSessionKey();

protected:
	String _param0_info__String_bool_;
};

class ZoneClientSessionHelper : public DistributedObjectClassHelper, public Singleton<ZoneClientSessionHelper> {
	static ZoneClientSessionHelper* staticInitializer;

public:
	ZoneClientSessionHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<ZoneClientSessionHelper>;
};

class ZoneClientSessionServant : public DistributedObjectServant {
public:
	ZoneClientSession* _this;

public:
	ZoneClientSessionServant();
	virtual ~ZoneClientSessionServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*ZONECLIENTSESSION_H_*/
