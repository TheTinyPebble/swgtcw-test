/*
 *	server/zone/Zone.cpp generated by engine3 IDL compiler 0.55
 */

#include "Zone.h"

#include "ZoneImplementation.h"

#include "objects/scene/SceneObject.h"

#include "ZoneServer.h"

#include "../chat/ChatManager.h"

#include "managers/planet/PlanetManager.h"

#include "managers/creature/CreatureManager.h"

/*
 *	ZoneStub
 */

Zone::Zone(ZoneServer* zserv, ZoneProcessServerImplementation* processor, int zoneid) {
	_impl = new ZoneImplementation(zserv, processor, zoneid);
	_impl->_setStub(this);
}

Zone::Zone(DummyConstructorParameter* param) {
	_impl = NULL;
}

Zone::~Zone() {
}

void Zone::startManagers() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((ZoneImplementation*) _impl)->startManagers();
}

void Zone::stopManagers() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		((ZoneImplementation*) _impl)->stopManagers();
}

void Zone::lock(bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		((ZoneImplementation*) _impl)->lock(doLock);
}

void Zone::unlock(bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		((ZoneImplementation*) _impl)->unlock(doLock);
}

void Zone::registerObject(SceneObject* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((ZoneImplementation*) _impl)->registerObject(obj);
}

SceneObject* Zone::lookupObject(unsigned long long oid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addUnsignedLongParameter(oid);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((ZoneImplementation*) _impl)->lookupObject(oid);
}

SceneObject* Zone::deleteObject(unsigned long long oid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addUnsignedLongParameter(oid);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((ZoneImplementation*) _impl)->deleteObject(oid);
}

SceneObject* Zone::deleteObject(SceneObject* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addObjectParameter(obj);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((ZoneImplementation*) _impl)->deleteObject(obj);
}

SceneObject* Zone::deleteCachedObject(SceneObject* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addObjectParameter(obj);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((ZoneImplementation*) _impl)->deleteCachedObject(obj);
}

float Zone::getHeight(float x, float y) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addFloatParameter(x);
		method.addFloatParameter(y);

		return method.executeWithFloatReturn();
	} else
		return ((ZoneImplementation*) _impl)->getHeight(x, y);
}

void Zone::setSize(float minx, float miny, float maxx, float maxy) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addFloatParameter(minx);
		method.addFloatParameter(miny);
		method.addFloatParameter(maxx);
		method.addFloatParameter(maxy);

		method.executeWithVoidReturn();
	} else
		((ZoneImplementation*) _impl)->setSize(minx, miny, maxx, maxy);
}

void Zone::insert(QuadTreeEntry* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((ZoneImplementation*) _impl)->insert(obj);
}

void Zone::remove(QuadTreeEntry* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((ZoneImplementation*) _impl)->remove(obj);
}

void Zone::removeAll() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);

		method.executeWithVoidReturn();
	} else
		((ZoneImplementation*) _impl)->removeAll();
}

bool Zone::update(QuadTreeEntry* obj) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addObjectParameter(obj);

		return method.executeWithBooleanReturn();
	} else
		return ((ZoneImplementation*) _impl)->update(obj);
}

void Zone::inRange(QuadTreeEntry* obj, float range) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addObjectParameter(obj);
		method.addFloatParameter(range);

		method.executeWithVoidReturn();
	} else
		((ZoneImplementation*) _impl)->inRange(obj, range);
}

int Zone::getZoneID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);

		return method.executeWithSignedIntReturn();
	} else
		return ((ZoneImplementation*) _impl)->getZoneID();
}

ZoneServer* Zone::getZoneServer() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);

		return (ZoneServer*) method.executeWithObjectReturn();
	} else
		return ((ZoneImplementation*) _impl)->getZoneServer();
}

ChatManager* Zone::getChatManager() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);

		return (ChatManager*) method.executeWithObjectReturn();
	} else
		return ((ZoneImplementation*) _impl)->getChatManager();
}

CreatureManager* Zone::getCreatureManager() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);

		return (CreatureManager*) method.executeWithObjectReturn();
	} else
		return ((ZoneImplementation*) _impl)->getCreatureManager();
}

PlanetManager* Zone::getPlanetManager() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);

		return (PlanetManager*) method.executeWithObjectReturn();
	} else
		return ((ZoneImplementation*) _impl)->getPlanetManager();
}

unsigned long long Zone::getGalacticTime() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((ZoneImplementation*) _impl)->getGalacticTime();
}

unsigned int Zone::getWeatherID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((ZoneImplementation*) _impl)->getWeatherID();
}

void Zone::setWeatherID(unsigned int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);
		method.addUnsignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((ZoneImplementation*) _impl)->setWeatherID(value);
}

void Zone::changeWeatherID(int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((ZoneImplementation*) _impl)->changeWeatherID(value);
}

bool Zone::isWeatherEnabled() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);

		return method.executeWithBooleanReturn();
	} else
		return ((ZoneImplementation*) _impl)->isWeatherEnabled();
}

void Zone::setWeatherEnabled(bool value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);
		method.addBooleanParameter(value);

		method.executeWithVoidReturn();
	} else
		((ZoneImplementation*) _impl)->setWeatherEnabled(value);
}

void Zone::setWeatherWindX(float value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else
		((ZoneImplementation*) _impl)->setWeatherWindX(value);
}

void Zone::setWeatherWindY(float value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else
		((ZoneImplementation*) _impl)->setWeatherWindY(value);
}

float Zone::getWeatherWindX() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);

		return method.executeWithFloatReturn();
	} else
		return ((ZoneImplementation*) _impl)->getWeatherWindX();
}

float Zone::getWeatherWindY() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 36);

		return method.executeWithFloatReturn();
	} else
		return ((ZoneImplementation*) _impl)->getWeatherWindY();
}

/*
 *	ZoneAdapter
 */

ZoneAdapter::ZoneAdapter(ZoneImplementation* obj) : DistributedObjectAdapter((DistributedObjectServant*) obj) {
}

Packet* ZoneAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		startManagers();
		break;
	case 7:
		stopManagers();
		break;
	case 8:
		lock(inv->getBooleanParameter());
		break;
	case 9:
		unlock(inv->getBooleanParameter());
		break;
	case 10:
		registerObject((SceneObject*) inv->getObjectParameter());
		break;
	case 11:
		resp->insertLong(lookupObject(inv->getUnsignedLongParameter())->_getObjectID());
		break;
	case 12:
		resp->insertLong(deleteObject(inv->getUnsignedLongParameter())->_getObjectID());
		break;
	case 13:
		resp->insertLong(deleteObject((SceneObject*) inv->getObjectParameter())->_getObjectID());
		break;
	case 14:
		resp->insertLong(deleteCachedObject((SceneObject*) inv->getObjectParameter())->_getObjectID());
		break;
	case 15:
		resp->insertFloat(getHeight(inv->getFloatParameter(), inv->getFloatParameter()));
		break;
	case 16:
		setSize(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter());
		break;
	case 17:
		insert((QuadTreeEntry*) inv->getObjectParameter());
		break;
	case 18:
		remove((QuadTreeEntry*) inv->getObjectParameter());
		break;
	case 19:
		removeAll();
		break;
	case 20:
		resp->insertBoolean(update((QuadTreeEntry*) inv->getObjectParameter()));
		break;
	case 21:
		inRange((QuadTreeEntry*) inv->getObjectParameter(), inv->getFloatParameter());
		break;
	case 22:
		resp->insertSignedInt(getZoneID());
		break;
	case 23:
		resp->insertLong(getZoneServer()->_getObjectID());
		break;
	case 24:
		resp->insertLong(getChatManager()->_getObjectID());
		break;
	case 25:
		resp->insertLong(getCreatureManager()->_getObjectID());
		break;
	case 26:
		resp->insertLong(getPlanetManager()->_getObjectID());
		break;
	case 27:
		resp->insertLong(getGalacticTime());
		break;
	case 28:
		resp->insertInt(getWeatherID());
		break;
	case 29:
		setWeatherID(inv->getUnsignedIntParameter());
		break;
	case 30:
		changeWeatherID(inv->getSignedIntParameter());
		break;
	case 31:
		resp->insertBoolean(isWeatherEnabled());
		break;
	case 32:
		setWeatherEnabled(inv->getBooleanParameter());
		break;
	case 33:
		setWeatherWindX(inv->getFloatParameter());
		break;
	case 34:
		setWeatherWindY(inv->getFloatParameter());
		break;
	case 35:
		resp->insertFloat(getWeatherWindX());
		break;
	case 36:
		resp->insertFloat(getWeatherWindY());
		break;
	default:
		return NULL;
	}

	return resp;
}

void ZoneAdapter::startManagers() {
	return ((ZoneImplementation*) impl)->startManagers();
}

void ZoneAdapter::stopManagers() {
	return ((ZoneImplementation*) impl)->stopManagers();
}

void ZoneAdapter::lock(bool doLock) {
	return ((ZoneImplementation*) impl)->lock(doLock);
}

void ZoneAdapter::unlock(bool doLock) {
	return ((ZoneImplementation*) impl)->unlock(doLock);
}

void ZoneAdapter::registerObject(SceneObject* obj) {
	return ((ZoneImplementation*) impl)->registerObject(obj);
}

SceneObject* ZoneAdapter::lookupObject(unsigned long long oid) {
	return ((ZoneImplementation*) impl)->lookupObject(oid);
}

SceneObject* ZoneAdapter::deleteObject(unsigned long long oid) {
	return ((ZoneImplementation*) impl)->deleteObject(oid);
}

SceneObject* ZoneAdapter::deleteObject(SceneObject* obj) {
	return ((ZoneImplementation*) impl)->deleteObject(obj);
}

SceneObject* ZoneAdapter::deleteCachedObject(SceneObject* obj) {
	return ((ZoneImplementation*) impl)->deleteCachedObject(obj);
}

float ZoneAdapter::getHeight(float x, float y) {
	return ((ZoneImplementation*) impl)->getHeight(x, y);
}

void ZoneAdapter::setSize(float minx, float miny, float maxx, float maxy) {
	return ((ZoneImplementation*) impl)->setSize(minx, miny, maxx, maxy);
}

void ZoneAdapter::insert(QuadTreeEntry* obj) {
	return ((ZoneImplementation*) impl)->insert(obj);
}

void ZoneAdapter::remove(QuadTreeEntry* obj) {
	return ((ZoneImplementation*) impl)->remove(obj);
}

void ZoneAdapter::removeAll() {
	return ((ZoneImplementation*) impl)->removeAll();
}

bool ZoneAdapter::update(QuadTreeEntry* obj) {
	return ((ZoneImplementation*) impl)->update(obj);
}

void ZoneAdapter::inRange(QuadTreeEntry* obj, float range) {
	return ((ZoneImplementation*) impl)->inRange(obj, range);
}

int ZoneAdapter::getZoneID() {
	return ((ZoneImplementation*) impl)->getZoneID();
}

ZoneServer* ZoneAdapter::getZoneServer() {
	return ((ZoneImplementation*) impl)->getZoneServer();
}

ChatManager* ZoneAdapter::getChatManager() {
	return ((ZoneImplementation*) impl)->getChatManager();
}

CreatureManager* ZoneAdapter::getCreatureManager() {
	return ((ZoneImplementation*) impl)->getCreatureManager();
}

PlanetManager* ZoneAdapter::getPlanetManager() {
	return ((ZoneImplementation*) impl)->getPlanetManager();
}

unsigned long long ZoneAdapter::getGalacticTime() {
	return ((ZoneImplementation*) impl)->getGalacticTime();
}

unsigned int ZoneAdapter::getWeatherID() {
	return ((ZoneImplementation*) impl)->getWeatherID();
}

void ZoneAdapter::setWeatherID(unsigned int value) {
	return ((ZoneImplementation*) impl)->setWeatherID(value);
}

void ZoneAdapter::changeWeatherID(int value) {
	return ((ZoneImplementation*) impl)->changeWeatherID(value);
}

bool ZoneAdapter::isWeatherEnabled() {
	return ((ZoneImplementation*) impl)->isWeatherEnabled();
}

void ZoneAdapter::setWeatherEnabled(bool value) {
	return ((ZoneImplementation*) impl)->setWeatherEnabled(value);
}

void ZoneAdapter::setWeatherWindX(float value) {
	return ((ZoneImplementation*) impl)->setWeatherWindX(value);
}

void ZoneAdapter::setWeatherWindY(float value) {
	return ((ZoneImplementation*) impl)->setWeatherWindY(value);
}

float ZoneAdapter::getWeatherWindX() {
	return ((ZoneImplementation*) impl)->getWeatherWindX();
}

float ZoneAdapter::getWeatherWindY() {
	return ((ZoneImplementation*) impl)->getWeatherWindY();
}

/*
 *	ZoneHelper
 */

ZoneHelper* ZoneHelper::staticInitializer = ZoneHelper::instance();

ZoneHelper::ZoneHelper() {
	className = "Zone";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void ZoneHelper::finalizeHelper() {
	ZoneHelper::finalize();
}

DistributedObject* ZoneHelper::instantiateObject() {
	return new Zone(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ZoneHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ZoneAdapter((ZoneImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	ZoneServant
 */

ZoneServant::ZoneServant() {
	_classHelper = ZoneHelper::instance();
}

ZoneServant::~ZoneServant() {
}

void ZoneServant::_setStub(DistributedObjectStub* stub) {
	_this = (Zone*) stub;
}

DistributedObjectStub* ZoneServant::_getStub() {
	return _this;
}

