/*
Copyright (C) 2007 <SWGEmu>
 
This File is part of Core3.
 
This program is free software; you can redistribute 
it and/or modify it under the terms of the GNU Lesser 
General Public License as published by the Free Software
Foundation; either version 2 of the License, 
or (at your option) any later version.
 
This program is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
See the GNU Lesser General Public License for
more details.
 
You should have received a copy of the GNU Lesser General 
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 
Linking Engine3 statically or dynamically with other modules 
is making a combined work based on Engine3. 
Thus, the terms and conditions of the GNU Lesser General Public License 
cover the whole combination.
 
In addition, as a special exception, the copyright holders of Engine3 
give you permission to combine Engine3 program with free software 
programs or libraries that are released under the GNU LGPL and with 
code included in the standard release of Core3 under the GNU LGPL 
license (or modified versions of such code, with unchanged license). 
You may copy and distribute such a system following the terms of the 
GNU LGPL for Engine3 and the licenses of the other code concerned, 
provided that you include the source code of that other code when 
and as the GNU LGPL requires distribution of source code.
 
Note that people who make modified versions of Engine3 are not obligated 
to grant this special exception for their modified versions; 
it is their choice whether to do so. The GNU Lesser General Public License 
gives permission to release a modified version without this exception; 
this exception also makes it possible to release a modified version 
which carries forward this exception.
*/

package server.zone;

import engine.util.QuadTree;
import engine.util.QuadTreeEntry;

import engine.sched.ScheduleManager;
import system.lang.Time;
import engine.sched.ScheduleManager;
import engine.core.ManagedObject;

import server.zone.ZoneProcessServerImplementation;
import server.zone.ZoneServer;
import server.zone.managers.structure.StructureManager;


include server.zone.managers.planet.HeightMap;

class Zone extends ManagedObject implements QuadTree {
	int zoneID;

	ZoneProcessServerImplementation processor;

	ScheduleManager scheduler;
	
	StructureManager structureManager; // move to planet manager when converted
	
	ZoneServer server;

	Time galacticTime;
	
	HeightMap heightMap;

	//Weather
	float weatherWindX; //1.0 = east, -1.0 = west
	float weatherWindY; //1.0 = north, -1.0 = south
	unsigned int weatherID;
	boolean weatherEnabled;
	
	native public Zone(ZoneServer zserv, ZoneProcessServerImplementation processor, int zoneid);
	
	public native void lock(boolean doLock = true);
	public native void unlock(boolean doLock = true);
	
	public local native void insert(QuadTreeEntry entry);
	public local native void remove(QuadTreeEntry entry);
	public local native void update(QuadTreeEntry entry);
	public local native void inRange(QuadTreeEntry entry, float range);

	public native void startManagers();

	public native void stopManagers();
	
	public native float getHeight(float x, float y);

	// setters and getters
	public int getZoneID() {
		return zoneID;
	}
	
	//public native SceneObject lookupObject(unsigned long objectID);

	public ZoneServer getZoneServer() {
		return server;
	}
	
	public unsigned long getGalacticTime() {
		return galacticTime.miliDifference() / 1000;
	}

	public unsigned int getWeatherID() {
		return weatherID;
	}

	public void setWeatherID(unsigned int value) {
		weatherID = value;
	}

	public void changeWeatherID(int value) {
		if (weatherID == 0 && value < 0) {
			weatherID = 0;
			return;
		}

		weatherID += value;

		if (weatherID > 4) {
			weatherID = 4;
			return;
		}
	}

	public boolean isWeatherEnabled() {
		return weatherEnabled;
	}

	public void setWeatherEnabled(boolean value) {
		weatherEnabled = value;
	}

	public void setWeatherWindX(float value) {
		weatherWindX = value;
	}

	public void setWeatherWindY(float value) {
		weatherWindY = value;
	}

	public float getWeatherWindX() {
		return weatherWindX;
	}

	public float getWeatherWindY() {
		return weatherWindY;
	}
}
