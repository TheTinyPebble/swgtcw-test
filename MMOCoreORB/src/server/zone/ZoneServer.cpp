/*
 *	server/zone/ZoneServer.cpp generated by engine3 IDL compiler 0.60
 */

#include "ZoneServer.h"

#include "server/zone/ZoneProcessServerImplementation.h"

#include "server/zone/managers/object/ObjectManager.h"

#include "server/zone/Zone.h"

/*
 *	ZoneServerStub
 */

ZoneServer::ZoneServer(int processingThreads, int galaxyid) : ManagedObject(DummyConstructorParameter::instance()) {
	_impl = new ZoneServerImplementation(processingThreads, galaxyid);
	_impl->_setStub(this);
}

ZoneServer::ZoneServer(DummyConstructorParameter* param) : ManagedObject(param) {
}

ZoneServer::~ZoneServer() {
}

ServiceClient* ZoneServer::createConnection(Socket* sock, SocketAddress& addr) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((ZoneServerImplementation*) _impl)->createConnection(sock, addr);
}

void ZoneServer::init() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->init();
}

void ZoneServer::run() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->run();
}

void ZoneServer::shutdown() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->shutdown();
}

void ZoneServer::startManagers() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->startManagers();
}

void ZoneServer::stopManagers() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->stopManagers();
}

void ZoneServer::start(int p, int mconn) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addSignedIntParameter(p);
		method.addSignedIntParameter(mconn);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->start(p, mconn);
}

void ZoneServer::stop() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->stop();
}

void ZoneServer::handleMessage(ServiceClient* client, Packet* message) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((ZoneServerImplementation*) _impl)->handleMessage(client, message);
}

bool ZoneServer::handleError(ServiceClient* client, Exception& e) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((ZoneServerImplementation*) _impl)->handleError(client, e);
}

void ZoneServer::addTotalSentPacket(int count) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addSignedIntParameter(count);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->addTotalSentPacket(count);
}

void ZoneServer::addTotalResentPacket(int count) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addSignedIntParameter(count);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->addTotalResentPacket(count);
}

void ZoneServer::printInfo(bool forcedLog) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addBooleanParameter(forcedLog);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->printInfo(forcedLog);
}

void ZoneServer::printEvents() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->printEvents();
}

void ZoneServer::lock() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->lock();
}

void ZoneServer::unlock() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->unlock();
}

void ZoneServer::lock(bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->lock(doLock);
}

void ZoneServer::unlock(bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->unlock(doLock);
}

void ZoneServer::fixScheduler() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->fixScheduler();
}

void ZoneServer::changeUserCap(int amount) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);
		method.addSignedIntParameter(amount);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->changeUserCap(amount);
}

int ZoneServer::getConnectionCount() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);

		return method.executeWithSignedIntReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getConnectionCount();
}

void ZoneServer::increaseTotalDeletedPlayers() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->increaseTotalDeletedPlayers();
}

int ZoneServer::getGalaxyID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);

		return method.executeWithSignedIntReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getGalaxyID();
}

String ZoneServer::getServerName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);

		method.executeWithAsciiReturn(_return_getServerName);
		return _return_getServerName;
	} else
		return ((ZoneServerImplementation*) _impl)->getServerName();
}

bool ZoneServer::isServerLocked() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);

		return method.executeWithBooleanReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->isServerLocked();
}

bool ZoneServer::isServerOnline() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);

		return method.executeWithBooleanReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->isServerOnline();
}

bool ZoneServer::isServerOffline() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);

		return method.executeWithBooleanReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->isServerOffline();
}

bool ZoneServer::isServerLoading() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);

		return method.executeWithBooleanReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->isServerLoading();
}

int ZoneServer::getServerState() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);

		return method.executeWithSignedIntReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getServerState();
}

Zone* ZoneServer::getZone(int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);
		method.addSignedIntParameter(index);

		return (Zone*) method.executeWithObjectReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getZone(index);
}

int ZoneServer::getMaxPlayers() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);

		return method.executeWithSignedIntReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getMaxPlayers();
}

int ZoneServer::getTotalPlayers() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);

		return method.executeWithSignedIntReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getTotalPlayers();
}

int ZoneServer::getDeletedPlayers() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);

		return method.executeWithSignedIntReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getDeletedPlayers();
}

unsigned long long ZoneServer::getNextCreatureID(bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 36);
		method.addBooleanParameter(doLock);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getNextCreatureID(doLock);
}

unsigned long long ZoneServer::getNextID(bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 37);
		method.addBooleanParameter(doLock);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getNextID(doLock);
}

unsigned long long ZoneServer::getNextCellID(bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 38);
		method.addBooleanParameter(doLock);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getNextCellID(doLock);
}

void ZoneServer::setServerName(const String& servername) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 39);
		method.addAsciiParameter(servername);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->setServerName(servername);
}

void ZoneServer::setGalaxyID(int galaxyid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 40);
		method.addSignedIntParameter(galaxyid);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->setGalaxyID(galaxyid);
}

void ZoneServer::setServerState(int state) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 41);
		method.addSignedIntParameter(state);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->setServerState(state);
}

void ZoneServer::setServerStateLocked() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 42);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->setServerStateLocked();
}

void ZoneServer::setServerStateOnline() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 43);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->setServerStateOnline();
}

void ZoneServer::loadMessageoftheDay() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 44);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->loadMessageoftheDay();
}

void ZoneServer::changeMessageoftheDay(const String& newMOTD) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 45);
		method.addAsciiParameter(newMOTD);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->changeMessageoftheDay(newMOTD);
}

String ZoneServer::getMessageoftheDay() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 46);

		method.executeWithAsciiReturn(_return_getMessageoftheDay);
		return _return_getMessageoftheDay;
	} else
		return ((ZoneServerImplementation*) _impl)->getMessageoftheDay();
}

/*
 *	ZoneServerImplementation
 */

ZoneServerImplementation::~ZoneServerImplementation() {
}

void ZoneServerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (ZoneServer*) stub;
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* ZoneServerImplementation::_getStub() {
	return _this;
}

void ZoneServerImplementation::fixScheduler() {
	// server/zone/ZoneServer.idl(134):  scheduler.fixQueue();
	scheduler->fixQueue();
}

void ZoneServerImplementation::increaseTotalDeletedPlayers() {
	// server/zone/ZoneServer.idl(142):  this.lock();
	this->lock();
	// server/zone/ZoneServer.idl(144):  ++totalDeletedPlayers;
	 ++totalDeletedPlayers;
	// server/zone/ZoneServer.idl(146):  this.unlock();
	this->unlock();
}

int ZoneServerImplementation::getGalaxyID() {
	// server/zone/ZoneServer.idl(150):  return galaxyID;
	return galaxyID;
}

bool ZoneServerImplementation::isServerLocked() {
	// server/zone/ZoneServer.idl(156):  return serverState == LOCKED;
	return serverState == LOCKED;
}

bool ZoneServerImplementation::isServerOnline() {
	// server/zone/ZoneServer.idl(160):  return serverState == ONLINE;
	return serverState == ONLINE;
}

bool ZoneServerImplementation::isServerOffline() {
	// server/zone/ZoneServer.idl(164):  return serverState == OFFLINE;
	return serverState == OFFLINE;
}

bool ZoneServerImplementation::isServerLoading() {
	// server/zone/ZoneServer.idl(168):  return serverState == LOADING;
	return serverState == LOADING;
}

int ZoneServerImplementation::getServerState() {
	// server/zone/ZoneServer.idl(172):  return serverState;
	return serverState;
}

Zone* ZoneServerImplementation::getZone(int index) {
	// server/zone/ZoneServer.idl(176):  return zones.get(index);
	return zones->get(index);
}

int ZoneServerImplementation::getMaxPlayers() {
	// server/zone/ZoneServer.idl(180):  return maximumPlayers;
	return maximumPlayers;
}

int ZoneServerImplementation::getTotalPlayers() {
	// server/zone/ZoneServer.idl(184):  return totalPlayers;
	return totalPlayers;
}

int ZoneServerImplementation::getDeletedPlayers() {
	// server/zone/ZoneServer.idl(188):  return totalDeletedPlayers;
	return totalDeletedPlayers;
}

void ZoneServerImplementation::setGalaxyID(int galaxyid) {
	// server/zone/ZoneServer.idl(202):  galaxyID = galaxyid;
	galaxyID = galaxyid;
}

void ZoneServerImplementation::setServerState(int state) {
	// server/zone/ZoneServer.idl(206):  lock();
	lock();
	// server/zone/ZoneServer.idl(208):  serverState = state;
	serverState = state;
	// server/zone/ZoneServer.idl(210):  unlock();
	unlock();
}

/*
 *	ZoneServerAdapter
 */

ZoneServerAdapter::ZoneServerAdapter(ZoneServerImplementation* obj) : ManagedObjectAdapter(obj) {
}

Packet* ZoneServerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		init();
		break;
	case 7:
		run();
		break;
	case 8:
		shutdown();
		break;
	case 9:
		startManagers();
		break;
	case 10:
		stopManagers();
		break;
	case 11:
		start(inv->getSignedIntParameter(), inv->getSignedIntParameter());
		break;
	case 12:
		stop();
		break;
	case 13:
		addTotalSentPacket(inv->getSignedIntParameter());
		break;
	case 14:
		addTotalResentPacket(inv->getSignedIntParameter());
		break;
	case 15:
		printInfo(inv->getBooleanParameter());
		break;
	case 16:
		printEvents();
		break;
	case 17:
		lock();
		break;
	case 18:
		unlock();
		break;
	case 19:
		lock(inv->getBooleanParameter());
		break;
	case 20:
		unlock(inv->getBooleanParameter());
		break;
	case 21:
		fixScheduler();
		break;
	case 22:
		changeUserCap(inv->getSignedIntParameter());
		break;
	case 23:
		resp->insertSignedInt(getConnectionCount());
		break;
	case 24:
		increaseTotalDeletedPlayers();
		break;
	case 25:
		resp->insertSignedInt(getGalaxyID());
		break;
	case 26:
		resp->insertAscii(getServerName());
		break;
	case 27:
		resp->insertBoolean(isServerLocked());
		break;
	case 28:
		resp->insertBoolean(isServerOnline());
		break;
	case 29:
		resp->insertBoolean(isServerOffline());
		break;
	case 30:
		resp->insertBoolean(isServerLoading());
		break;
	case 31:
		resp->insertSignedInt(getServerState());
		break;
	case 32:
		resp->insertLong(getZone(inv->getSignedIntParameter())->_getObjectID());
		break;
	case 33:
		resp->insertSignedInt(getMaxPlayers());
		break;
	case 34:
		resp->insertSignedInt(getTotalPlayers());
		break;
	case 35:
		resp->insertSignedInt(getDeletedPlayers());
		break;
	case 36:
		resp->insertLong(getNextCreatureID(inv->getBooleanParameter()));
		break;
	case 37:
		resp->insertLong(getNextID(inv->getBooleanParameter()));
		break;
	case 38:
		resp->insertLong(getNextCellID(inv->getBooleanParameter()));
		break;
	case 39:
		setServerName(inv->getAsciiParameter(_param0_setServerName__String_));
		break;
	case 40:
		setGalaxyID(inv->getSignedIntParameter());
		break;
	case 41:
		setServerState(inv->getSignedIntParameter());
		break;
	case 42:
		setServerStateLocked();
		break;
	case 43:
		setServerStateOnline();
		break;
	case 44:
		loadMessageoftheDay();
		break;
	case 45:
		changeMessageoftheDay(inv->getAsciiParameter(_param0_changeMessageoftheDay__String_));
		break;
	case 46:
		resp->insertAscii(getMessageoftheDay());
		break;
	default:
		return NULL;
	}

	return resp;
}

void ZoneServerAdapter::init() {
	return ((ZoneServerImplementation*) impl)->init();
}

void ZoneServerAdapter::run() {
	return ((ZoneServerImplementation*) impl)->run();
}

void ZoneServerAdapter::shutdown() {
	return ((ZoneServerImplementation*) impl)->shutdown();
}

void ZoneServerAdapter::startManagers() {
	return ((ZoneServerImplementation*) impl)->startManagers();
}

void ZoneServerAdapter::stopManagers() {
	return ((ZoneServerImplementation*) impl)->stopManagers();
}

void ZoneServerAdapter::start(int p, int mconn) {
	return ((ZoneServerImplementation*) impl)->start(p, mconn);
}

void ZoneServerAdapter::stop() {
	return ((ZoneServerImplementation*) impl)->stop();
}

void ZoneServerAdapter::addTotalSentPacket(int count) {
	return ((ZoneServerImplementation*) impl)->addTotalSentPacket(count);
}

void ZoneServerAdapter::addTotalResentPacket(int count) {
	return ((ZoneServerImplementation*) impl)->addTotalResentPacket(count);
}

void ZoneServerAdapter::printInfo(bool forcedLog) {
	return ((ZoneServerImplementation*) impl)->printInfo(forcedLog);
}

void ZoneServerAdapter::printEvents() {
	return ((ZoneServerImplementation*) impl)->printEvents();
}

void ZoneServerAdapter::lock() {
	return ((ZoneServerImplementation*) impl)->lock();
}

void ZoneServerAdapter::unlock() {
	return ((ZoneServerImplementation*) impl)->unlock();
}

void ZoneServerAdapter::lock(bool doLock) {
	return ((ZoneServerImplementation*) impl)->lock(doLock);
}

void ZoneServerAdapter::unlock(bool doLock) {
	return ((ZoneServerImplementation*) impl)->unlock(doLock);
}

void ZoneServerAdapter::fixScheduler() {
	return ((ZoneServerImplementation*) impl)->fixScheduler();
}

void ZoneServerAdapter::changeUserCap(int amount) {
	return ((ZoneServerImplementation*) impl)->changeUserCap(amount);
}

int ZoneServerAdapter::getConnectionCount() {
	return ((ZoneServerImplementation*) impl)->getConnectionCount();
}

void ZoneServerAdapter::increaseTotalDeletedPlayers() {
	return ((ZoneServerImplementation*) impl)->increaseTotalDeletedPlayers();
}

int ZoneServerAdapter::getGalaxyID() {
	return ((ZoneServerImplementation*) impl)->getGalaxyID();
}

String ZoneServerAdapter::getServerName() {
	return ((ZoneServerImplementation*) impl)->getServerName();
}

bool ZoneServerAdapter::isServerLocked() {
	return ((ZoneServerImplementation*) impl)->isServerLocked();
}

bool ZoneServerAdapter::isServerOnline() {
	return ((ZoneServerImplementation*) impl)->isServerOnline();
}

bool ZoneServerAdapter::isServerOffline() {
	return ((ZoneServerImplementation*) impl)->isServerOffline();
}

bool ZoneServerAdapter::isServerLoading() {
	return ((ZoneServerImplementation*) impl)->isServerLoading();
}

int ZoneServerAdapter::getServerState() {
	return ((ZoneServerImplementation*) impl)->getServerState();
}

Zone* ZoneServerAdapter::getZone(int index) {
	return ((ZoneServerImplementation*) impl)->getZone(index);
}

int ZoneServerAdapter::getMaxPlayers() {
	return ((ZoneServerImplementation*) impl)->getMaxPlayers();
}

int ZoneServerAdapter::getTotalPlayers() {
	return ((ZoneServerImplementation*) impl)->getTotalPlayers();
}

int ZoneServerAdapter::getDeletedPlayers() {
	return ((ZoneServerImplementation*) impl)->getDeletedPlayers();
}

unsigned long long ZoneServerAdapter::getNextCreatureID(bool doLock) {
	return ((ZoneServerImplementation*) impl)->getNextCreatureID(doLock);
}

unsigned long long ZoneServerAdapter::getNextID(bool doLock) {
	return ((ZoneServerImplementation*) impl)->getNextID(doLock);
}

unsigned long long ZoneServerAdapter::getNextCellID(bool doLock) {
	return ((ZoneServerImplementation*) impl)->getNextCellID(doLock);
}

void ZoneServerAdapter::setServerName(const String& servername) {
	return ((ZoneServerImplementation*) impl)->setServerName(servername);
}

void ZoneServerAdapter::setGalaxyID(int galaxyid) {
	return ((ZoneServerImplementation*) impl)->setGalaxyID(galaxyid);
}

void ZoneServerAdapter::setServerState(int state) {
	return ((ZoneServerImplementation*) impl)->setServerState(state);
}

void ZoneServerAdapter::setServerStateLocked() {
	return ((ZoneServerImplementation*) impl)->setServerStateLocked();
}

void ZoneServerAdapter::setServerStateOnline() {
	return ((ZoneServerImplementation*) impl)->setServerStateOnline();
}

void ZoneServerAdapter::loadMessageoftheDay() {
	return ((ZoneServerImplementation*) impl)->loadMessageoftheDay();
}

void ZoneServerAdapter::changeMessageoftheDay(const String& newMOTD) {
	return ((ZoneServerImplementation*) impl)->changeMessageoftheDay(newMOTD);
}

String ZoneServerAdapter::getMessageoftheDay() {
	return ((ZoneServerImplementation*) impl)->getMessageoftheDay();
}

/*
 *	ZoneServerHelper
 */

ZoneServerHelper* ZoneServerHelper::staticInitializer = ZoneServerHelper::instance();

ZoneServerHelper::ZoneServerHelper() {
	className = "ZoneServer";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void ZoneServerHelper::finalizeHelper() {
	ZoneServerHelper::finalize();
}

DistributedObject* ZoneServerHelper::instantiateObject() {
	return new ZoneServer(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ZoneServerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ZoneServerAdapter((ZoneServerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

