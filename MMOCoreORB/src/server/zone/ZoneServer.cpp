/*
 *	server/zone/ZoneServer.cpp generated by engine3 IDL compiler 0.60
 */

#include "ZoneServer.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/login/account/Account.h"

#include "server/zone/ZoneProcessServer.h"

#include "server/zone/ZoneClientSession.h"

#include "server/zone/ZoneHandler.h"

#include "server/zone/Zone.h"

#include "server/chat/ChatManager.h"

#include "server/conf/ConfigManager.h"

#include "server/zone/managers/object/ObjectManager.h"

#include "server/zone/managers/player/PlayerManager.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

#include "server/zone/managers/radial/RadialManager.h"

#include "server/zone/managers/skill/SkillManager.h"

#include "server/zone/managers/resource/ResourceManager.h"

#include "server/zone/managers/crafting/CraftingManager.h"

#include "server/zone/managers/loot/LootManager.h"

#include "server/zone/managers/auction/AuctionManager.h"

#include "server/zone/managers/minigames/FishingManager.h"

#include "server/zone/managers/mission/MissionManager.h"

#include "server/zone/managers/minigames/GamblingManager.h"

#include "server/zone/managers/minigames/ForageManager.h"

#include "server/zone/managers/stringid/StringIdManager.h"

#include "server/zone/managers/creature/CreatureTemplateManager.h"

#include "server/zone/managers/guild/GuildManager.h"

/*
 *	ZoneServerStub
 */

enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 6,RPC_INITIALIZE__,RPC_SHUTDOWN__,RPC_STARTMANAGERS__,RPC_STARTZONES__,RPC_STOPMANAGERS__,RPC_START__INT_INT_,RPC_STOP__,RPC_ADDTOTALSENTPACKET__INT_,RPC_ADDTOTALRESENTPACKET__INT_,RPC_PRINTINFO__BOOL_,RPC_PRINTEVENTS__,RPC_GETOBJECT__LONG_BOOL_,RPC_CREATEOBJECT__INT_INT_LONG_,RPC_CREATECLIENTOBJECT__INT_LONG_,RPC_UPDATEOBJECTTODATABASE__SCENEOBJECT_,RPC_UPDATEOBJECTTOSTATICDATABASE__SCENEOBJECT_,RPC_DESTROYOBJECTFROMDATABASE__LONG_,RPC_LOCK__BOOL_,RPC_UNLOCK__BOOL_,RPC_FIXSCHEDULER__,RPC_CHANGEUSERCAP__INT_,RPC_GETCONNECTIONCOUNT__,RPC_INCREASEONLINEPLAYERS__,RPC_DECREASEONLINEPLAYERS__,RPC_INCREASETOTALDELETEDPLAYERS__,RPC_GETGALAXYID__,RPC_GETGALAXYNAME__,RPC_SETGALAXYNAME__STRING_,RPC_ISSERVERLOCKED__,RPC_ISSERVERONLINE__,RPC_ISSERVEROFFLINE__,RPC_ISSERVERLOADING__,RPC_GETSERVERSTATE__,RPC_GETZONE__STRING_,RPC_GETZONE__INT_,RPC_GETZONECOUNT__,RPC_GETMAXPLAYERS__,RPC_GETTOTALPLAYERS__,RPC_GETDELETEDPLAYERS__,RPC_GETPLAYERMANAGER__,RPC_GETCHATMANAGER__,RPC_GETOBJECTCONTROLLER__,RPC_GETMISSIONMANAGER__,RPC_GETRADIALMANAGER__,RPC_GETGUILDMANAGER__,RPC_GETRESOURCEMANAGER__,RPC_GETCRAFTINGMANAGER__,RPC_GETLOOTMANAGER__,RPC_GETAUCTIONMANAGER__,RPC_GETFISHINGMANAGER__,RPC_GETGAMBLINGMANAGER__,RPC_GETFORAGEMANAGER__,RPC_GETACCOUNT__INT_,RPC_SETGALAXYID__INT_,RPC_SETSERVERSTATE__INT_,RPC_SETSERVERSTATELOCKED__,RPC_SETSERVERSTATEONLINE__,RPC_LOADLOGINMESSAGE__,RPC_CHANGELOGINMESSAGE__STRING_,RPC_GETLOGINMESSAGE__};

ZoneServer::ZoneServer(ConfigManager* config) : ManagedService(DummyConstructorParameter::instance()) {
	ZoneServerImplementation* _implementation = new ZoneServerImplementation(config);
	_impl = _implementation;
	_impl->_setStub(this);
}

ZoneServer::ZoneServer(DummyConstructorParameter* param) : ManagedService(param) {
}

ZoneServer::~ZoneServer() {
}



void ZoneServer::initializeTransientMembers() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

ZoneClientSession* ZoneServer::createConnection(Socket* sock, SocketAddress& addr) {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->createConnection(sock, addr);
}

void ZoneServer::initialize() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZE__);

		method.executeWithVoidReturn();
	} else
		_implementation->initialize();
}

void ZoneServer::shutdown() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SHUTDOWN__);

		method.executeWithVoidReturn();
	} else
		_implementation->shutdown();
}

void ZoneServer::startManagers() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_STARTMANAGERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->startManagers();
}

void ZoneServer::startZones() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_STARTZONES__);

		method.executeWithVoidReturn();
	} else
		_implementation->startZones();
}

void ZoneServer::stopManagers() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_STOPMANAGERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->stopManagers();
}

void ZoneServer::start(int p, int mconn) {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_START__INT_INT_);
		method.addSignedIntParameter(p);
		method.addSignedIntParameter(mconn);

		method.executeWithVoidReturn();
	} else
		_implementation->start(p, mconn);
}

void ZoneServer::stop() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_STOP__);

		method.executeWithVoidReturn();
	} else
		_implementation->stop();
}

void ZoneServer::handleMessage(ZoneClientSession* client, Packet* message) {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->handleMessage(client, message);
}

void ZoneServer::processMessage(Message* message) {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->processMessage(message);
}

bool ZoneServer::handleError(ZoneClientSession* client, Exception& e) {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->handleError(client, e);
}

void ZoneServer::addTotalSentPacket(int count) {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDTOTALSENTPACKET__INT_);
		method.addSignedIntParameter(count);

		method.executeWithVoidReturn();
	} else
		_implementation->addTotalSentPacket(count);
}

void ZoneServer::addTotalResentPacket(int count) {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDTOTALRESENTPACKET__INT_);
		method.addSignedIntParameter(count);

		method.executeWithVoidReturn();
	} else
		_implementation->addTotalResentPacket(count);
}

void ZoneServer::printInfo(bool forcedLog) {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_PRINTINFO__BOOL_);
		method.addBooleanParameter(forcedLog);

		method.executeWithVoidReturn();
	} else
		_implementation->printInfo(forcedLog);
}

void ZoneServer::printEvents() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_PRINTEVENTS__);

		method.executeWithVoidReturn();
	} else
		_implementation->printEvents();
}

SceneObject* ZoneServer::getObject(unsigned long long objectID, bool doLock) {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETOBJECT__LONG_BOOL_);
		method.addUnsignedLongParameter(objectID);
		method.addBooleanParameter(doLock);

		return static_cast<SceneObject*>(method.executeWithObjectReturn());
	} else
		return _implementation->getObject(objectID, doLock);
}

SceneObject* ZoneServer::createObject(unsigned int templateCRC, int persistenceLevel, unsigned long long objectID) {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATEOBJECT__INT_INT_LONG_);
		method.addUnsignedIntParameter(templateCRC);
		method.addSignedIntParameter(persistenceLevel);
		method.addUnsignedLongParameter(objectID);

		return static_cast<SceneObject*>(method.executeWithObjectReturn());
	} else
		return _implementation->createObject(templateCRC, persistenceLevel, objectID);
}

SceneObject* ZoneServer::createClientObject(unsigned int templateCRC, unsigned long long objectID) {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATECLIENTOBJECT__INT_LONG_);
		method.addUnsignedIntParameter(templateCRC);
		method.addUnsignedLongParameter(objectID);

		return static_cast<SceneObject*>(method.executeWithObjectReturn());
	} else
		return _implementation->createClientObject(templateCRC, objectID);
}

void ZoneServer::updateObjectToDatabase(SceneObject* object) {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATEOBJECTTODATABASE__SCENEOBJECT_);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		_implementation->updateObjectToDatabase(object);
}

void ZoneServer::updateObjectToStaticDatabase(SceneObject* object) {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATEOBJECTTOSTATICDATABASE__SCENEOBJECT_);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		_implementation->updateObjectToStaticDatabase(object);
}

void ZoneServer::destroyObjectFromDatabase(unsigned long long objectID) {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DESTROYOBJECTFROMDATABASE__LONG_);
		method.addUnsignedLongParameter(objectID);

		method.executeWithVoidReturn();
	} else
		_implementation->destroyObjectFromDatabase(objectID);
}

void ZoneServer::lock(bool doLock) {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_LOCK__BOOL_);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		_implementation->lock(doLock);
}

void ZoneServer::unlock(bool doLock) {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UNLOCK__BOOL_);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		_implementation->unlock(doLock);
}

void ZoneServer::fixScheduler() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_FIXSCHEDULER__);

		method.executeWithVoidReturn();
	} else
		_implementation->fixScheduler();
}

void ZoneServer::changeUserCap(int amount) {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CHANGEUSERCAP__INT_);
		method.addSignedIntParameter(amount);

		method.executeWithVoidReturn();
	} else
		_implementation->changeUserCap(amount);
}

int ZoneServer::getConnectionCount() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCONNECTIONCOUNT__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getConnectionCount();
}

void ZoneServer::increaseOnlinePlayers() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INCREASEONLINEPLAYERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->increaseOnlinePlayers();
}

void ZoneServer::decreaseOnlinePlayers() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DECREASEONLINEPLAYERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->decreaseOnlinePlayers();
}

void ZoneServer::increaseTotalDeletedPlayers() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INCREASETOTALDELETEDPLAYERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->increaseTotalDeletedPlayers();
}

int ZoneServer::getGalaxyID() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGALAXYID__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getGalaxyID();
}

String ZoneServer::getGalaxyName() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGALAXYNAME__);

		method.executeWithAsciiReturn(_return_getGalaxyName);
		return _return_getGalaxyName;
	} else
		return _implementation->getGalaxyName();
}

void ZoneServer::setGalaxyName(const String& name) {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETGALAXYNAME__STRING_);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		_implementation->setGalaxyName(name);
}

bool ZoneServer::isServerLocked() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSERVERLOCKED__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isServerLocked();
}

bool ZoneServer::isServerOnline() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSERVERONLINE__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isServerOnline();
}

bool ZoneServer::isServerOffline() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSERVEROFFLINE__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isServerOffline();
}

bool ZoneServer::isServerLoading() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSERVERLOADING__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isServerLoading();
}

int ZoneServer::getServerState() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSERVERSTATE__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getServerState();
}

Zone* ZoneServer::getZone(const String& terrainName) {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETZONE__STRING_);
		method.addAsciiParameter(terrainName);

		return static_cast<Zone*>(method.executeWithObjectReturn());
	} else
		return _implementation->getZone(terrainName);
}

Zone* ZoneServer::getZone(int idx) {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETZONE__INT_);
		method.addSignedIntParameter(idx);

		return static_cast<Zone*>(method.executeWithObjectReturn());
	} else
		return _implementation->getZone(idx);
}

int ZoneServer::getZoneCount() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETZONECOUNT__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getZoneCount();
}

int ZoneServer::getMaxPlayers() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMAXPLAYERS__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getMaxPlayers();
}

int ZoneServer::getTotalPlayers() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTOTALPLAYERS__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getTotalPlayers();
}

int ZoneServer::getDeletedPlayers() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDELETEDPLAYERS__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getDeletedPlayers();
}

ObjectManager* ZoneServer::getObjectManager() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getObjectManager();
}

PlayerManager* ZoneServer::getPlayerManager() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPLAYERMANAGER__);

		return static_cast<PlayerManager*>(method.executeWithObjectReturn());
	} else
		return _implementation->getPlayerManager();
}

ChatManager* ZoneServer::getChatManager() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCHATMANAGER__);

		return static_cast<ChatManager*>(method.executeWithObjectReturn());
	} else
		return _implementation->getChatManager();
}

ObjectController* ZoneServer::getObjectController() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETOBJECTCONTROLLER__);

		return static_cast<ObjectController*>(method.executeWithObjectReturn());
	} else
		return _implementation->getObjectController();
}

MissionManager* ZoneServer::getMissionManager() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMISSIONMANAGER__);

		return static_cast<MissionManager*>(method.executeWithObjectReturn());
	} else
		return _implementation->getMissionManager();
}

RadialManager* ZoneServer::getRadialManager() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETRADIALMANAGER__);

		return static_cast<RadialManager*>(method.executeWithObjectReturn());
	} else
		return _implementation->getRadialManager();
}

GuildManager* ZoneServer::getGuildManager() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGUILDMANAGER__);

		return static_cast<GuildManager*>(method.executeWithObjectReturn());
	} else
		return _implementation->getGuildManager();
}

ResourceManager* ZoneServer::getResourceManager() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETRESOURCEMANAGER__);

		return static_cast<ResourceManager*>(method.executeWithObjectReturn());
	} else
		return _implementation->getResourceManager();
}

CraftingManager* ZoneServer::getCraftingManager() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCRAFTINGMANAGER__);

		return static_cast<CraftingManager*>(method.executeWithObjectReturn());
	} else
		return _implementation->getCraftingManager();
}

LootManager* ZoneServer::getLootManager() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETLOOTMANAGER__);

		return static_cast<LootManager*>(method.executeWithObjectReturn());
	} else
		return _implementation->getLootManager();
}

AuctionManager* ZoneServer::getAuctionManager() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETAUCTIONMANAGER__);

		return static_cast<AuctionManager*>(method.executeWithObjectReturn());
	} else
		return _implementation->getAuctionManager();
}

FishingManager* ZoneServer::getFishingManager() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFISHINGMANAGER__);

		return static_cast<FishingManager*>(method.executeWithObjectReturn());
	} else
		return _implementation->getFishingManager();
}

GamblingManager* ZoneServer::getGamblingManager() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGAMBLINGMANAGER__);

		return static_cast<GamblingManager*>(method.executeWithObjectReturn());
	} else
		return _implementation->getGamblingManager();
}

ForageManager* ZoneServer::getForageManager() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFORAGEMANAGER__);

		return static_cast<ForageManager*>(method.executeWithObjectReturn());
	} else
		return _implementation->getForageManager();
}

Account* ZoneServer::getAccount(unsigned int accountID) {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETACCOUNT__INT_);
		method.addUnsignedIntParameter(accountID);

		return static_cast<Account*>(method.executeWithObjectReturn());
	} else
		return _implementation->getAccount(accountID);
}

SkillManager* ZoneServer::getSkillManager() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getSkillManager();
}

Time* ZoneServer::getStartTimestamp() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getStartTimestamp();
}

void ZoneServer::setGalaxyID(int galaxyid) {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETGALAXYID__INT_);
		method.addSignedIntParameter(galaxyid);

		method.executeWithVoidReturn();
	} else
		_implementation->setGalaxyID(galaxyid);
}

void ZoneServer::setServerState(int state) {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSERVERSTATE__INT_);
		method.addSignedIntParameter(state);

		method.executeWithVoidReturn();
	} else
		_implementation->setServerState(state);
}

void ZoneServer::setServerStateLocked() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSERVERSTATELOCKED__);

		method.executeWithVoidReturn();
	} else
		_implementation->setServerStateLocked();
}

void ZoneServer::setServerStateOnline() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSERVERSTATEONLINE__);

		method.executeWithVoidReturn();
	} else
		_implementation->setServerStateOnline();
}

void ZoneServer::loadLoginMessage() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_LOADLOGINMESSAGE__);

		method.executeWithVoidReturn();
	} else
		_implementation->loadLoginMessage();
}

void ZoneServer::changeLoginMessage(const String& motd) {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CHANGELOGINMESSAGE__STRING_);
		method.addAsciiParameter(motd);

		method.executeWithVoidReturn();
	} else
		_implementation->changeLoginMessage(motd);
}

String ZoneServer::getLoginMessage() {
	ZoneServerImplementation* _implementation = static_cast<ZoneServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETLOGINMESSAGE__);

		method.executeWithAsciiReturn(_return_getLoginMessage);
		return _return_getLoginMessage;
	} else
		return _implementation->getLoginMessage();
}

DistributedObjectServant* ZoneServer::_getImplementation() {

	_updated = true;
	return _impl;
}

void ZoneServer::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	ZoneServerImplementation
 */

ZoneServerImplementation::ZoneServerImplementation(DummyConstructorParameter* param) : ManagedServiceImplementation(param) {
	_initializeImplementation();
}


ZoneServerImplementation::~ZoneServerImplementation() {
}


void ZoneServerImplementation::finalize() {
}

void ZoneServerImplementation::_initializeImplementation() {
	_setClassHelper(ZoneServerHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void ZoneServerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<ZoneServer*>(stub);
	ManagedServiceImplementation::_setStub(stub);
}

DistributedObjectStub* ZoneServerImplementation::_getStub() {
	return _this;
}

ZoneServerImplementation::operator const ZoneServer*() {
	return _this;
}

void ZoneServerImplementation::_serializationHelperMethod() {
	ManagedServiceImplementation::_serializationHelperMethod();

	_setClassName("ZoneServer");

}

void ZoneServerImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(ZoneServerImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ZoneServerImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ManagedServiceImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "zones") {
		TypeInfo<Reference<VectorMap<String, ManagedReference<Zone* > >* > >::parseFromBinaryStream(&zones, stream);
		return true;
	}

	if (_name == "playerManager") {
		TypeInfo<ManagedReference<PlayerManager* > >::parseFromBinaryStream(&playerManager, stream);
		return true;
	}

	if (_name == "chatManager") {
		TypeInfo<ManagedReference<ChatManager* > >::parseFromBinaryStream(&chatManager, stream);
		return true;
	}

	if (_name == "radialManager") {
		TypeInfo<ManagedReference<RadialManager* > >::parseFromBinaryStream(&radialManager, stream);
		return true;
	}

	if (_name == "resourceManager") {
		TypeInfo<ManagedReference<ResourceManager* > >::parseFromBinaryStream(&resourceManager, stream);
		return true;
	}

	if (_name == "craftingManager") {
		TypeInfo<ManagedReference<CraftingManager* > >::parseFromBinaryStream(&craftingManager, stream);
		return true;
	}

	if (_name == "lootManager") {
		TypeInfo<ManagedReference<LootManager* > >::parseFromBinaryStream(&lootManager, stream);
		return true;
	}

	if (_name == "auctionManager") {
		TypeInfo<ManagedReference<AuctionManager* > >::parseFromBinaryStream(&auctionManager, stream);
		return true;
	}

	if (_name == "missionManager") {
		TypeInfo<ManagedReference<MissionManager* > >::parseFromBinaryStream(&missionManager, stream);
		return true;
	}

	if (_name == "guildManager") {
		TypeInfo<ManagedReference<GuildManager* > >::parseFromBinaryStream(&guildManager, stream);
		return true;
	}

	if (_name == "fishingManager") {
		TypeInfo<ManagedReference<FishingManager* > >::parseFromBinaryStream(&fishingManager, stream);
		return true;
	}

	if (_name == "gamblingManager") {
		TypeInfo<ManagedReference<GamblingManager* > >::parseFromBinaryStream(&gamblingManager, stream);
		return true;
	}

	if (_name == "forageManager") {
		TypeInfo<ManagedReference<ForageManager* > >::parseFromBinaryStream(&forageManager, stream);
		return true;
	}

	if (_name == "totalSentPackets") {
		TypeInfo<int >::parseFromBinaryStream(&totalSentPackets, stream);
		return true;
	}

	if (_name == "totalResentPackets") {
		TypeInfo<int >::parseFromBinaryStream(&totalResentPackets, stream);
		return true;
	}

	if (_name == "currentPlayers") {
		TypeInfo<AtomicInteger >::parseFromBinaryStream(&currentPlayers, stream);
		return true;
	}

	if (_name == "maximumPlayers") {
		TypeInfo<AtomicInteger >::parseFromBinaryStream(&maximumPlayers, stream);
		return true;
	}

	if (_name == "totalPlayers") {
		TypeInfo<AtomicInteger >::parseFromBinaryStream(&totalPlayers, stream);
		return true;
	}

	if (_name == "totalDeletedPlayers") {
		TypeInfo<AtomicInteger >::parseFromBinaryStream(&totalDeletedPlayers, stream);
		return true;
	}

	if (_name == "serverState") {
		TypeInfo<int >::parseFromBinaryStream(&serverState, stream);
		return true;
	}

	if (_name == "galaxyName") {
		TypeInfo<String >::parseFromBinaryStream(&galaxyName, stream);
		return true;
	}

	if (_name == "loginMessage") {
		TypeInfo<String >::parseFromBinaryStream(&loginMessage, stream);
		return true;
	}

	if (_name == "galaxyID") {
		TypeInfo<int >::parseFromBinaryStream(&galaxyID, stream);
		return true;
	}

	if (_name == "startTimestamp") {
		TypeInfo<Time >::parseFromBinaryStream(&startTimestamp, stream);
		return true;
	}


	return false;
}

void ZoneServerImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ZoneServerImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ZoneServerImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "zones";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<Reference<VectorMap<String, ManagedReference<Zone* > >* > >::toBinaryStream(&zones, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "playerManager";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<PlayerManager* > >::toBinaryStream(&playerManager, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "chatManager";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<ChatManager* > >::toBinaryStream(&chatManager, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "radialManager";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<RadialManager* > >::toBinaryStream(&radialManager, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "resourceManager";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<ResourceManager* > >::toBinaryStream(&resourceManager, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "craftingManager";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<CraftingManager* > >::toBinaryStream(&craftingManager, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "lootManager";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<LootManager* > >::toBinaryStream(&lootManager, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "auctionManager";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<AuctionManager* > >::toBinaryStream(&auctionManager, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "missionManager";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<MissionManager* > >::toBinaryStream(&missionManager, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "guildManager";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<GuildManager* > >::toBinaryStream(&guildManager, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "fishingManager";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<FishingManager* > >::toBinaryStream(&fishingManager, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "gamblingManager";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<GamblingManager* > >::toBinaryStream(&gamblingManager, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "forageManager";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<ForageManager* > >::toBinaryStream(&forageManager, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "totalSentPackets";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&totalSentPackets, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "totalResentPackets";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&totalResentPackets, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "currentPlayers";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<AtomicInteger >::toBinaryStream(&currentPlayers, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "maximumPlayers";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<AtomicInteger >::toBinaryStream(&maximumPlayers, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "totalPlayers";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<AtomicInteger >::toBinaryStream(&totalPlayers, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "totalDeletedPlayers";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<AtomicInteger >::toBinaryStream(&totalDeletedPlayers, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "serverState";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&serverState, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "galaxyName";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<String >::toBinaryStream(&galaxyName, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "loginMessage";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<String >::toBinaryStream(&loginMessage, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "galaxyID";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&galaxyID, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "startTimestamp";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<Time >::toBinaryStream(&startTimestamp, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 24 + ManagedServiceImplementation::writeObjectMembers(stream);
}

void ZoneServerImplementation::fixScheduler() {
}

int ZoneServerImplementation::getGalaxyID() {
	// server/zone/ZoneServer.idl():  		return galaxyID;
	return galaxyID;
}

String ZoneServerImplementation::getGalaxyName() {
	// server/zone/ZoneServer.idl():  		return galaxyName;
	return galaxyName;
}

void ZoneServerImplementation::setGalaxyName(const String& name) {
	// server/zone/ZoneServer.idl():  		galaxyName = name;
	galaxyName = name;
}

bool ZoneServerImplementation::isServerLocked() {
	// server/zone/ZoneServer.idl():  		return serverState == LOCKED;
	return serverState == LOCKED;
}

bool ZoneServerImplementation::isServerOnline() {
	// server/zone/ZoneServer.idl():  		return serverState == ONLINE;
	return serverState == ONLINE;
}

bool ZoneServerImplementation::isServerOffline() {
	// server/zone/ZoneServer.idl():  		return serverState == OFFLINE;
	return serverState == OFFLINE;
}

bool ZoneServerImplementation::isServerLoading() {
	// server/zone/ZoneServer.idl():  		return serverState == LOADING;
	return serverState == LOADING;
}

int ZoneServerImplementation::getServerState() {
	// server/zone/ZoneServer.idl():  		return serverState;
	return serverState;
}

Zone* ZoneServerImplementation::getZone(const String& terrainName) {
	// server/zone/ZoneServer.idl():  		return zones.get(terrainName);
	return zones->get(terrainName);
}

Zone* ZoneServerImplementation::getZone(int idx) {
	// server/zone/ZoneServer.idl():  		return zones.get(idx);
	return zones->get(idx);
}

int ZoneServerImplementation::getZoneCount() {
	// server/zone/ZoneServer.idl():  		return zones.size();
	return zones->size();
}

int ZoneServerImplementation::getMaxPlayers() {
	// server/zone/ZoneServer.idl():  		return maximumPlayers.get();
	return (&maximumPlayers)->get();
}

int ZoneServerImplementation::getTotalPlayers() {
	// server/zone/ZoneServer.idl():  		return totalPlayers.get();
	return (&totalPlayers)->get();
}

int ZoneServerImplementation::getDeletedPlayers() {
	// server/zone/ZoneServer.idl():  		return totalDeletedPlayers.get();
	return (&totalDeletedPlayers)->get();
}

ObjectManager* ZoneServerImplementation::getObjectManager() {
	// server/zone/ZoneServer.idl():  		return objectManager;
	return objectManager;
}

PlayerManager* ZoneServerImplementation::getPlayerManager() {
	// server/zone/ZoneServer.idl():  		return playerManager;
	return playerManager;
}

ChatManager* ZoneServerImplementation::getChatManager() {
	// server/zone/ZoneServer.idl():  		return chatManager;
	return chatManager;
}

ObjectController* ZoneServerImplementation::getObjectController() {
	// server/zone/ZoneServer.idl():  		return processor.getObjectController();
	return processor->getObjectController();
}

MissionManager* ZoneServerImplementation::getMissionManager() {
	// server/zone/ZoneServer.idl():  		return missionManager;
	return missionManager;
}

RadialManager* ZoneServerImplementation::getRadialManager() {
	// server/zone/ZoneServer.idl():  		return radialManager;
	return radialManager;
}

GuildManager* ZoneServerImplementation::getGuildManager() {
	// server/zone/ZoneServer.idl():  		return guildManager;
	return guildManager;
}

ResourceManager* ZoneServerImplementation::getResourceManager() {
	// server/zone/ZoneServer.idl():  		return resourceManager;
	return resourceManager;
}

CraftingManager* ZoneServerImplementation::getCraftingManager() {
	// server/zone/ZoneServer.idl():  		return craftingManager;
	return craftingManager;
}

LootManager* ZoneServerImplementation::getLootManager() {
	// server/zone/ZoneServer.idl():  		return lootManager;
	return lootManager;
}

AuctionManager* ZoneServerImplementation::getAuctionManager() {
	// server/zone/ZoneServer.idl():  		return auctionManager;
	return auctionManager;
}

FishingManager* ZoneServerImplementation::getFishingManager() {
	// server/zone/ZoneServer.idl():  		return fishingManager;
	return fishingManager;
}

GamblingManager* ZoneServerImplementation::getGamblingManager() {
	// server/zone/ZoneServer.idl():  		return gamblingManager;
	return gamblingManager;
}

ForageManager* ZoneServerImplementation::getForageManager() {
	// server/zone/ZoneServer.idl():  		return forageManager;
	return forageManager;
}

SkillManager* ZoneServerImplementation::getSkillManager() {
	// server/zone/ZoneServer.idl():  		return processor.getSkillManager();
	return processor->getSkillManager();
}

Time* ZoneServerImplementation::getStartTimestamp() {
	// server/zone/ZoneServer.idl():  		return startTimestamp;
	return (&startTimestamp);
}

void ZoneServerImplementation::setGalaxyID(int galaxyid) {
	// server/zone/ZoneServer.idl():  		galaxyID = galaxyid;
	galaxyID = galaxyid;
}

void ZoneServerImplementation::setServerState(int state) {
	// server/zone/ZoneServer.idl():  		serverState = state;
	serverState = state;
}

/*
 *	ZoneServerAdapter
 */

ZoneServerAdapter::ZoneServerAdapter(ZoneServer* obj) : ManagedServiceAdapter(obj) {
}

Packet* ZoneServerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		initializeTransientMembers();
		break;
	case RPC_INITIALIZE__:
		initialize();
		break;
	case RPC_SHUTDOWN__:
		shutdown();
		break;
	case RPC_STARTMANAGERS__:
		startManagers();
		break;
	case RPC_STARTZONES__:
		startZones();
		break;
	case RPC_STOPMANAGERS__:
		stopManagers();
		break;
	case RPC_START__INT_INT_:
		start(inv->getSignedIntParameter(), inv->getSignedIntParameter());
		break;
	case RPC_STOP__:
		stop();
		break;
	case RPC_ADDTOTALSENTPACKET__INT_:
		addTotalSentPacket(inv->getSignedIntParameter());
		break;
	case RPC_ADDTOTALRESENTPACKET__INT_:
		addTotalResentPacket(inv->getSignedIntParameter());
		break;
	case RPC_PRINTINFO__BOOL_:
		printInfo(inv->getBooleanParameter());
		break;
	case RPC_PRINTEVENTS__:
		printEvents();
		break;
	case RPC_GETOBJECT__LONG_BOOL_:
		resp->insertLong(getObject(inv->getUnsignedLongParameter(), inv->getBooleanParameter())->_getObjectID());
		break;
	case RPC_CREATEOBJECT__INT_INT_LONG_:
		resp->insertLong(createObject(inv->getUnsignedIntParameter(), inv->getSignedIntParameter(), inv->getUnsignedLongParameter())->_getObjectID());
		break;
	case RPC_CREATECLIENTOBJECT__INT_LONG_:
		resp->insertLong(createClientObject(inv->getUnsignedIntParameter(), inv->getUnsignedLongParameter())->_getObjectID());
		break;
	case RPC_UPDATEOBJECTTODATABASE__SCENEOBJECT_:
		updateObjectToDatabase(static_cast<SceneObject*>(inv->getObjectParameter()));
		break;
	case RPC_UPDATEOBJECTTOSTATICDATABASE__SCENEOBJECT_:
		updateObjectToStaticDatabase(static_cast<SceneObject*>(inv->getObjectParameter()));
		break;
	case RPC_DESTROYOBJECTFROMDATABASE__LONG_:
		destroyObjectFromDatabase(inv->getUnsignedLongParameter());
		break;
	case RPC_LOCK__BOOL_:
		lock(inv->getBooleanParameter());
		break;
	case RPC_UNLOCK__BOOL_:
		unlock(inv->getBooleanParameter());
		break;
	case RPC_FIXSCHEDULER__:
		fixScheduler();
		break;
	case RPC_CHANGEUSERCAP__INT_:
		changeUserCap(inv->getSignedIntParameter());
		break;
	case RPC_GETCONNECTIONCOUNT__:
		resp->insertSignedInt(getConnectionCount());
		break;
	case RPC_INCREASEONLINEPLAYERS__:
		increaseOnlinePlayers();
		break;
	case RPC_DECREASEONLINEPLAYERS__:
		decreaseOnlinePlayers();
		break;
	case RPC_INCREASETOTALDELETEDPLAYERS__:
		increaseTotalDeletedPlayers();
		break;
	case RPC_GETGALAXYID__:
		resp->insertSignedInt(getGalaxyID());
		break;
	case RPC_GETGALAXYNAME__:
		resp->insertAscii(getGalaxyName());
		break;
	case RPC_SETGALAXYNAME__STRING_:
		setGalaxyName(inv->getAsciiParameter(_param0_setGalaxyName__String_));
		break;
	case RPC_ISSERVERLOCKED__:
		resp->insertBoolean(isServerLocked());
		break;
	case RPC_ISSERVERONLINE__:
		resp->insertBoolean(isServerOnline());
		break;
	case RPC_ISSERVEROFFLINE__:
		resp->insertBoolean(isServerOffline());
		break;
	case RPC_ISSERVERLOADING__:
		resp->insertBoolean(isServerLoading());
		break;
	case RPC_GETSERVERSTATE__:
		resp->insertSignedInt(getServerState());
		break;
	case RPC_GETZONE__STRING_:
		resp->insertLong(getZone(inv->getAsciiParameter(_param0_getZone__String_))->_getObjectID());
		break;
	case RPC_GETZONE__INT_:
		resp->insertLong(getZone(inv->getSignedIntParameter())->_getObjectID());
		break;
	case RPC_GETZONECOUNT__:
		resp->insertSignedInt(getZoneCount());
		break;
	case RPC_GETMAXPLAYERS__:
		resp->insertSignedInt(getMaxPlayers());
		break;
	case RPC_GETTOTALPLAYERS__:
		resp->insertSignedInt(getTotalPlayers());
		break;
	case RPC_GETDELETEDPLAYERS__:
		resp->insertSignedInt(getDeletedPlayers());
		break;
	case RPC_GETPLAYERMANAGER__:
		resp->insertLong(getPlayerManager()->_getObjectID());
		break;
	case RPC_GETCHATMANAGER__:
		resp->insertLong(getChatManager()->_getObjectID());
		break;
	case RPC_GETOBJECTCONTROLLER__:
		resp->insertLong(getObjectController()->_getObjectID());
		break;
	case RPC_GETMISSIONMANAGER__:
		resp->insertLong(getMissionManager()->_getObjectID());
		break;
	case RPC_GETRADIALMANAGER__:
		resp->insertLong(getRadialManager()->_getObjectID());
		break;
	case RPC_GETGUILDMANAGER__:
		resp->insertLong(getGuildManager()->_getObjectID());
		break;
	case RPC_GETRESOURCEMANAGER__:
		resp->insertLong(getResourceManager()->_getObjectID());
		break;
	case RPC_GETCRAFTINGMANAGER__:
		resp->insertLong(getCraftingManager()->_getObjectID());
		break;
	case RPC_GETLOOTMANAGER__:
		resp->insertLong(getLootManager()->_getObjectID());
		break;
	case RPC_GETAUCTIONMANAGER__:
		resp->insertLong(getAuctionManager()->_getObjectID());
		break;
	case RPC_GETFISHINGMANAGER__:
		resp->insertLong(getFishingManager()->_getObjectID());
		break;
	case RPC_GETGAMBLINGMANAGER__:
		resp->insertLong(getGamblingManager()->_getObjectID());
		break;
	case RPC_GETFORAGEMANAGER__:
		resp->insertLong(getForageManager()->_getObjectID());
		break;
	case RPC_GETACCOUNT__INT_:
		resp->insertLong(getAccount(inv->getUnsignedIntParameter())->_getObjectID());
		break;
	case RPC_SETGALAXYID__INT_:
		setGalaxyID(inv->getSignedIntParameter());
		break;
	case RPC_SETSERVERSTATE__INT_:
		setServerState(inv->getSignedIntParameter());
		break;
	case RPC_SETSERVERSTATELOCKED__:
		setServerStateLocked();
		break;
	case RPC_SETSERVERSTATEONLINE__:
		setServerStateOnline();
		break;
	case RPC_LOADLOGINMESSAGE__:
		loadLoginMessage();
		break;
	case RPC_CHANGELOGINMESSAGE__STRING_:
		changeLoginMessage(inv->getAsciiParameter(_param0_changeLoginMessage__String_));
		break;
	case RPC_GETLOGINMESSAGE__:
		resp->insertAscii(getLoginMessage());
		break;
	default:
		return NULL;
	}

	return resp;
}

void ZoneServerAdapter::initializeTransientMembers() {
	(static_cast<ZoneServer*>(stub))->initializeTransientMembers();
}

void ZoneServerAdapter::initialize() {
	(static_cast<ZoneServer*>(stub))->initialize();
}

void ZoneServerAdapter::shutdown() {
	(static_cast<ZoneServer*>(stub))->shutdown();
}

void ZoneServerAdapter::startManagers() {
	(static_cast<ZoneServer*>(stub))->startManagers();
}

void ZoneServerAdapter::startZones() {
	(static_cast<ZoneServer*>(stub))->startZones();
}

void ZoneServerAdapter::stopManagers() {
	(static_cast<ZoneServer*>(stub))->stopManagers();
}

void ZoneServerAdapter::start(int p, int mconn) {
	(static_cast<ZoneServer*>(stub))->start(p, mconn);
}

void ZoneServerAdapter::stop() {
	(static_cast<ZoneServer*>(stub))->stop();
}

void ZoneServerAdapter::addTotalSentPacket(int count) {
	(static_cast<ZoneServer*>(stub))->addTotalSentPacket(count);
}

void ZoneServerAdapter::addTotalResentPacket(int count) {
	(static_cast<ZoneServer*>(stub))->addTotalResentPacket(count);
}

void ZoneServerAdapter::printInfo(bool forcedLog) {
	(static_cast<ZoneServer*>(stub))->printInfo(forcedLog);
}

void ZoneServerAdapter::printEvents() {
	(static_cast<ZoneServer*>(stub))->printEvents();
}

SceneObject* ZoneServerAdapter::getObject(unsigned long long objectID, bool doLock) {
	return (static_cast<ZoneServer*>(stub))->getObject(objectID, doLock);
}

SceneObject* ZoneServerAdapter::createObject(unsigned int templateCRC, int persistenceLevel, unsigned long long objectID) {
	return (static_cast<ZoneServer*>(stub))->createObject(templateCRC, persistenceLevel, objectID);
}

SceneObject* ZoneServerAdapter::createClientObject(unsigned int templateCRC, unsigned long long objectID) {
	return (static_cast<ZoneServer*>(stub))->createClientObject(templateCRC, objectID);
}

void ZoneServerAdapter::updateObjectToDatabase(SceneObject* object) {
	(static_cast<ZoneServer*>(stub))->updateObjectToDatabase(object);
}

void ZoneServerAdapter::updateObjectToStaticDatabase(SceneObject* object) {
	(static_cast<ZoneServer*>(stub))->updateObjectToStaticDatabase(object);
}

void ZoneServerAdapter::destroyObjectFromDatabase(unsigned long long objectID) {
	(static_cast<ZoneServer*>(stub))->destroyObjectFromDatabase(objectID);
}

void ZoneServerAdapter::lock(bool doLock) {
	(static_cast<ZoneServer*>(stub))->lock(doLock);
}

void ZoneServerAdapter::unlock(bool doLock) {
	(static_cast<ZoneServer*>(stub))->unlock(doLock);
}

void ZoneServerAdapter::fixScheduler() {
	(static_cast<ZoneServer*>(stub))->fixScheduler();
}

void ZoneServerAdapter::changeUserCap(int amount) {
	(static_cast<ZoneServer*>(stub))->changeUserCap(amount);
}

int ZoneServerAdapter::getConnectionCount() {
	return (static_cast<ZoneServer*>(stub))->getConnectionCount();
}

void ZoneServerAdapter::increaseOnlinePlayers() {
	(static_cast<ZoneServer*>(stub))->increaseOnlinePlayers();
}

void ZoneServerAdapter::decreaseOnlinePlayers() {
	(static_cast<ZoneServer*>(stub))->decreaseOnlinePlayers();
}

void ZoneServerAdapter::increaseTotalDeletedPlayers() {
	(static_cast<ZoneServer*>(stub))->increaseTotalDeletedPlayers();
}

int ZoneServerAdapter::getGalaxyID() {
	return (static_cast<ZoneServer*>(stub))->getGalaxyID();
}

String ZoneServerAdapter::getGalaxyName() {
	return (static_cast<ZoneServer*>(stub))->getGalaxyName();
}

void ZoneServerAdapter::setGalaxyName(const String& name) {
	(static_cast<ZoneServer*>(stub))->setGalaxyName(name);
}

bool ZoneServerAdapter::isServerLocked() {
	return (static_cast<ZoneServer*>(stub))->isServerLocked();
}

bool ZoneServerAdapter::isServerOnline() {
	return (static_cast<ZoneServer*>(stub))->isServerOnline();
}

bool ZoneServerAdapter::isServerOffline() {
	return (static_cast<ZoneServer*>(stub))->isServerOffline();
}

bool ZoneServerAdapter::isServerLoading() {
	return (static_cast<ZoneServer*>(stub))->isServerLoading();
}

int ZoneServerAdapter::getServerState() {
	return (static_cast<ZoneServer*>(stub))->getServerState();
}

Zone* ZoneServerAdapter::getZone(const String& terrainName) {
	return (static_cast<ZoneServer*>(stub))->getZone(terrainName);
}

Zone* ZoneServerAdapter::getZone(int idx) {
	return (static_cast<ZoneServer*>(stub))->getZone(idx);
}

int ZoneServerAdapter::getZoneCount() {
	return (static_cast<ZoneServer*>(stub))->getZoneCount();
}

int ZoneServerAdapter::getMaxPlayers() {
	return (static_cast<ZoneServer*>(stub))->getMaxPlayers();
}

int ZoneServerAdapter::getTotalPlayers() {
	return (static_cast<ZoneServer*>(stub))->getTotalPlayers();
}

int ZoneServerAdapter::getDeletedPlayers() {
	return (static_cast<ZoneServer*>(stub))->getDeletedPlayers();
}

PlayerManager* ZoneServerAdapter::getPlayerManager() {
	return (static_cast<ZoneServer*>(stub))->getPlayerManager();
}

ChatManager* ZoneServerAdapter::getChatManager() {
	return (static_cast<ZoneServer*>(stub))->getChatManager();
}

ObjectController* ZoneServerAdapter::getObjectController() {
	return (static_cast<ZoneServer*>(stub))->getObjectController();
}

MissionManager* ZoneServerAdapter::getMissionManager() {
	return (static_cast<ZoneServer*>(stub))->getMissionManager();
}

RadialManager* ZoneServerAdapter::getRadialManager() {
	return (static_cast<ZoneServer*>(stub))->getRadialManager();
}

GuildManager* ZoneServerAdapter::getGuildManager() {
	return (static_cast<ZoneServer*>(stub))->getGuildManager();
}

ResourceManager* ZoneServerAdapter::getResourceManager() {
	return (static_cast<ZoneServer*>(stub))->getResourceManager();
}

CraftingManager* ZoneServerAdapter::getCraftingManager() {
	return (static_cast<ZoneServer*>(stub))->getCraftingManager();
}

LootManager* ZoneServerAdapter::getLootManager() {
	return (static_cast<ZoneServer*>(stub))->getLootManager();
}

AuctionManager* ZoneServerAdapter::getAuctionManager() {
	return (static_cast<ZoneServer*>(stub))->getAuctionManager();
}

FishingManager* ZoneServerAdapter::getFishingManager() {
	return (static_cast<ZoneServer*>(stub))->getFishingManager();
}

GamblingManager* ZoneServerAdapter::getGamblingManager() {
	return (static_cast<ZoneServer*>(stub))->getGamblingManager();
}

ForageManager* ZoneServerAdapter::getForageManager() {
	return (static_cast<ZoneServer*>(stub))->getForageManager();
}

Account* ZoneServerAdapter::getAccount(unsigned int accountID) {
	return (static_cast<ZoneServer*>(stub))->getAccount(accountID);
}

void ZoneServerAdapter::setGalaxyID(int galaxyid) {
	(static_cast<ZoneServer*>(stub))->setGalaxyID(galaxyid);
}

void ZoneServerAdapter::setServerState(int state) {
	(static_cast<ZoneServer*>(stub))->setServerState(state);
}

void ZoneServerAdapter::setServerStateLocked() {
	(static_cast<ZoneServer*>(stub))->setServerStateLocked();
}

void ZoneServerAdapter::setServerStateOnline() {
	(static_cast<ZoneServer*>(stub))->setServerStateOnline();
}

void ZoneServerAdapter::loadLoginMessage() {
	(static_cast<ZoneServer*>(stub))->loadLoginMessage();
}

void ZoneServerAdapter::changeLoginMessage(const String& motd) {
	(static_cast<ZoneServer*>(stub))->changeLoginMessage(motd);
}

String ZoneServerAdapter::getLoginMessage() {
	return (static_cast<ZoneServer*>(stub))->getLoginMessage();
}

/*
 *	ZoneServerHelper
 */

ZoneServerHelper* ZoneServerHelper::staticInitializer = ZoneServerHelper::instance();

ZoneServerHelper::ZoneServerHelper() {
	className = "ZoneServer";

	Core::getObjectBroker()->registerClass(className, this);
}

void ZoneServerHelper::finalizeHelper() {
	ZoneServerHelper::finalize();
}

DistributedObject* ZoneServerHelper::instantiateObject() {
	return new ZoneServer(DummyConstructorParameter::instance());
}

DistributedObjectServant* ZoneServerHelper::instantiateServant() {
	return new ZoneServerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ZoneServerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ZoneServerAdapter(static_cast<ZoneServer*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

