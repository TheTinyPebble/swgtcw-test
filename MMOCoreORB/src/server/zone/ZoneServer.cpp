/*
 *	server/zone/ZoneServer.cpp generated by engine3 IDL compiler 0.55
 */

#include "ZoneServer.h"

#include "ZoneServerImplementation.h"

/*
 *	ZoneServerStub
 */

ZoneServer::ZoneServer(int threadcount, int galaxyid) {
	_impl = new ZoneServerImplementation(threadcount, galaxyid);
	_impl->_setStub(this);
}

ZoneServer::ZoneServer(DummyConstructorParameter* param) {
	_impl = NULL;
}

ZoneServer::~ZoneServer() {
}

void ZoneServer::start(int port, int conn) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addSignedIntParameter(port);
		method.addSignedIntParameter(conn);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->start(port, conn);
}

void ZoneServer::stop() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->stop();
}

void ZoneServer::startManagers() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->startManagers();
}

void ZoneServer::changeUserCap(int amount) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addSignedIntParameter(amount);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->changeUserCap(amount);
}

void ZoneServer::addTotalSentPacket(int count) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addSignedIntParameter(count);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->addTotalSentPacket(count);
}

void ZoneServer::addTotalResentPacket(int count) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addSignedIntParameter(count);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->addTotalResentPacket(count);
}

void ZoneServer::lock() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->lock();
}

void ZoneServer::unlock() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->unlock();
}

void ZoneServer::increaseTotalDeletedPlayers() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->increaseTotalDeletedPlayers();
}

void ZoneServer::printInfo() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->printInfo();
}

void ZoneServer::fixScheduler() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->fixScheduler();
}

void ZoneServer::changeMessageoftheDay(const String& newMOTD) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addAsciiParameter(newMOTD);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->changeMessageoftheDay(newMOTD);
}

void ZoneServer::loadMessageoftheDay() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->loadMessageoftheDay();
}

String& ZoneServer::getServerName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);

		method.executeWithAsciiReturn(_return_getServerName);
		return _return_getServerName;
	} else
		return ((ZoneServerImplementation*) _impl)->getServerName();
}

int ZoneServer::getGalaxyID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);

		return method.executeWithSignedIntReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getGalaxyID();
}

bool ZoneServer::isServerLocked() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);

		return method.executeWithBooleanReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->isServerLocked();
}

bool ZoneServer::isServerOnline() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);

		return method.executeWithBooleanReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->isServerOnline();
}

bool ZoneServer::isServerOffline() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);

		return method.executeWithBooleanReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->isServerOffline();
}

bool ZoneServer::isServerLoading() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);

		return method.executeWithBooleanReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->isServerLoading();
}

int ZoneServer::getServerState() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);

		return method.executeWithSignedIntReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getServerState();
}

int ZoneServer::getConnectionCount() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);

		return method.executeWithSignedIntReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getConnectionCount();
}

int ZoneServer::getTotalPlayers() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);

		return method.executeWithSignedIntReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getTotalPlayers();
}

int ZoneServer::getMaxPlayers() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);

		return method.executeWithSignedIntReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getMaxPlayers();
}

int ZoneServer::getDeletedPlayers() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);

		return method.executeWithSignedIntReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getDeletedPlayers();
}

unsigned long long ZoneServer::getStartTimestamp() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getStartTimestamp();
}

unsigned long long ZoneServer::getNextCreatureID(bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);
		method.addBooleanParameter(doLock);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getNextCreatureID(doLock);
}

unsigned long long ZoneServer::getNextID(bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);
		method.addBooleanParameter(doLock);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getNextID(doLock);
}

unsigned long long ZoneServer::getNextCellID(bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);
		method.addBooleanParameter(doLock);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((ZoneServerImplementation*) _impl)->getNextCellID(doLock);
}

String& ZoneServer::getMessageoftheDay() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);

		method.executeWithAsciiReturn(_return_getMessageoftheDay);
		return _return_getMessageoftheDay;
	} else
		return ((ZoneServerImplementation*) _impl)->getMessageoftheDay();
}

void ZoneServer::setServerState(int state) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);
		method.addSignedIntParameter(state);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->setServerState(state);
}

void ZoneServer::setServerStateLocked() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 36);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->setServerStateLocked();
}

void ZoneServer::setServerStateOnline() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 37);

		method.executeWithVoidReturn();
	} else
		((ZoneServerImplementation*) _impl)->setServerStateOnline();
}

/*
 *	ZoneServerAdapter
 */

ZoneServerAdapter::ZoneServerAdapter(ZoneServerImplementation* obj) : DistributedObjectAdapter((DistributedObjectServant*) obj) {
}

Packet* ZoneServerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		start(inv->getSignedIntParameter(), inv->getSignedIntParameter());
		break;
	case 7:
		stop();
		break;
	case 8:
		startManagers();
		break;
	case 9:
		changeUserCap(inv->getSignedIntParameter());
		break;
	case 10:
		addTotalSentPacket(inv->getSignedIntParameter());
		break;
	case 11:
		addTotalResentPacket(inv->getSignedIntParameter());
		break;
	case 12:
		lock();
		break;
	case 13:
		unlock();
		break;
	case 14:
		increaseTotalDeletedPlayers();
		break;
	case 15:
		printInfo();
		break;
	case 16:
		fixScheduler();
		break;
	case 17:
		changeMessageoftheDay(inv->getAsciiParameter(_param0_changeMessageoftheDay__String_));
		break;
	case 18:
		loadMessageoftheDay();
		break;
	case 19:
		resp->insertAscii(getServerName());
		break;
	case 20:
		resp->insertSignedInt(getGalaxyID());
		break;
	case 21:
		resp->insertBoolean(isServerLocked());
		break;
	case 22:
		resp->insertBoolean(isServerOnline());
		break;
	case 23:
		resp->insertBoolean(isServerOffline());
		break;
	case 24:
		resp->insertBoolean(isServerLoading());
		break;
	case 25:
		resp->insertSignedInt(getServerState());
		break;
	case 26:
		resp->insertSignedInt(getConnectionCount());
		break;
	case 27:
		resp->insertSignedInt(getTotalPlayers());
		break;
	case 28:
		resp->insertSignedInt(getMaxPlayers());
		break;
	case 29:
		resp->insertSignedInt(getDeletedPlayers());
		break;
	case 30:
		resp->insertLong(getStartTimestamp());
		break;
	case 31:
		resp->insertLong(getNextCreatureID(inv->getBooleanParameter()));
		break;
	case 32:
		resp->insertLong(getNextID(inv->getBooleanParameter()));
		break;
	case 33:
		resp->insertLong(getNextCellID(inv->getBooleanParameter()));
		break;
	case 34:
		resp->insertAscii(getMessageoftheDay());
		break;
	case 35:
		setServerState(inv->getSignedIntParameter());
		break;
	case 36:
		setServerStateLocked();
		break;
	case 37:
		setServerStateOnline();
		break;
	default:
		return NULL;
	}

	return resp;
}

void ZoneServerAdapter::start(int port, int conn) {
	return ((ZoneServerImplementation*) impl)->start(port, conn);
}

void ZoneServerAdapter::stop() {
	return ((ZoneServerImplementation*) impl)->stop();
}

void ZoneServerAdapter::startManagers() {
	return ((ZoneServerImplementation*) impl)->startManagers();
}

void ZoneServerAdapter::changeUserCap(int amount) {
	return ((ZoneServerImplementation*) impl)->changeUserCap(amount);
}

void ZoneServerAdapter::addTotalSentPacket(int count) {
	return ((ZoneServerImplementation*) impl)->addTotalSentPacket(count);
}

void ZoneServerAdapter::addTotalResentPacket(int count) {
	return ((ZoneServerImplementation*) impl)->addTotalResentPacket(count);
}

void ZoneServerAdapter::lock() {
	return ((ZoneServerImplementation*) impl)->lock();
}

void ZoneServerAdapter::unlock() {
	return ((ZoneServerImplementation*) impl)->unlock();
}

void ZoneServerAdapter::increaseTotalDeletedPlayers() {
	return ((ZoneServerImplementation*) impl)->increaseTotalDeletedPlayers();
}

void ZoneServerAdapter::printInfo() {
	return ((ZoneServerImplementation*) impl)->printInfo();
}

void ZoneServerAdapter::fixScheduler() {
	return ((ZoneServerImplementation*) impl)->fixScheduler();
}

void ZoneServerAdapter::changeMessageoftheDay(const String& newMOTD) {
	return ((ZoneServerImplementation*) impl)->changeMessageoftheDay(newMOTD);
}

void ZoneServerAdapter::loadMessageoftheDay() {
	return ((ZoneServerImplementation*) impl)->loadMessageoftheDay();
}

String& ZoneServerAdapter::getServerName() {
	return ((ZoneServerImplementation*) impl)->getServerName();
}

int ZoneServerAdapter::getGalaxyID() {
	return ((ZoneServerImplementation*) impl)->getGalaxyID();
}

bool ZoneServerAdapter::isServerLocked() {
	return ((ZoneServerImplementation*) impl)->isServerLocked();
}

bool ZoneServerAdapter::isServerOnline() {
	return ((ZoneServerImplementation*) impl)->isServerOnline();
}

bool ZoneServerAdapter::isServerOffline() {
	return ((ZoneServerImplementation*) impl)->isServerOffline();
}

bool ZoneServerAdapter::isServerLoading() {
	return ((ZoneServerImplementation*) impl)->isServerLoading();
}

int ZoneServerAdapter::getServerState() {
	return ((ZoneServerImplementation*) impl)->getServerState();
}

int ZoneServerAdapter::getConnectionCount() {
	return ((ZoneServerImplementation*) impl)->getConnectionCount();
}

int ZoneServerAdapter::getTotalPlayers() {
	return ((ZoneServerImplementation*) impl)->getTotalPlayers();
}

int ZoneServerAdapter::getMaxPlayers() {
	return ((ZoneServerImplementation*) impl)->getMaxPlayers();
}

int ZoneServerAdapter::getDeletedPlayers() {
	return ((ZoneServerImplementation*) impl)->getDeletedPlayers();
}

unsigned long long ZoneServerAdapter::getStartTimestamp() {
	return ((ZoneServerImplementation*) impl)->getStartTimestamp();
}

unsigned long long ZoneServerAdapter::getNextCreatureID(bool doLock) {
	return ((ZoneServerImplementation*) impl)->getNextCreatureID(doLock);
}

unsigned long long ZoneServerAdapter::getNextID(bool doLock) {
	return ((ZoneServerImplementation*) impl)->getNextID(doLock);
}

unsigned long long ZoneServerAdapter::getNextCellID(bool doLock) {
	return ((ZoneServerImplementation*) impl)->getNextCellID(doLock);
}

String& ZoneServerAdapter::getMessageoftheDay() {
	return ((ZoneServerImplementation*) impl)->getMessageoftheDay();
}

void ZoneServerAdapter::setServerState(int state) {
	return ((ZoneServerImplementation*) impl)->setServerState(state);
}

void ZoneServerAdapter::setServerStateLocked() {
	return ((ZoneServerImplementation*) impl)->setServerStateLocked();
}

void ZoneServerAdapter::setServerStateOnline() {
	return ((ZoneServerImplementation*) impl)->setServerStateOnline();
}

/*
 *	ZoneServerHelper
 */

ZoneServerHelper* ZoneServerHelper::staticInitializer = ZoneServerHelper::instance();

ZoneServerHelper::ZoneServerHelper() {
	className = "ZoneServer";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void ZoneServerHelper::finalizeHelper() {
	ZoneServerHelper::finalize();
}

DistributedObject* ZoneServerHelper::instantiateObject() {
	return new ZoneServer(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ZoneServerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ZoneServerAdapter((ZoneServerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	ZoneServerServant
 */

ZoneServerServant::ZoneServerServant() {
	_classHelper = ZoneServerHelper::instance();
}

ZoneServerServant::~ZoneServerServant() {
}

void ZoneServerServant::_setStub(DistributedObjectStub* stub) {
	_this = (ZoneServer*) stub;
}

DistributedObjectStub* ZoneServerServant::_getStub() {
	return _this;
}

