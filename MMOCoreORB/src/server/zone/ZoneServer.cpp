/*
 *	server/zone/ZoneServer.cpp generated by engine3 IDL compiler 0.60
 */

#include "ZoneServer.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/ZoneProcessServerImplementation.h"

#include "server/zone/managers/object/ObjectManager.h"

#include "server/zone/managers/player/PlayerManager.h"

#include "server/zone/Zone.h"

#include "server/chat/ChatManager.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

#include "server/zone/managers/radial/RadialManager.h"

#include "server/zone/managers/professions/ProfessionManager.h"

#include "server/zone/managers/resource/ResourceManager.h"

#include "server/zone/managers/crafting/CraftingManager.h"

#include "server/zone/managers/loot/LootManager.h"

#include "server/zone/managers/bazaar/BazaarManager.h"

#include "server/zone/managers/minigames/FishingManager.h"

#include "server/zone/managers/mission/MissionManager.h"

#include "server/zone/managers/account/AccountManager.h"

#include "server/zone/managers/minigames/GamblingManager.h"

#include "server/zone/managers/stringid/StringIdManager.h"

#include "server/zone/managers/creature/CreatureTemplateManager.h"

/*
 *	ZoneServerStub
 */

ZoneServer::ZoneServer(int processingThreads, int galaxyid) : ManagedService(DummyConstructorParameter::instance()) {
	ZoneServerImplementation* _implementation = new ZoneServerImplementation(processingThreads, galaxyid);
	_impl = _implementation;
	_impl->_setStub(this);
}

ZoneServer::ZoneServer(DummyConstructorParameter* param) : ManagedService(param) {
}

ZoneServer::~ZoneServer() {
}


void ZoneServer::initializeTransientMembers() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

ServiceClient* ZoneServer::createConnection(Socket* sock, SocketAddress& addr) {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->createConnection(sock, addr);
}

void ZoneServer::initialize() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		_implementation->initialize();
}

void ZoneServer::shutdown() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		method.executeWithVoidReturn();
	} else
		_implementation->shutdown();
}

void ZoneServer::startManagers() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		method.executeWithVoidReturn();
	} else
		_implementation->startManagers();
}

void ZoneServer::startZones() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		method.executeWithVoidReturn();
	} else
		_implementation->startZones();
}

void ZoneServer::stopManagers() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		method.executeWithVoidReturn();
	} else
		_implementation->stopManagers();
}

void ZoneServer::start(int p, int mconn) {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addSignedIntParameter(p);
		method.addSignedIntParameter(mconn);

		method.executeWithVoidReturn();
	} else
		_implementation->start(p, mconn);
}

void ZoneServer::stop() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		method.executeWithVoidReturn();
	} else
		_implementation->stop();
}

void ZoneServer::handleMessage(ServiceClient* client, Packet* message) {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->handleMessage(client, message);
}

bool ZoneServer::handleError(ServiceClient* client, Exception& e) {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->handleError(client, e);
}

void ZoneServer::addTotalSentPacket(int count) {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addSignedIntParameter(count);

		method.executeWithVoidReturn();
	} else
		_implementation->addTotalSentPacket(count);
}

void ZoneServer::addTotalResentPacket(int count) {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addSignedIntParameter(count);

		method.executeWithVoidReturn();
	} else
		_implementation->addTotalResentPacket(count);
}

void ZoneServer::printInfo(bool forcedLog) {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addBooleanParameter(forcedLog);

		method.executeWithVoidReturn();
	} else
		_implementation->printInfo(forcedLog);
}

void ZoneServer::printEvents() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);

		method.executeWithVoidReturn();
	} else
		_implementation->printEvents();
}

SceneObject* ZoneServer::getObject(unsigned long long objectID, bool doLock) {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addUnsignedLongParameter(objectID);
		method.addBooleanParameter(doLock);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return _implementation->getObject(objectID, doLock);
}

SceneObject* ZoneServer::createObject(unsigned int templateCRC, int persistenceLevel, unsigned long long objectID) {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addUnsignedIntParameter(templateCRC);
		method.addSignedIntParameter(persistenceLevel);
		method.addUnsignedLongParameter(objectID);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return _implementation->createObject(templateCRC, persistenceLevel, objectID);
}

SceneObject* ZoneServer::createStaticObject(unsigned int templateCRC, unsigned long long objectID) {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addUnsignedIntParameter(templateCRC);
		method.addUnsignedLongParameter(objectID);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return _implementation->createStaticObject(templateCRC, objectID);
}

void ZoneServer::updateObjectToDatabase(SceneObject* object) {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		_implementation->updateObjectToDatabase(object);
}

void ZoneServer::updateObjectToStaticDatabase(SceneObject* object) {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		_implementation->updateObjectToStaticDatabase(object);
}

void ZoneServer::destroyObjectFromDatabase(unsigned long long objectID) {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);
		method.addUnsignedLongParameter(objectID);

		method.executeWithVoidReturn();
	} else
		_implementation->destroyObjectFromDatabase(objectID);
}

void ZoneServer::lock(bool doLock) {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		_implementation->lock(doLock);
}

void ZoneServer::unlock(bool doLock) {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		_implementation->unlock(doLock);
}

void ZoneServer::fixScheduler() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);

		method.executeWithVoidReturn();
	} else
		_implementation->fixScheduler();
}

void ZoneServer::changeUserCap(int amount) {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);
		method.addSignedIntParameter(amount);

		method.executeWithVoidReturn();
	} else
		_implementation->changeUserCap(amount);
}

int ZoneServer::getConnectionCount() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getConnectionCount();
}

void ZoneServer::increaseOnlinePlayers() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);

		method.executeWithVoidReturn();
	} else
		_implementation->increaseOnlinePlayers();
}

void ZoneServer::decreaseOnlinePlayers() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);

		method.executeWithVoidReturn();
	} else
		_implementation->decreaseOnlinePlayers();
}

void ZoneServer::increaseTotalDeletedPlayers() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);

		method.executeWithVoidReturn();
	} else
		_implementation->increaseTotalDeletedPlayers();
}

int ZoneServer::getGalaxyID() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getGalaxyID();
}

String ZoneServer::getServerName() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);

		method.executeWithAsciiReturn(_return_getServerName);
		return _return_getServerName;
	} else
		return _implementation->getServerName();
}

bool ZoneServer::isServerLocked() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isServerLocked();
}

bool ZoneServer::isServerOnline() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isServerOnline();
}

bool ZoneServer::isServerOffline() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 36);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isServerOffline();
}

bool ZoneServer::isServerLoading() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 37);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isServerLoading();
}

int ZoneServer::getServerState() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 38);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getServerState();
}

Zone* ZoneServer::getZone(int index) {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 39);
		method.addSignedIntParameter(index);

		return (Zone*) method.executeWithObjectReturn();
	} else
		return _implementation->getZone(index);
}

int ZoneServer::getZoneCount() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 40);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getZoneCount();
}

int ZoneServer::getMaxPlayers() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 41);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getMaxPlayers();
}

int ZoneServer::getTotalPlayers() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 42);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getTotalPlayers();
}

int ZoneServer::getDeletedPlayers() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 43);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getDeletedPlayers();
}

PlayerManager* ZoneServer::getPlayerManager() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 44);

		return (PlayerManager*) method.executeWithObjectReturn();
	} else
		return _implementation->getPlayerManager();
}

ChatManager* ZoneServer::getChatManager() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 45);

		return (ChatManager*) method.executeWithObjectReturn();
	} else
		return _implementation->getChatManager();
}

ObjectController* ZoneServer::getObjectController() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 46);

		return (ObjectController*) method.executeWithObjectReturn();
	} else
		return _implementation->getObjectController();
}

MissionManager* ZoneServer::getMissionManager() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 47);

		return (MissionManager*) method.executeWithObjectReturn();
	} else
		return _implementation->getMissionManager();
}

RadialManager* ZoneServer::getRadialManager() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 48);

		return (RadialManager*) method.executeWithObjectReturn();
	} else
		return _implementation->getRadialManager();
}

ResourceManager* ZoneServer::getResourceManager() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 49);

		return (ResourceManager*) method.executeWithObjectReturn();
	} else
		return _implementation->getResourceManager();
}

CraftingManager* ZoneServer::getCraftingManager() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 50);

		return (CraftingManager*) method.executeWithObjectReturn();
	} else
		return _implementation->getCraftingManager();
}

LootManager* ZoneServer::getLootManager() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 51);

		return (LootManager*) method.executeWithObjectReturn();
	} else
		return _implementation->getLootManager();
}

BazaarManager* ZoneServer::getBazaarManager() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 52);

		return (BazaarManager*) method.executeWithObjectReturn();
	} else
		return _implementation->getBazaarManager();
}

FishingManager* ZoneServer::getFishingManager() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 53);

		return (FishingManager*) method.executeWithObjectReturn();
	} else
		return _implementation->getFishingManager();
}

GamblingManager* ZoneServer::getGamblingManager() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 54);

		return (GamblingManager*) method.executeWithObjectReturn();
	} else
		return _implementation->getGamblingManager();
}

AccountManager* ZoneServer::getAccountManager() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 55);

		return (AccountManager*) method.executeWithObjectReturn();
	} else
		return _implementation->getAccountManager();
}

ProfessionManager* ZoneServer::getProfessionManager() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getProfessionManager();
}

Time* ZoneServer::getStartTimestamp() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getStartTimestamp();
}

void ZoneServer::setServerName(const String& servername) {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 56);
		method.addAsciiParameter(servername);

		method.executeWithVoidReturn();
	} else
		_implementation->setServerName(servername);
}

void ZoneServer::setGalaxyID(int galaxyid) {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 57);
		method.addSignedIntParameter(galaxyid);

		method.executeWithVoidReturn();
	} else
		_implementation->setGalaxyID(galaxyid);
}

void ZoneServer::setServerState(int state) {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 58);
		method.addSignedIntParameter(state);

		method.executeWithVoidReturn();
	} else
		_implementation->setServerState(state);
}

void ZoneServer::setServerStateLocked() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 59);

		method.executeWithVoidReturn();
	} else
		_implementation->setServerStateLocked();
}

void ZoneServer::setServerStateOnline() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 60);

		method.executeWithVoidReturn();
	} else
		_implementation->setServerStateOnline();
}

void ZoneServer::loadMessageoftheDay() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 61);

		method.executeWithVoidReturn();
	} else
		_implementation->loadMessageoftheDay();
}

void ZoneServer::changeMessageoftheDay(const String& newMOTD) {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 62);
		method.addAsciiParameter(newMOTD);

		method.executeWithVoidReturn();
	} else
		_implementation->changeMessageoftheDay(newMOTD);
}

String ZoneServer::getMessageoftheDay() {
	ZoneServerImplementation* _implementation = (ZoneServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 63);

		method.executeWithAsciiReturn(_return_getMessageoftheDay);
		return _return_getMessageoftheDay;
	} else
		return _implementation->getMessageoftheDay();
}

DistributedObjectServant* ZoneServer::_getImplementation() {
	return _impl;}

void ZoneServer::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;}

/*
 *	ZoneServerImplementation
 */

ZoneServerImplementation::ZoneServerImplementation(DummyConstructorParameter* param) : ManagedServiceImplementation(param) {
	_initializeImplementation();
}


ZoneServerImplementation::~ZoneServerImplementation() {
}


void ZoneServerImplementation::finalize() {
}

void ZoneServerImplementation::_initializeImplementation() {
	_setClassHelper(ZoneServerHelper::instance());

	_serializationHelperMethod();
}

void ZoneServerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (ZoneServer*) stub;
	ManagedServiceImplementation::_setStub(stub);
}

DistributedObjectStub* ZoneServerImplementation::_getStub() {
	return _this;
}

ZoneServerImplementation::operator const ZoneServer*() {
	return _this;
}

void ZoneServerImplementation::_serializationHelperMethod() {
	ManagedServiceImplementation::_serializationHelperMethod();

	_setClassName("ZoneServer");

	addSerializableVariable("procThreadCount", &procThreadCount);
	addSerializableVariable("zones", &zones);
	addSerializableVariable("playerManager", &playerManager);
	addSerializableVariable("chatManager", &chatManager);
	addSerializableVariable("radialManager", &radialManager);
	addSerializableVariable("resourceManager", &resourceManager);
	addSerializableVariable("craftingManager", &craftingManager);
	addSerializableVariable("lootManager", &lootManager);
	addSerializableVariable("bazaarManager", &bazaarManager);
	addSerializableVariable("missionManager", &missionManager);
	addSerializableVariable("fishingManager", &fishingManager);
	addSerializableVariable("gamblingManager", &gamblingManager);
	addSerializableVariable("accountManager", &accountManager);
	addSerializableVariable("totalSentPackets", &totalSentPackets);
	addSerializableVariable("totalResentPackets", &totalResentPackets);
	addSerializableVariable("currentPlayers", &currentPlayers);
	addSerializableVariable("maximumPlayers", &maximumPlayers);
	addSerializableVariable("totalPlayers", &totalPlayers);
	addSerializableVariable("totalDeletedPlayers", &totalDeletedPlayers);
	addSerializableVariable("serverState", &serverState);
	addSerializableVariable("name", &name);
	addSerializableVariable("messageoftheDay", &messageoftheDay);
	addSerializableVariable("galaxyID", &galaxyID);
	addSerializableVariable("startTimestamp", &startTimestamp);
}

void ZoneServerImplementation::fixScheduler() {
}

int ZoneServerImplementation::getGalaxyID() {
	// server/zone/ZoneServer.idl(241):  		return galaxyID;
	return galaxyID;
}

bool ZoneServerImplementation::isServerLocked() {
	// server/zone/ZoneServer.idl(247):  		return serverState == LOCKED;
	return serverState == LOCKED;
}

bool ZoneServerImplementation::isServerOnline() {
	// server/zone/ZoneServer.idl(251):  		return serverState == ONLINE;
	return serverState == ONLINE;
}

bool ZoneServerImplementation::isServerOffline() {
	// server/zone/ZoneServer.idl(255):  		return serverState == OFFLINE;
	return serverState == OFFLINE;
}

bool ZoneServerImplementation::isServerLoading() {
	// server/zone/ZoneServer.idl(259):  		return serverState == LOADING;
	return serverState == LOADING;
}

int ZoneServerImplementation::getServerState() {
	// server/zone/ZoneServer.idl(263):  		return serverState;
	return serverState;
}

Zone* ZoneServerImplementation::getZone(int index) {
	// server/zone/ZoneServer.idl(267):  		return zones.get(index);
	return (&zones)->get(index);
}

int ZoneServerImplementation::getZoneCount() {
	// server/zone/ZoneServer.idl(271):  		return zones.size();
	return (&zones)->size();
}

int ZoneServerImplementation::getMaxPlayers() {
	// server/zone/ZoneServer.idl(275):  		return maximumPlayers.get();
	return (&maximumPlayers)->get();
}

int ZoneServerImplementation::getTotalPlayers() {
	// server/zone/ZoneServer.idl(279):  		return totalPlayers.get();
	return (&totalPlayers)->get();
}

int ZoneServerImplementation::getDeletedPlayers() {
	// server/zone/ZoneServer.idl(283):  		return totalDeletedPlayers.get();
	return (&totalDeletedPlayers)->get();
}

PlayerManager* ZoneServerImplementation::getPlayerManager() {
	// server/zone/ZoneServer.idl(287):  		return playerManager;
	return playerManager;
}

ChatManager* ZoneServerImplementation::getChatManager() {
	// server/zone/ZoneServer.idl(291):  		return chatManager;
	return chatManager;
}

ObjectController* ZoneServerImplementation::getObjectController() {
	// server/zone/ZoneServer.idl(295):  		return processor.getObjectController();
	return processor->getObjectController();
}

MissionManager* ZoneServerImplementation::getMissionManager() {
	// server/zone/ZoneServer.idl(299):  		return missionManager;
	return missionManager;
}

RadialManager* ZoneServerImplementation::getRadialManager() {
	// server/zone/ZoneServer.idl(303):  		return radialManager;
	return radialManager;
}

ResourceManager* ZoneServerImplementation::getResourceManager() {
	// server/zone/ZoneServer.idl(307):  		return resourceManager;
	return resourceManager;
}

CraftingManager* ZoneServerImplementation::getCraftingManager() {
	// server/zone/ZoneServer.idl(311):  		return craftingManager;
	return craftingManager;
}

LootManager* ZoneServerImplementation::getLootManager() {
	// server/zone/ZoneServer.idl(315):  		return lootManager;
	return lootManager;
}

BazaarManager* ZoneServerImplementation::getBazaarManager() {
	// server/zone/ZoneServer.idl(319):  		return bazaarManager;
	return bazaarManager;
}

FishingManager* ZoneServerImplementation::getFishingManager() {
	// server/zone/ZoneServer.idl(323):  		return fishingManager;
	return fishingManager;
}

GamblingManager* ZoneServerImplementation::getGamblingManager() {
	// server/zone/ZoneServer.idl(327):  		return gamblingManager;
	return gamblingManager;
}

AccountManager* ZoneServerImplementation::getAccountManager() {
	// server/zone/ZoneServer.idl(331):  		return accountManager;
	return accountManager;
}

ProfessionManager* ZoneServerImplementation::getProfessionManager() {
	// server/zone/ZoneServer.idl(336):  		return processor.getProfessionManager();
	return processor->getProfessionManager();
}

Time* ZoneServerImplementation::getStartTimestamp() {
	// server/zone/ZoneServer.idl(341):  		return startTimestamp;
	return (&startTimestamp);
}

void ZoneServerImplementation::setGalaxyID(int galaxyid) {
	Locker _locker(_this);
	// server/zone/ZoneServer.idl(347):  		galaxyID = galaxyid;
	galaxyID = galaxyid;
}

void ZoneServerImplementation::setServerState(int state) {
	Locker _locker(_this);
	// server/zone/ZoneServer.idl(351):  		serverState = state;
	serverState = state;
}

/*
 *	ZoneServerAdapter
 */

ZoneServerAdapter::ZoneServerAdapter(ZoneServerImplementation* obj) : ManagedServiceAdapter(obj) {
}

Packet* ZoneServerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initializeTransientMembers();
		break;
	case 7:
		initialize();
		break;
	case 8:
		shutdown();
		break;
	case 9:
		startManagers();
		break;
	case 10:
		startZones();
		break;
	case 11:
		stopManagers();
		break;
	case 12:
		start(inv->getSignedIntParameter(), inv->getSignedIntParameter());
		break;
	case 13:
		stop();
		break;
	case 14:
		addTotalSentPacket(inv->getSignedIntParameter());
		break;
	case 15:
		addTotalResentPacket(inv->getSignedIntParameter());
		break;
	case 16:
		printInfo(inv->getBooleanParameter());
		break;
	case 17:
		printEvents();
		break;
	case 18:
		resp->insertLong(getObject(inv->getUnsignedLongParameter(), inv->getBooleanParameter())->_getObjectID());
		break;
	case 19:
		resp->insertLong(createObject(inv->getUnsignedIntParameter(), inv->getSignedIntParameter(), inv->getUnsignedLongParameter())->_getObjectID());
		break;
	case 20:
		resp->insertLong(createStaticObject(inv->getUnsignedIntParameter(), inv->getUnsignedLongParameter())->_getObjectID());
		break;
	case 21:
		updateObjectToDatabase((SceneObject*) inv->getObjectParameter());
		break;
	case 22:
		updateObjectToStaticDatabase((SceneObject*) inv->getObjectParameter());
		break;
	case 23:
		destroyObjectFromDatabase(inv->getUnsignedLongParameter());
		break;
	case 24:
		lock(inv->getBooleanParameter());
		break;
	case 25:
		unlock(inv->getBooleanParameter());
		break;
	case 26:
		fixScheduler();
		break;
	case 27:
		changeUserCap(inv->getSignedIntParameter());
		break;
	case 28:
		resp->insertSignedInt(getConnectionCount());
		break;
	case 29:
		increaseOnlinePlayers();
		break;
	case 30:
		decreaseOnlinePlayers();
		break;
	case 31:
		increaseTotalDeletedPlayers();
		break;
	case 32:
		resp->insertSignedInt(getGalaxyID());
		break;
	case 33:
		resp->insertAscii(getServerName());
		break;
	case 34:
		resp->insertBoolean(isServerLocked());
		break;
	case 35:
		resp->insertBoolean(isServerOnline());
		break;
	case 36:
		resp->insertBoolean(isServerOffline());
		break;
	case 37:
		resp->insertBoolean(isServerLoading());
		break;
	case 38:
		resp->insertSignedInt(getServerState());
		break;
	case 39:
		resp->insertLong(getZone(inv->getSignedIntParameter())->_getObjectID());
		break;
	case 40:
		resp->insertSignedInt(getZoneCount());
		break;
	case 41:
		resp->insertSignedInt(getMaxPlayers());
		break;
	case 42:
		resp->insertSignedInt(getTotalPlayers());
		break;
	case 43:
		resp->insertSignedInt(getDeletedPlayers());
		break;
	case 44:
		resp->insertLong(getPlayerManager()->_getObjectID());
		break;
	case 45:
		resp->insertLong(getChatManager()->_getObjectID());
		break;
	case 46:
		resp->insertLong(getObjectController()->_getObjectID());
		break;
	case 47:
		resp->insertLong(getMissionManager()->_getObjectID());
		break;
	case 48:
		resp->insertLong(getRadialManager()->_getObjectID());
		break;
	case 49:
		resp->insertLong(getResourceManager()->_getObjectID());
		break;
	case 50:
		resp->insertLong(getCraftingManager()->_getObjectID());
		break;
	case 51:
		resp->insertLong(getLootManager()->_getObjectID());
		break;
	case 52:
		resp->insertLong(getBazaarManager()->_getObjectID());
		break;
	case 53:
		resp->insertLong(getFishingManager()->_getObjectID());
		break;
	case 54:
		resp->insertLong(getGamblingManager()->_getObjectID());
		break;
	case 55:
		resp->insertLong(getAccountManager()->_getObjectID());
		break;
	case 56:
		setServerName(inv->getAsciiParameter(_param0_setServerName__String_));
		break;
	case 57:
		setGalaxyID(inv->getSignedIntParameter());
		break;
	case 58:
		setServerState(inv->getSignedIntParameter());
		break;
	case 59:
		setServerStateLocked();
		break;
	case 60:
		setServerStateOnline();
		break;
	case 61:
		loadMessageoftheDay();
		break;
	case 62:
		changeMessageoftheDay(inv->getAsciiParameter(_param0_changeMessageoftheDay__String_));
		break;
	case 63:
		resp->insertAscii(getMessageoftheDay());
		break;
	default:
		return NULL;
	}

	return resp;
}

void ZoneServerAdapter::initializeTransientMembers() {
	((ZoneServerImplementation*) impl)->initializeTransientMembers();
}

void ZoneServerAdapter::initialize() {
	((ZoneServerImplementation*) impl)->initialize();
}

void ZoneServerAdapter::shutdown() {
	((ZoneServerImplementation*) impl)->shutdown();
}

void ZoneServerAdapter::startManagers() {
	((ZoneServerImplementation*) impl)->startManagers();
}

void ZoneServerAdapter::startZones() {
	((ZoneServerImplementation*) impl)->startZones();
}

void ZoneServerAdapter::stopManagers() {
	((ZoneServerImplementation*) impl)->stopManagers();
}

void ZoneServerAdapter::start(int p, int mconn) {
	((ZoneServerImplementation*) impl)->start(p, mconn);
}

void ZoneServerAdapter::stop() {
	((ZoneServerImplementation*) impl)->stop();
}

void ZoneServerAdapter::addTotalSentPacket(int count) {
	((ZoneServerImplementation*) impl)->addTotalSentPacket(count);
}

void ZoneServerAdapter::addTotalResentPacket(int count) {
	((ZoneServerImplementation*) impl)->addTotalResentPacket(count);
}

void ZoneServerAdapter::printInfo(bool forcedLog) {
	((ZoneServerImplementation*) impl)->printInfo(forcedLog);
}

void ZoneServerAdapter::printEvents() {
	((ZoneServerImplementation*) impl)->printEvents();
}

SceneObject* ZoneServerAdapter::getObject(unsigned long long objectID, bool doLock) {
	return ((ZoneServerImplementation*) impl)->getObject(objectID, doLock);
}

SceneObject* ZoneServerAdapter::createObject(unsigned int templateCRC, int persistenceLevel, unsigned long long objectID) {
	return ((ZoneServerImplementation*) impl)->createObject(templateCRC, persistenceLevel, objectID);
}

SceneObject* ZoneServerAdapter::createStaticObject(unsigned int templateCRC, unsigned long long objectID) {
	return ((ZoneServerImplementation*) impl)->createStaticObject(templateCRC, objectID);
}

void ZoneServerAdapter::updateObjectToDatabase(SceneObject* object) {
	((ZoneServerImplementation*) impl)->updateObjectToDatabase(object);
}

void ZoneServerAdapter::updateObjectToStaticDatabase(SceneObject* object) {
	((ZoneServerImplementation*) impl)->updateObjectToStaticDatabase(object);
}

void ZoneServerAdapter::destroyObjectFromDatabase(unsigned long long objectID) {
	((ZoneServerImplementation*) impl)->destroyObjectFromDatabase(objectID);
}

void ZoneServerAdapter::lock(bool doLock) {
	((ZoneServerImplementation*) impl)->lock(doLock);
}

void ZoneServerAdapter::unlock(bool doLock) {
	((ZoneServerImplementation*) impl)->unlock(doLock);
}

void ZoneServerAdapter::fixScheduler() {
	((ZoneServerImplementation*) impl)->fixScheduler();
}

void ZoneServerAdapter::changeUserCap(int amount) {
	((ZoneServerImplementation*) impl)->changeUserCap(amount);
}

int ZoneServerAdapter::getConnectionCount() {
	return ((ZoneServerImplementation*) impl)->getConnectionCount();
}

void ZoneServerAdapter::increaseOnlinePlayers() {
	((ZoneServerImplementation*) impl)->increaseOnlinePlayers();
}

void ZoneServerAdapter::decreaseOnlinePlayers() {
	((ZoneServerImplementation*) impl)->decreaseOnlinePlayers();
}

void ZoneServerAdapter::increaseTotalDeletedPlayers() {
	((ZoneServerImplementation*) impl)->increaseTotalDeletedPlayers();
}

int ZoneServerAdapter::getGalaxyID() {
	return ((ZoneServerImplementation*) impl)->getGalaxyID();
}

String ZoneServerAdapter::getServerName() {
	return ((ZoneServerImplementation*) impl)->getServerName();
}

bool ZoneServerAdapter::isServerLocked() {
	return ((ZoneServerImplementation*) impl)->isServerLocked();
}

bool ZoneServerAdapter::isServerOnline() {
	return ((ZoneServerImplementation*) impl)->isServerOnline();
}

bool ZoneServerAdapter::isServerOffline() {
	return ((ZoneServerImplementation*) impl)->isServerOffline();
}

bool ZoneServerAdapter::isServerLoading() {
	return ((ZoneServerImplementation*) impl)->isServerLoading();
}

int ZoneServerAdapter::getServerState() {
	return ((ZoneServerImplementation*) impl)->getServerState();
}

Zone* ZoneServerAdapter::getZone(int index) {
	return ((ZoneServerImplementation*) impl)->getZone(index);
}

int ZoneServerAdapter::getZoneCount() {
	return ((ZoneServerImplementation*) impl)->getZoneCount();
}

int ZoneServerAdapter::getMaxPlayers() {
	return ((ZoneServerImplementation*) impl)->getMaxPlayers();
}

int ZoneServerAdapter::getTotalPlayers() {
	return ((ZoneServerImplementation*) impl)->getTotalPlayers();
}

int ZoneServerAdapter::getDeletedPlayers() {
	return ((ZoneServerImplementation*) impl)->getDeletedPlayers();
}

PlayerManager* ZoneServerAdapter::getPlayerManager() {
	return ((ZoneServerImplementation*) impl)->getPlayerManager();
}

ChatManager* ZoneServerAdapter::getChatManager() {
	return ((ZoneServerImplementation*) impl)->getChatManager();
}

ObjectController* ZoneServerAdapter::getObjectController() {
	return ((ZoneServerImplementation*) impl)->getObjectController();
}

MissionManager* ZoneServerAdapter::getMissionManager() {
	return ((ZoneServerImplementation*) impl)->getMissionManager();
}

RadialManager* ZoneServerAdapter::getRadialManager() {
	return ((ZoneServerImplementation*) impl)->getRadialManager();
}

ResourceManager* ZoneServerAdapter::getResourceManager() {
	return ((ZoneServerImplementation*) impl)->getResourceManager();
}

CraftingManager* ZoneServerAdapter::getCraftingManager() {
	return ((ZoneServerImplementation*) impl)->getCraftingManager();
}

LootManager* ZoneServerAdapter::getLootManager() {
	return ((ZoneServerImplementation*) impl)->getLootManager();
}

BazaarManager* ZoneServerAdapter::getBazaarManager() {
	return ((ZoneServerImplementation*) impl)->getBazaarManager();
}

FishingManager* ZoneServerAdapter::getFishingManager() {
	return ((ZoneServerImplementation*) impl)->getFishingManager();
}

GamblingManager* ZoneServerAdapter::getGamblingManager() {
	return ((ZoneServerImplementation*) impl)->getGamblingManager();
}

AccountManager* ZoneServerAdapter::getAccountManager() {
	return ((ZoneServerImplementation*) impl)->getAccountManager();
}

void ZoneServerAdapter::setServerName(const String& servername) {
	((ZoneServerImplementation*) impl)->setServerName(servername);
}

void ZoneServerAdapter::setGalaxyID(int galaxyid) {
	((ZoneServerImplementation*) impl)->setGalaxyID(galaxyid);
}

void ZoneServerAdapter::setServerState(int state) {
	((ZoneServerImplementation*) impl)->setServerState(state);
}

void ZoneServerAdapter::setServerStateLocked() {
	((ZoneServerImplementation*) impl)->setServerStateLocked();
}

void ZoneServerAdapter::setServerStateOnline() {
	((ZoneServerImplementation*) impl)->setServerStateOnline();
}

void ZoneServerAdapter::loadMessageoftheDay() {
	((ZoneServerImplementation*) impl)->loadMessageoftheDay();
}

void ZoneServerAdapter::changeMessageoftheDay(const String& newMOTD) {
	((ZoneServerImplementation*) impl)->changeMessageoftheDay(newMOTD);
}

String ZoneServerAdapter::getMessageoftheDay() {
	return ((ZoneServerImplementation*) impl)->getMessageoftheDay();
}

/*
 *	ZoneServerHelper
 */

ZoneServerHelper* ZoneServerHelper::staticInitializer = ZoneServerHelper::instance();

ZoneServerHelper::ZoneServerHelper() {
	className = "ZoneServer";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void ZoneServerHelper::finalizeHelper() {
	ZoneServerHelper::finalize();
}

DistributedObject* ZoneServerHelper::instantiateObject() {
	return new ZoneServer(DummyConstructorParameter::instance());
}

DistributedObjectServant* ZoneServerHelper::instantiateServant() {
	return new ZoneServerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ZoneServerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ZoneServerAdapter((ZoneServerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

