/*
 *	server/zone/ZoneServer.h generated by engine3 IDL compiler 0.60
 */

#ifndef ZONESERVER_H_
#define ZONESERVER_H_

#include "engine/orb/DistributedObjectBroker.h"

namespace server {
namespace zone {

class ZoneProcessServerImplementation;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {
namespace managers {
namespace object {

class ObjectManager;

} // namespace object
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::object;

namespace server {
namespace zone {

class Zone;

} // namespace zone
} // namespace server

using namespace server::zone;

#include "engine/service/proto/BasePacketHandler.h"

#include "engine/service/DatagramServiceThread.h"

#include "system/net/Socket.h"

#include "system/net/SocketAddress.h"

#include "system/net/Packet.h"

#include "engine/service/ServiceClient.h"

#include "engine/core/ManagedObject.h"

#include "engine/sched/ScheduleManager.h"

#include "system/lang/Exception.h"

#include "system/util/Vector.h"

namespace server {
namespace zone {

class ZoneServer : public ManagedObject {
public:
	ZoneServer(int processingThreads, int galaxyid);

	ServiceClient* createConnection(Socket* sock, SocketAddress& addr);

	void init();

	void run();

	void shutdown();

	void startManagers();

	void stopManagers();

	void start(int p, int mconn);

	void stop();

	void handleMessage(ServiceClient* client, Packet* message);

	bool handleError(ServiceClient* client, Exception& e);

	void addTotalSentPacket(int count);

	void addTotalResentPacket(int count);

	void printInfo(bool forcedLog);

	void printEvents();

	void lock();

	void unlock();

	void lock(bool doLock);

	void unlock(bool doLock);

	void fixScheduler();

	void changeUserCap(int amount);

	int getConnectionCount();

	void increaseTotalDeletedPlayers();

	int getGalaxyID();

	String getServerName();

	bool isServerLocked();

	bool isServerOnline();

	bool isServerOffline();

	bool isServerLoading();

	int getServerState();

	Zone* getZone(int index);

	int getMaxPlayers();

	int getTotalPlayers();

	int getDeletedPlayers();

	unsigned long long getNextCreatureID(bool doLock);

	unsigned long long getNextID(bool doLock);

	unsigned long long getNextCellID(bool doLock);

	void setServerName(const String& servername);

	void setGalaxyID(int galaxyid);

	void setServerState(int state);

	void setServerStateLocked();

	void setServerStateOnline();

	void loadMessageoftheDay();

	void changeMessageoftheDay(const String& newMOTD);

	String getMessageoftheDay();

protected:
	ZoneServer(DummyConstructorParameter* param);

	virtual ~ZoneServer();

	String _return_getMessageoftheDay;
	String _return_getServerName;

	friend class ZoneServerHelper;
};

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {

class ZoneServerImplementation : public ManagedObjectImplementation, public DatagramServiceThread {
	BasePacketHandler* phandler;

	ZoneProcessServerImplementation* processor;

	int procThreadCount;

	Vector<Zone* >* zones;

	ObjectManager* objectManager;

	int totalSentPackets;

	int totalResentPackets;

	int currentPlayers;

	int maximumPlayers;

	int totalPlayers;

	int totalDeletedPlayers;

	unsigned long long nextCreatureID;

	unsigned long long nextCellID;

	int serverState;

	String name;

	String messageoftheDay;

	int galaxyID;

public:
	static const int OFFLINE = 0x0;

	static const int LOADING = 0x1;

	static const int ONLINE = 0x2;

	static const int LOCKED = 0x3;

	ZoneServerImplementation(int processingThreads, int galaxyid);

	ServiceClient* createConnection(Socket* sock, SocketAddress& addr);

	void init();

	void run();

	void shutdown();

	void startManagers();

	void stopManagers();

	void start(int p, int mconn);

	void stop();

	void handleMessage(ServiceClient* client, Packet* message);

	bool handleError(ServiceClient* client, Exception& e);

	void addTotalSentPacket(int count);

	void addTotalResentPacket(int count);

	void printInfo(bool forcedLog);

	void printEvents();

	void lock();

	void unlock();

	void lock(bool doLock);

	void unlock(bool doLock);

	void fixScheduler();

	void changeUserCap(int amount);

	int getConnectionCount();

	void increaseTotalDeletedPlayers();

	int getGalaxyID();

	String getServerName();

	bool isServerLocked();

	bool isServerOnline();

	bool isServerOffline();

	bool isServerLoading();

	int getServerState();

	Zone* getZone(int index);

	int getMaxPlayers();

	int getTotalPlayers();

	int getDeletedPlayers();

	unsigned long long getNextCreatureID(bool doLock);

	unsigned long long getNextID(bool doLock);

	unsigned long long getNextCellID(bool doLock);

	void setServerName(const String& servername);

	void setGalaxyID(int galaxyid);

	void setServerState(int state);

	void setServerStateLocked();

	void setServerStateOnline();

	void loadMessageoftheDay();

	void changeMessageoftheDay(const String& newMOTD);

	String getMessageoftheDay();

	ZoneServer* _this;

protected:
	virtual ~ZoneServerImplementation();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

	friend class ZoneServer;
};

class ZoneServerAdapter : public ManagedObjectAdapter {
public:
	ZoneServerAdapter(ZoneServerImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void init();

	void run();

	void shutdown();

	void startManagers();

	void stopManagers();

	void start(int p, int mconn);

	void stop();

	void addTotalSentPacket(int count);

	void addTotalResentPacket(int count);

	void printInfo(bool forcedLog);

	void printEvents();

	void lock();

	void unlock();

	void lock(bool doLock);

	void unlock(bool doLock);

	void fixScheduler();

	void changeUserCap(int amount);

	int getConnectionCount();

	void increaseTotalDeletedPlayers();

	int getGalaxyID();

	String getServerName();

	bool isServerLocked();

	bool isServerOnline();

	bool isServerOffline();

	bool isServerLoading();

	int getServerState();

	Zone* getZone(int index);

	int getMaxPlayers();

	int getTotalPlayers();

	int getDeletedPlayers();

	unsigned long long getNextCreatureID(bool doLock);

	unsigned long long getNextID(bool doLock);

	unsigned long long getNextCellID(bool doLock);

	void setServerName(const String& servername);

	void setGalaxyID(int galaxyid);

	void setServerState(int state);

	void setServerStateLocked();

	void setServerStateOnline();

	void loadMessageoftheDay();

	void changeMessageoftheDay(const String& newMOTD);

	String getMessageoftheDay();

protected:
	String _param0_setServerName__String_;
	String _param0_changeMessageoftheDay__String_;
};

class ZoneServerHelper : public DistributedObjectClassHelper, public Singleton<ZoneServerHelper> {
	static ZoneServerHelper* staticInitializer;

public:
	ZoneServerHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<ZoneServerHelper>;
};

} // namespace zone
} // namespace server

using namespace server::zone;

#endif /*ZONESERVER_H_*/
