/*
 *	server/zone/managers/guild/GuildManager.cpp generated by engine3 IDL compiler 0.55
 */

#include "GuildManager.h"

#include "GuildManagerImplementation.h"

#include "../../objects/guild/Guild.h"

#include "../../objects/player/Player.h"

#include "server/zone/ZoneServer.h"

#include "GuildMap.h"

/*
 *	GuildManagerStub
 */

GuildManager::GuildManager(ZoneServer* server) {
	_impl = new GuildManagerImplementation(server);
	_impl->_setStub(this);
}

GuildManager::GuildManager(DummyConstructorParameter* param) {
	_impl = NULL;
}

GuildManager::~GuildManager() {
}

void GuildManager::lock(bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		((GuildManagerImplementation*) _impl)->lock(doLock);
}

void GuildManager::unlock(bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		((GuildManagerImplementation*) _impl)->unlock(doLock);
}

void GuildManager::load() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		method.executeWithVoidReturn();
	} else
		((GuildManagerImplementation*) _impl)->load();
}

bool GuildManager::createGuild(Player* player, String& tag, String& name) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(player);
		method.addAsciiParameter(tag);
		method.addAsciiParameter(name);

		return method.executeWithBooleanReturn();
	} else
		return ((GuildManagerImplementation*) _impl)->createGuild(player, tag, name);
}

Guild* GuildManager::getGuild(String& tag, bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addAsciiParameter(tag);
		method.addBooleanParameter(doLock);

		return (Guild*) method.executeWithObjectReturn();
	} else
		return ((GuildManagerImplementation*) _impl)->getGuild(tag, doLock);
}

Guild* GuildManager::getGuild(unsigned int gid, bool doLock) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addUnsignedIntParameter(gid);
		method.addBooleanParameter(doLock);

		return (Guild*) method.executeWithObjectReturn();
	} else
		return ((GuildManagerImplementation*) _impl)->getGuild(gid, doLock);
}

GuildMap* GuildManager::getGuildMap() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		return (GuildMap*) method.executeWithObjectReturn();
	} else
		return ((GuildManagerImplementation*) _impl)->getGuildMap();
}

void GuildManager::handleGuildTag(unsigned int boxID, Player* player, unsigned int cancel, String& returnString) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addUnsignedIntParameter(boxID);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(cancel);
		method.addAsciiParameter(returnString);

		method.executeWithVoidReturn();
	} else
		((GuildManagerImplementation*) _impl)->handleGuildTag(boxID, player, cancel, returnString);
}

void GuildManager::handleGuildName(unsigned int boxID, Player* player, unsigned int cancel, String& returnString) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addUnsignedIntParameter(boxID);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(cancel);
		method.addAsciiParameter(returnString);

		method.executeWithVoidReturn();
	} else
		((GuildManagerImplementation*) _impl)->handleGuildName(boxID, player, cancel, returnString);
}

void GuildManager::handleGuildSponsor(unsigned int boxID, Player* player, unsigned int cancel, String& returnString) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addUnsignedIntParameter(boxID);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(cancel);
		method.addAsciiParameter(returnString);

		method.executeWithVoidReturn();
	} else
		((GuildManagerImplementation*) _impl)->handleGuildSponsor(boxID, player, cancel, returnString);
}

void GuildManager::handleVerifyBoxSponsorTargetforGuildMembership(unsigned int boxID, Player* otherPlayer, unsigned int cancel) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addUnsignedIntParameter(boxID);
		method.addObjectParameter(otherPlayer);
		method.addUnsignedIntParameter(cancel);

		method.executeWithVoidReturn();
	} else
		((GuildManagerImplementation*) _impl)->handleVerifyBoxSponsorTargetforGuildMembership(boxID, otherPlayer, cancel);
}

void GuildManager::handleSponsoredGuildMembersBox(unsigned int boxID, Player* player, unsigned int cancel, int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addUnsignedIntParameter(boxID);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(cancel);
		method.addSignedIntParameter(index);

		method.executeWithVoidReturn();
	} else
		((GuildManagerImplementation*) _impl)->handleSponsoredGuildMembersBox(boxID, player, cancel, index);
}

void GuildManager::handleSponsoredGuildMembersAcceptBox(unsigned int boxID, Player* player, unsigned int cancel, int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addUnsignedIntParameter(boxID);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(cancel);
		method.addSignedIntParameter(index);

		method.executeWithVoidReturn();
	} else
		((GuildManagerImplementation*) _impl)->handleSponsoredGuildMembersAcceptBox(boxID, player, cancel, index);
}

void GuildManager::removeOnlineFromGuild(Player* player, Player* removePlayer) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addObjectParameter(player);
		method.addObjectParameter(removePlayer);

		method.executeWithVoidReturn();
	} else
		((GuildManagerImplementation*) _impl)->removeOnlineFromGuild(player, removePlayer);
}

void GuildManager::execRemoveFromGuild(unsigned int boxID, Player* player, unsigned int cancel) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addUnsignedIntParameter(boxID);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(cancel);

		method.executeWithVoidReturn();
	} else
		((GuildManagerImplementation*) _impl)->execRemoveFromGuild(boxID, player, cancel);
}

void GuildManager::handleGuildDisbandBox(unsigned int boxID, Player* player, unsigned int cancel, String& returnString) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addUnsignedIntParameter(boxID);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(cancel);
		method.addAsciiParameter(returnString);

		method.executeWithVoidReturn();
	} else
		((GuildManagerImplementation*) _impl)->handleGuildDisbandBox(boxID, player, cancel, returnString);
}

void GuildManager::handleGuildNameChange(unsigned int boxID, Player* player, unsigned int cancel, String& returnString) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);
		method.addUnsignedIntParameter(boxID);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(cancel);
		method.addAsciiParameter(returnString);

		method.executeWithVoidReturn();
	} else
		((GuildManagerImplementation*) _impl)->handleGuildNameChange(boxID, player, cancel, returnString);
}

void GuildManager::handleGuildNameChangeName(unsigned int boxID, Player* player, unsigned int cancel, String& returnString) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);
		method.addUnsignedIntParameter(boxID);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(cancel);
		method.addAsciiParameter(returnString);

		method.executeWithVoidReturn();
	} else
		((GuildManagerImplementation*) _impl)->handleGuildNameChangeName(boxID, player, cancel, returnString);
}

void GuildManager::handleGuildInformationMembers(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((GuildManagerImplementation*) _impl)->handleGuildInformationMembers(player);
}

void GuildManager::handleGuildInformationMembersBox(unsigned int boxID, Player* player, unsigned int cancel, int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);
		method.addUnsignedIntParameter(boxID);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(cancel);
		method.addSignedIntParameter(index);

		method.executeWithVoidReturn();
	} else
		((GuildManagerImplementation*) _impl)->handleGuildInformationMembersBox(boxID, player, cancel, index);
}

void GuildManager::handleGuildMemberOptions(unsigned int boxID, Player* player, unsigned int cancel, int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);
		method.addUnsignedIntParameter(boxID);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(cancel);
		method.addSignedIntParameter(index);

		method.executeWithVoidReturn();
	} else
		((GuildManagerImplementation*) _impl)->handleGuildMemberOptions(boxID, player, cancel, index);
}

void GuildManager::handleGuildPermissionSelection(unsigned int boxID, Player* player, unsigned int cancel, int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);
		method.addUnsignedIntParameter(boxID);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(cancel);
		method.addSignedIntParameter(index);

		method.executeWithVoidReturn();
	} else
		((GuildManagerImplementation*) _impl)->handleGuildPermissionSelection(boxID, player, cancel, index);
}

void GuildManager::handleGuildInfo(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((GuildManagerImplementation*) _impl)->handleGuildInfo(player);
}

void GuildManager::handleGuildSponsoring(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((GuildManagerImplementation*) _impl)->handleGuildSponsoring(player);
}

void GuildManager::handleGuildRenaming(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((GuildManagerImplementation*) _impl)->handleGuildRenaming(player);
}

void GuildManager::handleGuildTransferLeader(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((GuildManagerImplementation*) _impl)->handleGuildTransferLeader(player);
}

void GuildManager::handleGuildTransferLeaderBox(unsigned int boxID, Player* player, unsigned int cancel, String& returnString) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);
		method.addUnsignedIntParameter(boxID);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(cancel);
		method.addAsciiParameter(returnString);

		method.executeWithVoidReturn();
	} else
		((GuildManagerImplementation*) _impl)->handleGuildTransferLeaderBox(boxID, player, cancel, returnString);
}

void GuildManager::handleGuildTransferLeaderVerifyBox(unsigned int boxID, Player* player, unsigned int cancel) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);
		method.addUnsignedIntParameter(boxID);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(cancel);

		method.executeWithVoidReturn();
	} else
		((GuildManagerImplementation*) _impl)->handleGuildTransferLeaderVerifyBox(boxID, player, cancel);
}

void GuildManager::sendGuildMail(Player* player, const String& sender, const String& subject, const String& body, bool excludeSender) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);
		method.addObjectParameter(player);
		method.addAsciiParameter(sender);
		method.addAsciiParameter(subject);
		method.addAsciiParameter(body);
		method.addBooleanParameter(excludeSender);

		method.executeWithVoidReturn();
	} else
		((GuildManagerImplementation*) _impl)->sendGuildMail(player, sender, subject, body, excludeSender);
}

/*
 *	GuildManagerAdapter
 */

GuildManagerAdapter::GuildManagerAdapter(GuildManagerImplementation* obj) : DistributedObjectAdapter((DistributedObjectServant*) obj) {
}

Packet* GuildManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		lock(inv->getBooleanParameter());
		break;
	case 7:
		unlock(inv->getBooleanParameter());
		break;
	case 8:
		load();
		break;
	case 9:
		resp->insertBoolean(createGuild((Player*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_createGuild__Player_String_String_), inv->getAsciiParameter(_param2_createGuild__Player_String_String_)));
		break;
	case 10:
		resp->insertLong(getGuild(inv->getAsciiParameter(_param0_getGuild__String_bool_), inv->getBooleanParameter())->_getObjectID());
		break;
	case 11:
		resp->insertLong(getGuild(inv->getUnsignedIntParameter(), inv->getBooleanParameter())->_getObjectID());
		break;
	case 12:
		resp->insertLong(getGuildMap()->_getObjectID());
		break;
	case 13:
		handleGuildTag(inv->getUnsignedIntParameter(), (Player*) inv->getObjectParameter(), inv->getUnsignedIntParameter(), inv->getAsciiParameter(_param3_handleGuildTag__int_Player_int_String_));
		break;
	case 14:
		handleGuildName(inv->getUnsignedIntParameter(), (Player*) inv->getObjectParameter(), inv->getUnsignedIntParameter(), inv->getAsciiParameter(_param3_handleGuildName__int_Player_int_String_));
		break;
	case 15:
		handleGuildSponsor(inv->getUnsignedIntParameter(), (Player*) inv->getObjectParameter(), inv->getUnsignedIntParameter(), inv->getAsciiParameter(_param3_handleGuildSponsor__int_Player_int_String_));
		break;
	case 16:
		handleVerifyBoxSponsorTargetforGuildMembership(inv->getUnsignedIntParameter(), (Player*) inv->getObjectParameter(), inv->getUnsignedIntParameter());
		break;
	case 17:
		handleSponsoredGuildMembersBox(inv->getUnsignedIntParameter(), (Player*) inv->getObjectParameter(), inv->getUnsignedIntParameter(), inv->getSignedIntParameter());
		break;
	case 18:
		handleSponsoredGuildMembersAcceptBox(inv->getUnsignedIntParameter(), (Player*) inv->getObjectParameter(), inv->getUnsignedIntParameter(), inv->getSignedIntParameter());
		break;
	case 19:
		removeOnlineFromGuild((Player*) inv->getObjectParameter(), (Player*) inv->getObjectParameter());
		break;
	case 20:
		execRemoveFromGuild(inv->getUnsignedIntParameter(), (Player*) inv->getObjectParameter(), inv->getUnsignedIntParameter());
		break;
	case 21:
		handleGuildDisbandBox(inv->getUnsignedIntParameter(), (Player*) inv->getObjectParameter(), inv->getUnsignedIntParameter(), inv->getAsciiParameter(_param3_handleGuildDisbandBox__int_Player_int_String_));
		break;
	case 22:
		handleGuildNameChange(inv->getUnsignedIntParameter(), (Player*) inv->getObjectParameter(), inv->getUnsignedIntParameter(), inv->getAsciiParameter(_param3_handleGuildNameChange__int_Player_int_String_));
		break;
	case 23:
		handleGuildNameChangeName(inv->getUnsignedIntParameter(), (Player*) inv->getObjectParameter(), inv->getUnsignedIntParameter(), inv->getAsciiParameter(_param3_handleGuildNameChangeName__int_Player_int_String_));
		break;
	case 24:
		handleGuildInformationMembers((Player*) inv->getObjectParameter());
		break;
	case 25:
		handleGuildInformationMembersBox(inv->getUnsignedIntParameter(), (Player*) inv->getObjectParameter(), inv->getUnsignedIntParameter(), inv->getSignedIntParameter());
		break;
	case 26:
		handleGuildMemberOptions(inv->getUnsignedIntParameter(), (Player*) inv->getObjectParameter(), inv->getUnsignedIntParameter(), inv->getSignedIntParameter());
		break;
	case 27:
		handleGuildPermissionSelection(inv->getUnsignedIntParameter(), (Player*) inv->getObjectParameter(), inv->getUnsignedIntParameter(), inv->getSignedIntParameter());
		break;
	case 28:
		handleGuildInfo((Player*) inv->getObjectParameter());
		break;
	case 29:
		handleGuildSponsoring((Player*) inv->getObjectParameter());
		break;
	case 30:
		handleGuildRenaming((Player*) inv->getObjectParameter());
		break;
	case 31:
		handleGuildTransferLeader((Player*) inv->getObjectParameter());
		break;
	case 32:
		handleGuildTransferLeaderBox(inv->getUnsignedIntParameter(), (Player*) inv->getObjectParameter(), inv->getUnsignedIntParameter(), inv->getAsciiParameter(_param3_handleGuildTransferLeaderBox__int_Player_int_String_));
		break;
	case 33:
		handleGuildTransferLeaderVerifyBox(inv->getUnsignedIntParameter(), (Player*) inv->getObjectParameter(), inv->getUnsignedIntParameter());
		break;
	case 34:
		sendGuildMail((Player*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_sendGuildMail__Player_String_String_String_bool_), inv->getAsciiParameter(_param2_sendGuildMail__Player_String_String_String_bool_), inv->getAsciiParameter(_param3_sendGuildMail__Player_String_String_String_bool_), inv->getBooleanParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void GuildManagerAdapter::lock(bool doLock) {
	return ((GuildManagerImplementation*) impl)->lock(doLock);
}

void GuildManagerAdapter::unlock(bool doLock) {
	return ((GuildManagerImplementation*) impl)->unlock(doLock);
}

void GuildManagerAdapter::load() {
	return ((GuildManagerImplementation*) impl)->load();
}

bool GuildManagerAdapter::createGuild(Player* player, String& tag, String& name) {
	return ((GuildManagerImplementation*) impl)->createGuild(player, tag, name);
}

Guild* GuildManagerAdapter::getGuild(String& tag, bool doLock) {
	return ((GuildManagerImplementation*) impl)->getGuild(tag, doLock);
}

Guild* GuildManagerAdapter::getGuild(unsigned int gid, bool doLock) {
	return ((GuildManagerImplementation*) impl)->getGuild(gid, doLock);
}

GuildMap* GuildManagerAdapter::getGuildMap() {
	return ((GuildManagerImplementation*) impl)->getGuildMap();
}

void GuildManagerAdapter::handleGuildTag(unsigned int boxID, Player* player, unsigned int cancel, String& returnString) {
	return ((GuildManagerImplementation*) impl)->handleGuildTag(boxID, player, cancel, returnString);
}

void GuildManagerAdapter::handleGuildName(unsigned int boxID, Player* player, unsigned int cancel, String& returnString) {
	return ((GuildManagerImplementation*) impl)->handleGuildName(boxID, player, cancel, returnString);
}

void GuildManagerAdapter::handleGuildSponsor(unsigned int boxID, Player* player, unsigned int cancel, String& returnString) {
	return ((GuildManagerImplementation*) impl)->handleGuildSponsor(boxID, player, cancel, returnString);
}

void GuildManagerAdapter::handleVerifyBoxSponsorTargetforGuildMembership(unsigned int boxID, Player* otherPlayer, unsigned int cancel) {
	return ((GuildManagerImplementation*) impl)->handleVerifyBoxSponsorTargetforGuildMembership(boxID, otherPlayer, cancel);
}

void GuildManagerAdapter::handleSponsoredGuildMembersBox(unsigned int boxID, Player* player, unsigned int cancel, int index) {
	return ((GuildManagerImplementation*) impl)->handleSponsoredGuildMembersBox(boxID, player, cancel, index);
}

void GuildManagerAdapter::handleSponsoredGuildMembersAcceptBox(unsigned int boxID, Player* player, unsigned int cancel, int index) {
	return ((GuildManagerImplementation*) impl)->handleSponsoredGuildMembersAcceptBox(boxID, player, cancel, index);
}

void GuildManagerAdapter::removeOnlineFromGuild(Player* player, Player* removePlayer) {
	return ((GuildManagerImplementation*) impl)->removeOnlineFromGuild(player, removePlayer);
}

void GuildManagerAdapter::execRemoveFromGuild(unsigned int boxID, Player* player, unsigned int cancel) {
	return ((GuildManagerImplementation*) impl)->execRemoveFromGuild(boxID, player, cancel);
}

void GuildManagerAdapter::handleGuildDisbandBox(unsigned int boxID, Player* player, unsigned int cancel, String& returnString) {
	return ((GuildManagerImplementation*) impl)->handleGuildDisbandBox(boxID, player, cancel, returnString);
}

void GuildManagerAdapter::handleGuildNameChange(unsigned int boxID, Player* player, unsigned int cancel, String& returnString) {
	return ((GuildManagerImplementation*) impl)->handleGuildNameChange(boxID, player, cancel, returnString);
}

void GuildManagerAdapter::handleGuildNameChangeName(unsigned int boxID, Player* player, unsigned int cancel, String& returnString) {
	return ((GuildManagerImplementation*) impl)->handleGuildNameChangeName(boxID, player, cancel, returnString);
}

void GuildManagerAdapter::handleGuildInformationMembers(Player* player) {
	return ((GuildManagerImplementation*) impl)->handleGuildInformationMembers(player);
}

void GuildManagerAdapter::handleGuildInformationMembersBox(unsigned int boxID, Player* player, unsigned int cancel, int index) {
	return ((GuildManagerImplementation*) impl)->handleGuildInformationMembersBox(boxID, player, cancel, index);
}

void GuildManagerAdapter::handleGuildMemberOptions(unsigned int boxID, Player* player, unsigned int cancel, int index) {
	return ((GuildManagerImplementation*) impl)->handleGuildMemberOptions(boxID, player, cancel, index);
}

void GuildManagerAdapter::handleGuildPermissionSelection(unsigned int boxID, Player* player, unsigned int cancel, int index) {
	return ((GuildManagerImplementation*) impl)->handleGuildPermissionSelection(boxID, player, cancel, index);
}

void GuildManagerAdapter::handleGuildInfo(Player* player) {
	return ((GuildManagerImplementation*) impl)->handleGuildInfo(player);
}

void GuildManagerAdapter::handleGuildSponsoring(Player* player) {
	return ((GuildManagerImplementation*) impl)->handleGuildSponsoring(player);
}

void GuildManagerAdapter::handleGuildRenaming(Player* player) {
	return ((GuildManagerImplementation*) impl)->handleGuildRenaming(player);
}

void GuildManagerAdapter::handleGuildTransferLeader(Player* player) {
	return ((GuildManagerImplementation*) impl)->handleGuildTransferLeader(player);
}

void GuildManagerAdapter::handleGuildTransferLeaderBox(unsigned int boxID, Player* player, unsigned int cancel, String& returnString) {
	return ((GuildManagerImplementation*) impl)->handleGuildTransferLeaderBox(boxID, player, cancel, returnString);
}

void GuildManagerAdapter::handleGuildTransferLeaderVerifyBox(unsigned int boxID, Player* player, unsigned int cancel) {
	return ((GuildManagerImplementation*) impl)->handleGuildTransferLeaderVerifyBox(boxID, player, cancel);
}

void GuildManagerAdapter::sendGuildMail(Player* player, const String& sender, const String& subject, const String& body, bool excludeSender) {
	return ((GuildManagerImplementation*) impl)->sendGuildMail(player, sender, subject, body, excludeSender);
}

/*
 *	GuildManagerHelper
 */

GuildManagerHelper* GuildManagerHelper::staticInitializer = GuildManagerHelper::instance();

GuildManagerHelper::GuildManagerHelper() {
	className = "GuildManager";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void GuildManagerHelper::finalizeHelper() {
	GuildManagerHelper::finalize();
}

DistributedObject* GuildManagerHelper::instantiateObject() {
	return new GuildManager(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* GuildManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new GuildManagerAdapter((GuildManagerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	GuildManagerServant
 */

GuildManagerServant::GuildManagerServant() {
	_classHelper = GuildManagerHelper::instance();
}

GuildManagerServant::~GuildManagerServant() {
}

void GuildManagerServant::_setStub(DistributedObjectStub* stub) {
	_this = (GuildManager*) stub;
}

DistributedObjectStub* GuildManagerServant::_getStub() {
	return _this;
}

