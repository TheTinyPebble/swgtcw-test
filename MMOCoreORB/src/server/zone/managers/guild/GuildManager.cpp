/*
 *	server/zone/managers/guild/GuildManager.cpp generated by engine3 IDL compiler 0.60
 */

#include "GuildManager.h"

#include "server/zone/ZoneProcessServer.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/objects/guild/GuildObject.h"

#include "server/zone/objects/tangible/terminal/guild/GuildTerminal.h"

#include "server/zone/objects/player/PlayerCreature.h"

/*
 *	GuildManagerStub
 */

GuildManager::GuildManager(ZoneServer* serv, ZoneProcessServer* proc) : ManagedService(DummyConstructorParameter::instance()) {
	GuildManagerImplementation* _implementation = new GuildManagerImplementation(serv, proc);
	_impl = _implementation;
	_impl->_setStub(this);
}

GuildManager::GuildManager(DummyConstructorParameter* param) : ManagedService(param) {
}

GuildManager::~GuildManager() {
}


void GuildManager::addPendingGuild(unsigned long long playerID, const String& guildName) {
	GuildManagerImplementation* _implementation = (GuildManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addUnsignedLongParameter(playerID);
		method.addAsciiParameter(guildName);

		method.executeWithVoidReturn();
	} else
		_implementation->addPendingGuild(playerID, guildName);
}

void GuildManager::removePendingGuild(unsigned long long playerID) {
	GuildManagerImplementation* _implementation = (GuildManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addUnsignedLongParameter(playerID);

		method.executeWithVoidReturn();
	} else
		_implementation->removePendingGuild(playerID);
}

String GuildManager::getPendingGuildName(unsigned long long playerID) {
	GuildManagerImplementation* _implementation = (GuildManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addUnsignedLongParameter(playerID);

		method.executeWithAsciiReturn(_return_getPendingGuildName);
		return _return_getPendingGuildName;
	} else
		return _implementation->getPendingGuildName(playerID);
}

bool GuildManager::isCreatingGuild(unsigned long long playerID) {
	GuildManagerImplementation* _implementation = (GuildManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isCreatingGuild(playerID);
}

void GuildManager::sendBaselinesTo(PlayerCreature* player) {
	GuildManagerImplementation* _implementation = (GuildManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendBaselinesTo(player);
}

void GuildManager::loadGuilds() {
	GuildManagerImplementation* _implementation = (GuildManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		method.executeWithVoidReturn();
	} else
		_implementation->loadGuilds();
}

void GuildManager::sendGuildCreateNameTo(PlayerCreature* player, GuildTerminal* guildTerminal) {
	GuildManagerImplementation* _implementation = (GuildManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addObjectParameter(player);
		method.addObjectParameter(guildTerminal);

		method.executeWithVoidReturn();
	} else
		_implementation->sendGuildCreateNameTo(player, guildTerminal);
}

void GuildManager::sendGuildCreateAbbrevTo(PlayerCreature* player, GuildTerminal* guildTerminal) {
	GuildManagerImplementation* _implementation = (GuildManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addObjectParameter(player);
		method.addObjectParameter(guildTerminal);

		method.executeWithVoidReturn();
	} else
		_implementation->sendGuildCreateAbbrevTo(player, guildTerminal);
}

void GuildManager::sendGuildInformationTo(PlayerCreature* player, GuildTerminal* guildTerminal) {
	GuildManagerImplementation* _implementation = (GuildManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addObjectParameter(player);
		method.addObjectParameter(guildTerminal);

		method.executeWithVoidReturn();
	} else
		_implementation->sendGuildInformationTo(player, guildTerminal);
}

bool GuildManager::validateGuildName(PlayerCreature* player, const String& guildName) {
	GuildManagerImplementation* _implementation = (GuildManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addObjectParameter(player);
		method.addAsciiParameter(guildName);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->validateGuildName(player, guildName);
}

bool GuildManager::validateGuildAbbrev(PlayerCreature* player, const String& guildAbbrev) {
	GuildManagerImplementation* _implementation = (GuildManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addObjectParameter(player);
		method.addAsciiParameter(guildAbbrev);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->validateGuildAbbrev(player, guildAbbrev);
}

GuildObject* GuildManager::createGuild(PlayerCreature* player, GuildTerminal* guildTerminal, const String& guildName, const String& guildAbbrev) {
	GuildManagerImplementation* _implementation = (GuildManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addObjectParameter(player);
		method.addObjectParameter(guildTerminal);
		method.addAsciiParameter(guildName);
		method.addAsciiParameter(guildAbbrev);

		return (GuildObject*) method.executeWithObjectReturn();
	} else
		return _implementation->createGuild(player, guildTerminal, guildName, guildAbbrev);
}

void GuildManager::acceptMember(PlayerCreature* player, unsigned long long targetID) {
	GuildManagerImplementation* _implementation = (GuildManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addObjectParameter(player);
		method.addUnsignedLongParameter(targetID);

		method.executeWithVoidReturn();
	} else
		_implementation->acceptMember(player, targetID);
}

void GuildManager::kickMember(PlayerCreature* player, unsigned long long targetID) {
	GuildManagerImplementation* _implementation = (GuildManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addObjectParameter(player);
		method.addUnsignedLongParameter(targetID);

		method.executeWithVoidReturn();
	} else
		_implementation->kickMember(player, targetID);
}

void GuildManager::setGuildMemberTitle(PlayerCreature* player, unsigned long long targetID) {
	GuildManagerImplementation* _implementation = (GuildManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addObjectParameter(player);
		method.addUnsignedLongParameter(targetID);

		method.executeWithVoidReturn();
	} else
		_implementation->setGuildMemberTitle(player, targetID);
}

void GuildManager::setAllegianceTo(PlayerCreature* player, unsigned long long targetID) {
	GuildManagerImplementation* _implementation = (GuildManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addObjectParameter(player);
		method.addUnsignedLongParameter(targetID);

		method.executeWithVoidReturn();
	} else
		_implementation->setAllegianceTo(player, targetID);
}

DistributedObjectServant* GuildManager::_getImplementation() {
	return _impl;}

void GuildManager::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;}

/*
 *	GuildManagerImplementation
 */

GuildManagerImplementation::GuildManagerImplementation(DummyConstructorParameter* param) : ManagedServiceImplementation(param) {
	_initializeImplementation();
}


GuildManagerImplementation::~GuildManagerImplementation() {
}


void GuildManagerImplementation::finalize() {
}

void GuildManagerImplementation::_initializeImplementation() {
	_setClassHelper(GuildManagerHelper::instance());

	_serializationHelperMethod();
}

void GuildManagerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (GuildManager*) stub;
	ManagedServiceImplementation::_setStub(stub);
}

DistributedObjectStub* GuildManagerImplementation::_getStub() {
	return _this;
}

GuildManagerImplementation::operator const GuildManager*() {
	return _this;
}

void GuildManagerImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void GuildManagerImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void GuildManagerImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void GuildManagerImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void GuildManagerImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void GuildManagerImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void GuildManagerImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void GuildManagerImplementation::_serializationHelperMethod() {
	ManagedServiceImplementation::_serializationHelperMethod();

	_setClassName("GuildManager");

	addSerializableVariable("guildList", &guildList);
	addSerializableVariable("requiredMembers", &requiredMembers);
	addSerializableVariable("maximumMembers", &maximumMembers);
	addSerializableVariable("guildUpdateInterval", &guildUpdateInterval);
}

GuildManagerImplementation::GuildManagerImplementation(ZoneServer* serv, ZoneProcessServer* proc) {
	_initializeImplementation();
	// server/zone/managers/guild/GuildManager.idl(73):  		Logger.setLoggingName("GuildManager");
	Logger::setLoggingName("GuildManager");
	// server/zone/managers/guild/GuildManager.idl(74):  		Logger.setLogging(true);
	Logger::setLogging(true);
	// server/zone/managers/guild/GuildManager.idl(75):  		Logger.setGlobalLogging(true);
	Logger::setGlobalLogging(true);
	// server/zone/managers/guild/GuildManager.idl(77):  		pendingGuilds.setNoDuplicateInsertPlan();
	(&pendingGuilds)->setNoDuplicateInsertPlan();
	// server/zone/managers/guild/GuildManager.idl(79):  		server = serv;
	server = serv;
	// server/zone/managers/guild/GuildManager.idl(80):  		processor = proc;
	processor = proc;
}

void GuildManagerImplementation::addPendingGuild(unsigned long long playerID, const String& guildName) {
	// server/zone/managers/guild/GuildManager.idl(84):  		pendingGuilds.put(playerID, guildName);
	(&pendingGuilds)->put(playerID, guildName);
}

void GuildManagerImplementation::removePendingGuild(unsigned long long playerID) {
	// server/zone/managers/guild/GuildManager.idl(88):  		pendingGuilds.drop(playerID);
	(&pendingGuilds)->drop(playerID);
}

String GuildManagerImplementation::getPendingGuildName(unsigned long long playerID) {
	// server/zone/managers/guild/GuildManager.idl(92):  		return pendingGuilds.get(playerID);
	return (&pendingGuilds)->get(playerID);
}

bool GuildManagerImplementation::isCreatingGuild(unsigned long long playerID) {
	// server/zone/managers/guild/GuildManager.idl(96):  		return pendingGuilds.contains(playerID);
	return (&pendingGuilds)->contains(playerID);
}

/*
 *	GuildManagerAdapter
 */

GuildManagerAdapter::GuildManagerAdapter(GuildManagerImplementation* obj) : ManagedServiceAdapter(obj) {
}

Packet* GuildManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		addPendingGuild(inv->getUnsignedLongParameter(), inv->getAsciiParameter(_param1_addPendingGuild__long_String_));
		break;
	case 7:
		removePendingGuild(inv->getUnsignedLongParameter());
		break;
	case 8:
		resp->insertAscii(getPendingGuildName(inv->getUnsignedLongParameter()));
		break;
	case 9:
		resp->insertBoolean(isCreatingGuild(inv->getUnsignedLongParameter()));
		break;
	case 10:
		sendBaselinesTo((PlayerCreature*) inv->getObjectParameter());
		break;
	case 11:
		loadGuilds();
		break;
	case 12:
		sendGuildCreateNameTo((PlayerCreature*) inv->getObjectParameter(), (GuildTerminal*) inv->getObjectParameter());
		break;
	case 13:
		sendGuildCreateAbbrevTo((PlayerCreature*) inv->getObjectParameter(), (GuildTerminal*) inv->getObjectParameter());
		break;
	case 14:
		sendGuildInformationTo((PlayerCreature*) inv->getObjectParameter(), (GuildTerminal*) inv->getObjectParameter());
		break;
	case 15:
		resp->insertBoolean(validateGuildName((PlayerCreature*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_validateGuildName__PlayerCreature_String_)));
		break;
	case 16:
		resp->insertBoolean(validateGuildAbbrev((PlayerCreature*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_validateGuildAbbrev__PlayerCreature_String_)));
		break;
	case 17:
		resp->insertLong(createGuild((PlayerCreature*) inv->getObjectParameter(), (GuildTerminal*) inv->getObjectParameter(), inv->getAsciiParameter(_param2_createGuild__PlayerCreature_GuildTerminal_String_String_), inv->getAsciiParameter(_param3_createGuild__PlayerCreature_GuildTerminal_String_String_))->_getObjectID());
		break;
	case 18:
		acceptMember((PlayerCreature*) inv->getObjectParameter(), inv->getUnsignedLongParameter());
		break;
	case 19:
		kickMember((PlayerCreature*) inv->getObjectParameter(), inv->getUnsignedLongParameter());
		break;
	case 20:
		setGuildMemberTitle((PlayerCreature*) inv->getObjectParameter(), inv->getUnsignedLongParameter());
		break;
	case 21:
		setAllegianceTo((PlayerCreature*) inv->getObjectParameter(), inv->getUnsignedLongParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void GuildManagerAdapter::addPendingGuild(unsigned long long playerID, const String& guildName) {
	((GuildManagerImplementation*) impl)->addPendingGuild(playerID, guildName);
}

void GuildManagerAdapter::removePendingGuild(unsigned long long playerID) {
	((GuildManagerImplementation*) impl)->removePendingGuild(playerID);
}

String GuildManagerAdapter::getPendingGuildName(unsigned long long playerID) {
	return ((GuildManagerImplementation*) impl)->getPendingGuildName(playerID);
}

bool GuildManagerAdapter::isCreatingGuild(unsigned long long playerID) {
	return ((GuildManagerImplementation*) impl)->isCreatingGuild(playerID);
}

void GuildManagerAdapter::sendBaselinesTo(PlayerCreature* player) {
	((GuildManagerImplementation*) impl)->sendBaselinesTo(player);
}

void GuildManagerAdapter::loadGuilds() {
	((GuildManagerImplementation*) impl)->loadGuilds();
}

void GuildManagerAdapter::sendGuildCreateNameTo(PlayerCreature* player, GuildTerminal* guildTerminal) {
	((GuildManagerImplementation*) impl)->sendGuildCreateNameTo(player, guildTerminal);
}

void GuildManagerAdapter::sendGuildCreateAbbrevTo(PlayerCreature* player, GuildTerminal* guildTerminal) {
	((GuildManagerImplementation*) impl)->sendGuildCreateAbbrevTo(player, guildTerminal);
}

void GuildManagerAdapter::sendGuildInformationTo(PlayerCreature* player, GuildTerminal* guildTerminal) {
	((GuildManagerImplementation*) impl)->sendGuildInformationTo(player, guildTerminal);
}

bool GuildManagerAdapter::validateGuildName(PlayerCreature* player, const String& guildName) {
	return ((GuildManagerImplementation*) impl)->validateGuildName(player, guildName);
}

bool GuildManagerAdapter::validateGuildAbbrev(PlayerCreature* player, const String& guildAbbrev) {
	return ((GuildManagerImplementation*) impl)->validateGuildAbbrev(player, guildAbbrev);
}

GuildObject* GuildManagerAdapter::createGuild(PlayerCreature* player, GuildTerminal* guildTerminal, const String& guildName, const String& guildAbbrev) {
	return ((GuildManagerImplementation*) impl)->createGuild(player, guildTerminal, guildName, guildAbbrev);
}

void GuildManagerAdapter::acceptMember(PlayerCreature* player, unsigned long long targetID) {
	((GuildManagerImplementation*) impl)->acceptMember(player, targetID);
}

void GuildManagerAdapter::kickMember(PlayerCreature* player, unsigned long long targetID) {
	((GuildManagerImplementation*) impl)->kickMember(player, targetID);
}

void GuildManagerAdapter::setGuildMemberTitle(PlayerCreature* player, unsigned long long targetID) {
	((GuildManagerImplementation*) impl)->setGuildMemberTitle(player, targetID);
}

void GuildManagerAdapter::setAllegianceTo(PlayerCreature* player, unsigned long long targetID) {
	((GuildManagerImplementation*) impl)->setAllegianceTo(player, targetID);
}

/*
 *	GuildManagerHelper
 */

GuildManagerHelper* GuildManagerHelper::staticInitializer = GuildManagerHelper::instance();

GuildManagerHelper::GuildManagerHelper() {
	className = "GuildManager";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void GuildManagerHelper::finalizeHelper() {
	GuildManagerHelper::finalize();
}

DistributedObject* GuildManagerHelper::instantiateObject() {
	return new GuildManager(DummyConstructorParameter::instance());
}

DistributedObjectServant* GuildManagerHelper::instantiateServant() {
	return new GuildManagerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* GuildManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new GuildManagerAdapter((GuildManagerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

