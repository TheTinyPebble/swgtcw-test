/*
 *	server/zone/managers/guild/GuildManager.h generated by engine3 IDL compiler 0.60
 */

#ifndef GUILDMANAGER_H_
#define GUILDMANAGER_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {

class ZoneProcessServer;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {

class ZoneServer;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace chat {

class ChatManager;

} // namespace chat
} // namespace server

using namespace server::chat;

namespace server {
namespace chat {
namespace room {

class ChatRoom;

} // namespace room
} // namespace chat
} // namespace server

using namespace server::chat::room;

namespace server {
namespace zone {
namespace objects {
namespace guild {

class GuildObject;

} // namespace guild
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::guild;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace terminal {
namespace guild {

class GuildTerminal;

} // namespace guild
} // namespace terminal
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::terminal::guild;

namespace server {
namespace zone {
namespace objects {
namespace player {

class PlayerCreature;

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

#include "server/zone/managers/guild/GuildList.h"

#include "server/zone/packets/guild/GuildObjectDeltaMessage3.h"

#include "server/zone/objects/scene/variables/DeltaSet.h"

#include "server/chat/StringIdChatParameter.h"

#include "engine/core/ManagedService.h"

namespace server {
namespace zone {
namespace managers {
namespace guild {

class GuildManager : public ManagedService {
public:
	GuildManager(ZoneServer* serv, ZoneProcessServer* proc);

	void setChatManager(ChatManager* chatmanager);

	void sendGuildListTo(PlayerCreature* player, const String& guildFilter);

	void addPendingGuild(unsigned long long playerID, const String& guildName);

	void removePendingGuild(unsigned long long playerID);

	String getPendingGuildName(unsigned long long playerID);

	void addSponsoredPlayer(unsigned long long playerID, GuildObject* guild);

	void removeSponsoredPlayer(unsigned long long playerID);

	bool isCreatingGuild(unsigned long long playerID);

	bool isSponsoredPlayer(unsigned long long playerID);

	GuildObject* getSponsoredGuild(unsigned long long playerID);

	void sendBaselinesTo(PlayerCreature* player);

	void loadGuilds();

	void sendGuildCreateNameTo(PlayerCreature* player, GuildTerminal* guildTerminal);

	void sendGuildCreateAbbrevTo(PlayerCreature* player, GuildTerminal* guildTerminal);

	void sendGuildInformationTo(PlayerCreature* player, GuildObject* guild, GuildTerminal* guildTerminal);

	void sendGuildMemberListTo(PlayerCreature* player, GuildObject* guild, GuildTerminal* guildTerminal);

	void sendGuildMemberOptionsTo(PlayerCreature* player, GuildObject* guild, unsigned long long memberID, GuildTerminal* guildTerminal);

	void sendGuildDisbandConfirmTo(PlayerCreature* player, GuildObject* guild, GuildTerminal* guildTerminal);

	void sendGuildSponsoredListTo(PlayerCreature* player, GuildObject* guild, GuildTerminal* guildTerminal);

	void sendGuildSponsoredOptionsTo(PlayerCreature* player, GuildObject* guild, unsigned long long playerID, GuildTerminal* guildTerminal);

	void sendGuildSponsorTo(PlayerCreature* player, GuildObject* guild, GuildTerminal* guildTerminal);

	void sendGuildSponsorVerifyTo(PlayerCreature* player, PlayerCreature* target);

	void sendGuildKickPromptTo(PlayerCreature* player, PlayerCreature* target);

	void sendGuildSetTitleTo(PlayerCreature* player, PlayerCreature* target);

	void sendMemberPermissionsTo(PlayerCreature* player, unsigned long long targetID, GuildTerminal* guildTerminal);

	bool validateGuildName(PlayerCreature* player, const String& guildName);

	bool validateGuildAbbrev(PlayerCreature* player, const String& guildAbbrev);

	bool guildNameExists(const String& guildName);

	bool guildAbbrevExists(const String& guildAbbrev);

	GuildObject* createGuild(PlayerCreature* player, GuildTerminal* guildTerminal, const String& guildName, const String& guildAbbrev);

	bool disbandGuild(PlayerCreature* player, GuildObject* guild);

	void sponsorPlayer(PlayerCreature* player, GuildTerminal* guildTerminal, const String& playerName);

	void acceptSponsorshipRequest(PlayerCreature* player, PlayerCreature* target);

	void acceptSponsoredPlayer(PlayerCreature* player, unsigned long long targetID);

	void kickMember(PlayerCreature* player, PlayerCreature* target);

	void leaveGuild(PlayerCreature* player, GuildObject* guild);

	void setMemberTitle(PlayerCreature* player, PlayerCreature* target, const String& title);

	void setAllegianceTo(PlayerCreature* player, unsigned long long targetID, GuildTerminal* guildTerminal);

	void toggleGuildPermission(PlayerCreature* player, unsigned long long targetID, int permissionIndex, GuildTerminal* guildTerminal);

	ChatRoom* createGuildChannels(GuildObject* guild);

	void sendGuildMail(const String& subject, StringIdChatParameter& body, GuildObject* guild);

	DistributedObjectServant* _getImplementation();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	GuildManager(DummyConstructorParameter* param);

	virtual ~GuildManager();

	String _return_getPendingGuildName;

	friend class GuildManagerHelper;
};

} // namespace guild
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::guild;

namespace server {
namespace zone {
namespace managers {
namespace guild {

class GuildManagerImplementation : public ManagedServiceImplementation, public Logger {
	ManagedWeakReference<ZoneServer* > server;

	ManagedReference<ZoneProcessServer* > processor;

	ManagedWeakReference<ChatManager* > chatManager;

	DeltaSet<String, ManagedReference<GuildObject* > > guildList;

	VectorMap<unsigned long long, String> pendingGuilds;

	VectorMap<unsigned long long, ManagedReference<GuildObject* > > sponsoredPlayers;

	int requiredMembers;

	int maximumMembers;

	int guildUpdateInterval;

public:
	GuildManagerImplementation(ZoneServer* serv, ZoneProcessServer* proc);

	GuildManagerImplementation(DummyConstructorParameter* param);

	void setChatManager(ChatManager* chatmanager);

	void sendGuildListTo(PlayerCreature* player, const String& guildFilter);

	void addPendingGuild(unsigned long long playerID, const String& guildName);

	void removePendingGuild(unsigned long long playerID);

	String getPendingGuildName(unsigned long long playerID);

	void addSponsoredPlayer(unsigned long long playerID, GuildObject* guild);

	void removeSponsoredPlayer(unsigned long long playerID);

	bool isCreatingGuild(unsigned long long playerID);

	bool isSponsoredPlayer(unsigned long long playerID);

	GuildObject* getSponsoredGuild(unsigned long long playerID);

	void sendBaselinesTo(PlayerCreature* player);

	void loadGuilds();

	void sendGuildCreateNameTo(PlayerCreature* player, GuildTerminal* guildTerminal);

	void sendGuildCreateAbbrevTo(PlayerCreature* player, GuildTerminal* guildTerminal);

	void sendGuildInformationTo(PlayerCreature* player, GuildObject* guild, GuildTerminal* guildTerminal);

	void sendGuildMemberListTo(PlayerCreature* player, GuildObject* guild, GuildTerminal* guildTerminal);

	void sendGuildMemberOptionsTo(PlayerCreature* player, GuildObject* guild, unsigned long long memberID, GuildTerminal* guildTerminal);

	void sendGuildDisbandConfirmTo(PlayerCreature* player, GuildObject* guild, GuildTerminal* guildTerminal);

	void sendGuildSponsoredListTo(PlayerCreature* player, GuildObject* guild, GuildTerminal* guildTerminal);

	void sendGuildSponsoredOptionsTo(PlayerCreature* player, GuildObject* guild, unsigned long long playerID, GuildTerminal* guildTerminal);

	void sendGuildSponsorTo(PlayerCreature* player, GuildObject* guild, GuildTerminal* guildTerminal);

	void sendGuildSponsorVerifyTo(PlayerCreature* player, PlayerCreature* target);

	void sendGuildKickPromptTo(PlayerCreature* player, PlayerCreature* target);

	void sendGuildSetTitleTo(PlayerCreature* player, PlayerCreature* target);

	void sendMemberPermissionsTo(PlayerCreature* player, unsigned long long targetID, GuildTerminal* guildTerminal);

	bool validateGuildName(PlayerCreature* player, const String& guildName);

	bool validateGuildAbbrev(PlayerCreature* player, const String& guildAbbrev);

	bool guildNameExists(const String& guildName);

	bool guildAbbrevExists(const String& guildAbbrev);

	GuildObject* createGuild(PlayerCreature* player, GuildTerminal* guildTerminal, const String& guildName, const String& guildAbbrev);

	bool disbandGuild(PlayerCreature* player, GuildObject* guild);

	void sponsorPlayer(PlayerCreature* player, GuildTerminal* guildTerminal, const String& playerName);

	void acceptSponsorshipRequest(PlayerCreature* player, PlayerCreature* target);

	void acceptSponsoredPlayer(PlayerCreature* player, unsigned long long targetID);

	void kickMember(PlayerCreature* player, PlayerCreature* target);

	void leaveGuild(PlayerCreature* player, GuildObject* guild);

	void setMemberTitle(PlayerCreature* player, PlayerCreature* target, const String& title);

	void setAllegianceTo(PlayerCreature* player, unsigned long long targetID, GuildTerminal* guildTerminal);

	void toggleGuildPermission(PlayerCreature* player, unsigned long long targetID, int permissionIndex, GuildTerminal* guildTerminal);

	ChatRoom* createGuildChannels(GuildObject* guild);

	void sendGuildMail(const String& subject, StringIdChatParameter& body, GuildObject* guild);

	GuildManager* _this;

	operator const GuildManager*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~GuildManagerImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const String& name);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class GuildManager;
};

class GuildManagerAdapter : public ManagedServiceAdapter {
public:
	GuildManagerAdapter(GuildManagerImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void setChatManager(ChatManager* chatmanager);

	void sendGuildListTo(PlayerCreature* player, const String& guildFilter);

	void addPendingGuild(unsigned long long playerID, const String& guildName);

	void removePendingGuild(unsigned long long playerID);

	String getPendingGuildName(unsigned long long playerID);

	void addSponsoredPlayer(unsigned long long playerID, GuildObject* guild);

	void removeSponsoredPlayer(unsigned long long playerID);

	bool isCreatingGuild(unsigned long long playerID);

	bool isSponsoredPlayer(unsigned long long playerID);

	GuildObject* getSponsoredGuild(unsigned long long playerID);

	void sendBaselinesTo(PlayerCreature* player);

	void loadGuilds();

	void sendGuildCreateNameTo(PlayerCreature* player, GuildTerminal* guildTerminal);

	void sendGuildCreateAbbrevTo(PlayerCreature* player, GuildTerminal* guildTerminal);

	void sendGuildInformationTo(PlayerCreature* player, GuildObject* guild, GuildTerminal* guildTerminal);

	void sendGuildMemberListTo(PlayerCreature* player, GuildObject* guild, GuildTerminal* guildTerminal);

	void sendGuildMemberOptionsTo(PlayerCreature* player, GuildObject* guild, unsigned long long memberID, GuildTerminal* guildTerminal);

	void sendGuildDisbandConfirmTo(PlayerCreature* player, GuildObject* guild, GuildTerminal* guildTerminal);

	void sendGuildSponsoredListTo(PlayerCreature* player, GuildObject* guild, GuildTerminal* guildTerminal);

	void sendGuildSponsoredOptionsTo(PlayerCreature* player, GuildObject* guild, unsigned long long playerID, GuildTerminal* guildTerminal);

	void sendGuildSponsorTo(PlayerCreature* player, GuildObject* guild, GuildTerminal* guildTerminal);

	void sendGuildSponsorVerifyTo(PlayerCreature* player, PlayerCreature* target);

	void sendGuildKickPromptTo(PlayerCreature* player, PlayerCreature* target);

	void sendGuildSetTitleTo(PlayerCreature* player, PlayerCreature* target);

	void sendMemberPermissionsTo(PlayerCreature* player, unsigned long long targetID, GuildTerminal* guildTerminal);

	bool validateGuildName(PlayerCreature* player, const String& guildName);

	bool validateGuildAbbrev(PlayerCreature* player, const String& guildAbbrev);

	bool guildNameExists(const String& guildName);

	bool guildAbbrevExists(const String& guildAbbrev);

	GuildObject* createGuild(PlayerCreature* player, GuildTerminal* guildTerminal, const String& guildName, const String& guildAbbrev);

	bool disbandGuild(PlayerCreature* player, GuildObject* guild);

	void sponsorPlayer(PlayerCreature* player, GuildTerminal* guildTerminal, const String& playerName);

	void acceptSponsorshipRequest(PlayerCreature* player, PlayerCreature* target);

	void acceptSponsoredPlayer(PlayerCreature* player, unsigned long long targetID);

	void kickMember(PlayerCreature* player, PlayerCreature* target);

	void leaveGuild(PlayerCreature* player, GuildObject* guild);

	void setMemberTitle(PlayerCreature* player, PlayerCreature* target, const String& title);

	void setAllegianceTo(PlayerCreature* player, unsigned long long targetID, GuildTerminal* guildTerminal);

	void toggleGuildPermission(PlayerCreature* player, unsigned long long targetID, int permissionIndex, GuildTerminal* guildTerminal);

	ChatRoom* createGuildChannels(GuildObject* guild);

protected:
	String _param1_sendGuildListTo__PlayerCreature_String_;
	String _param1_addPendingGuild__long_String_;
	String _param1_validateGuildName__PlayerCreature_String_;
	String _param1_validateGuildAbbrev__PlayerCreature_String_;
	String _param0_guildNameExists__String_;
	String _param0_guildAbbrevExists__String_;
	String _param2_createGuild__PlayerCreature_GuildTerminal_String_String_;
	String _param3_createGuild__PlayerCreature_GuildTerminal_String_String_;
	String _param2_sponsorPlayer__PlayerCreature_GuildTerminal_String_;
	String _param2_setMemberTitle__PlayerCreature_PlayerCreature_String_;
};

class GuildManagerHelper : public DistributedObjectClassHelper, public Singleton<GuildManagerHelper> {
	static GuildManagerHelper* staticInitializer;

public:
	GuildManagerHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<GuildManagerHelper>;
};

} // namespace guild
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::guild;

#endif /*GUILDMANAGER_H_*/
