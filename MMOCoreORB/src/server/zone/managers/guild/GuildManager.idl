/*
Copyright (C) 2007 <SWGEmu>

This File is part of Core3.

This program is free software; you can redistribute
it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software
Foundation; either version 2 of the License,
or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for
more details.

You should have received a copy of the GNU Lesser General
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Linking Engine3 statically or dynamically with other modules
is making a combined work based on Engine3.
Thus, the terms and conditions of the GNU Lesser General Public License
cover the whole combination.

In addition, as a special exception, the copyright holders of Engine3
give you permission to combine Engine3 program with free software
programs or libraries that are released under the GNU LGPL and with
code included in the standard release of Core3 under the GNU LGPL
license (or modified versions of such code, with unchanged license).
You may copy and distribute such a system following the terms of the
GNU LGPL for Engine3 and the licenses of the other code concerned,
provided that you include the source code of that other code when
and as the GNU LGPL requires distribution of source code.

Note that people who make modified versions of Engine3 are not obligated
to grant this special exception for their modified versions;
it is their choice whether to do so. The GNU Lesser General Public License
gives permission to release a modified version without this exception;
this exception also makes it possible to release a modified version
which carries forward this exception.
*/

package server.zone.managers.guild;

import engine.core.ManagedService;
import server.zone.ZoneProcessServer;
import server.zone.ZoneServer;
include server.zone.managers.guild.GuildList;
include server.zone.packets.guild.GuildObjectDeltaMessage3;
import server.zone.objects.guild.GuildObject;
import server.zone.objects.tangible.terminal.guild.GuildTerminal;
import server.zone.objects.player.PlayerCreature;
include server.zone.objects.scene.variables.DeltaSet;

class GuildManager extends ManagedService implements Logger {
	@weakReference
	private transient ZoneServer server;
	private transient ZoneProcessServer processor;
	
	@dereferenced
	private DeltaSet<string, GuildObject> guildList;
	
	@dereferenced
	private transient VectorMap<unsigned long, string> pendingGuilds;
	
	@dereferenced
	private transient VectorMap<unsigned long, GuildObject> sponsoredPlayers;
	
	private int requiredMembers;
	private int maximumMembers;
	private int guildUpdateInterval;
	
	public GuildManager(ZoneServer serv, ZoneProcessServer proc) {
		Logger.setLoggingName("GuildManager");
		Logger.setLogging(true);
		Logger.setGlobalLogging(true);
		
		pendingGuilds.setNoDuplicateInsertPlan();
		
		sponsoredPlayers.setNoDuplicateInsertPlan();
		sponsoredPlayers.setNullValue(null);

		server = serv;
		processor = proc;
		
		requiredMembers = 5;
		maximumMembers = 500;
		guildUpdateInterval = 1440;
	}
	
	public synchronized void addPendingGuild(unsigned long playerID, final string guildName) {
		pendingGuilds.put(playerID, guildName);
	}
	
	public synchronized void removePendingGuild(unsigned long playerID) {
		pendingGuilds.drop(playerID);
	}
	
	public synchronized string getPendingGuildName(unsigned long playerID) {
		return pendingGuilds.get(playerID);
	}
	
	public synchronized void addSponsoredPlayer(unsigned long playerID, GuildObject guild) {
		sponsoredPlayers.put(playerID, guild);
	}
	
	public synchronized void removeSponsoredPlayer(unsigned long playerID) {
		sponsoredPlayers.drop(playerID);
	}
	
	public synchronized boolean isCreatingGuild(unsigned long playerID) {
		return pendingGuilds.contains(playerID);
	}
	
	public synchronized boolean isSponsoredPlayer(unsigned long playerID) {
		return sponsoredPlayers.contains(playerID);
	}
	
	public synchronized GuildObject getSponsoredGuild(unsigned long playerID) {
		return sponsoredPlayers.get(playerID);
	}
	
	public native void sendBaselinesTo(PlayerCreature player);
	
	public native void loadGuilds();
	
	public native void sendGuildCreateNameTo(PlayerCreature player, GuildTerminal guildTerminal);
	
	public native void sendGuildCreateAbbrevTo(PlayerCreature player, GuildTerminal guildTerminal);
	
	public native void sendGuildInformationTo(PlayerCreature player, GuildTerminal guildTerminal);
	
	public native void sendGuildMemberListTo(PlayerCreature player, GuildTerminal guildTerminal);
	
	public native void sendGuildMemberOptionsTo(PlayerCreature player, GuildTerminal guildTerminal, unsigned long memberID);
	
	public native void sendGuildDisbandConfirmTo(PlayerCreature player, GuildTerminal guildTerminal);
	
	public native void sendGuildSponsoredListTo(PlayerCreature player, GuildTerminal guildTerminal);
	
	public native void sendGuildSponsoredOptionsTo(PlayerCreature player, unsigned long playerID, GuildTerminal guildTerminal);
	
	public native void sendGuildSponsorTo(PlayerCreature player, GuildTerminal guildTerminal);
	
	public native void sendGuildSponsorVerifyTo(PlayerCreature player, PlayerCreature target);
	
	public native boolean validateGuildName(PlayerCreature player, final string guildName);
	
	public native boolean validateGuildAbbrev(PlayerCreature player, final string guildAbbrev);
	
	public native boolean guildNameExists(final string guildName);
	
	public native boolean guildAbbrevExists(final string guildAbbrev);
	
	public native GuildObject createGuild(PlayerCreature player, GuildTerminal guildTerminal, final string guildName, final string guildAbbrev);
	
	public native boolean disbandGuild(PlayerCreature player, GuildTerminal guildTerminal);
	
	public native void sponsorPlayer(PlayerCreature player, GuildTerminal guildTerminal, final string playerName);
	
	public native void acceptSponsorshipRequest(PlayerCreature player, PlayerCreature target);
	
	public native void acceptSponsoredPlayer(PlayerCreature player, unsigned long targetID);
	
	public native void sendGuildKickPromptTo(PlayerCreature player, PlayerCreature target);
	
	public native void sendGuildSetTitleTo(PlayerCreature player, PlayerCreature target);
	
	public native void kickMember(PlayerCreature player, PlayerCreature target);
	
	public native void setMemberTitle(PlayerCreature player, unsigned long targetID, GuildTerminal guildTerminal);
	
	public native void setAllegianceTo(PlayerCreature player, unsigned long targetID, GuildTerminal guildTerminal);
	
	public native void sendMemberPermissionsTo(PlayerCreature player, PlayerCreature target);
}