/*
 *	server/zone/managers/bazaar/BazaarAuctionsMap.cpp generated by engine3 IDL compiler 0.60
 */

#include "BazaarAuctionsMap.h"

#include "server/zone/objects/tangible/terminal/bazaar/AuctionItem.h"

/*
 *	BazaarAuctionsMapStub
 */

BazaarAuctionsMap::BazaarAuctionsMap() : ManagedObject(DummyConstructorParameter::instance()) {
	BazaarAuctionsMapImplementation* _implementation = new BazaarAuctionsMapImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
}

BazaarAuctionsMap::BazaarAuctionsMap(DummyConstructorParameter* param) : ManagedObject(param) {
}

BazaarAuctionsMap::~BazaarAuctionsMap() {
}


int BazaarAuctionsMap::getAuctionCount() {
	BazaarAuctionsMapImplementation* _implementation = (BazaarAuctionsMapImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getAuctionCount();
}

bool BazaarAuctionsMap::containsAuction(unsigned long long objectID) {
	BazaarAuctionsMapImplementation* _implementation = (BazaarAuctionsMapImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addUnsignedLongParameter(objectID);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->containsAuction(objectID);
}

void BazaarAuctionsMap::addAuction(unsigned long long objectID, AuctionItem* item) {
	BazaarAuctionsMapImplementation* _implementation = (BazaarAuctionsMapImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addUnsignedLongParameter(objectID);
		method.addObjectParameter(item);

		method.executeWithVoidReturn();
	} else
		_implementation->addAuction(objectID, item);
}

int BazaarAuctionsMap::getPlayerAuctionCount(unsigned long long objectID) {
	BazaarAuctionsMapImplementation* _implementation = (BazaarAuctionsMapImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addUnsignedLongParameter(objectID);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getPlayerAuctionCount(objectID);
}

void BazaarAuctionsMap::dropAuction(unsigned long long objectID) {
	BazaarAuctionsMapImplementation* _implementation = (BazaarAuctionsMapImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addUnsignedLongParameter(objectID);

		method.executeWithVoidReturn();
	} else
		_implementation->dropAuction(objectID);
}

AuctionItem* BazaarAuctionsMap::getAuction(unsigned long long objectID) {
	BazaarAuctionsMapImplementation* _implementation = (BazaarAuctionsMapImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addUnsignedLongParameter(objectID);

		return (AuctionItem*) method.executeWithObjectReturn();
	} else
		return _implementation->getAuction(objectID);
}

AuctionItem* BazaarAuctionsMap::getAuction(int index) {
	BazaarAuctionsMapImplementation* _implementation = (BazaarAuctionsMapImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addSignedIntParameter(index);

		return (AuctionItem*) method.executeWithObjectReturn();
	} else
		return _implementation->getAuction(index);
}

VectorMap<unsigned long long, ManagedReference<AuctionItem* > >* BazaarAuctionsMap::getAuctions() {
	BazaarAuctionsMapImplementation* _implementation = (BazaarAuctionsMapImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getAuctions();
}

DistributedObjectServant* BazaarAuctionsMap::_getImplementation() {

	_updated = true;
	return _impl;
}

void BazaarAuctionsMap::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	BazaarAuctionsMapImplementation
 */

BazaarAuctionsMapImplementation::BazaarAuctionsMapImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}


BazaarAuctionsMapImplementation::~BazaarAuctionsMapImplementation() {
}


void BazaarAuctionsMapImplementation::finalize() {
}

void BazaarAuctionsMapImplementation::_initializeImplementation() {
	_setClassHelper(BazaarAuctionsMapHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void BazaarAuctionsMapImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (BazaarAuctionsMap*) stub;
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* BazaarAuctionsMapImplementation::_getStub() {
	return _this;
}

BazaarAuctionsMapImplementation::operator const BazaarAuctionsMap*() {
	return _this;
}

void BazaarAuctionsMapImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void BazaarAuctionsMapImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void BazaarAuctionsMapImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void BazaarAuctionsMapImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void BazaarAuctionsMapImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void BazaarAuctionsMapImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void BazaarAuctionsMapImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void BazaarAuctionsMapImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("BazaarAuctionsMap");

}

void BazaarAuctionsMapImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(BazaarAuctionsMapImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool BazaarAuctionsMapImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ManagedObjectImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "auctions") {
		TypeInfo<VectorMap<unsigned long long, ManagedReference<AuctionItem* > > >::parseFromBinaryStream(&auctions, stream);
		return true;
	}

	if (_name == "playerAuctionCount") {
		TypeInfo<VectorMap<unsigned long long, int> >::parseFromBinaryStream(&playerAuctionCount, stream);
		return true;
	}


	return false;
}

void BazaarAuctionsMapImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = BazaarAuctionsMapImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int BazaarAuctionsMapImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "auctions";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<VectorMap<unsigned long long, ManagedReference<AuctionItem* > > >::toBinaryStream(&auctions, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "playerAuctionCount";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<VectorMap<unsigned long long, int> >::toBinaryStream(&playerAuctionCount, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 2 + ManagedObjectImplementation::writeObjectMembers(stream);
}

BazaarAuctionsMapImplementation::BazaarAuctionsMapImplementation() {
	_initializeImplementation();
	// server/zone/managers/bazaar/BazaarAuctionsMap.idl():  		auctions.setNullValue(null);
	(&auctions)->setNullValue(NULL);
	// server/zone/managers/bazaar/BazaarAuctionsMap.idl():  		auctions.setNoDuplicateInsertPlan();
	(&auctions)->setNoDuplicateInsertPlan();
	// server/zone/managers/bazaar/BazaarAuctionsMap.idl():  		playerAuctionCount.setNullValue(0);
	(&playerAuctionCount)->setNullValue(0);
	// server/zone/managers/bazaar/BazaarAuctionsMap.idl():  		playerAuctionCount.setAllowOverwriteInsertPlan();
	(&playerAuctionCount)->setAllowOverwriteInsertPlan();
}

int BazaarAuctionsMapImplementation::getAuctionCount() {
	// server/zone/managers/bazaar/BazaarAuctionsMap.idl():  		return auctions.size();
	return (&auctions)->size();
}

bool BazaarAuctionsMapImplementation::containsAuction(unsigned long long objectID) {
	// server/zone/managers/bazaar/BazaarAuctionsMap.idl():  		return auctions.contains(objectID);
	return (&auctions)->contains(objectID);
}

void BazaarAuctionsMapImplementation::addAuction(unsigned long long objectID, AuctionItem* item) {
	// server/zone/managers/bazaar/BazaarAuctionsMap.idl():  		auctions.put(objectID, item);
	(&auctions)->put(objectID, item);
	// server/zone/managers/bazaar/BazaarAuctionsMap.idl():  		playerAuctionCount.put(item.getOwnerID(), playerAuctionCount.get(item.getOwnerID()) + 1);
	(&playerAuctionCount)->put(item->getOwnerID(), (&playerAuctionCount)->get(item->getOwnerID()) + 1);
}

int BazaarAuctionsMapImplementation::getPlayerAuctionCount(unsigned long long objectID) {
	// server/zone/managers/bazaar/BazaarAuctionsMap.idl():  		return playerAuctionCount.get(objectID);
	return (&playerAuctionCount)->get(objectID);
}

void BazaarAuctionsMapImplementation::dropAuction(unsigned long long objectID) {
	// server/zone/managers/bazaar/BazaarAuctionsMap.idl():  		AuctionItem item = auctions.get(objectID);
	AuctionItem* item = (&auctions)->get(objectID);
	// server/zone/managers/bazaar/BazaarAuctionsMap.idl():  		int 
	if (item == NULL)	// server/zone/managers/bazaar/BazaarAuctionsMap.idl():  			return;
	return;
	// server/zone/managers/bazaar/BazaarAuctionsMap.idl():  		int count = playerAuctionCount.get(item.getOwnerID());
	int count = (&playerAuctionCount)->get(item->getOwnerID());
	// server/zone/managers/bazaar/BazaarAuctionsMap.idl():  		count = count - 1;
	count = count - 1;
	// server/zone/managers/bazaar/BazaarAuctionsMap.idl():  			playerAuctionCount.put(item.getOwnerID(), count);
	if (count < 1)	// server/zone/managers/bazaar/BazaarAuctionsMap.idl():  			playerAuctionCount.drop(item.getOwnerID());
	(&playerAuctionCount)->drop(item->getOwnerID());

	else 	// server/zone/managers/bazaar/BazaarAuctionsMap.idl():  			playerAuctionCount.put(item.getOwnerID(), count);
	(&playerAuctionCount)->put(item->getOwnerID(), count);
	// server/zone/managers/bazaar/BazaarAuctionsMap.idl():  		auctions.drop(objectID);
	(&auctions)->drop(objectID);
}

AuctionItem* BazaarAuctionsMapImplementation::getAuction(unsigned long long objectID) {
	// server/zone/managers/bazaar/BazaarAuctionsMap.idl():  		return auctions.get(objectID);
	return (&auctions)->get(objectID);
}

AuctionItem* BazaarAuctionsMapImplementation::getAuction(int index) {
	// server/zone/managers/bazaar/BazaarAuctionsMap.idl():  		return auctions.get(index);
	return (&auctions)->get(index);
}

VectorMap<unsigned long long, ManagedReference<AuctionItem* > >* BazaarAuctionsMapImplementation::getAuctions() {
	// server/zone/managers/bazaar/BazaarAuctionsMap.idl():  		return auctions;
	return (&auctions);
}

/*
 *	BazaarAuctionsMapAdapter
 */

BazaarAuctionsMapAdapter::BazaarAuctionsMapAdapter(BazaarAuctionsMapImplementation* obj) : ManagedObjectAdapter(obj) {
}

enum {RPC_GETAUCTIONCOUNT__ = 6,RPC_CONTAINSAUCTION__LONG_,RPC_ADDAUCTION__LONG_AUCTIONITEM_,RPC_GETPLAYERAUCTIONCOUNT__LONG_,RPC_DROPAUCTION__LONG_,RPC_GETAUCTION__LONG_,RPC_GETAUCTION__INT_,};

Packet* BazaarAuctionsMapAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_GETAUCTIONCOUNT__:
		resp->insertSignedInt(getAuctionCount());
		break;
	case RPC_CONTAINSAUCTION__LONG_:
		resp->insertBoolean(containsAuction(inv->getUnsignedLongParameter()));
		break;
	case RPC_ADDAUCTION__LONG_AUCTIONITEM_:
		addAuction(inv->getUnsignedLongParameter(), (AuctionItem*) inv->getObjectParameter());
		break;
	case RPC_GETPLAYERAUCTIONCOUNT__LONG_:
		resp->insertSignedInt(getPlayerAuctionCount(inv->getUnsignedLongParameter()));
		break;
	case RPC_DROPAUCTION__LONG_:
		dropAuction(inv->getUnsignedLongParameter());
		break;
	case RPC_GETAUCTION__LONG_:
		resp->insertLong(getAuction(inv->getUnsignedLongParameter())->_getObjectID());
		break;
	case RPC_GETAUCTION__INT_:
		resp->insertLong(getAuction(inv->getSignedIntParameter())->_getObjectID());
		break;
	default:
		return NULL;
	}

	return resp;
}

int BazaarAuctionsMapAdapter::getAuctionCount() {
	return ((BazaarAuctionsMapImplementation*) impl)->getAuctionCount();
}

bool BazaarAuctionsMapAdapter::containsAuction(unsigned long long objectID) {
	return ((BazaarAuctionsMapImplementation*) impl)->containsAuction(objectID);
}

void BazaarAuctionsMapAdapter::addAuction(unsigned long long objectID, AuctionItem* item) {
	((BazaarAuctionsMapImplementation*) impl)->addAuction(objectID, item);
}

int BazaarAuctionsMapAdapter::getPlayerAuctionCount(unsigned long long objectID) {
	return ((BazaarAuctionsMapImplementation*) impl)->getPlayerAuctionCount(objectID);
}

void BazaarAuctionsMapAdapter::dropAuction(unsigned long long objectID) {
	((BazaarAuctionsMapImplementation*) impl)->dropAuction(objectID);
}

AuctionItem* BazaarAuctionsMapAdapter::getAuction(unsigned long long objectID) {
	return ((BazaarAuctionsMapImplementation*) impl)->getAuction(objectID);
}

AuctionItem* BazaarAuctionsMapAdapter::getAuction(int index) {
	return ((BazaarAuctionsMapImplementation*) impl)->getAuction(index);
}

/*
 *	BazaarAuctionsMapHelper
 */

BazaarAuctionsMapHelper* BazaarAuctionsMapHelper::staticInitializer = BazaarAuctionsMapHelper::instance();

BazaarAuctionsMapHelper::BazaarAuctionsMapHelper() {
	className = "BazaarAuctionsMap";

	Core::getObjectBroker()->registerClass(className, this);
}

void BazaarAuctionsMapHelper::finalizeHelper() {
	BazaarAuctionsMapHelper::finalize();
}

DistributedObject* BazaarAuctionsMapHelper::instantiateObject() {
	return new BazaarAuctionsMap(DummyConstructorParameter::instance());
}

DistributedObjectServant* BazaarAuctionsMapHelper::instantiateServant() {
	return new BazaarAuctionsMapImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* BazaarAuctionsMapHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new BazaarAuctionsMapAdapter((BazaarAuctionsMapImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

