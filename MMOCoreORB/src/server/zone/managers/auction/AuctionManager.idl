/*
Copyright (C) 2007 <SWGEmu>

This File is part of Core3.

This program is free software; you can redistribute
it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software
Foundation; either version 2 of the License,
or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for
more details.

You should have received a copy of the GNU Lesser General
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Linking Engine3 statically or dynamically with other modules
is making a combined work based on Engine3.
Thus, the terms and conditions of the GNU Lesser General Public License
cover the whole combination.

In addition, as a special exception, the copyright holders of Engine3
give you permission to combine Engine3 program with free software
programs or libraries that are released under the GNU LGPL and with
code included in the standard release of Core3 under the GNU LGPL
license (or modified versions of such code, with unchanged license).
You may copy and distribute such a system following the terms of the
GNU LGPL for Engine3 and the licenses of the other code concerned,
provided that you include the source code of that other code when
and as the GNU LGPL requires distribution of source code.

Note that people who make modified versions of Engine3 are not obligated
to grant this special exception for their modified versions;
it is their choice whether to do so. The GNU Lesser General Public License
gives permission to release a modified version without this exception;
this exception also makes it possible to release a modified version
which carries forward this exception.
*/

package server.zone.managers.auction;

import engine.log.Logger;
import server.zone.ZoneServer;
import server.zone.managers.object.ObjectManager;
import engine.core.ManagedService;
import engine.core.Task;
import server.zone.ZoneServer;
import server.zone.objects.creature.CreatureObject;
import server.zone.managers.auction.AuctionsMap;
import server.zone.objects.auction.AuctionItem;
import server.zone.objects.tangible.TangibleObject;
import server.zone.objects.scene.SceneObject;
import system.util.VectorMap;
include server.zone.packets.auction.AuctionQueryHeadersResponseMessage;
include server.zone.managers.auction.TerminalListVector;
include server.zone.managers.auction.AuctionEventsMap;

class AuctionManager extends ManagedService implements Logger {
	protected AuctionsMap auctionMap;
	
	protected ZoneServer zoneServer;
	
	/*@dereferenced
	protected VectorMap<unsigned long, Task> auctionEvents;*/
	@dereferenced
	protected AuctionEventsMap auctionEvents;
	
	@dereferenced
	protected VectorMap<SceneObject, string> pendingUIDUpdates;
	
	@dereferenced
	protected VectorMap<SceneObject, string> pendingOldUIDUpdates;
	
	public final static int MAXBAZAARPRICE = 20000;
	public final static int MAXSALES = 25; // this only apply to bazaars
	public final static int SALESFEE = 20;
	public final static int CHECKEVERY = 60; // Minutes
	
	public final static int MAXVENDORPRICE = 99999999;
	public final static int ITEMSPERPAGE = 100;

	public final static int VENDOREXPIREPERIOD = 2592000; // Seconds
	public final static int COMMODITYEXPIREPERIOD = 604800; 
	
	private boolean marketEnabled;

	public AuctionManager(ZoneServer server) {
		zoneServer = server;
		Logger.setLoggingName("AuctionManager");
		Logger.setLogging(false);
		Logger.setGlobalLogging(true);
		marketEnabled = false;
		auctionEvents.setNoDuplicateInsertPlan();
		auctionEvents.setNullValue(null);
	}
	
	public native void initialize();
	
	@local
	public native void addSaleItem(CreatureObject player, unsigned long objectid, SceneObject vendor, final unicode description, int price, unsigned int duration, boolean auction, boolean premium);
	
	@local
	public native AuctionItem createVendorItem(CreatureObject player, SceneObject objectToSell, SceneObject vendor, final unicode description, int price, unsigned int duration, boolean auction, boolean premium);
	
	@local
	public native int checkSaleItem(CreatureObject player, SceneObject object, SceneObject vendor, int price, boolean premium, boolean stockroomSale);
	
	public native void getItemAttributes(CreatureObject player, unsigned long objectid);

	public native void getData(CreatureObject player, int extent, unsigned long vendorObjectID, int screen, unsigned int category, int count, int offset);	

	@local
	public native void getAuctionData(CreatureObject player, SceneObject usedVendor, final string planet, final string region, SceneObject vendor, int screen, unsigned int category, int count, int offset);

	private native void refundAuction(AuctionItem item);

	private native void sendVendorUpdateMail(SceneObject vendor, boolean isEmpty);

	@local
	public native int checkRetrieve(CreatureObject player, unsigned long objectIdToRetrieve, SceneObject vendor);
	public native void retrieveItem(CreatureObject player, unsigned long objectid, unsigned long vendorID);
	
	public native void buyItem(CreatureObject player, unsigned long objectid, int price1, int price2);
	public native void doAuctionBid(CreatureObject player, AuctionItem item, int price1, int price2);
	public native void doInstantBuy(CreatureObject player, AuctionItem item);
	public native int checkBidAuction(CreatureObject player, AuctionItem item, int price1, int price2);

	public native void cancelItem(CreatureObject player, unsigned long objectID);
	
	@local
	public native AuctionQueryHeadersResponseMessage fillAuctionQueryHeadersResponseMessage(CreatureObject player, SceneObject vendor, TerminalListVector terminalList, int screen, unsigned int category, int count, int offset);

	public AuctionsMap getAuctionMap() {
		return auctionMap;
	}
	
	public native void checkVendorItems();
	
	public native void checkAuctions();
	
	@local
	private native void doAuctionMaint(TerminalListVector items);

	public native string getVendorUID(SceneObject vendor);
	
	public synchronized void updateVendorUID(SceneObject vendor, final string oldUID, final string newUID) {
		
		if(auctionMap == null) {
			pendingUIDUpdates.put(vendor, newUID);
			pendingOldUIDUpdates.put(vendor, oldUID);
			return;
		}
		
		auctionMap.updateUID(vendor, oldUID, newUID);
	}
	
	public synchronized void updateVendorSearch(SceneObject vendor, boolean enabled) {
		auctionMap.updateVendorSearch(vendor, enabled);
	}
	
	public native void expireSale(AuctionItem item);
	public native void expireBidAuction(AuctionItem item);
	
	public native void expireAuction(AuctionItem item);

	public native void deleteExpiredSale(AuctionItem item);

	public boolean isMarketEnabled() {
		return marketEnabled == true;
	}
	
	public synchronized void setMarketEnabled(boolean value) {
		marketEnabled = value;
	}
	
	public native void displayInfo(CreatureObject player);
		
	public native void updateAuctionOwner(AuctionItem item, CreatureObject player);

	public native string removeColorCodes(final string name);
}

