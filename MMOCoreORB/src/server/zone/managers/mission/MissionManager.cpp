/*
 *	server/zone/managers/mission/MissionManager.cpp generated by engine3 IDL compiler 0.60
 */

#include "MissionManager.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/ZoneProcessServer.h"

#include "server/zone/objects/mission/MissionObject.h"

#include "server/zone/objects/tangible/terminal/mission/MissionTerminal.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/region/Region.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/managers/stringid/StringIdManager.h"

/*
 *	MissionManagerStub
 */

MissionManager::MissionManager(ZoneServer* srv, ZoneProcessServer* impl) : Observer(DummyConstructorParameter::instance()) {
	MissionManagerImplementation* _implementation = new MissionManagerImplementation(srv, impl);
	_impl = _implementation;
	_impl->_setStub(this);
}

MissionManager::MissionManager(DummyConstructorParameter* param) : Observer(param) {
}

MissionManager::~MissionManager() {
}


void MissionManager::loadLairObjectsToSpawn() {
	MissionManagerImplementation* _implementation = (MissionManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		_implementation->loadLairObjectsToSpawn();
}

void MissionManager::loadNpcObjectsToSpawn() {
	MissionManagerImplementation* _implementation = (MissionManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		_implementation->loadNpcObjectsToSpawn();
}

void MissionManager::handleMissionListRequest(MissionTerminal* missionTerminal, PlayerCreature* player, int counter) {
	MissionManagerImplementation* _implementation = (MissionManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(missionTerminal);
		method.addObjectParameter(player);
		method.addSignedIntParameter(counter);

		method.executeWithVoidReturn();
	} else
		_implementation->handleMissionListRequest(missionTerminal, player, counter);
}

void MissionManager::handleMissionAccept(MissionTerminal* missionTerminal, MissionObject* mission, PlayerCreature* player) {
	MissionManagerImplementation* _implementation = (MissionManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(missionTerminal);
		method.addObjectParameter(mission);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->handleMissionAccept(missionTerminal, mission, player);
}

void MissionManager::handleMissionAbort(MissionObject* mission, PlayerCreature* player) {
	MissionManagerImplementation* _implementation = (MissionManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(mission);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->handleMissionAbort(mission, player);
}

void MissionManager::removeMission(MissionObject* mission, PlayerCreature* player) {
	MissionManagerImplementation* _implementation = (MissionManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addObjectParameter(mission);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->removeMission(mission, player);
}

void MissionManager::populateMissionList(MissionTerminal* missionTerminal, PlayerCreature* player, int counter) {
	MissionManagerImplementation* _implementation = (MissionManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addObjectParameter(missionTerminal);
		method.addObjectParameter(player);
		method.addSignedIntParameter(counter);

		method.executeWithVoidReturn();
	} else
		_implementation->populateMissionList(missionTerminal, player, counter);
}

void MissionManager::randomizeSurveyMission(PlayerCreature* player, MissionObject* mission) {
	MissionManagerImplementation* _implementation = (MissionManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addObjectParameter(player);
		method.addObjectParameter(mission);

		method.executeWithVoidReturn();
	} else
		_implementation->randomizeSurveyMission(player, mission);
}

void MissionManager::randomizeDestroyMission(PlayerCreature* player, MissionObject* mission) {
	MissionManagerImplementation* _implementation = (MissionManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addObjectParameter(player);
		method.addObjectParameter(mission);

		method.executeWithVoidReturn();
	} else
		_implementation->randomizeDestroyMission(player, mission);
}

void MissionManager::randomizeBountyMission(PlayerCreature* player, MissionObject* mission) {
	MissionManagerImplementation* _implementation = (MissionManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addObjectParameter(player);
		method.addObjectParameter(mission);

		method.executeWithVoidReturn();
	} else
		_implementation->randomizeBountyMission(player, mission);
}

void MissionManager::randomizeDeliverMission(PlayerCreature* player, MissionObject* mission) {
	MissionManagerImplementation* _implementation = (MissionManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addObjectParameter(player);
		method.addObjectParameter(mission);

		method.executeWithVoidReturn();
	} else
		_implementation->randomizeDeliverMission(player, mission);
}

void MissionManager::randomizeCraftingMission(PlayerCreature* player, MissionObject* mission) {
	MissionManagerImplementation* _implementation = (MissionManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addObjectParameter(player);
		method.addObjectParameter(mission);

		method.executeWithVoidReturn();
	} else
		_implementation->randomizeCraftingMission(player, mission);
}

void MissionManager::randomizeEntertainerMission(PlayerCreature* player, MissionObject* mission) {
	MissionManagerImplementation* _implementation = (MissionManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addObjectParameter(player);
		method.addObjectParameter(mission);

		method.executeWithVoidReturn();
	} else
		_implementation->randomizeEntertainerMission(player, mission);
}

void MissionManager::randomizeHuntingMission(PlayerCreature* player, MissionObject* mission) {
	MissionManagerImplementation* _implementation = (MissionManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addObjectParameter(player);
		method.addObjectParameter(mission);

		method.executeWithVoidReturn();
	} else
		_implementation->randomizeHuntingMission(player, mission);
}

void MissionManager::randomizeReconMission(PlayerCreature* player, MissionObject* mission) {
	MissionManagerImplementation* _implementation = (MissionManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addObjectParameter(player);
		method.addObjectParameter(mission);

		method.executeWithVoidReturn();
	} else
		_implementation->randomizeReconMission(player, mission);
}

void MissionManager::randomizeImperialDestroyMission(PlayerCreature* player, MissionObject* mission) {
	MissionManagerImplementation* _implementation = (MissionManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addObjectParameter(player);
		method.addObjectParameter(mission);

		method.executeWithVoidReturn();
	} else
		_implementation->randomizeImperialDestroyMission(player, mission);
}

void MissionManager::randomizeImperialDeliverMission(PlayerCreature* player, MissionObject* mission) {
	MissionManagerImplementation* _implementation = (MissionManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);
		method.addObjectParameter(player);
		method.addObjectParameter(mission);

		method.executeWithVoidReturn();
	} else
		_implementation->randomizeImperialDeliverMission(player, mission);
}

void MissionManager::randomizeRebelDestroyMission(PlayerCreature* player, MissionObject* mission) {
	MissionManagerImplementation* _implementation = (MissionManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);
		method.addObjectParameter(player);
		method.addObjectParameter(mission);

		method.executeWithVoidReturn();
	} else
		_implementation->randomizeRebelDestroyMission(player, mission);
}

void MissionManager::randomizeRebelDeliverMission(PlayerCreature* player, MissionObject* mission) {
	MissionManagerImplementation* _implementation = (MissionManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);
		method.addObjectParameter(player);
		method.addObjectParameter(mission);

		method.executeWithVoidReturn();
	} else
		_implementation->randomizeRebelDeliverMission(player, mission);
}

void MissionManager::createMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player) {
	MissionManagerImplementation* _implementation = (MissionManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);
		method.addObjectParameter(mission);
		method.addObjectParameter(missionTerminal);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->createMissionObjectives(mission, missionTerminal, player);
}

void MissionManager::createSurveyMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player) {
	MissionManagerImplementation* _implementation = (MissionManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);
		method.addObjectParameter(mission);
		method.addObjectParameter(missionTerminal);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->createSurveyMissionObjectives(mission, missionTerminal, player);
}

void MissionManager::createDestroyMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player) {
	MissionManagerImplementation* _implementation = (MissionManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);
		method.addObjectParameter(mission);
		method.addObjectParameter(missionTerminal);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->createDestroyMissionObjectives(mission, missionTerminal, player);
}

void MissionManager::createDeliverMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player) {
	MissionManagerImplementation* _implementation = (MissionManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);
		method.addObjectParameter(mission);
		method.addObjectParameter(missionTerminal);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->createDeliverMissionObjectives(mission, missionTerminal, player);
}

void MissionManager::createEntertainerMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player) {
	MissionManagerImplementation* _implementation = (MissionManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);
		method.addObjectParameter(mission);
		method.addObjectParameter(missionTerminal);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->createEntertainerMissionObjectives(mission, missionTerminal, player);
}

void MissionManager::createHuntingMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player) {
	MissionManagerImplementation* _implementation = (MissionManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);
		method.addObjectParameter(mission);
		method.addObjectParameter(missionTerminal);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->createHuntingMissionObjectives(mission, missionTerminal, player);
}

void MissionManager::createReconMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player) {
	MissionManagerImplementation* _implementation = (MissionManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);
		method.addObjectParameter(mission);
		method.addObjectParameter(missionTerminal);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->createReconMissionObjectives(mission, missionTerminal, player);
}

void MissionManager::createBountyMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player) {
	MissionManagerImplementation* _implementation = (MissionManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);
		method.addObjectParameter(mission);
		method.addObjectParameter(missionTerminal);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->createBountyMissionObjectives(mission, missionTerminal, player);
}

bool MissionManager::hasSurveyMission(PlayerCreature* player, const String& spawn) {
	MissionManagerImplementation* _implementation = (MissionManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);
		method.addObjectParameter(player);
		method.addAsciiParameter(spawn);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasSurveyMission(player, spawn);
}

DistributedObjectServant* MissionManager::_getImplementation() {
	return _impl;}

void MissionManager::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;}

/*
 *	MissionManagerImplementation
 */

MissionManagerImplementation::MissionManagerImplementation(DummyConstructorParameter* param) : ObserverImplementation(param) {
	_initializeImplementation();
}


MissionManagerImplementation::~MissionManagerImplementation() {
}


void MissionManagerImplementation::finalize() {
}

void MissionManagerImplementation::_initializeImplementation() {
	_setClassHelper(MissionManagerHelper::instance());

	_serializationHelperMethod();
}

void MissionManagerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (MissionManager*) stub;
	ObserverImplementation::_setStub(stub);
}

DistributedObjectStub* MissionManagerImplementation::_getStub() {
	return _this;
}

MissionManagerImplementation::operator const MissionManager*() {
	return _this;
}

void MissionManagerImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void MissionManagerImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void MissionManagerImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void MissionManagerImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void MissionManagerImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void MissionManagerImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void MissionManagerImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void MissionManagerImplementation::_serializationHelperMethod() {
	ObserverImplementation::_serializationHelperMethod();

	_setClassName("MissionManager");

	addSerializableVariable("server", &server);
	addSerializableVariable("lairObjectTemplatesToSpawn", &lairObjectTemplatesToSpawn);
	addSerializableVariable("npcObjectTemplatesToSpawn", &npcObjectTemplatesToSpawn);
}

MissionManagerImplementation::MissionManagerImplementation(ZoneServer* srv, ZoneProcessServer* impl) {
	_initializeImplementation();
	// server/zone/managers/mission/MissionManager.idl(74):  		server = srv;
	server = srv;
	// server/zone/managers/mission/MissionManager.idl(75):  		processor = impl;
	processor = impl;
	// server/zone/managers/mission/MissionManager.idl(76):  		Logger.setLoggingName("MissionManager");
	Logger::setLoggingName("MissionManager");
	// server/zone/managers/mission/MissionManager.idl(78):  		lairObjectTemplatesToSpawn.setNoDuplicateInsertPlan();
	(&lairObjectTemplatesToSpawn)->setNoDuplicateInsertPlan();
	// server/zone/managers/mission/MissionManager.idl(80):  		loadLairObjectsToSpawn();
	loadLairObjectsToSpawn();
	// server/zone/managers/mission/MissionManager.idl(81):  		loadNpcObjectsToSpawn();
	loadNpcObjectsToSpawn();
}

/*
 *	MissionManagerAdapter
 */

MissionManagerAdapter::MissionManagerAdapter(MissionManagerImplementation* obj) : ObserverAdapter(obj) {
}

Packet* MissionManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		loadLairObjectsToSpawn();
		break;
	case 7:
		loadNpcObjectsToSpawn();
		break;
	case 8:
		handleMissionListRequest((MissionTerminal*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case 9:
		handleMissionAccept((MissionTerminal*) inv->getObjectParameter(), (MissionObject*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter());
		break;
	case 10:
		handleMissionAbort((MissionObject*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter());
		break;
	case 11:
		removeMission((MissionObject*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter());
		break;
	case 12:
		populateMissionList((MissionTerminal*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case 13:
		randomizeSurveyMission((PlayerCreature*) inv->getObjectParameter(), (MissionObject*) inv->getObjectParameter());
		break;
	case 14:
		randomizeDestroyMission((PlayerCreature*) inv->getObjectParameter(), (MissionObject*) inv->getObjectParameter());
		break;
	case 15:
		randomizeBountyMission((PlayerCreature*) inv->getObjectParameter(), (MissionObject*) inv->getObjectParameter());
		break;
	case 16:
		randomizeDeliverMission((PlayerCreature*) inv->getObjectParameter(), (MissionObject*) inv->getObjectParameter());
		break;
	case 17:
		randomizeCraftingMission((PlayerCreature*) inv->getObjectParameter(), (MissionObject*) inv->getObjectParameter());
		break;
	case 18:
		randomizeEntertainerMission((PlayerCreature*) inv->getObjectParameter(), (MissionObject*) inv->getObjectParameter());
		break;
	case 19:
		randomizeHuntingMission((PlayerCreature*) inv->getObjectParameter(), (MissionObject*) inv->getObjectParameter());
		break;
	case 20:
		randomizeReconMission((PlayerCreature*) inv->getObjectParameter(), (MissionObject*) inv->getObjectParameter());
		break;
	case 21:
		randomizeImperialDestroyMission((PlayerCreature*) inv->getObjectParameter(), (MissionObject*) inv->getObjectParameter());
		break;
	case 22:
		randomizeImperialDeliverMission((PlayerCreature*) inv->getObjectParameter(), (MissionObject*) inv->getObjectParameter());
		break;
	case 23:
		randomizeRebelDestroyMission((PlayerCreature*) inv->getObjectParameter(), (MissionObject*) inv->getObjectParameter());
		break;
	case 24:
		randomizeRebelDeliverMission((PlayerCreature*) inv->getObjectParameter(), (MissionObject*) inv->getObjectParameter());
		break;
	case 25:
		createMissionObjectives((MissionObject*) inv->getObjectParameter(), (MissionTerminal*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter());
		break;
	case 26:
		createSurveyMissionObjectives((MissionObject*) inv->getObjectParameter(), (MissionTerminal*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter());
		break;
	case 27:
		createDestroyMissionObjectives((MissionObject*) inv->getObjectParameter(), (MissionTerminal*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter());
		break;
	case 28:
		createDeliverMissionObjectives((MissionObject*) inv->getObjectParameter(), (MissionTerminal*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter());
		break;
	case 29:
		createEntertainerMissionObjectives((MissionObject*) inv->getObjectParameter(), (MissionTerminal*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter());
		break;
	case 30:
		createHuntingMissionObjectives((MissionObject*) inv->getObjectParameter(), (MissionTerminal*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter());
		break;
	case 31:
		createReconMissionObjectives((MissionObject*) inv->getObjectParameter(), (MissionTerminal*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter());
		break;
	case 32:
		createBountyMissionObjectives((MissionObject*) inv->getObjectParameter(), (MissionTerminal*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter());
		break;
	case 33:
		resp->insertBoolean(hasSurveyMission((PlayerCreature*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_hasSurveyMission__PlayerCreature_String_)));
		break;
	default:
		return NULL;
	}

	return resp;
}

void MissionManagerAdapter::loadLairObjectsToSpawn() {
	((MissionManagerImplementation*) impl)->loadLairObjectsToSpawn();
}

void MissionManagerAdapter::loadNpcObjectsToSpawn() {
	((MissionManagerImplementation*) impl)->loadNpcObjectsToSpawn();
}

void MissionManagerAdapter::handleMissionListRequest(MissionTerminal* missionTerminal, PlayerCreature* player, int counter) {
	((MissionManagerImplementation*) impl)->handleMissionListRequest(missionTerminal, player, counter);
}

void MissionManagerAdapter::handleMissionAccept(MissionTerminal* missionTerminal, MissionObject* mission, PlayerCreature* player) {
	((MissionManagerImplementation*) impl)->handleMissionAccept(missionTerminal, mission, player);
}

void MissionManagerAdapter::handleMissionAbort(MissionObject* mission, PlayerCreature* player) {
	((MissionManagerImplementation*) impl)->handleMissionAbort(mission, player);
}

void MissionManagerAdapter::removeMission(MissionObject* mission, PlayerCreature* player) {
	((MissionManagerImplementation*) impl)->removeMission(mission, player);
}

void MissionManagerAdapter::populateMissionList(MissionTerminal* missionTerminal, PlayerCreature* player, int counter) {
	((MissionManagerImplementation*) impl)->populateMissionList(missionTerminal, player, counter);
}

void MissionManagerAdapter::randomizeSurveyMission(PlayerCreature* player, MissionObject* mission) {
	((MissionManagerImplementation*) impl)->randomizeSurveyMission(player, mission);
}

void MissionManagerAdapter::randomizeDestroyMission(PlayerCreature* player, MissionObject* mission) {
	((MissionManagerImplementation*) impl)->randomizeDestroyMission(player, mission);
}

void MissionManagerAdapter::randomizeBountyMission(PlayerCreature* player, MissionObject* mission) {
	((MissionManagerImplementation*) impl)->randomizeBountyMission(player, mission);
}

void MissionManagerAdapter::randomizeDeliverMission(PlayerCreature* player, MissionObject* mission) {
	((MissionManagerImplementation*) impl)->randomizeDeliverMission(player, mission);
}

void MissionManagerAdapter::randomizeCraftingMission(PlayerCreature* player, MissionObject* mission) {
	((MissionManagerImplementation*) impl)->randomizeCraftingMission(player, mission);
}

void MissionManagerAdapter::randomizeEntertainerMission(PlayerCreature* player, MissionObject* mission) {
	((MissionManagerImplementation*) impl)->randomizeEntertainerMission(player, mission);
}

void MissionManagerAdapter::randomizeHuntingMission(PlayerCreature* player, MissionObject* mission) {
	((MissionManagerImplementation*) impl)->randomizeHuntingMission(player, mission);
}

void MissionManagerAdapter::randomizeReconMission(PlayerCreature* player, MissionObject* mission) {
	((MissionManagerImplementation*) impl)->randomizeReconMission(player, mission);
}

void MissionManagerAdapter::randomizeImperialDestroyMission(PlayerCreature* player, MissionObject* mission) {
	((MissionManagerImplementation*) impl)->randomizeImperialDestroyMission(player, mission);
}

void MissionManagerAdapter::randomizeImperialDeliverMission(PlayerCreature* player, MissionObject* mission) {
	((MissionManagerImplementation*) impl)->randomizeImperialDeliverMission(player, mission);
}

void MissionManagerAdapter::randomizeRebelDestroyMission(PlayerCreature* player, MissionObject* mission) {
	((MissionManagerImplementation*) impl)->randomizeRebelDestroyMission(player, mission);
}

void MissionManagerAdapter::randomizeRebelDeliverMission(PlayerCreature* player, MissionObject* mission) {
	((MissionManagerImplementation*) impl)->randomizeRebelDeliverMission(player, mission);
}

void MissionManagerAdapter::createMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player) {
	((MissionManagerImplementation*) impl)->createMissionObjectives(mission, missionTerminal, player);
}

void MissionManagerAdapter::createSurveyMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player) {
	((MissionManagerImplementation*) impl)->createSurveyMissionObjectives(mission, missionTerminal, player);
}

void MissionManagerAdapter::createDestroyMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player) {
	((MissionManagerImplementation*) impl)->createDestroyMissionObjectives(mission, missionTerminal, player);
}

void MissionManagerAdapter::createDeliverMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player) {
	((MissionManagerImplementation*) impl)->createDeliverMissionObjectives(mission, missionTerminal, player);
}

void MissionManagerAdapter::createEntertainerMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player) {
	((MissionManagerImplementation*) impl)->createEntertainerMissionObjectives(mission, missionTerminal, player);
}

void MissionManagerAdapter::createHuntingMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player) {
	((MissionManagerImplementation*) impl)->createHuntingMissionObjectives(mission, missionTerminal, player);
}

void MissionManagerAdapter::createReconMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player) {
	((MissionManagerImplementation*) impl)->createReconMissionObjectives(mission, missionTerminal, player);
}

void MissionManagerAdapter::createBountyMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player) {
	((MissionManagerImplementation*) impl)->createBountyMissionObjectives(mission, missionTerminal, player);
}

bool MissionManagerAdapter::hasSurveyMission(PlayerCreature* player, const String& spawn) {
	return ((MissionManagerImplementation*) impl)->hasSurveyMission(player, spawn);
}

/*
 *	MissionManagerHelper
 */

MissionManagerHelper* MissionManagerHelper::staticInitializer = MissionManagerHelper::instance();

MissionManagerHelper::MissionManagerHelper() {
	className = "MissionManager";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void MissionManagerHelper::finalizeHelper() {
	MissionManagerHelper::finalize();
}

DistributedObject* MissionManagerHelper::instantiateObject() {
	return new MissionManager(DummyConstructorParameter::instance());
}

DistributedObjectServant* MissionManagerHelper::instantiateServant() {
	return new MissionManagerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* MissionManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new MissionManagerAdapter((MissionManagerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

