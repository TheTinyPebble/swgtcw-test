/*
 *	server/zone/managers/mission/MissionManager.h generated by engine3 IDL compiler 0.60
 */

#ifndef MISSIONMANAGER_H_
#define MISSIONMANAGER_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {

class ZoneServer;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {

class ZoneProcessServer;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {
namespace objects {
namespace mission {

class MissionObject;

} // namespace mission
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::mission;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace terminal {
namespace mission {

class MissionTerminal;

} // namespace mission
} // namespace terminal
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::terminal::mission;

namespace server {
namespace zone {
namespace objects {
namespace player {

class PlayerCreature;

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

namespace server {
namespace zone {
namespace objects {
namespace region {

class Region;

} // namespace region
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::region;

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

namespace server {
namespace zone {
namespace managers {
namespace stringid {

class StringIdManager;

} // namespace stringid
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::stringid;

#include "server/zone/managers/mission/LairObjectsToSpawnMap.h"

#include "system/util/SortedVector.h"

#include "engine/util/Observer.h"

namespace server {
namespace zone {
namespace managers {
namespace mission {

class MissionManager : public Observer {
public:
	unsigned static const int UNKNOWN_TARGET = 0xB911DA26;

	MissionManager(ZoneServer* srv, ZoneProcessServer* impl);

	void loadLairObjectsToSpawn();

	void loadNpcObjectsToSpawn();

	void handleMissionListRequest(MissionTerminal* missionTerminal, PlayerCreature* player, int counter);

	void handleMissionAccept(MissionTerminal* missionTerminal, MissionObject* mission, PlayerCreature* player);

	void handleMissionAbort(MissionObject* mission, PlayerCreature* player);

	void removeMission(MissionObject* mission, PlayerCreature* player);

	void populateMissionList(MissionTerminal* missionTerminal, PlayerCreature* player, int counter);

	void randomizeSurveyMission(PlayerCreature* player, MissionObject* mission);

	void randomizeDestroyMission(PlayerCreature* player, MissionObject* mission);

	void randomizeBountyMission(PlayerCreature* player, MissionObject* mission);

	void randomizeDeliverMission(PlayerCreature* player, MissionObject* mission);

	void randomizeCraftingMission(PlayerCreature* player, MissionObject* mission);

	void randomizeEntertainerMission(PlayerCreature* player, MissionObject* mission);

	void randomizeHuntingMission(PlayerCreature* player, MissionObject* mission);

	void randomizeReconMission(PlayerCreature* player, MissionObject* mission);

	void randomizeImperialDestroyMission(PlayerCreature* player, MissionObject* mission);

	void randomizeImperialDeliverMission(PlayerCreature* player, MissionObject* mission);

	void randomizeRebelDestroyMission(PlayerCreature* player, MissionObject* mission);

	void randomizeRebelDeliverMission(PlayerCreature* player, MissionObject* mission);

	void createMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player);

	void createSurveyMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player);

	void createDestroyMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player);

	void createDeliverMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player);

	void createEntertainerMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player);

	void createHuntingMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player);

	void createReconMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player);

	void createBountyMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player);

	bool hasSurveyMission(PlayerCreature* player, const String& spawn);

	DistributedObjectServant* _getImplementation();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	MissionManager(DummyConstructorParameter* param);

	virtual ~MissionManager();

	friend class MissionManagerHelper;
};

} // namespace mission
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::mission;

namespace server {
namespace zone {
namespace managers {
namespace mission {

class MissionManagerImplementation : public ObserverImplementation, public Logger {
protected:
	ManagedWeakReference<ZoneServer* > server;

private:
	ManagedReference<ZoneProcessServer* > processor;

protected:
	LairObjectsToSpawnMap lairObjectTemplatesToSpawn;

	SortedVector<unsigned int> npcObjectTemplatesToSpawn;

public:
	unsigned static const int UNKNOWN_TARGET = 0xB911DA26;

	MissionManagerImplementation(ZoneServer* srv, ZoneProcessServer* impl);

	MissionManagerImplementation(DummyConstructorParameter* param);

	void loadLairObjectsToSpawn();

	void loadNpcObjectsToSpawn();

	void handleMissionListRequest(MissionTerminal* missionTerminal, PlayerCreature* player, int counter);

	void handleMissionAccept(MissionTerminal* missionTerminal, MissionObject* mission, PlayerCreature* player);

	void handleMissionAbort(MissionObject* mission, PlayerCreature* player);

	void removeMission(MissionObject* mission, PlayerCreature* player);

	void populateMissionList(MissionTerminal* missionTerminal, PlayerCreature* player, int counter);

	void randomizeSurveyMission(PlayerCreature* player, MissionObject* mission);

	void randomizeDestroyMission(PlayerCreature* player, MissionObject* mission);

	void randomizeBountyMission(PlayerCreature* player, MissionObject* mission);

	void randomizeDeliverMission(PlayerCreature* player, MissionObject* mission);

	void randomizeCraftingMission(PlayerCreature* player, MissionObject* mission);

	void randomizeEntertainerMission(PlayerCreature* player, MissionObject* mission);

	void randomizeHuntingMission(PlayerCreature* player, MissionObject* mission);

	void randomizeReconMission(PlayerCreature* player, MissionObject* mission);

	void randomizeImperialDestroyMission(PlayerCreature* player, MissionObject* mission);

	void randomizeImperialDeliverMission(PlayerCreature* player, MissionObject* mission);

	void randomizeRebelDestroyMission(PlayerCreature* player, MissionObject* mission);

	void randomizeRebelDeliverMission(PlayerCreature* player, MissionObject* mission);

	void createMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player);

	void createSurveyMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player);

	void createDestroyMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player);

	void createDeliverMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player);

	void createEntertainerMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player);

	void createHuntingMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player);

	void createReconMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player);

	void createBountyMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player);

	bool hasSurveyMission(PlayerCreature* player, const String& spawn);

	MissionManager* _this;

	operator const MissionManager*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~MissionManagerImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();

	friend class MissionManager;
};

class MissionManagerAdapter : public ObserverAdapter {
public:
	MissionManagerAdapter(MissionManagerImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void loadLairObjectsToSpawn();

	void loadNpcObjectsToSpawn();

	void handleMissionListRequest(MissionTerminal* missionTerminal, PlayerCreature* player, int counter);

	void handleMissionAccept(MissionTerminal* missionTerminal, MissionObject* mission, PlayerCreature* player);

	void handleMissionAbort(MissionObject* mission, PlayerCreature* player);

	void removeMission(MissionObject* mission, PlayerCreature* player);

	void populateMissionList(MissionTerminal* missionTerminal, PlayerCreature* player, int counter);

	void randomizeSurveyMission(PlayerCreature* player, MissionObject* mission);

	void randomizeDestroyMission(PlayerCreature* player, MissionObject* mission);

	void randomizeBountyMission(PlayerCreature* player, MissionObject* mission);

	void randomizeDeliverMission(PlayerCreature* player, MissionObject* mission);

	void randomizeCraftingMission(PlayerCreature* player, MissionObject* mission);

	void randomizeEntertainerMission(PlayerCreature* player, MissionObject* mission);

	void randomizeHuntingMission(PlayerCreature* player, MissionObject* mission);

	void randomizeReconMission(PlayerCreature* player, MissionObject* mission);

	void randomizeImperialDestroyMission(PlayerCreature* player, MissionObject* mission);

	void randomizeImperialDeliverMission(PlayerCreature* player, MissionObject* mission);

	void randomizeRebelDestroyMission(PlayerCreature* player, MissionObject* mission);

	void randomizeRebelDeliverMission(PlayerCreature* player, MissionObject* mission);

	void createMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player);

	void createSurveyMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player);

	void createDestroyMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player);

	void createDeliverMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player);

	void createEntertainerMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player);

	void createHuntingMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player);

	void createReconMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player);

	void createBountyMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player);

	bool hasSurveyMission(PlayerCreature* player, const String& spawn);

protected:
	String _param1_hasSurveyMission__PlayerCreature_String_;
};

class MissionManagerHelper : public DistributedObjectClassHelper, public Singleton<MissionManagerHelper> {
	static MissionManagerHelper* staticInitializer;

public:
	MissionManagerHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<MissionManagerHelper>;
};

} // namespace mission
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::mission;

#endif /*MISSIONMANAGER_H_*/
