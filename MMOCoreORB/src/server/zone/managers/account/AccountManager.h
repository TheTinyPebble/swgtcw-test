/*
 *	server/zone/managers/account/AccountManager.h generated by engine3 IDL compiler 0.60
 */

#ifndef ACCOUNTMANAGER_H_
#define ACCOUNTMANAGER_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {

class ZoneServer;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {

class ZoneClientSession;

} // namespace zone
} // namespace server

using namespace server::zone;

#include "server/zone/managers/account/ZoneAccount.h"

#include "engine/core/ManagedObject.h"

#include "engine/log/Logger.h"

#include "system/util/VectorMap.h"

namespace server {
namespace zone {
namespace managers {
namespace account {

class AccountManager : public ManagedObject {
public:
	AccountManager(ZoneServer* zserv);

	void registerSession(ZoneClientSession* client);

	void unregisterSession(ZoneClientSession* client);

	int getOnlineCharactersPerAccount();

	void setOnlineCharactersPerAccount(int total);

	int getTotalOnlineCharacters(unsigned int accountid);

	DistributedObjectServant* _getImplementation();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	AccountManager(DummyConstructorParameter* param);

	virtual ~AccountManager();

	friend class AccountManagerHelper;
};

} // namespace account
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::account;

namespace server {
namespace zone {
namespace managers {
namespace account {

class AccountManagerImplementation : public ManagedObjectImplementation, public Logger {
	ManagedWeakReference<ZoneServer* > zoneServer;

	int onlineCharactersPerAccount;

	VectorMap<unsigned int, ZoneAccount*> accountMap;

public:
	AccountManagerImplementation(ZoneServer* zserv);

	AccountManagerImplementation(DummyConstructorParameter* param);

	void registerSession(ZoneClientSession* client);

	void unregisterSession(ZoneClientSession* client);

	int getOnlineCharactersPerAccount();

	void setOnlineCharactersPerAccount(int total);

	int getTotalOnlineCharacters(unsigned int accountid);

	AccountManager* _this;

	operator const AccountManager*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~AccountManagerImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();

	friend class AccountManager;
};

class AccountManagerAdapter : public ManagedObjectAdapter {
public:
	AccountManagerAdapter(AccountManagerImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void registerSession(ZoneClientSession* client);

	void unregisterSession(ZoneClientSession* client);

	int getOnlineCharactersPerAccount();

	void setOnlineCharactersPerAccount(int total);

	int getTotalOnlineCharacters(unsigned int accountid);

};

class AccountManagerHelper : public DistributedObjectClassHelper, public Singleton<AccountManagerHelper> {
	static AccountManagerHelper* staticInitializer;

public:
	AccountManagerHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<AccountManagerHelper>;
};

} // namespace account
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::account;

#endif /*ACCOUNTMANAGER_H_*/
