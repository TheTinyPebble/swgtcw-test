/*
 *	server/zone/managers/director/ScreenPlayObserver.cpp generated by engine3 IDL compiler 0.60
 */

#include "ScreenPlayObserver.h"

/*
 *	ScreenPlayObserverStub
 */

enum {RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_ = 6,RPC_SETSCREENPLAY__STRING_,RPC_SETSCREENKEY__STRING_,RPC_GETSCREENPLAY__,RPC_GETSCREENKEY__};

ScreenPlayObserver::ScreenPlayObserver() : Observer(DummyConstructorParameter::instance()) {
	ScreenPlayObserverImplementation* _implementation = new ScreenPlayObserverImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("ScreenPlayObserver");
}

ScreenPlayObserver::ScreenPlayObserver(DummyConstructorParameter* param) : Observer(param) {
	_setClassName("ScreenPlayObserver");
}

ScreenPlayObserver::~ScreenPlayObserver() {
}



int ScreenPlayObserver::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	ScreenPlayObserverImplementation* _implementation = static_cast<ScreenPlayObserverImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(observable);
		method.addObjectParameter(arg1);
		method.addSignedLongParameter(arg2);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyObserverEvent(eventType, observable, arg1, arg2);
}

void ScreenPlayObserver::setScreenPlay(const String& screen) {
	ScreenPlayObserverImplementation* _implementation = static_cast<ScreenPlayObserverImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSCREENPLAY__STRING_);
		method.addAsciiParameter(screen);

		method.executeWithVoidReturn();
	} else
		_implementation->setScreenPlay(screen);
}

void ScreenPlayObserver::setScreenKey(const String& screenKey) {
	ScreenPlayObserverImplementation* _implementation = static_cast<ScreenPlayObserverImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSCREENKEY__STRING_);
		method.addAsciiParameter(screenKey);

		method.executeWithVoidReturn();
	} else
		_implementation->setScreenKey(screenKey);
}

String ScreenPlayObserver::getScreenPlay() {
	ScreenPlayObserverImplementation* _implementation = static_cast<ScreenPlayObserverImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSCREENPLAY__);

		String _return_getScreenPlay;
		method.executeWithAsciiReturn(_return_getScreenPlay);
		return _return_getScreenPlay;
	} else
		return _implementation->getScreenPlay();
}

String ScreenPlayObserver::getScreenKey() {
	ScreenPlayObserverImplementation* _implementation = static_cast<ScreenPlayObserverImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSCREENKEY__);

		String _return_getScreenKey;
		method.executeWithAsciiReturn(_return_getScreenKey);
		return _return_getScreenKey;
	} else
		return _implementation->getScreenKey();
}

DistributedObjectServant* ScreenPlayObserver::_getImplementation() {

	_updated = true;
	return _impl;
}

void ScreenPlayObserver::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	ScreenPlayObserverImplementation
 */

ScreenPlayObserverImplementation::ScreenPlayObserverImplementation(DummyConstructorParameter* param) : ObserverImplementation(param) {
	_initializeImplementation();
}


ScreenPlayObserverImplementation::~ScreenPlayObserverImplementation() {
}


void ScreenPlayObserverImplementation::finalize() {
}

void ScreenPlayObserverImplementation::_initializeImplementation() {
	_setClassHelper(ScreenPlayObserverHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void ScreenPlayObserverImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<ScreenPlayObserver*>(stub);
	ObserverImplementation::_setStub(stub);
}

DistributedObjectStub* ScreenPlayObserverImplementation::_getStub() {
	return _this;
}

ScreenPlayObserverImplementation::operator const ScreenPlayObserver*() {
	return _this;
}

void ScreenPlayObserverImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void ScreenPlayObserverImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void ScreenPlayObserverImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void ScreenPlayObserverImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void ScreenPlayObserverImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void ScreenPlayObserverImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void ScreenPlayObserverImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void ScreenPlayObserverImplementation::_serializationHelperMethod() {
	ObserverImplementation::_serializationHelperMethod();

	_setClassName("ScreenPlayObserver");

}

void ScreenPlayObserverImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(ScreenPlayObserverImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ScreenPlayObserverImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ObserverImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "ScreenPlayObserver.play") {
		TypeInfo<String >::parseFromBinaryStream(&play, stream);
		return true;
	}

	if (_name == "ScreenPlayObserver.key") {
		TypeInfo<String >::parseFromBinaryStream(&key, stream);
		return true;
	}


	return false;
}

void ScreenPlayObserverImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ScreenPlayObserverImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ScreenPlayObserverImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ObserverImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;
	_name = "ScreenPlayObserver.play";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&play, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "ScreenPlayObserver.key";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&key, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 2;
}

ScreenPlayObserverImplementation::ScreenPlayObserverImplementation() {
	_initializeImplementation();
	// server/zone/managers/director/ScreenPlayObserver.idl():  		play = "";
	play = "";
}

void ScreenPlayObserverImplementation::setScreenPlay(const String& screen) {
	// server/zone/managers/director/ScreenPlayObserver.idl():  		play = screen;
	play = screen;
}

void ScreenPlayObserverImplementation::setScreenKey(const String& screenKey) {
	// server/zone/managers/director/ScreenPlayObserver.idl():  		key = screenKey;
	key = screenKey;
}

String ScreenPlayObserverImplementation::getScreenPlay() {
	// server/zone/managers/director/ScreenPlayObserver.idl():  		return play;
	return play;
}

String ScreenPlayObserverImplementation::getScreenKey() {
	// server/zone/managers/director/ScreenPlayObserver.idl():  		return key;
	return key;
}

/*
 *	ScreenPlayObserverAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


ScreenPlayObserverAdapter::ScreenPlayObserverAdapter(ScreenPlayObserver* obj) : ObserverAdapter(obj) {
}

void ScreenPlayObserverAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_:
		{
			resp->insertSignedInt(notifyObserverEvent(inv->getUnsignedIntParameter(), static_cast<Observable*>(inv->getObjectParameter()), static_cast<ManagedObject*>(inv->getObjectParameter()), inv->getSignedLongParameter()));
		}
		break;
	case RPC_SETSCREENPLAY__STRING_:
		{
			String screen; 
			setScreenPlay(inv->getAsciiParameter(screen));
		}
		break;
	case RPC_SETSCREENKEY__STRING_:
		{
			String screenKey; 
			setScreenKey(inv->getAsciiParameter(screenKey));
		}
		break;
	case RPC_GETSCREENPLAY__:
		{
			resp->insertAscii(getScreenPlay());
		}
		break;
	case RPC_GETSCREENKEY__:
		{
			resp->insertAscii(getScreenKey());
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

int ScreenPlayObserverAdapter::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	return (static_cast<ScreenPlayObserver*>(stub))->notifyObserverEvent(eventType, observable, arg1, arg2);
}

void ScreenPlayObserverAdapter::setScreenPlay(const String& screen) {
	(static_cast<ScreenPlayObserver*>(stub))->setScreenPlay(screen);
}

void ScreenPlayObserverAdapter::setScreenKey(const String& screenKey) {
	(static_cast<ScreenPlayObserver*>(stub))->setScreenKey(screenKey);
}

String ScreenPlayObserverAdapter::getScreenPlay() {
	return (static_cast<ScreenPlayObserver*>(stub))->getScreenPlay();
}

String ScreenPlayObserverAdapter::getScreenKey() {
	return (static_cast<ScreenPlayObserver*>(stub))->getScreenKey();
}

/*
 *	ScreenPlayObserverHelper
 */

ScreenPlayObserverHelper* ScreenPlayObserverHelper::staticInitializer = ScreenPlayObserverHelper::instance();

ScreenPlayObserverHelper::ScreenPlayObserverHelper() {
	className = "ScreenPlayObserver";

	Core::getObjectBroker()->registerClass(className, this);
}

void ScreenPlayObserverHelper::finalizeHelper() {
	ScreenPlayObserverHelper::finalize();
}

DistributedObject* ScreenPlayObserverHelper::instantiateObject() {
	return new ScreenPlayObserver(DummyConstructorParameter::instance());
}

DistributedObjectServant* ScreenPlayObserverHelper::instantiateServant() {
	return new ScreenPlayObserverImplementation();
}

DistributedObjectAdapter* ScreenPlayObserverHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ScreenPlayObserverAdapter(static_cast<ScreenPlayObserver*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

