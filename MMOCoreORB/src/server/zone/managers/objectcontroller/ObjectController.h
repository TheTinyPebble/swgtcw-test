/*
 *	server/zone/managers/objectcontroller/ObjectController.h generated by engine3 IDL compiler 0.60
 */

#ifndef OBJECTCONTROLLER_H_
#define OBJECTCONTROLLER_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

namespace server {
namespace zone {
namespace managers {
namespace objectcontroller {
namespace command {

class CommandQueueManager;

} // namespace command
} // namespace objectcontroller
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::objectcontroller::command;

namespace server {
namespace zone {

class ZoneServer;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {

class ZoneProcessServerImplementation;

} // namespace zone
} // namespace server

using namespace server::zone;

#include "engine/core/ManagedObject.h"

#include "engine/log/Logger.h"

namespace server {
namespace zone {
namespace managers {
namespace objectcontroller {

class ObjectController : public ManagedObject {
public:
	ObjectController(ZoneProcessServerImplementation* server);

	CommandQueueManager* getCommandQueueManager();

protected:
	ObjectController(DummyConstructorParameter* param);

	virtual ~ObjectController();

	friend class ObjectControllerHelper;
};

} // namespace objectcontroller
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::objectcontroller;

namespace server {
namespace zone {
namespace managers {
namespace objectcontroller {

class ObjectControllerImplementation : public ManagedObjectImplementation, public Logger {
	ZoneProcessServerImplementation* server;

	ManagedReference<CommandQueueManager* > commandQueueManager;

public:
	ObjectControllerImplementation(ZoneProcessServerImplementation* server);

	CommandQueueManager* getCommandQueueManager();

	ObjectController* _this;

	operator const ObjectController*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~ObjectControllerImplementation();

	void _setStub(DistributedObjectStub* stub);

	void _serializationHelperMethod();

	friend class ObjectController;
};

class ObjectControllerAdapter : public ManagedObjectAdapter {
public:
	ObjectControllerAdapter(ObjectControllerImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	CommandQueueManager* getCommandQueueManager();

};

class ObjectControllerHelper : public DistributedObjectClassHelper, public Singleton<ObjectControllerHelper> {
	static ObjectControllerHelper* staticInitializer;

public:
	ObjectControllerHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<ObjectControllerHelper>;
};

} // namespace objectcontroller
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::objectcontroller;

#endif /*OBJECTCONTROLLER_H_*/
