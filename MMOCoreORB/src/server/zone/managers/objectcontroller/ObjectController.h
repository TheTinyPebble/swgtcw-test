/*
 *	server/zone/managers/objectcontroller/ObjectController.h generated by engine3 IDL compiler 0.60
 */

#ifndef OBJECTCONTROLLER_H_
#define OBJECTCONTROLLER_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

namespace server {
namespace zone {
namespace managers {
namespace objectcontroller {
namespace command {

class CommandList;

} // namespace command
} // namespace objectcontroller
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::objectcontroller::command;

namespace server {
namespace zone {
namespace managers {
namespace objectcontroller {
namespace command {

class CommandConfigManager;

} // namespace command
} // namespace objectcontroller
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::objectcontroller::command;

namespace server {
namespace zone {
namespace objects {
namespace creature {
namespace commands {

class QueueCommand;

} // namespace commands
} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature::commands;

namespace server {
namespace zone {

class ZoneServer;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {

class ZoneProcessServerImplementation;

} // namespace zone
} // namespace server

using namespace server::zone;

#include "engine/core/ManagedObject.h"

#include "engine/lua/Lua.h"

#include "engine/log/Logger.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

namespace server {
namespace zone {
namespace managers {
namespace objectcontroller {

class ObjectController : public ManagedObject {
public:
	ObjectController(ZoneProcessServerImplementation* server);

	bool transferObject(SceneObject* objectToTransfer, SceneObject* destinationObject, int containmentType, bool notifyClient = false);

	void enqueueCommand(CreatureObject* object, unsigned int actionCRC, unsigned int actionCount, unsigned long long targetID, UnicodeString& arguments);

	void addQueueCommand(QueueCommand* command);

	QueueCommand* getQueueCommand(const String& name);

	QueueCommand* getQueueCommand(unsigned int crc);

protected:
	ObjectController(DummyConstructorParameter* param);

	virtual ~ObjectController();

	friend class ObjectControllerHelper;
};

} // namespace objectcontroller
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::objectcontroller;

namespace server {
namespace zone {
namespace managers {
namespace objectcontroller {

class ObjectControllerImplementation : public ManagedObjectImplementation, public Lua {
	ZoneProcessServerImplementation* server;

	CommandConfigManager* configManager;

	CommandList* queueCommands;

public:
	ObjectControllerImplementation(ZoneProcessServerImplementation* server);

	ObjectControllerImplementation(DummyConstructorParameter* param);

	bool transferObject(SceneObject* objectToTransfer, SceneObject* destinationObject, int containmentType, bool notifyClient = false);

	void enqueueCommand(CreatureObject* object, unsigned int actionCRC, unsigned int actionCount, unsigned long long targetID, UnicodeString& arguments);

	void addQueueCommand(QueueCommand* command);

	QueueCommand* getQueueCommand(const String& name);

	QueueCommand* getQueueCommand(unsigned int crc);

	ObjectController* _this;

	operator const ObjectController*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~ObjectControllerImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();

	friend class ObjectController;
};

class ObjectControllerAdapter : public ManagedObjectAdapter {
public:
	ObjectControllerAdapter(ObjectControllerImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	bool transferObject(SceneObject* objectToTransfer, SceneObject* destinationObject, int containmentType, bool notifyClient);

	void enqueueCommand(CreatureObject* object, unsigned int actionCRC, unsigned int actionCount, unsigned long long targetID, UnicodeString& arguments);

protected:
	UnicodeString _param4_enqueueCommand__CreatureObject_int_int_long_UnicodeString_;
};

class ObjectControllerHelper : public DistributedObjectClassHelper, public Singleton<ObjectControllerHelper> {
	static ObjectControllerHelper* staticInitializer;

public:
	ObjectControllerHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<ObjectControllerHelper>;
};

} // namespace objectcontroller
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::objectcontroller;

#endif /*OBJECTCONTROLLER_H_*/
