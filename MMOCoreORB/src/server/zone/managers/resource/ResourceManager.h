/*
 *	server/zone/managers/resource/ResourceManager.h generated by engine3 IDL compiler 0.55
 */

#ifndef RESOURCEMANAGER_H_
#define RESOURCEMANAGER_H_

#include "engine/orb/DistributedObjectBroker.h"

class Player;

class ResourceContainer;

class Creature;

class ResourceList;

class ZoneServer;

class ZoneProcessServerImplementation;

class SuiListBox;

class SuiListBoxVector;

class ResourceManager : public DistributedObjectStub {
public:
	ResourceManager(ZoneServer* server, ZoneProcessServerImplementation* processor);

	void theShift();

	void stop();

	void clearResources();

	bool checkResource(Player* player, String& resourcename, int SurveyToolType);

	void sendSurveyMessage(Player* player, String& resourcename);

	void sendSampleMessage(Player* player, String& resourcename);

	void setResourceData(ResourceContainer* resContainer, bool lock = false);

	bool sendSurveyResources(Player* player, int SurveyToolType);

	void getClassSeven(const String& str, String& clas);

	void getResourceContainerName(const String& str, String& name);

	void printResource(String& resname);

	void harvestOrganics(Player* player, Creature* creature, int type);

	ResourceList* getResourceListAtLocation(int zone, float x, float y, int type);

	String& getResourceNameByID(unsigned long long rID);

	void generateSUI(Player* player, SuiListBox* sui);

	bool useResourceDeed(Player* player, String& resourceName, int resourceQuantity);

	bool containsResource(String& resourceName);

	void giveForageResource(Player* player, float foragex, float foragey, int forageplanet);

protected:
	ResourceManager(DummyConstructorParameter* param);

	virtual ~ResourceManager();

	String _return_getResourceNameByID;

	friend class ResourceManagerHelper;
};

class ResourceManagerImplementation;

class ResourceManagerAdapter : public DistributedObjectAdapter {
public:
	ResourceManagerAdapter(ResourceManagerImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void theShift();

	void stop();

	void clearResources();

	bool checkResource(Player* player, String& resourcename, int SurveyToolType);

	void sendSurveyMessage(Player* player, String& resourcename);

	void sendSampleMessage(Player* player, String& resourcename);

	void setResourceData(ResourceContainer* resContainer, bool lock);

	bool sendSurveyResources(Player* player, int SurveyToolType);

	void getClassSeven(const String& str, String& clas);

	void getResourceContainerName(const String& str, String& name);

	void printResource(String& resname);

	void harvestOrganics(Player* player, Creature* creature, int type);

	ResourceList* getResourceListAtLocation(int zone, float x, float y, int type);

	String& getResourceNameByID(unsigned long long rID);

	void generateSUI(Player* player, SuiListBox* sui);

	bool useResourceDeed(Player* player, String& resourceName, int resourceQuantity);

	bool containsResource(String& resourceName);

	void giveForageResource(Player* player, float foragex, float foragey, int forageplanet);

protected:
	String _param1_checkResource__Player_String_int_;
	String _param1_sendSurveyMessage__Player_String_;
	String _param1_sendSampleMessage__Player_String_;
	String _param0_getClassSeven__String_String_;
	String _param1_getClassSeven__String_String_;
	String _param0_getResourceContainerName__String_String_;
	String _param1_getResourceContainerName__String_String_;
	String _param0_printResource__String_;
	String _param1_useResourceDeed__Player_String_int_;
	String _param0_containsResource__String_;
};

class ResourceManagerHelper : public DistributedObjectClassHelper, public Singleton<ResourceManagerHelper> {
	static ResourceManagerHelper* staticInitializer;

public:
	ResourceManagerHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class SingletonWrapper<ResourceManagerHelper>;
};

class ResourceManagerServant : public DistributedObjectServant {
public:
	ResourceManager* _this;

public:
	ResourceManagerServant();
	virtual ~ResourceManagerServant();

	void _setStub(DistributedObjectStub* stub);
	DistributedObjectStub* _getStub();

};

#endif /*RESOURCEMANAGER_H_*/
