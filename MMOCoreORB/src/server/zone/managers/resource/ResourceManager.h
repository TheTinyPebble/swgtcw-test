/*
 *	server/zone/managers/resource/ResourceManager.h generated by engine3 IDL compiler 0.60
 */

#ifndef RESOURCEMANAGER_H_
#define RESOURCEMANAGER_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {

class ZoneServer;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {

class ZoneProcessServerImplementation;

} // namespace zone
} // namespace server

using namespace server::zone;

#include "server/zone/managers/resource/resourcespawner/ResourceSpawner.h"

#include "server/zone/managers/resource/ResourceShiftTask.h"

#include "engine/core/ManagedObject.h"

#include "engine/lua/Lua.h"

#include "engine/log/Logger.h"

namespace server {
namespace zone {
namespace managers {
namespace resource {

class ResourceManager : public ManagedObject {
public:
	ResourceManager(ZoneServer* server, ZoneProcessServerImplementation* impl);

	void stop();

	void initialize();

protected:
	ResourceManager(DummyConstructorParameter* param);

	virtual ~ResourceManager();

	friend class ResourceManagerHelper;
};

} // namespace resource
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::resource;

namespace server {
namespace zone {
namespace managers {
namespace resource {

class ResourceManagerImplementation : public ManagedObjectImplementation, public Lua {
	ZoneProcessServerImplementation* processor;

	ManagedReference<ZoneServer* > zoneServer;

	ResourceSpawner* resourceSpawner;

	ResourceShiftTask* resourceShift;

public:
	ResourceManagerImplementation(ZoneServer* server, ZoneProcessServerImplementation* impl);

	ResourceManagerImplementation(DummyConstructorParameter* param);

	void stop();

	void initialize();

private:
	bool loadConfigFile();

	bool loadConfigData();

	void loadDefaultConfig();

	void startResourceSpawner();

	void shiftResources();

public:
	ResourceManager* _this;

	operator const ResourceManager*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~ResourceManagerImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();

	friend class ResourceManager;
};

class ResourceManagerAdapter : public ManagedObjectAdapter {
public:
	ResourceManagerAdapter(ResourceManagerImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void stop();

	void initialize();

};

class ResourceManagerHelper : public DistributedObjectClassHelper, public Singleton<ResourceManagerHelper> {
	static ResourceManagerHelper* staticInitializer;

public:
	ResourceManagerHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<ResourceManagerHelper>;
};

} // namespace resource
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::resource;

#endif /*RESOURCEMANAGER_H_*/
