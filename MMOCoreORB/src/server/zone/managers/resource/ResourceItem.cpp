/*
 *	server/zone/managers/resource/ResourceItem.cpp generated by engine3 IDL compiler 0.55
 */

#include "ResourceItem.h"

#include "ResourceItemImplementation.h"

#include "ResourceItem.h"

/*
 *	ResourceItemStub
 */

ResourceItem::ResourceItem() : ManagedObject(DummyConstructorParameter::instance()) {
	_impl = new ResourceItemImplementation();
	_impl->_setStub(this);
}

ResourceItem::ResourceItem(unsigned long long oid, unsigned long long sid, unsigned long long expire, String& n, String& t, int d) : ManagedObject(DummyConstructorParameter::instance()) {
	_impl = new ResourceItemImplementation(oid, sid, expire, n, t, d);
	_impl->_setStub(this);
}

ResourceItem::ResourceItem(DummyConstructorParameter* param) : ManagedObject(param) {
}

ResourceItem::~ResourceItem() {
}

unsigned long long ResourceItem::getObjectID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((ResourceItemImplementation*) _impl)->getObjectID();
}

unsigned long long ResourceItem::getSpawnID() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((ResourceItemImplementation*) _impl)->getSpawnID();
}

unsigned long long ResourceItem::getSpawnExpireTimestamp() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((ResourceItemImplementation*) _impl)->getSpawnExpireTimestamp();
}

String& ResourceItem::getName() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		method.executeWithAsciiReturn(_return_getName);
		return _return_getName;
	} else
		return ((ResourceItemImplementation*) _impl)->getName();
}

String& ResourceItem::getType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		method.executeWithAsciiReturn(_return_getType);
		return _return_getType;
	} else
		return ((ResourceItemImplementation*) _impl)->getType();
}

int ResourceItem::getDensity() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		return method.executeWithSignedIntReturn();
	} else
		return ((ResourceItemImplementation*) _impl)->getDensity();
}

/*
 *	ResourceItemAdapter
 */

ResourceItemAdapter::ResourceItemAdapter(ResourceItemImplementation* obj) : ManagedObjectAdapter(obj) {
}

Packet* ResourceItemAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertLong(getObjectID());
		break;
	case 7:
		resp->insertLong(getSpawnID());
		break;
	case 8:
		resp->insertLong(getSpawnExpireTimestamp());
		break;
	case 9:
		resp->insertAscii(getName());
		break;
	case 10:
		resp->insertAscii(getType());
		break;
	case 11:
		resp->insertSignedInt(getDensity());
		break;
	default:
		return NULL;
	}

	return resp;
}

unsigned long long ResourceItemAdapter::getObjectID() {
	return ((ResourceItemImplementation*) impl)->getObjectID();
}

unsigned long long ResourceItemAdapter::getSpawnID() {
	return ((ResourceItemImplementation*) impl)->getSpawnID();
}

unsigned long long ResourceItemAdapter::getSpawnExpireTimestamp() {
	return ((ResourceItemImplementation*) impl)->getSpawnExpireTimestamp();
}

String& ResourceItemAdapter::getName() {
	return ((ResourceItemImplementation*) impl)->getName();
}

String& ResourceItemAdapter::getType() {
	return ((ResourceItemImplementation*) impl)->getType();
}

int ResourceItemAdapter::getDensity() {
	return ((ResourceItemImplementation*) impl)->getDensity();
}

/*
 *	ResourceItemHelper
 */

ResourceItemHelper* ResourceItemHelper::staticInitializer = ResourceItemHelper::instance();

ResourceItemHelper::ResourceItemHelper() {
	className = "ResourceItem";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void ResourceItemHelper::finalizeHelper() {
	ResourceItemHelper::finalize();
}

DistributedObject* ResourceItemHelper::instantiateObject() {
	return new ResourceItem(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ResourceItemHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ResourceItemAdapter((ResourceItemImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	ResourceItemServant
 */

ResourceItemServant::ResourceItemServant() : ManagedObjectImplementation() {
	_classHelper = ResourceItemHelper::instance();
}

ResourceItemServant::~ResourceItemServant() {
}

void ResourceItemServant::_setStub(DistributedObjectStub* stub) {
	_this = (ResourceItem*) stub;
	ManagedObjectServant::_setStub(stub);
}

DistributedObjectStub* ResourceItemServant::_getStub() {
	return _this;
}

