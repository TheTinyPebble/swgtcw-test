/*
 *	server/zone/managers/resource/ResourceList.cpp generated by engine3 IDL compiler 0.55
 */

#include "ResourceList.h"

#include "ResourceListImplementation.h"

#include "ResourceItem.h"

/*
 *	ResourceListStub
 */

ResourceList::ResourceList() : ManagedObject(DummyConstructorParameter::instance()) {
	_impl = new ResourceListImplementation();
	_impl->_setStub(this);
}

ResourceList::ResourceList(DummyConstructorParameter* param) : ManagedObject(param) {
}

ResourceList::~ResourceList() {
}

bool ResourceList::contains(String& key) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addAsciiParameter(key);

		return method.executeWithBooleanReturn();
	} else
		return ((ResourceListImplementation*) _impl)->contains(key);
}

int ResourceList::size() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		return method.executeWithSignedIntReturn();
	} else
		return ((ResourceListImplementation*) _impl)->size();
}

int ResourceList::put(String& key, ResourceItem* res) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addAsciiParameter(key);
		method.addObjectParameter(res);

		return method.executeWithSignedIntReturn();
	} else
		return ((ResourceListImplementation*) _impl)->put(key, res);
}

ResourceItem* ResourceList::get(int index) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addSignedIntParameter(index);

		return (ResourceItem*) method.executeWithObjectReturn();
	} else
		return ((ResourceListImplementation*) _impl)->get(index);
}

/*
 *	ResourceListAdapter
 */

ResourceListAdapter::ResourceListAdapter(ResourceListImplementation* obj) : ManagedObjectAdapter(obj) {
}

Packet* ResourceListAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertBoolean(contains(inv->getAsciiParameter(_param0_contains__String_)));
		break;
	case 7:
		resp->insertSignedInt(size());
		break;
	case 8:
		resp->insertSignedInt(put(inv->getAsciiParameter(_param0_put__String_ResourceItem_), (ResourceItem*) inv->getObjectParameter()));
		break;
	case 9:
		resp->insertLong(get(inv->getSignedIntParameter())->_getObjectID());
		break;
	default:
		return NULL;
	}

	return resp;
}

bool ResourceListAdapter::contains(String& key) {
	return ((ResourceListImplementation*) impl)->contains(key);
}

int ResourceListAdapter::size() {
	return ((ResourceListImplementation*) impl)->size();
}

int ResourceListAdapter::put(String& key, ResourceItem* res) {
	return ((ResourceListImplementation*) impl)->put(key, res);
}

ResourceItem* ResourceListAdapter::get(int index) {
	return ((ResourceListImplementation*) impl)->get(index);
}

/*
 *	ResourceListHelper
 */

ResourceListHelper* ResourceListHelper::staticInitializer = ResourceListHelper::instance();

ResourceListHelper::ResourceListHelper() {
	className = "ResourceList";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void ResourceListHelper::finalizeHelper() {
	ResourceListHelper::finalize();
}

DistributedObject* ResourceListHelper::instantiateObject() {
	return new ResourceList(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ResourceListHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ResourceListAdapter((ResourceListImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	ResourceListServant
 */

ResourceListServant::ResourceListServant() : ManagedObjectImplementation() {
	_classHelper = ResourceListHelper::instance();
}

ResourceListServant::~ResourceListServant() {
}

void ResourceListServant::_setStub(DistributedObjectStub* stub) {
	_this = (ResourceList*) stub;
	ManagedObjectServant::_setStub(stub);
}

DistributedObjectStub* ResourceListServant::_getStub() {
	return _this;
}

