/*
 *	server/zone/managers/resource/SpawnLocation.cpp generated by engine3 IDL compiler 0.55
 */

#include "SpawnLocation.h"

#include "SpawnLocationImplementation.h"

#include "ResourceSpawn.h"

#include "../../objects/scene/SceneObject.h"

/*
 *	SpawnLocationStub
 */

SpawnLocation::SpawnLocation(unsigned long long oid, int inPlanet, float inX, float inY, float inRadius, float inMax, unsigned long long et, String& inPool) : SceneObject(DummyConstructorParameter::instance()) {
	_impl = new SpawnLocationImplementation(oid, inPlanet, inX, inY, inRadius, inMax, et, inPool);
	_impl->_setStub(this);
}

SpawnLocation::SpawnLocation(DummyConstructorParameter* param) : SceneObject(param) {
}

SpawnLocation::~SpawnLocation() {
}

int SpawnLocation::getPlanet() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		return method.executeWithSignedIntReturn();
	} else
		return ((SpawnLocationImplementation*) _impl)->getPlanet();
}

float SpawnLocation::getX() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		return method.executeWithFloatReturn();
	} else
		return ((SpawnLocationImplementation*) _impl)->getX();
}

float SpawnLocation::getY() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		return method.executeWithFloatReturn();
	} else
		return ((SpawnLocationImplementation*) _impl)->getY();
}

float SpawnLocation::getRadius() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return method.executeWithFloatReturn();
	} else
		return ((SpawnLocationImplementation*) _impl)->getRadius();
}

float SpawnLocation::getMax() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		return method.executeWithFloatReturn();
	} else
		return ((SpawnLocationImplementation*) _impl)->getMax();
}

unsigned long long SpawnLocation::getExpireTime() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((SpawnLocationImplementation*) _impl)->getExpireTime();
}

String& SpawnLocation::getPool() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		method.executeWithAsciiReturn(_return_getPool);
		return _return_getPool;
	} else
		return ((SpawnLocationImplementation*) _impl)->getPool();
}

/*
 *	SpawnLocationAdapter
 */

SpawnLocationAdapter::SpawnLocationAdapter(SpawnLocationImplementation* obj) : SceneObjectAdapter(obj) {
}

Packet* SpawnLocationAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertSignedInt(getPlanet());
		break;
	case 7:
		resp->insertFloat(getX());
		break;
	case 8:
		resp->insertFloat(getY());
		break;
	case 9:
		resp->insertFloat(getRadius());
		break;
	case 10:
		resp->insertFloat(getMax());
		break;
	case 11:
		resp->insertLong(getExpireTime());
		break;
	case 12:
		resp->insertAscii(getPool());
		break;
	default:
		return NULL;
	}

	return resp;
}

int SpawnLocationAdapter::getPlanet() {
	return ((SpawnLocationImplementation*) impl)->getPlanet();
}

float SpawnLocationAdapter::getX() {
	return ((SpawnLocationImplementation*) impl)->getX();
}

float SpawnLocationAdapter::getY() {
	return ((SpawnLocationImplementation*) impl)->getY();
}

float SpawnLocationAdapter::getRadius() {
	return ((SpawnLocationImplementation*) impl)->getRadius();
}

float SpawnLocationAdapter::getMax() {
	return ((SpawnLocationImplementation*) impl)->getMax();
}

unsigned long long SpawnLocationAdapter::getExpireTime() {
	return ((SpawnLocationImplementation*) impl)->getExpireTime();
}

String& SpawnLocationAdapter::getPool() {
	return ((SpawnLocationImplementation*) impl)->getPool();
}

/*
 *	SpawnLocationHelper
 */

SpawnLocationHelper* SpawnLocationHelper::staticInitializer = SpawnLocationHelper::instance();

SpawnLocationHelper::SpawnLocationHelper() {
	className = "SpawnLocation";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void SpawnLocationHelper::finalizeHelper() {
	SpawnLocationHelper::finalize();
}

DistributedObject* SpawnLocationHelper::instantiateObject() {
	return new SpawnLocation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* SpawnLocationHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SpawnLocationAdapter((SpawnLocationImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	SpawnLocationServant
 */

SpawnLocationServant::SpawnLocationServant() : SceneObjectImplementation() {
	_classHelper = SpawnLocationHelper::instance();
}

SpawnLocationServant::~SpawnLocationServant() {
}

void SpawnLocationServant::_setStub(DistributedObjectStub* stub) {
	_this = (SpawnLocation*) stub;
	SceneObjectServant::_setStub(stub);
}

DistributedObjectStub* SpawnLocationServant::_getStub() {
	return _this;
}

