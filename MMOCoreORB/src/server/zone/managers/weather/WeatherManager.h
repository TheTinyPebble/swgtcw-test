/*
 *	server/zone/managers/weather/WeatherManager.h generated by engine3 IDL compiler 0.60
 */

#ifndef WEATHERMANAGER_H_
#define WEATHERMANAGER_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {

class Zone;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace managers {
namespace weather {
namespace events {

class WeatherChangeEvent;

} // namespace events
} // namespace weather
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::weather::events;

#include "server/zone/managers/weather/weathermaps/WeatherMap.h"

#include "engine/core/ManagedService.h"

#include "engine/lua/Lua.h"

#include "engine/log/Logger.h"

#include "system/lang/ref/Reference.h"

#include "system/util/Vector.h"

namespace server {
namespace zone {
namespace managers {
namespace weather {

class WeatherManager : public ManagedService {
public:
	static const int CLEAR = 0;

	static const int LIGHTSTORM = 1;

	static const int STORM = 2;

	static const int HEAVYSTORM = 3;

	static const int EXTREMESTORM = 4;

	WeatherManager(Zone* planet);

	void initialize();

	void createNewWeatherPattern();

	void sendWeatherTo(CreatureObject* player);

	void enableWeather(CreatureObject* player);

	void disableWeather(CreatureObject* player);

	void changeWeather(CreatureObject* player, int newWeather);

	bool isWeatherEnabled();

	void setWeatherEnabled(bool value);

	void printInfo(CreatureObject* player);

	DistributedObjectServant* _getImplementation();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	WeatherManager(DummyConstructorParameter* param);

	virtual ~WeatherManager();

	friend class WeatherManagerHelper;
};

} // namespace weather
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::weather;

namespace server {
namespace zone {
namespace managers {
namespace weather {

class WeatherManagerImplementation : public ManagedServiceImplementation, public Logger {
public:
	static const int CLEAR = 0;

	static const int LIGHTSTORM = 1;

	static const int STORM = 2;

	static const int HEAVYSTORM = 3;

	static const int EXTREMESTORM = 4;

private:
	ManagedReference<Zone* > zone;

	bool weatherEnabled;

	byte baseWeather;

	unsigned int averageWeatherDuration;

	unsigned int weatherStability;

	bool hasDamagingSandstorms;

	Reference<WeatherMap* > currentMap;

	Vector<float> windX;

	Vector<float> windY;

	Vector<float> windMagnitude;

	int sandstormDamage;

protected:
	Reference<WeatherChangeEvent* > weatherChangeEvent;

public:
	WeatherManagerImplementation(Zone* planet);

	WeatherManagerImplementation(DummyConstructorParameter* param);

	void initialize();

private:
	bool loadLuaConfig();

	void loadDefaultValues();

public:
	void createNewWeatherPattern();

	void sendWeatherTo(CreatureObject* player);

private:
	void applySandstormDamage(CreatureObject* player);

	int calculateSandstormProtection(CreatureObject* player);

public:
	void enableWeather(CreatureObject* player);

	void disableWeather(CreatureObject* player);

	void changeWeather(CreatureObject* player, int newWeather);

	bool isWeatherEnabled();

	void setWeatherEnabled(bool value);

	void printInfo(CreatureObject* player);

	WeakReference<WeatherManager*> _this;

	operator const WeatherManager*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~WeatherManagerImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const String& name);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class WeatherManager;
};

class WeatherManagerAdapter : public ManagedServiceAdapter {
public:
	WeatherManagerAdapter(WeatherManager* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initialize();

	void createNewWeatherPattern();

	void sendWeatherTo(CreatureObject* player);

	void enableWeather(CreatureObject* player);

	void disableWeather(CreatureObject* player);

	void changeWeather(CreatureObject* player, int newWeather);

	bool isWeatherEnabled();

	void setWeatherEnabled(bool value);

	void printInfo(CreatureObject* player);

};

class WeatherManagerHelper : public DistributedObjectClassHelper, public Singleton<WeatherManagerHelper> {
	static WeatherManagerHelper* staticInitializer;

public:
	WeatherManagerHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<WeatherManagerHelper>;
};

} // namespace weather
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::weather;

#endif /*WEATHERMANAGER_H_*/
