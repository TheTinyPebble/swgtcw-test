/*
 *	server/zone/managers/weather/WeatherManager.h generated by engine3 IDL compiler 0.60
 */

#ifndef WEATHERMANAGER_H_
#define WEATHERMANAGER_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {

class Zone;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {
namespace objects {
namespace player {

class PlayerCreature;

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

namespace server {
namespace zone {
namespace managers {
namespace weather {
namespace events {

class WeatherChangeEvent;

} // namespace events
} // namespace weather
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::weather::events;

namespace server {
namespace zone {
namespace managers {
namespace weather {
namespace events {

class SandstormTickEvent;

} // namespace events
} // namespace weather
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::weather::events;

#include "engine/core/ManagedService.h"

#include "engine/lua/Lua.h"

#include "engine/log/Logger.h"

#include "system/lang/ref/Reference.h"

namespace server {
namespace zone {
namespace managers {
namespace weather {

class WeatherManager : public ManagedService {
public:
	WeatherManager(Zone* planet);

	void initialize();

	void generateNewWeather();

	void weatherTransition();

	void sendWeatherPacket(PlayerCreature* player);

	void sandstormTick();

	void setWeatherID(unsigned int value);

	unsigned int getWeatherID();

	bool isWeatherEnabled();

	void setWeatherEnabled(bool value);

	void setWindX(float value);

	void setWindY(float value);

	float getWindX();

	float getWindY();

	DistributedObjectServant* _getImplementation();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	WeatherManager(DummyConstructorParameter* param);

	virtual ~WeatherManager();

	friend class WeatherManagerHelper;
};

} // namespace weather
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::weather;

namespace server {
namespace zone {
namespace managers {
namespace weather {

class WeatherManagerImplementation : public ManagedServiceImplementation, public Lua {
	ManagedWeakReference<Zone* > zone;

	bool weatherEnabled;

	unsigned int weatherID;

	unsigned int targetWeatherID;

	unsigned int levelZeroChance;

	unsigned int levelOneChance;

	unsigned int levelTwoChance;

	unsigned int levelThreeChance;

	unsigned int levelFourChance;

	unsigned int windChangeChance;

	unsigned int newWeatherTimeMin;

	unsigned int newWeatherTimeMax;

	unsigned int transitionTimeMin;

	unsigned int transitionTimeMax;

	bool sandstormEffectsEnabled;

	unsigned int sandstormWounds;

	unsigned int sandstormWoundsMitigation;

	unsigned int sandstormKnockdownChance;

	unsigned int sandstormKnockdownModifier;

	unsigned int sandstormTickTime;

	float windX;

	float windY;

protected:
	Reference<WeatherChangeEvent*> weatherChangeEvent;

	Reference<SandstormTickEvent*> sandstormTickEvent;

public:
	WeatherManagerImplementation(Zone* planet);

	WeatherManagerImplementation(DummyConstructorParameter* param);

private:
	bool loadLuaConfig();

	void loadDefaultValues();

	void changeWindDirection();

	void broadcastWeather(bool sendPacket, bool doSandstormDamage);

	void applySandstormDamage(PlayerCreature* player);

	void calculateSandstormProtection(PlayerCreature* player, Vector<int>& sandstormCoverings);

public:
	void initialize();

	void generateNewWeather();

	void weatherTransition();

	void sendWeatherPacket(PlayerCreature* player);

	void sandstormTick();

	void setWeatherID(unsigned int value);

	unsigned int getWeatherID();

	bool isWeatherEnabled();

	void setWeatherEnabled(bool value);

	void setWindX(float value);

	void setWindY(float value);

	float getWindX();

	float getWindY();

	WeatherManager* _this;

	operator const WeatherManager*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~WeatherManagerImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const String& name);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class WeatherManager;
};

class WeatherManagerAdapter : public ManagedServiceAdapter {
public:
	WeatherManagerAdapter(WeatherManagerImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initialize();

	void generateNewWeather();

	void weatherTransition();

	void sendWeatherPacket(PlayerCreature* player);

	void sandstormTick();

	void setWeatherID(unsigned int value);

	unsigned int getWeatherID();

	bool isWeatherEnabled();

	void setWeatherEnabled(bool value);

	void setWindX(float value);

	void setWindY(float value);

	float getWindX();

	float getWindY();

};

class WeatherManagerHelper : public DistributedObjectClassHelper, public Singleton<WeatherManagerHelper> {
	static WeatherManagerHelper* staticInitializer;

public:
	WeatherManagerHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<WeatherManagerHelper>;
};

} // namespace weather
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::weather;

#endif /*WEATHERMANAGER_H_*/
