/*
Copyright (C) 2007 <SWGEmu>
 
This File is part of Core3.
 
This program is free software; you can redistribute 
it and/or modify it under the terms of the GNU Lesser 
General Public License as published by the Free Software
Foundation; either version 2 of the License, 
or (at your option) any later version.
 
This program is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
See the GNU Lesser General Public License for
more details.
 
You should have received a copy of the GNU Lesser General 
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 
Linking Engine3 statically or dynamically with other modules 
is making a combined work based on Engine3. 
Thus, the terms and conditions of the GNU Lesser General Public License 
cover the whole combination.
 
In addition, as a special exception, the copyright holders of Engine3 
give you permission to combine Engine3 program with free software 
programs or libraries that are released under the GNU LGPL and with 
code included in the standard release of Core3 under the GNU LGPL 
license (or modified versions of such code, with unchanged license). 
You may copy and distribute such a system following the terms of the 
GNU LGPL for Engine3 and the licenses of the other code concerned, 
provided that you include the source code of that other code when 
and as the GNU LGPL requires distribution of source code.
 
Note that people who make modified versions of Engine3 are not obligated 
to grant this special exception for their modified versions; 
it is their choice whether to do so. The GNU Lesser General Public License 
gives permission to release a modified version without this exception; 
this exception also makes it possible to release a modified version 
which carries forward this exception.
*/

package server.zone.managers.weather;

import engine.core.ManagedService;
import engine.lua.Lua;
import engine.log.Logger;
import system.lang.ref.Reference;
import server.zone.Zone;
import server.zone.objects.player.PlayerCreature;
import server.zone.managers.weather.events.WeatherChangeEvent;
import server.zone.managers.weather.events.SandstormTickEvent;


class WeatherManager extends ManagedService implements Lua {
	@weakReference
	private Zone zone;

	private boolean weatherEnabled;

	private unsigned int weatherID;
	private unsigned int targetWeatherID;

	private unsigned int levelZeroChance;
	private unsigned int levelOneChance;
	private unsigned int levelTwoChance;
	private unsigned int levelThreeChance;
	private unsigned int levelFourChance;

	private unsigned int windChangeChance;

	private unsigned int newWeatherTimeMin;
	private unsigned int newWeatherTimeMax;

	private unsigned int transitionTimeMin;
	private unsigned int transitionTimeMax;


	private boolean sandstormEffectsEnabled;
	private unsigned int sandstormWounds;
	private unsigned int sandstormWoundsMitigation;
	private unsigned int sandstormKnockdownChance;
	private unsigned int sandstormKnockdownModifier;
	private unsigned int sandstormTickTime;

	
	private float windX;
	private float windY; 

	
	protected Reference<WeatherChangeEvent> weatherChangeEvent;
	protected Reference<SandstormTickEvent> sandstormTickEvent;

	
	public WeatherManager(Zone planet) {
		zone = planet;
		weatherChangeEvent = null;
		sandstormTickEvent = null;
	}

	
	//PRIVATE METHODS

	/**
	 * Loads the weather customization values from the lua script.
	 * If there is an error during loading, loadDefaultValues() will be triggered.
	 */
	private native boolean loadLuaConfig();


	/**
	 * Configures the weather manager with default values if lua loading fails.
	 */
	private native void loadDefaultValues();


	/**
	 * Changes the direction the wind is blowing. It is called only when the weather ID
	 * is 3-4 because it causes the clouds to redraw and it looks bad if they are visible.
	 * (You cannot see the clouds when the weather ID is 3-4)
	 * @pre Locks the weather manager for the duration of the method.
	 */
	private native void changeWindDirection();


	/**
	 * This method is used for iterating through the players on the planet for the purposes of: 
	 * 1) Notifying all players on the planet when the weather changes.
	 * 2) Applying sandstorm effects to the players on the planet.
	 * @pre Locks the weather manager for the duration of the method.
	 * @pre Locks the chat manager for the duration of the method as we utilize the PlayerMap there.
	 * @pre Locks each player as we iterate through the Player Map and send them the new weather.
	 * @post The weather manager, chat manager, and players are unlocked.
	 * @param sendPacket Determines if we will send a weather packet to players.
	 * @param doSandstormDamage Determines if we will apply sandstorm damage to exposed players.
	 */
	private native void broadcastWeather(boolean sendPacket, boolean doSandstormDamage);


	/**
	 * Applies sandstorm effects to exposed players on the planet.
	 * Calls calculateSandstormProtection() to determine how much of the effects to apply.
	 * @pre Weather Manager and player are locked.
	 * @post Weather Manager is locked.
	 * @post Player is locked.
	 * @param player The player that the sandstorm effects will potentially be applied to.
	 */
	private native void applySandstormDamage(PlayerCreature player);


	/**
	 * Counts how many pieces of protecting clothing or armour a player is wearing
	 * for the purposes of sandstorm effects.
	 * @pre Weather Manager and player are locked.
	 * @post Weather Manager and player are locked.
	 * @param player The player we are applying sandstorm effects to.
	 * @param sandstormCoverings A Vector created in applySandstormDamage() that will store 
	 * the number of clothing and armour pieces the player is wearing.
	 */
	private native void calculateSandstormProtection(PlayerCreature player, @dereferenced Vector<int> sandstormCoverings);
	



	//PUBLIC METHODS

	/**
	 * Initializes the weather manager events and some of the customization variables.
	 * Calls loadLuaConfig() to read in the lua values and schedules the weather change event. 
	 */
	public native void initialize();


	/**
	 * Selects a new target weather that the planet will transition to.
	 * It then calls weatherTransition() to execute the weather change.
	 * @pre Locks Weather Manager for the duration of the method.
	 * @post Weather Manager is unlocked.
	 */
	public native void generateNewWeather();


	/**
	 * Handles the gradual change of weather.
	 * This method modifies the current weather ID and wind direction, updates
	 * the players, initiates sandstorm effects and schedules the weather change events.
	 * @pre Locks Weather Manager for the duration of the method.
	 * @post Weather Manager is unlocked.
	 */
	public native void weatherTransition();


	/**
	 * Sends the ServerWeatherMessage packet to the players.
	 * @pre Locks the player for the duration of the method.
	 * @param player The player who will receive the new weather information.
	 */
	public native void sendWeatherPacket(PlayerCreature player);


	/**
	 * This method utilizes broadcastWeather() to apply sandstorm effects to players.
	 * It then reschedules itself and loops based on sandstormTickTime.
	 * @pre Locks Weather Manager for the duration of the method.
	 * @post Weather Manager is unlocked.
	 */
	public native void sandstormTick();




	public void setWeatherID(unsigned int value) {
		weatherID = value;
	}

	public unsigned int getWeatherID() {
		return weatherID;
	}

	public boolean isWeatherEnabled() {
		return weatherEnabled;
	}

	public void setWeatherEnabled(boolean value) {
		weatherEnabled = value;
	}

	public void setWindX(float value) {
		windX = value;
	}

	public void setWindY(float value) {
		windY = value;
	}

	public float getWindX() {
		return windX;
	}

	public float getWindY() {
		return windY;
	}



}

