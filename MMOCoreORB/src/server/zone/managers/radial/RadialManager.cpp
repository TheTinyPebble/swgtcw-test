/*
 *	server/zone/managers/radial/RadialManager.cpp generated by engine3 IDL compiler 0.60
 */

#include "RadialManager.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/scene/SceneObject.h"


// Imported class dependencies

#include "server/zone/managers/object/ObjectManager.h"

#include "system/lang/Time.h"

#include "engine/service/DatagramServiceThread.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "system/util/Vector.h"

#include "server/zone/ZoneClientSession.h"

#include "server/zone/objects/player/events/PlayerRecoveryEvent.h"

#include "server/zone/ZoneProcessServerImplementation.h"

#include "server/zone/managers/account/AccountManager.h"

#include "engine/core/TaskManager.h"

#include "server/zone/managers/minigames/FishingManager.h"

#include "server/chat/ChatManager.h"

#include "engine/service/proto/BasePacketHandler.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "server/zone/managers/loot/LootManager.h"

#include "server/zone/objects/scene/variables/StringId.h"

#include "system/thread/atomic/AtomicInteger.h"

#include "server/zone/managers/stringid/StringIdManager.h"

#include "engine/util/Quaternion.h"

#include "server/zone/objects/player/TradeContainer.h"

#include "server/zone/managers/player/PlayerManager.h"

#include "server/zone/objects/tangible/tool/CraftingTool.h"

#include "server/zone/objects/player/events/PlayerDisconnectEvent.h"

#include "system/util/VectorMap.h"

#include "server/zone/managers/radial/RadialManager.h"

#include "server/zone/objects/tangible/tool/SurveyTool.h"

#include "server/zone/managers/resource/ResourceManager.h"

#include "server/zone/objects/player/badges/Badges.h"

#include "server/zone/managers/mission/MissionManager.h"

#include "server/zone/Zone.h"

#include "server/zone/managers/minigames/GamblingManager.h"

#include "server/zone/managers/crafting/CraftingManager.h"

#include "server/zone/managers/bazaar/BazaarManager.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "system/util/SortedVector.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

/*
 *	RadialManagerStub
 */

RadialManager::RadialManager(ZoneServer* server) : ManagedObject(DummyConstructorParameter::instance()) {
	RadialManagerImplementation* _implementation = new RadialManagerImplementation(server);
	ManagedObject::_setImplementation(_implementation);
	_implementation->_setStub(this);
}

RadialManager::RadialManager(DummyConstructorParameter* param) : ManagedObject(param) {
}

RadialManager::~RadialManager() {
}


void RadialManager::handleObjectMenuSelect(PlayerCreature* player, byte selectID, unsigned long long objectID) {
	RadialManagerImplementation* _implementation = (RadialManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);
		method.addByteParameter(selectID);
		method.addUnsignedLongParameter(objectID);

		method.executeWithVoidReturn();
	} else
		_implementation->handleObjectMenuSelect(player, selectID, objectID);
}

void RadialManager::handleObjectMenuRequest(PlayerCreature* player, ObjectMenuResponse* defaultMenuResponse, unsigned long long objectID) {
	RadialManagerImplementation* _implementation = (RadialManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);
		method.addObjectParameter(defaultMenuResponse);
		method.addUnsignedLongParameter(objectID);

		method.executeWithVoidReturn();
	} else
		_implementation->handleObjectMenuRequest(player, defaultMenuResponse, objectID);
}

DistributedObjectServant* RadialManager::_getImplementation() {
	return getForUpdate();}

void RadialManager::_setImplementation(DistributedObjectServant* servant) {
	setObject((ManagedObjectImplementation*) servant);}

/*
 *	RadialManagerImplementation
 */

RadialManagerImplementation::RadialManagerImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}


RadialManagerImplementation::~RadialManagerImplementation() {
}


void RadialManagerImplementation::finalize() {
}

void RadialManagerImplementation::_initializeImplementation() {
	_setClassHelper(RadialManagerHelper::instance());

	_serializationHelperMethod();
}

void RadialManagerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (RadialManager*) stub;
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* RadialManagerImplementation::_getStub() {
	return _this;
}

RadialManagerImplementation::operator const RadialManager*() {
	return _this;
}

TransactionalObject* RadialManagerImplementation::clone() {
	return (TransactionalObject*) new RadialManagerImplementation(*this);
}


void RadialManagerImplementation::lock(bool doLock) {
}

void RadialManagerImplementation::lock(ManagedObject* obj) {
}

void RadialManagerImplementation::rlock(bool doLock) {
}

void RadialManagerImplementation::wlock(bool doLock) {
}

void RadialManagerImplementation::wlock(ManagedObject* obj) {
}

void RadialManagerImplementation::unlock(bool doLock) {
}

void RadialManagerImplementation::runlock(bool doLock) {
}

void RadialManagerImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("RadialManager");

	addSerializableVariable("zoneServer", &zoneServer);
}

/*
 *	RadialManagerAdapter
 */

RadialManagerAdapter::RadialManagerAdapter(RadialManagerImplementation* obj) : ManagedObjectAdapter(obj) {
}

Packet* RadialManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		handleObjectMenuSelect((PlayerCreature*) inv->getObjectParameter(), inv->getByteParameter(), inv->getUnsignedLongParameter());
		break;
	case 7:
		handleObjectMenuRequest((PlayerCreature*) inv->getObjectParameter(), (ObjectMenuResponse*) inv->getObjectParameter(), inv->getUnsignedLongParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void RadialManagerAdapter::handleObjectMenuSelect(PlayerCreature* player, byte selectID, unsigned long long objectID) {
	((RadialManagerImplementation*) impl)->handleObjectMenuSelect(player, selectID, objectID);
}

void RadialManagerAdapter::handleObjectMenuRequest(PlayerCreature* player, ObjectMenuResponse* defaultMenuResponse, unsigned long long objectID) {
	((RadialManagerImplementation*) impl)->handleObjectMenuRequest(player, defaultMenuResponse, objectID);
}

/*
 *	RadialManagerHelper
 */

RadialManagerHelper* RadialManagerHelper::staticInitializer = RadialManagerHelper::instance();

RadialManagerHelper::RadialManagerHelper() {
	className = "RadialManager";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void RadialManagerHelper::finalizeHelper() {
	RadialManagerHelper::finalize();
}

DistributedObject* RadialManagerHelper::instantiateObject() {
	return new RadialManager(DummyConstructorParameter::instance());
}

DistributedObjectServant* RadialManagerHelper::instantiateServant() {
	return new RadialManagerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* RadialManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new RadialManagerAdapter((RadialManagerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

