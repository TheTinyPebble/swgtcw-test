/*
 *	server/zone/managers/loot/LootManager.h generated by engine3 IDL compiler 0.60
 */

#ifndef LOOTMANAGER_H_
#define LOOTMANAGER_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace managers {
namespace crafting {

class CraftingManager;

} // namespace crafting
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::crafting;

namespace server {
namespace zone {
namespace managers {
namespace object {

class ObjectManager;

} // namespace object
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::object;

#include "server/zone/managers/loot/LootGroupMap.h"

#include "system/util/VectorMap.h"

#include "engine/core/ManagedService.h"

#include "engine/lua/Lua.h"

namespace server {
namespace zone {
namespace managers {
namespace loot {

class LootManager : public ManagedService {
public:
	LootManager(CraftingManager* craftman, ObjectManager* objMan);

	void initialize();

	void createLoot(SceneObject* container, CreatureObject* creature);

	void createLoot(SceneObject* container, const String& lootGroup);

	DistributedObjectServant* _getImplementation();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	LootManager(DummyConstructorParameter* param);

	virtual ~LootManager();

	friend class LootManagerHelper;
};

} // namespace loot
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::loot;

namespace server {
namespace zone {
namespace managers {
namespace loot {

class LootManagerImplementation : public ManagedServiceImplementation, public Logger {
	ManagedReference<CraftingManager* > craftingManager;

	Reference<ObjectManager* > objectManager;

	Reference<Lua* > lua;

	LootGroupMap lootGroupMap;

public:
	LootManagerImplementation(CraftingManager* craftman, ObjectManager* objMan);

	LootManagerImplementation(DummyConstructorParameter* param);

	void initialize();

private:
	bool loadConfigFile();

	bool loadConfigData();

	void loadDefaultConfig();

public:
	void createLoot(SceneObject* container, CreatureObject* creature);

	void createLoot(SceneObject* container, const String& lootGroup);

	WeakReference<LootManager*> _this;

	operator const LootManager*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~LootManagerImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const String& name);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class LootManager;
};

class LootManagerAdapter : public ManagedServiceAdapter {
public:
	LootManagerAdapter(LootManagerImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initialize();

	void createLoot(SceneObject* container, CreatureObject* creature);

	void createLoot(SceneObject* container, const String& lootGroup);

protected:
	String _param1_createLoot__SceneObject_String_;
};

class LootManagerHelper : public DistributedObjectClassHelper, public Singleton<LootManagerHelper> {
	static LootManagerHelper* staticInitializer;

public:
	LootManagerHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<LootManagerHelper>;
};

} // namespace loot
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::loot;

#endif /*LOOTMANAGER_H_*/
