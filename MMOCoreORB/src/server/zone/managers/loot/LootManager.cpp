/*
 *	server/zone/managers/loot/LootManager.cpp generated by engine3 IDL compiler 0.60
 */

#include "LootManager.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/managers/crafting/CraftingManager.h"

#include "server/zone/managers/object/ObjectManager.h"

/*
 *	LootManagerStub
 */

enum {RPC_INITIALIZE__ = 6,RPC_CREATELOOT__SCENEOBJECT_CREATUREOBJECT_,RPC_CREATELOOT__SCENEOBJECT_STRING_};

LootManager::LootManager(CraftingManager* craftman, ObjectManager* objMan) : ManagedService(DummyConstructorParameter::instance()) {
	LootManagerImplementation* _implementation = new LootManagerImplementation(craftman, objMan);
	_impl = _implementation;
	_impl->_setStub(this);
}

LootManager::LootManager(DummyConstructorParameter* param) : ManagedService(param) {
}

LootManager::~LootManager() {
}


void LootManager::initialize() {
	LootManagerImplementation* _implementation = (LootManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZE__);

		method.executeWithVoidReturn();
	} else
		_implementation->initialize();
}

void LootManager::createLoot(SceneObject* container, CreatureObject* creature) {
	LootManagerImplementation* _implementation = (LootManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATELOOT__SCENEOBJECT_CREATUREOBJECT_);
		method.addObjectParameter(container);
		method.addObjectParameter(creature);

		method.executeWithVoidReturn();
	} else
		_implementation->createLoot(container, creature);
}

void LootManager::createLoot(SceneObject* container, const String& lootGroup) {
	LootManagerImplementation* _implementation = (LootManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATELOOT__SCENEOBJECT_STRING_);
		method.addObjectParameter(container);
		method.addAsciiParameter(lootGroup);

		method.executeWithVoidReturn();
	} else
		_implementation->createLoot(container, lootGroup);
}

DistributedObjectServant* LootManager::_getImplementation() {

	_updated = true;
	return _impl;
}

void LootManager::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	LootManagerImplementation
 */

LootManagerImplementation::LootManagerImplementation(DummyConstructorParameter* param) : ManagedServiceImplementation(param) {
	_initializeImplementation();
}


LootManagerImplementation::~LootManagerImplementation() {
}


void LootManagerImplementation::finalize() {
}

void LootManagerImplementation::_initializeImplementation() {
	_setClassHelper(LootManagerHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void LootManagerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (LootManager*) stub;
	ManagedServiceImplementation::_setStub(stub);
}

DistributedObjectStub* LootManagerImplementation::_getStub() {
	return _this;
}

LootManagerImplementation::operator const LootManager*() {
	return _this;
}

void LootManagerImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void LootManagerImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void LootManagerImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void LootManagerImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void LootManagerImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void LootManagerImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void LootManagerImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void LootManagerImplementation::_serializationHelperMethod() {
	ManagedServiceImplementation::_serializationHelperMethod();

	_setClassName("LootManager");

}

void LootManagerImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(LootManagerImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool LootManagerImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ManagedServiceImplementation::readObjectMember(stream, _name))
		return true;


	return false;
}

void LootManagerImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = LootManagerImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int LootManagerImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;

	return 0 + ManagedServiceImplementation::writeObjectMembers(stream);
}

LootManagerImplementation::LootManagerImplementation(CraftingManager* craftman, ObjectManager* objMan) {
	_initializeImplementation();
	// server/zone/managers/loot/LootManager.idl():  		craftingManager = craftman;
	craftingManager = craftman;
	// server/zone/managers/loot/LootManager.idl():  		objectManager = objMan;
	objectManager = objMan;
	// server/zone/managers/loot/LootManager.idl():  		Logger.setLoggingName("LootManager");
	Logger::setLoggingName("LootManager");
	// server/zone/managers/loot/LootManager.idl():  		Logger.setLogging(true);
	Logger::setLogging(true);
	// server/zone/managers/loot/LootManager.idl():  		Logger.setGlobalLogging(true);
	Logger::setGlobalLogging(true);
}

/*
 *	LootManagerAdapter
 */

LootManagerAdapter::LootManagerAdapter(LootManagerImplementation* obj) : ManagedServiceAdapter(obj) {
}

Packet* LootManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_INITIALIZE__:
		initialize();
		break;
	case RPC_CREATELOOT__SCENEOBJECT_CREATUREOBJECT_:
		createLoot((SceneObject*) inv->getObjectParameter(), (CreatureObject*) inv->getObjectParameter());
		break;
	case RPC_CREATELOOT__SCENEOBJECT_STRING_:
		createLoot((SceneObject*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_createLoot__SceneObject_String_));
		break;
	default:
		return NULL;
	}

	return resp;
}

void LootManagerAdapter::initialize() {
	((LootManagerImplementation*) impl)->initialize();
}

void LootManagerAdapter::createLoot(SceneObject* container, CreatureObject* creature) {
	((LootManagerImplementation*) impl)->createLoot(container, creature);
}

void LootManagerAdapter::createLoot(SceneObject* container, const String& lootGroup) {
	((LootManagerImplementation*) impl)->createLoot(container, lootGroup);
}

/*
 *	LootManagerHelper
 */

LootManagerHelper* LootManagerHelper::staticInitializer = LootManagerHelper::instance();

LootManagerHelper::LootManagerHelper() {
	className = "LootManager";

	Core::getObjectBroker()->registerClass(className, this);
}

void LootManagerHelper::finalizeHelper() {
	LootManagerHelper::finalize();
}

DistributedObject* LootManagerHelper::instantiateObject() {
	return new LootManager(DummyConstructorParameter::instance());
}

DistributedObjectServant* LootManagerHelper::instantiateServant() {
	return new LootManagerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* LootManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new LootManagerAdapter((LootManagerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

