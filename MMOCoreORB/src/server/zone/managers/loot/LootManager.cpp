/*
 *	server/zone/managers/loot/LootManager.cpp generated by engine3 IDL compiler 0.60
 */

#include "LootManager.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/Zone.h"

#include "server/zone/ZoneProcessServerImplementation.h"

#include "server/zone/managers/crafting/CraftingManager.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/managers/loot/lootgroup/LootGroupObject.h"

#include "server/zone/managers/loot/lootgroup/LootObject.h"

/*
 *	LootManagerStub
 */

LootManager::LootManager(ZoneServer* serv, ZoneProcessServerImplementation* proc, CraftingManager* craftman) : ManagedObject(DummyConstructorParameter::instance()) {
	_impl = new LootManagerImplementation(serv, proc, craftman);
	_impl->_setStub(this);
}

LootManager::LootManager(DummyConstructorParameter* param) : ManagedObject(param) {
}

LootManager::~LootManager() {
}


void LootManager::initialize() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((LootManagerImplementation*) _impl)->initialize();
}

bool LootManager::contains(unsigned int lootGroup) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addUnsignedIntParameter(lootGroup);

		return method.executeWithBooleanReturn();
	} else
		return ((LootManagerImplementation*) _impl)->contains(lootGroup);
}

void LootManager::createLoot(PlayerCreature* receiver, SceneObject* container, int level, unsigned int lootGroup) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(receiver);
		method.addObjectParameter(container);
		method.addSignedIntParameter(level);
		method.addUnsignedIntParameter(lootGroup);

		method.executeWithVoidReturn();
	} else
		((LootManagerImplementation*) _impl)->createLoot(receiver, container, level, lootGroup);
}

void LootManager::createLoot(PlayerCreature* receiver, SceneObject* container, int level, Vector<unsigned int>* lootGroup) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((LootManagerImplementation*) _impl)->createLoot(receiver, container, level, lootGroup);
}

bool LootManager::attachLoot(PlayerCreature* receiver, LootObject* loot, SceneObject* container) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(receiver);
		method.addObjectParameter(loot);
		method.addObjectParameter(container);

		return method.executeWithBooleanReturn();
	} else
		return ((LootManagerImplementation*) _impl)->attachLoot(receiver, loot, container);
}

void LootManager::testLoot(PlayerCreature* receiver, SceneObject* container) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(receiver);
		method.addObjectParameter(container);

		method.executeWithVoidReturn();
	} else
		((LootManagerImplementation*) _impl)->testLoot(receiver, container);
}

/*
 *	LootManagerImplementation
 */

LootManagerImplementation::LootManagerImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}

LootManagerImplementation::~LootManagerImplementation() {
}


void LootManagerImplementation::finalize() {
}

void LootManagerImplementation::_initializeImplementation() {
	_setClassHelper(LootManagerHelper::instance());

	_serializationHelperMethod();
}

void LootManagerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (LootManager*) stub;
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* LootManagerImplementation::_getStub() {
	return _this;
}

LootManagerImplementation::operator const LootManager*() {
	return _this;
}

void LootManagerImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void LootManagerImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void LootManagerImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void LootManagerImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void LootManagerImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void LootManagerImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void LootManagerImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void LootManagerImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("LootManager");

	addSerializableVariable("lootGroups", &lootGroups);
}

LootManagerImplementation::LootManagerImplementation(ZoneServer* serv, ZoneProcessServerImplementation* proc, CraftingManager* craftman) {
	_initializeImplementation();
	// server/zone/managers/loot/LootManager.idl(77):  		Logger.setLoggingName("LootManager");
	Logger::setLoggingName("LootManager");
	// server/zone/managers/loot/LootManager.idl(79):  		Logger.setLogging(true);
	Logger::setLogging(true);
	// server/zone/managers/loot/LootManager.idl(80):  		Logger.setGlobalLogging(true);
	Logger::setGlobalLogging(true);
	// server/zone/managers/loot/LootManager.idl(82):  		lootGroups.setNullValue(null);
	(&lootGroups)->setNullValue(NULL);
	// server/zone/managers/loot/LootManager.idl(83):  		lootGroups.setNoDuplicateInsertPlan();
	(&lootGroups)->setNoDuplicateInsertPlan();
	// server/zone/managers/loot/LootManager.idl(85):  		zoneServer = serv;
	zoneServer = serv;
	// server/zone/managers/loot/LootManager.idl(86):  		zoneProcessor = proc;
	zoneProcessor = proc;
	// server/zone/managers/loot/LootManager.idl(87):  		craftingManager = craftman;
	craftingManager = craftman;
}

bool LootManagerImplementation::contains(unsigned int lootGroup) {
	// server/zone/managers/loot/LootManager.idl(96):  		return (lootGroups.contains(lootGroup));
	return ((&lootGroups)->contains(lootGroup));
}

/*
 *	LootManagerAdapter
 */

LootManagerAdapter::LootManagerAdapter(LootManagerImplementation* obj) : ManagedObjectAdapter(obj) {
}

Packet* LootManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initialize();
		break;
	case 7:
		resp->insertBoolean(contains(inv->getUnsignedIntParameter()));
		break;
	case 8:
		createLoot((PlayerCreature*) inv->getObjectParameter(), (SceneObject*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getUnsignedIntParameter());
		break;
	case 9:
		resp->insertBoolean(attachLoot((PlayerCreature*) inv->getObjectParameter(), (LootObject*) inv->getObjectParameter(), (SceneObject*) inv->getObjectParameter()));
		break;
	case 10:
		testLoot((PlayerCreature*) inv->getObjectParameter(), (SceneObject*) inv->getObjectParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void LootManagerAdapter::initialize() {
	((LootManagerImplementation*) impl)->initialize();
}

bool LootManagerAdapter::contains(unsigned int lootGroup) {
	return ((LootManagerImplementation*) impl)->contains(lootGroup);
}

void LootManagerAdapter::createLoot(PlayerCreature* receiver, SceneObject* container, int level, unsigned int lootGroup) {
	((LootManagerImplementation*) impl)->createLoot(receiver, container, level, lootGroup);
}

bool LootManagerAdapter::attachLoot(PlayerCreature* receiver, LootObject* loot, SceneObject* container) {
	return ((LootManagerImplementation*) impl)->attachLoot(receiver, loot, container);
}

void LootManagerAdapter::testLoot(PlayerCreature* receiver, SceneObject* container) {
	((LootManagerImplementation*) impl)->testLoot(receiver, container);
}

/*
 *	LootManagerHelper
 */

LootManagerHelper* LootManagerHelper::staticInitializer = LootManagerHelper::instance();

LootManagerHelper::LootManagerHelper() {
	className = "LootManager";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void LootManagerHelper::finalizeHelper() {
	LootManagerHelper::finalize();
}

DistributedObject* LootManagerHelper::instantiateObject() {
	return new LootManager(DummyConstructorParameter::instance());
}

DistributedObjectServant* LootManagerHelper::instantiateServant() {
	return new LootManagerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* LootManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new LootManagerAdapter((LootManagerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

