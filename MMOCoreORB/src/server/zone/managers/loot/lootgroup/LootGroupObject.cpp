/*
 *	server/zone/managers/loot/lootgroup/LootGroupObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "LootGroupObject.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/managers/loot/lootgroup/LootObject.h"

/*
 *	LootGroupObjectStub
 */

LootGroupObject::LootGroupObject(unsigned int group, int w, int max) : ManagedObject(DummyConstructorParameter::instance()) {
	LootGroupObjectImplementation* _implementation = new LootGroupObjectImplementation(group, w, max);
	_impl = _implementation;
	_impl->_setStub(this);
}

LootGroupObject::LootGroupObject(DummyConstructorParameter* param) : ManagedObject(param) {
}

LootGroupObject::~LootGroupObject() {
}


bool LootGroupObject::contains(unsigned int objIndex) {
	LootGroupObjectImplementation* _implementation = (LootGroupObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addUnsignedIntParameter(objIndex);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->contains(objIndex);
}

LootObject* LootGroupObject::get(unsigned int lootObjectID) {
	LootGroupObjectImplementation* _implementation = (LootGroupObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addUnsignedIntParameter(lootObjectID);

		return (LootObject*) method.executeWithObjectReturn();
	} else
		return _implementation->get(lootObjectID);
}

void LootGroupObject::put(unsigned int index, LootObject* obj) {
	LootGroupObjectImplementation* _implementation = (LootGroupObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addUnsignedIntParameter(index);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		_implementation->put(index, obj);
}

LootObject* LootGroupObject::selectLoot() {
	LootGroupObjectImplementation* _implementation = (LootGroupObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->selectLoot();
}

int LootGroupObject::size() {
	LootGroupObjectImplementation* _implementation = (LootGroupObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->size();
}

int LootGroupObject::getMaxDrop() {
	LootGroupObjectImplementation* _implementation = (LootGroupObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getMaxDrop();
}

int LootGroupObject::getWeight() {
	LootGroupObjectImplementation* _implementation = (LootGroupObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getWeight();
}

unsigned int LootGroupObject::getLootGroup() {
	LootGroupObjectImplementation* _implementation = (LootGroupObjectImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getLootGroup();
}

DistributedObjectServant* LootGroupObject::_getImplementation() {

	_updated = true;
	return _impl;
}

void LootGroupObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	LootGroupObjectImplementation
 */

LootGroupObjectImplementation::LootGroupObjectImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}


LootGroupObjectImplementation::~LootGroupObjectImplementation() {
}


void LootGroupObjectImplementation::finalize() {
}

void LootGroupObjectImplementation::_initializeImplementation() {
	_setClassHelper(LootGroupObjectHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void LootGroupObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (LootGroupObject*) stub;
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* LootGroupObjectImplementation::_getStub() {
	return _this;
}

LootGroupObjectImplementation::operator const LootGroupObject*() {
	return _this;
}

void LootGroupObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void LootGroupObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void LootGroupObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void LootGroupObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void LootGroupObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void LootGroupObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void LootGroupObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void LootGroupObjectImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("LootGroupObject");

}

void LootGroupObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(LootGroupObjectImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool LootGroupObjectImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ManagedObjectImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "lootObjects") {
		TypeInfo<VectorMap<unsigned int, ManagedReference<LootObject* > > >::parseFromBinaryStream(&lootObjects, stream);
		return true;
	}

	if (_name == "zoneServer") {
		TypeInfo<ManagedReference<ZoneServer* > >::parseFromBinaryStream(&zoneServer, stream);
		return true;
	}

	if (_name == "lootGroup") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&lootGroup, stream);
		return true;
	}

	if (_name == "weight") {
		TypeInfo<int >::parseFromBinaryStream(&weight, stream);
		return true;
	}

	if (_name == "maxDrop") {
		TypeInfo<int >::parseFromBinaryStream(&maxDrop, stream);
		return true;
	}

	if (_name == "maxChance") {
		TypeInfo<int >::parseFromBinaryStream(&maxChance, stream);
		return true;
	}


	return false;
}

void LootGroupObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = LootGroupObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int LootGroupObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "lootObjects";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<VectorMap<unsigned int, ManagedReference<LootObject* > > >::toBinaryStream(&lootObjects, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "zoneServer";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<ZoneServer* > >::toBinaryStream(&zoneServer, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "lootGroup";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned int >::toBinaryStream(&lootGroup, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "weight";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&weight, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "maxDrop";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&maxDrop, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "maxChance";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&maxChance, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 6 + ManagedObjectImplementation::writeObjectMembers(stream);
}

LootGroupObjectImplementation::LootGroupObjectImplementation(unsigned int group, int w, int max) {
	_initializeImplementation();
	// server/zone/managers/loot/lootgroup/LootGroupObject.idl(68):  		lootObjects.setNullValue(null);
	(&lootObjects)->setNullValue(NULL);
	// server/zone/managers/loot/lootgroup/LootGroupObject.idl(70):  		lootGroup = group;
	lootGroup = group;
	// server/zone/managers/loot/lootgroup/LootGroupObject.idl(71):  		weight = w;
	weight = w;
	// server/zone/managers/loot/lootgroup/LootGroupObject.idl(72):  		maxDrop = max;
	maxDrop = max;
	// server/zone/managers/loot/lootgroup/LootGroupObject.idl(73):  		maxChance = 0;
	maxChance = 0;
	// server/zone/managers/loot/lootgroup/LootGroupObject.idl(75):  		Logger.setLoggingName("LootGroup");
	Logger::setLoggingName("LootGroup");
	// server/zone/managers/loot/lootgroup/LootGroupObject.idl(77):  		Logger.setLogging(true);
	Logger::setLogging(true);
	// server/zone/managers/loot/lootgroup/LootGroupObject.idl(78):  		Logger.setGlobalLogging(true);
	Logger::setGlobalLogging(true);
}

bool LootGroupObjectImplementation::contains(unsigned int objIndex) {
	// server/zone/managers/loot/lootgroup/LootGroupObject.idl(82):  		return lootObjects.contains(objIndex);
	return (&lootObjects)->contains(objIndex);
}

LootObject* LootGroupObjectImplementation::get(unsigned int lootObjectID) {
	// server/zone/managers/loot/lootgroup/LootGroupObject.idl(86):  		return lootObjects.get(lootObjectID);
	return (&lootObjects)->get(lootObjectID);
}

int LootGroupObjectImplementation::size() {
	// server/zone/managers/loot/lootgroup/LootGroupObject.idl(95):  		return lootObjects.size();
	return (&lootObjects)->size();
}

int LootGroupObjectImplementation::getMaxDrop() {
	// server/zone/managers/loot/lootgroup/LootGroupObject.idl(99):  		return maxDrop;
	return maxDrop;
}

int LootGroupObjectImplementation::getWeight() {
	// server/zone/managers/loot/lootgroup/LootGroupObject.idl(103):  		return weight;
	return weight;
}

unsigned int LootGroupObjectImplementation::getLootGroup() {
	// server/zone/managers/loot/lootgroup/LootGroupObject.idl(107):  		return lootGroup;
	return lootGroup;
}

/*
 *	LootGroupObjectAdapter
 */

LootGroupObjectAdapter::LootGroupObjectAdapter(LootGroupObjectImplementation* obj) : ManagedObjectAdapter(obj) {
}

Packet* LootGroupObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertBoolean(contains(inv->getUnsignedIntParameter()));
		break;
	case 7:
		resp->insertLong(get(inv->getUnsignedIntParameter())->_getObjectID());
		break;
	case 8:
		put(inv->getUnsignedIntParameter(), (LootObject*) inv->getObjectParameter());
		break;
	case 9:
		resp->insertSignedInt(size());
		break;
	case 10:
		resp->insertSignedInt(getMaxDrop());
		break;
	case 11:
		resp->insertSignedInt(getWeight());
		break;
	case 12:
		resp->insertInt(getLootGroup());
		break;
	default:
		return NULL;
	}

	return resp;
}

bool LootGroupObjectAdapter::contains(unsigned int objIndex) {
	return ((LootGroupObjectImplementation*) impl)->contains(objIndex);
}

LootObject* LootGroupObjectAdapter::get(unsigned int lootObjectID) {
	return ((LootGroupObjectImplementation*) impl)->get(lootObjectID);
}

void LootGroupObjectAdapter::put(unsigned int index, LootObject* obj) {
	((LootGroupObjectImplementation*) impl)->put(index, obj);
}

int LootGroupObjectAdapter::size() {
	return ((LootGroupObjectImplementation*) impl)->size();
}

int LootGroupObjectAdapter::getMaxDrop() {
	return ((LootGroupObjectImplementation*) impl)->getMaxDrop();
}

int LootGroupObjectAdapter::getWeight() {
	return ((LootGroupObjectImplementation*) impl)->getWeight();
}

unsigned int LootGroupObjectAdapter::getLootGroup() {
	return ((LootGroupObjectImplementation*) impl)->getLootGroup();
}

/*
 *	LootGroupObjectHelper
 */

LootGroupObjectHelper* LootGroupObjectHelper::staticInitializer = LootGroupObjectHelper::instance();

LootGroupObjectHelper::LootGroupObjectHelper() {
	className = "LootGroupObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void LootGroupObjectHelper::finalizeHelper() {
	LootGroupObjectHelper::finalize();
}

DistributedObject* LootGroupObjectHelper::instantiateObject() {
	return new LootGroupObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* LootGroupObjectHelper::instantiateServant() {
	return new LootGroupObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* LootGroupObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new LootGroupObjectAdapter((LootGroupObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

