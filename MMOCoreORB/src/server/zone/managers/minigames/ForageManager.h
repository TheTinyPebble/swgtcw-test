/*
 *	server/zone/managers/minigames/ForageManager.h generated by engine3 IDL compiler 0.60
 */

#ifndef FORAGEMANAGER_H_
#define FORAGEMANAGER_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {

class Zone;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {

class ZoneServer;

} // namespace zone
} // namespace server

using namespace server::zone;

#include "server/zone/objects/area/ForageMap.h"

#include "engine/log/Logger.h"

#include "engine/lua/Lua.h"

#include "system/util/VectorMap.h"

#include "system/util/Vector.h"

#include "engine/util/Observer.h"

namespace server {
namespace zone {
namespace managers {
namespace minigames {

class ForageManager : public Observer {
public:
	static const int SCOUT = 1;

	static const int MEDICAL = 2;

	static const int LAIR = 3;

	static const int SHELLFISH = 4;

	ForageManager();

	void deleteForageAreaCollection(String& playerName);

	void startForaging(CreatureObject* player, int forageType);

	void finishForaging(CreatureObject* player, int forageType, float forageX, float forageY, const String& planet);

	bool forageGiveItems(CreatureObject* player, int forageType, float forageX, float forageY, const String& planet);

	bool forageGiveResource(CreatureObject* player, float forageX, float forageY, const String& planet, String& resType);

	DistributedObjectServant* _getImplementation();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	ForageManager(DummyConstructorParameter* param);

	virtual ~ForageManager();

	friend class ForageManagerHelper;
};

} // namespace minigames
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::minigames;

namespace server {
namespace zone {
namespace managers {
namespace minigames {

class ForageManagerImplementation : public ObserverImplementation, public Logger {
public:
	static const int SCOUT = 1;

	static const int MEDICAL = 2;

	static const int LAIR = 3;

	static const int SHELLFISH = 4;

protected:
	ForageMap forageAreas;

public:
	ForageManagerImplementation();

	ForageManagerImplementation(DummyConstructorParameter* param);

	void deleteForageAreaCollection(String& playerName);

	void startForaging(CreatureObject* player, int forageType);

	void finishForaging(CreatureObject* player, int forageType, float forageX, float forageY, const String& planet);

	bool forageGiveItems(CreatureObject* player, int forageType, float forageX, float forageY, const String& planet);

	bool forageGiveResource(CreatureObject* player, float forageX, float forageY, const String& planet, String& resType);

	WeakReference<ForageManager*> _this;

	operator const ForageManager*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~ForageManagerImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const String& name);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class ForageManager;
};

class ForageManagerAdapter : public ObserverAdapter {
public:
	ForageManagerAdapter(ForageManager* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void deleteForageAreaCollection(String& playerName);

	void startForaging(CreatureObject* player, int forageType);

	void finishForaging(CreatureObject* player, int forageType, float forageX, float forageY, const String& planet);

	bool forageGiveItems(CreatureObject* player, int forageType, float forageX, float forageY, const String& planet);

	bool forageGiveResource(CreatureObject* player, float forageX, float forageY, const String& planet, String& resType);

};

class ForageManagerHelper : public DistributedObjectClassHelper, public Singleton<ForageManagerHelper> {
	static ForageManagerHelper* staticInitializer;

public:
	ForageManagerHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<ForageManagerHelper>;
};

} // namespace minigames
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::minigames;

#endif /*FORAGEMANAGER_H_*/
