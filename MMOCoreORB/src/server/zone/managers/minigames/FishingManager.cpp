/*
 *	server/zone/managers/minigames/FishingManager.cpp generated by engine3 IDL compiler 0.60
 */

#include "FishingManager.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/tangible/fishing/FishingPoleObject.h"

#include "server/zone/objects/tangible/fishing/FishingBaitObject.h"

#include "server/zone/managers/minigames/events/FishingEvent.h"

#include "server/zone/managers/minigames/events/FishingSplashEvent.h"

#include "server/zone/managers/minigames/FishingSession.h"

/*
 *	FishingManagerStub
 */

enum {RPC_INITIALIZEBAITSTATUS__ = 6,RPC_INITIALIZEPROPERTY__,RPC_INITIALIZEACTION__,RPC_INITIALIZESTATE__,RPC_INITIALIZEFISHTYPE__,RPC_INITIALIZEFISHLENGTH__,RPC_INITIALIZELOOT__,RPC_INITIALIZECOLOR__,RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_,RPC_CHECKFISHINGONPOSITIONUPDATE__PLAYERCREATURE_,RPC_NOTIFYCLOSECONTAINER__PLAYERCREATURE_SCENEOBJECT_,RPC_STARTFISHING__PLAYERCREATURE_,RPC_STOPFISHING__PLAYERCREATURE_INT_BOOL_,RPC_FISHINGSTEP__PLAYERCREATURE_,RPC_SUCCESS__PLAYERCREATURE_INT_SCENEOBJECT_INT_,RPC_GETTIME__,RPC_SENDREWARD__PLAYERCREATURE_SCENEOBJECT_SCENEOBJECT_,RPC_CREATEWINDOW__PLAYERCREATURE_INT_,RPC_CLOSEMENU__PLAYERCREATURE_INT_,RPC_VEGETATION__SCENEOBJECT_,RPC_DENSITY__SCENEOBJECT_,RPC_GETFISH__PLAYERCREATURE_,RPC_GETNEXTACTION__PLAYERCREATURE_,RPC_SETNEXTACTION__PLAYERCREATURE_INT_,RPC_GETPOLE__PLAYERCREATURE_,RPC_GETBAIT__PLAYERCREATURE_,RPC_GETFISHBOXID__PLAYERCREATURE_,RPC_SETFISHBOXID__PLAYERCREATURE_INT_,RPC_GETFISHINGSTATE__PLAYERCREATURE_,RPC_SETFISHINGSTATE__PLAYERCREATURE_INT_,RPC_GETFISHMARKER__PLAYERCREATURE_,RPC_SETFISHMARKER__PLAYERCREATURE_SCENEOBJECT_,RPC_FREEBAIT__PLAYERCREATURE_,RPC_FISHINGPROCEED__PLAYERCREATURE_INT_SCENEOBJECT_INT_INT_INT_BOOL_STRING_,RPC_MISHAPEVENT__STRING_PLAYERCREATURE_INT_BOOL_STRING_,RPC_LOSEBAIT__PLAYERCREATURE_,RPC_ANIMATE__PLAYERCREATURE_INT_,RPC_CREATEMARKER__FLOAT_FLOAT_FLOAT_ZONE_,RPC_CREATESPLASH__FLOAT_FLOAT_FLOAT_ZONE_PLAYERCREATURE_,RPC_ISPLAYING__PLAYERCREATURE_,RPC_UPDATEMARKER__PLAYERCREATURE_SCENEOBJECT_BOOL_,RPC_REMOVEMARKER__PLAYERCREATURE_SCENEOBJECT_,RPC_REMOVESPLASH__SCENEOBJECT_,RPC_CREATEFISHINGSPLASHEVENT__PLAYERCREATURE_ZONESERVER_SCENEOBJECT_,RPC_STOPFISHINGEVENT__PLAYERCREATURE_,};

FishingManager::FishingManager(ZoneServer* server) : Observer(DummyConstructorParameter::instance()) {
	FishingManagerImplementation* _implementation = new FishingManagerImplementation(server);
	_impl = _implementation;
	_impl->_setStub(this);
}

FishingManager::FishingManager(DummyConstructorParameter* param) : Observer(param) {
}

FishingManager::~FishingManager() {
}


void FishingManager::initializeBaitStatus() {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZEBAITSTATUS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeBaitStatus();
}

void FishingManager::initializeProperty() {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZEPROPERTY__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeProperty();
}

void FishingManager::initializeAction() {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZEACTION__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeAction();
}

void FishingManager::initializeState() {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZESTATE__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeState();
}

void FishingManager::initializeFishType() {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZEFISHTYPE__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeFishType();
}

void FishingManager::initializeFishLength() {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZEFISHLENGTH__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeFishLength();
}

void FishingManager::initializeLoot() {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZELOOT__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeLoot();
}

void FishingManager::initializeColor() {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZECOLOR__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeColor();
}

int FishingManager::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(observable);
		method.addObjectParameter(arg1);
		method.addSignedLongParameter(arg2);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyObserverEvent(eventType, observable, arg1, arg2);
}

void FishingManager::checkFishingOnPositionUpdate(PlayerCreature* player) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CHECKFISHINGONPOSITIONUPDATE__PLAYERCREATURE_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->checkFishingOnPositionUpdate(player);
}

int FishingManager::notifyCloseContainer(PlayerCreature* player, SceneObject* container) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYCLOSECONTAINER__PLAYERCREATURE_SCENEOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(container);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyCloseContainer(player, container);
}

int FishingManager::checkLocation(PlayerCreature* player, int quality, float& x, float& y, float& z) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->checkLocation(player, quality, x, y, z);
}

int FishingManager::startFishing(PlayerCreature* player) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_STARTFISHING__PLAYERCREATURE_);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->startFishing(player);
}

void FishingManager::stopFishing(PlayerCreature* player, unsigned int boxID, bool rem) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_STOPFISHING__PLAYERCREATURE_INT_BOOL_);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(boxID);
		method.addBooleanParameter(rem);

		method.executeWithVoidReturn();
	} else
		_implementation->stopFishing(player, boxID, rem);
}

void FishingManager::fishingStep(PlayerCreature* player) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_FISHINGSTEP__PLAYERCREATURE_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->fishingStep(player);
}

void FishingManager::success(PlayerCreature* player, int fish, SceneObject* marker, unsigned int boxID) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SUCCESS__PLAYERCREATURE_INT_SCENEOBJECT_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(fish);
		method.addObjectParameter(marker);
		method.addUnsignedIntParameter(boxID);

		method.executeWithVoidReturn();
	} else
		_implementation->success(player, fish, marker, boxID);
}

String FishingManager::getTime() {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTIME__);

		method.executeWithAsciiReturn(_return_getTime);
		return _return_getTime;
	} else
		return _implementation->getTime();
}

void FishingManager::sendReward(PlayerCreature* player, SceneObject* marker, SceneObject* loot) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDREWARD__PLAYERCREATURE_SCENEOBJECT_SCENEOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(marker);
		method.addObjectParameter(loot);

		method.executeWithVoidReturn();
	} else
		_implementation->sendReward(player, marker, loot);
}

unsigned int FishingManager::createWindow(PlayerCreature* player, unsigned int boxID) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATEWINDOW__PLAYERCREATURE_INT_);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(boxID);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->createWindow(player, boxID);
}

void FishingManager::closeMenu(PlayerCreature* player, unsigned int boxID) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLOSEMENU__PLAYERCREATURE_INT_);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(boxID);

		method.executeWithVoidReturn();
	} else
		_implementation->closeMenu(player, boxID);
}

int FishingManager::vegetation(SceneObject* marker) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_VEGETATION__SCENEOBJECT_);
		method.addObjectParameter(marker);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->vegetation(marker);
}

int FishingManager::density(SceneObject* marker) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DENSITY__SCENEOBJECT_);
		method.addObjectParameter(marker);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->density(marker);
}

int FishingManager::getFish(PlayerCreature* player) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFISH__PLAYERCREATURE_);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getFish(player);
}

int FishingManager::getNextAction(PlayerCreature* player) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETNEXTACTION__PLAYERCREATURE_);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getNextAction(player);
}

void FishingManager::setNextAction(PlayerCreature* player, int next) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETNEXTACTION__PLAYERCREATURE_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(next);

		method.executeWithVoidReturn();
	} else
		_implementation->setNextAction(player, next);
}

FishingPoleObject* FishingManager::getPole(PlayerCreature* player) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPOLE__PLAYERCREATURE_);
		method.addObjectParameter(player);

		return (FishingPoleObject*) method.executeWithObjectReturn();
	} else
		return _implementation->getPole(player);
}

FishingBaitObject* FishingManager::getBait(PlayerCreature* player) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETBAIT__PLAYERCREATURE_);
		method.addObjectParameter(player);

		return (FishingBaitObject*) method.executeWithObjectReturn();
	} else
		return _implementation->getBait(player);
}

unsigned int FishingManager::getFishBoxID(PlayerCreature* player) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFISHBOXID__PLAYERCREATURE_);
		method.addObjectParameter(player);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getFishBoxID(player);
}

void FishingManager::setFishBoxID(PlayerCreature* player, unsigned int boxID) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETFISHBOXID__PLAYERCREATURE_INT_);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(boxID);

		method.executeWithVoidReturn();
	} else
		_implementation->setFishBoxID(player, boxID);
}

int FishingManager::getFishingState(PlayerCreature* player) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFISHINGSTATE__PLAYERCREATURE_);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getFishingState(player);
}

void FishingManager::setFishingState(PlayerCreature* player, int state) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETFISHINGSTATE__PLAYERCREATURE_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(state);

		method.executeWithVoidReturn();
	} else
		_implementation->setFishingState(player, state);
}

SceneObject* FishingManager::getFishMarker(PlayerCreature* player) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFISHMARKER__PLAYERCREATURE_);
		method.addObjectParameter(player);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return _implementation->getFishMarker(player);
}

void FishingManager::setFishMarker(PlayerCreature* player, SceneObject* marker) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETFISHMARKER__PLAYERCREATURE_SCENEOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(marker);

		method.executeWithVoidReturn();
	} else
		_implementation->setFishMarker(player, marker);
}

void FishingManager::freeBait(PlayerCreature* player) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_FREEBAIT__PLAYERCREATURE_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->freeBait(player);
}

void FishingManager::fishingProceed(PlayerCreature* player, int nextAction, SceneObject* marker, int fish, unsigned int boxID, int newstate, bool notifyClient, String& moodString) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_FISHINGPROCEED__PLAYERCREATURE_INT_SCENEOBJECT_INT_INT_INT_BOOL_STRING_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(nextAction);
		method.addObjectParameter(marker);
		method.addSignedIntParameter(fish);
		method.addUnsignedIntParameter(boxID);
		method.addSignedIntParameter(newstate);
		method.addBooleanParameter(notifyClient);
		method.addAsciiParameter(moodString);

		method.executeWithVoidReturn();
	} else
		_implementation->fishingProceed(player, nextAction, marker, fish, boxID, newstate, notifyClient, moodString);
}

void FishingManager::mishapEvent(const String& text, PlayerCreature* player, unsigned int boxID, bool losebait, String& moodString) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_MISHAPEVENT__STRING_PLAYERCREATURE_INT_BOOL_STRING_);
		method.addAsciiParameter(text);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(boxID);
		method.addBooleanParameter(losebait);
		method.addAsciiParameter(moodString);

		method.executeWithVoidReturn();
	} else
		_implementation->mishapEvent(text, player, boxID, losebait, moodString);
}

bool FishingManager::loseBait(PlayerCreature* player) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_LOSEBAIT__PLAYERCREATURE_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->loseBait(player);
}

void FishingManager::animate(PlayerCreature* player, int nextAction) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ANIMATE__PLAYERCREATURE_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(nextAction);

		method.executeWithVoidReturn();
	} else
		_implementation->animate(player, nextAction);
}

SceneObject* FishingManager::createMarker(float x, float y, float z, Zone* zone) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATEMARKER__FLOAT_FLOAT_FLOAT_ZONE_);
		method.addFloatParameter(x);
		method.addFloatParameter(y);
		method.addFloatParameter(z);
		method.addObjectParameter(zone);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return _implementation->createMarker(x, y, z, zone);
}

void FishingManager::createSplash(float x, float y, float z, Zone* zone, PlayerCreature* player) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATESPLASH__FLOAT_FLOAT_FLOAT_ZONE_PLAYERCREATURE_);
		method.addFloatParameter(x);
		method.addFloatParameter(y);
		method.addFloatParameter(z);
		method.addObjectParameter(zone);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->createSplash(x, y, z, zone, player);
}

bool FishingManager::checkUpdateMarker(PlayerCreature* player, float& x, float& y, float& z) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->checkUpdateMarker(player, x, y, z);
}

bool FishingManager::isPlaying(PlayerCreature* player) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISPLAYING__PLAYERCREATURE_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isPlaying(player);
}

SceneObject* FishingManager::updateMarker(PlayerCreature* player, SceneObject* marker, bool notifyPlayer) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATEMARKER__PLAYERCREATURE_SCENEOBJECT_BOOL_);
		method.addObjectParameter(player);
		method.addObjectParameter(marker);
		method.addBooleanParameter(notifyPlayer);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return _implementation->updateMarker(player, marker, notifyPlayer);
}

void FishingManager::removeMarker(PlayerCreature* player, SceneObject* container) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEMARKER__PLAYERCREATURE_SCENEOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(container);

		method.executeWithVoidReturn();
	} else
		_implementation->removeMarker(player, container);
}

void FishingManager::removeSplash(SceneObject* splash) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVESPLASH__SCENEOBJECT_);
		method.addObjectParameter(splash);

		method.executeWithVoidReturn();
	} else
		_implementation->removeSplash(splash);
}

void FishingManager::createFishingSplashEvent(PlayerCreature* player, ZoneServer* zoneServer, SceneObject* splash) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATEFISHINGSPLASHEVENT__PLAYERCREATURE_ZONESERVER_SCENEOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(zoneServer);
		method.addObjectParameter(splash);

		method.executeWithVoidReturn();
	} else
		_implementation->createFishingSplashEvent(player, zoneServer, splash);
}

void FishingManager::createFishingSession(PlayerCreature* player, FishingEvent* event, SceneObject* marker, int nextAction, int fish, unsigned int boxID, int fishingState, String& mood) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->createFishingSession(player, event, marker, nextAction, fish, boxID, fishingState, mood);
}

FishingEvent* FishingManager::createFishingEvent(PlayerCreature* player, ZoneServer* zoneServer, int state) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->createFishingEvent(player, zoneServer, state);
}

void FishingManager::stopFishingEvent(PlayerCreature* player) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_STOPFISHINGEVENT__PLAYERCREATURE_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->stopFishingEvent(player);
}

FishingEvent* FishingManager::getFishingEvent(PlayerCreature* player) {
	FishingManagerImplementation* _implementation = (FishingManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getFishingEvent(player);
}

DistributedObjectServant* FishingManager::_getImplementation() {

	_updated = true;
	return _impl;
}

void FishingManager::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	FishingManagerImplementation
 */

FishingManagerImplementation::FishingManagerImplementation(DummyConstructorParameter* param) : ObserverImplementation(param) {
	_initializeImplementation();
}


FishingManagerImplementation::~FishingManagerImplementation() {
}


void FishingManagerImplementation::finalize() {
}

void FishingManagerImplementation::_initializeImplementation() {
	_setClassHelper(FishingManagerHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void FishingManagerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (FishingManager*) stub;
	ObserverImplementation::_setStub(stub);
}

DistributedObjectStub* FishingManagerImplementation::_getStub() {
	return _this;
}

FishingManagerImplementation::operator const FishingManager*() {
	return _this;
}

void FishingManagerImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void FishingManagerImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void FishingManagerImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void FishingManagerImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void FishingManagerImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void FishingManagerImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void FishingManagerImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void FishingManagerImplementation::_serializationHelperMethod() {
	ObserverImplementation::_serializationHelperMethod();

	_setClassName("FishingManager");

}

void FishingManagerImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(FishingManagerImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool FishingManagerImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ObserverImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "zoneServer") {
		TypeInfo<ManagedWeakReference<ZoneServer* > >::parseFromBinaryStream(&zoneServer, stream);
		return true;
	}

	if (_name == "miscLoot") {
		TypeInfo<Vector<String> >::parseFromBinaryStream(&miscLoot, stream);
		return true;
	}

	if (_name == "rareLoot") {
		TypeInfo<Vector<String> >::parseFromBinaryStream(&rareLoot, stream);
		return true;
	}

	if (_name == "color") {
		TypeInfo<VectorMap<String, int> >::parseFromBinaryStream(&color, stream);
		return true;
	}

	if (_name == "fishLength") {
		TypeInfo<Vector<int> >::parseFromBinaryStream(&fishLength, stream);
		return true;
	}

	if (_name == "fishType") {
		TypeInfo<Vector<String> >::parseFromBinaryStream(&fishType, stream);
		return true;
	}

	if (_name == "state") {
		TypeInfo<Vector<String> >::parseFromBinaryStream(&state, stream);
		return true;
	}

	if (_name == "action") {
		TypeInfo<Vector<String> >::parseFromBinaryStream(&action, stream);
		return true;
	}

	if (_name == "property") {
		TypeInfo<Vector<String> >::parseFromBinaryStream(&property, stream);
		return true;
	}

	if (_name == "baitStatus") {
		TypeInfo<Vector<String> >::parseFromBinaryStream(&baitStatus, stream);
		return true;
	}

	if (_name == "sessions") {
		TypeInfo<VectorMap<ManagedReference<PlayerCreature* >, FishingSession*> >::parseFromBinaryStream(&sessions, stream);
		return true;
	}


	return false;
}

void FishingManagerImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = FishingManagerImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int FishingManagerImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "zoneServer";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedWeakReference<ZoneServer* > >::toBinaryStream(&zoneServer, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "miscLoot";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<Vector<String> >::toBinaryStream(&miscLoot, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "rareLoot";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<Vector<String> >::toBinaryStream(&rareLoot, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "color";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<VectorMap<String, int> >::toBinaryStream(&color, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "fishLength";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<Vector<int> >::toBinaryStream(&fishLength, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "fishType";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<Vector<String> >::toBinaryStream(&fishType, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "state";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<Vector<String> >::toBinaryStream(&state, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "action";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<Vector<String> >::toBinaryStream(&action, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "property";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<Vector<String> >::toBinaryStream(&property, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "baitStatus";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<Vector<String> >::toBinaryStream(&baitStatus, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "sessions";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<VectorMap<ManagedReference<PlayerCreature* >, FishingSession*> >::toBinaryStream(&sessions, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 11 + ObserverImplementation::writeObjectMembers(stream);
}

FishingManagerImplementation::FishingManagerImplementation(ZoneServer* server) {
	_initializeImplementation();
	// server/zone/managers/minigames/FishingManager.idl():  		zoneServer = server;
	zoneServer = server;
	// server/zone/managers/minigames/FishingManager.idl():  		sessions.setNullValue(null);
	(&sessions)->setNullValue(NULL);
	// server/zone/managers/minigames/FishingManager.idl():  		sessions.setNoDuplicateInsertPlan();
	(&sessions)->setNoDuplicateInsertPlan();
	// server/zone/managers/minigames/FishingManager.idl():  		initializeFishType();
	initializeFishType();
	// server/zone/managers/minigames/FishingManager.idl():  		initializeFishLength();
	initializeFishLength();
	// server/zone/managers/minigames/FishingManager.idl():  		initializeLoot();
	initializeLoot();
	// server/zone/managers/minigames/FishingManager.idl():  		initializeColor();
	initializeColor();
	// server/zone/managers/minigames/FishingManager.idl():  		initializeBaitStatus();
	initializeBaitStatus();
	// server/zone/managers/minigames/FishingManager.idl():  		initializeProperty();
	initializeProperty();
	// server/zone/managers/minigames/FishingManager.idl():  		initializeAction();
	initializeAction();
	// server/zone/managers/minigames/FishingManager.idl():  		initializeState();
	initializeState();
	// server/zone/managers/minigames/FishingManager.idl():  		Logger.setLoggingName("FishingManager");
	Logger::setLoggingName("FishingManager");
	// server/zone/managers/minigames/FishingManager.idl():  		Logger.setLogging(true);
	Logger::setLogging(true);
}

void FishingManagerImplementation::initializeBaitStatus() {
	// server/zone/managers/minigames/FishingManager.idl():  		baitStatus.add("Fresh");
	(&baitStatus)->add("Fresh");
	// server/zone/managers/minigames/FishingManager.idl():  		baitStatus.add("Soggy");
	(&baitStatus)->add("Soggy");
	// server/zone/managers/minigames/FishingManager.idl():  		baitStatus.add("Mush");
	(&baitStatus)->add("Mush");
}

void FishingManagerImplementation::initializeProperty() {
	// server/zone/managers/minigames/FishingManager.idl():  		property.add(" ");
	(&property)->add(" ");
	// server/zone/managers/minigames/FishingManager.idl():  		property.add("*");
	(&property)->add("*");
	// server/zone/managers/minigames/FishingManager.idl():  		property.add("**");
	(&property)->add("**");
	// server/zone/managers/minigames/FishingManager.idl():  		property.add("***");
	(&property)->add("***");
	// server/zone/managers/minigames/FishingManager.idl():  		property.add("****");
	(&property)->add("****");
	// server/zone/managers/minigames/FishingManager.idl():  		property.add("*****");
	(&property)->add("*****");
}

void FishingManagerImplementation::initializeAction() {
	// server/zone/managers/minigames/FishingManager.idl():  		action.add("None");
	(&action)->add("None");
	// server/zone/managers/minigames/FishingManager.idl():  		action.add("Tug Up");
	(&action)->add("Tug Up");
	// server/zone/managers/minigames/FishingManager.idl():  		action.add("Tug Right");
	(&action)->add("Tug Right");
	// server/zone/managers/minigames/FishingManager.idl():  		action.add("Tug Left");
	(&action)->add("Tug Left");
	// server/zone/managers/minigames/FishingManager.idl():  		action.add("Small Reel");
	(&action)->add("Small Reel");
	// server/zone/managers/minigames/FishingManager.idl():  		action.add("Stop Fishing");
	(&action)->add("Stop Fishing");
}

void FishingManagerImplementation::initializeState() {
	// server/zone/managers/minigames/FishingManager.idl():  		state.add("Nothing");
	(&state)->add("Nothing");
	// server/zone/managers/minigames/FishingManager.idl():  		state.add("Waiting...");
	(&state)->add("Waiting...");
	// server/zone/managers/minigames/FishingManager.idl():  		state.add("Snagged!");
	(&state)->add("Snagged!");
	// server/zone/managers/minigames/FishingManager.idl():  		state.add("Nibble...");
	(&state)->add("Nibble...");
	// server/zone/managers/minigames/FishingManager.idl():  		state.add("BITE?");
	(&state)->add("BITE?");
	// server/zone/managers/minigames/FishingManager.idl():  		state.add("CAUGHT SOMETHING?!");
	(&state)->add("CAUGHT SOMETHING?!");
	// server/zone/managers/minigames/FishingManager.idl():  		state.add("CAUGHT SOMETHING?!");
	(&state)->add("CAUGHT SOMETHING?!");
}

void FishingManagerImplementation::initializeFishType() {
	// server/zone/managers/minigames/FishingManager.idl():  		fishType.add("blackfish");
	(&fishType)->add("blackfish");
	// server/zone/managers/minigames/FishingManager.idl():  		fishType.add("blowfish");
	(&fishType)->add("blowfish");
	// server/zone/managers/minigames/FishingManager.idl():  		fishType.add("bluefish");
	(&fishType)->add("bluefish");
	// server/zone/managers/minigames/FishingManager.idl():  		fishType.add("faa");
	(&fishType)->add("faa");
	// server/zone/managers/minigames/FishingManager.idl():  		fishType.add("laa");
	(&fishType)->add("laa");
	// server/zone/managers/minigames/FishingManager.idl():  		fishType.add("ray");
	(&fishType)->add("ray");
	// server/zone/managers/minigames/FishingManager.idl():  		fishType.add("striped");
	(&fishType)->add("striped");
}

void FishingManagerImplementation::initializeFishLength() {
	// server/zone/managers/minigames/FishingManager.idl():  		fishLength.add(25);
	(&fishLength)->add(25);
	// server/zone/managers/minigames/FishingManager.idl():  		fishLength.add(15);
	(&fishLength)->add(15);
	// server/zone/managers/minigames/FishingManager.idl():  		fishLength.add(30);
	(&fishLength)->add(30);
	// server/zone/managers/minigames/FishingManager.idl():  		fishLength.add(30);
	(&fishLength)->add(30);
	// server/zone/managers/minigames/FishingManager.idl():  		fishLength.add(30);
	(&fishLength)->add(30);
	// server/zone/managers/minigames/FishingManager.idl():  		fishLength.add(35);
	(&fishLength)->add(35);
	// server/zone/managers/minigames/FishingManager.idl():  		fishLength.add(40);
	(&fishLength)->add(40);
}

void FishingManagerImplementation::initializeLoot() {
	// server/zone/managers/minigames/FishingManager.idl():  		miscLoot.add("object/tangible/wearables/shoes/shoes_s07.iff");
	(&miscLoot)->add("object/tangible/wearables/shoes/shoes_s07.iff");
	// server/zone/managers/minigames/FishingManager.idl():  		miscLoot.add("object/tangible/wearables/shoes/shoes_s02.iff");
	(&miscLoot)->add("object/tangible/wearables/shoes/shoes_s02.iff");
	// server/zone/managers/minigames/FishingManager.idl():  		miscLoot.add("object/tangible/food/foraged/foraged_fruit_s1.iff");
	(&miscLoot)->add("object/tangible/food/foraged/foraged_fruit_s1.iff");
	// server/zone/managers/minigames/FishingManager.idl():  		rareLoot.add("object/weapon/ranged/pistol/pistol_cdef.iff");
	(&rareLoot)->add("object/weapon/ranged/pistol/pistol_cdef.iff");
}

void FishingManagerImplementation::initializeColor() {
	// server/zone/managers/minigames/FishingManager.idl():  		color.put("corellia", 61);
	(&color)->put("corellia", 61);
	// server/zone/managers/minigames/FishingManager.idl():  		color.put("dantooine", 51);
	(&color)->put("dantooine", 51);
	// server/zone/managers/minigames/FishingManager.idl():  		color.put("dathomir", 21);
	(&color)->put("dathomir", 21);
	// server/zone/managers/minigames/FishingManager.idl():  		color.put("endor", 32);
	(&color)->put("endor", 32);
	// server/zone/managers/minigames/FishingManager.idl():  		color.put("lok", 8);
	(&color)->put("lok", 8);
	// server/zone/managers/minigames/FishingManager.idl():  		color.put("naboo", 14);
	(&color)->put("naboo", 14);
	// server/zone/managers/minigames/FishingManager.idl():  		color.put("rori", 55);
	(&color)->put("rori", 55);
	// server/zone/managers/minigames/FishingManager.idl():  		color.put("talus", 0);
	(&color)->put("talus", 0);
	// server/zone/managers/minigames/FishingManager.idl():  		color.put("tatooine", 7);
	(&color)->put("tatooine", 7);
	// server/zone/managers/minigames/FishingManager.idl():  		color.put("yavin4", 41);
	(&color)->put("yavin4", 41);
}

int FishingManagerImplementation::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	// server/zone/managers/minigames/FishingManager.idl():  		return 
	if (eventType == ObserverEventType::POSITIONCHANGED){
	// server/zone/managers/minigames/FishingManager.idl():  			checkFishingOnPositionUpdate((PlayerCreature) observable);
	checkFishingOnPositionUpdate((PlayerCreature*) observable);
	// server/zone/managers/minigames/FishingManager.idl():  			return 0;
	return 0;
}

	else 	// server/zone/managers/minigames/FishingManager.idl():  		return 
	if (eventType == ObserverEventType::CLOSECONTAINER){
	// server/zone/managers/minigames/FishingManager.idl():  			return notifyCloseContainer((PlayerCreature)arg1, (SceneObject)observable);
	return notifyCloseContainer((PlayerCreature*) arg1, (SceneObject*) observable);
}
	// server/zone/managers/minigames/FishingManager.idl():  		return 1;
	return 1;
}

/*
 *	FishingManagerAdapter
 */

FishingManagerAdapter::FishingManagerAdapter(FishingManagerImplementation* obj) : ObserverAdapter(obj) {
}

Packet* FishingManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_INITIALIZEBAITSTATUS__:
		initializeBaitStatus();
		break;
	case RPC_INITIALIZEPROPERTY__:
		initializeProperty();
		break;
	case RPC_INITIALIZEACTION__:
		initializeAction();
		break;
	case RPC_INITIALIZESTATE__:
		initializeState();
		break;
	case RPC_INITIALIZEFISHTYPE__:
		initializeFishType();
		break;
	case RPC_INITIALIZEFISHLENGTH__:
		initializeFishLength();
		break;
	case RPC_INITIALIZELOOT__:
		initializeLoot();
		break;
	case RPC_INITIALIZECOLOR__:
		initializeColor();
		break;
	case RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_:
		resp->insertSignedInt(notifyObserverEvent(inv->getUnsignedIntParameter(), (Observable*) inv->getObjectParameter(), (ManagedObject*) inv->getObjectParameter(), inv->getSignedLongParameter()));
		break;
	case RPC_CHECKFISHINGONPOSITIONUPDATE__PLAYERCREATURE_:
		checkFishingOnPositionUpdate((PlayerCreature*) inv->getObjectParameter());
		break;
	case RPC_NOTIFYCLOSECONTAINER__PLAYERCREATURE_SCENEOBJECT_:
		resp->insertSignedInt(notifyCloseContainer((PlayerCreature*) inv->getObjectParameter(), (SceneObject*) inv->getObjectParameter()));
		break;
	case RPC_STARTFISHING__PLAYERCREATURE_:
		resp->insertSignedInt(startFishing((PlayerCreature*) inv->getObjectParameter()));
		break;
	case RPC_STOPFISHING__PLAYERCREATURE_INT_BOOL_:
		stopFishing((PlayerCreature*) inv->getObjectParameter(), inv->getUnsignedIntParameter(), inv->getBooleanParameter());
		break;
	case RPC_FISHINGSTEP__PLAYERCREATURE_:
		fishingStep((PlayerCreature*) inv->getObjectParameter());
		break;
	case RPC_SUCCESS__PLAYERCREATURE_INT_SCENEOBJECT_INT_:
		success((PlayerCreature*) inv->getObjectParameter(), inv->getSignedIntParameter(), (SceneObject*) inv->getObjectParameter(), inv->getUnsignedIntParameter());
		break;
	case RPC_GETTIME__:
		resp->insertAscii(getTime());
		break;
	case RPC_SENDREWARD__PLAYERCREATURE_SCENEOBJECT_SCENEOBJECT_:
		sendReward((PlayerCreature*) inv->getObjectParameter(), (SceneObject*) inv->getObjectParameter(), (SceneObject*) inv->getObjectParameter());
		break;
	case RPC_CREATEWINDOW__PLAYERCREATURE_INT_:
		resp->insertInt(createWindow((PlayerCreature*) inv->getObjectParameter(), inv->getUnsignedIntParameter()));
		break;
	case RPC_CLOSEMENU__PLAYERCREATURE_INT_:
		closeMenu((PlayerCreature*) inv->getObjectParameter(), inv->getUnsignedIntParameter());
		break;
	case RPC_VEGETATION__SCENEOBJECT_:
		resp->insertSignedInt(vegetation((SceneObject*) inv->getObjectParameter()));
		break;
	case RPC_DENSITY__SCENEOBJECT_:
		resp->insertSignedInt(density((SceneObject*) inv->getObjectParameter()));
		break;
	case RPC_GETFISH__PLAYERCREATURE_:
		resp->insertSignedInt(getFish((PlayerCreature*) inv->getObjectParameter()));
		break;
	case RPC_GETNEXTACTION__PLAYERCREATURE_:
		resp->insertSignedInt(getNextAction((PlayerCreature*) inv->getObjectParameter()));
		break;
	case RPC_SETNEXTACTION__PLAYERCREATURE_INT_:
		setNextAction((PlayerCreature*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case RPC_GETPOLE__PLAYERCREATURE_:
		resp->insertLong(getPole((PlayerCreature*) inv->getObjectParameter())->_getObjectID());
		break;
	case RPC_GETBAIT__PLAYERCREATURE_:
		resp->insertLong(getBait((PlayerCreature*) inv->getObjectParameter())->_getObjectID());
		break;
	case RPC_GETFISHBOXID__PLAYERCREATURE_:
		resp->insertInt(getFishBoxID((PlayerCreature*) inv->getObjectParameter()));
		break;
	case RPC_SETFISHBOXID__PLAYERCREATURE_INT_:
		setFishBoxID((PlayerCreature*) inv->getObjectParameter(), inv->getUnsignedIntParameter());
		break;
	case RPC_GETFISHINGSTATE__PLAYERCREATURE_:
		resp->insertSignedInt(getFishingState((PlayerCreature*) inv->getObjectParameter()));
		break;
	case RPC_SETFISHINGSTATE__PLAYERCREATURE_INT_:
		setFishingState((PlayerCreature*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case RPC_GETFISHMARKER__PLAYERCREATURE_:
		resp->insertLong(getFishMarker((PlayerCreature*) inv->getObjectParameter())->_getObjectID());
		break;
	case RPC_SETFISHMARKER__PLAYERCREATURE_SCENEOBJECT_:
		setFishMarker((PlayerCreature*) inv->getObjectParameter(), (SceneObject*) inv->getObjectParameter());
		break;
	case RPC_FREEBAIT__PLAYERCREATURE_:
		freeBait((PlayerCreature*) inv->getObjectParameter());
		break;
	case RPC_FISHINGPROCEED__PLAYERCREATURE_INT_SCENEOBJECT_INT_INT_INT_BOOL_STRING_:
		fishingProceed((PlayerCreature*) inv->getObjectParameter(), inv->getSignedIntParameter(), (SceneObject*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getUnsignedIntParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter(), inv->getAsciiParameter(_param7_fishingProceed__PlayerCreature_int_SceneObject_int_int_int_bool_String_));
		break;
	case RPC_MISHAPEVENT__STRING_PLAYERCREATURE_INT_BOOL_STRING_:
		mishapEvent(inv->getAsciiParameter(_param0_mishapEvent__String_PlayerCreature_int_bool_String_), (PlayerCreature*) inv->getObjectParameter(), inv->getUnsignedIntParameter(), inv->getBooleanParameter(), inv->getAsciiParameter(_param4_mishapEvent__String_PlayerCreature_int_bool_String_));
		break;
	case RPC_LOSEBAIT__PLAYERCREATURE_:
		resp->insertBoolean(loseBait((PlayerCreature*) inv->getObjectParameter()));
		break;
	case RPC_ANIMATE__PLAYERCREATURE_INT_:
		animate((PlayerCreature*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case RPC_CREATEMARKER__FLOAT_FLOAT_FLOAT_ZONE_:
		resp->insertLong(createMarker(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), (Zone*) inv->getObjectParameter())->_getObjectID());
		break;
	case RPC_CREATESPLASH__FLOAT_FLOAT_FLOAT_ZONE_PLAYERCREATURE_:
		createSplash(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), (Zone*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter());
		break;
	case RPC_ISPLAYING__PLAYERCREATURE_:
		resp->insertBoolean(isPlaying((PlayerCreature*) inv->getObjectParameter()));
		break;
	case RPC_UPDATEMARKER__PLAYERCREATURE_SCENEOBJECT_BOOL_:
		resp->insertLong(updateMarker((PlayerCreature*) inv->getObjectParameter(), (SceneObject*) inv->getObjectParameter(), inv->getBooleanParameter())->_getObjectID());
		break;
	case RPC_REMOVEMARKER__PLAYERCREATURE_SCENEOBJECT_:
		removeMarker((PlayerCreature*) inv->getObjectParameter(), (SceneObject*) inv->getObjectParameter());
		break;
	case RPC_REMOVESPLASH__SCENEOBJECT_:
		removeSplash((SceneObject*) inv->getObjectParameter());
		break;
	case RPC_CREATEFISHINGSPLASHEVENT__PLAYERCREATURE_ZONESERVER_SCENEOBJECT_:
		createFishingSplashEvent((PlayerCreature*) inv->getObjectParameter(), (ZoneServer*) inv->getObjectParameter(), (SceneObject*) inv->getObjectParameter());
		break;
	case RPC_STOPFISHINGEVENT__PLAYERCREATURE_:
		stopFishingEvent((PlayerCreature*) inv->getObjectParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void FishingManagerAdapter::initializeBaitStatus() {
	((FishingManagerImplementation*) impl)->initializeBaitStatus();
}

void FishingManagerAdapter::initializeProperty() {
	((FishingManagerImplementation*) impl)->initializeProperty();
}

void FishingManagerAdapter::initializeAction() {
	((FishingManagerImplementation*) impl)->initializeAction();
}

void FishingManagerAdapter::initializeState() {
	((FishingManagerImplementation*) impl)->initializeState();
}

void FishingManagerAdapter::initializeFishType() {
	((FishingManagerImplementation*) impl)->initializeFishType();
}

void FishingManagerAdapter::initializeFishLength() {
	((FishingManagerImplementation*) impl)->initializeFishLength();
}

void FishingManagerAdapter::initializeLoot() {
	((FishingManagerImplementation*) impl)->initializeLoot();
}

void FishingManagerAdapter::initializeColor() {
	((FishingManagerImplementation*) impl)->initializeColor();
}

int FishingManagerAdapter::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	return ((FishingManagerImplementation*) impl)->notifyObserverEvent(eventType, observable, arg1, arg2);
}

void FishingManagerAdapter::checkFishingOnPositionUpdate(PlayerCreature* player) {
	((FishingManagerImplementation*) impl)->checkFishingOnPositionUpdate(player);
}

int FishingManagerAdapter::notifyCloseContainer(PlayerCreature* player, SceneObject* container) {
	return ((FishingManagerImplementation*) impl)->notifyCloseContainer(player, container);
}

int FishingManagerAdapter::startFishing(PlayerCreature* player) {
	return ((FishingManagerImplementation*) impl)->startFishing(player);
}

void FishingManagerAdapter::stopFishing(PlayerCreature* player, unsigned int boxID, bool rem) {
	((FishingManagerImplementation*) impl)->stopFishing(player, boxID, rem);
}

void FishingManagerAdapter::fishingStep(PlayerCreature* player) {
	((FishingManagerImplementation*) impl)->fishingStep(player);
}

void FishingManagerAdapter::success(PlayerCreature* player, int fish, SceneObject* marker, unsigned int boxID) {
	((FishingManagerImplementation*) impl)->success(player, fish, marker, boxID);
}

String FishingManagerAdapter::getTime() {
	return ((FishingManagerImplementation*) impl)->getTime();
}

void FishingManagerAdapter::sendReward(PlayerCreature* player, SceneObject* marker, SceneObject* loot) {
	((FishingManagerImplementation*) impl)->sendReward(player, marker, loot);
}

unsigned int FishingManagerAdapter::createWindow(PlayerCreature* player, unsigned int boxID) {
	return ((FishingManagerImplementation*) impl)->createWindow(player, boxID);
}

void FishingManagerAdapter::closeMenu(PlayerCreature* player, unsigned int boxID) {
	((FishingManagerImplementation*) impl)->closeMenu(player, boxID);
}

int FishingManagerAdapter::vegetation(SceneObject* marker) {
	return ((FishingManagerImplementation*) impl)->vegetation(marker);
}

int FishingManagerAdapter::density(SceneObject* marker) {
	return ((FishingManagerImplementation*) impl)->density(marker);
}

int FishingManagerAdapter::getFish(PlayerCreature* player) {
	return ((FishingManagerImplementation*) impl)->getFish(player);
}

int FishingManagerAdapter::getNextAction(PlayerCreature* player) {
	return ((FishingManagerImplementation*) impl)->getNextAction(player);
}

void FishingManagerAdapter::setNextAction(PlayerCreature* player, int next) {
	((FishingManagerImplementation*) impl)->setNextAction(player, next);
}

FishingPoleObject* FishingManagerAdapter::getPole(PlayerCreature* player) {
	return ((FishingManagerImplementation*) impl)->getPole(player);
}

FishingBaitObject* FishingManagerAdapter::getBait(PlayerCreature* player) {
	return ((FishingManagerImplementation*) impl)->getBait(player);
}

unsigned int FishingManagerAdapter::getFishBoxID(PlayerCreature* player) {
	return ((FishingManagerImplementation*) impl)->getFishBoxID(player);
}

void FishingManagerAdapter::setFishBoxID(PlayerCreature* player, unsigned int boxID) {
	((FishingManagerImplementation*) impl)->setFishBoxID(player, boxID);
}

int FishingManagerAdapter::getFishingState(PlayerCreature* player) {
	return ((FishingManagerImplementation*) impl)->getFishingState(player);
}

void FishingManagerAdapter::setFishingState(PlayerCreature* player, int state) {
	((FishingManagerImplementation*) impl)->setFishingState(player, state);
}

SceneObject* FishingManagerAdapter::getFishMarker(PlayerCreature* player) {
	return ((FishingManagerImplementation*) impl)->getFishMarker(player);
}

void FishingManagerAdapter::setFishMarker(PlayerCreature* player, SceneObject* marker) {
	((FishingManagerImplementation*) impl)->setFishMarker(player, marker);
}

void FishingManagerAdapter::freeBait(PlayerCreature* player) {
	((FishingManagerImplementation*) impl)->freeBait(player);
}

void FishingManagerAdapter::fishingProceed(PlayerCreature* player, int nextAction, SceneObject* marker, int fish, unsigned int boxID, int newstate, bool notifyClient, String& moodString) {
	((FishingManagerImplementation*) impl)->fishingProceed(player, nextAction, marker, fish, boxID, newstate, notifyClient, moodString);
}

void FishingManagerAdapter::mishapEvent(const String& text, PlayerCreature* player, unsigned int boxID, bool losebait, String& moodString) {
	((FishingManagerImplementation*) impl)->mishapEvent(text, player, boxID, losebait, moodString);
}

bool FishingManagerAdapter::loseBait(PlayerCreature* player) {
	return ((FishingManagerImplementation*) impl)->loseBait(player);
}

void FishingManagerAdapter::animate(PlayerCreature* player, int nextAction) {
	((FishingManagerImplementation*) impl)->animate(player, nextAction);
}

SceneObject* FishingManagerAdapter::createMarker(float x, float y, float z, Zone* zone) {
	return ((FishingManagerImplementation*) impl)->createMarker(x, y, z, zone);
}

void FishingManagerAdapter::createSplash(float x, float y, float z, Zone* zone, PlayerCreature* player) {
	((FishingManagerImplementation*) impl)->createSplash(x, y, z, zone, player);
}

bool FishingManagerAdapter::isPlaying(PlayerCreature* player) {
	return ((FishingManagerImplementation*) impl)->isPlaying(player);
}

SceneObject* FishingManagerAdapter::updateMarker(PlayerCreature* player, SceneObject* marker, bool notifyPlayer) {
	return ((FishingManagerImplementation*) impl)->updateMarker(player, marker, notifyPlayer);
}

void FishingManagerAdapter::removeMarker(PlayerCreature* player, SceneObject* container) {
	((FishingManagerImplementation*) impl)->removeMarker(player, container);
}

void FishingManagerAdapter::removeSplash(SceneObject* splash) {
	((FishingManagerImplementation*) impl)->removeSplash(splash);
}

void FishingManagerAdapter::createFishingSplashEvent(PlayerCreature* player, ZoneServer* zoneServer, SceneObject* splash) {
	((FishingManagerImplementation*) impl)->createFishingSplashEvent(player, zoneServer, splash);
}

void FishingManagerAdapter::stopFishingEvent(PlayerCreature* player) {
	((FishingManagerImplementation*) impl)->stopFishingEvent(player);
}

/*
 *	FishingManagerHelper
 */

FishingManagerHelper* FishingManagerHelper::staticInitializer = FishingManagerHelper::instance();

FishingManagerHelper::FishingManagerHelper() {
	className = "FishingManager";

	Core::getObjectBroker()->registerClass(className, this);
}

void FishingManagerHelper::finalizeHelper() {
	FishingManagerHelper::finalize();
}

DistributedObject* FishingManagerHelper::instantiateObject() {
	return new FishingManager(DummyConstructorParameter::instance());
}

DistributedObjectServant* FishingManagerHelper::instantiateServant() {
	return new FishingManagerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* FishingManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new FishingManagerAdapter((FishingManagerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

