/*
 *	server/zone/managers/minigames/FishingManager.cpp generated by engine3 IDL compiler 0.60
 */

#include "FishingManager.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/tangible/fishing/FishingPoleObject.h"

#include "server/zone/objects/tangible/fishing/FishingBaitObject.h"

#include "server/zone/managers/minigames/events/FishingEvent.h"

#include "server/zone/managers/minigames/events/FishingSplashEvent.h"

#include "server/zone/managers/minigames/FishingSession.h"

/*
 *	FishingManagerStub
 */

enum {RPC_INITIALIZEBAITSTATUS__ = 6,RPC_INITIALIZEPROPERTY__,RPC_INITIALIZEACTION__,RPC_INITIALIZESTATE__,RPC_INITIALIZEFISHTYPE__,RPC_INITIALIZEFISHLENGTH__,RPC_INITIALIZELOOT__,RPC_INITIALIZECOLOR__,RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_,RPC_CHECKFISHINGONPOSITIONUPDATE__CREATUREOBJECT_,RPC_NOTIFYCLOSECONTAINER__CREATUREOBJECT_SCENEOBJECT_,RPC_STARTFISHING__CREATUREOBJECT_,RPC_STOPFISHING__CREATUREOBJECT_INT_BOOL_,RPC_FISHINGSTEP__CREATUREOBJECT_,RPC_SUCCESS__CREATUREOBJECT_INT_SCENEOBJECT_INT_,RPC_GETTIME__,RPC_SENDREWARD__CREATUREOBJECT_SCENEOBJECT_SCENEOBJECT_,RPC_CREATEWINDOW__CREATUREOBJECT_INT_,RPC_CLOSEMENU__CREATUREOBJECT_INT_,RPC_VEGETATION__SCENEOBJECT_,RPC_DENSITY__SCENEOBJECT_,RPC_GETFISH__CREATUREOBJECT_,RPC_GETNEXTACTION__CREATUREOBJECT_,RPC_SETNEXTACTION__CREATUREOBJECT_INT_,RPC_GETPOLE__CREATUREOBJECT_,RPC_GETBAIT__CREATUREOBJECT_,RPC_GETFISHBOXID__CREATUREOBJECT_,RPC_SETFISHBOXID__CREATUREOBJECT_INT_,RPC_GETFISHINGSTATE__CREATUREOBJECT_,RPC_SETFISHINGSTATE__CREATUREOBJECT_INT_,RPC_GETFISHMARKER__CREATUREOBJECT_,RPC_SETFISHMARKER__CREATUREOBJECT_SCENEOBJECT_,RPC_FREEBAIT__CREATUREOBJECT_,RPC_FISHINGPROCEED__CREATUREOBJECT_INT_SCENEOBJECT_INT_INT_INT_BOOL_STRING_,RPC_MISHAPEVENT__STRING_CREATUREOBJECT_INT_BOOL_STRING_,RPC_LOSEBAIT__CREATUREOBJECT_,RPC_ANIMATE__CREATUREOBJECT_INT_,RPC_CREATEMARKER__FLOAT_FLOAT_FLOAT_ZONE_,RPC_CREATESPLASH__FLOAT_FLOAT_FLOAT_ZONE_CREATUREOBJECT_,RPC_ISPLAYING__CREATUREOBJECT_,RPC_UPDATEMARKER__CREATUREOBJECT_SCENEOBJECT_BOOL_,RPC_REMOVEMARKER__CREATUREOBJECT_SCENEOBJECT_,RPC_REMOVESPLASH__SCENEOBJECT_,RPC_CREATEFISHINGSPLASHEVENT__CREATUREOBJECT_SCENEOBJECT_,RPC_STOPFISHINGEVENT__CREATUREOBJECT_,};

FishingManager::FishingManager() : Observer(DummyConstructorParameter::instance()) {
	FishingManagerImplementation* _implementation = new FishingManagerImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("FishingManager");
}

FishingManager::FishingManager(DummyConstructorParameter* param) : Observer(param) {
	_setClassName("FishingManager");
}

FishingManager::~FishingManager() {
}



void FishingManager::initializeBaitStatus() {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZEBAITSTATUS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeBaitStatus();
}

void FishingManager::initializeProperty() {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZEPROPERTY__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeProperty();
}

void FishingManager::initializeAction() {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZEACTION__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeAction();
}

void FishingManager::initializeState() {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZESTATE__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeState();
}

void FishingManager::initializeFishType() {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZEFISHTYPE__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeFishType();
}

void FishingManager::initializeFishLength() {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZEFISHLENGTH__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeFishLength();
}

void FishingManager::initializeLoot() {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZELOOT__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeLoot();
}

void FishingManager::initializeColor() {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZECOLOR__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeColor();
}

int FishingManager::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(observable);
		method.addObjectParameter(arg1);
		method.addSignedLongParameter(arg2);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyObserverEvent(eventType, observable, arg1, arg2);
}

void FishingManager::checkFishingOnPositionUpdate(CreatureObject* player) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CHECKFISHINGONPOSITIONUPDATE__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->checkFishingOnPositionUpdate(player);
}

int FishingManager::notifyCloseContainer(CreatureObject* player, SceneObject* container) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYCLOSECONTAINER__CREATUREOBJECT_SCENEOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(container);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyCloseContainer(player, container);
}

int FishingManager::checkLocation(CreatureObject* player, int quality, float& x, float& y, float& z) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->checkLocation(player, quality, x, y, z);
}

int FishingManager::startFishing(CreatureObject* player) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_STARTFISHING__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->startFishing(player);
}

void FishingManager::stopFishing(CreatureObject* player, unsigned int boxID, bool rem) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_STOPFISHING__CREATUREOBJECT_INT_BOOL_);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(boxID);
		method.addBooleanParameter(rem);

		method.executeWithVoidReturn();
	} else
		_implementation->stopFishing(player, boxID, rem);
}

void FishingManager::fishingStep(CreatureObject* player) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_FISHINGSTEP__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->fishingStep(player);
}

void FishingManager::success(CreatureObject* player, int fish, SceneObject* marker, unsigned int boxID) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SUCCESS__CREATUREOBJECT_INT_SCENEOBJECT_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(fish);
		method.addObjectParameter(marker);
		method.addUnsignedIntParameter(boxID);

		method.executeWithVoidReturn();
	} else
		_implementation->success(player, fish, marker, boxID);
}

String FishingManager::getTime() {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTIME__);

		String _return_getTime;
		method.executeWithAsciiReturn(_return_getTime);
		return _return_getTime;
	} else
		return _implementation->getTime();
}

void FishingManager::sendReward(CreatureObject* player, SceneObject* marker, SceneObject* loot) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDREWARD__CREATUREOBJECT_SCENEOBJECT_SCENEOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(marker);
		method.addObjectParameter(loot);

		method.executeWithVoidReturn();
	} else
		_implementation->sendReward(player, marker, loot);
}

unsigned int FishingManager::createWindow(CreatureObject* player, unsigned int boxID) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATEWINDOW__CREATUREOBJECT_INT_);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(boxID);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->createWindow(player, boxID);
}

void FishingManager::closeMenu(CreatureObject* player, unsigned int boxID) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLOSEMENU__CREATUREOBJECT_INT_);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(boxID);

		method.executeWithVoidReturn();
	} else
		_implementation->closeMenu(player, boxID);
}

int FishingManager::vegetation(SceneObject* marker) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_VEGETATION__SCENEOBJECT_);
		method.addObjectParameter(marker);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->vegetation(marker);
}

int FishingManager::density(SceneObject* marker) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DENSITY__SCENEOBJECT_);
		method.addObjectParameter(marker);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->density(marker);
}

int FishingManager::getFish(CreatureObject* player) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFISH__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getFish(player);
}

int FishingManager::getNextAction(CreatureObject* player) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETNEXTACTION__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getNextAction(player);
}

void FishingManager::setNextAction(CreatureObject* player, int next) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETNEXTACTION__CREATUREOBJECT_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(next);

		method.executeWithVoidReturn();
	} else
		_implementation->setNextAction(player, next);
}

FishingPoleObject* FishingManager::getPole(CreatureObject* player) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPOLE__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return static_cast<FishingPoleObject*>(method.executeWithObjectReturn());
	} else
		return _implementation->getPole(player);
}

FishingBaitObject* FishingManager::getBait(CreatureObject* player) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETBAIT__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return static_cast<FishingBaitObject*>(method.executeWithObjectReturn());
	} else
		return _implementation->getBait(player);
}

unsigned int FishingManager::getFishBoxID(CreatureObject* player) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFISHBOXID__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getFishBoxID(player);
}

void FishingManager::setFishBoxID(CreatureObject* player, unsigned int boxID) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETFISHBOXID__CREATUREOBJECT_INT_);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(boxID);

		method.executeWithVoidReturn();
	} else
		_implementation->setFishBoxID(player, boxID);
}

int FishingManager::getFishingState(CreatureObject* player) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFISHINGSTATE__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getFishingState(player);
}

void FishingManager::setFishingState(CreatureObject* player, int state) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETFISHINGSTATE__CREATUREOBJECT_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(state);

		method.executeWithVoidReturn();
	} else
		_implementation->setFishingState(player, state);
}

SceneObject* FishingManager::getFishMarker(CreatureObject* player) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFISHMARKER__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return static_cast<SceneObject*>(method.executeWithObjectReturn());
	} else
		return _implementation->getFishMarker(player);
}

void FishingManager::setFishMarker(CreatureObject* player, SceneObject* marker) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETFISHMARKER__CREATUREOBJECT_SCENEOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(marker);

		method.executeWithVoidReturn();
	} else
		_implementation->setFishMarker(player, marker);
}

void FishingManager::freeBait(CreatureObject* player) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_FREEBAIT__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->freeBait(player);
}

void FishingManager::fishingProceed(CreatureObject* player, int nextAction, SceneObject* marker, int fish, unsigned int boxID, int newstate, bool notifyClient, String& moodString) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_FISHINGPROCEED__CREATUREOBJECT_INT_SCENEOBJECT_INT_INT_INT_BOOL_STRING_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(nextAction);
		method.addObjectParameter(marker);
		method.addSignedIntParameter(fish);
		method.addUnsignedIntParameter(boxID);
		method.addSignedIntParameter(newstate);
		method.addBooleanParameter(notifyClient);
		method.addAsciiParameter(moodString);

		method.executeWithVoidReturn();
	} else
		_implementation->fishingProceed(player, nextAction, marker, fish, boxID, newstate, notifyClient, moodString);
}

void FishingManager::mishapEvent(const String& text, CreatureObject* player, unsigned int boxID, bool losebait, String& moodString) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_MISHAPEVENT__STRING_CREATUREOBJECT_INT_BOOL_STRING_);
		method.addAsciiParameter(text);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(boxID);
		method.addBooleanParameter(losebait);
		method.addAsciiParameter(moodString);

		method.executeWithVoidReturn();
	} else
		_implementation->mishapEvent(text, player, boxID, losebait, moodString);
}

bool FishingManager::loseBait(CreatureObject* player) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_LOSEBAIT__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->loseBait(player);
}

void FishingManager::animate(CreatureObject* player, int nextAction) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ANIMATE__CREATUREOBJECT_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(nextAction);

		method.executeWithVoidReturn();
	} else
		_implementation->animate(player, nextAction);
}

SceneObject* FishingManager::createMarker(float x, float y, float z, Zone* zone) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATEMARKER__FLOAT_FLOAT_FLOAT_ZONE_);
		method.addFloatParameter(x);
		method.addFloatParameter(y);
		method.addFloatParameter(z);
		method.addObjectParameter(zone);

		return static_cast<SceneObject*>(method.executeWithObjectReturn());
	} else
		return _implementation->createMarker(x, y, z, zone);
}

void FishingManager::createSplash(float x, float y, float z, Zone* zone, CreatureObject* player) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATESPLASH__FLOAT_FLOAT_FLOAT_ZONE_CREATUREOBJECT_);
		method.addFloatParameter(x);
		method.addFloatParameter(y);
		method.addFloatParameter(z);
		method.addObjectParameter(zone);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->createSplash(x, y, z, zone, player);
}

bool FishingManager::checkUpdateMarker(CreatureObject* player, float& x, float& y, float& z) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->checkUpdateMarker(player, x, y, z);
}

bool FishingManager::isPlaying(CreatureObject* player) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISPLAYING__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isPlaying(player);
}

SceneObject* FishingManager::updateMarker(CreatureObject* player, SceneObject* marker, bool notifyPlayer) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATEMARKER__CREATUREOBJECT_SCENEOBJECT_BOOL_);
		method.addObjectParameter(player);
		method.addObjectParameter(marker);
		method.addBooleanParameter(notifyPlayer);

		return static_cast<SceneObject*>(method.executeWithObjectReturn());
	} else
		return _implementation->updateMarker(player, marker, notifyPlayer);
}

void FishingManager::removeMarker(CreatureObject* player, SceneObject* container) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEMARKER__CREATUREOBJECT_SCENEOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(container);

		method.executeWithVoidReturn();
	} else
		_implementation->removeMarker(player, container);
}

void FishingManager::removeSplash(SceneObject* splash) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVESPLASH__SCENEOBJECT_);
		method.addObjectParameter(splash);

		method.executeWithVoidReturn();
	} else
		_implementation->removeSplash(splash);
}

void FishingManager::createFishingSplashEvent(CreatureObject* player, SceneObject* splash) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATEFISHINGSPLASHEVENT__CREATUREOBJECT_SCENEOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(splash);

		method.executeWithVoidReturn();
	} else
		_implementation->createFishingSplashEvent(player, splash);
}

void FishingManager::createFishingSession(CreatureObject* player, FishingEvent* event, SceneObject* marker, int nextAction, int fish, unsigned int boxID, int fishingState, String& mood) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->createFishingSession(player, event, marker, nextAction, fish, boxID, fishingState, mood);
}

FishingEvent* FishingManager::createFishingEvent(CreatureObject* player, int state) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->createFishingEvent(player, state);
}

void FishingManager::stopFishingEvent(CreatureObject* player) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_STOPFISHINGEVENT__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->stopFishingEvent(player);
}

FishingEvent* FishingManager::getFishingEvent(CreatureObject* player) {
	FishingManagerImplementation* _implementation = static_cast<FishingManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getFishingEvent(player);
}

DistributedObjectServant* FishingManager::_getImplementation() {

	_updated = true;
	return _impl;
}

void FishingManager::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	FishingManagerImplementation
 */

FishingManagerImplementation::FishingManagerImplementation(DummyConstructorParameter* param) : ObserverImplementation(param) {
	_initializeImplementation();
}


FishingManagerImplementation::~FishingManagerImplementation() {
}


void FishingManagerImplementation::finalize() {
}

void FishingManagerImplementation::_initializeImplementation() {
	_setClassHelper(FishingManagerHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void FishingManagerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<FishingManager*>(stub);
	ObserverImplementation::_setStub(stub);
}

DistributedObjectStub* FishingManagerImplementation::_getStub() {
	return _this;
}

FishingManagerImplementation::operator const FishingManager*() {
	return _this;
}

void FishingManagerImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void FishingManagerImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void FishingManagerImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void FishingManagerImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void FishingManagerImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void FishingManagerImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void FishingManagerImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void FishingManagerImplementation::_serializationHelperMethod() {
	ObserverImplementation::_serializationHelperMethod();

	_setClassName("FishingManager");

}

void FishingManagerImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(FishingManagerImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool FishingManagerImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ObserverImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "FishingManager.miscLoot") {
		TypeInfo<Vector<String> >::parseFromBinaryStream(&miscLoot, stream);
		return true;
	}

	if (_name == "FishingManager.rareLoot") {
		TypeInfo<Vector<String> >::parseFromBinaryStream(&rareLoot, stream);
		return true;
	}

	if (_name == "FishingManager.color") {
		TypeInfo<VectorMap<String, int> >::parseFromBinaryStream(&color, stream);
		return true;
	}

	if (_name == "FishingManager.fishLength") {
		TypeInfo<Vector<int> >::parseFromBinaryStream(&fishLength, stream);
		return true;
	}

	if (_name == "FishingManager.fishType") {
		TypeInfo<Vector<String> >::parseFromBinaryStream(&fishType, stream);
		return true;
	}

	if (_name == "FishingManager.state") {
		TypeInfo<Vector<String> >::parseFromBinaryStream(&state, stream);
		return true;
	}

	if (_name == "FishingManager.action") {
		TypeInfo<Vector<String> >::parseFromBinaryStream(&action, stream);
		return true;
	}

	if (_name == "FishingManager.property") {
		TypeInfo<Vector<String> >::parseFromBinaryStream(&property, stream);
		return true;
	}

	if (_name == "FishingManager.baitStatus") {
		TypeInfo<Vector<String> >::parseFromBinaryStream(&baitStatus, stream);
		return true;
	}


	return false;
}

void FishingManagerImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = FishingManagerImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int FishingManagerImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ObserverImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;
	_name = "FishingManager.miscLoot";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<String> >::toBinaryStream(&miscLoot, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "FishingManager.rareLoot";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<String> >::toBinaryStream(&rareLoot, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "FishingManager.color";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<String, int> >::toBinaryStream(&color, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "FishingManager.fishLength";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<int> >::toBinaryStream(&fishLength, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "FishingManager.fishType";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<String> >::toBinaryStream(&fishType, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "FishingManager.state";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<String> >::toBinaryStream(&state, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "FishingManager.action";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<String> >::toBinaryStream(&action, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "FishingManager.property";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<String> >::toBinaryStream(&property, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_name = "FishingManager.baitStatus";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<String> >::toBinaryStream(&baitStatus, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 9;
}

FishingManagerImplementation::FishingManagerImplementation() {
	_initializeImplementation();
	// server/zone/managers/minigames/FishingManager.idl():  		initializeFishType();
	initializeFishType();
	// server/zone/managers/minigames/FishingManager.idl():  		initializeFishLength();
	initializeFishLength();
	// server/zone/managers/minigames/FishingManager.idl():  		initializeLoot();
	initializeLoot();
	// server/zone/managers/minigames/FishingManager.idl():  		initializeColor();
	initializeColor();
	// server/zone/managers/minigames/FishingManager.idl():  		initializeBaitStatus();
	initializeBaitStatus();
	// server/zone/managers/minigames/FishingManager.idl():  		initializeProperty();
	initializeProperty();
	// server/zone/managers/minigames/FishingManager.idl():  		initializeAction();
	initializeAction();
	// server/zone/managers/minigames/FishingManager.idl():  		initializeState();
	initializeState();
	// server/zone/managers/minigames/FishingManager.idl():  		Logger.setLoggingName("FishingManager");
	Logger::setLoggingName("FishingManager");
	// server/zone/managers/minigames/FishingManager.idl():  		Logger.setLogging(true);
	Logger::setLogging(true);
}

void FishingManagerImplementation::initializeBaitStatus() {
	// server/zone/managers/minigames/FishingManager.idl():  		baitStatus.add("Fresh");
	(&baitStatus)->add("Fresh");
	// server/zone/managers/minigames/FishingManager.idl():  		baitStatus.add("Soggy");
	(&baitStatus)->add("Soggy");
	// server/zone/managers/minigames/FishingManager.idl():  		baitStatus.add("Mush");
	(&baitStatus)->add("Mush");
}

void FishingManagerImplementation::initializeProperty() {
	// server/zone/managers/minigames/FishingManager.idl():  		property.add(" ");
	(&property)->add(" ");
	// server/zone/managers/minigames/FishingManager.idl():  		property.add("*");
	(&property)->add("*");
	// server/zone/managers/minigames/FishingManager.idl():  		property.add("**");
	(&property)->add("**");
	// server/zone/managers/minigames/FishingManager.idl():  		property.add("***");
	(&property)->add("***");
	// server/zone/managers/minigames/FishingManager.idl():  		property.add("****");
	(&property)->add("****");
	// server/zone/managers/minigames/FishingManager.idl():  		property.add("*****");
	(&property)->add("*****");
}

void FishingManagerImplementation::initializeAction() {
	// server/zone/managers/minigames/FishingManager.idl():  		action.add("None");
	(&action)->add("None");
	// server/zone/managers/minigames/FishingManager.idl():  		action.add("Tug Up");
	(&action)->add("Tug Up");
	// server/zone/managers/minigames/FishingManager.idl():  		action.add("Tug Right");
	(&action)->add("Tug Right");
	// server/zone/managers/minigames/FishingManager.idl():  		action.add("Tug Left");
	(&action)->add("Tug Left");
	// server/zone/managers/minigames/FishingManager.idl():  		action.add("Small Reel");
	(&action)->add("Small Reel");
	// server/zone/managers/minigames/FishingManager.idl():  		action.add("Stop Fishing");
	(&action)->add("Stop Fishing");
}

void FishingManagerImplementation::initializeState() {
	// server/zone/managers/minigames/FishingManager.idl():  		state.add("Nothing");
	(&state)->add("Nothing");
	// server/zone/managers/minigames/FishingManager.idl():  		state.add("Waiting...");
	(&state)->add("Waiting...");
	// server/zone/managers/minigames/FishingManager.idl():  		state.add("Snagged!");
	(&state)->add("Snagged!");
	// server/zone/managers/minigames/FishingManager.idl():  		state.add("Nibble...");
	(&state)->add("Nibble...");
	// server/zone/managers/minigames/FishingManager.idl():  		state.add("BITE?");
	(&state)->add("BITE?");
	// server/zone/managers/minigames/FishingManager.idl():  		state.add("CAUGHT SOMETHING?!");
	(&state)->add("CAUGHT SOMETHING?!");
	// server/zone/managers/minigames/FishingManager.idl():  		state.add("CAUGHT SOMETHING?!");
	(&state)->add("CAUGHT SOMETHING?!");
}

void FishingManagerImplementation::initializeFishType() {
	// server/zone/managers/minigames/FishingManager.idl():  		fishType.add("blackfish");
	(&fishType)->add("blackfish");
	// server/zone/managers/minigames/FishingManager.idl():  		fishType.add("blowfish");
	(&fishType)->add("blowfish");
	// server/zone/managers/minigames/FishingManager.idl():  		fishType.add("bluefish");
	(&fishType)->add("bluefish");
	// server/zone/managers/minigames/FishingManager.idl():  		fishType.add("faa");
	(&fishType)->add("faa");
	// server/zone/managers/minigames/FishingManager.idl():  		fishType.add("laa");
	(&fishType)->add("laa");
	// server/zone/managers/minigames/FishingManager.idl():  		fishType.add("ray");
	(&fishType)->add("ray");
	// server/zone/managers/minigames/FishingManager.idl():  		fishType.add("striped");
	(&fishType)->add("striped");
}

void FishingManagerImplementation::initializeFishLength() {
	// server/zone/managers/minigames/FishingManager.idl():  		fishLength.add(25);
	(&fishLength)->add(25);
	// server/zone/managers/minigames/FishingManager.idl():  		fishLength.add(15);
	(&fishLength)->add(15);
	// server/zone/managers/minigames/FishingManager.idl():  		fishLength.add(30);
	(&fishLength)->add(30);
	// server/zone/managers/minigames/FishingManager.idl():  		fishLength.add(30);
	(&fishLength)->add(30);
	// server/zone/managers/minigames/FishingManager.idl():  		fishLength.add(30);
	(&fishLength)->add(30);
	// server/zone/managers/minigames/FishingManager.idl():  		fishLength.add(35);
	(&fishLength)->add(35);
	// server/zone/managers/minigames/FishingManager.idl():  		fishLength.add(40);
	(&fishLength)->add(40);
}

void FishingManagerImplementation::initializeLoot() {
	// server/zone/managers/minigames/FishingManager.idl():  		miscLoot.add("object/tangible/wearables/shoes/shoes_s07.iff");
	(&miscLoot)->add("object/tangible/wearables/shoes/shoes_s07.iff");
	// server/zone/managers/minigames/FishingManager.idl():  		miscLoot.add("object/tangible/wearables/shoes/shoes_s02.iff");
	(&miscLoot)->add("object/tangible/wearables/shoes/shoes_s02.iff");
	// server/zone/managers/minigames/FishingManager.idl():  		miscLoot.add("object/tangible/food/foraged/foraged_fruit_s1.iff");
	(&miscLoot)->add("object/tangible/food/foraged/foraged_fruit_s1.iff");
	// server/zone/managers/minigames/FishingManager.idl():  		rareLoot.add("object/weapon/ranged/pistol/pistol_cdef.iff");
	(&rareLoot)->add("object/weapon/ranged/pistol/pistol_cdef.iff");
}

void FishingManagerImplementation::initializeColor() {
	// server/zone/managers/minigames/FishingManager.idl():  		color.put("corellia", 61);
	(&color)->put("corellia", 61);
	// server/zone/managers/minigames/FishingManager.idl():  		color.put("dantooine", 51);
	(&color)->put("dantooine", 51);
	// server/zone/managers/minigames/FishingManager.idl():  		color.put("dathomir", 21);
	(&color)->put("dathomir", 21);
	// server/zone/managers/minigames/FishingManager.idl():  		color.put("endor", 32);
	(&color)->put("endor", 32);
	// server/zone/managers/minigames/FishingManager.idl():  		color.put("lok", 8);
	(&color)->put("lok", 8);
	// server/zone/managers/minigames/FishingManager.idl():  		color.put("naboo", 14);
	(&color)->put("naboo", 14);
	// server/zone/managers/minigames/FishingManager.idl():  		color.put("rori", 55);
	(&color)->put("rori", 55);
	// server/zone/managers/minigames/FishingManager.idl():  		color.put("talus", 0);
	(&color)->put("talus", 0);
	// server/zone/managers/minigames/FishingManager.idl():  		color.put("tatooine", 7);
	(&color)->put("tatooine", 7);
	// server/zone/managers/minigames/FishingManager.idl():  		color.put("yavin4", 41);
	(&color)->put("yavin4", 41);
}

int FishingManagerImplementation::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	// server/zone/managers/minigames/FishingManager.idl():  		return 
	if (eventType == ObserverEventType::POSITIONCHANGED){
	// server/zone/managers/minigames/FishingManager.idl():  			checkFishingOnPositionUpdate((CreatureObject) observable);
	checkFishingOnPositionUpdate((CreatureObject*) observable);
	// server/zone/managers/minigames/FishingManager.idl():  			return 0;
	return 0;
}

	else 	// server/zone/managers/minigames/FishingManager.idl():  		return 
	if (eventType == ObserverEventType::CLOSECONTAINER){
	// server/zone/managers/minigames/FishingManager.idl():  			return notifyCloseContainer((CreatureObject)arg1, (SceneObject)observable);
	return notifyCloseContainer((CreatureObject*) arg1, (SceneObject*) observable);
}
	// server/zone/managers/minigames/FishingManager.idl():  		return 1;
	return 1;
}

/*
 *	FishingManagerAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


FishingManagerAdapter::FishingManagerAdapter(FishingManager* obj) : ObserverAdapter(obj) {
}

void FishingManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZEBAITSTATUS__:
		{
			initializeBaitStatus();
		}
		break;
	case RPC_INITIALIZEPROPERTY__:
		{
			initializeProperty();
		}
		break;
	case RPC_INITIALIZEACTION__:
		{
			initializeAction();
		}
		break;
	case RPC_INITIALIZESTATE__:
		{
			initializeState();
		}
		break;
	case RPC_INITIALIZEFISHTYPE__:
		{
			initializeFishType();
		}
		break;
	case RPC_INITIALIZEFISHLENGTH__:
		{
			initializeFishLength();
		}
		break;
	case RPC_INITIALIZELOOT__:
		{
			initializeLoot();
		}
		break;
	case RPC_INITIALIZECOLOR__:
		{
			initializeColor();
		}
		break;
	case RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_:
		{
			resp->insertSignedInt(notifyObserverEvent(inv->getUnsignedIntParameter(), static_cast<Observable*>(inv->getObjectParameter()), static_cast<ManagedObject*>(inv->getObjectParameter()), inv->getSignedLongParameter()));
		}
		break;
	case RPC_CHECKFISHINGONPOSITIONUPDATE__CREATUREOBJECT_:
		{
			checkFishingOnPositionUpdate(static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_NOTIFYCLOSECONTAINER__CREATUREOBJECT_SCENEOBJECT_:
		{
			resp->insertSignedInt(notifyCloseContainer(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<SceneObject*>(inv->getObjectParameter())));
		}
		break;
	case RPC_STARTFISHING__CREATUREOBJECT_:
		{
			resp->insertSignedInt(startFishing(static_cast<CreatureObject*>(inv->getObjectParameter())));
		}
		break;
	case RPC_STOPFISHING__CREATUREOBJECT_INT_BOOL_:
		{
			stopFishing(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getUnsignedIntParameter(), inv->getBooleanParameter());
		}
		break;
	case RPC_FISHINGSTEP__CREATUREOBJECT_:
		{
			fishingStep(static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_SUCCESS__CREATUREOBJECT_INT_SCENEOBJECT_INT_:
		{
			success(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getSignedIntParameter(), static_cast<SceneObject*>(inv->getObjectParameter()), inv->getUnsignedIntParameter());
		}
		break;
	case RPC_GETTIME__:
		{
			resp->insertAscii(getTime());
		}
		break;
	case RPC_SENDREWARD__CREATUREOBJECT_SCENEOBJECT_SCENEOBJECT_:
		{
			sendReward(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<SceneObject*>(inv->getObjectParameter()), static_cast<SceneObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_CREATEWINDOW__CREATUREOBJECT_INT_:
		{
			resp->insertInt(createWindow(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getUnsignedIntParameter()));
		}
		break;
	case RPC_CLOSEMENU__CREATUREOBJECT_INT_:
		{
			closeMenu(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getUnsignedIntParameter());
		}
		break;
	case RPC_VEGETATION__SCENEOBJECT_:
		{
			resp->insertSignedInt(vegetation(static_cast<SceneObject*>(inv->getObjectParameter())));
		}
		break;
	case RPC_DENSITY__SCENEOBJECT_:
		{
			resp->insertSignedInt(density(static_cast<SceneObject*>(inv->getObjectParameter())));
		}
		break;
	case RPC_GETFISH__CREATUREOBJECT_:
		{
			resp->insertSignedInt(getFish(static_cast<CreatureObject*>(inv->getObjectParameter())));
		}
		break;
	case RPC_GETNEXTACTION__CREATUREOBJECT_:
		{
			resp->insertSignedInt(getNextAction(static_cast<CreatureObject*>(inv->getObjectParameter())));
		}
		break;
	case RPC_SETNEXTACTION__CREATUREOBJECT_INT_:
		{
			setNextAction(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getSignedIntParameter());
		}
		break;
	case RPC_GETPOLE__CREATUREOBJECT_:
		{
			resp->insertLong(getPole(static_cast<CreatureObject*>(inv->getObjectParameter()))->_getObjectID());
		}
		break;
	case RPC_GETBAIT__CREATUREOBJECT_:
		{
			resp->insertLong(getBait(static_cast<CreatureObject*>(inv->getObjectParameter()))->_getObjectID());
		}
		break;
	case RPC_GETFISHBOXID__CREATUREOBJECT_:
		{
			resp->insertInt(getFishBoxID(static_cast<CreatureObject*>(inv->getObjectParameter())));
		}
		break;
	case RPC_SETFISHBOXID__CREATUREOBJECT_INT_:
		{
			setFishBoxID(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getUnsignedIntParameter());
		}
		break;
	case RPC_GETFISHINGSTATE__CREATUREOBJECT_:
		{
			resp->insertSignedInt(getFishingState(static_cast<CreatureObject*>(inv->getObjectParameter())));
		}
		break;
	case RPC_SETFISHINGSTATE__CREATUREOBJECT_INT_:
		{
			setFishingState(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getSignedIntParameter());
		}
		break;
	case RPC_GETFISHMARKER__CREATUREOBJECT_:
		{
			resp->insertLong(getFishMarker(static_cast<CreatureObject*>(inv->getObjectParameter()))->_getObjectID());
		}
		break;
	case RPC_SETFISHMARKER__CREATUREOBJECT_SCENEOBJECT_:
		{
			setFishMarker(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<SceneObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_FREEBAIT__CREATUREOBJECT_:
		{
			freeBait(static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_FISHINGPROCEED__CREATUREOBJECT_INT_SCENEOBJECT_INT_INT_INT_BOOL_STRING_:
		{
			String moodString; 
			fishingProceed(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getSignedIntParameter(), static_cast<SceneObject*>(inv->getObjectParameter()), inv->getSignedIntParameter(), inv->getUnsignedIntParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter(), inv->getAsciiParameter(moodString));
		}
		break;
	case RPC_MISHAPEVENT__STRING_CREATUREOBJECT_INT_BOOL_STRING_:
		{
			String text; String moodString; 
			mishapEvent(inv->getAsciiParameter(text), static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getUnsignedIntParameter(), inv->getBooleanParameter(), inv->getAsciiParameter(moodString));
		}
		break;
	case RPC_LOSEBAIT__CREATUREOBJECT_:
		{
			resp->insertBoolean(loseBait(static_cast<CreatureObject*>(inv->getObjectParameter())));
		}
		break;
	case RPC_ANIMATE__CREATUREOBJECT_INT_:
		{
			animate(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getSignedIntParameter());
		}
		break;
	case RPC_CREATEMARKER__FLOAT_FLOAT_FLOAT_ZONE_:
		{
			resp->insertLong(createMarker(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), static_cast<Zone*>(inv->getObjectParameter()))->_getObjectID());
		}
		break;
	case RPC_CREATESPLASH__FLOAT_FLOAT_FLOAT_ZONE_CREATUREOBJECT_:
		{
			createSplash(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), static_cast<Zone*>(inv->getObjectParameter()), static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_ISPLAYING__CREATUREOBJECT_:
		{
			resp->insertBoolean(isPlaying(static_cast<CreatureObject*>(inv->getObjectParameter())));
		}
		break;
	case RPC_UPDATEMARKER__CREATUREOBJECT_SCENEOBJECT_BOOL_:
		{
			resp->insertLong(updateMarker(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<SceneObject*>(inv->getObjectParameter()), inv->getBooleanParameter())->_getObjectID());
		}
		break;
	case RPC_REMOVEMARKER__CREATUREOBJECT_SCENEOBJECT_:
		{
			removeMarker(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<SceneObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_REMOVESPLASH__SCENEOBJECT_:
		{
			removeSplash(static_cast<SceneObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_CREATEFISHINGSPLASHEVENT__CREATUREOBJECT_SCENEOBJECT_:
		{
			createFishingSplashEvent(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<SceneObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_STOPFISHINGEVENT__CREATUREOBJECT_:
		{
			stopFishingEvent(static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void FishingManagerAdapter::initializeBaitStatus() {
	(static_cast<FishingManager*>(stub))->initializeBaitStatus();
}

void FishingManagerAdapter::initializeProperty() {
	(static_cast<FishingManager*>(stub))->initializeProperty();
}

void FishingManagerAdapter::initializeAction() {
	(static_cast<FishingManager*>(stub))->initializeAction();
}

void FishingManagerAdapter::initializeState() {
	(static_cast<FishingManager*>(stub))->initializeState();
}

void FishingManagerAdapter::initializeFishType() {
	(static_cast<FishingManager*>(stub))->initializeFishType();
}

void FishingManagerAdapter::initializeFishLength() {
	(static_cast<FishingManager*>(stub))->initializeFishLength();
}

void FishingManagerAdapter::initializeLoot() {
	(static_cast<FishingManager*>(stub))->initializeLoot();
}

void FishingManagerAdapter::initializeColor() {
	(static_cast<FishingManager*>(stub))->initializeColor();
}

int FishingManagerAdapter::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	return (static_cast<FishingManager*>(stub))->notifyObserverEvent(eventType, observable, arg1, arg2);
}

void FishingManagerAdapter::checkFishingOnPositionUpdate(CreatureObject* player) {
	(static_cast<FishingManager*>(stub))->checkFishingOnPositionUpdate(player);
}

int FishingManagerAdapter::notifyCloseContainer(CreatureObject* player, SceneObject* container) {
	return (static_cast<FishingManager*>(stub))->notifyCloseContainer(player, container);
}

int FishingManagerAdapter::startFishing(CreatureObject* player) {
	return (static_cast<FishingManager*>(stub))->startFishing(player);
}

void FishingManagerAdapter::stopFishing(CreatureObject* player, unsigned int boxID, bool rem) {
	(static_cast<FishingManager*>(stub))->stopFishing(player, boxID, rem);
}

void FishingManagerAdapter::fishingStep(CreatureObject* player) {
	(static_cast<FishingManager*>(stub))->fishingStep(player);
}

void FishingManagerAdapter::success(CreatureObject* player, int fish, SceneObject* marker, unsigned int boxID) {
	(static_cast<FishingManager*>(stub))->success(player, fish, marker, boxID);
}

String FishingManagerAdapter::getTime() {
	return (static_cast<FishingManager*>(stub))->getTime();
}

void FishingManagerAdapter::sendReward(CreatureObject* player, SceneObject* marker, SceneObject* loot) {
	(static_cast<FishingManager*>(stub))->sendReward(player, marker, loot);
}

unsigned int FishingManagerAdapter::createWindow(CreatureObject* player, unsigned int boxID) {
	return (static_cast<FishingManager*>(stub))->createWindow(player, boxID);
}

void FishingManagerAdapter::closeMenu(CreatureObject* player, unsigned int boxID) {
	(static_cast<FishingManager*>(stub))->closeMenu(player, boxID);
}

int FishingManagerAdapter::vegetation(SceneObject* marker) {
	return (static_cast<FishingManager*>(stub))->vegetation(marker);
}

int FishingManagerAdapter::density(SceneObject* marker) {
	return (static_cast<FishingManager*>(stub))->density(marker);
}

int FishingManagerAdapter::getFish(CreatureObject* player) {
	return (static_cast<FishingManager*>(stub))->getFish(player);
}

int FishingManagerAdapter::getNextAction(CreatureObject* player) {
	return (static_cast<FishingManager*>(stub))->getNextAction(player);
}

void FishingManagerAdapter::setNextAction(CreatureObject* player, int next) {
	(static_cast<FishingManager*>(stub))->setNextAction(player, next);
}

FishingPoleObject* FishingManagerAdapter::getPole(CreatureObject* player) {
	return (static_cast<FishingManager*>(stub))->getPole(player);
}

FishingBaitObject* FishingManagerAdapter::getBait(CreatureObject* player) {
	return (static_cast<FishingManager*>(stub))->getBait(player);
}

unsigned int FishingManagerAdapter::getFishBoxID(CreatureObject* player) {
	return (static_cast<FishingManager*>(stub))->getFishBoxID(player);
}

void FishingManagerAdapter::setFishBoxID(CreatureObject* player, unsigned int boxID) {
	(static_cast<FishingManager*>(stub))->setFishBoxID(player, boxID);
}

int FishingManagerAdapter::getFishingState(CreatureObject* player) {
	return (static_cast<FishingManager*>(stub))->getFishingState(player);
}

void FishingManagerAdapter::setFishingState(CreatureObject* player, int state) {
	(static_cast<FishingManager*>(stub))->setFishingState(player, state);
}

SceneObject* FishingManagerAdapter::getFishMarker(CreatureObject* player) {
	return (static_cast<FishingManager*>(stub))->getFishMarker(player);
}

void FishingManagerAdapter::setFishMarker(CreatureObject* player, SceneObject* marker) {
	(static_cast<FishingManager*>(stub))->setFishMarker(player, marker);
}

void FishingManagerAdapter::freeBait(CreatureObject* player) {
	(static_cast<FishingManager*>(stub))->freeBait(player);
}

void FishingManagerAdapter::fishingProceed(CreatureObject* player, int nextAction, SceneObject* marker, int fish, unsigned int boxID, int newstate, bool notifyClient, String& moodString) {
	(static_cast<FishingManager*>(stub))->fishingProceed(player, nextAction, marker, fish, boxID, newstate, notifyClient, moodString);
}

void FishingManagerAdapter::mishapEvent(const String& text, CreatureObject* player, unsigned int boxID, bool losebait, String& moodString) {
	(static_cast<FishingManager*>(stub))->mishapEvent(text, player, boxID, losebait, moodString);
}

bool FishingManagerAdapter::loseBait(CreatureObject* player) {
	return (static_cast<FishingManager*>(stub))->loseBait(player);
}

void FishingManagerAdapter::animate(CreatureObject* player, int nextAction) {
	(static_cast<FishingManager*>(stub))->animate(player, nextAction);
}

SceneObject* FishingManagerAdapter::createMarker(float x, float y, float z, Zone* zone) {
	return (static_cast<FishingManager*>(stub))->createMarker(x, y, z, zone);
}

void FishingManagerAdapter::createSplash(float x, float y, float z, Zone* zone, CreatureObject* player) {
	(static_cast<FishingManager*>(stub))->createSplash(x, y, z, zone, player);
}

bool FishingManagerAdapter::isPlaying(CreatureObject* player) {
	return (static_cast<FishingManager*>(stub))->isPlaying(player);
}

SceneObject* FishingManagerAdapter::updateMarker(CreatureObject* player, SceneObject* marker, bool notifyPlayer) {
	return (static_cast<FishingManager*>(stub))->updateMarker(player, marker, notifyPlayer);
}

void FishingManagerAdapter::removeMarker(CreatureObject* player, SceneObject* container) {
	(static_cast<FishingManager*>(stub))->removeMarker(player, container);
}

void FishingManagerAdapter::removeSplash(SceneObject* splash) {
	(static_cast<FishingManager*>(stub))->removeSplash(splash);
}

void FishingManagerAdapter::createFishingSplashEvent(CreatureObject* player, SceneObject* splash) {
	(static_cast<FishingManager*>(stub))->createFishingSplashEvent(player, splash);
}

void FishingManagerAdapter::stopFishingEvent(CreatureObject* player) {
	(static_cast<FishingManager*>(stub))->stopFishingEvent(player);
}

/*
 *	FishingManagerHelper
 */

FishingManagerHelper* FishingManagerHelper::staticInitializer = FishingManagerHelper::instance();

FishingManagerHelper::FishingManagerHelper() {
	className = "FishingManager";

	Core::getObjectBroker()->registerClass(className, this);
}

void FishingManagerHelper::finalizeHelper() {
	FishingManagerHelper::finalize();
}

DistributedObject* FishingManagerHelper::instantiateObject() {
	return new FishingManager(DummyConstructorParameter::instance());
}

DistributedObjectServant* FishingManagerHelper::instantiateServant() {
	return new FishingManagerImplementation();
}

DistributedObjectAdapter* FishingManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new FishingManagerAdapter(static_cast<FishingManager*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

