/*
 *	server/zone/managers/minigames/FishingManager.cpp generated by engine3 IDL compiler 0.60
 */

#include "FishingManager.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/tangible/fishing/FishingPoleObject.h"

#include "server/zone/objects/tangible/fishing/FishingBaitObject.h"

#include "server/zone/managers/minigames/events/FishingEvent.h"

#include "server/zone/managers/minigames/events/FishingSplashEvent.h"

/*
 *	FishingManagerStub
 */

FishingManager::FishingManager(ZoneServer* server) : ManagedObject(DummyConstructorParameter::instance()) {
	_impl = new FishingManagerImplementation(server);
	_impl->_setStub(this);
}

FishingManager::FishingManager(DummyConstructorParameter* param) : ManagedObject(param) {
}

FishingManager::~FishingManager() {
}


void FishingManager::initializeBaitStatus() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((FishingManagerImplementation*) _impl)->initializeBaitStatus();
}

void FishingManager::initializeProperty() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		((FishingManagerImplementation*) _impl)->initializeProperty();
}

void FishingManager::initializeAction() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		method.executeWithVoidReturn();
	} else
		((FishingManagerImplementation*) _impl)->initializeAction();
}

void FishingManager::initializeState() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		method.executeWithVoidReturn();
	} else
		((FishingManagerImplementation*) _impl)->initializeState();
}

void FishingManager::initializeFishType() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		method.executeWithVoidReturn();
	} else
		((FishingManagerImplementation*) _impl)->initializeFishType();
}

void FishingManager::initializeLoot() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		method.executeWithVoidReturn();
	} else
		((FishingManagerImplementation*) _impl)->initializeLoot();
}

void FishingManager::initializeColor() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		method.executeWithVoidReturn();
	} else
		((FishingManagerImplementation*) _impl)->initializeColor();
}

int FishingManager::notify(SceneObject* sceneObject) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addObjectParameter(sceneObject);

		return method.executeWithSignedIntReturn();
	} else
		return ((FishingManagerImplementation*) _impl)->notify(sceneObject);
}

void FishingManager::checkFishingOnPositionUpdate(PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((FishingManagerImplementation*) _impl)->checkFishingOnPositionUpdate(player);
}

int FishingManager::startFishing(PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return ((FishingManagerImplementation*) _impl)->startFishing(player);
}

void FishingManager::stopFishing(PlayerCreature* player, unsigned int boxID, bool rem) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(boxID);
		method.addBooleanParameter(rem);

		method.executeWithVoidReturn();
	} else
		((FishingManagerImplementation*) _impl)->stopFishing(player, boxID, rem);
}

void FishingManager::fishingStep(PlayerCreature* player, int nextAction, SceneObject* marker, int fish, unsigned int boxID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addObjectParameter(player);
		method.addSignedIntParameter(nextAction);
		method.addObjectParameter(marker);
		method.addSignedIntParameter(fish);
		method.addUnsignedIntParameter(boxID);

		method.executeWithVoidReturn();
	} else
		((FishingManagerImplementation*) _impl)->fishingStep(player, nextAction, marker, fish, boxID);
}

void FishingManager::success(PlayerCreature* player, int fish, SceneObject* marker, unsigned int boxID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addObjectParameter(player);
		method.addSignedIntParameter(fish);
		method.addObjectParameter(marker);
		method.addUnsignedIntParameter(boxID);

		method.executeWithVoidReturn();
	} else
		((FishingManagerImplementation*) _impl)->success(player, fish, marker, boxID);
}

unsigned int FishingManager::createWindow(PlayerCreature* player, unsigned int boxID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(boxID);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((FishingManagerImplementation*) _impl)->createWindow(player, boxID);
}

void FishingManager::closeMenu(PlayerCreature* player, unsigned int boxID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(boxID);

		method.executeWithVoidReturn();
	} else
		((FishingManagerImplementation*) _impl)->closeMenu(player, boxID);
}

int FishingManager::vegetation(SceneObject* marker) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addObjectParameter(marker);

		return method.executeWithSignedIntReturn();
	} else
		return ((FishingManagerImplementation*) _impl)->vegetation(marker);
}

int FishingManager::density(SceneObject* marker) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);
		method.addObjectParameter(marker);

		return method.executeWithSignedIntReturn();
	} else
		return ((FishingManagerImplementation*) _impl)->density(marker);
}

int FishingManager::getFish(PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return ((FishingManagerImplementation*) _impl)->getFish(player);
}

int FishingManager::getNextAction(PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return ((FishingManagerImplementation*) _impl)->getNextAction(player);
}

void FishingManager::setNextAction(PlayerCreature* player, int next) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);
		method.addObjectParameter(player);
		method.addSignedIntParameter(next);

		method.executeWithVoidReturn();
	} else
		((FishingManagerImplementation*) _impl)->setNextAction(player, next);
}

FishingPoleObject* FishingManager::getPole(PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);
		method.addObjectParameter(player);

		return (FishingPoleObject*) method.executeWithObjectReturn();
	} else
		return ((FishingManagerImplementation*) _impl)->getPole(player);
}

FishingBaitObject* FishingManager::getBait(PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);
		method.addObjectParameter(player);

		return (FishingBaitObject*) method.executeWithObjectReturn();
	} else
		return ((FishingManagerImplementation*) _impl)->getBait(player);
}

unsigned int FishingManager::getFishBoxID(PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);
		method.addObjectParameter(player);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((FishingManagerImplementation*) _impl)->getFishBoxID(player);
}

void FishingManager::setFishBoxID(PlayerCreature* player, unsigned int boxID) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(boxID);

		method.executeWithVoidReturn();
	} else
		((FishingManagerImplementation*) _impl)->setFishBoxID(player, boxID);
}

int FishingManager::getFishingState(PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return ((FishingManagerImplementation*) _impl)->getFishingState(player);
}

void FishingManager::setFishingState(PlayerCreature* player, int state) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);
		method.addObjectParameter(player);
		method.addSignedIntParameter(state);

		method.executeWithVoidReturn();
	} else
		((FishingManagerImplementation*) _impl)->setFishingState(player, state);
}

SceneObject* FishingManager::getFishMarker(PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);
		method.addObjectParameter(player);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((FishingManagerImplementation*) _impl)->getFishMarker(player);
}

void FishingManager::setFishMarker(PlayerCreature* player, SceneObject* marker) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);
		method.addObjectParameter(player);
		method.addObjectParameter(marker);

		method.executeWithVoidReturn();
	} else
		((FishingManagerImplementation*) _impl)->setFishMarker(player, marker);
}

void FishingManager::cheat(PlayerCreature* player, int value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);
		method.addObjectParameter(player);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((FishingManagerImplementation*) _impl)->cheat(player, value);
}

void FishingManager::freeBait(PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((FishingManagerImplementation*) _impl)->freeBait(player);
}

void FishingManager::fishingProceed(PlayerCreature* player, int nextAction, SceneObject* marker, int fish, unsigned int boxID, int newstate, bool notifyClient) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 36);
		method.addObjectParameter(player);
		method.addSignedIntParameter(nextAction);
		method.addObjectParameter(marker);
		method.addSignedIntParameter(fish);
		method.addUnsignedIntParameter(boxID);
		method.addSignedIntParameter(newstate);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		((FishingManagerImplementation*) _impl)->fishingProceed(player, nextAction, marker, fish, boxID, newstate, notifyClient);
}

void FishingManager::mishapEvent(const String& text, PlayerCreature* player, unsigned int boxID, bool losebait) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 37);
		method.addAsciiParameter(text);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(boxID);
		method.addBooleanParameter(losebait);

		method.executeWithVoidReturn();
	} else
		((FishingManagerImplementation*) _impl)->mishapEvent(text, player, boxID, losebait);
}

bool FishingManager::loseBait(PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 38);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return ((FishingManagerImplementation*) _impl)->loseBait(player);
}

void FishingManager::animate(PlayerCreature* player, int nextAction) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 39);
		method.addObjectParameter(player);
		method.addSignedIntParameter(nextAction);

		method.executeWithVoidReturn();
	} else
		((FishingManagerImplementation*) _impl)->animate(player, nextAction);
}

SceneObject* FishingManager::createMarker(float x, float y, float z, Zone* zone) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 40);
		method.addFloatParameter(x);
		method.addFloatParameter(y);
		method.addFloatParameter(z);
		method.addObjectParameter(zone);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((FishingManagerImplementation*) _impl)->createMarker(x, y, z, zone);
}

void FishingManager::createSplash(float x, float y, float z, Zone* zone, PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 41);
		method.addFloatParameter(x);
		method.addFloatParameter(y);
		method.addFloatParameter(z);
		method.addObjectParameter(zone);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((FishingManagerImplementation*) _impl)->createSplash(x, y, z, zone, player);
}

void FishingManager::updateMarker(PlayerCreature* player, int nextAction, SceneObject* marker) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 42);
		method.addObjectParameter(player);
		method.addSignedIntParameter(nextAction);
		method.addObjectParameter(marker);

		method.executeWithVoidReturn();
	} else
		((FishingManagerImplementation*) _impl)->updateMarker(player, nextAction, marker);
}

void FishingManager::removeMarker(PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 43);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((FishingManagerImplementation*) _impl)->removeMarker(player);
}

void FishingManager::removeSplash(SceneObject* splash) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 44);
		method.addObjectParameter(splash);

		method.executeWithVoidReturn();
	} else
		((FishingManagerImplementation*) _impl)->removeSplash(splash);
}

void FishingManager::createFishingSplashEvent(PlayerCreature* player, ZoneServer* zoneServer, SceneObject* splash) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 45);
		method.addObjectParameter(player);
		method.addObjectParameter(zoneServer);
		method.addObjectParameter(splash);

		method.executeWithVoidReturn();
	} else
		((FishingManagerImplementation*) _impl)->createFishingSplashEvent(player, zoneServer, splash);
}

void FishingManager::createFishingEvent(PlayerCreature* player, int nextAction, ZoneServer* zoneServer, SceneObject* marker, int sum, unsigned int boxID, int state) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 46);
		method.addObjectParameter(player);
		method.addSignedIntParameter(nextAction);
		method.addObjectParameter(zoneServer);
		method.addObjectParameter(marker);
		method.addSignedIntParameter(sum);
		method.addUnsignedIntParameter(boxID);
		method.addSignedIntParameter(state);

		method.executeWithVoidReturn();
	} else
		((FishingManagerImplementation*) _impl)->createFishingEvent(player, nextAction, zoneServer, marker, sum, boxID, state);
}

void FishingManager::stopFishingEvent(PlayerCreature* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 47);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((FishingManagerImplementation*) _impl)->stopFishingEvent(player);
}

FishingEvent* FishingManager::getFishingEvent(PlayerCreature* player) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return ((FishingManagerImplementation*) _impl)->getFishingEvent(player);
}

/*
 *	FishingManagerImplementation
 */

FishingManagerImplementation::FishingManagerImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}

FishingManagerImplementation::~FishingManagerImplementation() {
}


void FishingManagerImplementation::finalize() {
}

void FishingManagerImplementation::_initializeImplementation() {
	_setClassHelper(FishingManagerHelper::instance());

	_serializationHelperMethod();
}

void FishingManagerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (FishingManager*) stub;
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* FishingManagerImplementation::_getStub() {
	return _this;
}

FishingManagerImplementation::operator const FishingManager*() {
	return _this;
}

void FishingManagerImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void FishingManagerImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void FishingManagerImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void FishingManagerImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void FishingManagerImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void FishingManagerImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void FishingManagerImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void FishingManagerImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("FishingManager");

	addSerializableVariable("zoneServer", &zoneServer);
	addSerializableVariable("miscLoot", &miscLoot);
	addSerializableVariable("rareLoot", &rareLoot);
	addSerializableVariable("color", &color);
	addSerializableVariable("fishType", &fishType);
	addSerializableVariable("state", &state);
	addSerializableVariable("action", &action);
	addSerializableVariable("property", &property);
	addSerializableVariable("baitStatus", &baitStatus);
	addSerializableVariable("events", &events);
}

FishingManagerImplementation::FishingManagerImplementation(ZoneServer* server) {
	_initializeImplementation();
	// server/zone/managers/minigames/FishingManager.idl(126):  		zoneServer = server;
	zoneServer = server;
	// server/zone/managers/minigames/FishingManager.idl(128):  		initializeFishType();
	initializeFishType();
	// server/zone/managers/minigames/FishingManager.idl(129):  		initializeLoot();
	initializeLoot();
	// server/zone/managers/minigames/FishingManager.idl(130):  		initializeColor();
	initializeColor();
	// server/zone/managers/minigames/FishingManager.idl(131):  		initializeBaitStatus();
	initializeBaitStatus();
	// server/zone/managers/minigames/FishingManager.idl(132):  		initializeProperty();
	initializeProperty();
	// server/zone/managers/minigames/FishingManager.idl(133):  		initializeAction();
	initializeAction();
	// server/zone/managers/minigames/FishingManager.idl(134):  		initializeState();
	initializeState();
	// server/zone/managers/minigames/FishingManager.idl(136):  		Logger.setLoggingName("FishingManager");
	Logger::setLoggingName("FishingManager");
	// server/zone/managers/minigames/FishingManager.idl(137):  		Logger.setLogging(true);
	Logger::setLogging(true);
}

void FishingManagerImplementation::initializeBaitStatus() {
	// server/zone/managers/minigames/FishingManager.idl(141):  		baitStatus.add("Fresh");
	(&baitStatus)->add("Fresh");
	// server/zone/managers/minigames/FishingManager.idl(142):  		baitStatus.add("Soggy");
	(&baitStatus)->add("Soggy");
	// server/zone/managers/minigames/FishingManager.idl(143):  		baitStatus.add("Mush");
	(&baitStatus)->add("Mush");
}

void FishingManagerImplementation::initializeProperty() {
	// server/zone/managers/minigames/FishingManager.idl(147):  		property.add(" ");
	(&property)->add(" ");
	// server/zone/managers/minigames/FishingManager.idl(148):  		property.add("*");
	(&property)->add("*");
	// server/zone/managers/minigames/FishingManager.idl(149):  		property.add("**");
	(&property)->add("**");
	// server/zone/managers/minigames/FishingManager.idl(150):  		property.add("***");
	(&property)->add("***");
	// server/zone/managers/minigames/FishingManager.idl(151):  		property.add("****");
	(&property)->add("****");
	// server/zone/managers/minigames/FishingManager.idl(152):  		property.add("*****");
	(&property)->add("*****");
}

void FishingManagerImplementation::initializeAction() {
	// server/zone/managers/minigames/FishingManager.idl(156):  		action.add("None");
	(&action)->add("None");
	// server/zone/managers/minigames/FishingManager.idl(157):  		action.add("Tug Up");
	(&action)->add("Tug Up");
	// server/zone/managers/minigames/FishingManager.idl(158):  		action.add("Tug Right");
	(&action)->add("Tug Right");
	// server/zone/managers/minigames/FishingManager.idl(159):  		action.add("Tug Left");
	(&action)->add("Tug Left");
	// server/zone/managers/minigames/FishingManager.idl(160):  		action.add("Small Reel");
	(&action)->add("Small Reel");
	// server/zone/managers/minigames/FishingManager.idl(161):  		action.add("Stop Fishing");
	(&action)->add("Stop Fishing");
}

void FishingManagerImplementation::initializeState() {
	// server/zone/managers/minigames/FishingManager.idl(165):  		state.add("Nothing");
	(&state)->add("Nothing");
	// server/zone/managers/minigames/FishingManager.idl(166):  		state.add("Wating...");
	(&state)->add("Wating...");
	// server/zone/managers/minigames/FishingManager.idl(167):  		state.add("Line snagged!");
	(&state)->add("Line snagged!");
	// server/zone/managers/minigames/FishingManager.idl(168):  		state.add("Nibble...");
	(&state)->add("Nibble...");
	// server/zone/managers/minigames/FishingManager.idl(169):  		state.add("BITE!");
	(&state)->add("BITE!");
	// server/zone/managers/minigames/FishingManager.idl(170):  		state.add("CAUGHT SOMETHING!");
	(&state)->add("CAUGHT SOMETHING!");
	// server/zone/managers/minigames/FishingManager.idl(171):  		state.add("CAUGHT SOMETHING!");
	(&state)->add("CAUGHT SOMETHING!");
}

void FishingManagerImplementation::initializeFishType() {
	// server/zone/managers/minigames/FishingManager.idl(175):  		fishType.add("blackfish");
	(&fishType)->add("blackfish");
	// server/zone/managers/minigames/FishingManager.idl(176):  		fishType.add("blowfish");
	(&fishType)->add("blowfish");
	// server/zone/managers/minigames/FishingManager.idl(177):  		fishType.add("bluefish");
	(&fishType)->add("bluefish");
	// server/zone/managers/minigames/FishingManager.idl(178):  		fishType.add("faa");
	(&fishType)->add("faa");
	// server/zone/managers/minigames/FishingManager.idl(179):  		fishType.add("laa");
	(&fishType)->add("laa");
	// server/zone/managers/minigames/FishingManager.idl(180):  		fishType.add("ray");
	(&fishType)->add("ray");
	// server/zone/managers/minigames/FishingManager.idl(181):  		fishType.add("striped");
	(&fishType)->add("striped");
}

void FishingManagerImplementation::initializeLoot() {
	// server/zone/managers/minigames/FishingManager.idl(185):  		miscLoot.add("object/tangible/wearables/shoes/shoes_s07.iff");
	(&miscLoot)->add("object/tangible/wearables/shoes/shoes_s07.iff");
	// server/zone/managers/minigames/FishingManager.idl(186):  		miscLoot.add("object/tangible/wearables/shoes/shoes_s02.iff");
	(&miscLoot)->add("object/tangible/wearables/shoes/shoes_s02.iff");
	// server/zone/managers/minigames/FishingManager.idl(187):  		miscLoot.add("object/tangible/food/foraged/foraged_fruit_s1.iff");
	(&miscLoot)->add("object/tangible/food/foraged/foraged_fruit_s1.iff");
	// server/zone/managers/minigames/FishingManager.idl(189):  		rareLoot.add("object/weapon/ranged/pistol/pistol_cdef.iff");
	(&rareLoot)->add("object/weapon/ranged/pistol/pistol_cdef.iff");
}

void FishingManagerImplementation::initializeColor() {
	// server/zone/managers/minigames/FishingManager.idl(193):  		color.add(61);
	(&color)->add(61);
	// server/zone/managers/minigames/FishingManager.idl(194):  		color.add(51);
	(&color)->add(51);
	// server/zone/managers/minigames/FishingManager.idl(195):  		color.add(21);
	(&color)->add(21);
	// server/zone/managers/minigames/FishingManager.idl(196):  		color.add(32);
	(&color)->add(32);
	// server/zone/managers/minigames/FishingManager.idl(197):  		color.add(8);
	(&color)->add(8);
	// server/zone/managers/minigames/FishingManager.idl(198):  		color.add(14);
	(&color)->add(14);
	// server/zone/managers/minigames/FishingManager.idl(199):  		color.add(55);
	(&color)->add(55);
	// server/zone/managers/minigames/FishingManager.idl(200):  		color.add(0);
	(&color)->add(0);
	// server/zone/managers/minigames/FishingManager.idl(201):  		color.add(7);
	(&color)->add(7);
	// server/zone/managers/minigames/FishingManager.idl(202):  		color.add(41);
	(&color)->add(41);
}

int FishingManagerImplementation::notify(SceneObject* sceneObject) {
	// server/zone/managers/minigames/FishingManager.idl(206):  		return 
	if (sceneObject->isPlayerCreature())	// server/zone/managers/minigames/FishingManager.idl(207):  			checkFishingOnPositionUpdate((PlayerCreature) sceneObject);
	checkFishingOnPositionUpdate((PlayerCreature*) sceneObject);
	// server/zone/managers/minigames/FishingManager.idl(209):  0;
	return 0;
}

/*
 *	FishingManagerAdapter
 */

FishingManagerAdapter::FishingManagerAdapter(FishingManagerImplementation* obj) : ManagedObjectAdapter(obj) {
}

Packet* FishingManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initializeBaitStatus();
		break;
	case 7:
		initializeProperty();
		break;
	case 8:
		initializeAction();
		break;
	case 9:
		initializeState();
		break;
	case 10:
		initializeFishType();
		break;
	case 11:
		initializeLoot();
		break;
	case 12:
		initializeColor();
		break;
	case 13:
		resp->insertSignedInt(notify((SceneObject*) inv->getObjectParameter()));
		break;
	case 14:
		checkFishingOnPositionUpdate((PlayerCreature*) inv->getObjectParameter());
		break;
	case 15:
		resp->insertSignedInt(startFishing((PlayerCreature*) inv->getObjectParameter()));
		break;
	case 16:
		stopFishing((PlayerCreature*) inv->getObjectParameter(), inv->getUnsignedIntParameter(), inv->getBooleanParameter());
		break;
	case 17:
		fishingStep((PlayerCreature*) inv->getObjectParameter(), inv->getSignedIntParameter(), (SceneObject*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getUnsignedIntParameter());
		break;
	case 18:
		success((PlayerCreature*) inv->getObjectParameter(), inv->getSignedIntParameter(), (SceneObject*) inv->getObjectParameter(), inv->getUnsignedIntParameter());
		break;
	case 19:
		resp->insertInt(createWindow((PlayerCreature*) inv->getObjectParameter(), inv->getUnsignedIntParameter()));
		break;
	case 20:
		closeMenu((PlayerCreature*) inv->getObjectParameter(), inv->getUnsignedIntParameter());
		break;
	case 21:
		resp->insertSignedInt(vegetation((SceneObject*) inv->getObjectParameter()));
		break;
	case 22:
		resp->insertSignedInt(density((SceneObject*) inv->getObjectParameter()));
		break;
	case 23:
		resp->insertSignedInt(getFish((PlayerCreature*) inv->getObjectParameter()));
		break;
	case 24:
		resp->insertSignedInt(getNextAction((PlayerCreature*) inv->getObjectParameter()));
		break;
	case 25:
		setNextAction((PlayerCreature*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case 26:
		resp->insertLong(getPole((PlayerCreature*) inv->getObjectParameter())->_getObjectID());
		break;
	case 27:
		resp->insertLong(getBait((PlayerCreature*) inv->getObjectParameter())->_getObjectID());
		break;
	case 28:
		resp->insertInt(getFishBoxID((PlayerCreature*) inv->getObjectParameter()));
		break;
	case 29:
		setFishBoxID((PlayerCreature*) inv->getObjectParameter(), inv->getUnsignedIntParameter());
		break;
	case 30:
		resp->insertSignedInt(getFishingState((PlayerCreature*) inv->getObjectParameter()));
		break;
	case 31:
		setFishingState((PlayerCreature*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case 32:
		resp->insertLong(getFishMarker((PlayerCreature*) inv->getObjectParameter())->_getObjectID());
		break;
	case 33:
		setFishMarker((PlayerCreature*) inv->getObjectParameter(), (SceneObject*) inv->getObjectParameter());
		break;
	case 34:
		cheat((PlayerCreature*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case 35:
		freeBait((PlayerCreature*) inv->getObjectParameter());
		break;
	case 36:
		fishingProceed((PlayerCreature*) inv->getObjectParameter(), inv->getSignedIntParameter(), (SceneObject*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getUnsignedIntParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 37:
		mishapEvent(inv->getAsciiParameter(_param0_mishapEvent__String_PlayerCreature_int_bool_), (PlayerCreature*) inv->getObjectParameter(), inv->getUnsignedIntParameter(), inv->getBooleanParameter());
		break;
	case 38:
		resp->insertBoolean(loseBait((PlayerCreature*) inv->getObjectParameter()));
		break;
	case 39:
		animate((PlayerCreature*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case 40:
		resp->insertLong(createMarker(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), (Zone*) inv->getObjectParameter())->_getObjectID());
		break;
	case 41:
		createSplash(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), (Zone*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter());
		break;
	case 42:
		updateMarker((PlayerCreature*) inv->getObjectParameter(), inv->getSignedIntParameter(), (SceneObject*) inv->getObjectParameter());
		break;
	case 43:
		removeMarker((PlayerCreature*) inv->getObjectParameter());
		break;
	case 44:
		removeSplash((SceneObject*) inv->getObjectParameter());
		break;
	case 45:
		createFishingSplashEvent((PlayerCreature*) inv->getObjectParameter(), (ZoneServer*) inv->getObjectParameter(), (SceneObject*) inv->getObjectParameter());
		break;
	case 46:
		createFishingEvent((PlayerCreature*) inv->getObjectParameter(), inv->getSignedIntParameter(), (ZoneServer*) inv->getObjectParameter(), (SceneObject*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getUnsignedIntParameter(), inv->getSignedIntParameter());
		break;
	case 47:
		stopFishingEvent((PlayerCreature*) inv->getObjectParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void FishingManagerAdapter::initializeBaitStatus() {
	((FishingManagerImplementation*) impl)->initializeBaitStatus();
}

void FishingManagerAdapter::initializeProperty() {
	((FishingManagerImplementation*) impl)->initializeProperty();
}

void FishingManagerAdapter::initializeAction() {
	((FishingManagerImplementation*) impl)->initializeAction();
}

void FishingManagerAdapter::initializeState() {
	((FishingManagerImplementation*) impl)->initializeState();
}

void FishingManagerAdapter::initializeFishType() {
	((FishingManagerImplementation*) impl)->initializeFishType();
}

void FishingManagerAdapter::initializeLoot() {
	((FishingManagerImplementation*) impl)->initializeLoot();
}

void FishingManagerAdapter::initializeColor() {
	((FishingManagerImplementation*) impl)->initializeColor();
}

int FishingManagerAdapter::notify(SceneObject* sceneObject) {
	return ((FishingManagerImplementation*) impl)->notify(sceneObject);
}

void FishingManagerAdapter::checkFishingOnPositionUpdate(PlayerCreature* player) {
	((FishingManagerImplementation*) impl)->checkFishingOnPositionUpdate(player);
}

int FishingManagerAdapter::startFishing(PlayerCreature* player) {
	return ((FishingManagerImplementation*) impl)->startFishing(player);
}

void FishingManagerAdapter::stopFishing(PlayerCreature* player, unsigned int boxID, bool rem) {
	((FishingManagerImplementation*) impl)->stopFishing(player, boxID, rem);
}

void FishingManagerAdapter::fishingStep(PlayerCreature* player, int nextAction, SceneObject* marker, int fish, unsigned int boxID) {
	((FishingManagerImplementation*) impl)->fishingStep(player, nextAction, marker, fish, boxID);
}

void FishingManagerAdapter::success(PlayerCreature* player, int fish, SceneObject* marker, unsigned int boxID) {
	((FishingManagerImplementation*) impl)->success(player, fish, marker, boxID);
}

unsigned int FishingManagerAdapter::createWindow(PlayerCreature* player, unsigned int boxID) {
	return ((FishingManagerImplementation*) impl)->createWindow(player, boxID);
}

void FishingManagerAdapter::closeMenu(PlayerCreature* player, unsigned int boxID) {
	((FishingManagerImplementation*) impl)->closeMenu(player, boxID);
}

int FishingManagerAdapter::vegetation(SceneObject* marker) {
	return ((FishingManagerImplementation*) impl)->vegetation(marker);
}

int FishingManagerAdapter::density(SceneObject* marker) {
	return ((FishingManagerImplementation*) impl)->density(marker);
}

int FishingManagerAdapter::getFish(PlayerCreature* player) {
	return ((FishingManagerImplementation*) impl)->getFish(player);
}

int FishingManagerAdapter::getNextAction(PlayerCreature* player) {
	return ((FishingManagerImplementation*) impl)->getNextAction(player);
}

void FishingManagerAdapter::setNextAction(PlayerCreature* player, int next) {
	((FishingManagerImplementation*) impl)->setNextAction(player, next);
}

FishingPoleObject* FishingManagerAdapter::getPole(PlayerCreature* player) {
	return ((FishingManagerImplementation*) impl)->getPole(player);
}

FishingBaitObject* FishingManagerAdapter::getBait(PlayerCreature* player) {
	return ((FishingManagerImplementation*) impl)->getBait(player);
}

unsigned int FishingManagerAdapter::getFishBoxID(PlayerCreature* player) {
	return ((FishingManagerImplementation*) impl)->getFishBoxID(player);
}

void FishingManagerAdapter::setFishBoxID(PlayerCreature* player, unsigned int boxID) {
	((FishingManagerImplementation*) impl)->setFishBoxID(player, boxID);
}

int FishingManagerAdapter::getFishingState(PlayerCreature* player) {
	return ((FishingManagerImplementation*) impl)->getFishingState(player);
}

void FishingManagerAdapter::setFishingState(PlayerCreature* player, int state) {
	((FishingManagerImplementation*) impl)->setFishingState(player, state);
}

SceneObject* FishingManagerAdapter::getFishMarker(PlayerCreature* player) {
	return ((FishingManagerImplementation*) impl)->getFishMarker(player);
}

void FishingManagerAdapter::setFishMarker(PlayerCreature* player, SceneObject* marker) {
	((FishingManagerImplementation*) impl)->setFishMarker(player, marker);
}

void FishingManagerAdapter::cheat(PlayerCreature* player, int value) {
	((FishingManagerImplementation*) impl)->cheat(player, value);
}

void FishingManagerAdapter::freeBait(PlayerCreature* player) {
	((FishingManagerImplementation*) impl)->freeBait(player);
}

void FishingManagerAdapter::fishingProceed(PlayerCreature* player, int nextAction, SceneObject* marker, int fish, unsigned int boxID, int newstate, bool notifyClient) {
	((FishingManagerImplementation*) impl)->fishingProceed(player, nextAction, marker, fish, boxID, newstate, notifyClient);
}

void FishingManagerAdapter::mishapEvent(const String& text, PlayerCreature* player, unsigned int boxID, bool losebait) {
	((FishingManagerImplementation*) impl)->mishapEvent(text, player, boxID, losebait);
}

bool FishingManagerAdapter::loseBait(PlayerCreature* player) {
	return ((FishingManagerImplementation*) impl)->loseBait(player);
}

void FishingManagerAdapter::animate(PlayerCreature* player, int nextAction) {
	((FishingManagerImplementation*) impl)->animate(player, nextAction);
}

SceneObject* FishingManagerAdapter::createMarker(float x, float y, float z, Zone* zone) {
	return ((FishingManagerImplementation*) impl)->createMarker(x, y, z, zone);
}

void FishingManagerAdapter::createSplash(float x, float y, float z, Zone* zone, PlayerCreature* player) {
	((FishingManagerImplementation*) impl)->createSplash(x, y, z, zone, player);
}

void FishingManagerAdapter::updateMarker(PlayerCreature* player, int nextAction, SceneObject* marker) {
	((FishingManagerImplementation*) impl)->updateMarker(player, nextAction, marker);
}

void FishingManagerAdapter::removeMarker(PlayerCreature* player) {
	((FishingManagerImplementation*) impl)->removeMarker(player);
}

void FishingManagerAdapter::removeSplash(SceneObject* splash) {
	((FishingManagerImplementation*) impl)->removeSplash(splash);
}

void FishingManagerAdapter::createFishingSplashEvent(PlayerCreature* player, ZoneServer* zoneServer, SceneObject* splash) {
	((FishingManagerImplementation*) impl)->createFishingSplashEvent(player, zoneServer, splash);
}

void FishingManagerAdapter::createFishingEvent(PlayerCreature* player, int nextAction, ZoneServer* zoneServer, SceneObject* marker, int sum, unsigned int boxID, int state) {
	((FishingManagerImplementation*) impl)->createFishingEvent(player, nextAction, zoneServer, marker, sum, boxID, state);
}

void FishingManagerAdapter::stopFishingEvent(PlayerCreature* player) {
	((FishingManagerImplementation*) impl)->stopFishingEvent(player);
}

/*
 *	FishingManagerHelper
 */

FishingManagerHelper* FishingManagerHelper::staticInitializer = FishingManagerHelper::instance();

FishingManagerHelper::FishingManagerHelper() {
	className = "FishingManager";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void FishingManagerHelper::finalizeHelper() {
	FishingManagerHelper::finalize();
}

DistributedObject* FishingManagerHelper::instantiateObject() {
	return new FishingManager(DummyConstructorParameter::instance());
}

DistributedObjectServant* FishingManagerHelper::instantiateServant() {
	return new FishingManagerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* FishingManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new FishingManagerAdapter((FishingManagerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

