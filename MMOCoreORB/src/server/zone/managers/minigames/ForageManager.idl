/*
Copyright (C) 2007 <SWGEmu>

This File is part of Core3.

This program is free software; you can redistribute
it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software
Foundation; either version 2 of the License,
or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for
more details.

You should have received a copy of the GNU Lesser General
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Linking Engine3 statically or dynamically with other modules
is making a combined work based on Engine3.
Thus, the terms and conditions of the GNU Lesser General Public License
cover the whole combination.

In addition, as a special exception, the copyright holders of Engine3
give you permission to combine Engine3 program with free software
programs or libraries that are released under the GNU LGPL and with
code included in the standard release of Core3 under the GNU LGPL
license (or modified versions of such code, with unchanged license).
You may copy and distribute such a system following the terms of the
GNU LGPL for Engine3 and the licenses of the other code concerned,
provided that you include the source code of that other code when
and as the GNU LGPL requires distribution of source code.

Note that people who make modified versions of Engine3 are not obligated
to grant this special exception for their modified versions;
it is their choice whether to do so. The GNU Lesser General Public License
gives permission to release a modified version without this exception;
this exception also makes it possible to release a modified version
which carries forward this exception.
*/

package server.zone.managers.minigames;

import engine.log.Logger;
import engine.lua.Lua;
import server.zone.objects.creature.CreatureObject;
import server.zone.Zone;
import server.zone.ZoneServer;
import system.util.VectorMap;
import system.util.Vector;
import engine.util.Observer;
include server.zone.objects.area.ForageMap;

class ForageManager extends Observer implements Logger {
	
	public static final int SCOUT = 1;
	public static final int MEDICAL = 2;
	public static final int LAIR = 3;
	public static final int SHELLFISH = 4;
	 
	@dereferenced
	protected ForageMap forageAreas;


	public ForageManager() {
		Logger.setLoggingName("ForageManager");
		Logger.setLogging(true);
		forageAreas.setNullValue(null);
	}

	public void deleteForageAreaCollection(string playerName) {
		forageAreas.drop(playerName);
	}


	/**
	 * Starts foraging.
	 * Checks the player's pending tasks to see if they are already foraging. If so, cancels forage.
	 * Checks if the player is inside a structure. If so, cancels forage.
	 * Deducts the foraging action cost from the player.
	 * Collects the player's current position so we can compare it after the forage animation is done.
	 * Creates the forage task and puts it into the player's pending tasks, it will activate in 8.5 
	 * seconds and will activate finishForaging().
	 * @pre { this object is not locked, player is locked }
	 * @post { this object is not locked, player is not locked }
	 * @param player CreatureObject who is trying to forage.
	 * @param scoutForage Determines if the player is using /forage or /medicalforage.
	 */
	public native void startForaging(CreatureObject player, int forageType); 


	/**
	 * Finishes foraging.
	 * Checks if the player moved since first foraging. If so, cancels forage.
	 * Checks if the player entered combat. If so, cancels forage.
	 * Checks the forage areas to see if the player is allowed to forage here again. If not, cancels forage.
	 * Determines if the player is successful or not in the forage attempt.
	 * If successful, activates forageGiveItems().
	 * @pre { this object is locked, player is locked }
	 * @post { this object is not locked, player is not locked }
	 * @param player CreatureObject who is foraging.
	 * @param scoutForage Determines if the player is using /forage or /medicalforage.
	 * @param forageX The x coordinate of the player's position when they first started foraging.
	 * @param forageY The y coordinate of the player's position when they first started foraging.
	 * @param planet The planet (zone ID) the player was on when they first started foraging.
	 */
	public native void finishForaging(CreatureObject player, int forageType, float forageX, float forageY, final string planet);


	/**
	 * Gives the player items for a successful forage.
	 * Checks player's inventory space and discards items they could have received if they had space.
 	 * Determines which loot group they will get an item from. If resource, calls giveForageResource().
	 * @pre { this object is not locked, player is locked }
	 * @post { this object is not locked, player is not locked }
	 * @param player CreatureObject who is foraging.
	 * @param scoutForage Determines if the player is using /forage or /medicalforage.
	 * @param forageX The x coordinate of the player's position when they first started foraging.
	 * @param forageY The y coordinate of the player's position when they first started foraging.
	 * @param planet The planet (zone ID) the player was on when they first started foraging.
	 */
	public native boolean forageGiveItems(CreatureObject player, int forageType, float forageX, float forageY, final string planet);



	/**
	 * Gives the player resources for a successful forage.
	 * Pulls a list of all the flora resource spawns on that planet.
 	 * Picks a random flora from the list and gives it to the player if there is some under them.
	 * If the density of the flora is zero, it picks a different resource.
	 * @pre { this object is not locked, player is locked }
	 * @post { this object is not locked, player is not locked }
	 * @param player CreatureObject who is foraging.
	 * @param forageX The x coordinate of the player's position when they first started foraging.
	 * @param forageY The y coordinate of the player's position when they first started foraging.
	 * @param planet The planet (zone ID) the player was on when they first started foraging.
	 */
	public native boolean forageGiveResource(CreatureObject player, float forageX, float forageY, final string planet, string resType); 




}



















