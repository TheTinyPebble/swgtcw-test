/*
 *	server/zone/managers/minigames/FishingSession.h generated by engine3 IDL compiler 0.60
 */

#ifndef FISHINGSESSION_H_
#define FISHINGSESSION_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

namespace server {
namespace zone {
namespace managers {
namespace minigames {
namespace events {

class FishingEvent;

} // namespace events
} // namespace minigames
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::minigames::events;

#include "server/zone/objects/scene/SessionFacadeType.h"

#include "engine/core/ManagedObject.h"

#include "engine/log/Logger.h"

#include "engine/core/ManagedReference.h"

#include "engine/util/Facade.h"

#include "system/lang/ref/Reference.h"

namespace server {
namespace zone {
namespace managers {
namespace minigames {

class FishingSession : public Facade {
public:
	FishingSession(CreatureObject* player, FishingEvent* event, SceneObject* marker, int nextAction, int fish, unsigned int boxID, int fishingState, const String& mood);

	void setEvent(FishingEvent* ev);

	void setMood(const String& m);

	FishingEvent* getEvent();

	void setNextAction(int action);

	int getNextAction();

	void setFishBoxID(unsigned int box);

	unsigned int getFishBoxID();

	SceneObject* getMarker();

	void setMarker(SceneObject* mar);

	int getFish();

	void setFish(int fi);

	int getFishingState();

	void setFishingState(int state);

	void setPlayer(CreatureObject* pl);

	void update(int nextAction, SceneObject* marker, int fish, unsigned int boxID, int fishingState);

	String getMoodString();

	DistributedObjectServant* _getImplementation();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	FishingSession(DummyConstructorParameter* param);

	virtual ~FishingSession();

	friend class FishingSessionHelper;
};

} // namespace minigames
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::minigames;

namespace server {
namespace zone {
namespace managers {
namespace minigames {

class FishingSessionImplementation : public FacadeImplementation {
protected:
	ManagedWeakReference<CreatureObject* > player;

	Reference<FishingEvent* > event;

	ManagedReference<SceneObject* > marker;

	int nextAction;

	int fish;

	unsigned int boxID;

	int fishingState;

	String mood;

public:
	FishingSessionImplementation(CreatureObject* player, FishingEvent* event, SceneObject* marker, int nextAction, int fish, unsigned int boxID, int fishingState, const String& mood);

	FishingSessionImplementation(DummyConstructorParameter* param);

	void setEvent(FishingEvent* ev);

	void setMood(const String& m);

	FishingEvent* getEvent();

	void setNextAction(int action);

	int getNextAction();

	void setFishBoxID(unsigned int box);

	unsigned int getFishBoxID();

	SceneObject* getMarker();

	void setMarker(SceneObject* mar);

	int getFish();

	void setFish(int fi);

	int getFishingState();

	void setFishingState(int state);

	void setPlayer(CreatureObject* pl);

	void update(int nextAction, SceneObject* marker, int fish, unsigned int boxID, int fishingState);

	String getMoodString();

	WeakReference<FishingSession*> _this;

	operator const FishingSession*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~FishingSessionImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const String& name);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class FishingSession;
};

class FishingSessionAdapter : public FacadeAdapter {
public:
	FishingSessionAdapter(FishingSession* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void setMood(const String& m);

	void setNextAction(int action);

	int getNextAction();

	void setFishBoxID(unsigned int box);

	unsigned int getFishBoxID();

	SceneObject* getMarker();

	void setMarker(SceneObject* mar);

	int getFish();

	void setFish(int fi);

	int getFishingState();

	void setFishingState(int state);

	void setPlayer(CreatureObject* pl);

	void update(int nextAction, SceneObject* marker, int fish, unsigned int boxID, int fishingState);

	String getMoodString();

};

class FishingSessionHelper : public DistributedObjectClassHelper, public Singleton<FishingSessionHelper> {
	static FishingSessionHelper* staticInitializer;

public:
	FishingSessionHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<FishingSessionHelper>;
};

} // namespace minigames
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::minigames;

#endif /*FISHINGSESSION_H_*/
