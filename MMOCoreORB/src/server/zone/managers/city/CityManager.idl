/*
Copyright (C) 2007 <SWGEmu>
 
This File is part of Core3.
 
This program is free software; you can redistribute 
it and/or modify it under the terms of the GNU Lesser 
General Public License as published by the Free Software
Foundation; either version 2 of the License, 
or (at your option) any later version.
 
This program is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
See the GNU Lesser General Public License for
more details.
 
You should have received a copy of the GNU Lesser General 
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 
Linking Engine3 statically or dynamically with other modules 
is making a combined work based on Engine3. 
Thus, the terms and conditions of the GNU Lesser General Public License 
cover the whole combination.
 
In addition, as a special exception, the copyright holders of Engine3 
give you permission to combine Engine3 program with free software 
programs or libraries that are released under the GNU LGPL and with 
code included in the standard release of Core3 under the GNU LGPL 
license (or modified versions of such code, with unchanged license). 
You may copy and distribute such a system following the terms of the 
GNU LGPL for Engine3 and the licenses of the other code concerned, 
provided that you include the source code of that other code when 
and as the GNU LGPL requires distribution of source code.
 
Note that people who make modified versions of Engine3 are not obligated 
to grant this special exception for their modified versions; 
it is their choice whether to do so. The GNU Lesser General Public License 
gives permission to release a modified version without this exception; 
this exception also makes it possible to release a modified version 
which carries forward this exception.
*/

package server.zone.managers.city;

import engine.core.ManagedService;
import engine.log.Logger;
import server.zone.Zone;
import server.zone.objects.building.city.CityHallObject;
import server.zone.objects.player.PlayerCreature;
import server.chat.StringIdChatParameter;
import system.util.SortedVector;
import system.util.VectorMap;

class CityManager extends ManagedService implements Logger {
	@weakReference
	private Zone zone;
	
	@dereferenced
	public static transient Vector<unsigned short> radiusPerRank;
	
	@dereferenced
	public static transient Vector<byte> citizensPerRank;
	
	@dereferenced
	public VectorMap<unsigned long, CityHallObject> cities;
	
	public static int cityUpdateInterval;
	public static int newCityGracePeriod;
	
	@dereferenced
	private transient Vector<byte> citiesAllowedPerRank;
	
	//City Ranks
	public static final byte NEWCITY = 0;
	public static final byte OUTPOST = 1;
	public static final byte VILLAGE = 2;
	public static final byte TOWNSHIP = 3;
	public static final byte CITY = 4;
	public static final byte METROPOLIS = 5;
	
	public CityManager(Zone zne) {
		Logger.setLoggingName("CityManager");
		Logger.setLogging(false);
		Logger.setGlobalLogging(true);
		
		zone = zne;
		
		cities.setNullValue(null);
		cities.setInsertPlan(3); //ALLOW_OVERWRITE
	}
	
	/**
	 * Loads configuration settings for cities from the lua for the city manager.
	 */
	public native void loadLuaConfig();
	
	public native void createNewCity(CityHallObject city, PlayerCreature player, final string name);
	
	public native void changeCityName(CityHallObject city, PlayerCreature player, final string name);
	
	public native boolean validateCityName(final string name);
	
	/**
	 * Sends an email message to the mayor of the city.
	 * @param city The CityHallObject belonging to the city to send the messages out to.
	 * @param sendername The mail message's sender's name.
	 * @param subject The subject line for the mail message.
	 * @param body A StringIdChatParameter containing the contents of the mail message.
	 */
	@local
	public native void sendMailToMayor(CityHallObject city, final string sendername, final unicode subject, @dereferenced StringIdChatParameter body);
	
	/**
	 * Sends an email message to all citizens of the city.
	 * @param city The CityHallObject belonging to the city to send the messages out to.
	 * @param sendername The mail message's sender's name.
	 * @param subject The subject line for the mail message.
	 * @param body A StringIdChatParameter containing the contents of the mail message.
	 */
	@local
	public native void sendMailToAllCitizens(CityHallObject city, final string sendername, final unicode subject, @dereferenced StringIdChatParameter body);
	
	/**
	 * Checks to see if the city is eligible for city advancement or not.
	 * @param city CityHallObject that belongs to the city.
	 */
	public native void handleCityAdvancement(CityHallObject city);
	
	/**
	 * Attempts to expand the city to the next rank, and increase its radius, sending out the appropriate mails.
	 * @params city The city to expand.
	 */
	public native void expandCity(CityHallObject city);
	
	/**
	 * Attempts to contract the city to the previous rank, and decrease its radius, sending out the appropriate mails.
	 * If the city was a new city, then it attempts to destroy the city.
	 * @params city The city to contract.
	 */
	public native void contractCity(CityHallObject city);
	
	/**
	 * Attempts to destroy the city, and all civic structures attached to it.
	 * @param city CityHallObject representing the city.
	 */
	public native void destroyCity(CityHallObject city);
	
	/**
	 * Declares the citizen to the city, and sends out proper mails.
	 * @param city The city that the citizen is joining.
	 * @param player The new citizen.
	 * @param sendMail Should emails be sent to the player and the mayor.
	 */
	public native void declareCitizenship(CityHallObject city, PlayerCreature player, boolean sendMail = true);
	
	/**
	 * Revokes the citizen from the city, and sends out proper mails.
	 * @param city The city that the citizen is leaving.
	 * @param player The old citizen.
	 * @param sendMail Should emails be sent to the mayor.
	 */
	public native void revokeCitizenship(CityHallObject city, PlayerCreature player, boolean sendMail = true);
	
	/**
	 * Adds an existing citizen to the rank of militia.
	 * @pre: city locked, player locked, citizen unlocked, citizen must be online and in range.
	 * @post: city locked, player locked, citizen unlocked
	 * @param city The city too promote this citizen to militia of.
	 * @param player The player doing the adding.
	 * @param citizenName The citizen's first name being added.
	 */
	public native void addMilitiaMember(CityHallObject city, PlayerCreature player, final string citizenName);
	
	/**
	 * Removes an existing militia member from the militia and makes them a citizen.
	 * @pre: city locked, player locked, citizen unlocked, citizen must be online and in range.
	 * @post: city locked, player locked, citizen unlocked
	 * @param city The city too remove the citizen from the militia.
	 * @param player The player doing the removing.
	 * @param playerID The player object id of the player being removed.
	 */
	public native void removeMilitiaMember(CityHallObject city, PlayerCreature player, unsigned long playerID);
	
	/**
	 * Checks to see if the planet's city cap has been reached at the particular rank.
	 * @param rank The rank to check if is capped.
	 */
	public native boolean checkCitiesCappedAtRank(byte rank);
	
	/**
	 * Returns the number of cities allowed at this rank on this particular city manager for this zone.
	 * @param rank The rank to check for the city cap at.
	 */
	public byte getCitiesAllowed(byte rank) {
		return citiesAllowedPerRank.get(rank);
	}
	
	/**
	 * Adds a city to the cities vectormap
	 * @param city The city hall object to add to the cities vectormap.
	 */
	public synchronized void addCity(CityHallObject city) {
		cities.put(city.getObjectID(), city);
	}
	
	public synchronized int getTotalCities() {
		return cities.size();
	}
}