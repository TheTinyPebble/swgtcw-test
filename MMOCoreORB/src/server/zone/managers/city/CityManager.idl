/*
Copyright (C) 2007 <SWGEmu>
 
This File is part of Core3.
 
This program is free software; you can redistribute 
it and/or modify it under the terms of the GNU Lesser 
General Public License as published by the Free Software
Foundation; either version 2 of the License, 
or (at your option) any later version.
 
This program is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
See the GNU Lesser General Public License for
more details.
 
You should have received a copy of the GNU Lesser General 
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 
Linking Engine3 statically or dynamically with other modules 
is making a combined work based on Engine3. 
Thus, the terms and conditions of the GNU Lesser General Public License 
cover the whole combination.
 
In addition, as a special exception, the copyright holders of Engine3 
give you permission to combine Engine3 program with free software 
programs or libraries that are released under the GNU LGPL and with 
code included in the standard release of Core3 under the GNU LGPL 
license (or modified versions of such code, with unchanged license). 
You may copy and distribute such a system following the terms of the 
GNU LGPL for Engine3 and the licenses of the other code concerned, 
provided that you include the source code of that other code when 
and as the GNU LGPL requires distribution of source code.
 
Note that people who make modified versions of Engine3 are not obligated 
to grant this special exception for their modified versions; 
it is their choice whether to do so. The GNU Lesser General Public License 
gives permission to release a modified version without this exception; 
this exception also makes it possible to release a modified version 
which carries forward this exception.
*/

package server.zone.managers.city;

import engine.core.ManagedService;
import engine.log.Logger;
import server.zone.Zone;
import server.zone.objects.creature.CreatureObject;
import server.chat.StringIdChatParameter;
import system.util.SortedVector;
import system.util.VectorMap;
import server.zone.objects.scene.SceneObject;
import server.zone.objects.region.CityRegion;

class CityManager extends ManagedService implements Logger {
	@weakReference
	private Zone zone;
	
	@dereferenced
	public static transient Vector<unsigned short> radiusPerRank;
	
	@dereferenced
	public static transient Vector<byte> citizensPerRank;
	
	public transient static int cityUpdateInterval;
	public transient static int newCityGracePeriod;
	public transient static unsigned long citySpecializationCooldown;
	public transient static int cityVotingDuration;
	public transient static unsigned long treasuryWithdrawalCooldown;
	
	@dereferenced
	public transient VectorMap<string, CityRegion> cities;
	
	@dereferenced
	private transient Vector<byte> citiesAllowedPerRank;
	
	private transient boolean configLoaded;
	
	//City Ranks
	public static final byte NEWCITY = 0;
	public static final byte OUTPOST = 1;
	public static final byte VILLAGE = 2;
	public static final byte TOWNSHIP = 3;
	public static final byte CITY = 4;
	public static final byte METROPOLIS = 5;
	
	public CityManager(Zone zne) {
		Logger.setLoggingName("CityManager");
		Logger.setLogging(false);
		Logger.setGlobalLogging(true);
		
		zone = zne;
		
		cities.setNoDuplicateInsertPlan();
		cities.setNullValue(null);
		
		configLoaded = false;
	}
	
	/**
	 * Loads configuration settings for cities from the lua for the city manager.
	 */
	public native void loadLuaConfig();
	
	public native void loadCityRegions();

	public native boolean validateCityName(final string name);
	
	public native CityRegion createCity(CreatureObject mayor, final string cityName, float x, float y);
	
	public native void sendStatusReport(CityRegion city, CreatureObject creature, SceneObject terminal = null);
	
	public native void promptCitySpecialization(CityRegion city, CreatureObject mayor, SceneObject terminal = null);
	
	public native void changeCitySpecialization(CityRegion city, CreatureObject mayor, final string spec);
	
	public native void promptWithdrawCityTreasury(CityRegion city, CreatureObject mayor, SceneObject terminal = null);
	
	public native void promptDepositCityTreasury(CityRegion city, CreatureObject creature, SceneObject terminal = null);
	
	public native void withdrawFromCityTreasury(CityRegion city, CreatureObject mayor, int value, SceneObject terminal = null);
	
	public native void depositToCityTreasury(CityRegion city, CreatureObject creature, int value);
	
	public native void sendTreasuryReport(CityRegion city, CreatureObject creature, SceneObject terminal = null);
	
	public native void expandCityRegion(CityRegion city);
	
	public native void sendCitizenshipReport(CityRegion city, CreatureObject creature, SceneObject terminal = null);
	
	public native void registerCitizen(CityRegion city, CreatureObject creature);
	
	public native void unregisterCitizen(CityRegion city, CreatureObject creature);
	
	public native void sendManageMilitia(CityRegion city, CreatureObject creature, SceneObject terminal = null);
	
	public native void promptAddMilitiaMember(CityRegion city, CreatureObject creature, SceneObject terminal = null);
	
	public native void addMilitiaMember(CityRegion city, CreatureObject mayor, final string playerName);
	
	public native void removeMilitiaMember(CityRegion city, unsigned long militiaid);

	public void toggleZoningEnabled(CityRegion city, CreatureObject mayor) {
		if (city.isMayor(mayor.getObjectID())) {
			boolean val = city.isZoningEnabled();
			city.setZoningEnabled(!val);
			
			if (!val) {
				mayor.sendSystemMessage("@city/city:zoning_enabled"); //Your city now has zoning enabled.
			} else {
				mayor.sendSystemMessage("@city/city:zoning_disabled"); //Your city now has zoning disabled.
			}
		}
	}
	
	/**
	 * Returns the number of cities allowed at this rank on this particular city manager for this zone.
	 * @param rank The rank to check for the city cap at.
	 */
	public byte getCitiesAllowed(byte rank) {
		return citiesAllowedPerRank.get(rank);
	}
	
	public int getTotalCities() {
		return cities.size();
	}
}