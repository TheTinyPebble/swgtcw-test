/*
 *	server/zone/managers/city/CityManager.cpp generated by engine3 IDL compiler 0.60
 */

#include "CityManager.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/chat/StringIdChatParameter.h"

#include "server/zone/objects/region/CityRegion.h"

/*
 *	CityManagerStub
 */

enum {RPC_LOADLUACONFIG__ = 6,RPC_VALIDATECITYNAME__STRING_,RPC_CREATECITY__CREATUREOBJECT_STRING_FLOAT_FLOAT_,RPC_GETCITIESALLOWED__BYTE_,RPC_GETTOTALCITIES__};

CityManager::CityManager(Zone* zne) : ManagedService(DummyConstructorParameter::instance()) {
	CityManagerImplementation* _implementation = new CityManagerImplementation(zne);
	_impl = _implementation;
	_impl->_setStub(this);
}

CityManager::CityManager(DummyConstructorParameter* param) : ManagedService(param) {
}

CityManager::~CityManager() {
}



void CityManager::loadLuaConfig() {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_LOADLUACONFIG__);

		method.executeWithVoidReturn();
	} else
		_implementation->loadLuaConfig();
}

bool CityManager::validateCityName(const String& name) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_VALIDATECITYNAME__STRING_);
		method.addAsciiParameter(name);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->validateCityName(name);
}

CityRegion* CityManager::createCity(CreatureObject* mayor, const String& cityName, float x, float y) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATECITY__CREATUREOBJECT_STRING_FLOAT_FLOAT_);
		method.addObjectParameter(mayor);
		method.addAsciiParameter(cityName);
		method.addFloatParameter(x);
		method.addFloatParameter(y);

		return static_cast<CityRegion*>(method.executeWithObjectReturn());
	} else
		return _implementation->createCity(mayor, cityName, x, y);
}

byte CityManager::getCitiesAllowed(byte rank) {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCITIESALLOWED__BYTE_);
		method.addByteParameter(rank);

		return method.executeWithByteReturn();
	} else
		return _implementation->getCitiesAllowed(rank);
}

int CityManager::getTotalCities() {
	CityManagerImplementation* _implementation = static_cast<CityManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTOTALCITIES__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getTotalCities();
}

DistributedObjectServant* CityManager::_getImplementation() {

	_updated = true;
	return _impl;
}

void CityManager::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	CityManagerImplementation
 */

CityManagerImplementation::CityManagerImplementation(DummyConstructorParameter* param) : ManagedServiceImplementation(param) {
	_initializeImplementation();
}


CityManagerImplementation::~CityManagerImplementation() {
}


void CityManagerImplementation::finalize() {
}

void CityManagerImplementation::_initializeImplementation() {
	_setClassHelper(CityManagerHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void CityManagerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<CityManager*>(stub);
	ManagedServiceImplementation::_setStub(stub);
}

DistributedObjectStub* CityManagerImplementation::_getStub() {
	return _this;
}

CityManagerImplementation::operator const CityManager*() {
	return _this;
}

void CityManagerImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void CityManagerImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void CityManagerImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void CityManagerImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void CityManagerImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void CityManagerImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void CityManagerImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void CityManagerImplementation::_serializationHelperMethod() {
	ManagedServiceImplementation::_serializationHelperMethod();

	_setClassName("CityManager");

}

void CityManagerImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(CityManagerImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool CityManagerImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ManagedServiceImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "zone") {
		TypeInfo<ManagedWeakReference<Zone* > >::parseFromBinaryStream(&zone, stream);
		return true;
	}


	return false;
}

void CityManagerImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = CityManagerImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int CityManagerImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "zone";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedWeakReference<Zone* > >::toBinaryStream(&zone, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 1 + ManagedServiceImplementation::writeObjectMembers(stream);
}

CityManagerImplementation::CityManagerImplementation(Zone* zne) {
	_initializeImplementation();
	// server/zone/managers/city/CityManager.idl():  		Logger.setLoggingName("CityManager");
	Logger::setLoggingName("CityManager");
	// server/zone/managers/city/CityManager.idl():  		Logger.setLogging(false);
	Logger::setLogging(false);
	// server/zone/managers/city/CityManager.idl():  		Logger.setGlobalLogging(true);
	Logger::setGlobalLogging(true);
	// server/zone/managers/city/CityManager.idl():  		zone = zne;
	zone = zne;
	// server/zone/managers/city/CityManager.idl():  		cities.setNoDuplicateInsertPlan();
	(&cities)->setNoDuplicateInsertPlan();
	// server/zone/managers/city/CityManager.idl():  		cities.setNullValue(null);
	(&cities)->setNullValue(NULL);
	// server/zone/managers/city/CityManager.idl():  		configLoaded = false;
	configLoaded = false;
}

byte CityManagerImplementation::getCitiesAllowed(byte rank) {
	// server/zone/managers/city/CityManager.idl():  		return citiesAllowedPerRank.get(rank);
	return (&citiesAllowedPerRank)->get(rank);
}

int CityManagerImplementation::getTotalCities() {
	// server/zone/managers/city/CityManager.idl():  		return cities.size();
	return (&cities)->size();
}

/*
 *	CityManagerAdapter
 */

CityManagerAdapter::CityManagerAdapter(CityManager* obj) : ManagedServiceAdapter(obj) {
}

Packet* CityManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_LOADLUACONFIG__:
		loadLuaConfig();
		break;
	case RPC_VALIDATECITYNAME__STRING_:
		resp->insertBoolean(validateCityName(inv->getAsciiParameter(_param0_validateCityName__String_)));
		break;
	case RPC_CREATECITY__CREATUREOBJECT_STRING_FLOAT_FLOAT_:
		resp->insertLong(createCity(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getAsciiParameter(_param1_createCity__CreatureObject_String_float_float_), inv->getFloatParameter(), inv->getFloatParameter())->_getObjectID());
		break;
	case RPC_GETCITIESALLOWED__BYTE_:
		resp->insertByte(getCitiesAllowed(inv->getByteParameter()));
		break;
	case RPC_GETTOTALCITIES__:
		resp->insertSignedInt(getTotalCities());
		break;
	default:
		return NULL;
	}

	return resp;
}

void CityManagerAdapter::loadLuaConfig() {
	(static_cast<CityManager*>(stub))->loadLuaConfig();
}

bool CityManagerAdapter::validateCityName(const String& name) {
	return (static_cast<CityManager*>(stub))->validateCityName(name);
}

CityRegion* CityManagerAdapter::createCity(CreatureObject* mayor, const String& cityName, float x, float y) {
	return (static_cast<CityManager*>(stub))->createCity(mayor, cityName, x, y);
}

byte CityManagerAdapter::getCitiesAllowed(byte rank) {
	return (static_cast<CityManager*>(stub))->getCitiesAllowed(rank);
}

int CityManagerAdapter::getTotalCities() {
	return (static_cast<CityManager*>(stub))->getTotalCities();
}

/*
 *	CityManagerHelper
 */

CityManagerHelper* CityManagerHelper::staticInitializer = CityManagerHelper::instance();

CityManagerHelper::CityManagerHelper() {
	className = "CityManager";

	Core::getObjectBroker()->registerClass(className, this);
}

void CityManagerHelper::finalizeHelper() {
	CityManagerHelper::finalize();
}

DistributedObject* CityManagerHelper::instantiateObject() {
	return new CityManager(DummyConstructorParameter::instance());
}

DistributedObjectServant* CityManagerHelper::instantiateServant() {
	return new CityManagerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* CityManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new CityManagerAdapter(static_cast<CityManager*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

