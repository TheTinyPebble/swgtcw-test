/*
 *	server/zone/managers/structure/StructureManager.cpp generated by engine3 IDL compiler 0.60
 */

#include "StructureManager.h"

#include "server/zone/Zone.h"

#include "server/zone/ZoneProcessServerImplementation.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/objects/structure/StructureObject.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"


// Imported class dependencies

#include "server/zone/managers/object/ObjectMap.h"

#include "engine/util/Quaternion.h"

#include "server/zone/ZoneClientSession.h"

#include "system/util/SortedVector.h"

#include "server/zone/objects/player/TradeContainer.h"

#include "server/zone/Zone.h"

#include "server/zone/ZoneProcessServerImplementation.h"

#include "engine/core/ObjectUpdateToDatabaseTask.h"

#include "server/zone/objects/tangible/sign/SignObject.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/managers/planet/PlanetManager.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/objects/player/events/PlayerRecoveryEvent.h"

#include "server/zone/objects/tangible/tool/CraftingTool.h"

#include "server/zone/managers/planet/MapLocationTable.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

#include "server/zone/objects/player/events/PlayerDisconnectEvent.h"

#include "server/zone/objects/area/ActiveArea.h"

#include "server/zone/managers/creature/CreatureManager.h"

#include "system/lang/Time.h"

#include "server/zone/objects/structure/StructurePermissionList.h"

#include "server/zone/objects/tangible/terminal/structure/StructureTerminal.h"

#include "server/zone/managers/objectcontroller/command/CommandConfigManager.h"

#include "server/zone/managers/objectcontroller/command/CommandList.h"

#include "server/zone/objects/tangible/tool/SurveyTool.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/managers/planet/HeightMap.h"

#include "server/zone/objects/player/badges/Badges.h"

#include "server/zone/objects/scene/variables/StringId.h"

#include "system/util/VectorMap.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "system/util/Vector.h"

/*
 *	StructureManagerStub
 */

StructureManager::StructureManager(Zone* zone, ZoneProcessServerImplementation* processor) : ManagedObject(DummyConstructorParameter::instance()) {
	ManagedObject::_setImplementation(new StructureManagerImplementation(zone, processor));
	ManagedObject::_getImplementation()->_setStub(this);
}

StructureManager::StructureManager(DummyConstructorParameter* param) : ManagedObject(param) {
}

StructureManager::~StructureManager() {
}


void StructureManager::loadStructures() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((StructureManagerImplementation*) _getImplementation())->loadStructures();
}

int StructureManager::placeStructureFromDeed(PlayerCreature* player, unsigned long long deedID, float x, float y, int angle) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);
		method.addUnsignedLongParameter(deedID);
		method.addFloatParameter(x);
		method.addFloatParameter(y);
		method.addSignedIntParameter(angle);

		return method.executeWithSignedIntReturn();
	} else
		return ((StructureManagerImplementation*) _getImplementation())->placeStructureFromDeed(player, deedID, x, y, angle);
}

int StructureManager::placeStructure(PlayerCreature* player, SharedStructureObjectTemplate* structureTemplate, SceneObject* structure, unsigned long long deedID, float x, float y, const Quaternion& direction) {
	if (isNull()) {
		throw ObjectNotLocalException(this);

	} else
		return ((StructureManagerImplementation*) _getImplementation())->placeStructure(player, structureTemplate, structure, deedID, x, y, direction);
}

int StructureManager::placeBuilding(PlayerCreature* player, SharedBuildingObjectTemplate* buildingTemplate, SceneObject* structure, unsigned long long deedID, float x, float y, const Quaternion& direction) {
	if (isNull()) {
		throw ObjectNotLocalException(this);

	} else
		return ((StructureManagerImplementation*) _getImplementation())->placeBuilding(player, buildingTemplate, structure, deedID, x, y, direction);
}

int StructureManager::placeInstallation(PlayerCreature* player, SharedInstallationObjectTemplate* installationTemplate, SceneObject* structure, unsigned long long deedID, float x, float y, const Quaternion& direction) {
	if (isNull()) {
		throw ObjectNotLocalException(this);

	} else
		return ((StructureManagerImplementation*) _getImplementation())->placeInstallation(player, installationTemplate, structure, deedID, x, y, direction);
}

int StructureManager::constructStructure(PlayerCreature* player, SharedStructureObjectTemplate* structureTemplate, SceneObject* structure, unsigned long long deedID, float x, float y, const Quaternion& direction) {
	if (isNull()) {
		throw ObjectNotLocalException(this);

	} else
		return ((StructureManagerImplementation*) _getImplementation())->constructStructure(player, structureTemplate, structure, deedID, x, y, direction);
}

int StructureManager::destroyStructure(PlayerCreature* player, StructureObject* structureObject) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(player);
		method.addObjectParameter(structureObject);

		return method.executeWithSignedIntReturn();
	} else
		return ((StructureManagerImplementation*) _getImplementation())->destroyStructure(player, structureObject);
}

int StructureManager::redeedStructure(PlayerCreature* player, StructureObject* structureObject, bool destroy) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(player);
		method.addObjectParameter(structureObject);
		method.addBooleanParameter(destroy);

		return method.executeWithSignedIntReturn();
	} else
		return ((StructureManagerImplementation*) _getImplementation())->redeedStructure(player, structureObject, destroy);
}

int StructureManager::sendDestroyConfirmTo(PlayerCreature* player, StructureObject* structureObject) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(player);
		method.addObjectParameter(structureObject);

		return method.executeWithSignedIntReturn();
	} else
		return ((StructureManagerImplementation*) _getImplementation())->sendDestroyConfirmTo(player, structureObject);
}

int StructureManager::sendDestroyCodeTo(PlayerCreature* player, StructureObject* structureObject) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addObjectParameter(player);
		method.addObjectParameter(structureObject);

		return method.executeWithSignedIntReturn();
	} else
		return ((StructureManagerImplementation*) _getImplementation())->sendDestroyCodeTo(player, structureObject);
}

int StructureManager::sendStructureStatusTo(PlayerCreature* player, StructureObject* structureObject) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addObjectParameter(player);
		method.addObjectParameter(structureObject);

		return method.executeWithSignedIntReturn();
	} else
		return ((StructureManagerImplementation*) _getImplementation())->sendStructureStatusTo(player, structureObject);
}

int StructureManager::handlePayMaintenance(PlayerCreature* player, StructureObject* structureObject) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addObjectParameter(player);
		method.addObjectParameter(structureObject);

		return method.executeWithSignedIntReturn();
	} else
		return ((StructureManagerImplementation*) _getImplementation())->handlePayMaintenance(player, structureObject);
}

int StructureManager::handleWithdrawMaintenance(PlayerCreature* player, StructureObject* structureObject) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addObjectParameter(player);
		method.addObjectParameter(structureObject);

		return method.executeWithSignedIntReturn();
	} else
		return ((StructureManagerImplementation*) _getImplementation())->handleWithdrawMaintenance(player, structureObject);
}

int StructureManager::handleDeclareResidency(PlayerCreature* player, StructureObject* structureObject) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addObjectParameter(player);
		method.addObjectParameter(structureObject);

		return method.executeWithSignedIntReturn();
	} else
		return ((StructureManagerImplementation*) _getImplementation())->handleDeclareResidency(player, structureObject);
}

int StructureManager::handlePrivacyChange(PlayerCreature* player, StructureObject* structureObject) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addObjectParameter(player);
		method.addObjectParameter(structureObject);

		return method.executeWithSignedIntReturn();
	} else
		return ((StructureManagerImplementation*) _getImplementation())->handlePrivacyChange(player, structureObject);
}

int StructureManager::sendStructureNamePromptTo(PlayerCreature* player, StructureObject* structureObject) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addObjectParameter(player);
		method.addObjectParameter(structureObject);

		return method.executeWithSignedIntReturn();
	} else
		return ((StructureManagerImplementation*) _getImplementation())->sendStructureNamePromptTo(player, structureObject);
}

/*
 *	StructureManagerImplementation
 */

StructureManagerImplementation::StructureManagerImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}


StructureManagerImplementation::~StructureManagerImplementation() {
}


void StructureManagerImplementation::finalize() {
}

void StructureManagerImplementation::_initializeImplementation() {
	_setClassHelper(StructureManagerHelper::instance());

	_serializationHelperMethod();
}

void StructureManagerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (StructureManager*) stub;
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* StructureManagerImplementation::_getStub() {
	return _this;
}

StructureManagerImplementation::operator const StructureManager*() {
	return _this;
}

TransactionalObject* StructureManagerImplementation::clone() {
	return (TransactionalObject*) new StructureManagerImplementation(*this);
}


void StructureManagerImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void StructureManagerImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void StructureManagerImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void StructureManagerImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void StructureManagerImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void StructureManagerImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void StructureManagerImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void StructureManagerImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("StructureManager");

	addSerializableVariable("zone", &zone);
}

void StructureManagerImplementation::loadStructures() {
	// server/zone/managers/structure/StructureManager.idl(96):  		Logger.info("loading structures...", true);
	Logger::info("loading structures...", true);
	// server/zone/managers/structure/StructureManager.idl(98):  		listOfStaticBuildings.setNoDuplicateInsertPlan();
	(&listOfStaticBuildings)->setNoDuplicateInsertPlan();
	// server/zone/managers/structure/StructureManager.idl(100):  		loadStaticBuildings();
	loadStaticBuildings();
	// server/zone/managers/structure/StructureManager.idl(101):  		loadPlayerStructures();
	loadPlayerStructures();
	// server/zone/managers/structure/StructureManager.idl(102):  		loadStaticBanks();
	loadStaticBanks();
	// server/zone/managers/structure/StructureManager.idl(103):  		loadStaticBazaars();
	loadStaticBazaars();
	// server/zone/managers/structure/StructureManager.idl(104):  		loadStaticMissionTerminals();
	loadStaticMissionTerminals();
	// server/zone/managers/structure/StructureManager.idl(105):  		loadStaticCraftingStations();
	loadStaticCraftingStations();
	// server/zone/managers/structure/StructureManager.idl(106):  		loadStaticGarages();
	loadStaticGarages();
}

/*
 *	StructureManagerAdapter
 */

StructureManagerAdapter::StructureManagerAdapter(StructureManagerImplementation* obj) : ManagedObjectAdapter(obj) {
}

Packet* StructureManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		loadStructures();
		break;
	case 7:
		resp->insertSignedInt(placeStructureFromDeed((PlayerCreature*) inv->getObjectParameter(), inv->getUnsignedLongParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getSignedIntParameter()));
		break;
	case 8:
		resp->insertSignedInt(destroyStructure((PlayerCreature*) inv->getObjectParameter(), (StructureObject*) inv->getObjectParameter()));
		break;
	case 9:
		resp->insertSignedInt(redeedStructure((PlayerCreature*) inv->getObjectParameter(), (StructureObject*) inv->getObjectParameter(), inv->getBooleanParameter()));
		break;
	case 10:
		resp->insertSignedInt(sendDestroyConfirmTo((PlayerCreature*) inv->getObjectParameter(), (StructureObject*) inv->getObjectParameter()));
		break;
	case 11:
		resp->insertSignedInt(sendDestroyCodeTo((PlayerCreature*) inv->getObjectParameter(), (StructureObject*) inv->getObjectParameter()));
		break;
	case 12:
		resp->insertSignedInt(sendStructureStatusTo((PlayerCreature*) inv->getObjectParameter(), (StructureObject*) inv->getObjectParameter()));
		break;
	case 13:
		resp->insertSignedInt(handlePayMaintenance((PlayerCreature*) inv->getObjectParameter(), (StructureObject*) inv->getObjectParameter()));
		break;
	case 14:
		resp->insertSignedInt(handleWithdrawMaintenance((PlayerCreature*) inv->getObjectParameter(), (StructureObject*) inv->getObjectParameter()));
		break;
	case 15:
		resp->insertSignedInt(handleDeclareResidency((PlayerCreature*) inv->getObjectParameter(), (StructureObject*) inv->getObjectParameter()));
		break;
	case 16:
		resp->insertSignedInt(handlePrivacyChange((PlayerCreature*) inv->getObjectParameter(), (StructureObject*) inv->getObjectParameter()));
		break;
	case 17:
		resp->insertSignedInt(sendStructureNamePromptTo((PlayerCreature*) inv->getObjectParameter(), (StructureObject*) inv->getObjectParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

void StructureManagerAdapter::loadStructures() {
	((StructureManagerImplementation*) impl)->loadStructures();
}

int StructureManagerAdapter::placeStructureFromDeed(PlayerCreature* player, unsigned long long deedID, float x, float y, int angle) {
	return ((StructureManagerImplementation*) impl)->placeStructureFromDeed(player, deedID, x, y, angle);
}

int StructureManagerAdapter::destroyStructure(PlayerCreature* player, StructureObject* structureObject) {
	return ((StructureManagerImplementation*) impl)->destroyStructure(player, structureObject);
}

int StructureManagerAdapter::redeedStructure(PlayerCreature* player, StructureObject* structureObject, bool destroy) {
	return ((StructureManagerImplementation*) impl)->redeedStructure(player, structureObject, destroy);
}

int StructureManagerAdapter::sendDestroyConfirmTo(PlayerCreature* player, StructureObject* structureObject) {
	return ((StructureManagerImplementation*) impl)->sendDestroyConfirmTo(player, structureObject);
}

int StructureManagerAdapter::sendDestroyCodeTo(PlayerCreature* player, StructureObject* structureObject) {
	return ((StructureManagerImplementation*) impl)->sendDestroyCodeTo(player, structureObject);
}

int StructureManagerAdapter::sendStructureStatusTo(PlayerCreature* player, StructureObject* structureObject) {
	return ((StructureManagerImplementation*) impl)->sendStructureStatusTo(player, structureObject);
}

int StructureManagerAdapter::handlePayMaintenance(PlayerCreature* player, StructureObject* structureObject) {
	return ((StructureManagerImplementation*) impl)->handlePayMaintenance(player, structureObject);
}

int StructureManagerAdapter::handleWithdrawMaintenance(PlayerCreature* player, StructureObject* structureObject) {
	return ((StructureManagerImplementation*) impl)->handleWithdrawMaintenance(player, structureObject);
}

int StructureManagerAdapter::handleDeclareResidency(PlayerCreature* player, StructureObject* structureObject) {
	return ((StructureManagerImplementation*) impl)->handleDeclareResidency(player, structureObject);
}

int StructureManagerAdapter::handlePrivacyChange(PlayerCreature* player, StructureObject* structureObject) {
	return ((StructureManagerImplementation*) impl)->handlePrivacyChange(player, structureObject);
}

int StructureManagerAdapter::sendStructureNamePromptTo(PlayerCreature* player, StructureObject* structureObject) {
	return ((StructureManagerImplementation*) impl)->sendStructureNamePromptTo(player, structureObject);
}

/*
 *	StructureManagerHelper
 */

StructureManagerHelper* StructureManagerHelper::staticInitializer = StructureManagerHelper::instance();

StructureManagerHelper::StructureManagerHelper() {
	className = "StructureManager";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void StructureManagerHelper::finalizeHelper() {
	StructureManagerHelper::finalize();
}

DistributedObject* StructureManagerHelper::instantiateObject() {
	return new StructureManager(DummyConstructorParameter::instance());
}

DistributedObjectServant* StructureManagerHelper::instantiateServant() {
	return new StructureManagerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* StructureManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new StructureManagerAdapter((StructureManagerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

