/*
 *	server/zone/managers/structure/StructureManager.cpp generated by engine3 IDL compiler 0.55
 */

#include "StructureManager.h"

#include "StructureManagerImplementation.h"

#include "server/zone/Zone.h"

#include "server/zone/ZoneProcessServerImplementation.h"

#include "../../objects/player/Player.h"

#include "../../objects/building/BuildingObject.h"

#include "../../objects/installation/InstallationObject.h"

#include "../../objects/building/cell/CellObject.h"

#include "../../objects/tangible/deed/DeedObject.h"

#include "../../objects/building/cloningfacility/CloningFacility.h"

/*
 *	StructureManagerStub
 */

StructureManager::StructureManager(Zone* zone, ZoneProcessServerImplementation* processor) {
	_impl = new StructureManagerImplementation(zone, processor);
	_impl->_setStub(this);
}

StructureManager::StructureManager(DummyConstructorParameter* param) {
	_impl = NULL;
}

StructureManager::~StructureManager() {
}

void StructureManager::loadStructures() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((StructureManagerImplementation*) _impl)->loadStructures();
}

void StructureManager::unloadStructures() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		((StructureManagerImplementation*) _impl)->unloadStructures();
}

void StructureManager::saveStructures(bool refresh) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addBooleanParameter(refresh);

		method.executeWithVoidReturn();
	} else
		((StructureManagerImplementation*) _impl)->saveStructures(refresh);
}

BuildingObject* StructureManager::findBuildingType(const String& word, float targetX, float targetY) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addAsciiParameter(word);
		method.addFloatParameter(targetX);
		method.addFloatParameter(targetY);

		return (BuildingObject*) method.executeWithObjectReturn();
	} else
		return ((StructureManagerImplementation*) _impl)->findBuildingType(word, targetX, targetY);
}

CellObject* StructureManager::getCell(unsigned long long id) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addUnsignedLongParameter(id);

		return (CellObject*) method.executeWithObjectReturn();
	} else
		return ((StructureManagerImplementation*) _impl)->getCell(id);
}

BuildingObject* StructureManager::getBuilding(unsigned long long id) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addUnsignedLongParameter(id);

		return (BuildingObject*) method.executeWithObjectReturn();
	} else
		return ((StructureManagerImplementation*) _impl)->getBuilding(id);
}

CloningFacility* StructureManager::getCloningFacility(unsigned long long oid) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addUnsignedLongParameter(oid);

		return (CloningFacility*) method.executeWithObjectReturn();
	} else
		return ((StructureManagerImplementation*) _impl)->getCloningFacility(oid);
}

CloningFacility* StructureManager::getClosestCloningFacility(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addObjectParameter(player);

		return (CloningFacility*) method.executeWithObjectReturn();
	} else
		return ((StructureManagerImplementation*) _impl)->getClosestCloningFacility(player);
}

void StructureManager::spawnTempStructure(Player* player, DeedObject* deed, float x, float z, float y, float oX, float oZ, float oY, float oW) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addObjectParameter(player);
		method.addObjectParameter(deed);
		method.addFloatParameter(x);
		method.addFloatParameter(z);
		method.addFloatParameter(y);
		method.addFloatParameter(oX);
		method.addFloatParameter(oZ);
		method.addFloatParameter(oY);
		method.addFloatParameter(oW);

		method.executeWithVoidReturn();
	} else
		((StructureManagerImplementation*) _impl)->spawnTempStructure(player, deed, x, z, y, oX, oZ, oY, oW);
}

void StructureManager::spawnInstallation(Player* player, DeedObject* deed, float x, float z, float y, float oX, float oZ, float oY, float oW) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addObjectParameter(player);
		method.addObjectParameter(deed);
		method.addFloatParameter(x);
		method.addFloatParameter(z);
		method.addFloatParameter(y);
		method.addFloatParameter(oX);
		method.addFloatParameter(oZ);
		method.addFloatParameter(oY);
		method.addFloatParameter(oW);

		method.executeWithVoidReturn();
	} else
		((StructureManagerImplementation*) _impl)->spawnInstallation(player, deed, x, z, y, oX, oZ, oY, oW);
}

void StructureManager::spawnHarvester(Player* player, DeedObject* deed, float x, float z, float y, float oX, float oZ, float oY, float oW) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addObjectParameter(player);
		method.addObjectParameter(deed);
		method.addFloatParameter(x);
		method.addFloatParameter(z);
		method.addFloatParameter(y);
		method.addFloatParameter(oX);
		method.addFloatParameter(oZ);
		method.addFloatParameter(oY);
		method.addFloatParameter(oW);

		method.executeWithVoidReturn();
	} else
		((StructureManagerImplementation*) _impl)->spawnHarvester(player, deed, x, z, y, oX, oZ, oY, oW);
}

void StructureManager::spawnFactory(Player* player, DeedObject* deed, float x, float z, float y, float oX, float oZ, float oY, float oW) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addObjectParameter(player);
		method.addObjectParameter(deed);
		method.addFloatParameter(x);
		method.addFloatParameter(z);
		method.addFloatParameter(y);
		method.addFloatParameter(oX);
		method.addFloatParameter(oZ);
		method.addFloatParameter(oY);
		method.addFloatParameter(oW);

		method.executeWithVoidReturn();
	} else
		((StructureManagerImplementation*) _impl)->spawnFactory(player, deed, x, z, y, oX, oZ, oY, oW);
}

void StructureManager::spawnBuilding(Player* player, DeedObject* deed, float x, float z, float y, float oX, float oZ, float oY, float oW) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addObjectParameter(player);
		method.addObjectParameter(deed);
		method.addFloatParameter(x);
		method.addFloatParameter(z);
		method.addFloatParameter(y);
		method.addFloatParameter(oX);
		method.addFloatParameter(oZ);
		method.addFloatParameter(oY);
		method.addFloatParameter(oW);

		method.executeWithVoidReturn();
	} else
		((StructureManagerImplementation*) _impl)->spawnBuilding(player, deed, x, z, y, oX, oZ, oY, oW);
}

void StructureManager::deleteInstallation(InstallationObject* inso) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addObjectParameter(inso);

		method.executeWithVoidReturn();
	} else
		((StructureManagerImplementation*) _impl)->deleteInstallation(inso);
}

void StructureManager::error(const String& message) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addAsciiParameter(message);

		method.executeWithVoidReturn();
	} else
		((StructureManagerImplementation*) _impl)->error(message);
}

void StructureManager::info(const String& message) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addAsciiParameter(message);

		method.executeWithVoidReturn();
	} else
		((StructureManagerImplementation*) _impl)->info(message);
}

/*
 *	StructureManagerAdapter
 */

StructureManagerAdapter::StructureManagerAdapter(StructureManagerImplementation* obj) : DistributedObjectAdapter((DistributedObjectServant*) obj) {
}

Packet* StructureManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		loadStructures();
		break;
	case 7:
		unloadStructures();
		break;
	case 8:
		saveStructures(inv->getBooleanParameter());
		break;
	case 9:
		resp->insertLong(findBuildingType(inv->getAsciiParameter(_param0_findBuildingType__String_float_float_), inv->getFloatParameter(), inv->getFloatParameter())->_getObjectID());
		break;
	case 10:
		resp->insertLong(getCell(inv->getUnsignedLongParameter())->_getObjectID());
		break;
	case 11:
		resp->insertLong(getBuilding(inv->getUnsignedLongParameter())->_getObjectID());
		break;
	case 12:
		resp->insertLong(getCloningFacility(inv->getUnsignedLongParameter())->_getObjectID());
		break;
	case 13:
		resp->insertLong(getClosestCloningFacility((Player*) inv->getObjectParameter())->_getObjectID());
		break;
	case 14:
		spawnTempStructure((Player*) inv->getObjectParameter(), (DeedObject*) inv->getObjectParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter());
		break;
	case 15:
		spawnInstallation((Player*) inv->getObjectParameter(), (DeedObject*) inv->getObjectParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter());
		break;
	case 16:
		spawnHarvester((Player*) inv->getObjectParameter(), (DeedObject*) inv->getObjectParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter());
		break;
	case 17:
		spawnFactory((Player*) inv->getObjectParameter(), (DeedObject*) inv->getObjectParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter());
		break;
	case 18:
		spawnBuilding((Player*) inv->getObjectParameter(), (DeedObject*) inv->getObjectParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter());
		break;
	case 19:
		deleteInstallation((InstallationObject*) inv->getObjectParameter());
		break;
	case 20:
		error(inv->getAsciiParameter(_param0_error__String_));
		break;
	case 21:
		info(inv->getAsciiParameter(_param0_info__String_));
		break;
	default:
		return NULL;
	}

	return resp;
}

void StructureManagerAdapter::loadStructures() {
	return ((StructureManagerImplementation*) impl)->loadStructures();
}

void StructureManagerAdapter::unloadStructures() {
	return ((StructureManagerImplementation*) impl)->unloadStructures();
}

void StructureManagerAdapter::saveStructures(bool refresh) {
	return ((StructureManagerImplementation*) impl)->saveStructures(refresh);
}

BuildingObject* StructureManagerAdapter::findBuildingType(const String& word, float targetX, float targetY) {
	return ((StructureManagerImplementation*) impl)->findBuildingType(word, targetX, targetY);
}

CellObject* StructureManagerAdapter::getCell(unsigned long long id) {
	return ((StructureManagerImplementation*) impl)->getCell(id);
}

BuildingObject* StructureManagerAdapter::getBuilding(unsigned long long id) {
	return ((StructureManagerImplementation*) impl)->getBuilding(id);
}

CloningFacility* StructureManagerAdapter::getCloningFacility(unsigned long long oid) {
	return ((StructureManagerImplementation*) impl)->getCloningFacility(oid);
}

CloningFacility* StructureManagerAdapter::getClosestCloningFacility(Player* player) {
	return ((StructureManagerImplementation*) impl)->getClosestCloningFacility(player);
}

void StructureManagerAdapter::spawnTempStructure(Player* player, DeedObject* deed, float x, float z, float y, float oX, float oZ, float oY, float oW) {
	return ((StructureManagerImplementation*) impl)->spawnTempStructure(player, deed, x, z, y, oX, oZ, oY, oW);
}

void StructureManagerAdapter::spawnInstallation(Player* player, DeedObject* deed, float x, float z, float y, float oX, float oZ, float oY, float oW) {
	return ((StructureManagerImplementation*) impl)->spawnInstallation(player, deed, x, z, y, oX, oZ, oY, oW);
}

void StructureManagerAdapter::spawnHarvester(Player* player, DeedObject* deed, float x, float z, float y, float oX, float oZ, float oY, float oW) {
	return ((StructureManagerImplementation*) impl)->spawnHarvester(player, deed, x, z, y, oX, oZ, oY, oW);
}

void StructureManagerAdapter::spawnFactory(Player* player, DeedObject* deed, float x, float z, float y, float oX, float oZ, float oY, float oW) {
	return ((StructureManagerImplementation*) impl)->spawnFactory(player, deed, x, z, y, oX, oZ, oY, oW);
}

void StructureManagerAdapter::spawnBuilding(Player* player, DeedObject* deed, float x, float z, float y, float oX, float oZ, float oY, float oW) {
	return ((StructureManagerImplementation*) impl)->spawnBuilding(player, deed, x, z, y, oX, oZ, oY, oW);
}

void StructureManagerAdapter::deleteInstallation(InstallationObject* inso) {
	return ((StructureManagerImplementation*) impl)->deleteInstallation(inso);
}

void StructureManagerAdapter::error(const String& message) {
	return ((StructureManagerImplementation*) impl)->error(message);
}

void StructureManagerAdapter::info(const String& message) {
	return ((StructureManagerImplementation*) impl)->info(message);
}

/*
 *	StructureManagerHelper
 */

StructureManagerHelper* StructureManagerHelper::staticInitializer = StructureManagerHelper::instance();

StructureManagerHelper::StructureManagerHelper() {
	className = "StructureManager";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void StructureManagerHelper::finalizeHelper() {
	StructureManagerHelper::finalize();
}

DistributedObject* StructureManagerHelper::instantiateObject() {
	return new StructureManager(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* StructureManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new StructureManagerAdapter((StructureManagerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	StructureManagerServant
 */

StructureManagerServant::StructureManagerServant() {
	_classHelper = StructureManagerHelper::instance();
}

StructureManagerServant::~StructureManagerServant() {
}

void StructureManagerServant::_setStub(DistributedObjectStub* stub) {
	_this = (StructureManager*) stub;
}

DistributedObjectStub* StructureManagerServant::_getStub() {
	return _this;
}

