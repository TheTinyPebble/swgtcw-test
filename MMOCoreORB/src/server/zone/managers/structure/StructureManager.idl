
import "server/zone/Zone";
import "server/zone/ZoneProcessServerImplementation";

import "../../objects/player/Player";

import "../../objects/scene/SceneObject";
import "../../objects/structure/building/BuildingObject";
import "../../objects/structure/installation/InstallationObject";
import "../../objects/structure/building/cell/CellObject";
import "../../objects/tangible/deed/DeedObject";
import "../../objects/structure/building/cloningfacility/CloningFacility";

interface StructureManager {
	StructureManager(Zone zone, ZoneProcessServerImplementation processor) {
		super(zone, processor);
	}	
	
	//Cleanup mode.
	void serialize();
	void deserialize();
	
	void beginConstruction(Player player, DeedObject deed, float x, float z, unsigned char orient = 0);
	void endConstruction(Player player, DeedObject deed, float x, float z, unsigned char orient = 0);
	void createInstallation(Player player, InstallationObject installation, boolean staticobject = false);
	void createBuilding(Player player, BuildingObject building, boolean staticobject = false);
	void deleteStructure(SceneObject structure);


	void loadStructures();
	void unloadStructures();
	void saveStructures(boolean reschedule = false);

	BuildingObject findBuildingType(const String word, float targetX, float targetY);
	
	CellObject getCell(unsigned long id);
	BuildingObject getBuilding(unsigned long id);
	
	CloningFacility getCloningFacility(unsigned long oid);
	CloningFacility getClosestCloningFacility(Player player);

	void spawnBuilding(Player player, DeedObject deed, float x, float z, float y, float oX, float oZ, float oY, float oW);

	void deleteInstallation(InstallationObject inso);
	
	void error(const String message);
	void info(const String message);
}
