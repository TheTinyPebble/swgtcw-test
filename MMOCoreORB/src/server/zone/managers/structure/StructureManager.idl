/*
Copyright (C) 2007 <SWGEmu>
 
This File is part of Core3.
 
This program is free software; you can redistribute 
it and/or modify it under the terms of the GNU Lesser 
General Public License as published by the Free Software
Foundation; either version 2 of the License, 
or (at your option) any later version.
 
This program is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
See the GNU Lesser General Public License for
more details.
 
You should have received a copy of the GNU Lesser General 
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 
Linking Engine3 statically or dynamically with other modules 
is making a combined work based on Engine3. 
Thus, the terms and conditions of the GNU Lesser General Public License 
cover the whole combination.
 
In addition, as a special exception, the copyright holders of Engine3 
give you permission to combine Engine3 program with free software 
programs or libraries that are released under the GNU LGPL and with 
code included in the standard release of Core3 under the GNU LGPL 
license (or modified versions of such code, with unchanged license). 
You may copy and distribute such a system following the terms of the 
GNU LGPL for Engine3 and the licenses of the other code concerned, 
provided that you include the source code of that other code when 
and as the GNU LGPL requires distribution of source code.
 
Note that people who make modified versions of Engine3 are not obligated 
to grant this special exception for their modified versions; 
it is their choice whether to do so. The GNU Lesser General Public License 
gives permission to release a modified version without this exception; 
this exception also makes it possible to release a modified version 
which carries forward this exception.
*/

package server.zone.managers.structure;

import engine.core.ManagedObject;
import engine.util.Quaternion;
import server.zone.Zone;
import server.zone.ZoneProcessServerImplementation;
import engine.log.Logger;
import server.zone.objects.building.BuildingObject;
import server.zone.objects.scene.SceneObject;
import server.zone.objects.player.PlayerCreature;
import server.zone.objects.structure.StructureObject;
import system.thread.Thread;
import server.zone.managers.objectcontroller.ObjectController;
import system.util.SortedVector;
include server.zone.managers.templates.TemplateManager;
include server.zone.templates.tangible.SharedStructureObjectTemplate;
include server.zone.templates.tangible.SharedBuildingObjectTemplate;
include server.zone.templates.tangible.SharedInstallationObjectTemplate;

class StructureManager extends ManagedObject implements Logger {
	private Zone zone;
	
	private transient ZoneProcessServerImplementation server;
	
	private transient TemplateManager templateManager;
	
	@dereferenced
	static protected transient SortedVector<string> listOfStaticBuildings;
	
	@dereferenced
	static protected transient SortedVector<string> createdFiles;
	
	public native StructureManager(Zone zone, ZoneProcessServerImplementation processor);
	
	//PRIVATE METHODS
	
	private native void createNewLuas();
	private native void createLuaIncludes();
	private native void loadStaticBuildings();
	private native void loadStaticBanks();
	private native void loadStaticBazaars();
	private native void loadStaticMissionTerminals();
	private native void loadStaticCraftingStations();
	private native void loadPlayerStructures();
	private native void loadStaticGarages();
	private native BuildingObject loadStaticBuilding(unsigned long oid);
	private native void loadStaticCells(BuildingObject building);
	
	//PUBLIC METHODS
	
	public void loadStructures() {
		Logger.info("loading structures...", true);
		
		listOfStaticBuildings.setNoDuplicateInsertPlan();
		
		loadStaticBuildings();
		loadPlayerStructures();
		loadStaticBanks();
		loadStaticBazaars();
		loadStaticMissionTerminals();
		loadStaticCraftingStations();
		loadStaticGarages();
	}
	
	/**
	 * A player places a structure from a deed.
	 * @pre player is locked, the deed is unlocked
	 * @post player is locked, the deed is unlocked
	 * @param player The player who is attempting to place the structure.
	 * @param deedID The object id of the deed that was used to place the structure.
	 * @param x The x coordinate to attempt to place the structure at.
	 * @param y The y coordinate to attempt to place the structure at.
	 * @param angle The angle to rotate the building by when placing it.
	 */
	public native int placeStructureFromDeed(PlayerCreature player, unsigned long deedID, float x, float y, int angle);
	/**
	 * Places a structure at the given coordinates. Can be placed with or without a deed. Specify deed id = 0 if no deed was used.
	 * This method will pass it to the private functions placeBuilding or placeInstallation depending on the type of structure dictated by the template.
	 * @pre: player locked
	 * @post: player locked
	 * @param player The player placing the structure
	 * @param structureTemplate the structure template
	 * @param deedID The object id of the deed that was used. Set to 0 if no deed was used.
	 * @param x The x world coordinate.
	 * @param y The y world coordinate.
	 * @param direction The quaternion representation of the direction.
	 */
	@local
	public native int placeStructure(PlayerCreature player, SharedStructureObjectTemplate structureTemplate, unsigned long deedID, float x, float y, @dereferenced final Quaternion direction);
	//public native int placeStructure(PlayerCreature player, SharedStructureObjectTemplate structureTemplate, SceneObject structure, unsigned long deedID, float x, float y, @dereferenced final Quaternion direction);

	//@local
	//public native int placeBuilding(PlayerCreature player, SharedBuildingObjectTemplate buildingTemplate, SceneObject structure, unsigned long deedID, float x, float y, @dereferenced final Quaternion direction);
	
	//@local
	//public native int placeInstallation(PlayerCreature player, SharedInstallationObjectTemplate installationTemplate, SceneObject structure, unsigned long deedID, float x, float y, @dereferenced final Quaternion direction);
	
	
	@local
	//public native int constructStructure(PlayerCreature player, SharedStructureObjectTemplate structureTemplate, SceneObject structure, unsigned long deedID, float x, float y, @dereferenced final Quaternion direction);
	public native int constructStructure(PlayerCreature player, SharedStructureObjectTemplate structureTemplate, unsigned long deedID, float x, float y, @dereferenced final Quaternion direction);
	
	
	/**
	 * Destroys the structure after the confirmation of the player.
	 * All items still in the structure will be deleted from the database. If the maintenance requirements are met, it is to be redeeded.
	 * pre: player locked, structure locked
	 * post: player locked, structure deleted*
	 * @param player The player who confimed structure destruction.
	 * @param structure The structure that is being destroyed.
	 */
	public native int destroyStructure(PlayerCreature player, StructureObject structureObject);
	
	/**
	 * Redeeds the structure, returning it to the player in deed form with any surplus maintenance and power attached.
	 * This should occur after a destroy confirm, but before the structure has been completely destroyed.
	 * pre: player locked, building locked
	 * post: player locked, building locked
	 * @param player The player who is redeeding the structure.
	 * @param building The building being redeeded.
	 * @param destroy Should the structure be destroyed after the deed is retrieved?
	 */
	public native int redeedStructure(PlayerCreature player, StructureObject structureObject, boolean destroy = true);
	
	/**
	 * Sends a SUI List box containing information regarding the redeed status of this structure, and asking the player
	 * if they wish to continue with the destruction process.
	 * pre: player locked, building locked
	 * post: player locked, building locked
	 * @param player The player who is destroying the structure.
	 * @param building the structure being destroyed.
	 */
	public native int sendDestroyConfirmTo(PlayerCreature player, StructureObject structureObject);
	
	/**
	 * Sends a SUI Input box requesting a destroy code be entered for final confirmation.
	 * pre: player locked, building locked
	 * post: player locked, building locked
	 */
	public native int sendDestroyCodeTo(PlayerCreature player, StructureObject structureObject);
	
	public native int sendStructureStatusTo(PlayerCreature player, StructureObject structureObject);
	
	public native int handlePayMaintenance(PlayerCreature player, StructureObject structureObject);
	
	public native int handleWithdrawMaintenance(PlayerCreature player, StructureObject structureObject);
	
	public native int handleDeclareResidency(PlayerCreature player, StructureObject structureObject);
	
	public native int handlePrivacyChange(PlayerCreature player, StructureObject structureObject);
	
	public native int sendStructureNamePromptTo(PlayerCreature player, StructureObject structureObject);
	
	
	//TEMPORARY
	public native string getTimeString(unsigned int timestamp);
}

