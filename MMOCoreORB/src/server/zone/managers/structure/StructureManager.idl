
import "server/zone/Zone";
import "server/zone/ZoneProcessServerImplementation";

import "../../objects/player/Player";

import "../../objects/building/BuildingObject";
import "../../objects/installation/InstallationObject";
import "../../objects/building/cell/CellObject";
import "../../objects/tangible/deed/DeedObject";
import "../../objects/building/cloningfacility/CloningFacility";

interface StructureManager {
	StructureManager(Zone zone, ZoneProcessServerImplementation processor) {
		super(zone, processor);
	}	

	void loadStructures();
	void unloadStructures();
	void saveStructures(boolean refresh);

	BuildingObject findBuildingType(const String word, float targetX, float targetY);
	
	CellObject getCell(unsigned long id);
	BuildingObject getBuilding(unsigned long id);
	
	CloningFacility getCloningFacility(unsigned long oid);
	CloningFacility getClosestCloningFacility(Player player);

	void spawnTempStructure(Player player, DeedObject deed, float x, float z, float y, float oX, float oZ, float oY, float oW);
	void spawnInstallation(Player player, DeedObject deed, float x, float z, float y, float oX, float oZ, float oY, float oW);
	void spawnHarvester(Player player, DeedObject deed, float x, float z, float y, float oX, float oZ, float oY, float oW);	
	void spawnFactory(Player player, DeedObject deed, float x, float z, float y, float oX, float oZ, float oY, float oW);	
	void spawnBuilding(Player player, DeedObject deed, float x, float z, float y, float oX, float oZ, float oY, float oW);

	void deleteInstallation(InstallationObject inso);
	
	void error(const String message);
	void info(const String message);
}
