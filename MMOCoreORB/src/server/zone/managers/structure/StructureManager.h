/*
 *	server/zone/managers/structure/StructureManager.h generated by engine3 IDL compiler 0.60
 */

#ifndef STRUCTUREMANAGER_H_
#define STRUCTUREMANAGER_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

namespace server {
namespace zone {

class Zone;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {

class ZoneProcessServerImplementation;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {
namespace managers {
namespace object {

class ObjectManager;

} // namespace object
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::object;

namespace server {
namespace zone {
namespace objects {
namespace building {

class BuildingObject;

} // namespace building
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::building;

namespace server {
namespace zone {
namespace objects {
namespace cell {

class CellObject;

} // namespace cell
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::cell;

#include "engine/core/ManagedObject.h"

#include "engine/log/Logger.h"

#include "system/thread/Thread.h"

namespace server {
namespace zone {
namespace managers {
namespace structure {

class StructureManager : public ManagedObject {
public:
	StructureManager(Zone* zone, ZoneProcessServerImplementation* processor);

	void loadStructures();

	void loadStaticBuildings();

	BuildingObject* loadStaticBuilding(unsigned long long oid, int planet);

protected:
	StructureManager(DummyConstructorParameter* param);

	virtual ~StructureManager();

	friend class StructureManagerHelper;
};

} // namespace structure
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::structure;

namespace server {
namespace zone {
namespace managers {
namespace structure {

class StructureManagerImplementation : public ManagedObjectImplementation, public Logger {
	ManagedReference<Zone* > zone;

	ZoneProcessServerImplementation* server;

public:
	StructureManagerImplementation(Zone* zone, ZoneProcessServerImplementation* processor);

	void loadStructures();

	void loadStaticBuildings();

	BuildingObject* loadStaticBuilding(unsigned long long oid, int planet);

	StructureManager* _this;

	operator const StructureManager*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~StructureManagerImplementation();

	void _setStub(DistributedObjectStub* stub);

	void _serializationHelperMethod();

	friend class StructureManager;
};

class StructureManagerAdapter : public ManagedObjectAdapter {
public:
	StructureManagerAdapter(StructureManagerImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void loadStructures();

	void loadStaticBuildings();

	BuildingObject* loadStaticBuilding(unsigned long long oid, int planet);

};

class StructureManagerHelper : public DistributedObjectClassHelper, public Singleton<StructureManagerHelper> {
	static StructureManagerHelper* staticInitializer;

public:
	StructureManagerHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<StructureManagerHelper>;
};

} // namespace structure
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::structure;

#endif /*STRUCTUREMANAGER_H_*/
