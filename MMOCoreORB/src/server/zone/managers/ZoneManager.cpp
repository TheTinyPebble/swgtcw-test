/*
 *	server/zone/managers/ZoneManager.cpp generated by engine3 IDL compiler 0.60
 */

#include "ZoneManager.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/ZoneProcessServer.h"

#include "server/zone/managers/object/ObjectManager.h"

/*
 *	ZoneManagerStub
 */

enum {RPC_SETZONEPROCESSOR__ZONEPROCESSSERVER_ = 6};

ZoneManager::ZoneManager(const String& name) : ManagedService(DummyConstructorParameter::instance()) {
	ZoneManagerImplementation* _implementation = new ZoneManagerImplementation(name);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("ZoneManager");
}

ZoneManager::ZoneManager(DummyConstructorParameter* param) : ManagedService(param) {
	_setClassName("ZoneManager");
}

ZoneManager::~ZoneManager() {
}



void ZoneManager::setZoneProcessor(ZoneProcessServer* server) {
	ZoneManagerImplementation* _implementation = static_cast<ZoneManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETZONEPROCESSOR__ZONEPROCESSSERVER_);
		method.addObjectParameter(server);

		method.executeWithVoidReturn();
	} else
		_implementation->setZoneProcessor(server);
}

DistributedObjectServant* ZoneManager::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

void ZoneManager::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	ZoneManagerImplementation
 */

ZoneManagerImplementation::ZoneManagerImplementation(DummyConstructorParameter* param) : ManagedServiceImplementation(param) {
	_initializeImplementation();
}


ZoneManagerImplementation::~ZoneManagerImplementation() {
}


void ZoneManagerImplementation::finalize() {
}

void ZoneManagerImplementation::_initializeImplementation() {
	_setClassHelper(ZoneManagerHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void ZoneManagerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<ZoneManager*>(stub);
	ManagedServiceImplementation::_setStub(stub);
}

DistributedObjectStub* ZoneManagerImplementation::_getStub() {
	return _this.get();
}

ZoneManagerImplementation::operator const ZoneManager*() {
	return _this.get();
}

void ZoneManagerImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void ZoneManagerImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void ZoneManagerImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void ZoneManagerImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void ZoneManagerImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void ZoneManagerImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void ZoneManagerImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void ZoneManagerImplementation::_serializationHelperMethod() {
	ManagedServiceImplementation::_serializationHelperMethod();

	_setClassName("ZoneManager");

}

void ZoneManagerImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(ZoneManagerImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ZoneManagerImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ManagedServiceImplementation::readObjectMember(stream, _name))
		return true;


	return false;
}

void ZoneManagerImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ZoneManagerImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ZoneManagerImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedServiceImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;

	return _count + 0;
}

ZoneManagerImplementation::ZoneManagerImplementation(const String& name) {
	_initializeImplementation();
	// server/zone/managers/ZoneManager.idl():  		Logger.setLoggingName(name);
	Logger::setLoggingName(name);
	// server/zone/managers/ZoneManager.idl():  		Logger.setLogging(true);
	Logger::setLogging(true);
	// server/zone/managers/ZoneManager.idl():  		Logger.setGlobalLogging(true);
	Logger::setGlobalLogging(true);
	// server/zone/managers/ZoneManager.idl():  		zoneServer = null;
	zoneServer = NULL;
	// server/zone/managers/ZoneManager.idl():  		zoneProcessor = null;
	zoneProcessor = NULL;
	// server/zone/managers/ZoneManager.idl():  		objectManager = null;
	objectManager = NULL;
}

void ZoneManagerImplementation::setZoneProcessor(ZoneProcessServer* server) {
	// server/zone/managers/ZoneManager.idl():  		zoneServer = server.getZoneServer();
	zoneServer = server->getZoneServer();
	// server/zone/managers/ZoneManager.idl():  		zoneProcessor = server;
	zoneProcessor = server;
	// server/zone/managers/ZoneManager.idl():  		objectManager = zoneServer.getObjectManager();
	objectManager = zoneServer->getObjectManager();
}

/*
 *	ZoneManagerAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


ZoneManagerAdapter::ZoneManagerAdapter(ZoneManager* obj) : ManagedServiceAdapter(obj) {
}

void ZoneManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_SETZONEPROCESSOR__ZONEPROCESSSERVER_:
		{
			setZoneProcessor(static_cast<ZoneProcessServer*>(inv->getObjectParameter()));
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void ZoneManagerAdapter::setZoneProcessor(ZoneProcessServer* server) {
	(static_cast<ZoneManager*>(stub))->setZoneProcessor(server);
}

/*
 *	ZoneManagerHelper
 */

ZoneManagerHelper* ZoneManagerHelper::staticInitializer = ZoneManagerHelper::instance();

ZoneManagerHelper::ZoneManagerHelper() {
	className = "ZoneManager";

	Core::getObjectBroker()->registerClass(className, this);
}

void ZoneManagerHelper::finalizeHelper() {
	ZoneManagerHelper::finalize();
}

DistributedObject* ZoneManagerHelper::instantiateObject() {
	return new ZoneManager(DummyConstructorParameter::instance());
}

DistributedObjectServant* ZoneManagerHelper::instantiateServant() {
	return new ZoneManagerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ZoneManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ZoneManagerAdapter(static_cast<ZoneManager*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

