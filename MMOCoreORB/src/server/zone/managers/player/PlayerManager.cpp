/*
 *	server/zone/managers/player/PlayerManager.cpp generated by engine3 IDL compiler 0.60
 */

#include "PlayerManager.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

#include "server/zone/objects/group/GroupObject.h"

#include "server/zone/ZoneProcessServer.h"

#include "server/zone/managers/object/ObjectManager.h"

#include "server/zone/packets/MessageCallback.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/objects/tangible/wearables/ArmorObject.h"

#include "server/zone/objects/tangible/weapon/WeaponObject.h"

#include "server/zone/objects/player/PlayerObject.h"

#include "server/zone/objects/structure/StructureObject.h"

#include "server/zone/objects/creature/AiAgent.h"

#include "server/zone/objects/tangible/threat/ThreatMap.h"

/*
 *	PlayerManagerStub
 */

enum {RPC_LOADNAMEMAP__ = 6,RPC_GETHIGHESTBADGEINDEX__,RPC_FINALIZE__,RPC_KICKUSER__STRING_STRING_,RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_,RPC_NOTIFYDESTRUCTION__TANGIBLEOBJECT_TANGIBLEOBJECT_INT_,RPC_KILLPLAYER__TANGIBLEOBJECT_CREATUREOBJECT_INT_,RPC_CALCULATEINCAPACITATIONTIMER__CREATUREOBJECT_INT_,RPC_CHECKENCUMBRANCIES__CREATUREOBJECT_ARMOROBJECT_,RPC_APPLYENCUMBRANCIES__CREATUREOBJECT_ARMOROBJECT_,RPC_REMOVEENCUMBRANCIES__CREATUREOBJECT_ARMOROBJECT_,RPC_AWARDBADGE__PLAYEROBJECT_INT_,RPC_SETEXPERIENCEMULTIPLIER__FLOAT_,RPC_AWARDEXPERIENCE__CREATUREOBJECT_STRING_INT_BOOL_FLOAT_,RPC_HANDLEABORTTRADEMESSAGE__CREATUREOBJECT_,RPC_HANDLEADDITEMTOTRADEWINDOW__CREATUREOBJECT_LONG_,RPC_HANDLEGIVEMONEYMESSAGE__CREATUREOBJECT_INT_,RPC_HANDLEACCEPTTRANSACTIONMESSAGE__CREATUREOBJECT_,RPC_HANDLEUNACCEPTTRANSACTIONMESSAGE__CREATUREOBJECT_,RPC_HANDLEVERIFYTRADEMESSAGE__CREATUREOBJECT_,RPC_CHECKTRADEITEMS__CREATUREOBJECT_CREATUREOBJECT_,RPC_GETINRANGESTRUCTUREWITHADMINRIGHTS__CREATUREOBJECT_LONG_,RPC_GETINRANGEOWNEDSTRUCTURE__CREATUREOBJECT_FLOAT_,RPC_SENDBATTLEFATIGUEMESSAGE__CREATUREOBJECT_CREATUREOBJECT_,RPC_STOPWATCH__CREATUREOBJECT_LONG_BOOL_BOOL_BOOL_BOOL_,RPC_STOPLISTEN__CREATUREOBJECT_LONG_BOOL_BOOL_BOOL_BOOL_,RPC_STARTWATCH__CREATUREOBJECT_LONG_,RPC_STARTLISTEN__CREATUREOBJECT_LONG_,RPC_LOOTALL__CREATUREOBJECT_AIAGENT_,RPC_HEALENHANCE__CREATUREOBJECT_CREATUREOBJECT_BYTE_INT_FLOAT_,RPC_SQUADLEADERCHECK__CREATUREOBJECT_GROUPOBJECT_,RPC_CALCULATEPLAYERLEVEL__CREATUREOBJECT_,RPC_AWARDSQUADLEADEREXPERIENCE__GROUPOBJECT_INT_TANGIBLEOBJECT_,RPC_SENDLOGINMESSAGE__CREATUREOBJECT_,RPC_RESENDLOGINMESSAGETOALL__,RPC_SENDACTIVATECLONEREQUEST__CREATUREOBJECT_INT_,RPC_SENDPLAYERTOCLONER__CREATUREOBJECT_LONG_INT_,RPC_CHECKEXISTENTNAMEINDATABASE__STRING_,RPC_CREATEHAIROBJECT__STRING_STRING_,RPC_CREATEALLPLAYEROBJECTS__CREATUREOBJECT_,RPC_CREATEDEFAULTPLAYERITEMS__CREATUREOBJECT_STRING_STRING_,RPC_CREATETUTORIALBUILDING__CREATUREOBJECT_,RPC_CREATESKIPPEDTUTORIALBUILDING__CREATUREOBJECT_,RPC_CHECKSPEEDHACKSECONDTEST__CREATUREOBJECT_FLOAT_FLOAT_FLOAT_INT_SCENEOBJECT_,RPC_EXISTSNAME__STRING_,RPC_GETOBJECTID__STRING_,RPC_GETPLAYER__STRING_,RPC_UPDATEADMINLEVEL__CREATUREOBJECT_STRING_INT_,RPC_GENERATEHOLOGRINDSKILLS__CREATUREOBJECT_,RPC_ADDPLAYER__CREATUREOBJECT_,RPC_GETBADGEKEY__INT_};

PlayerManager::PlayerManager(ZoneServer* zoneServer, ZoneProcessServer* impl) : Observer(DummyConstructorParameter::instance()) {
	PlayerManagerImplementation* _implementation = new PlayerManagerImplementation(zoneServer, impl);
	_impl = _implementation;
	_impl->_setStub(this);
}

PlayerManager::PlayerManager(DummyConstructorParameter* param) : Observer(param) {
}

PlayerManager::~PlayerManager() {
}



void PlayerManager::loadNameMap() {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_LOADNAMEMAP__);

		method.executeWithVoidReturn();
	} else
		_implementation->loadNameMap();
}

int PlayerManager::getHighestBadgeIndex() {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETHIGHESTBADGEINDEX__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getHighestBadgeIndex();
}

void PlayerManager::sendStartingLocationsTo(CreatureObject* player) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->sendStartingLocationsTo(player);
}

StartingLocation* PlayerManager::getStartingLocation(const String& city) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getStartingLocation(city);
}

bool PlayerManager::kickUser(const String& name, const String& admin) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_KICKUSER__STRING_STRING_);
		method.addAsciiParameter(name);
		method.addAsciiParameter(admin);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->kickUser(name, admin);
}

bool PlayerManager::createPlayer(MessageCallback* callback) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->createPlayer(callback);
}

bool PlayerManager::checkPlayerName(MessageCallback* callback) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->checkPlayerName(callback);
}

int PlayerManager::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(observable);
		method.addObjectParameter(arg1);
		method.addSignedLongParameter(arg2);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyObserverEvent(eventType, observable, arg1, arg2);
}

int PlayerManager::notifyDestruction(TangibleObject* destructor, TangibleObject* destructedObject, int condition) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYDESTRUCTION__TANGIBLEOBJECT_TANGIBLEOBJECT_INT_);
		method.addObjectParameter(destructor);
		method.addObjectParameter(destructedObject);
		method.addSignedIntParameter(condition);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyDestruction(destructor, destructedObject, condition);
}

void PlayerManager::killPlayer(TangibleObject* attacker, CreatureObject* player, int typeofdeath) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_KILLPLAYER__TANGIBLEOBJECT_CREATUREOBJECT_INT_);
		method.addObjectParameter(attacker);
		method.addObjectParameter(player);
		method.addSignedIntParameter(typeofdeath);

		method.executeWithVoidReturn();
	} else
		_implementation->killPlayer(attacker, player, typeofdeath);
}

byte PlayerManager::calculateIncapacitationTimer(CreatureObject* player, int condition) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CALCULATEINCAPACITATIONTIMER__CREATUREOBJECT_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(condition);

		return method.executeWithByteReturn();
	} else
		return _implementation->calculateIncapacitationTimer(player, condition);
}

bool PlayerManager::checkEncumbrancies(CreatureObject* player, ArmorObject* armor) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CHECKENCUMBRANCIES__CREATUREOBJECT_ARMOROBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(armor);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->checkEncumbrancies(player, armor);
}

void PlayerManager::applyEncumbrancies(CreatureObject* player, ArmorObject* armor) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_APPLYENCUMBRANCIES__CREATUREOBJECT_ARMOROBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(armor);

		method.executeWithVoidReturn();
	} else
		_implementation->applyEncumbrancies(player, armor);
}

void PlayerManager::removeEncumbrancies(CreatureObject* player, ArmorObject* armor) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEENCUMBRANCIES__CREATUREOBJECT_ARMOROBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(armor);

		method.executeWithVoidReturn();
	} else
		_implementation->removeEncumbrancies(player, armor);
}

void PlayerManager::awardBadge(PlayerObject* ghost, unsigned int badge) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_AWARDBADGE__PLAYEROBJECT_INT_);
		method.addObjectParameter(ghost);
		method.addUnsignedIntParameter(badge);

		method.executeWithVoidReturn();
	} else
		_implementation->awardBadge(ghost, badge);
}

void PlayerManager::setExperienceMultiplier(float globalMultiplier) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETEXPERIENCEMULTIPLIER__FLOAT_);
		method.addFloatParameter(globalMultiplier);

		method.executeWithVoidReturn();
	} else
		_implementation->setExperienceMultiplier(globalMultiplier);
}

void PlayerManager::awardExperience(CreatureObject* player, const String& xpType, int amount, bool sendSystemMessage, float localMultiplier) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_AWARDEXPERIENCE__CREATUREOBJECT_STRING_INT_BOOL_FLOAT_);
		method.addObjectParameter(player);
		method.addAsciiParameter(xpType);
		method.addSignedIntParameter(amount);
		method.addBooleanParameter(sendSystemMessage);
		method.addFloatParameter(localMultiplier);

		method.executeWithVoidReturn();
	} else
		_implementation->awardExperience(player, xpType, amount, sendSystemMessage, localMultiplier);
}

SortedVector<ManagedReference<SceneObject* > > PlayerManager::getInsurableItems(CreatureObject* player, bool onlyInsurable) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getInsurableItems(player, onlyInsurable);
}

void PlayerManager::handleAbortTradeMessage(CreatureObject* player) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEABORTTRADEMESSAGE__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->handleAbortTradeMessage(player);
}

void PlayerManager::handleAddItemToTradeWindow(CreatureObject* player, unsigned long long itemID) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEADDITEMTOTRADEWINDOW__CREATUREOBJECT_LONG_);
		method.addObjectParameter(player);
		method.addUnsignedLongParameter(itemID);

		method.executeWithVoidReturn();
	} else
		_implementation->handleAddItemToTradeWindow(player, itemID);
}

void PlayerManager::handleGiveMoneyMessage(CreatureObject* player, unsigned int value) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEGIVEMONEYMESSAGE__CREATUREOBJECT_INT_);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->handleGiveMoneyMessage(player, value);
}

void PlayerManager::handleAcceptTransactionMessage(CreatureObject* player) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEACCEPTTRANSACTIONMESSAGE__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->handleAcceptTransactionMessage(player);
}

void PlayerManager::handleUnAcceptTransactionMessage(CreatureObject* player) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEUNACCEPTTRANSACTIONMESSAGE__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->handleUnAcceptTransactionMessage(player);
}

void PlayerManager::handleVerifyTradeMessage(CreatureObject* player) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEVERIFYTRADEMESSAGE__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->handleVerifyTradeMessage(player);
}

bool PlayerManager::checkTradeItems(CreatureObject* player, CreatureObject* receiver) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CHECKTRADEITEMS__CREATUREOBJECT_CREATUREOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(receiver);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->checkTradeItems(player, receiver);
}

SceneObject* PlayerManager::getInRangeStructureWithAdminRights(CreatureObject* creature, unsigned long long targetID) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETINRANGESTRUCTUREWITHADMINRIGHTS__CREATUREOBJECT_LONG_);
		method.addObjectParameter(creature);
		method.addUnsignedLongParameter(targetID);

		return static_cast<SceneObject*>(method.executeWithObjectReturn());
	} else
		return _implementation->getInRangeStructureWithAdminRights(creature, targetID);
}

StructureObject* PlayerManager::getInRangeOwnedStructure(CreatureObject* creature, float range) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETINRANGEOWNEDSTRUCTURE__CREATUREOBJECT_FLOAT_);
		method.addObjectParameter(creature);
		method.addFloatParameter(range);

		return static_cast<StructureObject*>(method.executeWithObjectReturn());
	} else
		return _implementation->getInRangeOwnedStructure(creature, range);
}

void PlayerManager::sendBattleFatigueMessage(CreatureObject* player, CreatureObject* target) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDBATTLEFATIGUEMESSAGE__CREATUREOBJECT_CREATUREOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(target);

		method.executeWithVoidReturn();
	} else
		_implementation->sendBattleFatigueMessage(player, target);
}

void PlayerManager::stopWatch(CreatureObject* creature, unsigned long long entid, bool doSendPackets, bool forced, bool doLock, bool outOfRange) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_STOPWATCH__CREATUREOBJECT_LONG_BOOL_BOOL_BOOL_BOOL_);
		method.addObjectParameter(creature);
		method.addUnsignedLongParameter(entid);
		method.addBooleanParameter(doSendPackets);
		method.addBooleanParameter(forced);
		method.addBooleanParameter(doLock);
		method.addBooleanParameter(outOfRange);

		method.executeWithVoidReturn();
	} else
		_implementation->stopWatch(creature, entid, doSendPackets, forced, doLock, outOfRange);
}

void PlayerManager::stopListen(CreatureObject* creature, unsigned long long entid, bool doSendPackets, bool forced, bool doLock, bool outOfRange) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_STOPLISTEN__CREATUREOBJECT_LONG_BOOL_BOOL_BOOL_BOOL_);
		method.addObjectParameter(creature);
		method.addUnsignedLongParameter(entid);
		method.addBooleanParameter(doSendPackets);
		method.addBooleanParameter(forced);
		method.addBooleanParameter(doLock);
		method.addBooleanParameter(outOfRange);

		method.executeWithVoidReturn();
	} else
		_implementation->stopListen(creature, entid, doSendPackets, forced, doLock, outOfRange);
}

void PlayerManager::startWatch(CreatureObject* creature, unsigned long long entid) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_STARTWATCH__CREATUREOBJECT_LONG_);
		method.addObjectParameter(creature);
		method.addUnsignedLongParameter(entid);

		method.executeWithVoidReturn();
	} else
		_implementation->startWatch(creature, entid);
}

void PlayerManager::startListen(CreatureObject* creature, unsigned long long entid) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_STARTLISTEN__CREATUREOBJECT_LONG_);
		method.addObjectParameter(creature);
		method.addUnsignedLongParameter(entid);

		method.executeWithVoidReturn();
	} else
		_implementation->startListen(creature, entid);
}

void PlayerManager::lootAll(CreatureObject* player, AiAgent* creature) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_LOOTALL__CREATUREOBJECT_AIAGENT_);
		method.addObjectParameter(player);
		method.addObjectParameter(creature);

		method.executeWithVoidReturn();
	} else
		_implementation->lootAll(player, creature);
}

int PlayerManager::healEnhance(CreatureObject* enhancer, CreatureObject* patient, byte attribute, int buffvalue, float duration) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HEALENHANCE__CREATUREOBJECT_CREATUREOBJECT_BYTE_INT_FLOAT_);
		method.addObjectParameter(enhancer);
		method.addObjectParameter(patient);
		method.addByteParameter(attribute);
		method.addSignedIntParameter(buffvalue);
		method.addFloatParameter(duration);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->healEnhance(enhancer, patient, attribute, buffvalue, duration);
}

void PlayerManager::disseminateExperience(TangibleObject* destructedObject, ThreatMap* threatMap) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->disseminateExperience(destructedObject, threatMap);
}

bool PlayerManager::squadLeaderCheck(CreatureObject* player, GroupObject* group) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SQUADLEADERCHECK__CREATUREOBJECT_GROUPOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(group);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->squadLeaderCheck(player, group);
}

int PlayerManager::calculatePlayerLevel(CreatureObject* player) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CALCULATEPLAYERLEVEL__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->calculatePlayerLevel(player);
}

void PlayerManager::awardSquadLeaderExperience(GroupObject* group, int amount, TangibleObject* source) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_AWARDSQUADLEADEREXPERIENCE__GROUPOBJECT_INT_TANGIBLEOBJECT_);
		method.addObjectParameter(group);
		method.addSignedIntParameter(amount);
		method.addObjectParameter(source);

		method.executeWithVoidReturn();
	} else
		_implementation->awardSquadLeaderExperience(group, amount, source);
}

void PlayerManager::sendLoginMessage(CreatureObject* player) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDLOGINMESSAGE__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendLoginMessage(player);
}

void PlayerManager::resendLoginMessageToAll() {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RESENDLOGINMESSAGETOALL__);

		method.executeWithVoidReturn();
	} else
		_implementation->resendLoginMessageToAll();
}

void PlayerManager::sendActivateCloneRequest(CreatureObject* player, int typeofdeath) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDACTIVATECLONEREQUEST__CREATUREOBJECT_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(typeofdeath);

		method.executeWithVoidReturn();
	} else
		_implementation->sendActivateCloneRequest(player, typeofdeath);
}

void PlayerManager::sendPlayerToCloner(CreatureObject* player, unsigned long long clonerID, int typeofdeath) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDPLAYERTOCLONER__CREATUREOBJECT_LONG_INT_);
		method.addObjectParameter(player);
		method.addUnsignedLongParameter(clonerID);
		method.addSignedIntParameter(typeofdeath);

		method.executeWithVoidReturn();
	} else
		_implementation->sendPlayerToCloner(player, clonerID, typeofdeath);
}

bool PlayerManager::checkExistentNameInDatabase(const String& firstName) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CHECKEXISTENTNAMEINDATABASE__STRING_);
		method.addAsciiParameter(firstName);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->checkExistentNameInDatabase(firstName);
}

TangibleObject* PlayerManager::createHairObject(const String& hairObjectFile, const String& hairCustomization) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATEHAIROBJECT__STRING_STRING_);
		method.addAsciiParameter(hairObjectFile);
		method.addAsciiParameter(hairCustomization);

		return static_cast<TangibleObject*>(method.executeWithObjectReturn());
	} else
		return _implementation->createHairObject(hairObjectFile, hairCustomization);
}

bool PlayerManager::createAllPlayerObjects(CreatureObject* player) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATEALLPLAYEROBJECTS__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->createAllPlayerObjects(player);
}

void PlayerManager::createDefaultPlayerItems(CreatureObject* player, const String& profession, const String& templateFile) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATEDEFAULTPLAYERITEMS__CREATUREOBJECT_STRING_STRING_);
		method.addObjectParameter(player);
		method.addAsciiParameter(profession);
		method.addAsciiParameter(templateFile);

		method.executeWithVoidReturn();
	} else
		_implementation->createDefaultPlayerItems(player, profession, templateFile);
}

void PlayerManager::createTutorialBuilding(CreatureObject* player) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATETUTORIALBUILDING__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->createTutorialBuilding(player);
}

void PlayerManager::createSkippedTutorialBuilding(CreatureObject* player) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATESKIPPEDTUTORIALBUILDING__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->createSkippedTutorialBuilding(player);
}

int PlayerManager::checkSpeedHackFirstTest(CreatureObject* player, float parsedSpeed, ValidatedPosition& teleportPosition, float errorMultiplier) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->checkSpeedHackFirstTest(player, parsedSpeed, teleportPosition, errorMultiplier);
}

int PlayerManager::checkSpeedHackSecondTest(CreatureObject* player, float newX, float newZ, float newY, unsigned int newStamp, SceneObject* newParent) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CHECKSPEEDHACKSECONDTEST__CREATUREOBJECT_FLOAT_FLOAT_FLOAT_INT_SCENEOBJECT_);
		method.addObjectParameter(player);
		method.addFloatParameter(newX);
		method.addFloatParameter(newZ);
		method.addFloatParameter(newY);
		method.addUnsignedIntParameter(newStamp);
		method.addObjectParameter(newParent);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->checkSpeedHackSecondTest(player, newX, newZ, newY, newStamp, newParent);
}

bool PlayerManager::existsName(const String& name) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_EXISTSNAME__STRING_);
		method.addAsciiParameter(name);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->existsName(name);
}

unsigned long long PlayerManager::getObjectID(const String& name) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETOBJECTID__STRING_);
		method.addAsciiParameter(name);

		return method.executeWithUnsignedLongReturn();
	} else
		return _implementation->getObjectID(name);
}

CreatureObject* PlayerManager::getPlayer(const String& name) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPLAYER__STRING_);
		method.addAsciiParameter(name);

		return static_cast<CreatureObject*>(method.executeWithObjectReturn());
	} else
		return _implementation->getPlayer(name);
}

void PlayerManager::updateAdminLevel(CreatureObject* player, const String& targetName, int adminLevel) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATEADMINLEVEL__CREATUREOBJECT_STRING_INT_);
		method.addObjectParameter(player);
		method.addAsciiParameter(targetName);
		method.addSignedIntParameter(adminLevel);

		method.executeWithVoidReturn();
	} else
		_implementation->updateAdminLevel(player, targetName, adminLevel);
}

void PlayerManager::generateHologrindSkills(CreatureObject* player) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GENERATEHOLOGRINDSKILLS__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->generateHologrindSkills(player);
}

void PlayerManager::addPlayer(CreatureObject* player) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDPLAYER__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->addPlayer(player);
}

String PlayerManager::getBadgeKey(int idx) {
	PlayerManagerImplementation* _implementation = static_cast<PlayerManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETBADGEKEY__INT_);
		method.addSignedIntParameter(idx);

		method.executeWithAsciiReturn(_return_getBadgeKey);
		return _return_getBadgeKey;
	} else
		return _implementation->getBadgeKey(idx);
}

DistributedObjectServant* PlayerManager::_getImplementation() {

	_updated = true;
	return _impl;
}

void PlayerManager::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	PlayerManagerImplementation
 */

PlayerManagerImplementation::PlayerManagerImplementation(DummyConstructorParameter* param) : ObserverImplementation(param) {
	_initializeImplementation();
}


PlayerManagerImplementation::~PlayerManagerImplementation() {
	PlayerManagerImplementation::finalize();
}


void PlayerManagerImplementation::_initializeImplementation() {
	_setClassHelper(PlayerManagerHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void PlayerManagerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<PlayerManager*>(stub);
	ObserverImplementation::_setStub(stub);
}

DistributedObjectStub* PlayerManagerImplementation::_getStub() {
	return _this;
}

PlayerManagerImplementation::operator const PlayerManager*() {
	return _this;
}

void PlayerManagerImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void PlayerManagerImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void PlayerManagerImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void PlayerManagerImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void PlayerManagerImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void PlayerManagerImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void PlayerManagerImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void PlayerManagerImplementation::_serializationHelperMethod() {
	ObserverImplementation::_serializationHelperMethod();

	_setClassName("PlayerManager");

}

void PlayerManagerImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(PlayerManagerImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool PlayerManagerImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ObserverImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "PlayerManager.highestBadgeIndex") {
		TypeInfo<int >::parseFromBinaryStream(&highestBadgeIndex, stream);
		return true;
	}

	if (_name == "PlayerManager.server") {
		TypeInfo<ManagedWeakReference<ZoneServer* > >::parseFromBinaryStream(&server, stream);
		return true;
	}

	if (_name == "PlayerManager.globalExpMultiplier") {
		TypeInfo<float >::parseFromBinaryStream(&globalExpMultiplier, stream);
		return true;
	}


	return false;
}

void PlayerManagerImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = PlayerManagerImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int PlayerManagerImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "PlayerManager.highestBadgeIndex";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&highestBadgeIndex, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "PlayerManager.server";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedWeakReference<ZoneServer* > >::toBinaryStream(&server, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "PlayerManager.globalExpMultiplier";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<float >::toBinaryStream(&globalExpMultiplier, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 3 + ObserverImplementation::writeObjectMembers(stream);
}

int PlayerManagerImplementation::getHighestBadgeIndex() {
	// server/zone/managers/player/PlayerManager.idl():  		return highestBadgeIndex;
	return highestBadgeIndex;
}

void PlayerManagerImplementation::addPlayer(CreatureObject* player) {
	// server/zone/managers/player/PlayerManager.idl():  		nameMap.put(player);
	nameMap->put(player);
}

/*
 *	PlayerManagerAdapter
 */

PlayerManagerAdapter::PlayerManagerAdapter(PlayerManager* obj) : ObserverAdapter(obj) {
}

Packet* PlayerManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case RPC_LOADNAMEMAP__:
		loadNameMap();
		break;
	case RPC_GETHIGHESTBADGEINDEX__:
		resp->insertSignedInt(getHighestBadgeIndex());
		break;
	case RPC_FINALIZE__:
		finalize();
		break;
	case RPC_KICKUSER__STRING_STRING_:
		resp->insertBoolean(kickUser(inv->getAsciiParameter(_param0_kickUser__String_String_), inv->getAsciiParameter(_param1_kickUser__String_String_)));
		break;
	case RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_:
		resp->insertSignedInt(notifyObserverEvent(inv->getUnsignedIntParameter(), static_cast<Observable*>(inv->getObjectParameter()), static_cast<ManagedObject*>(inv->getObjectParameter()), inv->getSignedLongParameter()));
		break;
	case RPC_NOTIFYDESTRUCTION__TANGIBLEOBJECT_TANGIBLEOBJECT_INT_:
		resp->insertSignedInt(notifyDestruction(static_cast<TangibleObject*>(inv->getObjectParameter()), static_cast<TangibleObject*>(inv->getObjectParameter()), inv->getSignedIntParameter()));
		break;
	case RPC_KILLPLAYER__TANGIBLEOBJECT_CREATUREOBJECT_INT_:
		killPlayer(static_cast<TangibleObject*>(inv->getObjectParameter()), static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getSignedIntParameter());
		break;
	case RPC_CALCULATEINCAPACITATIONTIMER__CREATUREOBJECT_INT_:
		resp->insertByte(calculateIncapacitationTimer(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getSignedIntParameter()));
		break;
	case RPC_CHECKENCUMBRANCIES__CREATUREOBJECT_ARMOROBJECT_:
		resp->insertBoolean(checkEncumbrancies(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<ArmorObject*>(inv->getObjectParameter())));
		break;
	case RPC_APPLYENCUMBRANCIES__CREATUREOBJECT_ARMOROBJECT_:
		applyEncumbrancies(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<ArmorObject*>(inv->getObjectParameter()));
		break;
	case RPC_REMOVEENCUMBRANCIES__CREATUREOBJECT_ARMOROBJECT_:
		removeEncumbrancies(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<ArmorObject*>(inv->getObjectParameter()));
		break;
	case RPC_AWARDBADGE__PLAYEROBJECT_INT_:
		awardBadge(static_cast<PlayerObject*>(inv->getObjectParameter()), inv->getUnsignedIntParameter());
		break;
	case RPC_SETEXPERIENCEMULTIPLIER__FLOAT_:
		setExperienceMultiplier(inv->getFloatParameter());
		break;
	case RPC_AWARDEXPERIENCE__CREATUREOBJECT_STRING_INT_BOOL_FLOAT_:
		awardExperience(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getAsciiParameter(_param1_awardExperience__CreatureObject_String_int_bool_float_), inv->getSignedIntParameter(), inv->getBooleanParameter(), inv->getFloatParameter());
		break;
	case RPC_HANDLEABORTTRADEMESSAGE__CREATUREOBJECT_:
		handleAbortTradeMessage(static_cast<CreatureObject*>(inv->getObjectParameter()));
		break;
	case RPC_HANDLEADDITEMTOTRADEWINDOW__CREATUREOBJECT_LONG_:
		handleAddItemToTradeWindow(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getUnsignedLongParameter());
		break;
	case RPC_HANDLEGIVEMONEYMESSAGE__CREATUREOBJECT_INT_:
		handleGiveMoneyMessage(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getUnsignedIntParameter());
		break;
	case RPC_HANDLEACCEPTTRANSACTIONMESSAGE__CREATUREOBJECT_:
		handleAcceptTransactionMessage(static_cast<CreatureObject*>(inv->getObjectParameter()));
		break;
	case RPC_HANDLEUNACCEPTTRANSACTIONMESSAGE__CREATUREOBJECT_:
		handleUnAcceptTransactionMessage(static_cast<CreatureObject*>(inv->getObjectParameter()));
		break;
	case RPC_HANDLEVERIFYTRADEMESSAGE__CREATUREOBJECT_:
		handleVerifyTradeMessage(static_cast<CreatureObject*>(inv->getObjectParameter()));
		break;
	case RPC_CHECKTRADEITEMS__CREATUREOBJECT_CREATUREOBJECT_:
		resp->insertBoolean(checkTradeItems(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<CreatureObject*>(inv->getObjectParameter())));
		break;
	case RPC_GETINRANGESTRUCTUREWITHADMINRIGHTS__CREATUREOBJECT_LONG_:
		resp->insertLong(getInRangeStructureWithAdminRights(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getUnsignedLongParameter())->_getObjectID());
		break;
	case RPC_GETINRANGEOWNEDSTRUCTURE__CREATUREOBJECT_FLOAT_:
		resp->insertLong(getInRangeOwnedStructure(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getFloatParameter())->_getObjectID());
		break;
	case RPC_SENDBATTLEFATIGUEMESSAGE__CREATUREOBJECT_CREATUREOBJECT_:
		sendBattleFatigueMessage(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<CreatureObject*>(inv->getObjectParameter()));
		break;
	case RPC_STOPWATCH__CREATUREOBJECT_LONG_BOOL_BOOL_BOOL_BOOL_:
		stopWatch(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getUnsignedLongParameter(), inv->getBooleanParameter(), inv->getBooleanParameter(), inv->getBooleanParameter(), inv->getBooleanParameter());
		break;
	case RPC_STOPLISTEN__CREATUREOBJECT_LONG_BOOL_BOOL_BOOL_BOOL_:
		stopListen(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getUnsignedLongParameter(), inv->getBooleanParameter(), inv->getBooleanParameter(), inv->getBooleanParameter(), inv->getBooleanParameter());
		break;
	case RPC_STARTWATCH__CREATUREOBJECT_LONG_:
		startWatch(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getUnsignedLongParameter());
		break;
	case RPC_STARTLISTEN__CREATUREOBJECT_LONG_:
		startListen(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getUnsignedLongParameter());
		break;
	case RPC_LOOTALL__CREATUREOBJECT_AIAGENT_:
		lootAll(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<AiAgent*>(inv->getObjectParameter()));
		break;
	case RPC_HEALENHANCE__CREATUREOBJECT_CREATUREOBJECT_BYTE_INT_FLOAT_:
		resp->insertSignedInt(healEnhance(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getByteParameter(), inv->getSignedIntParameter(), inv->getFloatParameter()));
		break;
	case RPC_SQUADLEADERCHECK__CREATUREOBJECT_GROUPOBJECT_:
		resp->insertBoolean(squadLeaderCheck(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<GroupObject*>(inv->getObjectParameter())));
		break;
	case RPC_CALCULATEPLAYERLEVEL__CREATUREOBJECT_:
		resp->insertSignedInt(calculatePlayerLevel(static_cast<CreatureObject*>(inv->getObjectParameter())));
		break;
	case RPC_AWARDSQUADLEADEREXPERIENCE__GROUPOBJECT_INT_TANGIBLEOBJECT_:
		awardSquadLeaderExperience(static_cast<GroupObject*>(inv->getObjectParameter()), inv->getSignedIntParameter(), static_cast<TangibleObject*>(inv->getObjectParameter()));
		break;
	case RPC_SENDLOGINMESSAGE__CREATUREOBJECT_:
		sendLoginMessage(static_cast<CreatureObject*>(inv->getObjectParameter()));
		break;
	case RPC_RESENDLOGINMESSAGETOALL__:
		resendLoginMessageToAll();
		break;
	case RPC_SENDACTIVATECLONEREQUEST__CREATUREOBJECT_INT_:
		sendActivateCloneRequest(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getSignedIntParameter());
		break;
	case RPC_SENDPLAYERTOCLONER__CREATUREOBJECT_LONG_INT_:
		sendPlayerToCloner(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getUnsignedLongParameter(), inv->getSignedIntParameter());
		break;
	case RPC_CHECKEXISTENTNAMEINDATABASE__STRING_:
		resp->insertBoolean(checkExistentNameInDatabase(inv->getAsciiParameter(_param0_checkExistentNameInDatabase__String_)));
		break;
	case RPC_CREATEHAIROBJECT__STRING_STRING_:
		resp->insertLong(createHairObject(inv->getAsciiParameter(_param0_createHairObject__String_String_), inv->getAsciiParameter(_param1_createHairObject__String_String_))->_getObjectID());
		break;
	case RPC_CREATEALLPLAYEROBJECTS__CREATUREOBJECT_:
		resp->insertBoolean(createAllPlayerObjects(static_cast<CreatureObject*>(inv->getObjectParameter())));
		break;
	case RPC_CREATEDEFAULTPLAYERITEMS__CREATUREOBJECT_STRING_STRING_:
		createDefaultPlayerItems(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getAsciiParameter(_param1_createDefaultPlayerItems__CreatureObject_String_String_), inv->getAsciiParameter(_param2_createDefaultPlayerItems__CreatureObject_String_String_));
		break;
	case RPC_CREATETUTORIALBUILDING__CREATUREOBJECT_:
		createTutorialBuilding(static_cast<CreatureObject*>(inv->getObjectParameter()));
		break;
	case RPC_CREATESKIPPEDTUTORIALBUILDING__CREATUREOBJECT_:
		createSkippedTutorialBuilding(static_cast<CreatureObject*>(inv->getObjectParameter()));
		break;
	case RPC_CHECKSPEEDHACKSECONDTEST__CREATUREOBJECT_FLOAT_FLOAT_FLOAT_INT_SCENEOBJECT_:
		resp->insertSignedInt(checkSpeedHackSecondTest(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getUnsignedIntParameter(), static_cast<SceneObject*>(inv->getObjectParameter())));
		break;
	case RPC_EXISTSNAME__STRING_:
		resp->insertBoolean(existsName(inv->getAsciiParameter(_param0_existsName__String_)));
		break;
	case RPC_GETOBJECTID__STRING_:
		resp->insertLong(getObjectID(inv->getAsciiParameter(_param0_getObjectID__String_)));
		break;
	case RPC_GETPLAYER__STRING_:
		resp->insertLong(getPlayer(inv->getAsciiParameter(_param0_getPlayer__String_))->_getObjectID());
		break;
	case RPC_UPDATEADMINLEVEL__CREATUREOBJECT_STRING_INT_:
		updateAdminLevel(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getAsciiParameter(_param1_updateAdminLevel__CreatureObject_String_int_), inv->getSignedIntParameter());
		break;
	case RPC_GENERATEHOLOGRINDSKILLS__CREATUREOBJECT_:
		generateHologrindSkills(static_cast<CreatureObject*>(inv->getObjectParameter()));
		break;
	case RPC_ADDPLAYER__CREATUREOBJECT_:
		addPlayer(static_cast<CreatureObject*>(inv->getObjectParameter()));
		break;
	case RPC_GETBADGEKEY__INT_:
		resp->insertAscii(getBadgeKey(inv->getSignedIntParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

void PlayerManagerAdapter::loadNameMap() {
	(static_cast<PlayerManager*>(stub))->loadNameMap();
}

int PlayerManagerAdapter::getHighestBadgeIndex() {
	return (static_cast<PlayerManager*>(stub))->getHighestBadgeIndex();
}

void PlayerManagerAdapter::finalize() {
	(static_cast<PlayerManager*>(stub))->finalize();
}

bool PlayerManagerAdapter::kickUser(const String& name, const String& admin) {
	return (static_cast<PlayerManager*>(stub))->kickUser(name, admin);
}

int PlayerManagerAdapter::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	return (static_cast<PlayerManager*>(stub))->notifyObserverEvent(eventType, observable, arg1, arg2);
}

int PlayerManagerAdapter::notifyDestruction(TangibleObject* destructor, TangibleObject* destructedObject, int condition) {
	return (static_cast<PlayerManager*>(stub))->notifyDestruction(destructor, destructedObject, condition);
}

void PlayerManagerAdapter::killPlayer(TangibleObject* attacker, CreatureObject* player, int typeofdeath) {
	(static_cast<PlayerManager*>(stub))->killPlayer(attacker, player, typeofdeath);
}

byte PlayerManagerAdapter::calculateIncapacitationTimer(CreatureObject* player, int condition) {
	return (static_cast<PlayerManager*>(stub))->calculateIncapacitationTimer(player, condition);
}

bool PlayerManagerAdapter::checkEncumbrancies(CreatureObject* player, ArmorObject* armor) {
	return (static_cast<PlayerManager*>(stub))->checkEncumbrancies(player, armor);
}

void PlayerManagerAdapter::applyEncumbrancies(CreatureObject* player, ArmorObject* armor) {
	(static_cast<PlayerManager*>(stub))->applyEncumbrancies(player, armor);
}

void PlayerManagerAdapter::removeEncumbrancies(CreatureObject* player, ArmorObject* armor) {
	(static_cast<PlayerManager*>(stub))->removeEncumbrancies(player, armor);
}

void PlayerManagerAdapter::awardBadge(PlayerObject* ghost, unsigned int badge) {
	(static_cast<PlayerManager*>(stub))->awardBadge(ghost, badge);
}

void PlayerManagerAdapter::setExperienceMultiplier(float globalMultiplier) {
	(static_cast<PlayerManager*>(stub))->setExperienceMultiplier(globalMultiplier);
}

void PlayerManagerAdapter::awardExperience(CreatureObject* player, const String& xpType, int amount, bool sendSystemMessage, float localMultiplier) {
	(static_cast<PlayerManager*>(stub))->awardExperience(player, xpType, amount, sendSystemMessage, localMultiplier);
}

void PlayerManagerAdapter::handleAbortTradeMessage(CreatureObject* player) {
	(static_cast<PlayerManager*>(stub))->handleAbortTradeMessage(player);
}

void PlayerManagerAdapter::handleAddItemToTradeWindow(CreatureObject* player, unsigned long long itemID) {
	(static_cast<PlayerManager*>(stub))->handleAddItemToTradeWindow(player, itemID);
}

void PlayerManagerAdapter::handleGiveMoneyMessage(CreatureObject* player, unsigned int value) {
	(static_cast<PlayerManager*>(stub))->handleGiveMoneyMessage(player, value);
}

void PlayerManagerAdapter::handleAcceptTransactionMessage(CreatureObject* player) {
	(static_cast<PlayerManager*>(stub))->handleAcceptTransactionMessage(player);
}

void PlayerManagerAdapter::handleUnAcceptTransactionMessage(CreatureObject* player) {
	(static_cast<PlayerManager*>(stub))->handleUnAcceptTransactionMessage(player);
}

void PlayerManagerAdapter::handleVerifyTradeMessage(CreatureObject* player) {
	(static_cast<PlayerManager*>(stub))->handleVerifyTradeMessage(player);
}

bool PlayerManagerAdapter::checkTradeItems(CreatureObject* player, CreatureObject* receiver) {
	return (static_cast<PlayerManager*>(stub))->checkTradeItems(player, receiver);
}

SceneObject* PlayerManagerAdapter::getInRangeStructureWithAdminRights(CreatureObject* creature, unsigned long long targetID) {
	return (static_cast<PlayerManager*>(stub))->getInRangeStructureWithAdminRights(creature, targetID);
}

StructureObject* PlayerManagerAdapter::getInRangeOwnedStructure(CreatureObject* creature, float range) {
	return (static_cast<PlayerManager*>(stub))->getInRangeOwnedStructure(creature, range);
}

void PlayerManagerAdapter::sendBattleFatigueMessage(CreatureObject* player, CreatureObject* target) {
	(static_cast<PlayerManager*>(stub))->sendBattleFatigueMessage(player, target);
}

void PlayerManagerAdapter::stopWatch(CreatureObject* creature, unsigned long long entid, bool doSendPackets, bool forced, bool doLock, bool outOfRange) {
	(static_cast<PlayerManager*>(stub))->stopWatch(creature, entid, doSendPackets, forced, doLock, outOfRange);
}

void PlayerManagerAdapter::stopListen(CreatureObject* creature, unsigned long long entid, bool doSendPackets, bool forced, bool doLock, bool outOfRange) {
	(static_cast<PlayerManager*>(stub))->stopListen(creature, entid, doSendPackets, forced, doLock, outOfRange);
}

void PlayerManagerAdapter::startWatch(CreatureObject* creature, unsigned long long entid) {
	(static_cast<PlayerManager*>(stub))->startWatch(creature, entid);
}

void PlayerManagerAdapter::startListen(CreatureObject* creature, unsigned long long entid) {
	(static_cast<PlayerManager*>(stub))->startListen(creature, entid);
}

void PlayerManagerAdapter::lootAll(CreatureObject* player, AiAgent* creature) {
	(static_cast<PlayerManager*>(stub))->lootAll(player, creature);
}

int PlayerManagerAdapter::healEnhance(CreatureObject* enhancer, CreatureObject* patient, byte attribute, int buffvalue, float duration) {
	return (static_cast<PlayerManager*>(stub))->healEnhance(enhancer, patient, attribute, buffvalue, duration);
}

bool PlayerManagerAdapter::squadLeaderCheck(CreatureObject* player, GroupObject* group) {
	return (static_cast<PlayerManager*>(stub))->squadLeaderCheck(player, group);
}

int PlayerManagerAdapter::calculatePlayerLevel(CreatureObject* player) {
	return (static_cast<PlayerManager*>(stub))->calculatePlayerLevel(player);
}

void PlayerManagerAdapter::awardSquadLeaderExperience(GroupObject* group, int amount, TangibleObject* source) {
	(static_cast<PlayerManager*>(stub))->awardSquadLeaderExperience(group, amount, source);
}

void PlayerManagerAdapter::sendLoginMessage(CreatureObject* player) {
	(static_cast<PlayerManager*>(stub))->sendLoginMessage(player);
}

void PlayerManagerAdapter::resendLoginMessageToAll() {
	(static_cast<PlayerManager*>(stub))->resendLoginMessageToAll();
}

void PlayerManagerAdapter::sendActivateCloneRequest(CreatureObject* player, int typeofdeath) {
	(static_cast<PlayerManager*>(stub))->sendActivateCloneRequest(player, typeofdeath);
}

void PlayerManagerAdapter::sendPlayerToCloner(CreatureObject* player, unsigned long long clonerID, int typeofdeath) {
	(static_cast<PlayerManager*>(stub))->sendPlayerToCloner(player, clonerID, typeofdeath);
}

bool PlayerManagerAdapter::checkExistentNameInDatabase(const String& firstName) {
	return (static_cast<PlayerManager*>(stub))->checkExistentNameInDatabase(firstName);
}

TangibleObject* PlayerManagerAdapter::createHairObject(const String& hairObjectFile, const String& hairCustomization) {
	return (static_cast<PlayerManager*>(stub))->createHairObject(hairObjectFile, hairCustomization);
}

bool PlayerManagerAdapter::createAllPlayerObjects(CreatureObject* player) {
	return (static_cast<PlayerManager*>(stub))->createAllPlayerObjects(player);
}

void PlayerManagerAdapter::createDefaultPlayerItems(CreatureObject* player, const String& profession, const String& templateFile) {
	(static_cast<PlayerManager*>(stub))->createDefaultPlayerItems(player, profession, templateFile);
}

void PlayerManagerAdapter::createTutorialBuilding(CreatureObject* player) {
	(static_cast<PlayerManager*>(stub))->createTutorialBuilding(player);
}

void PlayerManagerAdapter::createSkippedTutorialBuilding(CreatureObject* player) {
	(static_cast<PlayerManager*>(stub))->createSkippedTutorialBuilding(player);
}

int PlayerManagerAdapter::checkSpeedHackSecondTest(CreatureObject* player, float newX, float newZ, float newY, unsigned int newStamp, SceneObject* newParent) {
	return (static_cast<PlayerManager*>(stub))->checkSpeedHackSecondTest(player, newX, newZ, newY, newStamp, newParent);
}

bool PlayerManagerAdapter::existsName(const String& name) {
	return (static_cast<PlayerManager*>(stub))->existsName(name);
}

unsigned long long PlayerManagerAdapter::getObjectID(const String& name) {
	return (static_cast<PlayerManager*>(stub))->getObjectID(name);
}

CreatureObject* PlayerManagerAdapter::getPlayer(const String& name) {
	return (static_cast<PlayerManager*>(stub))->getPlayer(name);
}

void PlayerManagerAdapter::updateAdminLevel(CreatureObject* player, const String& targetName, int adminLevel) {
	(static_cast<PlayerManager*>(stub))->updateAdminLevel(player, targetName, adminLevel);
}

void PlayerManagerAdapter::generateHologrindSkills(CreatureObject* player) {
	(static_cast<PlayerManager*>(stub))->generateHologrindSkills(player);
}

void PlayerManagerAdapter::addPlayer(CreatureObject* player) {
	(static_cast<PlayerManager*>(stub))->addPlayer(player);
}

String PlayerManagerAdapter::getBadgeKey(int idx) {
	return (static_cast<PlayerManager*>(stub))->getBadgeKey(idx);
}

/*
 *	PlayerManagerHelper
 */

PlayerManagerHelper* PlayerManagerHelper::staticInitializer = PlayerManagerHelper::instance();

PlayerManagerHelper::PlayerManagerHelper() {
	className = "PlayerManager";

	Core::getObjectBroker()->registerClass(className, this);
}

void PlayerManagerHelper::finalizeHelper() {
	PlayerManagerHelper::finalize();
}

DistributedObject* PlayerManagerHelper::instantiateObject() {
	return new PlayerManager(DummyConstructorParameter::instance());
}

DistributedObjectServant* PlayerManagerHelper::instantiateServant() {
	return new PlayerManagerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* PlayerManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new PlayerManagerAdapter(static_cast<PlayerManager*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

