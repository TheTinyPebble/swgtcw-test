/*
Copyright (C) 2007 <SWGEmu>

This File is part of Core3.

This program is free software; you can redistribute
it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software
Foundation; either version 2 of the License,
or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for
more details.

You should have received a copy of the GNU Lesser General
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Linking Engine3 statically or dynamically with other modules
is making a combined work based on Engine3.
Thus, the terms and conditions of the GNU Lesser General Public License
cover the whole combination.

In addition, as a special exception, the copyright holders of Engine3
give you permission to combine Engine3 program with free software
programs or libraries that are released under the GNU LGPL and with
code included in the standard release of Core3 under the GNU LGPL
license (or modified versions of such code, with unchanged license).
You may copy and distribute such a system following the terms of the
GNU LGPL for Engine3 and the licenses of the other code concerned,
provided that you include the source code of that other code when
and as the GNU LGPL requires distribution of source code.

Note that people who make modified versions of Engine3 are not obligated
to grant this special exception for their modified versions;
it is their choice whether to do so. The GNU Lesser General Public License
gives permission to release a modified version without this exception;
this exception also makes it possible to release a modified version
which carries forward this exception.
*/

package server.zone.managers.player;

import engine.log.Logger;
import engine.lua.Lua;
import system.util.VectorMap;
import server.zone.managers.objectcontroller.ObjectController;

include server.zone.objects.player.PlayerCreature;
include server.zone.managers.player.PlayerMap;
include server.zone.managers.player.CharacterNameMap;

import server.zone.objects.group.GroupObject;
import server.zone.ZoneProcessServerImplementation;
import server.zone.managers.object.ObjectManager;
import server.zone.packets.MessageCallback;
import server.zone.objects.tangible.TangibleObject;
import engine.core.ManagedObject;
import server.zone.ZoneServer;
import server.zone.objects.tangible.wearables.ArmorObject;

include server.zone.managers.player.StartingItemList;
include server.zone.objects.tangible.DamageMap;

import server.zone.objects.scene.Observer;
import server.zone.objects.scene.Observable;

class PlayerManager extends Observer implements Logger {
	transient ZoneProcessServerImplementation processor;
	
	@weakReference
	private ZoneServer server;
	
	transient PlayerMap playerMap;
	transient CharacterNameMap nameMap;
	private float globalExpMultiplier;
	
	public native PlayerManager(ZoneServer zoneServer, ZoneProcessServerImplementation impl);
	public native void loadNameMap();
	private native void loadStartingItems();
	
	public native void finalize();
	
	public transient StartingItemList startingItemList;
	
	/**
	 * Kicks a user
	 *
	 */
	public native boolean kickUser(final string name, final string admin);
	
	@local
	public native boolean createPlayer(MessageCallback callback);
		
	@local
	public native boolean checkPlayerName(MessageCallback callback);

	public native int notifyObserverEvent(unsigned int eventType, Observable observable, ManagedObject arg1, long arg2);
		
	/**
	 * @pre { destructor and destructedObject locked }
	 * @post { destructor and destructedObject locked }
	 */
	public native int notifyDestruction(TangibleObject destructor, TangibleObject destructedObject, int condition);
	
	/**
	 * @pre { destructor and destructedObject locked }
	 * @post { destructor and destructedObject locked }
	 */
	public native int notifyDefendersOfIncapacitation(TangibleObject destructor, TangibleObject destructedObject); 
	
	/**
	 * @pre { attacker and player locked }
	 * @post { attacker and player locked }
	 */
	public native void killPlayer(TangibleObject attacker, PlayerCreature player);
	
	/**
	 * Calculates the length of time that incapacitation should last. Cannot exceed 1 minute.
	 * \return Returns the number of seconds until the player should recover from incapacitation.
	 */
	public native byte calculateIncapacitationTimer(PlayerCreature player, int condition);
	
	/**
	 * Check for enough encumbrances 
	 */
	public native boolean checkEncumbrancies(PlayerCreature player, ArmorObject armor);
	public native void applyEncumbrancies(PlayerCreature player, ArmorObject armor);
	public native void removeEncumbrancies(PlayerCreature player, ArmorObject armor);
	public native void awardBadge(PlayerCreature player, unsigned int badge);
	
	public native void setExperienceMultiplier(float globalMultiplier);
	public native void awardExperience(PlayerCreature player, final string xpType, int amount, boolean sendSystemMessage = true, float localMultiplier = 1.0f);
	
	public native void handleAbortTradeMessage(PlayerCreature player, boolean doLock = true);
	public native void handleAddItemToTradeWindow(PlayerCreature player, unsigned long itemID);
	public native void handleGiveMoneyMessage(PlayerCreature player, unsigned int value);
	public native void handleAcceptTransactionMessage(PlayerCreature player);
	public native void handleUnAcceptTransactionMessage(PlayerCreature player);
	public native void handleVerifyTradeMessage(PlayerCreature player);
	public native boolean checkTradeItems(PlayerCreature player, PlayerCreature receiver);
	
	/**
	 * Finds the closest structure in range with Administration priveleges.
	 * This is primarily used for commands that require a building or installation.
	 * First checks the passed targetID, then checks if the player is inside a building. Finally searches for an installation in range.
	 * @pre: creature locked, zone unlocked
	 * @post: creature locked, zone unlocked
	 * @param targetID The object id of the players target.
	 */
	public native SceneObject getInRangeStructureWithAdminRights(CreatureObject creature, unsigned long targetID = 0);
	
	public native void sendBattleFatigueMessage(PlayerCreature player, PlayerCreature target);
	
	public native int getMedicalFacilityRating(CreatureObject creature);
	
	/**
	 * Enhances the patients attribute by a specified amount for a specified duration.
	 * @param patient The patient to enhance.
	 * @param attribute The attribute to enhance.
	 * @param buffvalue The amount to enhance the attribute.
	 * @param duration The duration in seconds the enhancement will last.
	 * @return The amount that was enhanced. If a buff existed, this is the amount exceeding the previous buff.
	 */
	public native int healEnhance(CreatureObject enhancer, CreatureObject patient, byte attribute, int buffvalue, float duration);
	
	@local
	public native void disseminateExperience(TangibleObject destructedObject, DamageMap damageMap);
	
	public native boolean squadLeaderCheck(PlayerCreature player, GroupObject group);
	
	public native void awardSquadLeaderExperience(GroupObject group, int amount, TangibleObject source);
	
	public native void sendMessageOfTheDay(PlayerCreature player);
	
	public native void sendActivateCloneRequest(PlayerCreature player);
	public native void sendPlayerToCloner(PlayerCreature player, unsigned long clonerID);
	
	public native boolean checkExistentNameInDatabase(final string firstName);
	
	public native TangibleObject createHairObject(final string hairObjectFile, final string hairCustomization);
	public native boolean createAllPlayerObjects(PlayerCreature player);
	public native void createDefaultPlayerItems(PlayerCreature player, final string profession, final string templateFile);
	
	public native void createTutorialBuilding(PlayerCreature player);
	public native void createSkippedTutorialBuilding(PlayerCreature player);
	
	public native boolean existsName(final string name);
	public native unsigned long getObjectID(final string name);
	public native PlayerCreature getPlayer(final string name);
	
	
}
