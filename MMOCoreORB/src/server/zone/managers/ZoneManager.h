/*
 *	server/zone/managers/ZoneManager.h generated by engine3 IDL compiler 0.60
 */

#ifndef ZONEMANAGER_H_
#define ZONEMANAGER_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {

class ZoneServer;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {

class ZoneProcessServer;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {
namespace managers {
namespace object {

class ObjectManager;

} // namespace object
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::object;

#include "engine/core/ManagedService.h"

#include "engine/log/Logger.h"

namespace server {
namespace zone {
namespace manager {

class ZoneManager : public ManagedService {
public:
	ZoneManager(const String& name);

	void setZoneProcessor(ZoneProcessServer* server);

	DistributedObjectServant* _getImplementation();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	ZoneManager(DummyConstructorParameter* param);

	virtual ~ZoneManager();

	friend class ZoneManagerHelper;
};

} // namespace manager
} // namespace zone
} // namespace server

using namespace server::zone::manager;

namespace server {
namespace zone {
namespace manager {

class ZoneManagerImplementation : public ManagedServiceImplementation, public Logger {
protected:
	ManagedWeakReference<ZoneServer* > zoneServer;

	ManagedReference<ZoneProcessServer* > zoneProcessor;

	Reference<ObjectManager* > objectManager;

public:
	ZoneManagerImplementation(const String& name);

	ZoneManagerImplementation(DummyConstructorParameter* param);

	void setZoneProcessor(ZoneProcessServer* server);

	ZoneManager* _this;

	operator const ZoneManager*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~ZoneManagerImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const String& name);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class ZoneManager;
};

class ZoneManagerAdapter : public ManagedServiceAdapter {
public:
	ZoneManagerAdapter(ZoneManagerImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void setZoneProcessor(ZoneProcessServer* server);

};

class ZoneManagerHelper : public DistributedObjectClassHelper, public Singleton<ZoneManagerHelper> {
	static ZoneManagerHelper* staticInitializer;

public:
	ZoneManagerHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<ZoneManagerHelper>;
};

} // namespace manager
} // namespace zone
} // namespace server

using namespace server::zone::manager;

#endif /*ZONEMANAGER_H_*/
