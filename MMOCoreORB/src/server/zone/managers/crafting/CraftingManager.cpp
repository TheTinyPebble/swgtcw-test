/*
 *	server/zone/managers/crafting/CraftingManager.cpp generated by engine3 IDL compiler 0.60
 */

#include "CraftingManager.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/ZoneProcessServerImplementation.h"

#include "server/zone/managers/object/ObjectManager.h"

#include "server/zone/objects/player/PlayerObject.h"

/*
 *	CraftingManagerStub
 */

CraftingManager::CraftingManager(ZoneServer* serv, ZoneProcessServerImplementation* proc, ObjectManager* objman) : ManagedObject(DummyConstructorParameter::instance()) {
	_impl = new CraftingManagerImplementation(serv, proc, objman);
	_impl->_setStub(this);
}

CraftingManager::CraftingManager(DummyConstructorParameter* param) : ManagedObject(param) {
}

CraftingManager::~CraftingManager() {
}


void CraftingManager::initialize() {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((CraftingManagerImplementation*) _impl)->initialize();
}

void CraftingManager::awardSchematicGroup(PlayerObject* playerObject, Vector<String>& schematicgroups, bool updateClient) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((CraftingManagerImplementation*) _impl)->awardSchematicGroup(playerObject, schematicgroups, updateClient);
}

void CraftingManager::removeSchematicGroup(PlayerObject* playerObject, Vector<String>& schematicgroups, bool updateClient) {
	if (_impl == NULL) {
		throw ObjectNotLocalException(this);

	} else
		((CraftingManagerImplementation*) _impl)->removeSchematicGroup(playerObject, schematicgroups, updateClient);
}

DraftSchematic* CraftingManager::getSchematic(unsigned int crc) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addUnsignedIntParameter(crc);

		return (DraftSchematic*) method.executeWithObjectReturn();
	} else
		return ((CraftingManagerImplementation*) _impl)->getSchematic(crc);
}

/*
 *	CraftingManagerImplementation
 */

CraftingManagerImplementation::CraftingManagerImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}

CraftingManagerImplementation::~CraftingManagerImplementation() {
}


void CraftingManagerImplementation::finalize() {
}

void CraftingManagerImplementation::_initializeImplementation() {
	_setClassHelper(CraftingManagerHelper::instance());

	_serializationHelperMethod();
}

void CraftingManagerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (CraftingManager*) stub;
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* CraftingManagerImplementation::_getStub() {
	return _this;
}

CraftingManagerImplementation::operator const CraftingManager*() {
	return _this;
}

void CraftingManagerImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void CraftingManagerImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void CraftingManagerImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void CraftingManagerImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void CraftingManagerImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void CraftingManagerImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void CraftingManagerImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void CraftingManagerImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("CraftingManager");

}

CraftingManagerImplementation::CraftingManagerImplementation(ZoneServer* serv, ZoneProcessServerImplementation* proc, ObjectManager* objman) {
	_initializeImplementation();
	// server/zone/managers/crafting/CraftingManager.idl(68):  		Logger.setLoggingName("CraftingManager");
	Logger::setLoggingName("CraftingManager");
	// server/zone/managers/crafting/CraftingManager.idl(70):  		Logger.setLogging(true);
	Logger::setLogging(true);
	// server/zone/managers/crafting/CraftingManager.idl(71):  		Logger.setGlobalLogging(true);
	Logger::setGlobalLogging(true);
	// server/zone/managers/crafting/CraftingManager.idl(73):  		zoneServer = serv;
	zoneServer = serv;
	// server/zone/managers/crafting/CraftingManager.idl(74):  		zoneProcessor = proc;
	zoneProcessor = proc;
	// server/zone/managers/crafting/CraftingManager.idl(75):  		objectManager = objman;
	objectManager = objman;
}

DraftSchematic* CraftingManagerImplementation::getSchematic(unsigned int crc) {
	// server/zone/managers/crafting/CraftingManager.idl(88):  		return schematicMap.get(crc);
	return schematicMap->get(crc);
}

/*
 *	CraftingManagerAdapter
 */

CraftingManagerAdapter::CraftingManagerAdapter(CraftingManagerImplementation* obj) : ManagedObjectAdapter(obj) {
}

Packet* CraftingManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertLong(getSchematic(inv->getUnsignedIntParameter())->_getObjectID());
		break;
	default:
		return NULL;
	}

	return resp;
}

DraftSchematic* CraftingManagerAdapter::getSchematic(unsigned int crc) {
	return ((CraftingManagerImplementation*) impl)->getSchematic(crc);
}

/*
 *	CraftingManagerHelper
 */

CraftingManagerHelper* CraftingManagerHelper::staticInitializer = CraftingManagerHelper::instance();

CraftingManagerHelper::CraftingManagerHelper() {
	className = "CraftingManager";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void CraftingManagerHelper::finalizeHelper() {
	CraftingManagerHelper::finalize();
}

DistributedObject* CraftingManagerHelper::instantiateObject() {
	return new CraftingManager(DummyConstructorParameter::instance());
}

DistributedObjectServant* CraftingManagerHelper::instantiateServant() {
	return new CraftingManagerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* CraftingManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new CraftingManagerAdapter((CraftingManagerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

