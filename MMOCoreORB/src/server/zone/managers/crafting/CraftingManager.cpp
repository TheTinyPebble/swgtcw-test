/*
 *	server/zone/managers/crafting/CraftingManager.cpp generated by engine3 IDL compiler 0.55
 */

#include "CraftingManager.h"

#include "CraftingManagerImplementation.h"

#include "../../objects/player/Player.h"

#include "../../objects/draftschematic/DraftSchematic.h"

#include "../../objects/tangible/TangibleObject.h"

#include "../../objects/tangible/resource/ResourceContainer.h"

#include "../../objects/tangible/crafting/CraftingTool.h"

#include "../../objects/tangible/crafting/CraftingStation.h"

#include "../../objects/tangible/crafting/component/Component.h"

#include "server/zone/ZoneServer.h"

/*
 *	CraftingManagerStub
 */

CraftingManager::CraftingManager(ZoneServer* server, ZoneProcessServerImplementation* processor) {
	_impl = new CraftingManagerImplementation(server, processor);
	_impl->_setStub(this);
}

CraftingManager::CraftingManager(DummyConstructorParameter* param) {
	_impl = NULL;
}

CraftingManager::~CraftingManager() {
}

void CraftingManager::reloadSchematicTable() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((CraftingManagerImplementation*) _impl)->reloadSchematicTable();
}

void CraftingManager::prepareCraftingSession(Player* player, CraftingTool* craftingTool, DraftSchematic* draftSchematic) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);
		method.addObjectParameter(craftingTool);
		method.addObjectParameter(draftSchematic);

		method.executeWithVoidReturn();
	} else
		((CraftingManagerImplementation*) _impl)->prepareCraftingSession(player, craftingTool, draftSchematic);
}

void CraftingManager::addIngredientToSlot(CraftingTool* craftingTool, Player* player, TangibleObject* tano, int slot, int counter) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(craftingTool);
		method.addObjectParameter(player);
		method.addObjectParameter(tano);
		method.addSignedIntParameter(slot);
		method.addSignedIntParameter(counter);

		method.executeWithVoidReturn();
	} else
		((CraftingManagerImplementation*) _impl)->addIngredientToSlot(craftingTool, player, tano, slot, counter);
}

void CraftingManager::removeIngredientFromSlot(CraftingTool* craftingTool, Player* player, int slot, int counter) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(craftingTool);
		method.addObjectParameter(player);
		method.addSignedIntParameter(slot);
		method.addSignedIntParameter(counter);

		method.executeWithVoidReturn();
	} else
		((CraftingManagerImplementation*) _impl)->removeIngredientFromSlot(craftingTool, player, slot, counter);
}

void CraftingManager::putComponentBackInInventory(Player* player, Component* component) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(player);
		method.addObjectParameter(component);

		method.executeWithVoidReturn();
	} else
		((CraftingManagerImplementation*) _impl)->putComponentBackInInventory(player, component);
}

void CraftingManager::nextCraftingStage(CraftingTool* craftingTool, Player* player, String& test) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addObjectParameter(craftingTool);
		method.addObjectParameter(player);
		method.addAsciiParameter(test);

		method.executeWithVoidReturn();
	} else
		((CraftingManagerImplementation*) _impl)->nextCraftingStage(craftingTool, player, test);
}

void CraftingManager::craftingCustomization(CraftingTool* craftingTool, Player* player, String& name, int condition, String& customizationString) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addObjectParameter(craftingTool);
		method.addObjectParameter(player);
		method.addAsciiParameter(name);
		method.addSignedIntParameter(condition);
		method.addAsciiParameter(customizationString);

		method.executeWithVoidReturn();
	} else
		((CraftingManagerImplementation*) _impl)->craftingCustomization(craftingTool, player, name, condition, customizationString);
}

void CraftingManager::handleExperimenting(CraftingTool* craftingTool, Player* player, int counter, int numRowsAttempted, String& expString) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addObjectParameter(craftingTool);
		method.addObjectParameter(player);
		method.addSignedIntParameter(counter);
		method.addSignedIntParameter(numRowsAttempted);
		method.addAsciiParameter(expString);

		method.executeWithVoidReturn();
	} else
		((CraftingManagerImplementation*) _impl)->handleExperimenting(craftingTool, player, counter, numRowsAttempted, expString);
}

void CraftingManager::createPrototype(CraftingTool* craftingTool, Player* player, int counter, int practice) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addObjectParameter(craftingTool);
		method.addObjectParameter(player);
		method.addSignedIntParameter(counter);
		method.addSignedIntParameter(practice);

		method.executeWithVoidReturn();
	} else
		((CraftingManagerImplementation*) _impl)->createPrototype(craftingTool, player, counter, practice);
}

void CraftingManager::createSchematic(CraftingTool* craftingTool, Player* player, int counter) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addObjectParameter(craftingTool);
		method.addObjectParameter(player);
		method.addSignedIntParameter(counter);

		method.executeWithVoidReturn();
	} else
		((CraftingManagerImplementation*) _impl)->createSchematic(craftingTool, player, counter);
}

float CraftingManager::getWeightedValue(Player* player, CraftingTool* craftingTool, DraftSchematic* draftSchematic, int type) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addObjectParameter(player);
		method.addObjectParameter(craftingTool);
		method.addObjectParameter(draftSchematic);
		method.addSignedIntParameter(type);

		return method.executeWithFloatReturn();
	} else
		return ((CraftingManagerImplementation*) _impl)->getWeightedValue(player, craftingTool, draftSchematic, type);
}

float CraftingManager::getAssemblyPercentage(float value) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addFloatParameter(value);

		return method.executeWithFloatReturn();
	} else
		return ((CraftingManagerImplementation*) _impl)->getAssemblyPercentage(value);
}

float CraftingManager::calculateAssemblyValueModifier(CraftingTool* craftingTool) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addObjectParameter(craftingTool);

		return method.executeWithFloatReturn();
	} else
		return ((CraftingManagerImplementation*) _impl)->calculateAssemblyValueModifier(craftingTool);
}

void CraftingManager::addDraftSchematicsFromGroupName(Player* player, const String& schematicGroupName) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addObjectParameter(player);
		method.addAsciiParameter(schematicGroupName);

		method.executeWithVoidReturn();
	} else
		((CraftingManagerImplementation*) _impl)->addDraftSchematicsFromGroupName(player, schematicGroupName);
}

void CraftingManager::subtractDraftSchematicsFromGroupName(Player* player, const String& schematicGroupName) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addObjectParameter(player);
		method.addAsciiParameter(schematicGroupName);

		method.executeWithVoidReturn();
	} else
		((CraftingManagerImplementation*) _impl)->subtractDraftSchematicsFromGroupName(player, schematicGroupName);
}

void CraftingManager::refreshDraftSchematics(Player* player) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((CraftingManagerImplementation*) _impl)->refreshDraftSchematics(player);
}

TangibleObject* CraftingManager::requestObjectTemplate(String& stfName) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);
		method.addAsciiParameter(stfName);

		return (TangibleObject*) method.executeWithObjectReturn();
	} else
		return ((CraftingManagerImplementation*) _impl)->requestObjectTemplate(stfName);
}

TangibleObject* CraftingManager::requestBlueFrogObjectTemplate(String& stfName) {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);
		method.addAsciiParameter(stfName);

		return (TangibleObject*) method.executeWithObjectReturn();
	} else
		return ((CraftingManagerImplementation*) _impl)->requestBlueFrogObjectTemplate(stfName);
}

String& CraftingManager::generateCraftedSerial() {
	if (_impl == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);

		method.executeWithAsciiReturn(_return_generateCraftedSerial);
		return _return_generateCraftedSerial;
	} else
		return ((CraftingManagerImplementation*) _impl)->generateCraftedSerial();
}

/*
 *	CraftingManagerAdapter
 */

CraftingManagerAdapter::CraftingManagerAdapter(CraftingManagerImplementation* obj) : DistributedObjectAdapter((DistributedObjectServant*) obj) {
}

Packet* CraftingManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		reloadSchematicTable();
		break;
	case 7:
		prepareCraftingSession((Player*) inv->getObjectParameter(), (CraftingTool*) inv->getObjectParameter(), (DraftSchematic*) inv->getObjectParameter());
		break;
	case 8:
		addIngredientToSlot((CraftingTool*) inv->getObjectParameter(), (Player*) inv->getObjectParameter(), (TangibleObject*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter());
		break;
	case 9:
		removeIngredientFromSlot((CraftingTool*) inv->getObjectParameter(), (Player*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter());
		break;
	case 10:
		putComponentBackInInventory((Player*) inv->getObjectParameter(), (Component*) inv->getObjectParameter());
		break;
	case 11:
		nextCraftingStage((CraftingTool*) inv->getObjectParameter(), (Player*) inv->getObjectParameter(), inv->getAsciiParameter(_param2_nextCraftingStage__CraftingTool_Player_String_));
		break;
	case 12:
		craftingCustomization((CraftingTool*) inv->getObjectParameter(), (Player*) inv->getObjectParameter(), inv->getAsciiParameter(_param2_craftingCustomization__CraftingTool_Player_String_int_String_), inv->getSignedIntParameter(), inv->getAsciiParameter(_param4_craftingCustomization__CraftingTool_Player_String_int_String_));
		break;
	case 13:
		handleExperimenting((CraftingTool*) inv->getObjectParameter(), (Player*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getAsciiParameter(_param4_handleExperimenting__CraftingTool_Player_int_int_String_));
		break;
	case 14:
		createPrototype((CraftingTool*) inv->getObjectParameter(), (Player*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter());
		break;
	case 15:
		createSchematic((CraftingTool*) inv->getObjectParameter(), (Player*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case 16:
		resp->insertFloat(getWeightedValue((Player*) inv->getObjectParameter(), (CraftingTool*) inv->getObjectParameter(), (DraftSchematic*) inv->getObjectParameter(), inv->getSignedIntParameter()));
		break;
	case 17:
		resp->insertFloat(getAssemblyPercentage(inv->getFloatParameter()));
		break;
	case 18:
		resp->insertFloat(calculateAssemblyValueModifier((CraftingTool*) inv->getObjectParameter()));
		break;
	case 19:
		addDraftSchematicsFromGroupName((Player*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_addDraftSchematicsFromGroupName__Player_String_));
		break;
	case 20:
		subtractDraftSchematicsFromGroupName((Player*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_subtractDraftSchematicsFromGroupName__Player_String_));
		break;
	case 21:
		refreshDraftSchematics((Player*) inv->getObjectParameter());
		break;
	case 22:
		resp->insertLong(requestObjectTemplate(inv->getAsciiParameter(_param0_requestObjectTemplate__String_))->_getObjectID());
		break;
	case 23:
		resp->insertLong(requestBlueFrogObjectTemplate(inv->getAsciiParameter(_param0_requestBlueFrogObjectTemplate__String_))->_getObjectID());
		break;
	case 24:
		resp->insertAscii(generateCraftedSerial());
		break;
	default:
		return NULL;
	}

	return resp;
}

void CraftingManagerAdapter::reloadSchematicTable() {
	return ((CraftingManagerImplementation*) impl)->reloadSchematicTable();
}

void CraftingManagerAdapter::prepareCraftingSession(Player* player, CraftingTool* craftingTool, DraftSchematic* draftSchematic) {
	return ((CraftingManagerImplementation*) impl)->prepareCraftingSession(player, craftingTool, draftSchematic);
}

void CraftingManagerAdapter::addIngredientToSlot(CraftingTool* craftingTool, Player* player, TangibleObject* tano, int slot, int counter) {
	return ((CraftingManagerImplementation*) impl)->addIngredientToSlot(craftingTool, player, tano, slot, counter);
}

void CraftingManagerAdapter::removeIngredientFromSlot(CraftingTool* craftingTool, Player* player, int slot, int counter) {
	return ((CraftingManagerImplementation*) impl)->removeIngredientFromSlot(craftingTool, player, slot, counter);
}

void CraftingManagerAdapter::putComponentBackInInventory(Player* player, Component* component) {
	return ((CraftingManagerImplementation*) impl)->putComponentBackInInventory(player, component);
}

void CraftingManagerAdapter::nextCraftingStage(CraftingTool* craftingTool, Player* player, String& test) {
	return ((CraftingManagerImplementation*) impl)->nextCraftingStage(craftingTool, player, test);
}

void CraftingManagerAdapter::craftingCustomization(CraftingTool* craftingTool, Player* player, String& name, int condition, String& customizationString) {
	return ((CraftingManagerImplementation*) impl)->craftingCustomization(craftingTool, player, name, condition, customizationString);
}

void CraftingManagerAdapter::handleExperimenting(CraftingTool* craftingTool, Player* player, int counter, int numRowsAttempted, String& expString) {
	return ((CraftingManagerImplementation*) impl)->handleExperimenting(craftingTool, player, counter, numRowsAttempted, expString);
}

void CraftingManagerAdapter::createPrototype(CraftingTool* craftingTool, Player* player, int counter, int practice) {
	return ((CraftingManagerImplementation*) impl)->createPrototype(craftingTool, player, counter, practice);
}

void CraftingManagerAdapter::createSchematic(CraftingTool* craftingTool, Player* player, int counter) {
	return ((CraftingManagerImplementation*) impl)->createSchematic(craftingTool, player, counter);
}

float CraftingManagerAdapter::getWeightedValue(Player* player, CraftingTool* craftingTool, DraftSchematic* draftSchematic, int type) {
	return ((CraftingManagerImplementation*) impl)->getWeightedValue(player, craftingTool, draftSchematic, type);
}

float CraftingManagerAdapter::getAssemblyPercentage(float value) {
	return ((CraftingManagerImplementation*) impl)->getAssemblyPercentage(value);
}

float CraftingManagerAdapter::calculateAssemblyValueModifier(CraftingTool* craftingTool) {
	return ((CraftingManagerImplementation*) impl)->calculateAssemblyValueModifier(craftingTool);
}

void CraftingManagerAdapter::addDraftSchematicsFromGroupName(Player* player, const String& schematicGroupName) {
	return ((CraftingManagerImplementation*) impl)->addDraftSchematicsFromGroupName(player, schematicGroupName);
}

void CraftingManagerAdapter::subtractDraftSchematicsFromGroupName(Player* player, const String& schematicGroupName) {
	return ((CraftingManagerImplementation*) impl)->subtractDraftSchematicsFromGroupName(player, schematicGroupName);
}

void CraftingManagerAdapter::refreshDraftSchematics(Player* player) {
	return ((CraftingManagerImplementation*) impl)->refreshDraftSchematics(player);
}

TangibleObject* CraftingManagerAdapter::requestObjectTemplate(String& stfName) {
	return ((CraftingManagerImplementation*) impl)->requestObjectTemplate(stfName);
}

TangibleObject* CraftingManagerAdapter::requestBlueFrogObjectTemplate(String& stfName) {
	return ((CraftingManagerImplementation*) impl)->requestBlueFrogObjectTemplate(stfName);
}

String& CraftingManagerAdapter::generateCraftedSerial() {
	return ((CraftingManagerImplementation*) impl)->generateCraftedSerial();
}

/*
 *	CraftingManagerHelper
 */

CraftingManagerHelper* CraftingManagerHelper::staticInitializer = CraftingManagerHelper::instance();

CraftingManagerHelper::CraftingManagerHelper() {
	className = "CraftingManager";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void CraftingManagerHelper::finalizeHelper() {
	CraftingManagerHelper::finalize();
}

DistributedObject* CraftingManagerHelper::instantiateObject() {
	return new CraftingManager(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* CraftingManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new CraftingManagerAdapter((CraftingManagerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	CraftingManagerServant
 */

CraftingManagerServant::CraftingManagerServant() {
	_classHelper = CraftingManagerHelper::instance();
}

CraftingManagerServant::~CraftingManagerServant() {
}

void CraftingManagerServant::_setStub(DistributedObjectStub* stub) {
	_this = (CraftingManager*) stub;
}

DistributedObjectStub* CraftingManagerServant::_getStub() {
	return _this;
}

