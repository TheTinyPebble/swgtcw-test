package server.zone.managers.creature;

import engine.log.Logger;

import server.zone.ZoneProcessServerImplementation;
import server.zone.managers.object.ObjectManager;
import server.zone.packets.MessageCallback;
import server.zone.objects.tangible.TangibleObject;
import engine.core.ManagedService;
import server.zone.ZoneServer;
import server.zone.objects.creature.CreatureObject;
import server.zone.objects.creature.NonPlayerCreatureObject;
import server.zone.objects.creature.AiAgent;
import server.zone.Zone;
import server.zone.managers.objectcontroller.ObjectController;
import server.zone.managers.creature.CreatureTemplateManager;

include server.zone.managers.creature.CreatureMap;

class CreatureManager extends ManagedService implements Logger {
	protected transient ZoneProcessServerImplementation processor;
	protected ZoneServer server;
	
	@weakReference
	protected Zone zone;
	
	/*@dereferenced
	protected CreatureMap creatureMap;*/
	
	protected transient CreatureTemplateManager creatureTemplateManager;

	public CreatureManager(Zone planet, ZoneProcessServerImplementation impl) {
		server = planet.getZoneServer();
		processor = impl;
		zone = planet;
		
		Logger.setLoggingName("CreatureManager");
		Logger.setGlobalLogging(true);
		Logger.setLogging(false);
	}
	
	public void initialize() {
		setCreatureTemplateManager();
		loadTrainers();
		loadSingleSpawns();
		loadMissionSpawns();
		loadInformants();
	}
	
	/**
	 * Spawns the specified creature into zone
	 * @pre { this unlocked }
	 * @post { creature is in zone }
	 * @param templateCRC template string crc of the creature to spawn
	 * @param x position x
	 * @param y position y
	 * @param parentID cell object id (optional)
	 * @return returns creature object that has been spawned, NULL on error
	 */
	public native CreatureObject spawnCreature(unsigned int templateCRC, float x, float z, float y, unsigned long parentID = 0);
	public native CreatureObject spawnCreature(unsigned int templateCRC, unsigned int objectCRC, float x, float z, float y, unsigned long parentID = 0);
	public native CreatureObject createCreature(unsigned int templateCRC);
	public native void placeCreature(CreatureObject creature, float x, float z, float y, unsigned long parentID);
	
	/**
	 * @pre { destructor and destructedObject locked }
	 * @post { destructor and destructedObject locked }
	 */
	@local
	public native int notifyDestruction(TangibleObject destructor, AiAgent destructedObject, int condition);
	
	public native void loadDynamicSpawnAreas();
	
	public native void loadSingleSpawns();
	
	public native void loadTrainers();
	
	public native void loadMissionSpawns();
	
	public native void loadInformants();
	
	private native boolean createCreatureChildrenObjects(CreatureObject creature);
	
	/*public synchronized void addCreatureToMap(CreatureObject creature) {
		creatureMap.put(creature.getObjectID(), creature);
	}
	
	public synchronized void removeCreatureFromMap(unsigned long oid) {
		creatureMap.remove(oid);
	}*/
	
	private native void setCreatureTemplateManager();
}