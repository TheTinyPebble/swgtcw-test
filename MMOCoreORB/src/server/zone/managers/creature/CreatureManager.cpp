/*
 *	server/zone/managers/creature/CreatureManager.cpp generated by engine3 IDL compiler 0.60
 */

#include "CreatureManager.h"

#include "server/zone/Zone.h"

#include "server/zone/packets/MessageCallback.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/creature/NonPlayerCreatureObject.h"

#include "server/zone/objects/creature/AiAgent.h"

#include "server/zone/objects/creature/Creature.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/managers/creature/CreatureTemplateManager.h"

/*
 *	CreatureManagerStub
 */

CreatureManager::CreatureManager(Zone* planet) : ZoneManager(DummyConstructorParameter::instance()) {
	CreatureManagerImplementation* _implementation = new CreatureManagerImplementation(planet);
	_impl = _implementation;
	_impl->_setStub(this);
}

CreatureManager::CreatureManager(DummyConstructorParameter* param) : ZoneManager(param) {
}

CreatureManager::~CreatureManager() {
}


void CreatureManager::initialize() {
	CreatureManagerImplementation* _implementation = (CreatureManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		_implementation->initialize();
}

CreatureObject* CreatureManager::spawnCreature(unsigned int templateCRC, float x, float z, float y, unsigned long long parentID) {
	CreatureManagerImplementation* _implementation = (CreatureManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addUnsignedIntParameter(templateCRC);
		method.addFloatParameter(x);
		method.addFloatParameter(z);
		method.addFloatParameter(y);
		method.addUnsignedLongParameter(parentID);

		return (CreatureObject*) method.executeWithObjectReturn();
	} else
		return _implementation->spawnCreature(templateCRC, x, z, y, parentID);
}

CreatureObject* CreatureManager::spawnCreature(unsigned int templateCRC, unsigned int objectCRC, float x, float z, float y, unsigned long long parentID) {
	CreatureManagerImplementation* _implementation = (CreatureManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addUnsignedIntParameter(templateCRC);
		method.addUnsignedIntParameter(objectCRC);
		method.addFloatParameter(x);
		method.addFloatParameter(z);
		method.addFloatParameter(y);
		method.addUnsignedLongParameter(parentID);

		return (CreatureObject*) method.executeWithObjectReturn();
	} else
		return _implementation->spawnCreature(templateCRC, objectCRC, x, z, y, parentID);
}

CreatureObject* CreatureManager::createCreature(unsigned int templateCRC) {
	CreatureManagerImplementation* _implementation = (CreatureManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addUnsignedIntParameter(templateCRC);

		return (CreatureObject*) method.executeWithObjectReturn();
	} else
		return _implementation->createCreature(templateCRC);
}

void CreatureManager::placeCreature(CreatureObject* creature, float x, float z, float y, unsigned long long parentID) {
	CreatureManagerImplementation* _implementation = (CreatureManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(creature);
		method.addFloatParameter(x);
		method.addFloatParameter(z);
		method.addFloatParameter(y);
		method.addUnsignedLongParameter(parentID);

		method.executeWithVoidReturn();
	} else
		_implementation->placeCreature(creature, x, z, y, parentID);
}

int CreatureManager::notifyDestruction(TangibleObject* destructor, AiAgent* destructedObject, int condition) {
	CreatureManagerImplementation* _implementation = (CreatureManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->notifyDestruction(destructor, destructedObject, condition);
}

void CreatureManager::loadSpawnAreas() {
	CreatureManagerImplementation* _implementation = (CreatureManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		method.executeWithVoidReturn();
	} else
		_implementation->loadSpawnAreas();
}

void CreatureManager::loadSingleSpawns() {
	CreatureManagerImplementation* _implementation = (CreatureManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		method.executeWithVoidReturn();
	} else
		_implementation->loadSingleSpawns();
}

void CreatureManager::loadTrainers() {
	CreatureManagerImplementation* _implementation = (CreatureManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		method.executeWithVoidReturn();
	} else
		_implementation->loadTrainers();
}

void CreatureManager::loadMissionSpawns() {
	CreatureManagerImplementation* _implementation = (CreatureManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		method.executeWithVoidReturn();
	} else
		_implementation->loadMissionSpawns();
}

void CreatureManager::loadInformants() {
	CreatureManagerImplementation* _implementation = (CreatureManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		method.executeWithVoidReturn();
	} else
		_implementation->loadInformants();
}

void CreatureManager::spawnRandomCreaturesAround(SceneObject* creature) {
	CreatureManagerImplementation* _implementation = (CreatureManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addObjectParameter(creature);

		method.executeWithVoidReturn();
	} else
		_implementation->spawnRandomCreaturesAround(creature);
}

void CreatureManager::spawnRandomCreature(int number, float x, float z, float y, unsigned long long parentID) {
	CreatureManagerImplementation* _implementation = (CreatureManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addSignedIntParameter(number);
		method.addFloatParameter(x);
		method.addFloatParameter(z);
		method.addFloatParameter(y);
		method.addUnsignedLongParameter(parentID);

		method.executeWithVoidReturn();
	} else
		_implementation->spawnRandomCreature(number, x, z, y, parentID);
}

void CreatureManager::harvest(Creature* creature, PlayerCreature* player, int selectedID) {
	CreatureManagerImplementation* _implementation = (CreatureManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addObjectParameter(creature);
		method.addObjectParameter(player);
		method.addSignedIntParameter(selectedID);

		method.executeWithVoidReturn();
	} else
		_implementation->harvest(creature, player, selectedID);
}

void CreatureManager::addToReservePool(AiAgent* agent) {
	CreatureManagerImplementation* _implementation = (CreatureManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addObjectParameter(agent);

		method.executeWithVoidReturn();
	} else
		_implementation->addToReservePool(agent);
}

int CreatureManager::getSpawnedRandomCreatures() {
	CreatureManagerImplementation* _implementation = (CreatureManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getSpawnedRandomCreatures();
}

DistributedObjectServant* CreatureManager::_getImplementation() {

	_updated = true;
	return _impl;
}

void CreatureManager::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	CreatureManagerImplementation
 */

CreatureManagerImplementation::CreatureManagerImplementation(DummyConstructorParameter* param) : ZoneManagerImplementation(param) {
	_initializeImplementation();
}


CreatureManagerImplementation::~CreatureManagerImplementation() {
}


void CreatureManagerImplementation::finalize() {
}

void CreatureManagerImplementation::_initializeImplementation() {
	_setClassHelper(CreatureManagerHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void CreatureManagerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (CreatureManager*) stub;
	ZoneManagerImplementation::_setStub(stub);
}

DistributedObjectStub* CreatureManagerImplementation::_getStub() {
	return _this;
}

CreatureManagerImplementation::operator const CreatureManager*() {
	return _this;
}

void CreatureManagerImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void CreatureManagerImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void CreatureManagerImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void CreatureManagerImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void CreatureManagerImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void CreatureManagerImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void CreatureManagerImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void CreatureManagerImplementation::_serializationHelperMethod() {
	ZoneManagerImplementation::_serializationHelperMethod();

	_setClassName("CreatureManager");

}

void CreatureManagerImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(CreatureManagerImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool CreatureManagerImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ZoneManagerImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "zone") {
		TypeInfo<ManagedWeakReference<Zone* > >::parseFromBinaryStream(&zone, stream);
		return true;
	}

	if (_name == "spawnAreaMap") {
		TypeInfo<SpawnAreaMap >::parseFromBinaryStream(&spawnAreaMap, stream);
		return true;
	}

	if (_name == "reservePool") {
		TypeInfo<SortedVector<ManagedReference<AiAgent* > > >::parseFromBinaryStream(&reservePool, stream);
		return true;
	}

	if (_name == "spawnedRandomCreatures") {
		TypeInfo<int >::parseFromBinaryStream(&spawnedRandomCreatures, stream);
		return true;
	}


	return false;
}

void CreatureManagerImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = CreatureManagerImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int CreatureManagerImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "zone";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedWeakReference<Zone* > >::toBinaryStream(&zone, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "spawnAreaMap";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<SpawnAreaMap >::toBinaryStream(&spawnAreaMap, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "reservePool";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<SortedVector<ManagedReference<AiAgent* > > >::toBinaryStream(&reservePool, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "spawnedRandomCreatures";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<int >::toBinaryStream(&spawnedRandomCreatures, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 4 + ZoneManagerImplementation::writeObjectMembers(stream);
}

CreatureManagerImplementation::CreatureManagerImplementation(Zone* planet) : ZoneManagerImplementation("CreatureManager") {
	_initializeImplementation();
	// server/zone/managers/creature/CreatureManager.idl(36):  		zone = planet;
	zone = planet;
	// server/zone/managers/creature/CreatureManager.idl(38):  		spawnedRandomCreatures = 0;
	spawnedRandomCreatures = 0;
}

void CreatureManagerImplementation::initialize() {
	// server/zone/managers/creature/CreatureManager.idl(43):  		setCreatureTemplateManager();
	setCreatureTemplateManager();
	// server/zone/managers/creature/CreatureManager.idl(44):  		loadSpawnAreas();
	loadSpawnAreas();
	// server/zone/managers/creature/CreatureManager.idl(45):  		loadTrainers();
	loadTrainers();
	// server/zone/managers/creature/CreatureManager.idl(46):  		loadSingleSpawns();
	loadSingleSpawns();
	// server/zone/managers/creature/CreatureManager.idl(47):  		loadMissionSpawns();
	loadMissionSpawns();
	// server/zone/managers/creature/CreatureManager.idl(48):  		loadInformants();
	loadInformants();
}

void CreatureManagerImplementation::addToReservePool(AiAgent* agent) {
	Locker _locker(_this);
	// server/zone/managers/creature/CreatureManager.idl(97):  
	if (spawnedRandomCreatures > 0){
	// server/zone/managers/creature/CreatureManager.idl(98):  			spawnedRandomCreatures = spawnedRandomCreatures - 1;
	spawnedRandomCreatures = spawnedRandomCreatures - 1;
}

	else {
}
	// server/zone/managers/creature/CreatureManager.idl(103):  		reservePool.put(agent);
	(&reservePool)->put(agent);
}

int CreatureManagerImplementation::getSpawnedRandomCreatures() {
	// server/zone/managers/creature/CreatureManager.idl(107):  		return spawnedRandomCreatures;
	return spawnedRandomCreatures;
}

/*
 *	CreatureManagerAdapter
 */

CreatureManagerAdapter::CreatureManagerAdapter(CreatureManagerImplementation* obj) : ZoneManagerAdapter(obj) {
}

Packet* CreatureManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initialize();
		break;
	case 7:
		resp->insertLong(spawnCreature(inv->getUnsignedIntParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getUnsignedLongParameter())->_getObjectID());
		break;
	case 8:
		resp->insertLong(spawnCreature(inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getUnsignedLongParameter())->_getObjectID());
		break;
	case 9:
		resp->insertLong(createCreature(inv->getUnsignedIntParameter())->_getObjectID());
		break;
	case 10:
		placeCreature((CreatureObject*) inv->getObjectParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getUnsignedLongParameter());
		break;
	case 11:
		loadSpawnAreas();
		break;
	case 12:
		loadSingleSpawns();
		break;
	case 13:
		loadTrainers();
		break;
	case 14:
		loadMissionSpawns();
		break;
	case 15:
		loadInformants();
		break;
	case 16:
		spawnRandomCreaturesAround((SceneObject*) inv->getObjectParameter());
		break;
	case 17:
		spawnRandomCreature(inv->getSignedIntParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getUnsignedLongParameter());
		break;
	case 18:
		harvest((Creature*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case 19:
		addToReservePool((AiAgent*) inv->getObjectParameter());
		break;
	case 20:
		resp->insertSignedInt(getSpawnedRandomCreatures());
		break;
	default:
		return NULL;
	}

	return resp;
}

void CreatureManagerAdapter::initialize() {
	((CreatureManagerImplementation*) impl)->initialize();
}

CreatureObject* CreatureManagerAdapter::spawnCreature(unsigned int templateCRC, float x, float z, float y, unsigned long long parentID) {
	return ((CreatureManagerImplementation*) impl)->spawnCreature(templateCRC, x, z, y, parentID);
}

CreatureObject* CreatureManagerAdapter::spawnCreature(unsigned int templateCRC, unsigned int objectCRC, float x, float z, float y, unsigned long long parentID) {
	return ((CreatureManagerImplementation*) impl)->spawnCreature(templateCRC, objectCRC, x, z, y, parentID);
}

CreatureObject* CreatureManagerAdapter::createCreature(unsigned int templateCRC) {
	return ((CreatureManagerImplementation*) impl)->createCreature(templateCRC);
}

void CreatureManagerAdapter::placeCreature(CreatureObject* creature, float x, float z, float y, unsigned long long parentID) {
	((CreatureManagerImplementation*) impl)->placeCreature(creature, x, z, y, parentID);
}

void CreatureManagerAdapter::loadSpawnAreas() {
	((CreatureManagerImplementation*) impl)->loadSpawnAreas();
}

void CreatureManagerAdapter::loadSingleSpawns() {
	((CreatureManagerImplementation*) impl)->loadSingleSpawns();
}

void CreatureManagerAdapter::loadTrainers() {
	((CreatureManagerImplementation*) impl)->loadTrainers();
}

void CreatureManagerAdapter::loadMissionSpawns() {
	((CreatureManagerImplementation*) impl)->loadMissionSpawns();
}

void CreatureManagerAdapter::loadInformants() {
	((CreatureManagerImplementation*) impl)->loadInformants();
}

void CreatureManagerAdapter::spawnRandomCreaturesAround(SceneObject* creature) {
	((CreatureManagerImplementation*) impl)->spawnRandomCreaturesAround(creature);
}

void CreatureManagerAdapter::spawnRandomCreature(int number, float x, float z, float y, unsigned long long parentID) {
	((CreatureManagerImplementation*) impl)->spawnRandomCreature(number, x, z, y, parentID);
}

void CreatureManagerAdapter::harvest(Creature* creature, PlayerCreature* player, int selectedID) {
	((CreatureManagerImplementation*) impl)->harvest(creature, player, selectedID);
}

void CreatureManagerAdapter::addToReservePool(AiAgent* agent) {
	((CreatureManagerImplementation*) impl)->addToReservePool(agent);
}

int CreatureManagerAdapter::getSpawnedRandomCreatures() {
	return ((CreatureManagerImplementation*) impl)->getSpawnedRandomCreatures();
}

/*
 *	CreatureManagerHelper
 */

CreatureManagerHelper* CreatureManagerHelper::staticInitializer = CreatureManagerHelper::instance();

CreatureManagerHelper::CreatureManagerHelper() {
	className = "CreatureManager";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void CreatureManagerHelper::finalizeHelper() {
	CreatureManagerHelper::finalize();
}

DistributedObject* CreatureManagerHelper::instantiateObject() {
	return new CreatureManager(DummyConstructorParameter::instance());
}

DistributedObjectServant* CreatureManagerHelper::instantiateServant() {
	return new CreatureManagerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* CreatureManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new CreatureManagerAdapter((CreatureManagerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

