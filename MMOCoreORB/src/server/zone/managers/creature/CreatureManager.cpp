/*
 *	server/zone/managers/creature/CreatureManager.cpp generated by engine3 IDL compiler 0.60
 */

#include "CreatureManager.h"

#include "server/zone/ZoneProcessServerImplementation.h"

#include "server/zone/managers/object/ObjectManager.h"

#include "server/zone/packets/MessageCallback.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/creature/NonPlayerCreatureObject.h"

#include "server/zone/objects/creature/AiAgent.h"

#include "server/zone/Zone.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

#include "server/zone/managers/creature/CreatureTemplateManager.h"

/*
 *	CreatureManagerStub
 */

CreatureManager::CreatureManager(Zone* planet, ZoneProcessServerImplementation* impl) : ManagedService(DummyConstructorParameter::instance()) {
	CreatureManagerImplementation* _implementation = new CreatureManagerImplementation(planet, impl);
	_impl = _implementation;
	_impl->_setStub(this);
}

CreatureManager::CreatureManager(DummyConstructorParameter* param) : ManagedService(param) {
}

CreatureManager::~CreatureManager() {
}


void CreatureManager::initialize() {
	CreatureManagerImplementation* _implementation = (CreatureManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		_implementation->initialize();
}

CreatureObject* CreatureManager::spawnCreature(unsigned int templateCRC, float x, float z, float y, unsigned long long parentID) {
	CreatureManagerImplementation* _implementation = (CreatureManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addUnsignedIntParameter(templateCRC);
		method.addFloatParameter(x);
		method.addFloatParameter(z);
		method.addFloatParameter(y);
		method.addUnsignedLongParameter(parentID);

		return (CreatureObject*) method.executeWithObjectReturn();
	} else
		return _implementation->spawnCreature(templateCRC, x, z, y, parentID);
}

CreatureObject* CreatureManager::spawnCreature(unsigned int templateCRC, unsigned int objectCRC, float x, float z, float y, unsigned long long parentID) {
	CreatureManagerImplementation* _implementation = (CreatureManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addUnsignedIntParameter(templateCRC);
		method.addUnsignedIntParameter(objectCRC);
		method.addFloatParameter(x);
		method.addFloatParameter(z);
		method.addFloatParameter(y);
		method.addUnsignedLongParameter(parentID);

		return (CreatureObject*) method.executeWithObjectReturn();
	} else
		return _implementation->spawnCreature(templateCRC, objectCRC, x, z, y, parentID);
}

CreatureObject* CreatureManager::createCreature(unsigned int templateCRC) {
	CreatureManagerImplementation* _implementation = (CreatureManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addUnsignedIntParameter(templateCRC);

		return (CreatureObject*) method.executeWithObjectReturn();
	} else
		return _implementation->createCreature(templateCRC);
}

void CreatureManager::placeCreature(CreatureObject* creature, float x, float z, float y, unsigned long long parentID) {
	CreatureManagerImplementation* _implementation = (CreatureManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(creature);
		method.addFloatParameter(x);
		method.addFloatParameter(z);
		method.addFloatParameter(y);
		method.addUnsignedLongParameter(parentID);

		method.executeWithVoidReturn();
	} else
		_implementation->placeCreature(creature, x, z, y, parentID);
}

int CreatureManager::notifyDestruction(TangibleObject* destructor, AiAgent* destructedObject, int condition) {
	CreatureManagerImplementation* _implementation = (CreatureManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->notifyDestruction(destructor, destructedObject, condition);
}

void CreatureManager::loadDynamicSpawnAreas() {
	CreatureManagerImplementation* _implementation = (CreatureManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		method.executeWithVoidReturn();
	} else
		_implementation->loadDynamicSpawnAreas();
}

void CreatureManager::loadSingleSpawns() {
	CreatureManagerImplementation* _implementation = (CreatureManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		method.executeWithVoidReturn();
	} else
		_implementation->loadSingleSpawns();
}

void CreatureManager::loadTrainers() {
	CreatureManagerImplementation* _implementation = (CreatureManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		method.executeWithVoidReturn();
	} else
		_implementation->loadTrainers();
}

void CreatureManager::loadMissionSpawns() {
	CreatureManagerImplementation* _implementation = (CreatureManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		method.executeWithVoidReturn();
	} else
		_implementation->loadMissionSpawns();
}

void CreatureManager::loadInformants() {
	CreatureManagerImplementation* _implementation = (CreatureManagerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		method.executeWithVoidReturn();
	} else
		_implementation->loadInformants();
}

DistributedObjectServant* CreatureManager::_getImplementation() {
	return _impl;}

void CreatureManager::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;}

/*
 *	CreatureManagerImplementation
 */

CreatureManagerImplementation::CreatureManagerImplementation(DummyConstructorParameter* param) : ManagedServiceImplementation(param) {
	_initializeImplementation();
}


CreatureManagerImplementation::~CreatureManagerImplementation() {
}


void CreatureManagerImplementation::finalize() {
}

void CreatureManagerImplementation::_initializeImplementation() {
	_setClassHelper(CreatureManagerHelper::instance());

	_serializationHelperMethod();
}

void CreatureManagerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (CreatureManager*) stub;
	ManagedServiceImplementation::_setStub(stub);
}

DistributedObjectStub* CreatureManagerImplementation::_getStub() {
	return _this;
}

CreatureManagerImplementation::operator const CreatureManager*() {
	return _this;
}

void CreatureManagerImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void CreatureManagerImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void CreatureManagerImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void CreatureManagerImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void CreatureManagerImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void CreatureManagerImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void CreatureManagerImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void CreatureManagerImplementation::_serializationHelperMethod() {
	ManagedServiceImplementation::_serializationHelperMethod();

	_setClassName("CreatureManager");

	addSerializableVariable("server", &server);
	addSerializableVariable("zone", &zone);
}

CreatureManagerImplementation::CreatureManagerImplementation(Zone* planet, ZoneProcessServerImplementation* impl) {
	_initializeImplementation();
	// server/zone/managers/creature/CreatureManager.idl(33):  		server = planet.getZoneServer();
	server = planet->getZoneServer();
	// server/zone/managers/creature/CreatureManager.idl(34):  		processor = impl;
	processor = impl;
	// server/zone/managers/creature/CreatureManager.idl(35):  		zone = planet;
	zone = planet;
	// server/zone/managers/creature/CreatureManager.idl(37):  		Logger.setLoggingName("CreatureManager");
	Logger::setLoggingName("CreatureManager");
	// server/zone/managers/creature/CreatureManager.idl(38):  		Logger.setGlobalLogging(true);
	Logger::setGlobalLogging(true);
	// server/zone/managers/creature/CreatureManager.idl(39):  		Logger.setLogging(false);
	Logger::setLogging(false);
}

void CreatureManagerImplementation::initialize() {
	// server/zone/managers/creature/CreatureManager.idl(43):  		setCreatureTemplateManager();
	setCreatureTemplateManager();
	// server/zone/managers/creature/CreatureManager.idl(44):  		loadTrainers();
	loadTrainers();
	// server/zone/managers/creature/CreatureManager.idl(45):  		loadSingleSpawns();
	loadSingleSpawns();
	// server/zone/managers/creature/CreatureManager.idl(46):  		loadMissionSpawns();
	loadMissionSpawns();
	// server/zone/managers/creature/CreatureManager.idl(47):  		loadInformants();
	loadInformants();
}

/*
 *	CreatureManagerAdapter
 */

CreatureManagerAdapter::CreatureManagerAdapter(CreatureManagerImplementation* obj) : ManagedServiceAdapter(obj) {
}

Packet* CreatureManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initialize();
		break;
	case 7:
		resp->insertLong(spawnCreature(inv->getUnsignedIntParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getUnsignedLongParameter())->_getObjectID());
		break;
	case 8:
		resp->insertLong(spawnCreature(inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getUnsignedLongParameter())->_getObjectID());
		break;
	case 9:
		resp->insertLong(createCreature(inv->getUnsignedIntParameter())->_getObjectID());
		break;
	case 10:
		placeCreature((CreatureObject*) inv->getObjectParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getUnsignedLongParameter());
		break;
	case 11:
		loadDynamicSpawnAreas();
		break;
	case 12:
		loadSingleSpawns();
		break;
	case 13:
		loadTrainers();
		break;
	case 14:
		loadMissionSpawns();
		break;
	case 15:
		loadInformants();
		break;
	default:
		return NULL;
	}

	return resp;
}

void CreatureManagerAdapter::initialize() {
	((CreatureManagerImplementation*) impl)->initialize();
}

CreatureObject* CreatureManagerAdapter::spawnCreature(unsigned int templateCRC, float x, float z, float y, unsigned long long parentID) {
	return ((CreatureManagerImplementation*) impl)->spawnCreature(templateCRC, x, z, y, parentID);
}

CreatureObject* CreatureManagerAdapter::spawnCreature(unsigned int templateCRC, unsigned int objectCRC, float x, float z, float y, unsigned long long parentID) {
	return ((CreatureManagerImplementation*) impl)->spawnCreature(templateCRC, objectCRC, x, z, y, parentID);
}

CreatureObject* CreatureManagerAdapter::createCreature(unsigned int templateCRC) {
	return ((CreatureManagerImplementation*) impl)->createCreature(templateCRC);
}

void CreatureManagerAdapter::placeCreature(CreatureObject* creature, float x, float z, float y, unsigned long long parentID) {
	((CreatureManagerImplementation*) impl)->placeCreature(creature, x, z, y, parentID);
}

void CreatureManagerAdapter::loadDynamicSpawnAreas() {
	((CreatureManagerImplementation*) impl)->loadDynamicSpawnAreas();
}

void CreatureManagerAdapter::loadSingleSpawns() {
	((CreatureManagerImplementation*) impl)->loadSingleSpawns();
}

void CreatureManagerAdapter::loadTrainers() {
	((CreatureManagerImplementation*) impl)->loadTrainers();
}

void CreatureManagerAdapter::loadMissionSpawns() {
	((CreatureManagerImplementation*) impl)->loadMissionSpawns();
}

void CreatureManagerAdapter::loadInformants() {
	((CreatureManagerImplementation*) impl)->loadInformants();
}

/*
 *	CreatureManagerHelper
 */

CreatureManagerHelper* CreatureManagerHelper::staticInitializer = CreatureManagerHelper::instance();

CreatureManagerHelper::CreatureManagerHelper() {
	className = "CreatureManager";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void CreatureManagerHelper::finalizeHelper() {
	CreatureManagerHelper::finalize();
}

DistributedObject* CreatureManagerHelper::instantiateObject() {
	return new CreatureManager(DummyConstructorParameter::instance());
}

DistributedObjectServant* CreatureManagerHelper::instantiateServant() {
	return new CreatureManagerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* CreatureManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new CreatureManagerAdapter((CreatureManagerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

