/*
 *	server/zone/ZoneClientSession.cpp generated by engine3 IDL compiler 0.60
 */

#include "ZoneClientSession.h"

#include "server/login/account/Account.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/ZoneServer.h"

/*
 *	ZoneClientSessionStub
 */

ZoneClientSession::ZoneClientSession(BaseClientProxy* session) : ManagedObject(DummyConstructorParameter::instance()) {
	ZoneClientSessionImplementation* _implementation = new ZoneClientSessionImplementation(session);
	_impl = _implementation;
	_impl->_setStub(this);
}

ZoneClientSession::ZoneClientSession(DummyConstructorParameter* param) : ManagedObject(param) {
}

ZoneClientSession::~ZoneClientSession() {
}


void ZoneClientSession::disconnect() {
	ZoneClientSessionImplementation* _implementation = (ZoneClientSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		_implementation->disconnect();
}

void ZoneClientSession::disconnect(bool doLock) {
	ZoneClientSessionImplementation* _implementation = (ZoneClientSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		_implementation->disconnect(doLock);
}

void ZoneClientSession::sendMessage(BasePacket* msg) {
	ZoneClientSessionImplementation* _implementation = (ZoneClientSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(msg);

		method.executeWithVoidReturn();
	} else
		_implementation->sendMessage(msg);
}

void ZoneClientSession::balancePacketCheckupTime() {
	ZoneClientSessionImplementation* _implementation = (ZoneClientSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		method.executeWithVoidReturn();
	} else
		_implementation->balancePacketCheckupTime();
}

void ZoneClientSession::resetPacketCheckupTime() {
	ZoneClientSessionImplementation* _implementation = (ZoneClientSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		method.executeWithVoidReturn();
	} else
		_implementation->resetPacketCheckupTime();
}

void ZoneClientSession::closeConnection(bool lockPlayer, bool doLock) {
	ZoneClientSessionImplementation* _implementation = (ZoneClientSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addBooleanParameter(lockPlayer);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		_implementation->closeConnection(lockPlayer, doLock);
}

void ZoneClientSession::info(const String& msg, bool force) {
	ZoneClientSessionImplementation* _implementation = (ZoneClientSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addAsciiParameter(msg);
		method.addBooleanParameter(force);

		method.executeWithVoidReturn();
	} else
		_implementation->info(msg, force);
}

void ZoneClientSession::error(const String& msg) {
	ZoneClientSessionImplementation* _implementation = (ZoneClientSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addAsciiParameter(msg);

		method.executeWithVoidReturn();
	} else
		_implementation->error(msg);
}

String ZoneClientSession::getAddress() {
	ZoneClientSessionImplementation* _implementation = (ZoneClientSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		method.executeWithAsciiReturn(_return_getAddress);
		return _return_getAddress;
	} else
		return _implementation->getAddress();
}

void ZoneClientSession::setPlayer(SceneObject* playerCreature) {
	ZoneClientSessionImplementation* _implementation = (ZoneClientSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addObjectParameter(playerCreature);

		method.executeWithVoidReturn();
	} else
		_implementation->setPlayer(playerCreature);
}

void ZoneClientSession::setSessionID(unsigned int id) {
	ZoneClientSessionImplementation* _implementation = (ZoneClientSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addUnsignedIntParameter(id);

		method.executeWithVoidReturn();
	} else
		_implementation->setSessionID(id);
}

void ZoneClientSession::setAccount(Account* acc) {
	ZoneClientSessionImplementation* _implementation = (ZoneClientSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addObjectParameter(acc);

		method.executeWithVoidReturn();
	} else
		_implementation->setAccount(acc);
}

BaseClientProxy* ZoneClientSession::getSession() {
	ZoneClientSessionImplementation* _implementation = (ZoneClientSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getSession();
}

SceneObject* ZoneClientSession::getPlayer() {
	ZoneClientSessionImplementation* _implementation = (ZoneClientSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return _implementation->getPlayer();
}

unsigned int ZoneClientSession::getSessionID() {
	ZoneClientSessionImplementation* _implementation = (ZoneClientSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getSessionID();
}

Account* ZoneClientSession::getAccount() {
	ZoneClientSessionImplementation* _implementation = (ZoneClientSessionImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);

		return (Account*) method.executeWithObjectReturn();
	} else
		return _implementation->getAccount();
}

DistributedObjectServant* ZoneClientSession::_getImplementation() {

	_updated = true;
	return _impl;
}

void ZoneClientSession::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	ZoneClientSessionImplementation
 */

ZoneClientSessionImplementation::ZoneClientSessionImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}


ZoneClientSessionImplementation::~ZoneClientSessionImplementation() {
}


void ZoneClientSessionImplementation::finalize() {
}

void ZoneClientSessionImplementation::_initializeImplementation() {
	_setClassHelper(ZoneClientSessionHelper::instance());

	_serializationHelperMethod();
	_serializationHelperMethod();
}

void ZoneClientSessionImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (ZoneClientSession*) stub;
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* ZoneClientSessionImplementation::_getStub() {
	return _this;
}

ZoneClientSessionImplementation::operator const ZoneClientSession*() {
	return _this;
}

void ZoneClientSessionImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void ZoneClientSessionImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void ZoneClientSessionImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void ZoneClientSessionImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void ZoneClientSessionImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void ZoneClientSessionImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void ZoneClientSessionImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void ZoneClientSessionImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("ZoneClientSession");

}

void ZoneClientSessionImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(ZoneClientSessionImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ZoneClientSessionImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ManagedObjectImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "player") {
		TypeInfo<ManagedWeakReference<SceneObject* > >::parseFromBinaryStream(&player, stream);
		return true;
	}

	if (_name == "sessionID") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&sessionID, stream);
		return true;
	}

	if (_name == "account") {
		TypeInfo<ManagedReference<Account* > >::parseFromBinaryStream(&account, stream);
		return true;
	}

	if (_name == "disconnecting") {
		TypeInfo<bool >::parseFromBinaryStream(&disconnecting, stream);
		return true;
	}


	return false;
}

void ZoneClientSessionImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ZoneClientSessionImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ZoneClientSessionImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "player";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedWeakReference<SceneObject* > >::toBinaryStream(&player, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "sessionID";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned int >::toBinaryStream(&sessionID, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "account";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<ManagedReference<Account* > >::toBinaryStream(&account, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "disconnecting";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<bool >::toBinaryStream(&disconnecting, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return 4 + ManagedObjectImplementation::writeObjectMembers(stream);
}

void ZoneClientSessionImplementation::setPlayer(SceneObject* playerCreature) {
	// server/zone/ZoneClientSession.idl(100):  		player 
	if (playerCreature != player){
	// server/zone/ZoneClientSession.idl(101):  
	if (playerCreature == NULL && player != NULL){
	// server/zone/ZoneClientSession.idl(102):  				ZoneServer zoneServer = player.getZoneServer();
	ZoneServer* zoneServer = player->getZoneServer();
	// server/zone/ZoneClientSession.idl(104):  				zoneServer.decreaseOnlinePlayers();
	zoneServer->decreaseOnlinePlayers();
}

	else 	// server/zone/ZoneClientSession.idl(105):  		}
	if (playerCreature != player){
	// server/zone/ZoneClientSession.idl(106):  				ZoneServer zoneServer = playerCreature.getZoneServer();
	ZoneServer* zoneServer = playerCreature->getZoneServer();
	// server/zone/ZoneClientSession.idl(108):  				zoneServer.increaseOnlinePlayers();
	zoneServer->increaseOnlinePlayers();
}
}
	// server/zone/ZoneClientSession.idl(112):  = playerCreature;
	player = playerCreature;
}

void ZoneClientSessionImplementation::setSessionID(unsigned int id) {
	// server/zone/ZoneClientSession.idl(116):  		sessionID = id;
	sessionID = id;
}

void ZoneClientSessionImplementation::setAccount(Account* acc) {
	// server/zone/ZoneClientSession.idl(120):  		account = acc;
	account = acc;
}

SceneObject* ZoneClientSessionImplementation::getPlayer() {
	// server/zone/ZoneClientSession.idl(127):  		return player;
	return player;
}

unsigned int ZoneClientSessionImplementation::getSessionID() {
	// server/zone/ZoneClientSession.idl(131):  		return sessionID;
	return sessionID;
}

Account* ZoneClientSessionImplementation::getAccount() {
	// server/zone/ZoneClientSession.idl(135):  		return account;
	return account;
}

/*
 *	ZoneClientSessionAdapter
 */

ZoneClientSessionAdapter::ZoneClientSessionAdapter(ZoneClientSessionImplementation* obj) : ManagedObjectAdapter(obj) {
}

Packet* ZoneClientSessionAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		disconnect();
		break;
	case 7:
		disconnect(inv->getBooleanParameter());
		break;
	case 8:
		sendMessage((BasePacket*) inv->getObjectParameter());
		break;
	case 9:
		balancePacketCheckupTime();
		break;
	case 10:
		resetPacketCheckupTime();
		break;
	case 11:
		closeConnection(inv->getBooleanParameter(), inv->getBooleanParameter());
		break;
	case 12:
		info(inv->getAsciiParameter(_param0_info__String_bool_), inv->getBooleanParameter());
		break;
	case 13:
		error(inv->getAsciiParameter(_param0_error__String_));
		break;
	case 14:
		resp->insertAscii(getAddress());
		break;
	case 15:
		setPlayer((SceneObject*) inv->getObjectParameter());
		break;
	case 16:
		setSessionID(inv->getUnsignedIntParameter());
		break;
	case 17:
		setAccount((Account*) inv->getObjectParameter());
		break;
	case 18:
		resp->insertLong(getPlayer()->_getObjectID());
		break;
	case 19:
		resp->insertInt(getSessionID());
		break;
	case 20:
		resp->insertLong(getAccount()->_getObjectID());
		break;
	default:
		return NULL;
	}

	return resp;
}

void ZoneClientSessionAdapter::disconnect() {
	((ZoneClientSessionImplementation*) impl)->disconnect();
}

void ZoneClientSessionAdapter::disconnect(bool doLock) {
	((ZoneClientSessionImplementation*) impl)->disconnect(doLock);
}

void ZoneClientSessionAdapter::sendMessage(BasePacket* msg) {
	((ZoneClientSessionImplementation*) impl)->sendMessage(msg);
}

void ZoneClientSessionAdapter::balancePacketCheckupTime() {
	((ZoneClientSessionImplementation*) impl)->balancePacketCheckupTime();
}

void ZoneClientSessionAdapter::resetPacketCheckupTime() {
	((ZoneClientSessionImplementation*) impl)->resetPacketCheckupTime();
}

void ZoneClientSessionAdapter::closeConnection(bool lockPlayer, bool doLock) {
	((ZoneClientSessionImplementation*) impl)->closeConnection(lockPlayer, doLock);
}

void ZoneClientSessionAdapter::info(const String& msg, bool force) {
	((ZoneClientSessionImplementation*) impl)->info(msg, force);
}

void ZoneClientSessionAdapter::error(const String& msg) {
	((ZoneClientSessionImplementation*) impl)->error(msg);
}

String ZoneClientSessionAdapter::getAddress() {
	return ((ZoneClientSessionImplementation*) impl)->getAddress();
}

void ZoneClientSessionAdapter::setPlayer(SceneObject* playerCreature) {
	((ZoneClientSessionImplementation*) impl)->setPlayer(playerCreature);
}

void ZoneClientSessionAdapter::setSessionID(unsigned int id) {
	((ZoneClientSessionImplementation*) impl)->setSessionID(id);
}

void ZoneClientSessionAdapter::setAccount(Account* acc) {
	((ZoneClientSessionImplementation*) impl)->setAccount(acc);
}

SceneObject* ZoneClientSessionAdapter::getPlayer() {
	return ((ZoneClientSessionImplementation*) impl)->getPlayer();
}

unsigned int ZoneClientSessionAdapter::getSessionID() {
	return ((ZoneClientSessionImplementation*) impl)->getSessionID();
}

Account* ZoneClientSessionAdapter::getAccount() {
	return ((ZoneClientSessionImplementation*) impl)->getAccount();
}

/*
 *	ZoneClientSessionHelper
 */

ZoneClientSessionHelper* ZoneClientSessionHelper::staticInitializer = ZoneClientSessionHelper::instance();

ZoneClientSessionHelper::ZoneClientSessionHelper() {
	className = "ZoneClientSession";

	Core::getObjectBroker()->registerClass(className, this);
}

void ZoneClientSessionHelper::finalizeHelper() {
	ZoneClientSessionHelper::finalize();
}

DistributedObject* ZoneClientSessionHelper::instantiateObject() {
	return new ZoneClientSession(DummyConstructorParameter::instance());
}

DistributedObjectServant* ZoneClientSessionHelper::instantiateServant() {
	return new ZoneClientSessionImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ZoneClientSessionHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ZoneClientSessionAdapter((ZoneClientSessionImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

