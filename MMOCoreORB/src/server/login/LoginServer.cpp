/*
 *	server/login/LoginServer.cpp generated by engine3 IDL compiler 0.60
 */

#include "LoginServer.h"

#include "server/conf/ConfigManager.h"

#include "server/login/LoginClient.h"

#include "server/login/LoginProcessServerImplementation.h"

#include "server/login/LoginHandler.h"

#include "server/login/account/Account.h"

#include "server/login/account/AccountManager.h"

#include "server/login/packets/LoginClusterStatus.h"

#include "server/login/packets/LoginEnumCluster.h"

/*
 *	LoginServerStub
 */

enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 6,RPC_INITIALIZE__,RPC_SHUTDOWN__,RPC_STARTMANAGERS__,RPC_STOPMANAGERS__,RPC_START__INT_INT_,RPC_STOP__,RPC_PRINTINFO__,RPC_POPULATEGALAXYLIST__,RPC_GETACCOUNT__INT_,RPC_GETLOGINENUMCLUSTERMESSAGE__,RPC_GETLOGINCLUSTERSTATUSMESSAGE__};

LoginServer::LoginServer(ConfigManager* config) : ManagedService(DummyConstructorParameter::instance()) {
	LoginServerImplementation* _implementation = new LoginServerImplementation(config);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("LoginServer");
}

LoginServer::LoginServer(DummyConstructorParameter* param) : ManagedService(param) {
	_setClassName("LoginServer");
}

LoginServer::~LoginServer() {
}



void LoginServer::initializeTransientMembers() {
	LoginServerImplementation* _implementation = static_cast<LoginServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

LoginClient* LoginServer::createConnection(Socket* sock, SocketAddress& addr) {
	LoginServerImplementation* _implementation = static_cast<LoginServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->createConnection(sock, addr);
}

void LoginServer::initialize() {
	LoginServerImplementation* _implementation = static_cast<LoginServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZE__);

		method.executeWithVoidReturn();
	} else
		_implementation->initialize();
}

void LoginServer::shutdown() {
	LoginServerImplementation* _implementation = static_cast<LoginServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SHUTDOWN__);

		method.executeWithVoidReturn();
	} else
		_implementation->shutdown();
}

void LoginServer::startManagers() {
	LoginServerImplementation* _implementation = static_cast<LoginServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_STARTMANAGERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->startManagers();
}

void LoginServer::stopManagers() {
	LoginServerImplementation* _implementation = static_cast<LoginServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_STOPMANAGERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->stopManagers();
}

void LoginServer::start(int p, int mconn) {
	LoginServerImplementation* _implementation = static_cast<LoginServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_START__INT_INT_);
		method.addSignedIntParameter(p);
		method.addSignedIntParameter(mconn);

		method.executeWithVoidReturn();
	} else
		_implementation->start(p, mconn);
}

void LoginServer::stop() {
	LoginServerImplementation* _implementation = static_cast<LoginServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_STOP__);

		method.executeWithVoidReturn();
	} else
		_implementation->stop();
}

void LoginServer::handleMessage(LoginClient* client, Packet* message) {
	LoginServerImplementation* _implementation = static_cast<LoginServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->handleMessage(client, message);
}

void LoginServer::processMessage(Message* message) {
	LoginServerImplementation* _implementation = static_cast<LoginServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->processMessage(message);
}

bool LoginServer::handleError(ServiceClient* client, Exception& e) {
	LoginServerImplementation* _implementation = static_cast<LoginServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->handleError(client, e);
}

void LoginServer::printInfo() {
	LoginServerImplementation* _implementation = static_cast<LoginServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_PRINTINFO__);

		method.executeWithVoidReturn();
	} else
		_implementation->printInfo();
}

void LoginServer::populateGalaxyList() {
	LoginServerImplementation* _implementation = static_cast<LoginServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_POPULATEGALAXYLIST__);

		method.executeWithVoidReturn();
	} else
		_implementation->populateGalaxyList();
}

AccountManager* LoginServer::getAccountManager() {
	LoginServerImplementation* _implementation = static_cast<LoginServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getAccountManager();
}

Account* LoginServer::getAccount(unsigned int accountID) {
	LoginServerImplementation* _implementation = static_cast<LoginServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETACCOUNT__INT_);
		method.addUnsignedIntParameter(accountID);

		return static_cast<Account*>(method.executeWithObjectReturn());
	} else
		return _implementation->getAccount(accountID);
}

LoginClient* LoginServer::getLoginClient(ServiceClient* session) {
	LoginServerImplementation* _implementation = static_cast<LoginServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getLoginClient(session);
}

LoginEnumCluster* LoginServer::getLoginEnumClusterMessage() {
	LoginServerImplementation* _implementation = static_cast<LoginServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETLOGINENUMCLUSTERMESSAGE__);

		return static_cast<LoginEnumCluster*>(method.executeWithObjectReturn());
	} else
		return _implementation->getLoginEnumClusterMessage();
}

LoginClusterStatus* LoginServer::getLoginClusterStatusMessage() {
	LoginServerImplementation* _implementation = static_cast<LoginServerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETLOGINCLUSTERSTATUSMESSAGE__);

		return static_cast<LoginClusterStatus*>(method.executeWithObjectReturn());
	} else
		return _implementation->getLoginClusterStatusMessage();
}

DistributedObjectServant* LoginServer::_getImplementation() {

	_updated = true;
	return _impl;
}

void LoginServer::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	LoginServerImplementation
 */

LoginServerImplementation::LoginServerImplementation(DummyConstructorParameter* param) : ManagedServiceImplementation(param) {
	_initializeImplementation();
}


LoginServerImplementation::~LoginServerImplementation() {
}


void LoginServerImplementation::finalize() {
}

void LoginServerImplementation::_initializeImplementation() {
	_setClassHelper(LoginServerHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void LoginServerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<LoginServer*>(stub);
	ManagedServiceImplementation::_setStub(stub);
}

DistributedObjectStub* LoginServerImplementation::_getStub() {
	return _this.get();
}

LoginServerImplementation::operator const LoginServer*() {
	return _this.get();
}

void LoginServerImplementation::lock(bool doLock) {
	_this.get()->lock(doLock);
}

void LoginServerImplementation::lock(ManagedObject* obj) {
	_this.get()->lock(obj);
}

void LoginServerImplementation::rlock(bool doLock) {
	_this.get()->rlock(doLock);
}

void LoginServerImplementation::wlock(bool doLock) {
	_this.get()->wlock(doLock);
}

void LoginServerImplementation::wlock(ManagedObject* obj) {
	_this.get()->wlock(obj);
}

void LoginServerImplementation::unlock(bool doLock) {
	_this.get()->unlock(doLock);
}

void LoginServerImplementation::runlock(bool doLock) {
	_this.get()->runlock(doLock);
}

void LoginServerImplementation::_serializationHelperMethod() {
	ManagedServiceImplementation::_serializationHelperMethod();

	_setClassName("LoginServer");

}

void LoginServerImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(LoginServerImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool LoginServerImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ManagedServiceImplementation::readObjectMember(stream, _name))
		return true;


	return false;
}

void LoginServerImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = LoginServerImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int LoginServerImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedServiceImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint32 _totalSize;

	return _count + 0;
}

AccountManager* LoginServerImplementation::getAccountManager() {
	// server/login/LoginServer.idl():  		return accountManager;
	return accountManager;
}

LoginEnumCluster* LoginServerImplementation::getLoginEnumClusterMessage() {
	// server/login/LoginServer.idl():  		return (LoginEnumCluster) enumClusterMessage.clone();
	return (LoginEnumCluster*) enumClusterMessage->clone();
}

LoginClusterStatus* LoginServerImplementation::getLoginClusterStatusMessage() {
	// server/login/LoginServer.idl():  		return (LoginClusterStatus) clusterStatusMessage.clone();
	return (LoginClusterStatus*) clusterStatusMessage->clone();
}

/*
 *	LoginServerAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


LoginServerAdapter::LoginServerAdapter(LoginServer* obj) : ManagedServiceAdapter(obj) {
}

void LoginServerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			initializeTransientMembers();
		}
		break;
	case RPC_INITIALIZE__:
		{
			initialize();
		}
		break;
	case RPC_SHUTDOWN__:
		{
			shutdown();
		}
		break;
	case RPC_STARTMANAGERS__:
		{
			startManagers();
		}
		break;
	case RPC_STOPMANAGERS__:
		{
			stopManagers();
		}
		break;
	case RPC_START__INT_INT_:
		{
			start(inv->getSignedIntParameter(), inv->getSignedIntParameter());
		}
		break;
	case RPC_STOP__:
		{
			stop();
		}
		break;
	case RPC_PRINTINFO__:
		{
			printInfo();
		}
		break;
	case RPC_POPULATEGALAXYLIST__:
		{
			populateGalaxyList();
		}
		break;
	case RPC_GETACCOUNT__INT_:
		{
			resp->insertLong(getAccount(inv->getUnsignedIntParameter())->_getObjectID());
		}
		break;
	case RPC_GETLOGINENUMCLUSTERMESSAGE__:
		{
			resp->insertLong(getLoginEnumClusterMessage()->_getObjectID());
		}
		break;
	case RPC_GETLOGINCLUSTERSTATUSMESSAGE__:
		{
			resp->insertLong(getLoginClusterStatusMessage()->_getObjectID());
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void LoginServerAdapter::initializeTransientMembers() {
	(static_cast<LoginServer*>(stub))->initializeTransientMembers();
}

void LoginServerAdapter::initialize() {
	(static_cast<LoginServer*>(stub))->initialize();
}

void LoginServerAdapter::shutdown() {
	(static_cast<LoginServer*>(stub))->shutdown();
}

void LoginServerAdapter::startManagers() {
	(static_cast<LoginServer*>(stub))->startManagers();
}

void LoginServerAdapter::stopManagers() {
	(static_cast<LoginServer*>(stub))->stopManagers();
}

void LoginServerAdapter::start(int p, int mconn) {
	(static_cast<LoginServer*>(stub))->start(p, mconn);
}

void LoginServerAdapter::stop() {
	(static_cast<LoginServer*>(stub))->stop();
}

void LoginServerAdapter::printInfo() {
	(static_cast<LoginServer*>(stub))->printInfo();
}

void LoginServerAdapter::populateGalaxyList() {
	(static_cast<LoginServer*>(stub))->populateGalaxyList();
}

Account* LoginServerAdapter::getAccount(unsigned int accountID) {
	return (static_cast<LoginServer*>(stub))->getAccount(accountID);
}

LoginEnumCluster* LoginServerAdapter::getLoginEnumClusterMessage() {
	return (static_cast<LoginServer*>(stub))->getLoginEnumClusterMessage();
}

LoginClusterStatus* LoginServerAdapter::getLoginClusterStatusMessage() {
	return (static_cast<LoginServer*>(stub))->getLoginClusterStatusMessage();
}

/*
 *	LoginServerHelper
 */

LoginServerHelper* LoginServerHelper::staticInitializer = LoginServerHelper::instance();

LoginServerHelper::LoginServerHelper() {
	className = "LoginServer";

	Core::getObjectBroker()->registerClass(className, this);
}

void LoginServerHelper::finalizeHelper() {
	LoginServerHelper::finalize();
}

DistributedObject* LoginServerHelper::instantiateObject() {
	return new LoginServer(DummyConstructorParameter::instance());
}

DistributedObjectServant* LoginServerHelper::instantiateServant() {
	return new LoginServerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* LoginServerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new LoginServerAdapter(static_cast<LoginServer*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

