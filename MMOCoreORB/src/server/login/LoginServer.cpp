/*
 *	server/login/LoginServer.cpp generated by engine3 IDL compiler 0.61
 */

#include "LoginServer.h"

#include "server/conf/ConfigManager.h"

#include "server/login/LoginProcessServerImplementation.h"

#include "server/login/account/Account.h"

#include "server/login/account/AccountManager.h"

#include "server/login/packets/LoginClusterStatus.h"

#include "server/login/packets/LoginEnumCluster.h"

/*
 *	LoginServerStub
 */

LoginServer::LoginServer(ConfigManager* config) : ManagedService(DummyConstructorParameter::instance()) {
	LoginServerImplementation* _implementation = new LoginServerImplementation(config);
	_impl = _implementation;
	_impl->_setStub(this);
}

LoginServer::LoginServer(DummyConstructorParameter* param) : ManagedService(param) {
}

LoginServer::~LoginServer() {
}


void LoginServer::initializeTransientMembers() {
	LoginServerImplementation* _implementation = (LoginServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

ServiceClient* LoginServer::createConnection(Socket* sock, SocketAddress& addr) {
	LoginServerImplementation* _implementation = (LoginServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->createConnection(sock, addr);
}

void LoginServer::initialize() {
	LoginServerImplementation* _implementation = (LoginServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		_implementation->initialize();
}

void LoginServer::run() {
	LoginServerImplementation* _implementation = (LoginServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		method.executeWithVoidReturn();
	} else
		_implementation->run();
}

void LoginServer::shutdown() {
	LoginServerImplementation* _implementation = (LoginServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		method.executeWithVoidReturn();
	} else
		_implementation->shutdown();
}

void LoginServer::startManagers() {
	LoginServerImplementation* _implementation = (LoginServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		method.executeWithVoidReturn();
	} else
		_implementation->startManagers();
}

void LoginServer::stopManagers() {
	LoginServerImplementation* _implementation = (LoginServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		method.executeWithVoidReturn();
	} else
		_implementation->stopManagers();
}

void LoginServer::start(int p, int mconn) {
	LoginServerImplementation* _implementation = (LoginServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addSignedIntParameter(p);
		method.addSignedIntParameter(mconn);

		method.executeWithVoidReturn();
	} else
		_implementation->start(p, mconn);
}

void LoginServer::stop() {
	LoginServerImplementation* _implementation = (LoginServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		method.executeWithVoidReturn();
	} else
		_implementation->stop();
}

void LoginServer::handleMessage(ServiceClient* client, Packet* message) {
	LoginServerImplementation* _implementation = (LoginServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->handleMessage(client, message);
}

bool LoginServer::handleError(ServiceClient* client, Exception& e) {
	LoginServerImplementation* _implementation = (LoginServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->handleError(client, e);
}

void LoginServer::printInfo() {
	LoginServerImplementation* _implementation = (LoginServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		method.executeWithVoidReturn();
	} else
		_implementation->printInfo();
}

void LoginServer::populateGalaxyList() {
	LoginServerImplementation* _implementation = (LoginServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		method.executeWithVoidReturn();
	} else
		_implementation->populateGalaxyList();
}

AccountManager* LoginServer::getAccountManager() {
	LoginServerImplementation* _implementation = (LoginServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getAccountManager();
}

Account* LoginServer::getAccount(unsigned int accountID) {
	LoginServerImplementation* _implementation = (LoginServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addUnsignedIntParameter(accountID);

		return (Account*) method.executeWithObjectReturn();
	} else
		return _implementation->getAccount(accountID);
}

LoginEnumCluster* LoginServer::getLoginEnumClusterMessage() {
	LoginServerImplementation* _implementation = (LoginServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);

		return (LoginEnumCluster*) method.executeWithObjectReturn();
	} else
		return _implementation->getLoginEnumClusterMessage();
}

LoginClusterStatus* LoginServer::getLoginClusterStatusMessage() {
	LoginServerImplementation* _implementation = (LoginServerImplementation*) _getImplementation();
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		return (LoginClusterStatus*) method.executeWithObjectReturn();
	} else
		return _implementation->getLoginClusterStatusMessage();
}

DistributedObjectServant* LoginServer::_getImplementation() {
	return _impl;}

void LoginServer::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;}

/*
 *	LoginServerImplementation
 */

LoginServerImplementation::LoginServerImplementation(DummyConstructorParameter* param) : ManagedServiceImplementation(param) {
	_initializeImplementation();
}


LoginServerImplementation::~LoginServerImplementation() {
}


void LoginServerImplementation::finalize() {
}

void LoginServerImplementation::_initializeImplementation() {
	_setClassHelper(LoginServerHelper::instance());

	_serializationHelperMethod();
}

void LoginServerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (LoginServer*) stub;
	ManagedServiceImplementation::_setStub(stub);
}

DistributedObjectStub* LoginServerImplementation::_getStub() {
	return _this;
}

LoginServerImplementation::operator const LoginServer*() {
	return _this;
}

void LoginServerImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void LoginServerImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void LoginServerImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void LoginServerImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void LoginServerImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void LoginServerImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void LoginServerImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void LoginServerImplementation::_serializationHelperMethod() {
	ManagedServiceImplementation::_serializationHelperMethod();

	_setClassName("LoginServer");

	addSerializableVariable("procThreadCount", &procThreadCount);
}

AccountManager* LoginServerImplementation::getAccountManager() {
	// server/login/LoginServer.idl(69):  		return accountManager;
	return accountManager;
}

Account* LoginServerImplementation::getAccount(unsigned int accountID) {
	// server/login/LoginServer.idl(73):  		return accountManager.getAccount(accountID);
	return accountManager->getAccount(accountID);
}

LoginEnumCluster* LoginServerImplementation::getLoginEnumClusterMessage() {
	// server/login/LoginServer.idl(77):  		return (LoginEnumCluster) enumClusterMessage.clone();
	return (LoginEnumCluster*) enumClusterMessage->clone();
}

LoginClusterStatus* LoginServerImplementation::getLoginClusterStatusMessage() {
	// server/login/LoginServer.idl(81):  		return (LoginClusterStatus) clusterStatusMessage.clone();
	return (LoginClusterStatus*) clusterStatusMessage->clone();
}

/*
 *	LoginServerAdapter
 */

LoginServerAdapter::LoginServerAdapter(LoginServerImplementation* obj) : ManagedServiceAdapter(obj) {
}

Packet* LoginServerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initializeTransientMembers();
		break;
	case 7:
		initialize();
		break;
	case 8:
		run();
		break;
	case 9:
		shutdown();
		break;
	case 10:
		startManagers();
		break;
	case 11:
		stopManagers();
		break;
	case 12:
		start(inv->getSignedIntParameter(), inv->getSignedIntParameter());
		break;
	case 13:
		stop();
		break;
	case 14:
		printInfo();
		break;
	case 15:
		populateGalaxyList();
		break;
	case 16:
		resp->insertLong(getAccount(inv->getUnsignedIntParameter())->_getObjectID());
		break;
	case 17:
		resp->insertLong(getLoginEnumClusterMessage()->_getObjectID());
		break;
	case 18:
		resp->insertLong(getLoginClusterStatusMessage()->_getObjectID());
		break;
	default:
		return NULL;
	}

	return resp;
}

void LoginServerAdapter::initializeTransientMembers() {
	((LoginServerImplementation*) impl)->initializeTransientMembers();
}

void LoginServerAdapter::initialize() {
	((LoginServerImplementation*) impl)->initialize();
}

void LoginServerAdapter::run() {
	((LoginServerImplementation*) impl)->run();
}

void LoginServerAdapter::shutdown() {
	((LoginServerImplementation*) impl)->shutdown();
}

void LoginServerAdapter::startManagers() {
	((LoginServerImplementation*) impl)->startManagers();
}

void LoginServerAdapter::stopManagers() {
	((LoginServerImplementation*) impl)->stopManagers();
}

void LoginServerAdapter::start(int p, int mconn) {
	((LoginServerImplementation*) impl)->start(p, mconn);
}

void LoginServerAdapter::stop() {
	((LoginServerImplementation*) impl)->stop();
}

void LoginServerAdapter::printInfo() {
	((LoginServerImplementation*) impl)->printInfo();
}

void LoginServerAdapter::populateGalaxyList() {
	((LoginServerImplementation*) impl)->populateGalaxyList();
}

Account* LoginServerAdapter::getAccount(unsigned int accountID) {
	return ((LoginServerImplementation*) impl)->getAccount(accountID);
}

LoginEnumCluster* LoginServerAdapter::getLoginEnumClusterMessage() {
	return ((LoginServerImplementation*) impl)->getLoginEnumClusterMessage();
}

LoginClusterStatus* LoginServerAdapter::getLoginClusterStatusMessage() {
	return ((LoginServerImplementation*) impl)->getLoginClusterStatusMessage();
}

/*
 *	LoginServerHelper
 */

LoginServerHelper* LoginServerHelper::staticInitializer = LoginServerHelper::instance();

LoginServerHelper::LoginServerHelper() {
	className = "LoginServer";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void LoginServerHelper::finalizeHelper() {
	LoginServerHelper::finalize();
}

DistributedObject* LoginServerHelper::instantiateObject() {
	return new LoginServer(DummyConstructorParameter::instance());
}

DistributedObjectServant* LoginServerHelper::instantiateServant() {
	return new LoginServerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* LoginServerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new LoginServerAdapter((LoginServerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

