/*
 *	server/login/account/Account.cpp generated by engine3 IDL compiler 0.60
 */

#include "Account.h"

#include "server/login/account/AccountManager.h"

#include "server/zone/ZoneClientSession.h"

/*
 *	AccountStub
 */

enum {RPC_HASMAXONLINECHARACTERS__ = 6,RPC_GETZONESESSION__INT_,RPC_CONTAINSZONESESSION__INT_,RPC_ADDZONESESSION__ZONECLIENTSESSION_,RPC_REMOVEZONESESSION__INT_,RPC_SETACCOUNTID__INT_,RPC_SETSTATIONID__INT_,RPC_SETADMINLEVEL__INT_,RPC_SETUSERNAME__STRING_,RPC_SETTIMECREATED__INT_,RPC_GETACCOUNTID__,RPC_GETSTATIONID__,RPC_GETADMINLEVEL__,RPC_GETUSERNAME__,RPC_GETTIMECREATED__};

Account::Account(AccountManager* accManage, const String& usern, unsigned int accountid, unsigned int stationid) : ManagedObject(DummyConstructorParameter::instance()) {
	AccountImplementation* _implementation = new AccountImplementation(accManage, usern, accountid, stationid);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("Account");
}

Account::Account(DummyConstructorParameter* param) : ManagedObject(param) {
	_setClassName("Account");
}

Account::~Account() {
}



bool Account::hasMaxOnlineCharacters() {
	AccountImplementation* _implementation = static_cast<AccountImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASMAXONLINECHARACTERS__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasMaxOnlineCharacters();
}

ZoneClientSession* Account::getZoneSession(unsigned int sessionID) {
	AccountImplementation* _implementation = static_cast<AccountImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETZONESESSION__INT_);
		method.addUnsignedIntParameter(sessionID);

		return static_cast<ZoneClientSession*>(method.executeWithObjectReturn());
	} else
		return _implementation->getZoneSession(sessionID);
}

bool Account::containsZoneSession(unsigned int sessionID) {
	AccountImplementation* _implementation = static_cast<AccountImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CONTAINSZONESESSION__INT_);
		method.addUnsignedIntParameter(sessionID);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->containsZoneSession(sessionID);
}

void Account::addZoneSession(ZoneClientSession* client) {
	AccountImplementation* _implementation = static_cast<AccountImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDZONESESSION__ZONECLIENTSESSION_);
		method.addObjectParameter(client);

		method.executeWithVoidReturn();
	} else
		_implementation->addZoneSession(client);
}

void Account::removeZoneSession(unsigned int sessionID) {
	AccountImplementation* _implementation = static_cast<AccountImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEZONESESSION__INT_);
		method.addUnsignedIntParameter(sessionID);

		method.executeWithVoidReturn();
	} else
		_implementation->removeZoneSession(sessionID);
}

void Account::setAccountID(unsigned int accountid) {
	AccountImplementation* _implementation = static_cast<AccountImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETACCOUNTID__INT_);
		method.addUnsignedIntParameter(accountid);

		method.executeWithVoidReturn();
	} else
		_implementation->setAccountID(accountid);
}

void Account::setStationID(unsigned int stationid) {
	AccountImplementation* _implementation = static_cast<AccountImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSTATIONID__INT_);
		method.addUnsignedIntParameter(stationid);

		method.executeWithVoidReturn();
	} else
		_implementation->setStationID(stationid);
}

void Account::setAdminLevel(unsigned int adminlvl) {
	AccountImplementation* _implementation = static_cast<AccountImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETADMINLEVEL__INT_);
		method.addUnsignedIntParameter(adminlvl);

		method.executeWithVoidReturn();
	} else
		_implementation->setAdminLevel(adminlvl);
}

void Account::setUsername(const String& usern) {
	AccountImplementation* _implementation = static_cast<AccountImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETUSERNAME__STRING_);
		method.addAsciiParameter(usern);

		method.executeWithVoidReturn();
	} else
		_implementation->setUsername(usern);
}

void Account::setTimeCreated(unsigned int seconds) {
	AccountImplementation* _implementation = static_cast<AccountImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETTIMECREATED__INT_);
		method.addUnsignedIntParameter(seconds);

		method.executeWithVoidReturn();
	} else
		_implementation->setTimeCreated(seconds);
}

unsigned int Account::getAccountID() {
	AccountImplementation* _implementation = static_cast<AccountImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETACCOUNTID__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getAccountID();
}

unsigned int Account::getStationID() {
	AccountImplementation* _implementation = static_cast<AccountImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSTATIONID__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getStationID();
}

unsigned int Account::getAdminLevel() {
	AccountImplementation* _implementation = static_cast<AccountImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETADMINLEVEL__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getAdminLevel();
}

String Account::getUsername() {
	AccountImplementation* _implementation = static_cast<AccountImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETUSERNAME__);

		method.executeWithAsciiReturn(_return_getUsername);
		return _return_getUsername;
	} else
		return _implementation->getUsername();
}

unsigned int Account::getTimeCreated() {
	AccountImplementation* _implementation = static_cast<AccountImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTIMECREATED__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getTimeCreated();
}

DistributedObjectServant* Account::_getImplementation() {

	_updated = true;
	return _impl;
}

void Account::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	AccountImplementation
 */

AccountImplementation::AccountImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}


AccountImplementation::~AccountImplementation() {
}


void AccountImplementation::finalize() {
}

void AccountImplementation::_initializeImplementation() {
	_setClassHelper(AccountHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void AccountImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<Account*>(stub);
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* AccountImplementation::_getStub() {
	return _this;
}

AccountImplementation::operator const Account*() {
	return _this;
}

void AccountImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void AccountImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void AccountImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void AccountImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void AccountImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void AccountImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void AccountImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void AccountImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("Account");

}

void AccountImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		String _name;
		_name.parseFromBinaryStream(stream);

		uint16 _varSize = stream->readShort();

		int _currentOffset = stream->getOffset();

		if(AccountImplementation::readObjectMember(stream, _name)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool AccountImplementation::readObjectMember(ObjectInputStream* stream, const String& _name) {
	if (ManagedObjectImplementation::readObjectMember(stream, _name))
		return true;

	if (_name == "Account.zoneSessions") {
		TypeInfo<VectorMap<unsigned int, ManagedReference<ZoneClientSession* > > >::parseFromBinaryStream(&zoneSessions, stream);
		return true;
	}

	if (_name == "Account.username") {
		TypeInfo<String >::parseFromBinaryStream(&username, stream);
		return true;
	}

	if (_name == "Account.accountID") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&accountID, stream);
		return true;
	}

	if (_name == "Account.stationID") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&stationID, stream);
		return true;
	}

	if (_name == "Account.adminLevel") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&adminLevel, stream);
		return true;
	}

	if (_name == "Account.created") {
		TypeInfo<unsigned int >::parseFromBinaryStream(&created, stream);
		return true;
	}


	return false;
}

void AccountImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = AccountImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int AccountImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedObjectImplementation::writeObjectMembers(stream);

	String _name;
	int _offset;
	uint16 _totalSize;
	_name = "Account.zoneSessions";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<VectorMap<unsigned int, ManagedReference<ZoneClientSession* > > >::toBinaryStream(&zoneSessions, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "Account.username";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<String >::toBinaryStream(&username, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "Account.accountID";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned int >::toBinaryStream(&accountID, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "Account.stationID";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned int >::toBinaryStream(&stationID, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "Account.adminLevel";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned int >::toBinaryStream(&adminLevel, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);

	_name = "Account.created";
	_name.toBinaryStream(stream);
	_offset = stream->getOffset();
	stream->writeShort(0);
	TypeInfo<unsigned int >::toBinaryStream(&created, stream);
	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
	stream->writeShort(_offset, _totalSize);


	return _count + 6;
}

AccountImplementation::AccountImplementation(AccountManager* accManage, const String& usern, unsigned int accountid, unsigned int stationid) {
	_initializeImplementation();
	// server/login/account/Account.idl():  		username = usern;
	username = usern;
	// server/login/account/Account.idl():  		accountID = accountid;
	accountID = accountid;
	// server/login/account/Account.idl():  		stationID = stationid;
	stationID = stationid;
	// server/login/account/Account.idl():  		accountManager = accManage;
	accountManager = accManage;
	// server/login/account/Account.idl():  		adminLevel = 0;
	adminLevel = 0;
	// server/login/account/Account.idl():  		created = System.getTime();
	created = System::getTime();
	// server/login/account/Account.idl():  		zoneSessions.setInsertPlan(2);
	(&zoneSessions)->setInsertPlan(2);
	// server/login/account/Account.idl():  		zoneSessions.setNullValue(null);
	(&zoneSessions)->setNullValue(NULL);
}

bool AccountImplementation::hasMaxOnlineCharacters() {
	// server/login/account/Account.idl():  		return zoneSessions.size() + 1 > accountManager.getMaxOnlineCharacters();
	return (&zoneSessions)->size() + 1 > accountManager->getMaxOnlineCharacters();
}

ZoneClientSession* AccountImplementation::getZoneSession(unsigned int sessionID) {
	// server/login/account/Account.idl():  		return zoneSessions.get(sessionID);
	return (&zoneSessions)->get(sessionID);
}

bool AccountImplementation::containsZoneSession(unsigned int sessionID) {
	// server/login/account/Account.idl():  		return zoneSessions.contains(sessionID);
	return (&zoneSessions)->contains(sessionID);
}

void AccountImplementation::addZoneSession(ZoneClientSession* client) {
	// server/login/account/Account.idl():  		zoneSessions.put(client.getSessionID(), client);
	(&zoneSessions)->put(client->getSessionID(), client);
}

void AccountImplementation::removeZoneSession(unsigned int sessionID) {
	// server/login/account/Account.idl():  		zoneSessions.drop(sessionID);
	(&zoneSessions)->drop(sessionID);
	// server/login/account/Account.idl():  	}
	if ((&zoneSessions)->size() < 1)	// server/login/account/Account.idl():  			accountManager.dropAccount(accountID);
	accountManager->dropAccount(accountID);
}

void AccountImplementation::setAccountID(unsigned int accountid) {
	// server/login/account/Account.idl():  		accountID = accountid;
	accountID = accountid;
}

void AccountImplementation::setStationID(unsigned int stationid) {
	// server/login/account/Account.idl():  		stationID = stationid;
	stationID = stationid;
}

void AccountImplementation::setAdminLevel(unsigned int adminlvl) {
	// server/login/account/Account.idl():  		adminLevel = adminlvl;
	adminLevel = adminlvl;
}

void AccountImplementation::setUsername(const String& usern) {
	// server/login/account/Account.idl():  		username = usern;
	username = usern;
}

void AccountImplementation::setTimeCreated(unsigned int seconds) {
	// server/login/account/Account.idl():  		created = seconds;
	created = seconds;
}

unsigned int AccountImplementation::getAccountID() {
	// server/login/account/Account.idl():  		return accountID;
	return accountID;
}

unsigned int AccountImplementation::getStationID() {
	// server/login/account/Account.idl():  		return stationID;
	return stationID;
}

unsigned int AccountImplementation::getAdminLevel() {
	// server/login/account/Account.idl():  		return adminLevel;
	return adminLevel;
}

String AccountImplementation::getUsername() {
	// server/login/account/Account.idl():  		return username;
	return username;
}

unsigned int AccountImplementation::getTimeCreated() {
	// server/login/account/Account.idl():  		return created;
	return created;
}

/*
 *	AccountAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


AccountAdapter::AccountAdapter(Account* obj) : ManagedObjectAdapter(obj) {
}

void AccountAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_HASMAXONLINECHARACTERS__:
		resp->insertBoolean(hasMaxOnlineCharacters());
		break;
	case RPC_GETZONESESSION__INT_:
		resp->insertLong(getZoneSession(inv->getUnsignedIntParameter())->_getObjectID());
		break;
	case RPC_CONTAINSZONESESSION__INT_:
		resp->insertBoolean(containsZoneSession(inv->getUnsignedIntParameter()));
		break;
	case RPC_ADDZONESESSION__ZONECLIENTSESSION_:
		addZoneSession(static_cast<ZoneClientSession*>(inv->getObjectParameter()));
		break;
	case RPC_REMOVEZONESESSION__INT_:
		removeZoneSession(inv->getUnsignedIntParameter());
		break;
	case RPC_SETACCOUNTID__INT_:
		setAccountID(inv->getUnsignedIntParameter());
		break;
	case RPC_SETSTATIONID__INT_:
		setStationID(inv->getUnsignedIntParameter());
		break;
	case RPC_SETADMINLEVEL__INT_:
		setAdminLevel(inv->getUnsignedIntParameter());
		break;
	case RPC_SETUSERNAME__STRING_:
		setUsername(inv->getAsciiParameter(_param0_setUsername__String_));
		break;
	case RPC_SETTIMECREATED__INT_:
		setTimeCreated(inv->getUnsignedIntParameter());
		break;
	case RPC_GETACCOUNTID__:
		resp->insertInt(getAccountID());
		break;
	case RPC_GETSTATIONID__:
		resp->insertInt(getStationID());
		break;
	case RPC_GETADMINLEVEL__:
		resp->insertInt(getAdminLevel());
		break;
	case RPC_GETUSERNAME__:
		resp->insertAscii(getUsername());
		break;
	case RPC_GETTIMECREATED__:
		resp->insertInt(getTimeCreated());
		break;
	default:
		throw Exception("Method does not exists");
	}
}

bool AccountAdapter::hasMaxOnlineCharacters() {
	return (static_cast<Account*>(stub))->hasMaxOnlineCharacters();
}

ZoneClientSession* AccountAdapter::getZoneSession(unsigned int sessionID) {
	return (static_cast<Account*>(stub))->getZoneSession(sessionID);
}

bool AccountAdapter::containsZoneSession(unsigned int sessionID) {
	return (static_cast<Account*>(stub))->containsZoneSession(sessionID);
}

void AccountAdapter::addZoneSession(ZoneClientSession* client) {
	(static_cast<Account*>(stub))->addZoneSession(client);
}

void AccountAdapter::removeZoneSession(unsigned int sessionID) {
	(static_cast<Account*>(stub))->removeZoneSession(sessionID);
}

void AccountAdapter::setAccountID(unsigned int accountid) {
	(static_cast<Account*>(stub))->setAccountID(accountid);
}

void AccountAdapter::setStationID(unsigned int stationid) {
	(static_cast<Account*>(stub))->setStationID(stationid);
}

void AccountAdapter::setAdminLevel(unsigned int adminlvl) {
	(static_cast<Account*>(stub))->setAdminLevel(adminlvl);
}

void AccountAdapter::setUsername(const String& usern) {
	(static_cast<Account*>(stub))->setUsername(usern);
}

void AccountAdapter::setTimeCreated(unsigned int seconds) {
	(static_cast<Account*>(stub))->setTimeCreated(seconds);
}

unsigned int AccountAdapter::getAccountID() {
	return (static_cast<Account*>(stub))->getAccountID();
}

unsigned int AccountAdapter::getStationID() {
	return (static_cast<Account*>(stub))->getStationID();
}

unsigned int AccountAdapter::getAdminLevel() {
	return (static_cast<Account*>(stub))->getAdminLevel();
}

String AccountAdapter::getUsername() {
	return (static_cast<Account*>(stub))->getUsername();
}

unsigned int AccountAdapter::getTimeCreated() {
	return (static_cast<Account*>(stub))->getTimeCreated();
}

/*
 *	AccountHelper
 */

AccountHelper* AccountHelper::staticInitializer = AccountHelper::instance();

AccountHelper::AccountHelper() {
	className = "Account";

	Core::getObjectBroker()->registerClass(className, this);
}

void AccountHelper::finalizeHelper() {
	AccountHelper::finalize();
}

DistributedObject* AccountHelper::instantiateObject() {
	return new Account(DummyConstructorParameter::instance());
}

DistributedObjectServant* AccountHelper::instantiateServant() {
	return new AccountImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* AccountHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new AccountAdapter(static_cast<Account*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

