/*
 *	server/login/account/Account.h generated by engine3 IDL compiler 0.60
 */

#ifndef ACCOUNT_H_
#define ACCOUNT_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace login {
namespace account {

class AccountManager;

} // namespace account
} // namespace login
} // namespace server

using namespace server::login::account;

namespace server {
namespace zone {

class ZoneClientSession;

} // namespace zone
} // namespace server

using namespace server::zone;

#include "server/login/objects/CharacterList.h"

#include "server/login/objects/CharacterListEntry.h"

#include "server/login/objects/GalaxyBanEntry.h"

#include "engine/core/ManagedObject.h"

#include "engine/log/Logger.h"

#include "system/util/VectorMap.h"

#include "system/lang/Time.h"

#include "system/lang/System.h"

namespace server {
namespace login {
namespace account {

class Account : public ManagedObject {
public:
	Account();

	void setActive(bool act);

	void setAccountID(unsigned int accountid);

	void setStationID(unsigned int stationid);

	void setAdminLevel(unsigned int adminlvl);

	void setUsername(const String& usern);

	void setBanExpires(unsigned int expires);

	void setBanReason(const String& reason);

	void setSalt(const String& s);

	void setBanAdmin(unsigned int value);

	unsigned int getBanAdmin();

	void setTimeCreated(unsigned int seconds);

	bool isActive();

	unsigned int getAccountID();

	unsigned int getStationID();

	unsigned int getAdminLevel();

	String getUsername();

	String getSalt();

	unsigned int getTimeCreated();

	void updateFromDatabase();

	void updateAccount();

	void updateCharacters();

	void updateGalaxyBans();

	unsigned int getBanExpires();

	String getBanReason();

	bool isBanned();

	CharacterList* getCharacterList();

	GalaxyBanEntry* getGalaxyBan(unsigned const int galaxy);

	CharacterListEntry* getCharacterBan(unsigned const int galaxy, const String& name);

	DistributedObjectServant* _getImplementation();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	Account(DummyConstructorParameter* param);

	virtual ~Account();

	friend class AccountHelper;
};

} // namespace account
} // namespace login
} // namespace server

using namespace server::login::account;

namespace server {
namespace login {
namespace account {

class AccountImplementation : public ManagedObjectImplementation, public Logger {
protected:
	bool active;

	String username;

	String salt;

	unsigned int accountID;

	unsigned int stationID;

	unsigned int adminLevel;

	unsigned int created;

	Reference<CharacterList* > characterList;

	VectorMap<unsigned int, Reference<GalaxyBanEntry*> > galaxyBans;

	unsigned int banExpires;

	String banReason;

	unsigned int banAdmin;

public:
	AccountImplementation();

	AccountImplementation(DummyConstructorParameter* param);

	void setActive(bool act);

	void setAccountID(unsigned int accountid);

	void setStationID(unsigned int stationid);

	void setAdminLevel(unsigned int adminlvl);

	void setUsername(const String& usern);

	void setBanExpires(unsigned int expires);

	void setBanReason(const String& reason);

	void setSalt(const String& s);

	void setBanAdmin(unsigned int value);

	unsigned int getBanAdmin();

	void setTimeCreated(unsigned int seconds);

	bool isActive();

	unsigned int getAccountID();

	unsigned int getStationID();

	unsigned int getAdminLevel();

	String getUsername();

	String getSalt();

	unsigned int getTimeCreated();

	void updateFromDatabase();

	void updateAccount();

	void updateCharacters();

	void updateGalaxyBans();

	unsigned int getBanExpires();

	String getBanReason();

	bool isBanned();

	CharacterList* getCharacterList();

	GalaxyBanEntry* getGalaxyBan(unsigned const int galaxy);

	CharacterListEntry* getCharacterBan(unsigned const int galaxy, const String& name);

	WeakReference<Account*> _this;

	operator const Account*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~AccountImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const String& name);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class Account;
};

class AccountAdapter : public ManagedObjectAdapter {
public:
	AccountAdapter(Account* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void setActive(bool act);

	void setAccountID(unsigned int accountid);

	void setStationID(unsigned int stationid);

	void setAdminLevel(unsigned int adminlvl);

	void setUsername(const String& usern);

	void setBanExpires(unsigned int expires);

	void setBanReason(const String& reason);

	void setSalt(const String& s);

	void setBanAdmin(unsigned int value);

	unsigned int getBanAdmin();

	void setTimeCreated(unsigned int seconds);

	bool isActive();

	unsigned int getAccountID();

	unsigned int getStationID();

	unsigned int getAdminLevel();

	String getUsername();

	String getSalt();

	unsigned int getTimeCreated();

	void updateFromDatabase();

	void updateAccount();

	void updateCharacters();

	void updateGalaxyBans();

	unsigned int getBanExpires();

	String getBanReason();

	bool isBanned();

};

class AccountHelper : public DistributedObjectClassHelper, public Singleton<AccountHelper> {
	static AccountHelper* staticInitializer;

public:
	AccountHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<AccountHelper>;
};

} // namespace account
} // namespace login
} // namespace server

using namespace server::login::account;

#endif /*ACCOUNT_H_*/
